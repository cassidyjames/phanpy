{"version":3,"file":"main-h6F66Bj1.js","sources":["../../src/utils/usePageVisibility.js","../../src/components/background-service.jsx","../../src/components/compose-button.jsx","../../src/components/keyboard-shortcuts-help.jsx","../../src/pages/accounts.jsx","../../src/assets/logo.svg","../../src/utils/push-notifications.js","../../src/pages/settings.jsx","../../src/utils/focus-deck.jsx","../../src/utils/useLocationChange.js","../../src/components/list-add-edit.jsx","../../src/components/account-info.jsx","../../src/components/account-sheet.jsx","../../src/components/drafts.jsx","../../src/components/generic-accounts.jsx","../../src/components/media-alt-modal.jsx","../../src/utils/color-utils.js","../../src/components/media-modal.jsx","../../src/assets/floating-button.svg","../../src/assets/multi-column.svg","../../src/assets/tab-menu-bar.svg","../../src/components/AsyncText.jsx","../../src/components/shortcuts-settings.jsx","../../src/components/modals.jsx","../../src/components/follow-request-buttons.jsx","../../src/components/notification.jsx","../../src/components/notification-service.jsx","../../src/components/search-form.jsx","../../src/components/search-command.jsx","../../src/components/shortcuts.jsx","../../src/utils/timeline-utils.jsx","../../src/utils/useScroll.js","../../src/components/media-post.jsx","../../src/components/nav-menu.jsx","../../src/components/timeline.jsx","../../src/pages/account-statuses.jsx","../../src/pages/bookmarks.jsx","../../src/pages/favourites.jsx","../../src/pages/followed-hashtags.jsx","../../src/pages/following.jsx","../../src/pages/hashtag.jsx","../../src/pages/list.jsx","../../src/pages/mentions.jsx","../../src/utils/group-notifications.jsx","../../src/pages/notifications.jsx","../../src/pages/public.jsx","../../src/pages/trending.jsx","../../src/components/columns.jsx","../../src/pages/home.jsx","../../src/utils/get-instance-status-url.js","../../src/pages/http-route.jsx","../../src/pages/lists.jsx","../../src/data/instances.json?url","../../src/utils/auth.js","../../src/pages/login.jsx","../../src/pages/search.jsx","../../src/pages/status.jsx","../../src/pages/status-route.jsx","../../src/assets/features/boosts-carousel.jpg","../../src/assets/features/grouped-notifications.jpg","../../src/assets/features/multi-column.jpg","../../src/assets/features/multi-hashtag-timeline.jpg","../../src/assets/features/nested-comments-thread.jpg","../../src/assets/logo-text.svg","../../src/pages/welcome.jsx","../../src/utils/toast-alert.js","../../src/app.jsx","../../src/main.jsx"],"sourcesContent":["import { useEffect, useRef } from 'preact/hooks';\n\nexport default function usePageVisibility(fn = () => {}, deps = []) {\n  const savedCallback = useRef(fn);\n  useEffect(() => {\n    savedCallback.current = fn;\n  }, [deps]);\n\n  useEffect(() => {\n    const handleVisibilityChange = () => {\n      const hidden = document.hidden || document.visibilityState === 'hidden';\n      console.log('👀 Page visibility changed', hidden ? 'hidden' : 'visible');\n      savedCallback.current(!hidden);\n    };\n\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    return () =>\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n  }, []);\n}\n","import { memo } from 'preact/compat';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\n\nimport { api } from '../utils/api';\nimport showToast from '../utils/show-toast';\nimport states, { saveStatus } from '../utils/states';\nimport useInterval from '../utils/useInterval';\nimport usePageVisibility from '../utils/usePageVisibility';\n\nconst STREAMING_TIMEOUT = 1000 * 3; // 3 seconds\nconst POLL_INTERVAL = 15_000; // 15 seconds\n\nexport default memo(function BackgroundService({ isLoggedIn }) {\n  // Notifications service\n  // - WebSocket to receive notifications when page is visible\n  const [visible, setVisible] = useState(true);\n  usePageVisibility(setVisible);\n  const checkLatestNotification = async (masto, instance, skipCheckMarkers) => {\n    if (states.notificationsLast) {\n      const notificationsIterator = masto.v1.notifications.list({\n        limit: 1,\n        sinceId: states.notificationsLast.id,\n      });\n      const { value: notifications } = await notificationsIterator.next();\n      if (notifications?.length) {\n        if (skipCheckMarkers) {\n          states.notificationsShowNew = true;\n        } else {\n          let lastReadId;\n          try {\n            const markers = await masto.v1.markers.fetch({\n              timeline: 'notifications',\n            });\n            lastReadId = markers?.notifications?.lastReadId;\n          } catch (e) {}\n          if (lastReadId) {\n            states.notificationsShowNew = notifications[0].id !== lastReadId;\n          } else {\n            states.notificationsShowNew = true;\n          }\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    let sub;\n    let pollNotifications;\n    if (isLoggedIn && visible) {\n      const { masto, streaming, instance } = api();\n      (async () => {\n        // 1. Get the latest notification\n        await checkLatestNotification(masto, instance);\n\n        let hasStreaming = false;\n        // 2. Start streaming\n        if (streaming) {\n          pollNotifications = setTimeout(() => {\n            (async () => {\n              try {\n                hasStreaming = true;\n                sub = streaming.user.notification.subscribe();\n                console.log('🎏 Streaming notification', sub);\n                for await (const entry of sub) {\n                  if (!sub) break;\n                  if (!visible) break;\n                  console.log('🔔🔔 Notification entry', entry);\n                  if (entry.event === 'notification') {\n                    console.log('🔔🔔 Notification', entry);\n                    saveStatus(entry.payload, instance, {\n                      skipThreading: true,\n                    });\n                  }\n                  states.notificationsShowNew = true;\n                }\n              } catch (e) {\n                hasStreaming = false;\n                console.error(e);\n              }\n\n              if (!hasStreaming) {\n                console.log('🎏 Streaming failed, fallback to polling');\n                pollNotifications = setInterval(() => {\n                  checkLatestNotification(masto, instance, true);\n                }, POLL_INTERVAL);\n              }\n            })();\n          }, STREAMING_TIMEOUT);\n        }\n      })();\n    }\n    return () => {\n      sub?.unsubscribe?.();\n      sub = null;\n      clearTimeout(pollNotifications);\n      clearInterval(pollNotifications);\n    };\n  }, [visible, isLoggedIn]);\n\n  // Check for updates service\n  const lastCheckDate = useRef();\n  const checkForUpdates = () => {\n    lastCheckDate.current = Date.now();\n    console.log('✨ Check app update');\n    fetch('./version.json')\n      .then((r) => r.json())\n      .then((info) => {\n        if (info) states.appVersion = info;\n      })\n      .catch((e) => {\n        console.error(e);\n      });\n  };\n  useInterval(checkForUpdates, visible && 1000 * 60 * 30); // 30 minutes\n  usePageVisibility((visible) => {\n    if (visible) {\n      if (!lastCheckDate.current) {\n        checkForUpdates();\n      } else {\n        const diff = Date.now() - lastCheckDate.current;\n        if (diff > 1000 * 60 * 60) {\n          // 1 hour\n          checkForUpdates();\n        }\n      }\n    }\n  });\n\n  // Global keyboard shortcuts \"service\"\n  useHotkeys('shift+alt+k', () => {\n    const currentCloakMode = states.settings.cloakMode;\n    states.settings.cloakMode = !currentCloakMode;\n    showToast({\n      text: `Cloak mode ${currentCloakMode ? 'disabled' : 'enabled'}`,\n    });\n  });\n\n  return null;\n});\n","import { useHotkeys } from 'react-hotkeys-hook';\n\nimport openCompose from '../utils/open-compose';\nimport states from '../utils/states';\n\nimport Icon from './icon';\n\nexport default function ComposeButton() {\n  function handleButton(e) {\n    if (e.shiftKey) {\n      const newWin = openCompose();\n\n      if (!newWin) {\n        states.showCompose = true;\n      }\n    } else {\n      states.showCompose = true;\n    }\n  }\n\n  useHotkeys('c, shift+c', handleButton, {\n    ignoreEventWhen: (e) => {\n      const hasModal = !!document.querySelector('#modal-container > *');\n      return hasModal;\n    },\n  });\n\n  return (\n    <button type=\"button\" id=\"compose-button\" onClick={handleButton}>\n      <Icon icon=\"quill\" size=\"xl\" alt=\"Compose\" />\n    </button>\n  );\n}\n","import './keyboard-shortcuts-help.css';\n\nimport { memo } from 'preact/compat';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { useSnapshot } from 'valtio';\n\nimport states from '../utils/states';\n\nimport Icon from './icon';\nimport Modal from './modal';\n\nexport default memo(function KeyboardShortcutsHelp() {\n  const snapStates = useSnapshot(states);\n\n  function onClose() {\n    states.showKeyboardShortcutsHelp = false;\n  }\n\n  useHotkeys(\n    '?, shift+?',\n    (e) => {\n      console.log('help');\n      states.showKeyboardShortcutsHelp = true;\n    },\n    {\n      ignoreEventWhen: (e) => {\n        const hasModal = !!document.querySelector('#modal-container > *');\n        return hasModal;\n      },\n    },\n  );\n\n  const escRef = useHotkeys('esc', onClose, []);\n\n  return (\n    !!snapStates.showKeyboardShortcutsHelp && (\n      <Modal\n        class=\"light\"\n        onClick={(e) => {\n          if (e.target === e.currentTarget) {\n            onClose();\n          }\n        }}\n      >\n        <div\n          id=\"keyboard-shortcuts-help-container\"\n          class=\"sheet\"\n          tabindex=\"-1\"\n          ref={escRef}\n        >\n          <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n            <Icon icon=\"x\" />\n          </button>\n          <header>\n            <h2>Keyboard shortcuts</h2>\n          </header>\n          <main>\n            <table>\n              {[\n                {\n                  action: 'Keyboard shortcuts help',\n                  keys: <kbd>?</kbd>,\n                },\n                {\n                  action: 'Next post',\n                  keys: <kbd>j</kbd>,\n                },\n                {\n                  action: 'Previous post',\n                  keys: <kbd>k</kbd>,\n                },\n                {\n                  action: 'Skip carousel to next post',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>j</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Skip carousel to previous post',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>k</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Open post details',\n                  keys: (\n                    <>\n                      <kbd>Enter</kbd> or <kbd>o</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Toggle expanded/collapsed thread',\n                  keys: <kbd>x</kbd>,\n                },\n                {\n                  action: 'Close post or dialogs',\n                  keys: (\n                    <>\n                      <kbd>Esc</kbd> or <kbd>Backspace</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Focus column in multi-column mode',\n                  keys: (\n                    <>\n                      <kbd>1</kbd> to <kbd>9</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Compose new post',\n                  keys: <kbd>c</kbd>,\n                },\n                {\n                  action: 'Compose new post (new window)',\n                  className: 'insignificant',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>c</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Send post',\n                  keys: (\n                    <>\n                      <kbd>Ctrl</kbd> + <kbd>Enter</kbd> or <kbd>⌘</kbd> +{' '}\n                      <kbd>Enter</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Search',\n                  keys: <kbd>/</kbd>,\n                },\n                {\n                  action: 'Reply',\n                  keys: <kbd>r</kbd>,\n                },\n                {\n                  action: 'Reply (new window)',\n                  className: 'insignificant',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>r</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Like (favourite)',\n                  keys: (\n                    <>\n                      <kbd>l</kbd> or <kbd>f</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Boost',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>b</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Bookmark',\n                  keys: <kbd>d</kbd>,\n                },\n                {\n                  action: 'Toggle Cloak mode',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>Alt</kbd> + <kbd>k</kbd>\n                    </>\n                  ),\n                },\n              ].map(({ action, className, keys }) => (\n                <tr key={action}>\n                  <th class={className}>{action}</th>\n                  <td>{keys}</td>\n                </tr>\n              ))}\n            </table>\n          </main>\n        </div>\n      </Modal>\n    )\n  );\n});\n","import './accounts.css';\n\nimport { useAutoAnimate } from '@formkit/auto-animate/preact';\nimport { Menu, MenuDivider, MenuItem } from '@szhsin/react-menu';\nimport { useReducer } from 'preact/hooks';\n\nimport Avatar from '../components/avatar';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Menu2 from '../components/menu2';\nimport MenuConfirm from '../components/menu-confirm';\nimport NameText from '../components/name-text';\nimport { api } from '../utils/api';\nimport states from '../utils/states';\nimport store from '../utils/store';\n\nfunction Accounts({ onClose }) {\n  const { masto } = api();\n  // Accounts\n  const accounts = store.local.getJSON('accounts');\n  const currentAccount = store.session.get('currentAccount');\n  const moreThanOneAccount = accounts.length > 1;\n\n  const [_, reload] = useReducer((x) => x + 1, 0);\n  const [accountsListParent] = useAutoAnimate();\n\n  return (\n    <div id=\"accounts-container\" class=\"sheet\" tabIndex=\"-1\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header class=\"header-grid\">\n        <h2>Accounts</h2>\n      </header>\n      <main>\n        <section>\n          <ul class=\"accounts-list\" ref={accountsListParent}>\n            {accounts.map((account, i) => {\n              const isCurrent = account.info.id === currentAccount;\n              const isDefault = i === 0; // first account is always default\n              return (\n                <li key={account.info.id}>\n                  <div>\n                    {moreThanOneAccount && (\n                      <span class={`current ${isCurrent ? 'is-current' : ''}`}>\n                        <Icon icon=\"check-circle\" alt=\"Current\" />\n                      </span>\n                    )}\n                    <Avatar\n                      url={account.info.avatarStatic}\n                      size=\"xxl\"\n                      onDblClick={async () => {\n                        if (isCurrent) {\n                          try {\n                            const info = await masto.v1.accounts\n                              .$select(account.info.id)\n                              .fetch();\n                            console.log('fetched account info', info);\n                            account.info = info;\n                            store.local.setJSON('accounts', accounts);\n                            reload();\n                          } catch (e) {}\n                        }\n                      }}\n                    />\n                    <NameText\n                      account={\n                        moreThanOneAccount\n                          ? {\n                              ...account.info,\n                              acct: /@/.test(account.info.acct)\n                                ? account.info.acct\n                                : `${account.info.acct}@${account.instanceURL}`,\n                            }\n                          : account.info\n                      }\n                      showAcct\n                      onClick={() => {\n                        if (isCurrent) {\n                          states.showAccount = `${account.info.username}@${account.instanceURL}`;\n                        } else {\n                          store.session.set('currentAccount', account.info.id);\n                          location.reload();\n                        }\n                      }}\n                    />\n                  </div>\n                  <div class=\"actions\">\n                    {isDefault && moreThanOneAccount && (\n                      <>\n                        <span class=\"tag\">Default</span>{' '}\n                      </>\n                    )}\n                    <Menu2\n                      align=\"end\"\n                      menuButton={\n                        <button\n                          type=\"button\"\n                          title=\"More\"\n                          class=\"plain more-button\"\n                        >\n                          <Icon icon=\"more\" size=\"l\" alt=\"More\" />\n                        </button>\n                      }\n                    >\n                      <MenuItem\n                        onClick={() => {\n                          states.showAccount = `${account.info.username}@${account.instanceURL}`;\n                        }}\n                      >\n                        <Icon icon=\"user\" />\n                        <span>View profile…</span>\n                      </MenuItem>\n                      <MenuDivider />\n                      {moreThanOneAccount && (\n                        <MenuItem\n                          disabled={isDefault}\n                          onClick={() => {\n                            // Move account to the top of the list\n                            accounts.splice(i, 1);\n                            accounts.unshift(account);\n                            store.local.setJSON('accounts', accounts);\n                            reload();\n                          }}\n                        >\n                          <Icon icon=\"check-circle\" />\n                          <span>Set as default</span>\n                        </MenuItem>\n                      )}\n                      <MenuConfirm\n                        subMenu\n                        confirmLabel={\n                          <>\n                            <Icon icon=\"exit\" />\n                            <span>Log out @{account.info.acct}?</span>\n                          </>\n                        }\n                        disabled={!isCurrent}\n                        menuItemClassName=\"danger\"\n                        onClick={() => {\n                          // const yes = confirm('Log out?');\n                          // if (!yes) return;\n                          accounts.splice(i, 1);\n                          store.local.setJSON('accounts', accounts);\n                          // location.reload();\n                          location.href = location.pathname || '/';\n                        }}\n                      >\n                        <Icon icon=\"exit\" />\n                        <span>Log out…</span>\n                      </MenuConfirm>\n                    </Menu2>\n                  </div>\n                </li>\n              );\n            })}\n          </ul>\n          <p>\n            <Link to=\"/login\" class=\"button plain2\" onClick={onClose}>\n              <Icon icon=\"plus\" /> <span>Add an existing account</span>\n            </Link>\n          </p>\n          {moreThanOneAccount && (\n            <p>\n              <small>\n                Note: <i>Default</i> account will always be used for first load.\n                Switched accounts will persist during the session.\n              </small>\n            </p>\n          )}\n        </section>\n      </main>\n    </div>\n  );\n}\n\nexport default Accounts;\n","export default \"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20xml:space='preserve'%20fill-rule='evenodd'%20stroke-linejoin='round'%20stroke-miterlimit='2'%20clip-rule='evenodd'%20viewBox='0%200%2064%2064'%3e%3cpath%20fill='none'%20d='M0%200h63.994v63.994H0z'/%3e%3cpath%20fill='%23a4bff7'%20d='M37.774%2011.471c14.639%203.752%2019.034%2016.557%2015.889%2031.304-.696%203.261-2.563%206.661-6.356%208.693-3.204%201.717-8.07%202.537-15.338.55l-9.634-2.404C11.651%2046.992%208.378%2038.733%2010.027%2031.823c3.627-15.201%2015.543-23.48%2027.747-20.352Z'/%3e%3cpath%20fill='%23d8e7fe'%20d='M36.76%2015.429c12.289%203.15%2015.547%2014.114%2012.907%2026.493-.947%204.44-4.937%209.365-16.664%206.143l-9.684-2.417c-7.854-1.923-10.53-7.8-9.318-12.877%203.016-12.639%2012.611-19.943%2022.759-17.342Z'/%3e%3cpath%20fill='%236081e6'%20d='M27.471%2024.991c-1.457-.698-7.229%203.213-7.663%208.926-.182%202.39%204.55%203.237%205.071-.169.725-4.743%203.715-8.218%202.592-8.757Zm10.746%202.005c-2.083.327-.382%205.901-.595%2010.727-.123%202.8%204.388%203.464%204.703%202.011%201.098-5.073-2.066-13.058-4.108-12.738Z'/%3e%3c/svg%3e\"","// Utils for push notifications\nimport { api } from './api';\nimport { getCurrentAccount } from './store-utils';\n\n// Subscription is an object with the following structure:\n// {\n//   data: {\n//     alerts: {\n//       admin: {\n//         report: boolean,\n//         signUp: boolean,\n//       },\n//       favourite: boolean,\n//       follow: boolean,\n//       mention: boolean,\n//       poll: boolean,\n//       reblog: boolean,\n//       status: boolean,\n//       update: boolean,\n//     }\n//   },\n//   policy: \"all\" | \"followed\" | \"follower\" | \"none\",\n//   subscription: {\n//     endpoint: string,\n//     keys: {\n//       auth: string,\n//       p256dh: string,\n//     },\n//   },\n// }\n\n// Back-end CRUD\n// =============\n\nfunction createBackendPushSubscription(subscription) {\n  const { masto } = api();\n  return masto.v1.push.subscription.create(subscription);\n}\n\nfunction fetchBackendPushSubscription() {\n  const { masto } = api();\n  return masto.v1.push.subscription.fetch();\n}\n\nfunction updateBackendPushSubscription(subscription) {\n  const { masto } = api();\n  return masto.v1.push.subscription.update(subscription);\n}\n\nfunction removeBackendPushSubscription() {\n  const { masto } = api();\n  return masto.v1.push.subscription.remove();\n}\n\n// Front-end\n// =========\n\nexport function isPushSupported() {\n  return 'serviceWorker' in navigator && 'PushManager' in window;\n}\n\nexport function getRegistration() {\n  // return navigator.serviceWorker.ready;\n  return navigator.serviceWorker.getRegistration();\n}\n\nasync function getSubscription() {\n  const registration = await getRegistration();\n  const subscription = registration\n    ? await registration.pushManager.getSubscription()\n    : undefined;\n  return { registration, subscription };\n}\n\nfunction urlBase64ToUint8Array(base64String) {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = `${base64String}${padding}`\n    .replace(/-/g, '+')\n    .replace(/_/g, '/');\n\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n\n  return outputArray;\n}\n\n// Front-end <-> back-end\n// ======================\n\nexport async function initSubscription() {\n  if (!isPushSupported()) return;\n  const { subscription } = await getSubscription();\n  let backendSubscription = null;\n  try {\n    backendSubscription = await fetchBackendPushSubscription();\n  } catch (err) {\n    if (/(not found|unknown)/i.test(err.message)) {\n      // No subscription found\n    } else {\n      // Other error\n      throw err;\n    }\n  }\n  console.log('INIT subscription', {\n    subscription,\n    backendSubscription,\n  });\n\n  // Check if the subscription changed\n  if (backendSubscription && subscription) {\n    const sameEndpoint = backendSubscription.endpoint === subscription.endpoint;\n    const { vapidKey } = getCurrentAccount();\n    const sameKey = backendSubscription.serverKey === vapidKey;\n    if (!sameEndpoint) {\n      throw new Error('Backend subscription endpoint changed');\n    }\n    if (sameKey) {\n      // Subscription didn't change\n    } else {\n      // Subscription changed\n      console.error('🔔 Subscription changed', {\n        sameEndpoint,\n        serverKey: backendSubscription.serverKey,\n        vapIdKey: vapidKey,\n        endpoint1: backendSubscription.endpoint,\n        endpoint2: subscription.endpoint,\n        sameKey,\n        key1: backendSubscription.serverKey,\n        key2: vapidKey,\n      });\n      throw new Error('Backend subscription key and vapid key changed');\n      // Only unsubscribe from backend, not from browser\n      // await removeBackendPushSubscription();\n      // // Now let's resubscribe\n      // // NOTE: I have no idea if this works\n      // return await updateSubscription({\n      //   data: backendSubscription.data,\n      //   policy: backendSubscription.policy,\n      // });\n    }\n  }\n\n  if (subscription && !backendSubscription) {\n    // check if account's vapidKey is same as subscription's applicationServerKey\n    const { vapidKey } = getCurrentAccount();\n    const { applicationServerKey } = subscription.options;\n    const vapidKeyStr = urlBase64ToUint8Array(vapidKey).toString();\n    const applicationServerKeyStr = new Uint8Array(\n      applicationServerKey,\n    ).toString();\n    const sameKey = vapidKeyStr === applicationServerKeyStr;\n    if (sameKey) {\n      // Subscription didn't change\n    } else {\n      // Subscription changed\n      console.error('🔔 Subscription changed', {\n        vapidKeyStr,\n        applicationServerKeyStr,\n        sameKey,\n      });\n      // Unsubscribe since backend doesn't have a subscription\n      await subscription.unsubscribe();\n      throw new Error('Subscription key and vapid key changed');\n    }\n  }\n\n  // Check if backend subscription returns 404\n  // if (subscription && !backendSubscription) {\n  //   // Re-subscribe to backend\n  //   backendSubscription = await createBackendPushSubscription({\n  //     subscription,\n  //     data: {},\n  //     policy: 'all',\n  //   });\n  // }\n\n  return { subscription, backendSubscription };\n}\n\nexport async function updateSubscription({ data, policy }) {\n  console.log('🔔 Updating subscription', { data, policy });\n  if (!isPushSupported()) return;\n  let { registration, subscription } = await getSubscription();\n  let backendSubscription = null;\n\n  if (subscription) {\n    try {\n      backendSubscription = await updateBackendPushSubscription({\n        data,\n        policy,\n      });\n      // TODO: save subscription in user settings\n    } catch (error) {\n      // Backend doesn't have a subscription for this user\n      // Create a new one\n      backendSubscription = await createBackendPushSubscription({\n        subscription,\n        data,\n        policy,\n      });\n      // TODO: save subscription in user settings\n    }\n  } else {\n    // User is not subscribed\n    const { vapidKey } = getCurrentAccount();\n    if (!vapidKey) throw new Error('No server key found');\n    subscription = await registration.pushManager.subscribe({\n      userVisibleOnly: true,\n      applicationServerKey: urlBase64ToUint8Array(vapidKey),\n    });\n    backendSubscription = await createBackendPushSubscription({\n      subscription,\n      data,\n      policy,\n    });\n    // TODO: save subscription in user settings\n  }\n\n  return { subscription, backendSubscription };\n}\n\nexport async function removeSubscription() {\n  if (!isPushSupported()) return;\n  const { subscription } = await getSubscription();\n  if (subscription) {\n    await removeBackendPushSubscription();\n    await subscription.unsubscribe();\n  }\n}\n","import './settings.css';\n\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport logo from '../assets/logo.svg';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport RelativeTime from '../components/relative-time';\nimport targetLanguages from '../data/lingva-target-languages';\nimport { api } from '../utils/api';\nimport getTranslateTargetLanguage from '../utils/get-translate-target-language';\nimport localeCode2Text from '../utils/localeCode2Text';\nimport {\n  initSubscription,\n  isPushSupported,\n  removeSubscription,\n  updateSubscription,\n} from '../utils/push-notifications';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\nimport store from '../utils/store';\n\nconst DEFAULT_TEXT_SIZE = 16;\nconst TEXT_SIZES = [16, 17, 18, 19, 20];\n\nfunction Settings({ onClose }) {\n  const snapStates = useSnapshot(states);\n  const currentTheme = store.local.get('theme') || 'auto';\n  const themeFormRef = useRef();\n  const targetLanguage =\n    snapStates.settings.contentTranslationTargetLanguage || null;\n  const systemTargetLanguage = getTranslateTargetLanguage();\n  const systemTargetLanguageText = localeCode2Text(systemTargetLanguage);\n  const currentTextSize = store.local.get('textSize') || DEFAULT_TEXT_SIZE;\n\n  const [prefs, setPrefs] = useState(store.account.get('preferences') || {});\n  const { masto, authenticated, instance } = api();\n  // Get preferences every time Settings is opened\n  // NOTE: Disabled for now because I don't expect this to change often. Also for some reason, the /api/v1/preferences endpoint is cached for a while and return old prefs if refresh immediately after changing them.\n  // useEffect(() => {\n  //   const { masto } = api();\n  //   (async () => {\n  //     try {\n  //       const preferences = await masto.v1.preferences.fetch();\n  //       setPrefs(preferences);\n  //       store.account.set('preferences', preferences);\n  //     } catch (e) {\n  //       // Silently fail\n  //       console.error(e);\n  //     }\n  //   })();\n  // }, []);\n\n  return (\n    <div id=\"settings-container\" class=\"sheet\" tabIndex=\"-1\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Settings</h2>\n      </header>\n      <main>\n        <section>\n          <ul>\n            <li>\n              <div>\n                <label>Appearance</label>\n              </div>\n              <div>\n                <form\n                  ref={themeFormRef}\n                  onInput={(e) => {\n                    console.log(e);\n                    e.preventDefault();\n                    const formData = new FormData(themeFormRef.current);\n                    const theme = formData.get('theme');\n                    const html = document.documentElement;\n\n                    if (theme === 'auto') {\n                      html.classList.remove('is-light', 'is-dark');\n                    } else {\n                      html.classList.toggle('is-light', theme === 'light');\n                      html.classList.toggle('is-dark', theme === 'dark');\n                    }\n                    document\n                      .querySelector('meta[name=\"color-scheme\"]')\n                      .setAttribute(\n                        'content',\n                        theme === 'auto' ? 'dark light' : theme,\n                      );\n\n                    if (theme === 'auto') {\n                      store.local.del('theme');\n                    } else {\n                      store.local.set('theme', theme);\n                    }\n                  }}\n                >\n                  <div class=\"radio-group\">\n                    <label>\n                      <input\n                        type=\"radio\"\n                        name=\"theme\"\n                        value=\"light\"\n                        defaultChecked={currentTheme === 'light'}\n                      />\n                      <span>Light</span>\n                    </label>\n                    <label>\n                      <input\n                        type=\"radio\"\n                        name=\"theme\"\n                        value=\"dark\"\n                        defaultChecked={currentTheme === 'dark'}\n                      />\n                      <span>Dark</span>\n                    </label>\n                    <label>\n                      <input\n                        type=\"radio\"\n                        name=\"theme\"\n                        value=\"auto\"\n                        defaultChecked={\n                          currentTheme !== 'light' && currentTheme !== 'dark'\n                        }\n                      />\n                      <span>Auto</span>\n                    </label>\n                  </div>\n                </form>\n              </div>\n            </li>\n            <li>\n              <div>\n                <label>Text size</label>\n              </div>\n              <div class=\"range-group\">\n                <span style={{ fontSize: TEXT_SIZES[0] }}>A</span>{' '}\n                <input\n                  type=\"range\"\n                  min={TEXT_SIZES[0]}\n                  max={TEXT_SIZES[TEXT_SIZES.length - 1]}\n                  step=\"1\"\n                  value={currentTextSize}\n                  list=\"sizes\"\n                  onChange={(e) => {\n                    const value = parseInt(e.target.value, 10);\n                    const html = document.documentElement;\n                    // set CSS variable\n                    html.style.setProperty('--text-size', `${value}px`);\n                    // save to local storage\n                    if (value === DEFAULT_TEXT_SIZE) {\n                      store.local.del('textSize');\n                    } else {\n                      store.local.set('textSize', e.target.value);\n                    }\n                  }}\n                />{' '}\n                <span style={{ fontSize: TEXT_SIZES[TEXT_SIZES.length - 1] }}>\n                  A\n                </span>\n                <datalist id=\"sizes\">\n                  {TEXT_SIZES.map((size) => (\n                    <option value={size} />\n                  ))}\n                </datalist>\n              </div>\n            </li>\n          </ul>\n        </section>\n        {authenticated && (\n          <>\n            <h3>Posting</h3>\n            <section>\n              <ul>\n                <li>\n                  <div>\n                    <label for=\"posting-privacy-field\">\n                      Default visibility{' '}\n                      <Icon icon=\"cloud\" alt=\"Synced\" class=\"synced-icon\" />\n                    </label>\n                  </div>\n                  <div>\n                    <select\n                      id=\"posting-privacy-field\"\n                      value={prefs['posting:default:visibility'] || 'public'}\n                      onChange={(e) => {\n                        const { value } = e.target;\n                        (async () => {\n                          try {\n                            await masto.v1.accounts.updateCredentials({\n                              source: {\n                                privacy: value,\n                              },\n                            });\n                            setPrefs({\n                              ...prefs,\n                              'posting:default:visibility': value,\n                            });\n                            store.account.set('preferences', {\n                              ...prefs,\n                              'posting:default:visibility': value,\n                            });\n                          } catch (e) {\n                            alert('Failed to update posting privacy');\n                            console.error(e);\n                          }\n                        })();\n                      }}\n                    >\n                      <option value=\"public\">Public</option>\n                      <option value=\"unlisted\">Unlisted</option>\n                      <option value=\"private\">Followers only</option>\n                    </select>\n                  </div>\n                </li>\n              </ul>\n            </section>\n            <p class=\"section-postnote\">\n              <Icon icon=\"cloud\" alt=\"Synced\" class=\"synced-icon\" />{' '}\n              <small>\n                Synced to your instance server's settings.{' '}\n                <a\n                  href={`https://${instance}/`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  Go to your instance ({instance}) for more settings.\n                </a>\n              </small>\n            </p>\n          </>\n        )}\n        <h3>Experiments</h3>\n        <section>\n          <ul>\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.autoRefresh}\n                  onChange={(e) => {\n                    states.settings.autoRefresh = e.target.checked;\n                  }}\n                />{' '}\n                Auto refresh timeline posts\n              </label>\n            </li>\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.boostsCarousel}\n                  onChange={(e) => {\n                    states.settings.boostsCarousel = e.target.checked;\n                  }}\n                />{' '}\n                Boosts carousel\n              </label>\n            </li>\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.contentTranslation}\n                  onChange={(e) => {\n                    const { checked } = e.target;\n                    states.settings.contentTranslation = checked;\n                    if (!checked) {\n                      states.settings.contentTranslationTargetLanguage = null;\n                    }\n                  }}\n                />{' '}\n                Post translation\n              </label>\n              <div\n                class={`sub-section ${\n                  !snapStates.settings.contentTranslation\n                    ? 'more-insignificant'\n                    : ''\n                }`}\n              >\n                <div>\n                  <label>\n                    Translate to{' '}\n                    <select\n                      value={targetLanguage || ''}\n                      disabled={!snapStates.settings.contentTranslation}\n                      onChange={(e) => {\n                        states.settings.contentTranslationTargetLanguage =\n                          e.target.value || null;\n                      }}\n                    >\n                      <option value=\"\">\n                        System language ({systemTargetLanguageText})\n                      </option>\n                      <option disabled>──────────</option>\n                      {targetLanguages.map((lang) => (\n                        <option value={lang.code}>{lang.name}</option>\n                      ))}\n                    </select>\n                  </label>\n                </div>\n                <hr />\n                <p class=\"checkbox-fieldset\">\n                  Hide \"Translate\" button for\n                  {snapStates.settings.contentTranslationHideLanguages.length >\n                    0 && (\n                    <>\n                      {' '}\n                      (\n                      {\n                        snapStates.settings.contentTranslationHideLanguages\n                          .length\n                      }\n                      )\n                    </>\n                  )}\n                  :\n                  <div class=\"checkbox-fields\">\n                    {targetLanguages.map((lang) => (\n                      <label>\n                        <input\n                          type=\"checkbox\"\n                          checked={snapStates.settings.contentTranslationHideLanguages.includes(\n                            lang.code,\n                          )}\n                          onChange={(e) => {\n                            const { checked } = e.target;\n                            if (checked) {\n                              states.settings.contentTranslationHideLanguages.push(\n                                lang.code,\n                              );\n                            } else {\n                              states.settings.contentTranslationHideLanguages =\n                                snapStates.settings.contentTranslationHideLanguages.filter(\n                                  (code) => code !== lang.code,\n                                );\n                            }\n                          }}\n                        />{' '}\n                        {lang.name}\n                      </label>\n                    ))}\n                  </div>\n                </p>\n                <p class=\"insignificant\">\n                  <small>\n                    Note: This feature uses an external API to translate,\n                    powered by{' '}\n                    <a\n                      href=\"https://github.com/thedaviddelta/lingva-translate\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      Lingva Translate\n                    </a>\n                    .\n                  </small>\n                </p>\n                <hr />\n                <div>\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      checked={snapStates.settings.contentTranslationAutoInline}\n                      disabled={!snapStates.settings.contentTranslation}\n                      onChange={(e) => {\n                        states.settings.contentTranslationAutoInline =\n                          e.target.checked;\n                      }}\n                    />{' '}\n                    Auto inline translation\n                  </label>\n                  <p class=\"insignificant\">\n                    <small>\n                      Automatically show translation for posts in timeline. Only\n                      works for <b>short</b> posts without content warning,\n                      media and poll.\n                    </small>\n                  </p>\n                </div>\n              </div>\n            </li>\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.cloakMode}\n                  onChange={(e) => {\n                    states.settings.cloakMode = e.target.checked;\n                  }}\n                />{' '}\n                Cloak mode{' '}\n                <span class=\"insignificant\">\n                  (<samp>Text</samp> → <samp>████</samp>)\n                </span>\n              </label>\n              <div class=\"sub-section insignificant\">\n                <small>\n                  Replace text as blocks, useful when taking screenshots, for\n                  privacy reasons.\n                </small>\n              </div>\n            </li>\n            {authenticated && (\n              <li>\n                <button\n                  type=\"button\"\n                  class=\"light\"\n                  onClick={() => {\n                    states.showDrafts = true;\n                    states.showSettings = false;\n                  }}\n                >\n                  Unsent drafts\n                </button>\n              </li>\n            )}\n          </ul>\n        </section>\n        {authenticated && <PushNotificationsSection onClose={onClose} />}\n        <h3>About</h3>\n        <section>\n          <div\n            style={{\n              display: 'flex',\n              gap: 8,\n              lineHeight: 1.25,\n              alignItems: 'center',\n              marginTop: 8,\n            }}\n          >\n            <img\n              src={logo}\n              alt=\"\"\n              width=\"64\"\n              height=\"64\"\n              style={{\n                aspectRatio: '1/1',\n                verticalAlign: 'middle',\n                background: '#b7cdf9',\n                borderRadius: 12,\n              }}\n            />\n            <div>\n              <b>Phanpy</b>{' '}\n              <a\n                href=\"https://hachyderm.io/@phanpy\"\n                // target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  states.showAccount = 'phanpy@hachyderm.io';\n                }}\n              >\n                @phanpy\n              </a>\n              <br />\n              <a\n                href=\"https://github.com/cheeaun/phanpy\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                Built\n              </a>{' '}\n              by{' '}\n              <a\n                href=\"https://mastodon.social/@cheeaun\"\n                // target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  states.showAccount = 'cheeaun@mastodon.social';\n                }}\n              >\n                @cheeaun\n              </a>\n            </div>\n          </div>\n          <p>\n            <a\n              href=\"https://github.com/sponsors/cheeaun\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Sponsor\n            </a>{' '}\n            &middot;{' '}\n            <a\n              href=\"https://www.buymeacoffee.com/cheeaun\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Donate\n            </a>{' '}\n            &middot;{' '}\n            <a\n              href=\"https://github.com/cheeaun/phanpy/blob/main/PRIVACY.MD\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Privacy Policy\n            </a>\n          </p>\n          {__BUILD_TIME__ && (\n            <p>\n              Version:{' '}\n              <input\n                type=\"text\"\n                class=\"version-string\"\n                readOnly\n                size=\"18\" // Manually calculated here\n                value={`${__BUILD_TIME__.slice(0, 10).replace(/-/g, '.')}${\n                  __COMMIT_HASH__ ? `.${__COMMIT_HASH__}` : ''\n                }`}\n                onClick={(e) => {\n                  e.target.select();\n                  // Copy to clipboard\n                  try {\n                    navigator.clipboard.writeText(e.target.value);\n                    showToast('Version string copied');\n                  } catch (e) {\n                    console.warn(e);\n                    showToast('Unable to copy version string');\n                  }\n                }}\n              />{' '}\n              <span class=\"ib insignificant\">\n                (\n                <a\n                  href={`https://github.com/cheeaun/phanpy/commit/${__COMMIT_HASH__}`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  <RelativeTime datetime={new Date(__BUILD_TIME__)} />\n                </a>\n                )\n              </span>\n            </p>\n          )}\n        </section>\n      </main>\n    </div>\n  );\n}\n\nfunction PushNotificationsSection({ onClose }) {\n  if (!isPushSupported()) return null;\n\n  const { instance } = api();\n  const [uiState, setUIState] = useState('default');\n  const pushFormRef = useRef();\n  const [allowNofitications, setAllowNotifications] = useState(false);\n  const [needRelogin, setNeedRelogin] = useState(false);\n  const previousPolicyRef = useRef();\n  useEffect(() => {\n    (async () => {\n      setUIState('loading');\n      try {\n        const { subscription, backendSubscription } = await initSubscription();\n        if (\n          backendSubscription?.policy &&\n          backendSubscription.policy !== 'none'\n        ) {\n          setAllowNotifications(true);\n          const { alerts, policy } = backendSubscription;\n          previousPolicyRef.current = policy;\n          const { elements } = pushFormRef.current;\n          const policyEl = elements.namedItem(policy);\n          if (policyEl) policyEl.value = policy;\n          // alerts is {}, iterate it\n          Object.keys(alerts).forEach((alert) => {\n            const el = elements.namedItem(alert);\n            if (el?.type === 'checkbox') {\n              el.checked = true;\n            }\n          });\n        }\n        setUIState('default');\n      } catch (err) {\n        console.warn(err);\n        if (/outside.*authorized/i.test(err.message)) {\n          setNeedRelogin(true);\n        } else {\n          alert(err?.message || err);\n        }\n        setUIState('error');\n      }\n    })();\n  }, []);\n\n  const isLoading = uiState === 'loading';\n\n  return (\n    <form\n      ref={pushFormRef}\n      onChange={() => {\n        const values = Object.fromEntries(new FormData(pushFormRef.current));\n        const allowNofitications = !!values['policy-allow'];\n        const params = {\n          policy: values.policy,\n          data: {\n            alerts: {\n              mention: !!values.mention,\n              favourite: !!values.favourite,\n              reblog: !!values.reblog,\n              follow: !!values.follow,\n              follow_request: !!values.followRequest,\n              poll: !!values.poll,\n              update: !!values.update,\n              status: !!values.status,\n            },\n          },\n        };\n\n        let alertsCount = 0;\n        // Remove false values from data.alerts\n        // API defaults to false anyway\n        Object.keys(params.data.alerts).forEach((key) => {\n          if (!params.data.alerts[key]) {\n            delete params.data.alerts[key];\n          } else {\n            alertsCount++;\n          }\n        });\n        const policyChanged = previousPolicyRef.current !== params.policy;\n\n        console.log('PN Form', { values, allowNofitications, params });\n\n        if (allowNofitications && alertsCount > 0) {\n          if (policyChanged) {\n            console.debug('Policy changed.');\n            removeSubscription()\n              .then(() => {\n                updateSubscription(params);\n              })\n              .catch((err) => {\n                console.warn(err);\n                alert('Failed to update subscription. Please try again.');\n              });\n          } else {\n            updateSubscription(params).catch((err) => {\n              console.warn(err);\n              alert('Failed to update subscription. Please try again.');\n            });\n          }\n        } else {\n          removeSubscription().catch((err) => {\n            console.warn(err);\n            alert('Failed to remove subscription. Please try again.');\n          });\n        }\n      }}\n    >\n      <h3>Push Notifications (beta)</h3>\n      <section>\n        <ul>\n          <li>\n            <label>\n              <input\n                type=\"checkbox\"\n                disabled={isLoading || needRelogin}\n                name=\"policy-allow\"\n                checked={allowNofitications}\n                onChange={async (e) => {\n                  const { checked } = e.target;\n                  if (checked) {\n                    // Request permission\n                    const permission = await Notification.requestPermission();\n                    if (permission === 'granted') {\n                      setAllowNotifications(true);\n                    } else {\n                      setAllowNotifications(false);\n                      if (permission === 'denied') {\n                        alert(\n                          'Push notifications are blocked. Please enable them in your browser settings.',\n                        );\n                      }\n                    }\n                  } else {\n                    setAllowNotifications(false);\n                  }\n                }}\n              />{' '}\n              Allow from{' '}\n              <select\n                name=\"policy\"\n                disabled={isLoading || needRelogin || !allowNofitications}\n              >\n                {[\n                  {\n                    value: 'all',\n                    label: 'anyone',\n                  },\n                  {\n                    value: 'followed',\n                    label: 'people I follow',\n                  },\n                  {\n                    value: 'follower',\n                    label: 'followers',\n                  },\n                ].map((type) => (\n                  <option value={type.value}>{type.label}</option>\n                ))}\n              </select>\n            </label>\n            <div\n              class=\"shazam-container no-animation\"\n              style={{\n                width: '100%',\n              }}\n              hidden={!allowNofitications}\n            >\n              <div class=\"shazam-container-inner\">\n                <div class=\"sub-section\">\n                  <ul>\n                    {[\n                      {\n                        value: 'mention',\n                        label: 'Mentions',\n                      },\n                      {\n                        value: 'favourite',\n                        label: 'Likes',\n                      },\n                      {\n                        value: 'reblog',\n                        label: 'Boosts',\n                      },\n                      {\n                        value: 'follow',\n                        label: 'Follows',\n                      },\n                      {\n                        value: 'followRequest',\n                        label: 'Follow requests',\n                      },\n                      {\n                        value: 'poll',\n                        label: 'Polls',\n                      },\n                      {\n                        value: 'update',\n                        label: 'Post edits',\n                      },\n                      {\n                        value: 'status',\n                        label: 'New posts',\n                      },\n                    ].map((alert) => (\n                      <li>\n                        <label>\n                          <input type=\"checkbox\" name={alert.value} />{' '}\n                          {alert.label}\n                        </label>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              </div>\n            </div>\n            {needRelogin && (\n              <div class=\"sub-section\">\n                <p>\n                  Push permission was not granted since your last login. You'll\n                  need to{' '}\n                  <Link to={`/login?instance=${instance}`} onClick={onClose}>\n                    <b>log in</b> again to grant push permission\n                  </Link>\n                  .\n                </p>\n              </div>\n            )}\n          </li>\n        </ul>\n      </section>\n      <p class=\"section-postnote\">\n        <small>\n          NOTE: Push notifications only work for <b>one account</b>.\n        </small>\n      </p>\n    </form>\n  );\n}\n\nexport default Settings;\n","const focusDeck = () => {\n  let timer = setTimeout(() => {\n    const columns = document.getElementById('columns');\n    if (columns) {\n      // Focus first column\n      // columns.querySelector('.deck-container')?.focus?.();\n    } else {\n      const modals = document.querySelectorAll('#modal-container > *');\n      if (modals?.length) {\n        // Focus last modal\n        const modal = modals[modals.length - 1]; // last one\n        const modalFocusElement =\n          modal.querySelector('[tabindex=\"-1\"]') || modal;\n        if (modalFocusElement) {\n          modalFocusElement.focus();\n          return;\n        }\n      }\n      const backDrop = document.querySelector('.deck-backdrop');\n      if (backDrop) return;\n      // Focus last deck\n      const pages = document.querySelectorAll('.deck-container');\n      const page = pages[pages.length - 1]; // last one\n      if (page && page.tabIndex === -1) {\n        console.log('FOCUS', page);\n        page.focus();\n      }\n    }\n  }, 100);\n  return () => clearTimeout(timer);\n};\n\nexport default focusDeck;\n","import { useEffect, useRef } from 'preact/hooks';\nimport { useLocation } from 'react-router-dom';\n\n// Hook that runs a callback when the location changes\n// Won't run on the first render\n\nexport default function useLocationChange(fn) {\n  if (!fn) return;\n  const location = useLocation();\n  const currentLocationRef = useRef(location.pathname);\n  useEffect(() => {\n    // console.log('location', {\n    //   current: currentLocationRef.current,\n    //   next: location.pathname,\n    // });\n    if (\n      currentLocationRef.current &&\n      location.pathname !== currentLocationRef.current\n    ) {\n      fn?.();\n    }\n  }, [location.pathname, fn]);\n}\n","import { useEffect, useRef, useState } from 'preact/hooks';\n\nimport { api } from '../utils/api';\nimport supports from '../utils/supports';\n\nimport Icon from './icon';\nimport MenuConfirm from './menu-confirm';\n\nfunction ListAddEdit({ list, onClose }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const editMode = !!list;\n  const nameFieldRef = useRef();\n  const repliesPolicyFieldRef = useRef();\n  const exclusiveFieldRef = useRef();\n  useEffect(() => {\n    if (editMode) {\n      nameFieldRef.current.value = list.title;\n      repliesPolicyFieldRef.current.value = list.repliesPolicy;\n      if (exclusiveFieldRef.current) {\n        exclusiveFieldRef.current.checked = list.exclusive;\n      }\n    }\n  }, [editMode]);\n  const supportsExclusive = supports('@mastodon/list-exclusive');\n\n  return (\n    <div class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}{' '}\n      <header>\n        <h2>{editMode ? 'Edit list' : 'New list'}</h2>\n      </header>\n      <main>\n        <form\n          class=\"list-form\"\n          onSubmit={(e) => {\n            e.preventDefault(); // Get form values\n\n            const formData = new FormData(e.target);\n            const title = formData.get('title');\n            const repliesPolicy = formData.get('replies_policy');\n            const exclusive = formData.get('exclusive') === 'on';\n            console.log({\n              title,\n              repliesPolicy,\n              exclusive,\n            });\n            setUIState('loading');\n\n            (async () => {\n              try {\n                let listResult;\n\n                if (editMode) {\n                  listResult = await masto.v1.lists.$select(list.id).update({\n                    title,\n                    replies_policy: repliesPolicy,\n                    exclusive,\n                  });\n                } else {\n                  listResult = await masto.v1.lists.create({\n                    title,\n                    replies_policy: repliesPolicy,\n                    exclusive,\n                  });\n                }\n\n                console.log(listResult);\n                setUIState('default');\n                onClose?.({\n                  state: 'success',\n                  list: listResult,\n                });\n              } catch (e) {\n                console.error(e);\n                setUIState('error');\n                alert(\n                  editMode ? 'Unable to edit list.' : 'Unable to create list.',\n                );\n              }\n            })();\n          }}\n        >\n          <div class=\"list-form-row\">\n            <label for=\"list-title\">\n              Name{' '}\n              <input\n                ref={nameFieldRef}\n                type=\"text\"\n                id=\"list-title\"\n                name=\"title\"\n                required\n                disabled={uiState === 'loading'}\n                dir=\"auto\"\n              />\n            </label>\n          </div>\n          <div class=\"list-form-row\">\n            <select\n              ref={repliesPolicyFieldRef}\n              name=\"replies_policy\"\n              required\n              disabled={uiState === 'loading'}\n            >\n              <option value=\"list\">Show replies to list members</option>\n              <option value=\"followed\">Show replies to people I follow</option>\n              <option value=\"none\">Don't show replies</option>\n            </select>\n          </div>\n          {supportsExclusive && (\n            <div class=\"list-form-row\">\n              <label class=\"label-block\">\n                <input\n                  ref={exclusiveFieldRef}\n                  type=\"checkbox\"\n                  name=\"exclusive\"\n                  disabled={uiState === 'loading'}\n                />{' '}\n                Hide posts on this list from Home/Following\n              </label>\n            </div>\n          )}\n          <div class=\"list-form-footer\">\n            <button type=\"submit\" disabled={uiState === 'loading'}>\n              {editMode ? 'Save' : 'Create'}\n            </button>\n            {editMode && (\n              <MenuConfirm\n                disabled={uiState === 'loading'}\n                align=\"end\"\n                menuItemClassName=\"danger\"\n                confirmLabel=\"Delete this list?\"\n                onClick={() => {\n                  // const yes = confirm('Delete this list?');\n                  // if (!yes) return;\n                  setUIState('loading');\n\n                  (async () => {\n                    try {\n                      await masto.v1.lists.$select(list.id).remove();\n                      setUIState('default');\n                      onClose?.({\n                        state: 'deleted',\n                      });\n                    } catch (e) {\n                      console.error(e);\n                      setUIState('error');\n                      alert('Unable to delete list.');\n                    }\n                  })();\n                }}\n              >\n                <button\n                  type=\"button\"\n                  class=\"light danger\"\n                  disabled={uiState === 'loading'}\n                >\n                  Delete…\n                </button>\n              </MenuConfirm>\n            )}\n          </div>\n        </form>\n      </main>\n    </div>\n  );\n}\n\nexport default ListAddEdit;\n","import './account-info.css';\n\nimport { Menu, MenuDivider, MenuItem, SubMenu } from '@szhsin/react-menu';\nimport {\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n} from 'preact/hooks';\n\nimport { api } from '../utils/api';\nimport enhanceContent from '../utils/enhance-content';\nimport getHTMLText from '../utils/getHTMLText';\nimport handleContentLinks from '../utils/handle-content-links';\nimport niceDateTime from '../utils/nice-date-time';\nimport pmem from '../utils/pmem';\nimport shortenNumber from '../utils/shorten-number';\nimport showToast from '../utils/show-toast';\nimport states, { hideAllModals } from '../utils/states';\nimport store from '../utils/store';\nimport { updateAccount } from '../utils/store-utils';\n\nimport AccountBlock from './account-block';\nimport Avatar from './avatar';\nimport EmojiText from './emoji-text';\nimport Icon from './icon';\nimport Link from './link';\nimport ListAddEdit from './list-add-edit';\nimport Loader from './loader';\nimport Menu2 from './menu2';\nimport MenuConfirm from './menu-confirm';\nimport Modal from './modal';\nimport TranslationBlock from './translation-block';\n\nconst MUTE_DURATIONS = [\n  1000 * 60 * 5, // 5 minutes\n  1000 * 60 * 30, // 30 minutes\n  1000 * 60 * 60, // 1 hour\n  1000 * 60 * 60 * 6, // 6 hours\n  1000 * 60 * 60 * 24, // 1 day\n  1000 * 60 * 60 * 24 * 3, // 3 days\n  1000 * 60 * 60 * 24 * 7, // 1 week\n  0, // forever\n];\nconst MUTE_DURATIONS_LABELS = {\n  0: 'Forever',\n  300_000: '5 minutes',\n  1_800_000: '30 minutes',\n  3_600_000: '1 hour',\n  21_600_000: '6 hours',\n  86_400_000: '1 day',\n  259_200_000: '3 days',\n  604_800_000: '1 week',\n};\n\nconst LIMIT = 80;\n\nconst ACCOUNT_INFO_MAX_AGE = 1000 * 60 * 10; // 10 mins\n\nfunction fetchFamiliarFollowers(currentID, masto) {\n  return masto.v1.accounts.familiarFollowers.fetch({\n    id: [currentID],\n  });\n}\nconst memFetchFamiliarFollowers = pmem(fetchFamiliarFollowers, {\n  maxAge: ACCOUNT_INFO_MAX_AGE,\n});\n\nasync function fetchPostingStats(accountID, masto) {\n  const fetchStatuses = masto.v1.accounts\n    .$select(accountID)\n    .statuses.list({\n      limit: 20,\n    })\n    .next();\n\n  const { value: statuses } = await fetchStatuses;\n  console.log('fetched statuses', statuses);\n  const stats = {\n    total: statuses.length,\n    originals: 0,\n    replies: 0,\n    boosts: 0,\n  };\n  // Categories statuses by type\n  // - Original posts (not replies to others)\n  // - Threads (self-replies + 1st original post)\n  // - Boosts (reblogs)\n  // - Replies (not-self replies)\n  statuses.forEach((status) => {\n    if (status.reblog) {\n      stats.boosts++;\n    } else if (\n      !!status.inReplyToId &&\n      status.inReplyToAccountId !== status.account.id // Not self-reply\n    ) {\n      stats.replies++;\n    } else {\n      stats.originals++;\n    }\n  });\n\n  // Count days since last post\n  if (statuses.length) {\n    stats.daysSinceLastPost = Math.ceil(\n      (Date.now() - new Date(statuses[statuses.length - 1].createdAt)) /\n        86400000,\n    );\n  }\n\n  console.log('posting stats', stats);\n  return stats;\n}\nconst memFetchPostingStats = pmem(fetchPostingStats, {\n  maxAge: ACCOUNT_INFO_MAX_AGE,\n});\n\nfunction AccountInfo({\n  account,\n  fetchAccount = () => {},\n  standalone,\n  instance,\n  authenticated,\n}) {\n  const { masto } = api({\n    instance,\n  });\n  const { masto: currentMasto, instance: currentInstance } = api();\n  const [uiState, setUIState] = useState('default');\n  const isString = typeof account === 'string';\n  const [info, setInfo] = useState(isString ? null : account);\n\n  const sameCurrentInstance = useMemo(\n    () => instance === currentInstance,\n    [instance, currentInstance],\n  );\n\n  useEffect(() => {\n    if (!isString) {\n      setInfo(account);\n      return;\n    }\n    setUIState('loading');\n    (async () => {\n      try {\n        const info = await fetchAccount();\n        states.accounts[`${info.id}@${instance}`] = info;\n        setInfo(info);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setInfo(null);\n        setUIState('error');\n      }\n    })();\n  }, [isString, account, fetchAccount]);\n\n  const {\n    acct,\n    avatar,\n    avatarStatic,\n    bot,\n    createdAt,\n    displayName,\n    emojis,\n    fields,\n    followersCount,\n    followingCount,\n    group,\n    // header,\n    // headerStatic,\n    id,\n    lastStatusAt,\n    locked,\n    note,\n    statusesCount,\n    url,\n    username,\n    memorial,\n    moved,\n    roles,\n  } = info || {};\n  let headerIsAvatar = false;\n  let { header, headerStatic } = info || {};\n  if (!header || /missing\\.png$/.test(header)) {\n    if (avatar && !/missing\\.png$/.test(avatar)) {\n      header = avatar;\n      headerIsAvatar = true;\n      if (avatarStatic && !/missing\\.png$/.test(avatarStatic)) {\n        headerStatic = avatarStatic;\n      }\n    }\n  }\n\n  const isSelf = useMemo(\n    () => id === store.session.get('currentAccount'),\n    [id],\n  );\n\n  useEffect(() => {\n    const infoHasEssentials = !!(\n      info?.id &&\n      info?.username &&\n      info?.acct &&\n      info?.avatar &&\n      info?.avatarStatic &&\n      info?.displayName &&\n      info?.url\n    );\n    if (isSelf && instance && infoHasEssentials) {\n      const accounts = store.local.getJSON('accounts');\n      let updated = false;\n      accounts.forEach((account) => {\n        if (account.info.id === info.id && account.instanceURL === instance) {\n          account.info = info;\n          updated = true;\n        }\n      });\n      if (updated) {\n        console.log('Updated account info', info);\n        store.local.setJSON('accounts', accounts);\n      }\n    }\n  }, [isSelf, info, instance]);\n\n  const accountInstance = useMemo(() => {\n    if (!url) return null;\n    const domain = new URL(url).hostname;\n    return domain;\n  }, [url]);\n\n  const [headerCornerColors, setHeaderCornerColors] = useState([]);\n\n  const followersIterator = useRef();\n  const familiarFollowersCache = useRef([]);\n  async function fetchFollowers(firstLoad) {\n    if (firstLoad || !followersIterator.current) {\n      followersIterator.current = masto.v1.accounts.$select(id).followers.list({\n        limit: LIMIT,\n      });\n    }\n    const results = await followersIterator.current.next();\n    if (isSelf) return results;\n    if (!sameCurrentInstance) return results;\n\n    const { value } = results;\n    let newValue = [];\n    // On first load, fetch familiar followers, merge to top of results' `value`\n    // Remove dups on every fetch\n    if (firstLoad) {\n      const familiarFollowers = await masto.v1.accounts.familiarFollowers.fetch(\n        {\n          id: [id],\n        },\n      );\n      familiarFollowersCache.current = familiarFollowers[0].accounts;\n      newValue = [\n        ...familiarFollowersCache.current,\n        ...value.filter(\n          (account) =>\n            !familiarFollowersCache.current.some(\n              (familiar) => familiar.id === account.id,\n            ),\n        ),\n      ];\n    } else if (value?.length) {\n      newValue = value.filter(\n        (account) =>\n          !familiarFollowersCache.current.some(\n            (familiar) => familiar.id === account.id,\n          ),\n      );\n    }\n\n    return {\n      ...results,\n      value: newValue,\n    };\n  }\n\n  const followingIterator = useRef();\n  async function fetchFollowing(firstLoad) {\n    if (firstLoad || !followingIterator.current) {\n      followingIterator.current = masto.v1.accounts.$select(id).following.list({\n        limit: LIMIT,\n      });\n    }\n    const results = await followingIterator.current.next();\n    return results;\n  }\n\n  const LinkOrDiv = standalone ? 'div' : Link;\n  const accountLink = instance ? `/${instance}/a/${id}` : `/a/${id}`;\n\n  const [familiarFollowers, setFamiliarFollowers] = useState([]);\n  const [postingStats, setPostingStats] = useState();\n  const [postingStatsUIState, setPostingStatsUIState] = useState('default');\n  const hasPostingStats = !!postingStats?.total;\n\n  const renderFamiliarFollowers = async (currentID) => {\n    try {\n      const followers = await memFetchFamiliarFollowers(\n        currentID,\n        currentMasto,\n      );\n      console.log('fetched familiar followers', followers);\n      setFamiliarFollowers(\n        followers[0].accounts.slice(0, FAMILIAR_FOLLOWERS_LIMIT),\n      );\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const renderPostingStats = async () => {\n    if (!id) return;\n    setPostingStatsUIState('loading');\n    try {\n      const stats = await memFetchPostingStats(id, masto);\n      setPostingStats(stats);\n      setPostingStatsUIState('default');\n    } catch (e) {\n      console.error(e);\n      setPostingStatsUIState('error');\n    }\n  };\n\n  const onRelationshipChange = useCallback(\n    ({ relationship, currentID }) => {\n      if (!relationship.following) {\n        renderFamiliarFollowers(currentID);\n        if (!standalone && statusesCount > 0) {\n          // Only render posting stats if not standalone and has posts\n          renderPostingStats();\n        }\n      }\n    },\n    [standalone, id, statusesCount],\n  );\n\n  return (\n    <div\n      tabIndex=\"-1\"\n      class={`account-container  ${uiState === 'loading' ? 'skeleton' : ''}`}\n      style={{\n        '--header-color-1': headerCornerColors[0],\n        '--header-color-2': headerCornerColors[1],\n        '--header-color-3': headerCornerColors[2],\n        '--header-color-4': headerCornerColors[3],\n      }}\n    >\n      {uiState === 'error' && (\n        <div class=\"ui-state\">\n          <p>Unable to load account.</p>\n          <p>\n            <a\n              href={isString ? account : url}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Go to account page <Icon icon=\"external\" />\n            </a>\n          </p>\n        </div>\n      )}\n      {uiState === 'loading' ? (\n        <>\n          <header>\n            <AccountBlock avatarSize=\"xxxl\" skeleton />\n          </header>\n          <main>\n            <div class=\"note\">\n              <p>███████ ████ ████</p>\n              <p>████ ████████ ██████ █████████ ████ ██</p>\n            </div>\n            <div class=\"account-metadata-box\">\n              <div class=\"profile-metadata\">\n                <div class=\"profile-field\">\n                  <b class=\"more-insignificant\">███</b>\n                  <p>██████</p>\n                </div>\n                <div class=\"profile-field\">\n                  <b class=\"more-insignificant\">████</b>\n                  <p>███████████</p>\n                </div>\n              </div>\n              <div class=\"stats\">\n                <div>\n                  <span>██</span> Followers\n                </div>\n                <div>\n                  <span>██</span> Following\n                </div>\n                <div>\n                  <span>██</span> Posts\n                </div>\n              </div>\n            </div>\n            <div class=\"actions\">\n              <span />\n              <span class=\"buttons\">\n                <button type=\"button\" title=\"More\" class=\"plain\" disabled>\n                  <Icon icon=\"more\" size=\"l\" alt=\"More\" />\n                </button>\n              </span>\n            </div>\n          </main>\n        </>\n      ) : (\n        info && (\n          <>\n            {!!moved && (\n              <div class=\"account-moved\">\n                <p>\n                  <b>{displayName}</b> has indicated that their new account is\n                  now:\n                </p>\n                <AccountBlock\n                  account={moved}\n                  instance={instance}\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    states.showAccount = moved;\n                  }}\n                />\n              </div>\n            )}\n            {!!header && !/missing\\.png$/.test(header) && (\n              <img\n                src={header}\n                alt=\"\"\n                class={`header-banner ${\n                  headerIsAvatar ? 'header-is-avatar' : ''\n                }`}\n                onError={(e) => {\n                  if (e.target.crossOrigin) {\n                    if (e.target.src !== headerStatic) {\n                      e.target.src = headerStatic;\n                    } else {\n                      e.target.removeAttribute('crossorigin');\n                      e.target.src = header;\n                    }\n                  } else if (e.target.src !== headerStatic) {\n                    e.target.src = headerStatic;\n                  } else {\n                    e.target.remove();\n                  }\n                }}\n                crossOrigin=\"anonymous\"\n                onLoad={(e) => {\n                  e.target.classList.add('loaded');\n                  try {\n                    // Get color from four corners of image\n                    const canvas = document.createElement('canvas');\n                    const ctx = canvas.getContext('2d', {\n                      willReadFrequently: true,\n                    });\n                    canvas.width = e.target.width;\n                    canvas.height = e.target.height;\n                    ctx.drawImage(e.target, 0, 0);\n                    // const colors = [\n                    //   ctx.getImageData(0, 0, 1, 1).data,\n                    //   ctx.getImageData(e.target.width - 1, 0, 1, 1).data,\n                    //   ctx.getImageData(0, e.target.height - 1, 1, 1).data,\n                    //   ctx.getImageData(\n                    //     e.target.width - 1,\n                    //     e.target.height - 1,\n                    //     1,\n                    //     1,\n                    //   ).data,\n                    // ];\n                    // Get 10x10 pixels from corners, get average color from each\n                    const pixelDimension = 10;\n                    const colors = [\n                      ctx.getImageData(0, 0, pixelDimension, pixelDimension)\n                        .data,\n                      ctx.getImageData(\n                        e.target.width - pixelDimension,\n                        0,\n                        pixelDimension,\n                        pixelDimension,\n                      ).data,\n                      ctx.getImageData(\n                        0,\n                        e.target.height - pixelDimension,\n                        pixelDimension,\n                        pixelDimension,\n                      ).data,\n                      ctx.getImageData(\n                        e.target.width - pixelDimension,\n                        e.target.height - pixelDimension,\n                        pixelDimension,\n                        pixelDimension,\n                      ).data,\n                    ].map((data) => {\n                      let r = 0;\n                      let g = 0;\n                      let b = 0;\n                      let a = 0;\n                      for (let i = 0; i < data.length; i += 4) {\n                        r += data[i];\n                        g += data[i + 1];\n                        b += data[i + 2];\n                        a += data[i + 3];\n                      }\n                      const dataLength = data.length / 4;\n                      return [\n                        r / dataLength,\n                        g / dataLength,\n                        b / dataLength,\n                        a / dataLength,\n                      ];\n                    });\n                    const rgbColors = colors.map((color) => {\n                      const [r, g, b, a] = lightenRGB(color);\n                      return `rgba(${r}, ${g}, ${b}, ${a})`;\n                    });\n                    setHeaderCornerColors(rgbColors);\n                    console.log({ colors, rgbColors });\n                  } catch (e) {\n                    // Silently fail\n                  }\n                }}\n              />\n            )}\n            <header>\n              <AccountBlock\n                account={info}\n                instance={instance}\n                avatarSize=\"xxxl\"\n                external={standalone}\n                internal={!standalone}\n              />\n            </header>\n            <div class=\"faux-header-bg\" aria-hidden=\"true\" />\n            <main>\n              {!!memorial && <span class=\"tag\">In Memoriam</span>}\n              {!!bot && (\n                <span class=\"tag\">\n                  <Icon icon=\"bot\" /> Automated\n                </span>\n              )}\n              {!!group && (\n                <span class=\"tag\">\n                  <Icon icon=\"group\" /> Group\n                </span>\n              )}\n              {roles?.map((role) => (\n                <span class=\"tag\">\n                  {role.name}\n                  {!!accountInstance && (\n                    <>\n                      {' '}\n                      <span class=\"more-insignificant\">{accountInstance}</span>\n                    </>\n                  )}\n                </span>\n              ))}\n              <div\n                class=\"note\"\n                dir=\"auto\"\n                onClick={handleContentLinks({\n                  instance: currentInstance,\n                })}\n                dangerouslySetInnerHTML={{\n                  __html: enhanceContent(note, { emojis }),\n                }}\n              />\n              <div class=\"account-metadata-box\">\n                {fields?.length > 0 && (\n                  <div class=\"profile-metadata\">\n                    {fields.map(({ name, value, verifiedAt }, i) => (\n                      <div\n                        class={`profile-field ${\n                          verifiedAt ? 'profile-verified' : ''\n                        }`}\n                        key={name + i}\n                        dir=\"auto\"\n                      >\n                        <b>\n                          <EmojiText text={name} emojis={emojis} />{' '}\n                          {!!verifiedAt && (\n                            <Icon icon=\"check-circle\" size=\"s\" />\n                          )}\n                        </b>\n                        <p\n                          dangerouslySetInnerHTML={{\n                            __html: enhanceContent(value, { emojis }),\n                          }}\n                        />\n                      </div>\n                    ))}\n                  </div>\n                )}\n                <div class=\"stats\">\n                  <LinkOrDiv\n                    tabIndex={0}\n                    to={accountLink}\n                    onClick={() => {\n                      // states.showAccount = false;\n                      setTimeout(() => {\n                        states.showGenericAccounts = {\n                          heading: 'Followers',\n                          fetchAccounts: fetchFollowers,\n                        };\n                      }, 0);\n                    }}\n                  >\n                    {!!familiarFollowers.length && (\n                      <span class=\"shazam-container-horizontal\">\n                        <span class=\"shazam-container-inner stats-avatars-bunch\">\n                          {familiarFollowers.map((follower) => (\n                            <Avatar\n                              url={follower.avatarStatic}\n                              size=\"s\"\n                              alt={`${follower.displayName} @${follower.acct}`}\n                              squircle={follower?.bot}\n                            />\n                          ))}\n                        </span>\n                      </span>\n                    )}\n                    <span title={followersCount}>\n                      {shortenNumber(followersCount)}\n                    </span>{' '}\n                    Followers\n                  </LinkOrDiv>\n                  <LinkOrDiv\n                    class=\"insignificant\"\n                    tabIndex={0}\n                    to={accountLink}\n                    onClick={() => {\n                      // states.showAccount = false;\n                      setTimeout(() => {\n                        states.showGenericAccounts = {\n                          heading: 'Following',\n                          fetchAccounts: fetchFollowing,\n                        };\n                      }, 0);\n                    }}\n                  >\n                    <span title={followingCount}>\n                      {shortenNumber(followingCount)}\n                    </span>{' '}\n                    Following\n                    <br />\n                  </LinkOrDiv>\n                  <LinkOrDiv\n                    class=\"insignificant\"\n                    to={accountLink}\n                    // onClick={\n                    //   standalone\n                    //     ? undefined\n                    //     : () => {\n                    //         hideAllModals();\n                    //       }\n                    // }\n                  >\n                    <span title={statusesCount}>\n                      {shortenNumber(statusesCount)}\n                    </span>{' '}\n                    Posts\n                  </LinkOrDiv>\n                  {!!createdAt && (\n                    <div class=\"insignificant\">\n                      Joined{' '}\n                      <time datetime={createdAt}>\n                        {niceDateTime(createdAt, {\n                          hideTime: true,\n                        })}\n                      </time>\n                    </div>\n                  )}\n                </div>\n              </div>\n              {!!postingStats && (\n                <LinkOrDiv\n                  to={accountLink}\n                  class=\"account-metadata-box\"\n                  // onClick={() => {\n                  //   states.showAccount = false;\n                  // }}\n                >\n                  <div class=\"shazam-container\">\n                    <div class=\"shazam-container-inner\">\n                      {hasPostingStats ? (\n                        <div\n                          class=\"posting-stats\"\n                          title={`${Math.round(\n                            (postingStats.originals / postingStats.total) * 100,\n                          )}% original posts, ${Math.round(\n                            (postingStats.replies / postingStats.total) * 100,\n                          )}% replies, ${Math.round(\n                            (postingStats.boosts / postingStats.total) * 100,\n                          )}% boosts`}\n                        >\n                          <div>\n                            {postingStats.daysSinceLastPost < 365\n                              ? `Last ${postingStats.total} post${\n                                  postingStats.total > 1 ? 's' : ''\n                                } in the past \n                      ${postingStats.daysSinceLastPost} day${\n                                  postingStats.daysSinceLastPost > 1 ? 's' : ''\n                                }`\n                              : `\n                      Last ${postingStats.total} posts in the past year(s)\n                      `}\n                          </div>\n                          <div\n                            class=\"posting-stats-bar\"\n                            style={{\n                              // [originals | replies | boosts]\n                              '--originals-percentage': `${\n                                (postingStats.originals / postingStats.total) *\n                                100\n                              }%`,\n                              '--replies-percentage': `${\n                                ((postingStats.originals +\n                                  postingStats.replies) /\n                                  postingStats.total) *\n                                100\n                              }%`,\n                            }}\n                          />\n                          <div class=\"posting-stats-legends\">\n                            <span class=\"ib\">\n                              <span class=\"posting-stats-legend-item posting-stats-legend-item-originals\" />{' '}\n                              Original\n                            </span>{' '}\n                            <span class=\"ib\">\n                              <span class=\"posting-stats-legend-item posting-stats-legend-item-replies\" />{' '}\n                              Replies\n                            </span>{' '}\n                            <span class=\"ib\">\n                              <span class=\"posting-stats-legend-item posting-stats-legend-item-boosts\" />{' '}\n                              Boosts\n                            </span>\n                          </div>\n                        </div>\n                      ) : (\n                        <div class=\"posting-stats\">Post stats unavailable.</div>\n                      )}\n                    </div>\n                  </div>\n                </LinkOrDiv>\n              )}\n              <div class=\"account-metadata-box\">\n                <div\n                  class=\"shazam-container no-animation\"\n                  hidden={!!postingStats}\n                >\n                  <div class=\"shazam-container-inner\">\n                    <button\n                      type=\"button\"\n                      class=\"posting-stats-button\"\n                      disabled={postingStatsUIState === 'loading'}\n                      onClick={() => {\n                        renderPostingStats();\n                      }}\n                    >\n                      <div\n                        class={`posting-stats-bar posting-stats-icon ${\n                          postingStatsUIState === 'loading' ? 'loading' : ''\n                        }`}\n                        style={{\n                          '--originals-percentage': '33%',\n                          '--replies-percentage': '66%',\n                        }}\n                      />\n                      View post stats{' '}\n                      {/* <Loader\n                        abrupt\n                        hidden={postingStatsUIState !== 'loading'}\n                      /> */}\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </main>\n            <footer>\n              <RelatedActions\n                info={info}\n                instance={instance}\n                authenticated={authenticated}\n                onRelationshipChange={onRelationshipChange}\n              />\n            </footer>\n          </>\n        )\n      )}\n    </div>\n  );\n}\n\nconst FAMILIAR_FOLLOWERS_LIMIT = 3;\n\nfunction RelatedActions({\n  info,\n  instance,\n  authenticated,\n  onRelationshipChange = () => {},\n}) {\n  if (!info) return null;\n  const {\n    masto: currentMasto,\n    instance: currentInstance,\n    authenticated: currentAuthenticated,\n  } = api();\n  const sameInstance = instance === currentInstance;\n\n  const [relationshipUIState, setRelationshipUIState] = useState('default');\n  const [relationship, setRelationship] = useState(null);\n\n  const { id, acct, url, username, locked, lastStatusAt, note, fields, moved } =\n    info;\n  const accountID = useRef(id);\n\n  const {\n    following,\n    showingReblogs,\n    notifying,\n    followedBy,\n    blocking,\n    blockedBy,\n    muting,\n    mutingNotifications,\n    requested,\n    domainBlocking,\n    endorsed,\n    note: privateNote,\n  } = relationship || {};\n\n  const [currentInfo, setCurrentInfo] = useState(null);\n  const [isSelf, setIsSelf] = useState(false);\n\n  useEffect(() => {\n    if (info) {\n      const currentAccount = store.session.get('currentAccount');\n      let currentID;\n      (async () => {\n        if (sameInstance && authenticated) {\n          currentID = id;\n        } else if (!sameInstance && currentAuthenticated) {\n          // Grab this account from my logged-in instance\n          const acctHasInstance = info.acct.includes('@');\n          try {\n            const results = await currentMasto.v2.search.fetch({\n              q: acctHasInstance ? info.acct : `${info.username}@${instance}`,\n              type: 'accounts',\n              limit: 1,\n              resolve: true,\n            });\n            console.log('🥏 Fetched account from logged-in instance', results);\n            if (results.accounts.length) {\n              currentID = results.accounts[0].id;\n              setCurrentInfo(results.accounts[0]);\n            }\n          } catch (e) {\n            console.error(e);\n          }\n        }\n\n        if (!currentID) return;\n\n        if (currentAccount === currentID) {\n          // It's myself!\n          setIsSelf(true);\n          return;\n        }\n\n        accountID.current = currentID;\n\n        if (moved) return;\n\n        setRelationshipUIState('loading');\n\n        const fetchRelationships = currentMasto.v1.accounts.relationships.fetch(\n          {\n            id: [currentID],\n          },\n        );\n\n        try {\n          const relationships = await fetchRelationships;\n          console.log('fetched relationship', relationships);\n          setRelationshipUIState('default');\n\n          if (relationships.length) {\n            const relationship = relationships[0];\n            setRelationship(relationship);\n            onRelationshipChange({ relationship, currentID });\n          }\n        } catch (e) {\n          console.error(e);\n          setRelationshipUIState('error');\n        }\n      })();\n    }\n  }, [info, authenticated]);\n\n  useEffect(() => {\n    if (info && isSelf) {\n      updateAccount(info);\n    }\n  }, [info, isSelf]);\n\n  const loading = relationshipUIState === 'loading';\n\n  const [showTranslatedBio, setShowTranslatedBio] = useState(false);\n  const [showAddRemoveLists, setShowAddRemoveLists] = useState(false);\n  const [showPrivateNoteModal, setShowPrivateNoteModal] = useState(false);\n\n  return (\n    <>\n      <div class=\"actions\">\n        <span>\n          {followedBy ? (\n            <span class=\"tag\">Following you</span>\n          ) : !!lastStatusAt ? (\n            <small class=\"insignificant\">\n              Last post:{' '}\n              <span class=\"ib\">\n                {niceDateTime(lastStatusAt, {\n                  hideTime: true,\n                })}\n              </span>\n            </small>\n          ) : (\n            <span />\n          )}\n          {muting && <span class=\"tag danger\">Muted</span>}\n          {blocking && <span class=\"tag danger\">Blocked</span>}\n        </span>{' '}\n        <span class=\"buttons\">\n          {!!privateNote && (\n            <button\n              type=\"button\"\n              class=\"private-note-tag\"\n              title=\"Private note\"\n              onClick={() => {\n                setShowPrivateNoteModal(true);\n              }}\n              dir=\"auto\"\n            >\n              <span>{privateNote}</span>\n            </button>\n          )}\n          <Menu2\n            portal={{\n              target: document.body,\n            }}\n            containerProps={{\n              style: {\n                // Higher than the backdrop\n                zIndex: 1001,\n              },\n            }}\n            align=\"center\"\n            position=\"anchor\"\n            overflow=\"auto\"\n            menuButton={\n              <button\n                type=\"button\"\n                title=\"More\"\n                class=\"plain\"\n                disabled={loading}\n              >\n                <Icon icon=\"more\" size=\"l\" alt=\"More\" />\n              </button>\n            }\n          >\n            {currentAuthenticated && !isSelf && (\n              <>\n                <MenuItem\n                  onClick={() => {\n                    states.showCompose = {\n                      draftStatus: {\n                        status: `@${currentInfo?.acct || acct} `,\n                      },\n                    };\n                  }}\n                >\n                  <Icon icon=\"at\" />\n                  <span>Mention @{username}</span>\n                </MenuItem>\n                <MenuItem\n                  onClick={() => {\n                    setShowTranslatedBio(true);\n                  }}\n                >\n                  <Icon icon=\"translate\" />\n                  <span>Translate bio</span>\n                </MenuItem>\n                <MenuItem\n                  onClick={() => {\n                    setShowPrivateNoteModal(true);\n                  }}\n                >\n                  <Icon icon=\"pencil\" />\n                  <span>\n                    {privateNote ? 'Edit private note' : 'Add private note'}\n                  </span>\n                </MenuItem>\n                {/* Add/remove from lists is only possible if following the account */}\n                {following && (\n                  <MenuItem\n                    onClick={() => {\n                      setShowAddRemoveLists(true);\n                    }}\n                  >\n                    <Icon icon=\"list\" />\n                    <span>Add/remove from Lists</span>\n                  </MenuItem>\n                )}\n                <MenuDivider />\n              </>\n            )}\n            <MenuItem href={url} target=\"_blank\">\n              <Icon icon=\"external\" />\n              <small class=\"menu-double-lines\">{niceAccountURL(url)}</small>\n            </MenuItem>\n            <div class=\"menu-horizontal\">\n              <MenuItem\n                onClick={() => {\n                  // Copy url to clipboard\n                  try {\n                    navigator.clipboard.writeText(url);\n                    showToast('Link copied');\n                  } catch (e) {\n                    console.error(e);\n                    showToast('Unable to copy link');\n                  }\n                }}\n              >\n                <Icon icon=\"link\" />\n                <span>Copy</span>\n              </MenuItem>\n              {navigator?.share &&\n                navigator?.canShare?.({\n                  url,\n                }) && (\n                  <MenuItem\n                    onClick={() => {\n                      try {\n                        navigator.share({\n                          url,\n                        });\n                      } catch (e) {\n                        console.error(e);\n                        alert(\"Sharing doesn't seem to work.\");\n                      }\n                    }}\n                  >\n                    <Icon icon=\"share\" />\n                    <span>Share…</span>\n                  </MenuItem>\n                )}\n            </div>\n            {!!relationship && (\n              <>\n                <MenuDivider />\n                {muting ? (\n                  <MenuItem\n                    onClick={() => {\n                      setRelationshipUIState('loading');\n                      (async () => {\n                        try {\n                          const newRelationship = await currentMasto.v1.accounts\n                            .$select(currentInfo?.id || id)\n                            .unmute();\n                          console.log('unmuting', newRelationship);\n                          setRelationship(newRelationship);\n                          setRelationshipUIState('default');\n                          showToast(`Unmuted @${username}`);\n                          states.reloadGenericAccounts.id = 'mute';\n                          states.reloadGenericAccounts.counter++;\n                        } catch (e) {\n                          console.error(e);\n                          setRelationshipUIState('error');\n                        }\n                      })();\n                    }}\n                  >\n                    <Icon icon=\"unmute\" />\n                    <span>Unmute @{username}</span>\n                  </MenuItem>\n                ) : (\n                  <SubMenu\n                    openTrigger=\"clickOnly\"\n                    direction=\"bottom\"\n                    overflow=\"auto\"\n                    shift={16}\n                    label={\n                      <>\n                        <Icon icon=\"mute\" />\n                        <span class=\"menu-grow\">Mute @{username}…</span>\n                        <span\n                          style={{\n                            textOverflow: 'clip',\n                          }}\n                        >\n                          <Icon icon=\"time\" />\n                          <Icon icon=\"chevron-right\" />\n                        </span>\n                      </>\n                    }\n                  >\n                    <div class=\"menu-wrap\">\n                      {MUTE_DURATIONS.map((duration) => (\n                        <MenuItem\n                          onClick={() => {\n                            setRelationshipUIState('loading');\n                            (async () => {\n                              try {\n                                const newRelationship =\n                                  await currentMasto.v1.accounts\n                                    .$select(currentInfo?.id || id)\n                                    .mute({\n                                      duration,\n                                    });\n                                console.log('muting', newRelationship);\n                                setRelationship(newRelationship);\n                                setRelationshipUIState('default');\n                                showToast(\n                                  `Muted @${username} for ${MUTE_DURATIONS_LABELS[duration]}`,\n                                );\n                                states.reloadGenericAccounts.id = 'mute';\n                                states.reloadGenericAccounts.counter++;\n                              } catch (e) {\n                                console.error(e);\n                                setRelationshipUIState('error');\n                                showToast(`Unable to mute @${username}`);\n                              }\n                            })();\n                          }}\n                        >\n                          {MUTE_DURATIONS_LABELS[duration]}\n                        </MenuItem>\n                      ))}\n                    </div>\n                  </SubMenu>\n                )}\n                <MenuConfirm\n                  subMenu\n                  confirm={!blocking}\n                  confirmLabel={\n                    <>\n                      <Icon icon=\"block\" />\n                      <span>Block @{username}?</span>\n                    </>\n                  }\n                  menuItemClassName=\"danger\"\n                  onClick={() => {\n                    // if (!blocking && !confirm(`Block @${username}?`)) {\n                    //   return;\n                    // }\n                    setRelationshipUIState('loading');\n                    (async () => {\n                      try {\n                        if (blocking) {\n                          const newRelationship = await currentMasto.v1.accounts\n                            .$select(currentInfo?.id || id)\n                            .unblock();\n                          console.log('unblocking', newRelationship);\n                          setRelationship(newRelationship);\n                          setRelationshipUIState('default');\n                          showToast(`Unblocked @${username}`);\n                        } else {\n                          const newRelationship = await currentMasto.v1.accounts\n                            .$select(currentInfo?.id || id)\n                            .block();\n                          console.log('blocking', newRelationship);\n                          setRelationship(newRelationship);\n                          setRelationshipUIState('default');\n                          showToast(`Blocked @${username}`);\n                        }\n                        states.reloadGenericAccounts.id = 'block';\n                        states.reloadGenericAccounts.counter++;\n                      } catch (e) {\n                        console.error(e);\n                        setRelationshipUIState('error');\n                        if (blocking) {\n                          showToast(`Unable to unblock @${username}`);\n                        } else {\n                          showToast(`Unable to block @${username}`);\n                        }\n                      }\n                    })();\n                  }}\n                >\n                  {blocking ? (\n                    <>\n                      <Icon icon=\"unblock\" />\n                      <span>Unblock @{username}</span>\n                    </>\n                  ) : (\n                    <>\n                      <Icon icon=\"block\" />\n                      <span>Block @{username}…</span>\n                    </>\n                  )}\n                </MenuConfirm>\n                {/* <MenuItem>\n                <Icon icon=\"flag\" />\n                <span>Report @{username}…</span>\n              </MenuItem> */}\n              </>\n            )}\n          </Menu2>\n          {!relationship && relationshipUIState === 'loading' && (\n            <Loader abrupt />\n          )}\n          {!!relationship && (\n            <MenuConfirm\n              confirm={following || requested}\n              confirmLabel={\n                <span>\n                  {requested\n                    ? 'Withdraw follow request?'\n                    : `Unfollow @${info.acct || info.username}?`}\n                </span>\n              }\n              menuItemClassName=\"danger\"\n              align=\"end\"\n              disabled={loading}\n              onClick={() => {\n                setRelationshipUIState('loading');\n                (async () => {\n                  try {\n                    let newRelationship;\n\n                    if (following || requested) {\n                      // const yes = confirm(\n                      //   requested\n                      //     ? 'Withdraw follow request?'\n                      //     : `Unfollow @${info.acct || info.username}?`,\n                      // );\n\n                      // if (yes) {\n                      newRelationship = await currentMasto.v1.accounts\n                        .$select(accountID.current)\n                        .unfollow();\n                      // }\n                    } else {\n                      newRelationship = await currentMasto.v1.accounts\n                        .$select(accountID.current)\n                        .follow();\n                    }\n\n                    if (newRelationship) setRelationship(newRelationship);\n                    setRelationshipUIState('default');\n                  } catch (e) {\n                    alert(e);\n                    setRelationshipUIState('error');\n                  }\n                })();\n              }}\n            >\n              <button\n                type=\"button\"\n                class={`${following || requested ? 'light swap' : ''}`}\n                data-swap-state={following || requested ? 'danger' : ''}\n                disabled={loading}\n              >\n                {following ? (\n                  <>\n                    <span>Following</span>\n                    <span>Unfollow…</span>\n                  </>\n                ) : requested ? (\n                  <>\n                    <span>Requested</span>\n                    <span>Withdraw…</span>\n                  </>\n                ) : locked ? (\n                  <>\n                    <Icon icon=\"lock\" /> <span>Follow</span>\n                  </>\n                ) : (\n                  'Follow'\n                )}\n              </button>\n            </MenuConfirm>\n          )}\n        </span>\n      </div>\n      {!!showTranslatedBio && (\n        <Modal\n          class=\"light\"\n          onClose={() => {\n            setShowTranslatedBio(false);\n          }}\n        >\n          <TranslatedBioSheet\n            note={note}\n            fields={fields}\n            onClose={() => setShowTranslatedBio(false)}\n          />\n        </Modal>\n      )}\n      {!!showAddRemoveLists && (\n        <Modal\n          class=\"light\"\n          onClose={() => {\n            setShowAddRemoveLists(false);\n          }}\n        >\n          <AddRemoveListsSheet\n            accountID={accountID.current}\n            onClose={() => setShowAddRemoveLists(false)}\n          />\n        </Modal>\n      )}\n      {!!showPrivateNoteModal && (\n        <Modal\n          class=\"light\"\n          onClose={() => {\n            setShowPrivateNoteModal(false);\n          }}\n        >\n          <PrivateNoteSheet\n            account={info}\n            note={privateNote}\n            onRelationshipChange={(relationship) => {\n              setRelationship(relationship);\n              // onRelationshipChange({ relationship, currentID: accountID.current });\n            }}\n            onClose={() => setShowPrivateNoteModal(false)}\n          />\n        </Modal>\n      )}\n    </>\n  );\n}\n\n// Apply more alpha if high luminence\nfunction lightenRGB([r, g, b]) {\n  const luminence = 0.2126 * r + 0.7152 * g + 0.0722 * b;\n  console.log('luminence', luminence);\n  let alpha;\n  if (luminence >= 220) {\n    alpha = 1;\n  } else if (luminence <= 50) {\n    alpha = 0.1;\n  } else {\n    alpha = luminence / 255;\n  }\n  alpha = Math.min(1, alpha);\n  return [r, g, b, alpha];\n}\n\nfunction niceAccountURL(url) {\n  if (!url) return;\n  const urlObj = new URL(url);\n  const { host, pathname } = urlObj;\n  const path = pathname.replace(/\\/$/, '').replace(/^\\//, '');\n  return (\n    <>\n      <span class=\"more-insignificant\">{host}/</span>\n      <wbr />\n      <span>{path}</span>\n    </>\n  );\n}\n\nfunction TranslatedBioSheet({ note, fields, onClose }) {\n  const fieldsText =\n    fields\n      ?.map(({ name, value }) => `${name}\\n${getHTMLText(value)}`)\n      .join('\\n\\n') || '';\n\n  const text = getHTMLText(note) + (fieldsText ? `\\n\\n${fieldsText}` : '');\n\n  return (\n    <div class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Translated Bio</h2>\n      </header>\n      <main>\n        <p\n          style={{\n            whiteSpace: 'pre-wrap',\n          }}\n        >\n          {text}\n        </p>\n        <TranslationBlock forceTranslate text={text} />\n      </main>\n    </div>\n  );\n}\n\nfunction AddRemoveListsSheet({ accountID, onClose }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [lists, setLists] = useState([]);\n  const [listsContainingAccount, setListsContainingAccount] = useState([]);\n  const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const lists = await masto.v1.lists.list();\n        lists.sort((a, b) => a.title.localeCompare(b.title));\n        const listsContainingAccount = await masto.v1.accounts\n          .$select(accountID)\n          .lists.list();\n        console.log({ lists, listsContainingAccount });\n        setLists(lists);\n        setListsContainingAccount(listsContainingAccount);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, [reloadCount]);\n\n  const [showListAddEditModal, setShowListAddEditModal] = useState(false);\n\n  return (\n    <div class=\"sheet\" id=\"list-add-remove-container\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Add/Remove from Lists</h2>\n      </header>\n      <main>\n        {lists.length > 0 ? (\n          <ul class=\"list-add-remove\">\n            {lists.map((list) => {\n              const inList = listsContainingAccount.some(\n                (l) => l.id === list.id,\n              );\n              return (\n                <li>\n                  <button\n                    type=\"button\"\n                    class={`light ${inList ? 'checked' : ''}`}\n                    disabled={uiState === 'loading'}\n                    onClick={() => {\n                      setUIState('loading');\n                      (async () => {\n                        try {\n                          if (inList) {\n                            await masto.v1.lists\n                              .$select(list.id)\n                              .accounts.remove({\n                                accountIds: [accountID],\n                              });\n                          } else {\n                            await masto.v1.lists\n                              .$select(list.id)\n                              .accounts.create({\n                                accountIds: [accountID],\n                              });\n                          }\n                          // setUIState('default');\n                          reload();\n                        } catch (e) {\n                          console.error(e);\n                          setUIState('error');\n                          alert(\n                            inList\n                              ? 'Unable to remove from list.'\n                              : 'Unable to add to list.',\n                          );\n                        }\n                      })();\n                    }}\n                  >\n                    <Icon icon=\"check-circle\" />\n                    <span>{list.title}</span>\n                  </button>\n                </li>\n              );\n            })}\n          </ul>\n        ) : uiState === 'loading' ? (\n          <p class=\"ui-state\">\n            <Loader abrupt />\n          </p>\n        ) : uiState === 'error' ? (\n          <p class=\"ui-state\">Unable to load lists.</p>\n        ) : (\n          <p class=\"ui-state\">No lists.</p>\n        )}\n        <button\n          type=\"button\"\n          class=\"plain2\"\n          onClick={() => setShowListAddEditModal(true)}\n          disabled={uiState !== 'default'}\n        >\n          <Icon icon=\"plus\" size=\"l\" /> <span>New list</span>\n        </button>\n      </main>\n      {showListAddEditModal && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowListAddEditModal(false);\n            }\n          }}\n        >\n          <ListAddEdit\n            list={showListAddEditModal?.list}\n            onClose={(result) => {\n              if (result.state === 'success') {\n                reload();\n              }\n              setShowListAddEditModal(false);\n            }}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nfunction PrivateNoteSheet({\n  account,\n  note: initialNote,\n  onRelationshipChange = () => {},\n  onClose = () => {},\n}) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const textareaRef = useRef(null);\n\n  useEffect(() => {\n    let timer;\n    if (textareaRef.current && !initialNote) {\n      timer = setTimeout(() => {\n        textareaRef.current.focus?.();\n      }, 100);\n    }\n    return () => {\n      clearTimeout(timer);\n    };\n  }, []);\n\n  return (\n    <div class=\"sheet\" id=\"private-note-container\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <b>Private note about @{account?.username || account?.acct}</b>\n      </header>\n      <main>\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const note = formData.get('note');\n            if (note?.trim() !== initialNote?.trim()) {\n              setUIState('loading');\n              (async () => {\n                try {\n                  const newRelationship = await masto.v1.accounts\n                    .$select(account?.id)\n                    .note.create({\n                      comment: note,\n                    });\n                  console.log('updated relationship', newRelationship);\n                  setUIState('default');\n                  onRelationshipChange(newRelationship);\n                  onClose();\n                } catch (e) {\n                  console.error(e);\n                  setUIState('error');\n                  alert(e?.message || 'Unable to update private note.');\n                }\n              })();\n            }\n          }}\n        >\n          <textarea\n            ref={textareaRef}\n            name=\"note\"\n            disabled={uiState === 'loading'}\n          >\n            {initialNote}\n          </textarea>\n          <footer>\n            <button\n              type=\"button\"\n              class=\"light\"\n              disabled={uiState === 'loading'}\n              onClick={() => {\n                onClose?.();\n              }}\n            >\n              Cancel\n            </button>\n            <span>\n              <Loader abrupt hidden={uiState !== 'loading'} />\n              <button disabled={uiState === 'loading'} type=\"submit\">\n                Save &amp; close\n              </button>\n            </span>\n          </footer>\n        </form>\n      </main>\n    </div>\n  );\n}\n\nexport default AccountInfo;\n","import { useEffect } from 'preact/hooks';\n\nimport { api } from '../utils/api';\nimport states from '../utils/states';\nimport useLocationChange from '../utils/useLocationChange';\n\nimport AccountInfo from './account-info';\nimport Icon from './icon';\n\nfunction AccountSheet({ account, instance: propInstance, onClose }) {\n  const { masto, instance, authenticated } = api({ instance: propInstance });\n  const isString = typeof account === 'string';\n\n  useEffect(() => {\n    if (!isString) {\n      states.accounts[`${account.id}@${instance}`] = account;\n    }\n  }, [account]);\n\n  useLocationChange(onClose);\n\n  return (\n    <div\n      class=\"sheet\"\n      // onClick={(e) => {\n      //   const accountBlock = e.target.closest('.account-block');\n      //   if (accountBlock) {\n      //     onClose({\n      //       destination: 'account-statuses',\n      //     });\n      //   }\n      // }}\n    >\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close outer\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <AccountInfo\n        instance={instance}\n        authenticated={authenticated}\n        account={account}\n        fetchAccount={async () => {\n          if (isString) {\n            try {\n              const info = await masto.v1.accounts.lookup({\n                acct: account,\n                skip_webfinger: false,\n              });\n              return info;\n            } catch (e) {\n              const result = await masto.v2.search.fetch({\n                q: account,\n                type: 'accounts',\n                limit: 1,\n                resolve: authenticated,\n              });\n              if (result.accounts.length) {\n                return result.accounts[0];\n              } else if (/https?:\\/\\/[^/]+\\/@/.test(account)) {\n                const accountURL = new URL(account);\n                const acct = accountURL.pathname.replace(/^\\//, '');\n                const result = await masto.v2.search.fetch({\n                  q: acct,\n                  type: 'accounts',\n                  limit: 1,\n                  resolve: authenticated,\n                });\n                if (result.accounts.length) {\n                  return result.accounts[0];\n                }\n              }\n            }\n          } else {\n            return account;\n          }\n        }}\n      />\n    </div>\n  );\n}\n\nexport default AccountSheet;\n","import './drafts.css';\n\nimport { useEffect, useMemo, useReducer, useState } from 'react';\n\nimport { api } from '../utils/api';\nimport db from '../utils/db';\nimport niceDateTime from '../utils/nice-date-time';\nimport states from '../utils/states';\nimport { getCurrentAccountNS } from '../utils/store-utils';\n\nimport Icon from './icon';\nimport Loader from './loader';\nimport MenuConfirm from './menu-confirm';\n\nfunction Drafts({ onClose }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [drafts, setDrafts] = useState([]);\n  const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const keys = await db.drafts.keys();\n        if (keys.length) {\n          const ns = getCurrentAccountNS();\n          const ownKeys = keys.filter((key) => key.startsWith(ns));\n          if (ownKeys.length) {\n            const drafts = await db.drafts.getMany(ownKeys);\n            drafts.sort(\n              (a, b) =>\n                new Date(b.updatedAt).getTime() -\n                new Date(a.updatedAt).getTime(),\n            );\n            setDrafts(drafts);\n          } else {\n            setDrafts([]);\n          }\n        } else {\n          setDrafts([]);\n        }\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, [reloadCount]);\n\n  const hasDrafts = drafts?.length > 0;\n\n  return (\n    <div class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>\n          Unsent drafts <Loader abrupt hidden={uiState !== 'loading'} />\n        </h2>\n        {hasDrafts && (\n          <div class=\"insignificant\">\n            Looks like you have unsent drafts. Let's continue where you left\n            off.\n          </div>\n        )}\n      </header>\n      <main>\n        {hasDrafts ? (\n          <>\n            <ul class=\"drafts-list\">\n              {drafts.map((draft) => {\n                const { updatedAt, key, draftStatus, replyTo } = draft;\n                const updatedAtDate = new Date(updatedAt);\n                return (\n                  <li key={updatedAt}>\n                    <div class=\"mini-draft-meta\">\n                      <b>\n                        <Icon icon={replyTo ? 'reply' : 'quill'} size=\"s\" />{' '}\n                        <time>\n                          {!!replyTo && (\n                            <>\n                              @{replyTo.account.acct}\n                              <br />\n                            </>\n                          )}\n                          {niceDateTime(updatedAtDate)}\n                        </time>\n                      </b>\n                      <MenuConfirm\n                        confirmLabel={<span>Delete this draft?</span>}\n                        menuItemClassName=\"danger\"\n                        align=\"end\"\n                        disabled={uiState === 'loading'}\n                        onClick={() => {\n                          (async () => {\n                            try {\n                              // const yes = confirm('Delete this draft?');\n                              // if (yes) {\n                              await db.drafts.del(key);\n                              reload();\n                              // }\n                            } catch (e) {\n                              alert('Error deleting draft! Please try again.');\n                            }\n                          })();\n                        }}\n                      >\n                        <button\n                          type=\"button\"\n                          class=\"small light\"\n                          disabled={uiState === 'loading'}\n                        >\n                          Delete&hellip;\n                        </button>\n                      </MenuConfirm>\n                    </div>\n                    <button\n                      type=\"button\"\n                      disabled={uiState === 'loading'}\n                      class=\"draft-item\"\n                      onClick={async () => {\n                        // console.log({ draftStatus });\n                        let replyToStatus;\n                        if (replyTo) {\n                          setUIState('loading');\n                          try {\n                            replyToStatus = await masto.v1.statuses\n                              .$select(replyTo.id)\n                              .fetch();\n                          } catch (e) {\n                            console.error(e);\n                            alert('Error fetching reply-to status!');\n                            setUIState('default');\n                            return;\n                          }\n                          setUIState('default');\n                        }\n                        window.__COMPOSE__ = {\n                          draftStatus,\n                          replyToStatus,\n                        };\n                        states.showCompose = true;\n                        states.showDrafts = false;\n                      }}\n                    >\n                      <MiniDraft draft={draft} />\n                    </button>\n                  </li>\n                );\n              })}\n            </ul>\n            {drafts.length > 1 && (\n              <p>\n                <MenuConfirm\n                  confirmLabel={<span>Delete all drafts?</span>}\n                  menuItemClassName=\"danger\"\n                  disabled={uiState === 'loading'}\n                  onClick={() => {\n                    (async () => {\n                      // const yes = confirm('Delete all drafts?');\n                      // if (yes) {\n                      setUIState('loading');\n                      try {\n                        await db.drafts.delMany(\n                          drafts.map((draft) => draft.key),\n                        );\n                        setUIState('default');\n                        reload();\n                      } catch (e) {\n                        console.error(e);\n                        alert('Error deleting drafts! Please try again.');\n                        setUIState('error');\n                      }\n                      // }\n                    })();\n                  }}\n                >\n                  <button\n                    type=\"button\"\n                    class=\"light danger\"\n                    disabled={uiState === 'loading'}\n                  >\n                    Delete all&hellip;\n                  </button>\n                </MenuConfirm>\n              </p>\n            )}\n          </>\n        ) : (\n          <p>No drafts found.</p>\n        )}\n      </main>\n    </div>\n  );\n}\n\nfunction MiniDraft({ draft }) {\n  const { draftStatus, replyTo } = draft;\n  const { status, spoilerText, poll, mediaAttachments } = draftStatus;\n  const hasPoll = poll?.options?.length > 0;\n  const hasMedia = mediaAttachments?.length > 0;\n  const hasPollOrMedia = hasPoll || hasMedia;\n  const firstImageMedia = useMemo(() => {\n    if (!hasMedia) return;\n    const image = mediaAttachments.find((media) => /image/.test(media.type));\n    if (!image) return;\n    const { file } = image;\n    const objectURL = URL.createObjectURL(file);\n    return objectURL;\n  }, [hasMedia, mediaAttachments]);\n  return (\n    <>\n      <div class=\"mini-draft\">\n        {hasPollOrMedia && (\n          <div\n            class={`mini-draft-aside ${firstImageMedia ? 'has-image' : ''}`}\n            style={\n              firstImageMedia\n                ? {\n                    '--bg-image': `url(${firstImageMedia})`,\n                  }\n                : {}\n            }\n          >\n            {hasPoll && <Icon icon=\"poll\" />}\n            {hasMedia && (\n              <span>\n                <Icon icon=\"attachment\" />{' '}\n                <small>{mediaAttachments?.length}</small>\n              </span>\n            )}\n          </div>\n        )}\n        <div class=\"mini-draft-main\">\n          {!!spoilerText && <div class=\"mini-draft-spoiler\">{spoilerText}</div>}\n          {!!status && <div class=\"mini-draft-status\">{status}</div>}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Drafts;\n","import './generic-accounts.css';\n\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { InView } from 'react-intersection-observer';\nimport { useSnapshot } from 'valtio';\n\nimport states from '../utils/states';\nimport useLocationChange from '../utils/useLocationChange';\n\nimport AccountBlock from './account-block';\nimport Icon from './icon';\nimport Loader from './loader';\n\nexport default function GenericAccounts({ onClose = () => {} }) {\n  const snapStates = useSnapshot(states);\n  const [uiState, setUIState] = useState('default');\n  const [accounts, setAccounts] = useState([]);\n  const [showMore, setShowMore] = useState(false);\n\n  useLocationChange(onClose);\n\n  if (!snapStates.showGenericAccounts) {\n    return null;\n  }\n\n  const {\n    id,\n    heading,\n    fetchAccounts,\n    accounts: staticAccounts,\n    showReactions,\n  } = snapStates.showGenericAccounts;\n\n  const loadAccounts = (firstLoad) => {\n    if (!fetchAccounts) return;\n    if (firstLoad) setAccounts([]);\n    setUIState('loading');\n    (async () => {\n      try {\n        const { done, value } = await fetchAccounts(firstLoad);\n        if (Array.isArray(value)) {\n          if (firstLoad) {\n            setAccounts(value);\n          } else {\n            setAccounts((prev) => [...prev, ...value]);\n          }\n          setShowMore(!done);\n        } else {\n          setShowMore(false);\n        }\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  };\n\n  const firstLoad = useRef(true);\n  useEffect(() => {\n    if (staticAccounts?.length > 0) {\n      setAccounts(staticAccounts);\n    } else {\n      loadAccounts(true);\n      firstLoad.current = false;\n    }\n  }, [staticAccounts, fetchAccounts]);\n\n  useEffect(() => {\n    if (firstLoad.current) return;\n    // reloadGenericAccounts contains value like {id: 'mute', counter: 1}\n    // We only need to reload if the id matches\n    if (snapStates.reloadGenericAccounts?.id === id) {\n      loadAccounts(true);\n    }\n  }, [snapStates.reloadGenericAccounts.counter]);\n\n  return (\n    <div id=\"generic-accounts-container\" class=\"sheet\" tabindex=\"-1\">\n      <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n        <Icon icon=\"x\" />\n      </button>\n      <header>\n        <h2>{heading || 'Accounts'}</h2>\n      </header>\n      <main>\n        {accounts.length > 0 ? (\n          <>\n            <ul class=\"accounts-list\">\n              {accounts.map((account) => (\n                <li key={account.id + (account._types || '')}>\n                  {showReactions && account._types?.length > 0 && (\n                    <div class=\"reactions-block\">\n                      {account._types.map((type) => (\n                        <Icon\n                          icon={\n                            {\n                              reblog: 'rocket',\n                              favourite: 'heart',\n                            }[type]\n                          }\n                          class={`${type}-icon`}\n                        />\n                      ))}\n                    </div>\n                  )}\n                  <AccountBlock account={account} />\n                </li>\n              ))}\n            </ul>\n            {uiState === 'default' ? (\n              showMore ? (\n                <InView\n                  onChange={(inView) => {\n                    if (inView) {\n                      loadAccounts();\n                    }\n                  }}\n                >\n                  <button\n                    type=\"button\"\n                    class=\"plain block\"\n                    onClick={() => loadAccounts()}\n                  >\n                    Show more&hellip;\n                  </button>\n                </InView>\n              ) : (\n                <p class=\"ui-state insignificant\">The end.</p>\n              )\n            ) : (\n              uiState === 'loading' && (\n                <p class=\"ui-state\">\n                  <Loader abrupt />\n                </p>\n              )\n            )}\n          </>\n        ) : uiState === 'loading' ? (\n          <p class=\"ui-state\">\n            <Loader abrupt />\n          </p>\n        ) : uiState === 'error' ? (\n          <p class=\"ui-state\">Error loading accounts</p>\n        ) : (\n          <p class=\"ui-state insignificant\">Nothing to show</p>\n        )}\n      </main>\n    </div>\n  );\n}\n","import { Menu, MenuItem } from '@szhsin/react-menu';\nimport { useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport getTranslateTargetLanguage from '../utils/get-translate-target-language';\nimport localeMatch from '../utils/locale-match';\nimport states from '../utils/states';\n\nimport Icon from './icon';\nimport Menu2 from './menu2';\nimport TranslationBlock from './translation-block';\n\nexport default function MediaAltModal({ alt, lang, onClose }) {\n  const snapStates = useSnapshot(states);\n  const [forceTranslate, setForceTranslate] = useState(false);\n  const targetLanguage = getTranslateTargetLanguage(true);\n  const contentTranslationHideLanguages =\n    snapStates.settings.contentTranslationHideLanguages || [];\n  const differentLanguage =\n    !!lang &&\n    lang !== targetLanguage &&\n    !localeMatch([lang], [targetLanguage]) &&\n    !contentTranslationHideLanguages.find(\n      (l) => lang === l || localeMatch([lang], [l]),\n    );\n\n  return (\n    <div class=\"sheet\" tabindex=\"-1\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close outer\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header class=\"header-grid\">\n        <h2>Media description</h2>\n        <div class=\"header-side\">\n          <Menu2\n            align=\"end\"\n            menuButton={\n              <button type=\"button\" class=\"plain4\">\n                <Icon icon=\"more\" alt=\"More\" size=\"xl\" />\n              </button>\n            }\n          >\n            <MenuItem\n              disabled={forceTranslate}\n              onClick={() => {\n                setForceTranslate(true);\n              }}\n            >\n              <Icon icon=\"translate\" />\n              <span>Translate</span>\n            </MenuItem>\n          </Menu2>\n        </div>\n      </header>\n      <main lang={lang} dir=\"auto\">\n        <p\n          style={{\n            whiteSpace: 'pre-wrap',\n            textWrap: 'pretty',\n          }}\n        >\n          {alt}\n        </p>\n        {(differentLanguage || forceTranslate) && (\n          <TranslationBlock\n            forceTranslate={forceTranslate}\n            sourceLanguage={lang}\n            text={alt}\n          />\n        )}\n      </main>\n    </div>\n  );\n}\n","// https://gist.github.com/earthbound19/e7fe15fdf8ca3ef814750a61bc75b5ce\nfunction clamp(value, min, max) {\n  return Math.max(Math.min(value, max), min);\n}\n\nconst gammaToLinear = (c) =>\n  c >= 0.04045 ? Math.pow((c + 0.055) / 1.055, 2.4) : c / 12.92;\nconst linearToGamma = (c) =>\n  c >= 0.0031308 ? 1.055 * Math.pow(c, 1 / 2.4) - 0.055 : 12.92 * c;\n\nexport function rgb2oklab([r, g, b]) {\n  r = gammaToLinear(r / 255);\n  g = gammaToLinear(g / 255);\n  b = gammaToLinear(b / 255);\n  var l = 0.4122214708 * r + 0.5363325363 * g + 0.0514459929 * b;\n  var m = 0.2119034982 * r + 0.6806995451 * g + 0.1073969566 * b;\n  var s = 0.0883024619 * r + 0.2817188376 * g + 0.6299787005 * b;\n  l = Math.cbrt(l);\n  m = Math.cbrt(m);\n  s = Math.cbrt(s);\n  return [\n    l * +0.2104542553 + m * +0.793617785 + s * -0.0040720468,\n    l * +1.9779984951 + m * -2.428592205 + s * +0.4505937099,\n    l * +0.0259040371 + m * +0.7827717662 + s * -0.808675766,\n  ];\n}\n\nexport function oklab2rgb([L, a, b]) {\n  var l = L + a * +0.3963377774 + b * +0.2158037573;\n  var m = L + a * -0.1055613458 + b * -0.0638541728;\n  var s = L + a * -0.0894841775 + b * -1.291485548;\n  // The ** operator here cubes; same as l_*l_*l_ in the C++ example:\n  l = l ** 3;\n  m = m ** 3;\n  s = s ** 3;\n  var r = l * +4.0767416621 + m * -3.3077115913 + s * +0.2309699292;\n  var g = l * -1.2684380046 + m * +2.6097574011 + s * -0.3413193965;\n  var b = l * -0.0041960863 + m * -0.7034186147 + s * +1.707614701;\n  // Convert linear RGB values returned from oklab math to sRGB for our use before returning them:\n  r = 255 * linearToGamma(r);\n  g = 255 * linearToGamma(g);\n  b = 255 * linearToGamma(b);\n  // OPTION: clamp r g and b values to the range 0-255; but if you use the values immediately to draw, JavaScript clamps them on use:\n  r = clamp(r, 0, 255);\n  g = clamp(g, 0, 255);\n  b = clamp(b, 0, 255);\n  // OPTION: round the values. May not be necessary if you use them immediately for rendering in JavaScript, as JavaScript (also) discards decimals on render:\n  r = Math.round(r);\n  g = Math.round(g);\n  b = Math.round(b);\n  return [r, g, b];\n}\n","import { Menu } from '@szhsin/react-menu';\nimport { getBlurHashAverageColor } from 'fast-blurhash';\nimport {\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\n\nimport { oklab2rgb, rgb2oklab } from '../utils/color-utils';\nimport states from '../utils/states';\n\nimport Icon from './icon';\nimport Link from './link';\nimport Media from './media';\nimport Menu2 from './menu2';\nimport MenuLink from './menu-link';\n\nfunction MediaModal({\n  mediaAttachments,\n  statusID,\n  instance,\n  lang,\n  index = 0,\n  onClose = () => {},\n}) {\n  const carouselRef = useRef(null);\n\n  const [currentIndex, setCurrentIndex] = useState(index);\n  const carouselFocusItem = useRef(null);\n  useLayoutEffect(() => {\n    carouselFocusItem.current?.scrollIntoView();\n\n    // history.pushState({ mediaModal: true }, '');\n    // const handlePopState = (e) => {\n    //   if (e.state?.mediaModal) {\n    //     onClose();\n    //   }\n    // };\n    // window.addEventListener('popstate', handlePopState);\n    // return () => {\n    //   window.removeEventListener('popstate', handlePopState);\n    // };\n  }, []);\n  const prevStatusID = useRef(statusID);\n  useEffect(() => {\n    const scrollLeft = index * carouselRef.current.clientWidth;\n    const differentStatusID = prevStatusID.current !== statusID;\n    if (differentStatusID) prevStatusID.current = statusID;\n    carouselRef.current.scrollTo({\n      left: scrollLeft,\n      behavior: differentStatusID ? 'auto' : 'smooth',\n    });\n    carouselRef.current.focus();\n  }, [index, statusID]);\n\n  const [showControls, setShowControls] = useState(true);\n\n  useEffect(() => {\n    let handleSwipe = () => {\n      onClose();\n    };\n    if (carouselRef.current) {\n      carouselRef.current.addEventListener('swiped-down', handleSwipe);\n    }\n    return () => {\n      if (carouselRef.current) {\n        carouselRef.current.removeEventListener('swiped-down', handleSwipe);\n      }\n    };\n  }, []);\n\n  useHotkeys(\n    'esc',\n    onClose,\n    {\n      ignoreEventWhen: (e) => {\n        const hasModal = !!document.querySelector('#modal-container > *');\n        return hasModal;\n      },\n    },\n    [onClose],\n  );\n\n  useEffect(() => {\n    let handleScroll = () => {\n      const { clientWidth, scrollLeft } = carouselRef.current;\n      const index = Math.round(scrollLeft / clientWidth);\n      setCurrentIndex(index);\n    };\n    if (carouselRef.current) {\n      carouselRef.current.addEventListener('scroll', handleScroll, {\n        passive: true,\n      });\n    }\n    return () => {\n      if (carouselRef.current) {\n        carouselRef.current.removeEventListener('scroll', handleScroll);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    let timer = setTimeout(() => {\n      carouselRef.current?.focus?.();\n    }, 100);\n    return () => clearTimeout(timer);\n  }, []);\n\n  const mediaAccentColors = useMemo(() => {\n    return mediaAttachments?.map((media) => {\n      const { blurhash } = media;\n      if (blurhash) {\n        const averageColor = getBlurHashAverageColor(blurhash);\n        const labAverageColor = rgb2oklab(averageColor);\n        return oklab2rgb([0.6, labAverageColor[1], labAverageColor[2]]);\n      }\n      return null;\n    });\n  }, [mediaAttachments]);\n  const mediaAccentGradient = useMemo(() => {\n    const gap = 5;\n    const range = 100 / mediaAccentColors.length;\n    return (\n      mediaAccentColors\n        ?.map((color, i) => {\n          const start = i * range + gap;\n          const end = (i + 1) * range - gap;\n          if (color) {\n            return `\n            rgba(${color?.join(',')}, 0.4) ${start}%,\n            rgba(${color?.join(',')}, 0.4) ${end}%\n          `;\n          }\n\n          return `\n            transparent ${start}%,\n            transparent ${end}%\n          `;\n        })\n        ?.join(', ') || 'transparent'\n    );\n  }, [mediaAccentColors]);\n\n  return (\n    <div\n      class={`media-modal-container media-modal-count-${mediaAttachments?.length}`}\n    >\n      <div\n        ref={carouselRef}\n        tabIndex=\"0\"\n        data-swipe-threshold=\"44\"\n        class=\"carousel\"\n        onClick={(e) => {\n          if (\n            e.target.classList.contains('carousel-item') ||\n            e.target.classList.contains('media') ||\n            e.target.classList.contains('media-zoom')\n          ) {\n            onClose();\n          }\n        }}\n        style={\n          mediaAttachments.length > 1\n            ? {\n                backgroundAttachment: 'local',\n                backgroundImage: `linear-gradient(\n            to right, ${mediaAccentGradient})`,\n              }\n            : {}\n        }\n      >\n        {mediaAttachments?.map((media, i) => {\n          const accentColor =\n            mediaAttachments.length === 1 ? mediaAccentColors[i] : null;\n          return (\n            <div\n              class=\"carousel-item\"\n              style={\n                accentColor\n                  ? {\n                      '--accent-color': `rgb(${accentColor?.join(',')})`,\n                      '--accent-alpha-color': `rgba(${accentColor?.join(\n                        ',',\n                      )}, 0.4)`,\n                    }\n                  : {}\n              }\n              tabindex=\"0\"\n              key={media.id}\n              ref={i === currentIndex ? carouselFocusItem : null}\n              onClick={(e) => {\n                // console.log(e);\n                // if (e.target !== e.currentTarget) {\n                //   setShowControls(!showControls);\n                // }\n                if (!e.target.classList.contains('media')) {\n                  setShowControls(!showControls);\n                }\n              }}\n            >\n              {!!media.description && (\n                <button\n                  type=\"button\"\n                  class=\"media-alt\"\n                  hidden={!showControls}\n                  onClick={() => {\n                    states.showMediaAlt = {\n                      alt: media.description,\n                      lang,\n                    };\n                  }}\n                >\n                  <span class=\"alt-badge\">ALT</span>\n                  <span class=\"media-alt-desc\" lang={lang} dir=\"auto\">\n                    {media.description}\n                  </span>\n                </button>\n              )}\n              <Media media={media} showOriginal lang={lang} />\n            </div>\n          );\n        })}\n      </div>\n      <div class=\"carousel-top-controls\" hidden={!showControls}>\n        <span>\n          <button\n            type=\"button\"\n            class=\"carousel-button\"\n            onClick={() => onClose()}\n          >\n            <Icon icon=\"x\" />\n          </button>\n        </span>\n        {mediaAttachments?.length > 1 ? (\n          <span class=\"carousel-dots\">\n            {mediaAttachments?.map((media, i) => (\n              <button\n                key={media.id}\n                type=\"button\"\n                disabled={i === currentIndex}\n                class={`carousel-dot ${i === currentIndex ? 'active' : ''}`}\n                onClick={(e) => {\n                  e.preventDefault();\n                  e.stopPropagation();\n                  carouselRef.current.scrollTo({\n                    left: carouselRef.current.clientWidth * i,\n                    behavior: 'smooth',\n                  });\n                  carouselRef.current.focus();\n                }}\n              >\n                <Icon icon=\"round\" size=\"s\" />\n              </button>\n            ))}\n          </span>\n        ) : (\n          <span />\n        )}\n        <span>\n          <Menu2\n            overflow=\"auto\"\n            align=\"end\"\n            position=\"anchor\"\n            gap={4}\n            menuClassName=\"glass-menu\"\n            menuButton={\n              <button type=\"button\" class=\"carousel-button\">\n                <Icon icon=\"more\" alt=\"More\" />\n              </button>\n            }\n          >\n            <MenuLink\n              href={\n                mediaAttachments[currentIndex]?.remoteUrl ||\n                mediaAttachments[currentIndex]?.url\n              }\n              class=\"carousel-button\"\n              target=\"_blank\"\n              title=\"Open original media in new window\"\n            >\n              <Icon icon=\"popout\" />\n              <span>Open original media</span>\n            </MenuLink>\n          </Menu2>{' '}\n          <Link\n            to={`${instance ? `/${instance}` : ''}/s/${statusID}${\n              window.matchMedia('(min-width: calc(40em + 350px))').matches\n                ? `?media=${currentIndex + 1}`\n                : ''\n            }`}\n            class=\"button carousel-button media-post-link\"\n            // onClick={() => {\n            //   // if small screen (not media query min-width 40em + 350px), run onClose\n            //   if (\n            //     !window.matchMedia('(min-width: calc(40em + 350px))').matches\n            //   ) {\n            //     onClose();\n            //   }\n            // }}\n          >\n            <span class=\"button-label\">View post </span>&raquo;\n          </Link>\n        </span>\n      </div>\n      {mediaAttachments?.length > 1 && (\n        <div class=\"carousel-controls\" hidden={!showControls}>\n          <button\n            type=\"button\"\n            class=\"carousel-button\"\n            hidden={currentIndex === 0}\n            onClick={(e) => {\n              e.preventDefault();\n              e.stopPropagation();\n              carouselRef.current.focus();\n              carouselRef.current.scrollTo({\n                left: carouselRef.current.clientWidth * (currentIndex - 1),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"arrow-left\" />\n          </button>\n          <button\n            type=\"button\"\n            class=\"carousel-button\"\n            hidden={currentIndex === mediaAttachments.length - 1}\n            onClick={(e) => {\n              e.preventDefault();\n              e.stopPropagation();\n              carouselRef.current.focus();\n              carouselRef.current.scrollTo({\n                left: carouselRef.current.clientWidth * (currentIndex + 1),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"arrow-right\" />\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default MediaModal;\n","export default \"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20fill='none'%20viewBox='0%200%2084%2062'%3e%3crect%20width='64'%20height='48'%20x='18'%20y='2'%20fill='%23fff'%20stroke='%23999'%20stroke-width='3'%20rx='4'/%3e%3crect%20width='32'%20height='48'%20x='2'%20y='12'%20fill='%23fff'%20stroke='%23999'%20stroke-width='3'%20rx='4'/%3e%3cpath%20fill='%234169E1'%20d='M14%2052a4%204%200%201%201-8%200%204%204%200%200%201%208%200Zm64-42a4%204%200%201%201-8%200%204%204%200%200%201%208%200Z'/%3e%3c/svg%3e\"","export default \"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20fill='none'%20viewBox='0%200%2082%2062'%3e%3crect%20width='78'%20height='58'%20x='2'%20y='2'%20fill='%23999'%20fill-opacity='.3'%20stroke='%23999'%20stroke-width='3'%20rx='4'/%3e%3crect%20width='18'%20height='46'%20x='8'%20y='8'%20fill='%23fff'%20stroke='%23999'%20stroke-width='2'%20rx='1'/%3e%3crect%20width='18'%20height='46'%20x='32'%20y='8'%20fill='%23fff'%20stroke='%23999'%20stroke-width='2'%20rx='1'/%3e%3crect%20width='18'%20height='46'%20x='56'%20y='8'%20fill='%23fff'%20stroke='%23999'%20stroke-width='2'%20rx='1'/%3e%3c/svg%3e\"","export default \"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20fill='none'%20viewBox='0%200%2084%2062'%3e%3crect%20width='64'%20height='48'%20x='18'%20y='2'%20fill='%23fff'%20stroke='%23999'%20stroke-width='3'%20rx='4'/%3e%3cpath%20fill='%23999'%20fill-opacity='.3'%20d='M19%203h62v10H19z'/%3e%3cpath%20stroke='%234169E1'%20stroke-width='2'%20d='M43%208a2%202%200%201%201-4%200%202%202%200%200%201%204%200Z'/%3e%3cpath%20stroke='%23999'%20stroke-width='2'%20d='M52%208a2%202%200%201%201-4%200%202%202%200%200%201%204%200Zm9%200a2%202%200%201%201-4%200%202%202%200%200%201%204%200Z'/%3e%3crect%20width='32'%20height='48'%20x='2'%20y='12'%20fill='%23fff'%20stroke='%23999'%20stroke-width='3'%20rx='4'/%3e%3cpath%20fill='%23999'%20fill-opacity='.3'%20d='M3%2049h30v10H3z'/%3e%3cpath%20stroke='%234169E1'%20stroke-width='2'%20d='M11%2054a2%202%200%201%201-4%200%202%202%200%200%201%204%200Z'/%3e%3cpath%20stroke='%23999'%20stroke-width='2'%20d='M20%2054a2%202%200%201%201-4%200%202%202%200%200%201%204%200Zm9%200a2%202%200%201%201-4%200%202%202%200%200%201%204%200Z'/%3e%3c/svg%3e\"","import { useEffect, useState } from 'preact/hooks';\n\nfunction AsyncText({ children }) {\n  if (typeof children === 'string') return children;\n  const [text, setText] = useState('');\n  useEffect(() => {\n    Promise.resolve(children).then(setText);\n  }, [children]);\n  return text;\n}\n\nexport default AsyncText;\n","import './shortcuts-settings.css';\n\nimport { useAutoAnimate } from '@formkit/auto-animate/preact';\nimport {\n  compressToEncodedURIComponent,\n  decompressFromEncodedURIComponent,\n} from 'lz-string';\nimport { useEffect, useMemo, useRef, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport floatingButtonUrl from '../assets/floating-button.svg';\nimport multiColumnUrl from '../assets/multi-column.svg';\nimport tabMenuBarUrl from '../assets/tab-menu-bar.svg';\n\nimport { api } from '../utils/api';\nimport pmem from '../utils/pmem';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\n\nimport AsyncText from './AsyncText';\nimport Icon from './icon';\nimport MenuConfirm from './menu-confirm';\nimport Modal from './modal';\n\nexport const SHORTCUTS_LIMIT = 9;\n\nconst TYPES = [\n  'following',\n  'mentions',\n  'notifications',\n  'list',\n  'public',\n  'trending',\n  // NOTE: Hide for now\n  // 'search', // Search on Mastodon ain't great\n  // 'account-statuses', // Need @acct search first\n  'hashtag',\n  'bookmarks',\n  'favourites',\n];\nconst TYPE_TEXT = {\n  following: 'Home / Following',\n  notifications: 'Notifications',\n  list: 'List',\n  public: 'Public (Local / Federated)',\n  search: 'Search',\n  'account-statuses': 'Account',\n  bookmarks: 'Bookmarks',\n  favourites: 'Likes',\n  hashtag: 'Hashtag',\n  trending: 'Trending',\n  mentions: 'Mentions',\n};\nconst TYPE_PARAMS = {\n  list: [\n    {\n      text: 'List ID',\n      name: 'id',\n    },\n  ],\n  public: [\n    {\n      text: 'Local only',\n      name: 'local',\n      type: 'checkbox',\n    },\n    {\n      text: 'Instance',\n      name: 'instance',\n      type: 'text',\n      placeholder: 'Optional, e.g. mastodon.social',\n      notRequired: true,\n    },\n  ],\n  trending: [\n    {\n      text: 'Instance',\n      name: 'instance',\n      type: 'text',\n      placeholder: 'Optional, e.g. mastodon.social',\n      notRequired: true,\n    },\n  ],\n  search: [\n    {\n      text: 'Search term',\n      name: 'query',\n      type: 'text',\n    },\n  ],\n  'account-statuses': [\n    {\n      text: '@',\n      name: 'id',\n      type: 'text',\n      placeholder: 'cheeaun@mastodon.social',\n    },\n  ],\n  hashtag: [\n    {\n      text: '#',\n      name: 'hashtag',\n      type: 'text',\n      placeholder: 'e.g. PixelArt (Max 5, space-separated)',\n      pattern: '[^#]+',\n    },\n    {\n      text: 'Media only',\n      name: 'media',\n      type: 'checkbox',\n    },\n    {\n      text: 'Instance',\n      name: 'instance',\n      type: 'text',\n      placeholder: 'Optional, e.g. mastodon.social',\n      notRequired: true,\n    },\n  ],\n};\nconst fetchListTitle = pmem(async ({ id }) => {\n  const list = await api().masto.v1.lists.$select(id).fetch();\n  return list.title;\n});\nconst fetchAccountTitle = pmem(async ({ id }) => {\n  const account = await api().masto.v1.accounts.$select(id).fetch();\n  return account.username || account.acct || account.displayName;\n});\nexport const SHORTCUTS_META = {\n  following: {\n    id: 'home',\n    title: (_, index) => (index === 0 ? 'Home' : 'Following'),\n    path: '/',\n    icon: 'home',\n  },\n  mentions: {\n    id: 'mentions',\n    title: 'Mentions',\n    path: '/mentions',\n    icon: 'at',\n  },\n  notifications: {\n    id: 'notifications',\n    title: 'Notifications',\n    path: '/notifications',\n    icon: 'notification',\n  },\n  list: {\n    id: 'list',\n    title: fetchListTitle,\n    path: ({ id }) => `/l/${id}`,\n    icon: 'list',\n  },\n  public: {\n    id: 'public',\n    title: ({ local }) => (local ? 'Local' : 'Federated'),\n    subtitle: ({ instance }) => instance || api().instance,\n    path: ({ local, instance }) => `/${instance}/p${local ? '/l' : ''}`,\n    icon: ({ local }) => (local ? 'group' : 'earth'),\n  },\n  trending: {\n    id: 'trending',\n    title: 'Trending',\n    subtitle: ({ instance }) => instance || api().instance,\n    path: ({ instance }) => `/${instance}/trending`,\n    icon: 'chart',\n  },\n  search: {\n    id: 'search',\n    title: ({ query }) => query,\n    path: ({ query }) => `/search?q=${query}`,\n    icon: 'search',\n  },\n  'account-statuses': {\n    id: 'account-statuses',\n    title: fetchAccountTitle,\n    path: ({ id }) => `/a/${id}`,\n    icon: 'user',\n  },\n  bookmarks: {\n    id: 'bookmarks',\n    title: 'Bookmarks',\n    path: '/b',\n    icon: 'bookmark',\n  },\n  favourites: {\n    id: 'favourites',\n    title: 'Likes',\n    path: '/f',\n    icon: 'heart',\n  },\n  hashtag: {\n    id: 'hashtag',\n    title: ({ hashtag }) => hashtag,\n    subtitle: ({ instance }) => instance || api().instance,\n    path: ({ hashtag, instance, media }) =>\n      `${instance ? `/${instance}` : ''}/t/${hashtag.split(/\\s+/).join('+')}${\n        media ? '?media=1' : ''\n      }`,\n    icon: 'hashtag',\n  },\n};\n\nfunction ShortcutsSettings({ onClose }) {\n  const snapStates = useSnapshot(states);\n  const { shortcuts } = snapStates;\n  const [showForm, setShowForm] = useState(false);\n  const [showImportExport, setShowImportExport] = useState(false);\n\n  const [shortcutsListParent] = useAutoAnimate();\n\n  return (\n    <div id=\"shortcuts-settings-container\" class=\"sheet\" tabindex=\"-1\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>\n          <Icon icon=\"shortcut\" /> Shortcuts{' '}\n          <sup\n            style={{\n              fontSize: 12,\n              opacity: 0.5,\n              textTransform: 'uppercase',\n            }}\n          >\n            beta\n          </sup>\n        </h2>\n      </header>\n      <main>\n        <p>Specify a list of shortcuts that'll appear&nbsp;as:</p>\n        <div class=\"shortcuts-view-mode\">\n          {[\n            {\n              value: 'float-button',\n              label: 'Floating button',\n              imgURL: floatingButtonUrl,\n            },\n            {\n              value: 'tab-menu-bar',\n              label: 'Tab/Menu bar',\n              imgURL: tabMenuBarUrl,\n            },\n            {\n              value: 'multi-column',\n              label: 'Multi-column',\n              imgURL: multiColumnUrl,\n            },\n          ].map(({ value, label, imgURL }) => {\n            const checked =\n              snapStates.settings.shortcutsViewMode === value ||\n              (value === 'float-button' &&\n                !snapStates.settings.shortcutsViewMode);\n            return (\n              <label key={value} class={checked ? 'checked' : ''}>\n                <input\n                  type=\"radio\"\n                  name=\"shortcuts-view-mode\"\n                  value={value}\n                  checked={checked}\n                  onChange={(e) => {\n                    states.settings.shortcutsViewMode = e.target.value;\n                  }}\n                />{' '}\n                <img src={imgURL} alt=\"\" width=\"80\" height=\"58\" />{' '}\n                <span>{label}</span>\n              </label>\n            );\n          })}\n        </div>\n        {shortcuts.length > 0 ? (\n          <ol class=\"shortcuts-list\" ref={shortcutsListParent}>\n            {shortcuts.filter(Boolean).map((shortcut, i) => {\n              // const key = i + Object.values(shortcut);\n              const key = Object.values(shortcut).join('-');\n              const { type } = shortcut;\n              if (!SHORTCUTS_META[type]) return null;\n              let { icon, title, subtitle } = SHORTCUTS_META[type];\n              if (typeof title === 'function') {\n                title = title(shortcut, i);\n              }\n              if (typeof subtitle === 'function') {\n                subtitle = subtitle(shortcut, i);\n              }\n              if (typeof icon === 'function') {\n                icon = icon(shortcut, i);\n              }\n              return (\n                <li key={key}>\n                  <Icon icon={icon} />\n                  <span class=\"shortcut-text\">\n                    <AsyncText>{title}</AsyncText>\n                    {subtitle && (\n                      <>\n                        {' '}\n                        <small class=\"ib insignificant\">{subtitle}</small>\n                      </>\n                    )}\n                  </span>\n                  <span class=\"shortcut-actions\">\n                    <button\n                      type=\"button\"\n                      class=\"plain small\"\n                      disabled={i === 0}\n                      onClick={() => {\n                        const shortcutsArr = Array.from(states.shortcuts);\n                        if (i > 0) {\n                          const temp = states.shortcuts[i - 1];\n                          shortcutsArr[i - 1] = shortcut;\n                          shortcutsArr[i] = temp;\n                          states.shortcuts = shortcutsArr;\n                        }\n                      }}\n                    >\n                      <Icon icon=\"arrow-up\" alt=\"Move up\" />\n                    </button>\n                    <button\n                      type=\"button\"\n                      class=\"plain small\"\n                      disabled={i === shortcuts.length - 1}\n                      onClick={() => {\n                        const shortcutsArr = Array.from(states.shortcuts);\n                        if (i < states.shortcuts.length - 1) {\n                          const temp = states.shortcuts[i + 1];\n                          shortcutsArr[i + 1] = shortcut;\n                          shortcutsArr[i] = temp;\n                          states.shortcuts = shortcutsArr;\n                        }\n                      }}\n                    >\n                      <Icon icon=\"arrow-down\" alt=\"Move down\" />\n                    </button>\n                    <button\n                      type=\"button\"\n                      class=\"plain small\"\n                      onClick={() => {\n                        setShowForm({\n                          shortcut,\n                          shortcutIndex: i,\n                        });\n                      }}\n                    >\n                      <Icon icon=\"pencil\" alt=\"Edit\" />\n                    </button>\n                    {/* <button\n                      type=\"button\"\n                      class=\"plain small\"\n                      onClick={() => {\n                        states.shortcuts.splice(i, 1);\n                      }}\n                    >\n                      <Icon icon=\"x\" alt=\"Remove\" />\n                    </button> */}\n                  </span>\n                </li>\n              );\n            })}\n          </ol>\n        ) : (\n          <div class=\"ui-state insignificant\">\n            <p>No shortcuts yet. Tap on the Add shortcut button.</p>\n            <p>\n              Not sure what to add?\n              <br />\n              Try adding{' '}\n              <a\n                href=\"#\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  states.shortcuts = [\n                    {\n                      type: 'following',\n                    },\n                    {\n                      type: 'notifications',\n                    },\n                  ];\n                }}\n              >\n                Home / Following and Notifications\n              </a>{' '}\n              first.\n            </p>\n          </div>\n        )}\n        <p class=\"insignificant\">\n          {shortcuts.length >= SHORTCUTS_LIMIT &&\n            `Max ${SHORTCUTS_LIMIT} shortcuts`}\n        </p>\n        <p\n          style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n          }}\n        >\n          <button\n            type=\"button\"\n            class=\"light\"\n            onClick={() => setShowImportExport(true)}\n          >\n            Import/export\n          </button>\n          <button\n            type=\"button\"\n            disabled={shortcuts.length >= SHORTCUTS_LIMIT}\n            onClick={() => setShowForm(true)}\n          >\n            <Icon icon=\"plus\" /> <span>Add shortcut</span>\n          </button>\n        </p>\n      </main>\n      {showForm && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowForm(false);\n            }\n          }}\n        >\n          <ShortcutForm\n            shortcut={showForm.shortcut}\n            shortcutIndex={showForm.shortcutIndex}\n            onSubmit={({ result, mode }) => {\n              console.log('onSubmit', result);\n              if (mode === 'edit') {\n                states.shortcuts[showForm.shortcutIndex] = result;\n              } else {\n                states.shortcuts.push(result);\n              }\n            }}\n            onClose={() => setShowForm(false)}\n          />\n        </Modal>\n      )}\n      {showImportExport && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowImportExport(false);\n            }\n          }}\n        >\n          <ImportExport\n            shortcuts={shortcuts}\n            onClose={() => setShowImportExport(false)}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nconst FETCH_MAX_AGE = 1000 * 60; // 1 minute\nconst fetchLists = pmem(\n  () => {\n    const { masto } = api();\n    return masto.v1.lists.list();\n  },\n  {\n    maxAge: FETCH_MAX_AGE,\n  },\n);\n\nfunction ShortcutForm({\n  onSubmit,\n  disabled,\n  shortcut,\n  shortcutIndex,\n  onClose,\n}) {\n  console.log('shortcut', shortcut);\n  const editMode = !!shortcut;\n  const [currentType, setCurrentType] = useState(shortcut?.type || null);\n  const { masto } = api();\n\n  const [uiState, setUIState] = useState('default');\n  const [lists, setLists] = useState([]);\n  const [followedHashtags, setFollowedHashtags] = useState([]);\n  useEffect(() => {\n    (async () => {\n      if (currentType !== 'list') return;\n      try {\n        setUIState('loading');\n        const lists = await fetchLists();\n        lists.sort((a, b) => a.title.localeCompare(b.title));\n        setLists(lists);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n\n    (async () => {\n      if (currentType !== 'hashtag') return;\n      try {\n        const iterator = masto.v1.followedTags.list();\n        const tags = [];\n        do {\n          const { value, done } = await iterator.next();\n          if (done || value?.length === 0) break;\n          tags.push(...value);\n        } while (true);\n        setFollowedHashtags(tags);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [currentType]);\n\n  const formRef = useRef();\n  useEffect(() => {\n    if (editMode && currentType && TYPE_PARAMS[currentType]) {\n      // Populate form\n      const form = formRef.current;\n      TYPE_PARAMS[currentType].forEach(({ name, type }) => {\n        const input = form.querySelector(`[name=\"${name}\"]`);\n        if (input && shortcut[name]) {\n          if (type === 'checkbox') {\n            input.checked = shortcut[name] === 'on' ? true : false;\n          } else {\n            input.value = shortcut[name];\n          }\n        }\n      });\n    }\n  }, [editMode, currentType]);\n\n  return (\n    <div id=\"shortcut-settings-form\" class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>{editMode ? 'Edit' : 'Add'} shortcut</h2>\n      </header>\n      <main tabindex=\"-1\">\n        <form\n          ref={formRef}\n          onSubmit={(e) => {\n            // Construct a nice object from form\n            e.preventDefault();\n            const data = new FormData(e.target);\n            const result = {};\n            data.forEach((value, key) => {\n              result[key] = value?.trim();\n              if (key === 'instance') {\n                // Remove protocol and trailing slash\n                result[key] = result[key]\n                  .replace(/^https?:\\/\\//, '')\n                  .replace(/\\/+$/, '');\n                // Remove @acct@ or acct@ from instance URL\n                result[key] = result[key].replace(/^@?[^@]+@/, '');\n              }\n            });\n            console.log('result', result);\n            if (!result.type) return;\n            onSubmit({\n              result,\n              mode: editMode ? 'edit' : 'add',\n            });\n            // Reset\n            e.target.reset();\n            setCurrentType(null);\n            onClose?.();\n          }}\n        >\n          <p>\n            <label>\n              <span>Timeline</span>\n              <select\n                required\n                disabled={disabled}\n                onChange={(e) => {\n                  setCurrentType(e.target.value);\n                }}\n                defaultValue={editMode ? shortcut.type : undefined}\n                name=\"type\"\n              >\n                <option></option>\n                {TYPES.map((type) => (\n                  <option value={type}>{TYPE_TEXT[type]}</option>\n                ))}\n              </select>\n            </label>\n          </p>\n          {TYPE_PARAMS[currentType]?.map?.(\n            ({ text, name, type, placeholder, pattern, notRequired }) => {\n              if (currentType === 'list') {\n                return (\n                  <p>\n                    <label>\n                      <span>List</span>\n                      <select\n                        name=\"id\"\n                        required={!notRequired}\n                        disabled={disabled || uiState === 'loading'}\n                        defaultValue={editMode ? shortcut.id : undefined}\n                      >\n                        {lists.map((list) => (\n                          <option value={list.id}>{list.title}</option>\n                        ))}\n                      </select>\n                    </label>\n                  </p>\n                );\n              }\n\n              return (\n                <p>\n                  <label>\n                    <span>{text}</span>{' '}\n                    <input\n                      type={type}\n                      name={name}\n                      placeholder={placeholder}\n                      required={type === 'text' && !notRequired}\n                      disabled={disabled}\n                      list={\n                        currentType === 'hashtag'\n                          ? 'followed-hashtags-datalist'\n                          : null\n                      }\n                      autocorrect=\"off\"\n                      autocapitalize=\"off\"\n                      spellcheck={false}\n                      pattern={pattern}\n                    />\n                    {currentType === 'hashtag' &&\n                      followedHashtags.length > 0 && (\n                        <datalist id=\"followed-hashtags-datalist\">\n                          {followedHashtags.map((tag) => (\n                            <option value={tag.name} />\n                          ))}\n                        </datalist>\n                      )}\n                  </label>\n                </p>\n              );\n            },\n          )}\n          <footer>\n            <button\n              type=\"submit\"\n              class=\"block\"\n              disabled={disabled || uiState === 'loading'}\n            >\n              {editMode ? 'Save' : 'Add'}\n            </button>\n            {editMode && (\n              <button\n                type=\"button\"\n                class=\"light danger\"\n                onClick={() => {\n                  states.shortcuts.splice(shortcutIndex, 1);\n                  onClose?.();\n                }}\n              >\n                Remove\n              </button>\n            )}\n          </footer>\n        </form>\n      </main>\n    </div>\n  );\n}\n\nfunction ImportExport({ shortcuts, onClose }) {\n  const shortcutsStr = useMemo(() => {\n    if (!shortcuts) return '';\n    if (!shortcuts.filter(Boolean).length) return '';\n    return compressToEncodedURIComponent(\n      JSON.stringify(shortcuts.filter(Boolean)),\n    );\n  }, [shortcuts]);\n  const [importShortcutStr, setImportShortcutStr] = useState('');\n  const [importUIState, setImportUIState] = useState('default');\n  const parsedImportShortcutStr = useMemo(() => {\n    if (!importShortcutStr) {\n      setImportUIState('default');\n      return null;\n    }\n    try {\n      const parsed = JSON.parse(\n        decompressFromEncodedURIComponent(importShortcutStr),\n      );\n      // Very basic validation, I know\n      if (!Array.isArray(parsed)) throw new Error('Not an array');\n      setImportUIState('default');\n      return parsed;\n    } catch (err) {\n      // Fallback to JSON string parsing\n      // There's a chance that someone might want to import a JSON string instead of the compressed version\n      try {\n        const parsed = JSON.parse(importShortcutStr);\n        if (!Array.isArray(parsed)) throw new Error('Not an array');\n        setImportUIState('default');\n        return parsed;\n      } catch (err) {\n        setImportUIState('error');\n        return null;\n      }\n    }\n  }, [importShortcutStr]);\n  const hasCurrentSettings = states.shortcuts.length > 0;\n\n  return (\n    <div id=\"import-export-container\" class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>\n          Import/Export <small class=\"ib insignificant\">Shortcuts</small>\n        </h2>\n      </header>\n      <main tabindex=\"-1\">\n        <section>\n          <h3>\n            <Icon icon=\"arrow-down-circle\" size=\"l\" class=\"insignificant\" />{' '}\n            <span>Import</span>\n          </h3>\n          <p>\n            <input\n              type=\"text\"\n              name=\"import\"\n              placeholder=\"Paste shortcuts here\"\n              class=\"block\"\n              onInput={(e) => {\n                setImportShortcutStr(e.target.value);\n              }}\n            />\n          </p>\n          {!!parsedImportShortcutStr &&\n            Array.isArray(parsedImportShortcutStr) && (\n              <>\n                <p>\n                  <b>{parsedImportShortcutStr.length}</b> shortcut\n                  {parsedImportShortcutStr.length > 1 ? 's' : ''}{' '}\n                  <small class=\"insignificant\">\n                    ({importShortcutStr.length} characters)\n                  </small>\n                </p>\n                <ol class=\"import-settings-list\">\n                  {parsedImportShortcutStr.map((shortcut) => (\n                    <li>\n                      <span\n                        style={{\n                          opacity: shortcuts.some((s) =>\n                            // Compare all properties\n                            Object.keys(s).every(\n                              (key) => s[key] === shortcut[key],\n                            ),\n                          )\n                            ? 1\n                            : 0,\n                        }}\n                      >\n                        *\n                      </span>\n                      <span>\n                        {TYPE_TEXT[shortcut.type]}\n                        {shortcut.type === 'list' && ' ⚠️'}{' '}\n                        {TYPE_PARAMS[shortcut.type]?.map?.(\n                          ({ text, name, type }) =>\n                            shortcut[name] ? (\n                              <>\n                                <span class=\"tag collapsed insignificant\">\n                                  {text}:{' '}\n                                  {type === 'checkbox'\n                                    ? shortcut[name] === 'on'\n                                      ? '✅'\n                                      : '❌'\n                                    : shortcut[name]}\n                                </span>{' '}\n                              </>\n                            ) : null,\n                        )}\n                      </span>\n                    </li>\n                  ))}\n                </ol>\n                <p>\n                  <small>* Exists in current shortcuts</small>\n                  <br />\n                  <small>\n                    ⚠️ List may not work if it's from a different account.\n                  </small>\n                </p>\n              </>\n            )}\n          {importUIState === 'error' && (\n            <p class=\"error\">\n              <small>⚠️ Invalid settings format</small>\n            </p>\n          )}\n          <p>\n            {hasCurrentSettings && (\n              <>\n                <MenuConfirm\n                  confirmLabel=\"Append to current shortcuts?\"\n                  menuFooter={\n                    <div class=\"footer\">\n                      Only shortcuts that don’t exist in current shortcuts will\n                      be appended.\n                    </div>\n                  }\n                  onClick={() => {\n                    // states.shortcuts = [\n                    //   ...states.shortcuts,\n                    //   ...parsedImportShortcutStr,\n                    // ];\n                    // Append non-unique shortcuts only\n                    const nonUniqueShortcuts = parsedImportShortcutStr.filter(\n                      (shortcut) =>\n                        !states.shortcuts.some((s) =>\n                          // Compare all properties\n                          Object.keys(s).every(\n                            (key) => s[key] === shortcut[key],\n                          ),\n                        ),\n                    );\n                    if (!nonUniqueShortcuts.length) {\n                      showToast('No new shortcuts to import');\n                      return;\n                    }\n                    let newShortcuts = [\n                      ...states.shortcuts,\n                      ...nonUniqueShortcuts,\n                    ];\n                    const exceededLimit = newShortcuts.length > SHORTCUTS_LIMIT;\n                    if (exceededLimit) {\n                      // If exceeded, trim it\n                      newShortcuts = newShortcuts.slice(0, SHORTCUTS_LIMIT);\n                    }\n                    states.shortcuts = newShortcuts;\n                    showToast(\n                      exceededLimit\n                        ? `Shortcuts imported. Exceeded max ${SHORTCUTS_LIMIT}, so the rest are not imported.`\n                        : 'Shortcuts imported',\n                    );\n                    onClose?.();\n                  }}\n                >\n                  <button\n                    type=\"button\"\n                    class=\"plain2\"\n                    disabled={!parsedImportShortcutStr}\n                  >\n                    Import & append…\n                  </button>\n                </MenuConfirm>{' '}\n              </>\n            )}\n            <MenuConfirm\n              confirmLabel={\n                hasCurrentSettings\n                  ? 'Override current shortcuts?'\n                  : 'Import shortcuts?'\n              }\n              menuItemClassName={hasCurrentSettings ? 'danger' : undefined}\n              onClick={() => {\n                states.shortcuts = parsedImportShortcutStr;\n                showToast('Shortcuts imported');\n                onClose?.();\n              }}\n            >\n              <button\n                type=\"button\"\n                class=\"plain2\"\n                disabled={!parsedImportShortcutStr}\n              >\n                {hasCurrentSettings ? 'or override…' : 'Import…'}\n              </button>\n            </MenuConfirm>\n          </p>\n        </section>\n        <section>\n          <h3>\n            <Icon icon=\"arrow-up-circle\" size=\"l\" class=\"insignificant\" />{' '}\n            <span>Export</span>\n          </h3>\n          <p>\n            <input\n              style={{ width: '100%' }}\n              type=\"text\"\n              value={shortcutsStr}\n              readOnly\n              onClick={(e) => {\n                if (!e.target.value) return;\n                e.target.select();\n                // Copy url to clipboard\n                try {\n                  navigator.clipboard.writeText(e.target.value);\n                  showToast('Shortcuts copied');\n                } catch (e) {\n                  console.error(e);\n                  showToast('Unable to copy shortcuts');\n                }\n              }}\n            />\n          </p>\n          <p>\n            <button\n              type=\"button\"\n              class=\"plain2\"\n              disabled={!shortcutsStr}\n              onClick={() => {\n                try {\n                  navigator.clipboard.writeText(shortcutsStr);\n                  showToast('Shortcut settings copied');\n                } catch (e) {\n                  console.error(e);\n                  showToast('Unable to copy shortcut settings');\n                }\n              }}\n            >\n              <Icon icon=\"clipboard\" /> <span>Copy</span>\n            </button>{' '}\n            {navigator?.share &&\n              navigator?.canShare?.({\n                text: shortcutsStr,\n              }) && (\n                <button\n                  type=\"button\"\n                  class=\"plain2\"\n                  disabled={!shortcutsStr}\n                  onClick={() => {\n                    try {\n                      navigator.share({\n                        text: shortcutsStr,\n                      });\n                    } catch (e) {\n                      console.error(e);\n                      alert(\"Sharing doesn't seem to work.\");\n                    }\n                  }}\n                >\n                  <Icon icon=\"share\" /> <span>Share</span>\n                </button>\n              )}{' '}\n            {shortcutsStr.length > 0 && (\n              <small class=\"insignificant\">\n                {shortcutsStr.length} characters\n              </small>\n            )}\n          </p>\n          {!!shortcutsStr && (\n            <details>\n              <summary class=\"insignificant\">\n                <small>Raw Shortcuts JSON</small>\n              </summary>\n              <textarea style={{ width: '100%' }} rows={10} readOnly>\n                {JSON.stringify(shortcuts.filter(Boolean), null, 2)}\n              </textarea>\n            </details>\n          )}\n        </section>\n      </main>\n    </div>\n  );\n}\n\nexport default ShortcutsSettings;\n","import { useLocation, useNavigate } from 'react-router-dom';\nimport { subscribe, useSnapshot } from 'valtio';\n\nimport Accounts from '../pages/accounts';\nimport Settings from '../pages/settings';\nimport focusDeck from '../utils/focus-deck';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\n\nimport AccountSheet from './account-sheet';\nimport Compose from './compose';\nimport Drafts from './drafts';\nimport GenericAccounts from './generic-accounts';\nimport MediaAltModal from './media-alt-modal';\nimport MediaModal from './media-modal';\nimport Modal from './modal';\nimport ShortcutsSettings from './shortcuts-settings';\n\nsubscribe(states, (changes) => {\n  for (const [action, path, value, prevValue] of changes) {\n    // When closing modal, focus on deck\n    if (/^show/i.test(path) && !value) {\n      focusDeck();\n    }\n  }\n});\n\nexport default function Modals() {\n  const snapStates = useSnapshot(states);\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  return (\n    <>\n      {!!snapStates.showCompose && (\n        <Modal>\n          <Compose\n            replyToStatus={\n              typeof snapStates.showCompose !== 'boolean'\n                ? snapStates.showCompose.replyToStatus\n                : window.__COMPOSE__?.replyToStatus || null\n            }\n            editStatus={\n              states.showCompose?.editStatus ||\n              window.__COMPOSE__?.editStatus ||\n              null\n            }\n            draftStatus={\n              states.showCompose?.draftStatus ||\n              window.__COMPOSE__?.draftStatus ||\n              null\n            }\n            onClose={(results) => {\n              const { newStatus, instance, type } = results || {};\n              states.showCompose = false;\n              window.__COMPOSE__ = null;\n              if (newStatus) {\n                states.reloadStatusPage++;\n                showToast({\n                  text: {\n                    post: 'Post published. Check it out.',\n                    reply: 'Reply posted. Check it out.',\n                    edit: 'Post updated. Check it out.',\n                  }[type || 'post'],\n                  delay: 1000,\n                  duration: 10_000, // 10 seconds\n                  onClick: (toast) => {\n                    toast.hideToast();\n                    states.prevLocation = location;\n                    navigate(\n                      instance\n                        ? `/${instance}/s/${newStatus.id}`\n                        : `/s/${newStatus.id}`,\n                    );\n                  },\n                });\n              }\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showSettings && (\n        <Modal\n          onClose={() => {\n            states.showSettings = false;\n          }}\n        >\n          <Settings\n            onClose={() => {\n              states.showSettings = false;\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showAccounts && (\n        <Modal\n          onClose={() => {\n            states.showAccounts = false;\n          }}\n        >\n          <Accounts\n            onClose={() => {\n              states.showAccounts = false;\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showAccount && (\n        <Modal\n          class=\"light\"\n          onClose={() => {\n            states.showAccount = false;\n          }}\n        >\n          <AccountSheet\n            account={snapStates.showAccount?.account || snapStates.showAccount}\n            instance={snapStates.showAccount?.instance}\n            onClose={({ destination } = {}) => {\n              states.showAccount = false;\n              // states.showGenericAccounts = false;\n              // if (destination) {\n              //   states.showAccounts = false;\n              // }\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showDrafts && (\n        <Modal\n          onClose={() => {\n            states.showDrafts = false;\n          }}\n        >\n          <Drafts onClose={() => (states.showDrafts = false)} />\n        </Modal>\n      )}\n      {!!snapStates.showMediaModal && (\n        <Modal\n          onClick={(e) => {\n            if (\n              e.target === e.currentTarget ||\n              e.target.classList.contains('media')\n            ) {\n              states.showMediaModal = false;\n            }\n          }}\n        >\n          <MediaModal\n            mediaAttachments={snapStates.showMediaModal.mediaAttachments}\n            instance={snapStates.showMediaModal.instance}\n            index={snapStates.showMediaModal.index}\n            statusID={snapStates.showMediaModal.statusID}\n            onClose={() => {\n              states.showMediaModal = false;\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showShortcutsSettings && (\n        <Modal\n          class=\"light\"\n          onClose={() => {\n            states.showShortcutsSettings = false;\n          }}\n        >\n          <ShortcutsSettings\n            onClose={() => (states.showShortcutsSettings = false)}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showGenericAccounts && (\n        <Modal\n          class=\"light\"\n          onClose={() => {\n            states.showGenericAccounts = false;\n          }}\n        >\n          <GenericAccounts\n            onClose={() => (states.showGenericAccounts = false)}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showMediaAlt && (\n        <Modal\n          class=\"light\"\n          onClose={(e) => {\n            states.showMediaAlt = false;\n          }}\n        >\n          <MediaAltModal\n            alt={snapStates.showMediaAlt.alt || snapStates.showMediaAlt}\n            lang={snapStates.showMediaAlt?.lang}\n            onClose={() => {\n              states.showMediaAlt = false;\n            }}\n          />\n        </Modal>\n      )}\n    </>\n  );\n}\n","import { useState } from 'preact/hooks';\n\nimport { api } from '../utils/api';\n\nimport Icon from './icon';\nimport Loader from './loader';\n\nfunction FollowRequestButtons({ accountID, onChange }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [requestState, setRequestState] = useState(null); // accept, reject\n  const [relationship, setRelationship] = useState(null);\n\n  const hasRelationship = relationship !== null;\n\n  return (\n    <p class=\"follow-request-buttons\">\n      <button\n        type=\"button\"\n        disabled={uiState === 'loading' || hasRelationship}\n        onClick={() => {\n          setUIState('loading');\n          setRequestState('accept');\n          (async () => {\n            try {\n              const rel = await masto.v1.followRequests\n                .$select(accountID)\n                .authorize();\n              if (!rel?.followedBy) {\n                throw new Error('Follow request not accepted');\n              }\n              setRelationship(rel);\n              onChange();\n            } catch (e) {\n              console.error(e);\n            }\n            setUIState('default');\n          })();\n        }}\n      >\n        Accept\n      </button>{' '}\n      <button\n        type=\"button\"\n        disabled={uiState === 'loading' || hasRelationship}\n        class=\"light danger\"\n        onClick={() => {\n          setUIState('loading');\n          setRequestState('reject');\n          (async () => {\n            try {\n              const rel = await masto.v1.followRequests\n                .$select(accountID)\n                .reject();\n              if (rel?.followedBy) {\n                throw new Error('Follow request not rejected');\n              }\n              setRelationship(rel);\n              onChange();\n            } catch (e) {\n              console.error(e);\n              setUIState('default');\n            }\n          })();\n        }}\n      >\n        Reject\n      </button>\n      <span class=\"follow-request-states\">\n        {hasRelationship && requestState ? (\n          requestState === 'accept' ? (\n            <Icon icon=\"check-circle\" alt=\"Accepted\" class=\"follow-accepted\" />\n          ) : (\n            <Icon icon=\"x-circle\" alt=\"Rejected\" class=\"follow-rejected\" />\n          )\n        ) : (\n          <Loader hidden={uiState !== 'loading'} />\n        )}\n      </span>\n    </p>\n  );\n}\n\nexport default FollowRequestButtons;\n","import { Fragment } from 'preact';\nimport { memo } from 'preact/compat';\n\nimport shortenNumber from '../utils/shorten-number';\nimport states from '../utils/states';\nimport store from '../utils/store';\nimport useTruncated from '../utils/useTruncated';\n\nimport Avatar from './avatar';\nimport FollowRequestButtons from './follow-request-buttons';\nimport Icon from './icon';\nimport Link from './link';\nimport NameText from './name-text';\nimport RelativeTime from './relative-time';\nimport Status from './status';\n\nconst NOTIFICATION_ICONS = {\n  mention: 'comment',\n  status: 'notification',\n  reblog: 'rocket',\n  follow: 'follow',\n  follow_request: 'follow-add',\n  favourite: 'heart',\n  poll: 'poll',\n  update: 'pencil',\n  'admin.signup': 'account-edit',\n  'admin.report': 'account-warning',\n};\n\n/*\nNotification types\n==================\nmention = Someone mentioned you in their status\nstatus = Someone you enabled notifications for has posted a status\nreblog = Someone boosted one of your statuses\nfollow = Someone followed you\nfollow_request = Someone requested to follow you\nfavourite = Someone favourited one of your statuses\npoll = A poll you have voted in or created has ended\nupdate = A status you interacted with has been edited\nadmin.sign_up = Someone signed up (optionally sent to admins)\nadmin.report = A new report has been filed\n*/\n\nconst contentText = {\n  mention: 'mentioned you in their post.',\n  status: 'published a post.',\n  reblog: 'boosted your post.',\n  'reblog+account': (count) => `boosted ${count} of your posts.`,\n  reblog_reply: 'boosted your reply.',\n  follow: 'followed you.',\n  follow_request: 'requested to follow you.',\n  favourite: 'liked your post.',\n  'favourite+account': (count) => `liked ${count} of your posts.`,\n  favourite_reply: 'liked your reply.',\n  poll: 'A poll you have voted in or created has ended.',\n  'poll-self': 'A poll you have created has ended.',\n  'poll-voted': 'A poll you have voted in has ended.',\n  update: 'A post you interacted with has been edited.',\n  'favourite+reblog': 'boosted & liked your post.',\n  'favourite+reblog+account': (count) =>\n    `boosted & liked ${count} of your posts.`,\n  'favourite+reblog_reply': 'boosted & liked your reply.',\n  'admin.sign_up': 'signed up.',\n  'admin.report': (targetAccount) => <>reported {targetAccount}</>,\n};\n\nconst AVATARS_LIMIT = 50;\n\nfunction Notification({ notification, instance, isStatic }) {\n  const { id, status, account, report, _accounts, _statuses } = notification;\n  let { type } = notification;\n\n  // status = Attached when type of the notification is favourite, reblog, status, mention, poll, or update\n  const actualStatus = status?.reblog || status;\n  const actualStatusID = actualStatus?.id;\n\n  const currentAccount = store.session.get('currentAccount');\n  const isSelf = currentAccount === account?.id;\n  const isVoted = status?.poll?.voted;\n  const isReplyToOthers =\n    !!status?.inReplyToAccountId &&\n    status?.inReplyToAccountId !== currentAccount &&\n    status?.account?.id === currentAccount;\n\n  let favsCount = 0;\n  let reblogsCount = 0;\n  if (type === 'favourite+reblog') {\n    for (const account of _accounts) {\n      if (account._types?.includes('favourite')) {\n        favsCount++;\n      }\n      if (account._types?.includes('reblog')) {\n        reblogsCount++;\n      }\n    }\n    if (!reblogsCount && favsCount) type = 'favourite';\n    if (!favsCount && reblogsCount) type = 'reblog';\n  }\n\n  let text;\n  if (type === 'poll') {\n    text = contentText[isSelf ? 'poll-self' : isVoted ? 'poll-voted' : 'poll'];\n  } else if (\n    type === 'reblog' ||\n    type === 'favourite' ||\n    type === 'favourite+reblog'\n  ) {\n    if (_statuses?.length > 1) {\n      text = contentText[`${type}+account`];\n    } else if (isReplyToOthers) {\n      text = contentText[`${type}_reply`];\n    } else {\n      text = contentText[type];\n    }\n  } else if (contentText[type]) {\n    text = contentText[type];\n  } else {\n    // Anticipate unhandled notification types, possibly from Mastodon forks or non-Mastodon instances\n    // This surfaces the error to the user, hoping that users will report it\n    text = `[Unknown notification type: ${type}]`;\n  }\n\n  if (typeof text === 'function') {\n    const count = _statuses?.length || _accounts?.length;\n    if (count) {\n      text = text(count);\n    } else if (type === 'admin.report') {\n      const targetAccount = report?.targetAccount;\n      if (targetAccount) {\n        text = text(<NameText account={targetAccount} showAvatar />);\n      }\n    }\n  }\n\n  if (type === 'mention' && !status) {\n    // Could be deleted\n    return null;\n  }\n\n  const formattedCreatedAt =\n    notification.createdAt && new Date(notification.createdAt).toLocaleString();\n\n  const genericAccountsHeading =\n    {\n      'favourite+reblog': 'Boosted/Liked by…',\n      favourite: 'Liked by…',\n      reblog: 'Boosted by…',\n      follow: 'Followed by…',\n    }[type] || 'Accounts';\n  const handleOpenGenericAccounts = () => {\n    states.showGenericAccounts = {\n      heading: genericAccountsHeading,\n      accounts: _accounts,\n      showReactions: type === 'favourite+reblog',\n    };\n  };\n\n  console.debug('RENDER Notification', notification.id);\n\n  return (\n    <div\n      class={`notification notification-${type}`}\n      data-notification-id={id}\n      tabIndex=\"0\"\n    >\n      <div\n        class={`notification-type notification-${type}`}\n        title={formattedCreatedAt}\n      >\n        {type === 'favourite+reblog' ? (\n          <>\n            <Icon icon=\"rocket\" size=\"xl\" alt={type} class=\"reblog-icon\" />\n            <Icon icon=\"heart\" size=\"xl\" alt={type} class=\"favourite-icon\" />\n          </>\n        ) : (\n          <Icon\n            icon={NOTIFICATION_ICONS[type] || 'notification'}\n            size=\"xl\"\n            alt={type}\n          />\n        )}\n      </div>\n      <div class=\"notification-content\">\n        {type !== 'mention' && (\n          <>\n            <p>\n              {!/poll|update/i.test(type) && (\n                <>\n                  {_accounts?.length > 1 ? (\n                    <>\n                      <b tabIndex=\"0\" onClick={handleOpenGenericAccounts}>\n                        <span title={_accounts.length}>\n                          {shortenNumber(_accounts.length)}\n                        </span>{' '}\n                        people\n                      </b>{' '}\n                    </>\n                  ) : (\n                    <>\n                      <NameText account={account} showAvatar />{' '}\n                    </>\n                  )}\n                </>\n              )}\n              {text}\n              {type === 'mention' && (\n                <span class=\"insignificant\">\n                  {' '}\n                  •{' '}\n                  <RelativeTime\n                    datetime={notification.createdAt}\n                    format=\"micro\"\n                  />\n                </span>\n              )}\n            </p>\n            {type === 'follow_request' && (\n              <FollowRequestButtons accountID={account.id} />\n            )}\n          </>\n        )}\n        {_accounts?.length > 1 && (\n          <p class=\"avatars-stack\">\n            {_accounts.slice(0, AVATARS_LIMIT).map((account) => (\n              <Fragment key={account.id}>\n                <a\n                  key={account.id}\n                  href={account.url}\n                  rel=\"noopener noreferrer\"\n                  class=\"account-avatar-stack\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    states.showAccount = account;\n                  }}\n                >\n                  <Avatar\n                    url={account.avatarStatic}\n                    size={\n                      _accounts.length <= 10\n                        ? 'xxl'\n                        : _accounts.length < 20\n                        ? 'xl'\n                        : _accounts.length < 30\n                        ? 'l'\n                        : _accounts.length < 40\n                        ? 'm'\n                        : 's' // My god, this person is popular!\n                    }\n                    key={account.id}\n                    alt={`${account.displayName} @${account.acct}`}\n                    squircle={account?.bot}\n                  />\n                  {type === 'favourite+reblog' && (\n                    <div class=\"account-sub-icons\">\n                      {account._types.map((type) => (\n                        <Icon\n                          icon={NOTIFICATION_ICONS[type]}\n                          size=\"s\"\n                          class={`${type}-icon`}\n                        />\n                      ))}\n                    </div>\n                  )}\n                </a>{' '}\n              </Fragment>\n            ))}\n            <button\n              type=\"button\"\n              class=\"small plain\"\n              onClick={handleOpenGenericAccounts}\n            >\n              {_accounts.length > AVATARS_LIMIT &&\n                `+${_accounts.length - AVATARS_LIMIT}`}\n              <Icon icon=\"chevron-down\" />\n            </button>\n          </p>\n        )}\n        {_statuses?.length > 1 && (\n          <ul class=\"notification-group-statuses\">\n            {_statuses.map((status) => (\n              <li key={status.id}>\n                <TruncatedLink\n                  class={`status-link status-type-${type}`}\n                  to={\n                    instance ? `/${instance}/s/${status.id}` : `/s/${status.id}`\n                  }\n                >\n                  <Status status={status} size=\"s\" />\n                </TruncatedLink>\n              </li>\n            ))}\n          </ul>\n        )}\n        {status && (!_statuses?.length || _statuses?.length <= 1) && (\n          <TruncatedLink\n            class={`status-link status-type-${type}`}\n            to={\n              instance\n                ? `/${instance}/s/${actualStatusID}`\n                : `/s/${actualStatusID}`\n            }\n            onContextMenu={(e) => {\n              const post = e.target.querySelector('.status');\n              if (post) {\n                // Fire a custom event to open the context menu\n                if (e.metaKey) return;\n                e.preventDefault();\n                post.dispatchEvent(\n                  new MouseEvent('contextmenu', {\n                    clientX: e.clientX,\n                    clientY: e.clientY,\n                  }),\n                );\n              }\n            }}\n          >\n            {isStatic ? (\n              <Status status={actualStatus} size=\"s\" />\n            ) : (\n              <Status statusID={actualStatusID} size=\"s\" />\n            )}\n          </TruncatedLink>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction TruncatedLink(props) {\n  const ref = useTruncated();\n  return <Link {...props} data-read-more=\"Read more →\" ref={ref} />;\n}\n\nexport default memo(Notification);\n","import { memo } from 'preact/compat';\nimport { useLayoutEffect, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport { api } from '../utils/api';\nimport states from '../utils/states';\nimport {\n  getAccountByAccessToken,\n  getCurrentAccount,\n} from '../utils/store-utils';\nimport usePageVisibility from '../utils/usePageVisibility';\n\nimport Icon from './icon';\nimport Link from './link';\nimport Modal from './modal';\nimport Notification from './notification';\n\nexport default memo(function NotificationService() {\n  if (!('serviceWorker' in navigator)) return null;\n\n  const snapStates = useSnapshot(states);\n  const { routeNotification } = snapStates;\n\n  console.log('🛎️ Notification service', routeNotification);\n\n  const { id, accessToken } = routeNotification || {};\n  const [showNotificationSheet, setShowNotificationSheet] = useState(false);\n\n  useLayoutEffect(() => {\n    if (!id || !accessToken) return;\n    const { instance: currentInstance } = api();\n    const { masto, instance } = api({\n      accessToken,\n    });\n    console.log('API', { accessToken, currentInstance, instance });\n    const sameInstance = currentInstance === instance;\n    const account = accessToken\n      ? getAccountByAccessToken(accessToken)\n      : getCurrentAccount();\n    (async () => {\n      const notification = await masto.v1.notifications.$select(id).fetch();\n      if (notification && account) {\n        console.log('🛎️ Notification', { id, notification, account });\n        const accountInstance = account.instanceURL;\n        const { type, status, account: notificationAccount } = notification;\n        const hasModal = !!document.querySelector('#modal-container > *');\n        const isFollow = type === 'follow' && !!notificationAccount?.id;\n        const hasAccount = !!notificationAccount?.id;\n        const hasStatus = !!status?.id;\n        if (isFollow && sameInstance) {\n          // Show account sheet, can handle different instances\n          states.showAccount = {\n            account: notificationAccount,\n            instance: accountInstance,\n          };\n        } else if (hasModal || !sameInstance || (hasAccount && hasStatus)) {\n          // Show sheet of notification, if\n          // - there is a modal open\n          // - the notification is from another instance\n          // - the notification has both account and status, gives choice for users to go to account or status\n          setShowNotificationSheet({\n            id,\n            account,\n            notification,\n            sameInstance,\n          });\n        } else {\n          if (hasStatus) {\n            // Go to status page\n            location.hash = `/${currentInstance}/s/${status.id}`;\n          } else if (isFollow) {\n            // Go to profile page\n            location.hash = `/${currentInstance}/a/${notificationAccount.id}`;\n          } else {\n            // Go to notifications page\n            location.hash = '/notifications';\n          }\n        }\n      } else {\n        console.warn('🛎️ Notification not found', id);\n      }\n    })();\n  }, [id, accessToken]);\n\n  useLayoutEffect(() => {\n    // Listen to message from service worker\n    const handleMessage = (event) => {\n      console.log('💥💥💥 Message event', event);\n      const { type, id, accessToken } = event?.data || {};\n      if (type === 'notification') {\n        states.routeNotification = {\n          id,\n          accessToken,\n        };\n      }\n    };\n    console.log('👂👂👂 Listen to message');\n    navigator.serviceWorker.addEventListener('message', handleMessage);\n    return () => {\n      console.log('👂👂👂 Remove listen to message');\n      navigator.serviceWorker.removeEventListener('message', handleMessage);\n    };\n  }, []);\n\n  useLayoutEffect(() => {\n    if (navigator?.clearAppBadge) {\n      navigator.clearAppBadge();\n    }\n  }, []);\n  usePageVisibility((visible) => {\n    if (visible && navigator?.clearAppBadge) {\n      console.log('🔰 Clear app badge');\n      navigator.clearAppBadge();\n    }\n  });\n\n  const onClose = () => {\n    setShowNotificationSheet(false);\n    states.routeNotification = null;\n\n    // If url is #/notifications?id=123, go to #/notifications\n    if (/\\/notifications\\?id=/i.test(location.hash)) {\n      location.hash = '/notifications';\n    }\n  };\n\n  if (showNotificationSheet) {\n    const { id, account, notification, sameInstance } = showNotificationSheet;\n    return (\n      <Modal\n        class=\"light\"\n        onClick={(e) => {\n          if (e.target === e.currentTarget) {\n            onClose();\n          }\n        }}\n      >\n        <div class=\"sheet\" tabIndex=\"-1\">\n          <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n            <Icon icon=\"x\" />\n          </button>\n          <header>\n            <b>Notification</b>\n          </header>\n          <main>\n            {!sameInstance && (\n              <p>This notification is from your other account.</p>\n            )}\n            <div\n              class=\"notification-peek\"\n              // style={{\n              //   pointerEvents: sameInstance ? '' : 'none',\n              // }}\n              onClick={(e) => {\n                const { target } = e;\n                // If button or links\n                if (e.target.tagName === 'BUTTON' || e.target.tagName === 'A') {\n                  onClose();\n                }\n              }}\n            >\n              <Notification\n                instance={account.instanceURL}\n                notification={notification}\n                isStatic\n              />\n            </div>\n            <div\n              style={{\n                textAlign: 'end',\n              }}\n            >\n              <Link to=\"/notifications\" class=\"button light\" onClick={onClose}>\n                <span>View all notifications</span> <Icon icon=\"arrow-right\" />\n              </Link>\n            </div>\n          </main>\n        </div>\n      </Modal>\n    );\n  }\n\n  return null;\n});\n","import { forwardRef } from 'preact/compat';\nimport { useImperativeHandle, useRef, useState } from 'preact/hooks';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { api } from '../utils/api';\n\nimport Icon from './icon';\nimport Link from './link';\n\nconst SearchForm = forwardRef((props, ref) => {\n  const { instance } = api();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [searchMenuOpen, setSearchMenuOpen] = useState(false);\n  const [query, setQuery] = useState(searchParams.get('q') || '');\n  const type = searchParams.get('type');\n  const formRef = useRef(null);\n\n  const searchFieldRef = useRef(null);\n  useImperativeHandle(ref, () => ({\n    setValue: (value) => {\n      setQuery(value);\n    },\n    focus: () => {\n      searchFieldRef.current.focus();\n    },\n    select: () => {\n      searchFieldRef.current.select();\n    },\n    blur: () => {\n      searchFieldRef.current.blur();\n    },\n  }));\n\n  return (\n    <form\n      ref={formRef}\n      class=\"search-popover-container\"\n      onSubmit={(e) => {\n        e.preventDefault();\n\n        const isSearchPage = /\\/search/.test(location.hash);\n        if (isSearchPage) {\n          if (query) {\n            const params = {\n              q: query,\n            };\n            if (type) params.type = type; // Preserve type\n            setSearchParams(params);\n          } else {\n            setSearchParams({});\n          }\n        } else {\n          if (query) {\n            location.hash = `/search?q=${encodeURIComponent(query)}${\n              type ? `&type=${type}` : ''\n            }`;\n          } else {\n            location.hash = `/search`;\n          }\n        }\n\n        props?.onSubmit?.(e);\n      }}\n    >\n      <input\n        ref={searchFieldRef}\n        value={query}\n        name=\"q\"\n        type=\"search\"\n        // autofocus\n        placeholder=\"Search\"\n        dir=\"auto\"\n        autocomplete=\"off\"\n        autocorrect=\"off\"\n        autocapitalize=\"off\"\n        onSearch={(e) => {\n          if (!e.target.value) {\n            setSearchParams({});\n          }\n        }}\n        onInput={(e) => {\n          setQuery(e.target.value);\n          setSearchMenuOpen(true);\n        }}\n        onFocus={() => {\n          setSearchMenuOpen(true);\n        }}\n        onBlur={() => {\n          setTimeout(() => {\n            setSearchMenuOpen(false);\n          }, 100);\n          formRef.current\n            ?.querySelector('.search-popover-item.focus')\n            ?.classList.remove('focus');\n        }}\n        onKeyDown={(e) => {\n          const { key } = e;\n          switch (key) {\n            case 'Escape':\n              setSearchMenuOpen(false);\n              break;\n            case 'Down':\n            case 'ArrowDown':\n              e.preventDefault();\n              if (searchMenuOpen) {\n                const focusItem = formRef.current.querySelector(\n                  '.search-popover-item.focus',\n                );\n                if (focusItem) {\n                  let nextItem = focusItem.nextElementSibling;\n                  while (nextItem && nextItem.hidden) {\n                    nextItem = nextItem.nextElementSibling;\n                  }\n                  if (nextItem) {\n                    nextItem.classList.add('focus');\n                    const siblings = Array.from(\n                      nextItem.parentElement.children,\n                    ).filter((el) => el !== nextItem);\n                    siblings.forEach((el) => {\n                      el.classList.remove('focus');\n                    });\n                  }\n                } else {\n                  const firstItem = formRef.current.querySelector(\n                    '.search-popover-item',\n                  );\n                  if (firstItem) {\n                    firstItem.classList.add('focus');\n                  }\n                }\n              }\n              break;\n            case 'Up':\n            case 'ArrowUp':\n              e.preventDefault();\n              if (searchMenuOpen) {\n                const focusItem = document.querySelector(\n                  '.search-popover-item.focus',\n                );\n                if (focusItem) {\n                  let prevItem = focusItem.previousElementSibling;\n                  while (prevItem && prevItem.hidden) {\n                    prevItem = prevItem.previousElementSibling;\n                  }\n                  if (prevItem) {\n                    prevItem.classList.add('focus');\n                    const siblings = Array.from(\n                      prevItem.parentElement.children,\n                    ).filter((el) => el !== prevItem);\n                    siblings.forEach((el) => {\n                      el.classList.remove('focus');\n                    });\n                  }\n                } else {\n                  const lastItem = document.querySelector(\n                    '.search-popover-item:last-child',\n                  );\n                  if (lastItem) {\n                    lastItem.classList.add('focus');\n                  }\n                }\n              }\n              break;\n            case 'Enter':\n              if (searchMenuOpen) {\n                const focusItem = document.querySelector(\n                  '.search-popover-item.focus',\n                );\n                if (focusItem) {\n                  e.preventDefault();\n                  focusItem.click();\n                }\n                setSearchMenuOpen(false);\n                props?.onSubmit?.(e);\n              }\n              break;\n          }\n        }}\n      />\n      <div class=\"search-popover\" hidden={!searchMenuOpen || !query}>\n        {!!query &&\n          [\n            {\n              label: (\n                <>\n                  Posts with <q>{query}</q>\n                </>\n              ),\n              to: `/search?q=${encodeURIComponent(query)}&type=statuses`,\n              hidden: /^https?:/.test(query),\n            },\n            {\n              label: (\n                <>\n                  Posts tagged with <mark>#{query.replace(/^#/, '')}</mark>\n                </>\n              ),\n              to: `/${instance}/t/${query.replace(/^#/, '')}`,\n              hidden:\n                /^@/.test(query) || /^https?:/.test(query) || /\\s/.test(query),\n              top: /^#/.test(query),\n              type: 'link',\n            },\n            {\n              label: (\n                <>\n                  Look up <mark>{query}</mark>\n                </>\n              ),\n              to: `/${query}`,\n              hidden: !/^https?:/.test(query),\n              top: /^https?:/.test(query),\n              type: 'link',\n            },\n            {\n              label: (\n                <>\n                  Accounts with <q>{query}</q>\n                </>\n              ),\n              to: `/search?q=${encodeURIComponent(query)}&type=accounts`,\n            },\n          ]\n            .sort((a, b) => {\n              if (a.top && !b.top) return -1;\n              if (!a.top && b.top) return 1;\n              return 0;\n            })\n            .map(({ label, to, hidden, type }) => (\n              <Link\n                to={to}\n                class=\"search-popover-item\"\n                hidden={hidden}\n                onClick={(e) => {\n                  props?.onSubmit?.(e);\n                }}\n              >\n                <Icon\n                  icon={type === 'link' ? 'arrow-right' : 'search'}\n                  class=\"more-insignificant\"\n                />\n                <span>{label}</span>{' '}\n              </Link>\n            ))}\n      </div>\n    </form>\n  );\n});\n\nexport default SearchForm;\n","import './search-command.css';\n\nimport { memo } from 'preact/compat';\nimport { useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\n\nimport SearchForm from './search-form';\n\nexport default memo(function SearchCommand({ onClose = () => {} }) {\n  const [showSearch, setShowSearch] = useState(false);\n  const searchFormRef = useRef(null);\n\n  useHotkeys(\n    '/',\n    (e) => {\n      setShowSearch(true);\n      setTimeout(() => {\n        searchFormRef.current?.focus?.();\n        searchFormRef.current?.select?.();\n      }, 0);\n    },\n    {\n      preventDefault: true,\n      ignoreEventWhen: (e) => {\n        const isSearchPage = /\\/search/.test(location.hash);\n        const hasModal = !!document.querySelector('#modal-container > *');\n        return isSearchPage || hasModal;\n      },\n    },\n  );\n\n  const closeSearch = () => {\n    setShowSearch(false);\n    onClose();\n  };\n\n  useHotkeys(\n    'esc',\n    (e) => {\n      searchFormRef.current?.blur?.();\n      closeSearch();\n    },\n    {\n      enabled: showSearch,\n      enableOnFormTags: true,\n      preventDefault: true,\n    },\n  );\n\n  return (\n    <div\n      id=\"search-command-container\"\n      hidden={!showSearch}\n      onClick={(e) => {\n        console.log(e);\n        if (e.target === e.currentTarget) {\n          closeSearch();\n        }\n      }}\n    >\n      <SearchForm\n        ref={searchFormRef}\n        onSubmit={() => {\n          closeSearch();\n        }}\n      />\n    </div>\n  );\n});\n","import './shortcuts.css';\n\nimport { Menu, MenuItem } from '@szhsin/react-menu';\nimport { memo } from 'preact/compat';\nimport { useMemo, useRef } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { useNavigate } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport { SHORTCUTS_META } from '../components/shortcuts-settings';\nimport { api } from '../utils/api';\nimport states from '../utils/states';\n\nimport AsyncText from './AsyncText';\nimport Icon from './icon';\nimport Link from './link';\nimport Menu2 from './menu2';\nimport MenuLink from './menu-link';\n\nfunction Shortcuts() {\n  const { instance } = api();\n  const snapStates = useSnapshot(states);\n  const { shortcuts, settings } = snapStates;\n\n  if (!shortcuts.length) {\n    return null;\n  }\n  if (\n    settings.shortcutsViewMode === 'multi-column' ||\n    (!settings.shortcutsViewMode && settings.shortcutsColumnsMode)\n  ) {\n    return null;\n  }\n\n  const menuRef = useRef();\n\n  const formattedShortcuts = useMemo(\n    () =>\n      shortcuts\n        .map((pin, i) => {\n          const { type, ...data } = pin;\n          if (!SHORTCUTS_META[type]) return null;\n          let { id, path, title, subtitle, icon } = SHORTCUTS_META[type];\n\n          if (typeof id === 'function') {\n            id = id(data, i);\n          }\n          if (typeof path === 'function') {\n            path = path(\n              {\n                ...data,\n                instance: data.instance || instance,\n              },\n              i,\n            );\n          }\n          if (typeof title === 'function') {\n            title = title(data, i);\n          }\n          if (typeof subtitle === 'function') {\n            subtitle = subtitle(data, i);\n          }\n          if (typeof icon === 'function') {\n            icon = icon(data, i);\n          }\n\n          return {\n            id,\n            path,\n            title,\n            subtitle,\n            icon,\n          };\n        })\n        .filter(Boolean),\n    [shortcuts],\n  );\n\n  const navigate = useNavigate();\n  useHotkeys(['1', '2', '3', '4', '5', '6', '7', '8', '9'], (e, handler) => {\n    const index = parseInt(handler.keys[0], 10) - 1;\n    if (index < formattedShortcuts.length) {\n      const { path } = formattedShortcuts[index];\n      if (path) {\n        navigate(path);\n        menuRef.current?.closeMenu?.();\n      }\n    }\n  });\n\n  return (\n    <div id=\"shortcuts\">\n      {snapStates.settings.shortcutsViewMode === 'tab-menu-bar' ? (\n        <nav\n          class=\"tab-bar\"\n          onContextMenu={(e) => {\n            e.preventDefault();\n            states.showShortcutsSettings = true;\n          }}\n        >\n          <ul>\n            {formattedShortcuts.map(\n              ({ id, path, title, subtitle, icon }, i) => {\n                return (\n                  <li key={`${i}-${id}-${title}-${subtitle}-${path}`}>\n                    <Link\n                      class={subtitle ? 'has-subtitle' : ''}\n                      to={path}\n                      onClick={(e) => {\n                        if (e.target.classList.contains('is-active')) {\n                          e.preventDefault();\n                          const page = document.getElementById(`${id}-page`);\n                          console.log(id, page);\n                          if (page) {\n                            page.scrollTop = 0;\n                            const updatesButton =\n                              page.querySelector('.updates-button');\n                            if (updatesButton) {\n                              updatesButton.click();\n                            }\n                          }\n                        }\n                      }}\n                    >\n                      <Icon icon={icon} size=\"xl\" alt={title} />\n                      <span>\n                        <AsyncText>{title}</AsyncText>\n                        {subtitle && (\n                          <>\n                            <br />\n                            <small>{subtitle}</small>\n                          </>\n                        )}\n                      </span>\n                    </Link>\n                  </li>\n                );\n              },\n            )}\n          </ul>\n        </nav>\n      ) : (\n        <Menu2\n          instanceRef={menuRef}\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          menuClassName=\"glass-menu shortcuts-menu\"\n          gap={8}\n          position=\"anchor\"\n          menuButton={\n            <button\n              type=\"button\"\n              id=\"shortcuts-button\"\n              class=\"plain\"\n              onContextMenu={(e) => {\n                e.preventDefault();\n                states.showShortcutsSettings = true;\n              }}\n              onTransitionStart={(e) => {\n                // Close menu if the button disappears\n                try {\n                  const { target } = e;\n                  if (getComputedStyle(target).pointerEvents === 'none') {\n                    menuRef.current?.closeMenu?.();\n                  }\n                } catch (e) {}\n              }}\n            >\n              <Icon icon=\"shortcut\" size=\"xl\" alt=\"Shortcuts\" />\n            </button>\n          }\n        >\n          {formattedShortcuts.map(({ id, path, title, subtitle, icon }, i) => {\n            return (\n              <MenuLink\n                to={path}\n                key={`${i}-${id}-${title}-${subtitle}-${path}`}\n                class=\"glass-menu-item\"\n              >\n                <Icon icon={icon} size=\"l\" />{' '}\n                <span class=\"menu-grow\">\n                  <span>\n                    <AsyncText>{title}</AsyncText>\n                  </span>\n                  {subtitle && (\n                    <>\n                      {' '}\n                      <small class=\"more-insignificant\">{subtitle}</small>\n                    </>\n                  )}\n                </span>\n                <span class=\"menu-shortcut hide-until-focus-visible\">\n                  {i + 1}\n                </span>\n              </MenuLink>\n            );\n          })}\n        </Menu2>\n      )}\n    </div>\n  );\n}\n\nexport default memo(Shortcuts);\n","import store from './store';\n\nexport function groupBoosts(values) {\n  let newValues = [];\n  let boostStash = [];\n  let serialBoosts = 0;\n  for (let i = 0; i < values.length; i++) {\n    const item = values[i];\n    if (item.reblog && !item.account?.group) {\n      boostStash.push(item);\n      serialBoosts++;\n    } else {\n      newValues.push(item);\n      if (serialBoosts < 3) {\n        serialBoosts = 0;\n      }\n    }\n  }\n  // if boostStash is more than quarter of values\n  // or if there are 3 or more boosts in a row\n  if (\n    values.length > 10 &&\n    (boostStash.length > values.length / 4 || serialBoosts >= 3)\n  ) {\n    // if boostStash is more than 3 quarter of values\n    const boostStashID = boostStash.map((status) => status.id);\n    if (boostStash.length > (values.length * 3) / 4) {\n      // insert boost array at the end of specialHome list\n      newValues = [\n        ...newValues,\n        { id: boostStashID, items: boostStash, type: 'boosts' },\n      ];\n    } else {\n      // insert boosts array in the middle of specialHome list\n      const half = Math.floor(newValues.length / 2);\n      newValues = [\n        ...newValues.slice(0, half),\n        {\n          id: boostStashID,\n          items: boostStash,\n          type: 'boosts',\n        },\n        ...newValues.slice(half),\n      ];\n    }\n    return newValues;\n  } else {\n    return values;\n  }\n}\n\nexport function dedupeBoosts(items, instance) {\n  const boostedStatusIDs = store.account.get('boostedStatusIDs') || {};\n  const filteredItems = items.filter((item) => {\n    if (!item.reblog) return true;\n    const statusKey = `${instance}-${item.reblog.id}`;\n    const boosterID = boostedStatusIDs[statusKey];\n    if (boosterID && boosterID !== item.id) {\n      console.warn(\n        `🚫 Duplicate boost by ${item.account.displayName}`,\n        item,\n        item.reblog,\n      );\n      return false;\n    } else {\n      boostedStatusIDs[statusKey] = item.id;\n    }\n    return true;\n  });\n  // Limit to 50\n  const keys = Object.keys(boostedStatusIDs);\n  if (keys.length > 50) {\n    keys.slice(0, keys.length - 50).forEach((key) => {\n      delete boostedStatusIDs[key];\n    });\n  }\n  store.account.set('boostedStatusIDs', boostedStatusIDs);\n  return filteredItems;\n}\n\nexport function groupContext(items) {\n  const contexts = [];\n  let contextIndex = 0;\n  items.forEach((item) => {\n    for (let i = 0; i < contexts.length; i++) {\n      if (contexts[i].find((t) => t.id === item.id)) return;\n      if (\n        contexts[i].find((t) => t.id === item.inReplyToId) ||\n        contexts[i].find((t) => t.inReplyToId === item.id)\n      ) {\n        contexts[i].push(item);\n        return;\n      }\n    }\n    const repliedItem = items.find((i) => i.id === item.inReplyToId);\n    if (repliedItem) {\n      contexts[contextIndex++] = [item, repliedItem];\n    }\n  });\n\n  // Check for cross-item contexts\n  // Merge contexts into one if they have a common item (same id)\n  for (let i = 0; i < contexts.length; i++) {\n    for (let j = i + 1; j < contexts.length; j++) {\n      const commonItem = contexts[i].find((t) => contexts[j].includes(t));\n      if (commonItem) {\n        contexts[i] = [...contexts[i], ...contexts[j]];\n        // Remove duplicate items\n        contexts[i] = contexts[i].filter(\n          (item, index, self) =>\n            self.findIndex((t) => t.id === item.id) === index,\n        );\n        contexts.splice(j, 1);\n        j--;\n      }\n    }\n  }\n\n  // Sort items by checking inReplyToId\n  contexts.forEach((context) => {\n    context.sort((a, b) => {\n      if (!a.inReplyToId && !b.inReplyToId) {\n        return new Date(a.createdAt) - new Date(b.createdAt);\n      }\n      if (a.inReplyToId === b.id) return 1;\n      if (b.inReplyToId === a.id) return -1;\n      if (!a.inReplyToId) return -1;\n      if (!b.inReplyToId) return 1;\n      return new Date(a.createdAt) - new Date(b.createdAt);\n    });\n  });\n\n  // Tag items that has different author than first post's author\n  contexts.forEach((context) => {\n    const firstItemAccountID = context[0].account.id;\n    context.forEach((item) => {\n      if (item.account.id !== firstItemAccountID) {\n        item._differentAuthor = true;\n      }\n    });\n  });\n\n  if (contexts.length) console.log('🧵 Contexts', contexts);\n\n  const newItems = [];\n  const appliedContextIndices = [];\n  items.forEach((item) => {\n    if (item.reblog) {\n      newItems.push(item);\n      return;\n    }\n    for (let i = 0; i < contexts.length; i++) {\n      if (contexts[i].find((t) => t.id === item.id)) {\n        if (appliedContextIndices.includes(i)) return;\n        const contextItems = contexts[i];\n        contextItems.sort((a, b) => {\n          const aDate = new Date(a.createdAt);\n          const bDate = new Date(b.createdAt);\n          return aDate - bDate;\n        });\n        const firstItemAccountID = contextItems[0].account.id;\n        newItems.push({\n          id: contextItems.map((i) => i.id),\n          items: contextItems,\n          type: contextItems.every((it) => it.account.id === firstItemAccountID)\n            ? 'thread'\n            : 'conversation',\n        });\n        appliedContextIndices.push(i);\n        return;\n      }\n    }\n    newItems.push(item);\n  });\n\n  return newItems;\n}\n","import { useLayoutEffect, useState } from 'preact/hooks';\n\nexport default function useScroll({\n  scrollableRef,\n  distanceFromStart = 1, // ratio of clientHeight/clientWidth\n  distanceFromEnd = 1, // ratio of clientHeight/clientWidth\n  scrollThresholdStart = 10,\n  scrollThresholdEnd = 10,\n  direction = 'vertical',\n  distanceFromStartPx: _distanceFromStartPx,\n  distanceFromEndPx: _distanceFromEndPx,\n} = {}) {\n  const [scrollDirection, setScrollDirection] = useState(null);\n  const [reachStart, setReachStart] = useState(false);\n  const [reachEnd, setReachEnd] = useState(false);\n  const [nearReachStart, setNearReachStart] = useState(false);\n  const [nearReachEnd, setNearReachEnd] = useState(false);\n  const isVertical = direction === 'vertical';\n\n  useLayoutEffect(() => {\n    const scrollableElement = scrollableRef.current;\n    if (!scrollableElement) return {};\n    let previousScrollStart = isVertical\n      ? scrollableElement.scrollTop\n      : scrollableElement.scrollLeft;\n\n    function onScroll() {\n      const {\n        scrollTop,\n        scrollLeft,\n        scrollHeight,\n        scrollWidth,\n        clientHeight,\n        clientWidth,\n      } = scrollableElement;\n      const scrollStart = isVertical ? scrollTop : scrollLeft;\n      const scrollDimension = isVertical ? scrollHeight : scrollWidth;\n      const clientDimension = isVertical ? clientHeight : clientWidth;\n      const scrollDistance = Math.abs(scrollStart - previousScrollStart);\n      const distanceFromStartPx =\n        _distanceFromStartPx ||\n        Math.min(\n          clientDimension * distanceFromStart,\n          scrollDimension,\n          scrollStart,\n        );\n      const distanceFromEndPx =\n        _distanceFromEndPx ||\n        Math.min(\n          clientDimension * distanceFromEnd,\n          scrollDimension,\n          scrollDimension - scrollStart - clientDimension,\n        );\n\n      if (\n        scrollDistance >=\n        (previousScrollStart < scrollStart\n          ? scrollThresholdEnd\n          : scrollThresholdStart)\n      ) {\n        setScrollDirection(previousScrollStart < scrollStart ? 'end' : 'start');\n        previousScrollStart = scrollStart;\n      }\n\n      setReachStart(scrollStart <= 0);\n      setReachEnd(scrollStart + clientDimension >= scrollDimension);\n      setNearReachStart(scrollStart <= distanceFromStartPx);\n      setNearReachEnd(\n        scrollStart + clientDimension >= scrollDimension - distanceFromEndPx,\n      );\n    }\n\n    scrollableElement.addEventListener('scroll', onScroll, { passive: true });\n\n    return () => scrollableElement.removeEventListener('scroll', onScroll);\n  }, [\n    distanceFromStart,\n    distanceFromEnd,\n    scrollThresholdStart,\n    scrollThresholdEnd,\n  ]);\n\n  return {\n    scrollDirection,\n    reachStart,\n    reachEnd,\n    nearReachStart,\n    nearReachEnd,\n    init: () => {\n      if (scrollableRef.current) {\n        scrollableRef.current.dispatchEvent(new Event('scroll'));\n      }\n    },\n  };\n}\n","import './media-post.css';\n\nimport { memo } from 'preact/compat';\nimport { useContext, useMemo } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport FilterContext from '../utils/filter-context';\nimport { isFiltered } from '../utils/filters';\nimport states, { statusKey } from '../utils/states';\nimport store from '../utils/store';\n\nimport Media from './media';\n\nfunction MediaPost({\n  class: className,\n  statusID,\n  status,\n  instance,\n  parent,\n  // allowFilters,\n  onMediaClick,\n}) {\n  let sKey = statusKey(statusID, instance);\n  const snapStates = useSnapshot(states);\n  if (!status) {\n    status = snapStates.statuses[sKey] || snapStates.statuses[statusID];\n    sKey = statusKey(status?.id, instance);\n  }\n  if (!status) {\n    return null;\n  }\n\n  const {\n    account: {\n      acct,\n      avatar,\n      avatarStatic,\n      id: accountId,\n      url: accountURL,\n      displayName,\n      username,\n      emojis: accountEmojis,\n      bot,\n      group,\n    },\n    id,\n    repliesCount,\n    reblogged,\n    reblogsCount,\n    favourited,\n    favouritesCount,\n    bookmarked,\n    poll,\n    muted,\n    sensitive,\n    spoilerText,\n    visibility, // public, unlisted, private, direct\n    language,\n    editedAt,\n    filtered,\n    card,\n    createdAt,\n    inReplyToId,\n    inReplyToAccountId,\n    content,\n    mentions,\n    mediaAttachments,\n    reblog,\n    uri,\n    url,\n    emojis,\n    // Non-API props\n    _deleted,\n    _pinned,\n    // _filtered,\n  } = status;\n\n  if (!mediaAttachments?.length) {\n    return null;\n  }\n\n  const debugHover = (e) => {\n    if (e.shiftKey) {\n      console.log({\n        ...status,\n      });\n    }\n  };\n\n  const currentAccount = useMemo(() => {\n    return store.session.get('currentAccount');\n  }, []);\n  const isSelf = useMemo(() => {\n    return currentAccount && currentAccount === accountId;\n  }, [accountId, currentAccount]);\n\n  const filterContext = useContext(FilterContext);\n  const filterInfo = !isSelf && isFiltered(filtered, filterContext);\n\n  if (filterInfo?.action === 'hide') {\n    return null;\n  }\n\n  console.debug('RENDER Media post', id, status?.account.displayName);\n\n  // const readingExpandSpoilers = useMemo(() => {\n  //   const prefs = store.account.get('preferences') || {};\n  //   return !!prefs['reading:expand:spoilers'];\n  // }, []);\n  const hasSpoiler = spoilerText || sensitive;\n\n  const Parent = parent || 'div';\n\n  return mediaAttachments.map((media, i) => {\n    const mediaKey = `${sKey}-${media.id}`;\n    const filterTitleStr = filterInfo?.titlesStr;\n    return (\n      <Parent\n        data-state-post-id={sKey}\n        onMouseEnter={debugHover}\n        key={mediaKey}\n        data-spoiler-text={\n          spoilerText || (sensitive ? 'Sensitive media' : undefined)\n        }\n        data-filtered-text={\n          filterInfo\n            ? `Filtered${filterTitleStr ? `: ${filterTitleStr}` : ''}`\n            : undefined\n        }\n        class={`\n          media-post\n          ${filterInfo ? 'filtered' : ''}\n          ${hasSpoiler ? 'has-spoiler' : ''}\n        `}\n      >\n        <Media\n          class={className}\n          media={media}\n          lang={language}\n          to={`/${instance}/s/${id}?media-only=${i + 1}`}\n          onClick={\n            onMediaClick ? (e) => onMediaClick(e, i, media, status) : undefined\n          }\n        />\n      </Parent>\n    );\n  });\n}\n\nexport default memo(MediaPost);\n","import './nav-menu.css';\n\nimport { ControlledMenu, MenuDivider, MenuItem } from '@szhsin/react-menu';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useLongPress } from 'use-long-press';\nimport { useSnapshot } from 'valtio';\n\nimport { api } from '../utils/api';\nimport safeBoundingBoxPadding from '../utils/safe-bounding-box-padding';\nimport states from '../utils/states';\nimport store from '../utils/store';\n\nimport Avatar from './avatar';\nimport Icon from './icon';\nimport MenuLink from './menu-link';\n\nfunction NavMenu(props) {\n  const snapStates = useSnapshot(states);\n  const { masto, instance, authenticated } = api();\n\n  const [currentAccount, setCurrentAccount] = useState();\n  const [moreThanOneAccount, setMoreThanOneAccount] = useState(false);\n\n  useEffect(() => {\n    const accounts = store.local.getJSON('accounts') || [];\n    const acc = accounts.find(\n      (account) => account.info.id === store.session.get('currentAccount'),\n    );\n    if (acc) setCurrentAccount(acc);\n    setMoreThanOneAccount(accounts.length > 1);\n  }, []);\n\n  // Home = Following\n  // But when in multi-column mode, Home becomes columns of anything\n  // User may choose pin or not to pin Following\n  // If user doesn't pin Following, we show it in the menu\n  const showFollowing =\n    (snapStates.settings.shortcutsViewMode === 'multi-column' ||\n      (!snapStates.settings.shortcutsViewMode &&\n        snapStates.settings.shortcutsColumnsMode)) &&\n    !snapStates.shortcuts.find((pin) => pin.type === 'following');\n\n  const bindLongPress = useLongPress(\n    () => {\n      states.showAccounts = true;\n    },\n    {\n      threshold: 600,\n      detect: 'touch',\n      cancelOnMovement: true,\n    },\n  );\n\n  const buttonRef = useRef();\n  const [menuState, setMenuState] = useState(undefined);\n\n  const boundingBoxPadding = safeBoundingBoxPadding([\n    0,\n    0,\n    snapStates.settings.shortcutsViewMode === 'tab-menu-bar' ? 50 : 0,\n    0,\n  ]);\n\n  const mutesIterator = useRef();\n  async function fetchMutes(firstLoad) {\n    if (firstLoad || !mutesIterator.current) {\n      mutesIterator.current = masto.v1.mutes.list({\n        limit: 80,\n      });\n    }\n    const results = await mutesIterator.current.next();\n    return results;\n  }\n\n  const blocksIterator = useRef();\n  async function fetchBlocks(firstLoad) {\n    if (firstLoad || !blocksIterator.current) {\n      blocksIterator.current = masto.v1.blocks.list({\n        limit: 80,\n      });\n    }\n    const results = await blocksIterator.current.next();\n    return results;\n  }\n\n  return (\n    <>\n      <button\n        ref={buttonRef}\n        type=\"button\"\n        class={`button plain nav-menu-button ${\n          moreThanOneAccount ? 'with-avatar' : ''\n        } ${open ? 'active' : ''}`}\n        style={{ position: 'relative' }}\n        onClick={() => {\n          setMenuState((state) => (!state ? 'open' : undefined));\n        }}\n        onContextMenu={(e) => {\n          e.preventDefault();\n          states.showAccounts = true;\n        }}\n        {...bindLongPress()}\n      >\n        {moreThanOneAccount && (\n          <Avatar\n            url={\n              currentAccount?.info?.avatar || currentAccount?.info?.avatarStatic\n            }\n            size=\"l\"\n            squircle={currentAccount?.info?.bot}\n          />\n        )}\n        <Icon icon=\"menu\" size={moreThanOneAccount ? 's' : 'l'} />\n      </button>\n      <ControlledMenu\n        menuClassName=\"nav-menu\"\n        state={menuState}\n        anchorRef={buttonRef}\n        onClose={() => {\n          setMenuState(undefined);\n        }}\n        containerProps={{\n          style: {\n            zIndex: 10,\n          },\n          onClick: () => {\n            setMenuState(undefined);\n          },\n        }}\n        portal={{\n          target: document.body,\n        }}\n        {...props}\n        overflow=\"auto\"\n        viewScroll=\"close\"\n        position=\"anchor\"\n        align=\"center\"\n        boundingBoxPadding={boundingBoxPadding}\n        unmountOnClose\n      >\n        {!!snapStates.appVersion?.commitHash &&\n          __COMMIT_HASH__ !== snapStates.appVersion.commitHash && (\n            <div class=\"top-menu\">\n              <MenuItem\n                onClick={() => {\n                  const yes = confirm('Reload page now to update?');\n                  if (yes) {\n                    (async () => {\n                      try {\n                        location.reload();\n                      } catch (e) {}\n                    })();\n                  }\n                }}\n              >\n                <Icon icon=\"sparkles\" class=\"sparkle-icon\" size=\"l\" />{' '}\n                <span>New update available…</span>\n              </MenuItem>\n              <MenuDivider />\n            </div>\n          )}\n        <section>\n          <MenuLink to=\"/\">\n            <Icon icon=\"home\" size=\"l\" /> <span>Home</span>\n          </MenuLink>\n          {authenticated && (\n            <>\n              {showFollowing && (\n                <MenuLink to=\"/following\">\n                  <Icon icon=\"following\" size=\"l\" /> <span>Following</span>\n                </MenuLink>\n              )}\n              <MenuLink to=\"/mentions\">\n                <Icon icon=\"at\" size=\"l\" /> <span>Mentions</span>\n              </MenuLink>\n              <MenuLink to=\"/notifications\">\n                <Icon icon=\"notification\" size=\"l\" /> <span>Notifications</span>\n                {snapStates.notificationsShowNew && (\n                  <sup title=\"New\" style={{ opacity: 0.5 }}>\n                    {' '}\n                    &bull;\n                  </sup>\n                )}\n              </MenuLink>\n              <MenuDivider />\n              <MenuLink to=\"/l\">\n                <Icon icon=\"list\" size=\"l\" /> <span>Lists</span>\n              </MenuLink>\n              <MenuLink to=\"/ft\">\n                <Icon icon=\"hashtag\" size=\"l\" /> <span>Followed Hashtags</span>\n              </MenuLink>\n              <MenuLink to=\"/b\">\n                <Icon icon=\"bookmark\" size=\"l\" /> <span>Bookmarks</span>\n              </MenuLink>\n              <MenuLink to=\"/f\">\n                <Icon icon=\"heart\" size=\"l\" /> <span>Likes</span>\n              </MenuLink>\n            </>\n          )}\n          <MenuDivider />\n          <MenuLink to={`/search`}>\n            <Icon icon=\"search\" size=\"l\" /> <span>Search</span>\n          </MenuLink>\n          <MenuLink to={`/${instance}/p/l`}>\n            <Icon icon=\"group\" size=\"l\" /> <span>Local</span>\n          </MenuLink>\n          <MenuLink to={`/${instance}/p`}>\n            <Icon icon=\"earth\" size=\"l\" /> <span>Federated</span>\n          </MenuLink>\n          <MenuLink to={`/${instance}/trending`}>\n            <Icon icon=\"chart\" size=\"l\" /> <span>Trending</span>\n          </MenuLink>\n        </section>\n        <section>\n          {authenticated ? (\n            <>\n              <MenuDivider />\n              {currentAccount?.info?.id && (\n                <MenuLink to={`/${instance}/a/${currentAccount.info.id}`}>\n                  <Icon icon=\"user\" size=\"l\" /> <span>Profile</span>\n                </MenuLink>\n              )}\n              <MenuItem\n                onClick={() => {\n                  states.showAccounts = true;\n                }}\n              >\n                <Icon icon=\"group\" size=\"l\" /> <span>Accounts&hellip;</span>\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  states.showGenericAccounts = {\n                    id: 'mute',\n                    heading: 'Muted users',\n                    fetchAccounts: fetchMutes,\n                  };\n                }}\n              >\n                <Icon icon=\"mute\" size=\"l\" /> Muted users&hellip;\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  states.showGenericAccounts = {\n                    id: 'block',\n                    heading: 'Blocked users',\n                    fetchAccounts: fetchBlocks,\n                  };\n                }}\n              >\n                <Icon icon=\"block\" size=\"l\" />\n                Blocked users&hellip;\n              </MenuItem>\n              <MenuDivider className=\"divider-grow\" />\n              <MenuItem\n                onClick={() => {\n                  states.showKeyboardShortcutsHelp = true;\n                }}\n              >\n                <Icon icon=\"keyboard\" size=\"l\" />{' '}\n                <span>Keyboard shortcuts</span>\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  states.showShortcutsSettings = true;\n                }}\n              >\n                <Icon icon=\"shortcut\" size=\"l\" />{' '}\n                <span>Shortcuts / Columns&hellip;</span>\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  states.showSettings = true;\n                }}\n              >\n                <Icon icon=\"gear\" size=\"l\" /> <span>Settings&hellip;</span>\n              </MenuItem>\n            </>\n          ) : (\n            <>\n              <MenuDivider />\n              <MenuLink to=\"/login\">\n                <Icon icon=\"user\" size=\"l\" /> <span>Log in</span>\n              </MenuLink>\n              <MenuItem\n                onClick={() => {\n                  states.showSettings = true;\n                }}\n              >\n                <Icon icon=\"gear\" size=\"l\" /> <span>Settings&hellip;</span>\n              </MenuItem>\n            </>\n          )}\n        </section>\n      </ControlledMenu>\n    </>\n  );\n}\n\nexport default NavMenu;\n","import { useCallback, useEffect, useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { InView } from 'react-intersection-observer';\nimport { useDebouncedCallback } from 'use-debounce';\nimport { useSnapshot } from 'valtio';\n\nimport FilterContext from '../utils/filter-context';\nimport { isFiltered } from '../utils/filters';\nimport states, { statusKey } from '../utils/states';\nimport statusPeek from '../utils/status-peek';\nimport { groupBoosts, groupContext } from '../utils/timeline-utils';\nimport useInterval from '../utils/useInterval';\nimport usePageVisibility from '../utils/usePageVisibility';\nimport useScroll from '../utils/useScroll';\n\nimport Icon from './icon';\nimport Link from './link';\nimport MediaPost from './media-post';\nimport NavMenu from './nav-menu';\nimport Status from './status';\n\nconst scrollIntoViewOptions = {\n  block: 'nearest',\n  inline: 'center',\n  behavior: 'smooth',\n};\n\nfunction Timeline({\n  title,\n  titleComponent,\n  id,\n  instance,\n  emptyText,\n  errorText,\n  useItemID, // use statusID instead of status object, assuming it's already in states\n  boostsCarousel,\n  fetchItems = () => {},\n  checkForUpdates = () => {},\n  checkForUpdatesInterval = 15_000, // 15 seconds\n  headerStart,\n  headerEnd,\n  timelineStart,\n  // allowFilters,\n  refresh,\n  view,\n  filterContext,\n}) {\n  const snapStates = useSnapshot(states);\n  const [items, setItems] = useState([]);\n  const [uiState, setUIState] = useState('default');\n  const [showMore, setShowMore] = useState(false);\n  const [showNew, setShowNew] = useState(false);\n  const [visible, setVisible] = useState(true);\n  const scrollableRef = useRef();\n\n  console.debug('RENDER Timeline', id, refresh);\n\n  const allowGrouping = view !== 'media';\n  const loadItems = useDebouncedCallback(\n    (firstLoad) => {\n      setShowNew(false);\n      if (uiState === 'loading') return;\n      setUIState('loading');\n      (async () => {\n        try {\n          let { done, value } = await fetchItems(firstLoad);\n          if (Array.isArray(value)) {\n            // Avoid grouping for pinned posts\n            const [pinnedPosts, otherPosts] = value.reduce(\n              (acc, item) => {\n                if (item._pinned) {\n                  acc[0].push(item);\n                } else {\n                  acc[1].push(item);\n                }\n                return acc;\n              },\n              [[], []],\n            );\n            value = otherPosts;\n            if (allowGrouping) {\n              if (boostsCarousel) {\n                value = groupBoosts(value);\n              }\n              value = groupContext(value);\n            }\n            if (pinnedPosts.length) {\n              value = pinnedPosts.concat(value);\n            }\n            console.log(value);\n            if (firstLoad) {\n              setItems(value);\n            } else {\n              setItems((items) => [...items, ...value]);\n            }\n            if (!value.length) done = true;\n            setShowMore(!done);\n          } else {\n            setShowMore(false);\n          }\n          setUIState('default');\n        } catch (e) {\n          console.error(e);\n          setUIState('error');\n        } finally {\n          loadItems.cancel();\n        }\n      })();\n    },\n    1500,\n    {\n      leading: true,\n      trailing: false,\n    },\n  );\n\n  const itemsSelector = '.timeline-item, .timeline-item-alt';\n\n  const jRef = useHotkeys('j, shift+j', (_, handler) => {\n    // focus on next status after active item\n    const activeItem = document.activeElement.closest(itemsSelector);\n    const activeItemRect = activeItem?.getBoundingClientRect();\n    const allItems = Array.from(\n      scrollableRef.current.querySelectorAll(itemsSelector),\n    );\n    if (\n      activeItem &&\n      activeItemRect.top < scrollableRef.current.clientHeight &&\n      activeItemRect.bottom > 0\n    ) {\n      const activeItemIndex = allItems.indexOf(activeItem);\n      let nextItem = allItems[activeItemIndex + 1];\n      if (handler.shift) {\n        // get next status that's not .timeline-item-alt\n        nextItem = allItems.find(\n          (item, index) =>\n            index > activeItemIndex &&\n            !item.classList.contains('timeline-item-alt'),\n        );\n      }\n      if (nextItem) {\n        nextItem.focus();\n        nextItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostItem = allItems.find((item) => {\n        const itemRect = item.getBoundingClientRect();\n        return itemRect.top >= 44 && itemRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostItem) {\n        topmostItem.focus();\n        topmostItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    }\n  });\n\n  const kRef = useHotkeys('k, shift+k', (_, handler) => {\n    // focus on previous status after active item\n    const activeItem = document.activeElement.closest(itemsSelector);\n    const activeItemRect = activeItem?.getBoundingClientRect();\n    const allItems = Array.from(\n      scrollableRef.current.querySelectorAll(itemsSelector),\n    );\n    if (\n      activeItem &&\n      activeItemRect.top < scrollableRef.current.clientHeight &&\n      activeItemRect.bottom > 0\n    ) {\n      const activeItemIndex = allItems.indexOf(activeItem);\n      let prevItem = allItems[activeItemIndex - 1];\n      if (handler.shift) {\n        // get prev status that's not .timeline-item-alt\n        prevItem = allItems.findLast(\n          (item, index) =>\n            index < activeItemIndex &&\n            !item.classList.contains('timeline-item-alt'),\n        );\n      }\n      if (prevItem) {\n        prevItem.focus();\n        prevItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostItem = allItems.find((item) => {\n        const itemRect = item.getBoundingClientRect();\n        return itemRect.top >= 44 && itemRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostItem) {\n        topmostItem.focus();\n        topmostItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    }\n  });\n\n  const oRef = useHotkeys(['enter', 'o'], () => {\n    // open active status\n    const activeItem = document.activeElement.closest(itemsSelector);\n    if (activeItem) {\n      activeItem.click();\n    }\n  });\n\n  const {\n    scrollDirection,\n    nearReachStart,\n    nearReachEnd,\n    reachStart,\n    reachEnd,\n  } = useScroll({\n    scrollableRef,\n    distanceFromEnd: 2,\n    scrollThresholdStart: 44,\n  });\n\n  useEffect(() => {\n    scrollableRef.current?.scrollTo({ top: 0 });\n    loadItems(true);\n  }, []);\n  useEffect(() => {\n    loadItems(true);\n  }, [refresh]);\n\n  useEffect(() => {\n    if (reachStart) {\n      loadItems(true);\n    }\n  }, [reachStart]);\n\n  useEffect(() => {\n    if (nearReachEnd || (reachEnd && showMore)) {\n      loadItems();\n    }\n  }, [nearReachEnd, showMore]);\n\n  const prevView = useRef(view);\n  useEffect(() => {\n    if (prevView.current !== view) {\n      prevView.current = view;\n      setItems([]);\n    }\n  }, [view]);\n\n  const loadOrCheckUpdates = useCallback(\n    async ({ disableIdleCheck = false } = {}) => {\n      const noPointers = scrollableRef.current\n        ? getComputedStyle(scrollableRef.current).pointerEvents === 'none'\n        : false;\n      console.log('✨ Load or check updates', id, {\n        autoRefresh: snapStates.settings.autoRefresh,\n        scrollTop: scrollableRef.current.scrollTop,\n        disableIdleCheck,\n        idle: window.__IDLE__,\n        inBackground: inBackground(),\n        noPointers,\n      });\n      if (\n        snapStates.settings.autoRefresh &&\n        scrollableRef.current.scrollTop < 16 &&\n        (disableIdleCheck || window.__IDLE__) &&\n        !inBackground() &&\n        !noPointers\n      ) {\n        console.log('✨ Load updates', id, snapStates.settings.autoRefresh);\n        loadItems(true);\n      } else {\n        console.log('✨ Check updates', id, snapStates.settings.autoRefresh);\n        const hasUpdate = await checkForUpdates();\n        if (hasUpdate) {\n          console.log('✨ Has new updates', id);\n          setShowNew(true);\n        }\n      }\n    },\n    [id, loadItems, checkForUpdates, snapStates.settings.autoRefresh],\n  );\n\n  const lastHiddenTime = useRef();\n  usePageVisibility(\n    (visible) => {\n      if (visible) {\n        const timeDiff = Date.now() - lastHiddenTime.current;\n        if (!lastHiddenTime.current || timeDiff > 1000 * 3) {\n          // 3 seconds\n          loadOrCheckUpdates({\n            disableIdleCheck: true,\n          });\n        }\n      } else {\n        lastHiddenTime.current = Date.now();\n      }\n      setVisible(visible);\n    },\n    [checkForUpdates, loadOrCheckUpdates, snapStates.settings.autoRefresh],\n  );\n\n  // checkForUpdates interval\n  useInterval(\n    loadOrCheckUpdates,\n    visible && !showNew\n      ? checkForUpdatesInterval * (nearReachStart ? 1 : 2)\n      : null,\n  );\n\n  const hiddenUI = scrollDirection === 'end' && !nearReachStart;\n\n  return (\n    <FilterContext.Provider value={filterContext}>\n      <div\n        id={`${id}-page`}\n        class=\"deck-container\"\n        ref={(node) => {\n          scrollableRef.current = node;\n          jRef.current = node;\n          kRef.current = node;\n          oRef.current = node;\n        }}\n        tabIndex=\"-1\"\n      >\n        <div class=\"timeline-deck deck\">\n          <header\n            hidden={hiddenUI}\n            onClick={(e) => {\n              if (!e.target.closest('a, button')) {\n                scrollableRef.current?.scrollTo({\n                  top: 0,\n                  behavior: 'smooth',\n                });\n              }\n            }}\n            onDblClick={(e) => {\n              if (!e.target.closest('a, button')) {\n                loadItems(true);\n              }\n            }}\n            class={uiState === 'loading' ? 'loading' : ''}\n          >\n            <div class=\"header-grid\">\n              <div class=\"header-side\">\n                <NavMenu />\n                {headerStart !== null && headerStart !== undefined ? (\n                  headerStart\n                ) : (\n                  <Link to=\"/\" class=\"button plain home-button\">\n                    <Icon icon=\"home\" size=\"l\" />\n                  </Link>\n                )}\n              </div>\n              {title && (titleComponent ? titleComponent : <h1>{title}</h1>)}\n              <div class=\"header-side\">\n                {/* <Loader hidden={uiState !== 'loading'} /> */}\n                {!!headerEnd && headerEnd}\n              </div>\n            </div>\n            {items.length > 0 &&\n              uiState !== 'loading' &&\n              !hiddenUI &&\n              showNew && (\n                <button\n                  class=\"updates-button shiny-pill\"\n                  type=\"button\"\n                  onClick={() => {\n                    loadItems(true);\n                    scrollableRef.current?.scrollTo({\n                      top: 0,\n                      behavior: 'smooth',\n                    });\n                  }}\n                >\n                  <Icon icon=\"arrow-up\" /> New posts\n                </button>\n              )}\n          </header>\n          {!!timelineStart && (\n            <div\n              class={`timeline-start ${uiState === 'loading' ? 'loading' : ''}`}\n            >\n              {timelineStart}\n            </div>\n          )}\n          {!!items.length ? (\n            <>\n              <ul class={`timeline ${view ? `timeline-${view}` : ''}`}>\n                {items.map((status) => (\n                  <TimelineItem\n                    status={status}\n                    instance={instance}\n                    useItemID={useItemID}\n                    // allowFilters={allowFilters}\n                    filterContext={filterContext}\n                    key={status.id + status?._pinned + view}\n                    view={view}\n                  />\n                ))}\n                {showMore &&\n                  uiState === 'loading' &&\n                  (view === 'media' ? null : (\n                    <>\n                      <li\n                        style={{\n                          height: '20vh',\n                        }}\n                      >\n                        <Status skeleton />\n                      </li>\n                      <li\n                        style={{\n                          height: '25vh',\n                        }}\n                      >\n                        <Status skeleton />\n                      </li>\n                    </>\n                  ))}\n              </ul>\n              {uiState === 'default' &&\n                (showMore ? (\n                  <InView\n                    onChange={(inView) => {\n                      if (inView) {\n                        loadItems();\n                      }\n                    }}\n                  >\n                    <button\n                      type=\"button\"\n                      class=\"plain block\"\n                      onClick={() => loadItems()}\n                      style={{ marginBlockEnd: '6em' }}\n                    >\n                      Show more&hellip;\n                    </button>\n                  </InView>\n                ) : (\n                  <p class=\"ui-state insignificant\">The end.</p>\n                ))}\n            </>\n          ) : uiState === 'loading' ? (\n            <ul class=\"timeline\">\n              {Array.from({ length: 5 }).map((_, i) =>\n                view === 'media' ? (\n                  <div\n                    style={{\n                      height: '50vh',\n                    }}\n                  />\n                ) : (\n                  <li key={i}>\n                    <Status skeleton />\n                  </li>\n                ),\n              )}\n            </ul>\n          ) : (\n            uiState !== 'error' && <p class=\"ui-state\">{emptyText}</p>\n          )}\n          {uiState === 'error' && (\n            <p class=\"ui-state\">\n              {errorText}\n              <br />\n              <br />\n              <button type=\"button\" onClick={() => loadItems(!items.length)}>\n                Try again\n              </button>\n            </p>\n          )}\n        </div>\n      </div>\n    </FilterContext.Provider>\n  );\n}\n\nfunction TimelineItem({\n  status,\n  instance,\n  useItemID,\n  // allowFilters,\n  filterContext,\n  view,\n}) {\n  const { id: statusID, reblog, items, type, _pinned } = status;\n  if (_pinned) useItemID = false;\n  const actualStatusID = reblog?.id || statusID;\n  const url = instance\n    ? `/${instance}/s/${actualStatusID}`\n    : `/s/${actualStatusID}`;\n  let title = '';\n  if (type === 'boosts') {\n    title = `${items.length} Boosts`;\n  } else if (type === 'pinned') {\n    title = 'Pinned posts';\n  }\n  const isCarousel = type === 'boosts' || type === 'pinned';\n  if (items) {\n    if (isCarousel) {\n      // Here, we don't hide filtered posts, but we sort them last\n      items.sort((a, b) => {\n        // if (a._filtered && !b._filtered) {\n        //   return 1;\n        // }\n        // if (!a._filtered && b._filtered) {\n        //   return -1;\n        // }\n        const aFiltered = isFiltered(a.filtered, filterContext);\n        const bFiltered = isFiltered(b.filtered, filterContext);\n        if (aFiltered && !bFiltered) {\n          return 1;\n        }\n        if (!aFiltered && bFiltered) {\n          return -1;\n        }\n        return 0;\n      });\n      return (\n        <li key={`timeline-${statusID}`} class=\"timeline-item-carousel\">\n          <StatusCarousel title={title} class={`${type}-carousel`}>\n            {items.map((item) => {\n              const { id: statusID, reblog, _pinned } = item;\n              const actualStatusID = reblog?.id || statusID;\n              const url = instance\n                ? `/${instance}/s/${actualStatusID}`\n                : `/s/${actualStatusID}`;\n              if (_pinned) useItemID = false;\n              return (\n                <li key={statusID}>\n                  <Link class=\"status-carousel-link timeline-item-alt\" to={url}>\n                    {useItemID ? (\n                      <Status\n                        statusID={statusID}\n                        instance={instance}\n                        size=\"s\"\n                        contentTextWeight\n                        enableCommentHint\n                        // allowFilters={allowFilters}\n                      />\n                    ) : (\n                      <Status\n                        status={item}\n                        instance={instance}\n                        size=\"s\"\n                        contentTextWeight\n                        enableCommentHint\n                        // allowFilters={allowFilters}\n                      />\n                    )}\n                  </Link>\n                </li>\n              );\n            })}\n          </StatusCarousel>\n        </li>\n      );\n    }\n    const manyItems = items.length > 3;\n    return items.map((item, i) => {\n      const { id: statusID, _differentAuthor } = item;\n      const url = instance ? `/${instance}/s/${statusID}` : `/s/${statusID}`;\n      const isMiddle = i > 0 && i < items.length - 1;\n      const isSpoiler = item.sensitive && !!item.spoilerText;\n      const showCompact =\n        (!_differentAuthor && isSpoiler && i > 0) ||\n        (manyItems &&\n          isMiddle &&\n          (type === 'thread' ||\n            (type === 'conversation' &&\n              !_differentAuthor &&\n              !items[i - 1]._differentAuthor &&\n              !items[i + 1]._differentAuthor)));\n      const isEnd = i === items.length - 1;\n      return (\n        <li\n          key={`timeline-${statusID}`}\n          class={`timeline-item-container timeline-item-container-type-${type} timeline-item-container-${\n            i === 0 ? 'start' : isEnd ? 'end' : 'middle'\n          } ${_differentAuthor ? 'timeline-item-diff-author' : ''}`}\n        >\n          <Link class=\"status-link timeline-item\" to={url}>\n            {showCompact ? (\n              <TimelineStatusCompact status={item} instance={instance} />\n            ) : useItemID ? (\n              <Status\n                statusID={statusID}\n                instance={instance}\n                enableCommentHint={isEnd}\n                // allowFilters={allowFilters}\n              />\n            ) : (\n              <Status\n                status={item}\n                instance={instance}\n                enableCommentHint={isEnd}\n                // allowFilters={allowFilters}\n              />\n            )}\n          </Link>\n        </li>\n      );\n    });\n  }\n\n  const itemKey = `timeline-${statusID + _pinned}`;\n\n  if (view === 'media') {\n    return useItemID ? (\n      <MediaPost\n        class=\"timeline-item\"\n        parent=\"li\"\n        key={itemKey}\n        statusID={statusID}\n        instance={instance}\n        // allowFilters={allowFilters}\n      />\n    ) : (\n      <MediaPost\n        class=\"timeline-item\"\n        parent=\"li\"\n        key={itemKey}\n        status={status}\n        instance={instance}\n        // allowFilters={allowFilters}\n      />\n    );\n  }\n\n  return (\n    <li key={itemKey}>\n      <Link class=\"status-link timeline-item\" to={url}>\n        {useItemID ? (\n          <Status\n            statusID={statusID}\n            instance={instance}\n            enableCommentHint\n            // allowFilters={allowFilters}\n          />\n        ) : (\n          <Status\n            status={status}\n            instance={instance}\n            enableCommentHint\n            // allowFilters={allowFilters}\n          />\n        )}\n      </Link>\n    </li>\n  );\n}\n\nfunction StatusCarousel({ title, class: className, children }) {\n  const carouselRef = useRef();\n  const { reachStart, reachEnd, init } = useScroll({\n    scrollableRef: carouselRef,\n    direction: 'horizontal',\n  });\n  useEffect(() => {\n    init?.();\n  }, []);\n\n  return (\n    <div class={`status-carousel ${className}`}>\n      <header>\n        <h3>{title}</h3>\n        <span>\n          <button\n            type=\"button\"\n            class=\"small plain2\"\n            disabled={reachStart}\n            onClick={() => {\n              carouselRef.current?.scrollBy({\n                left: -Math.min(320, carouselRef.current?.offsetWidth),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"chevron-left\" />\n          </button>{' '}\n          <button\n            type=\"button\"\n            class=\"small plain2\"\n            disabled={reachEnd}\n            onClick={() => {\n              carouselRef.current?.scrollBy({\n                left: Math.min(320, carouselRef.current?.offsetWidth),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"chevron-right\" />\n          </button>\n        </span>\n      </header>\n      <ul ref={carouselRef}>{children}</ul>\n    </div>\n  );\n}\n\nfunction TimelineStatusCompact({ status, instance }) {\n  const snapStates = useSnapshot(states);\n  const { id, visibility } = status;\n  const statusPeekText = statusPeek(status);\n  const sKey = statusKey(id, instance);\n  return (\n    <article\n      class={`status compact-thread ${\n        visibility === 'direct' ? 'visibility-direct' : ''\n      }`}\n      tabindex=\"-1\"\n    >\n      {!!snapStates.statusThreadNumber[sKey] ? (\n        <div class=\"status-thread-badge\">\n          <Icon icon=\"thread\" size=\"s\" />\n          {snapStates.statusThreadNumber[sKey]\n            ? ` ${snapStates.statusThreadNumber[sKey]}/X`\n            : ''}\n        </div>\n      ) : (\n        <div class=\"status-thread-badge\">\n          <Icon icon=\"thread\" size=\"s\" />\n        </div>\n      )}\n      <div class=\"content-compact\" title={statusPeekText}>\n        {statusPeekText}\n        {status.sensitive && status.spoilerText && (\n          <>\n            {' '}\n            <span class=\"spoiler-badge\">\n              <Icon icon=\"eye-close\" size=\"s\" />\n            </span>\n          </>\n        )}\n      </div>\n    </article>\n  );\n}\n\nfunction inBackground() {\n  return !!document.querySelector('.deck-backdrop, #modal-container > *');\n}\n\nexport default Timeline;\n","import { MenuItem } from '@szhsin/react-menu';\nimport {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'preact/hooks';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport AccountInfo from '../components/account-info';\nimport EmojiText from '../components/emoji-text';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Menu2 from '../components/menu2';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport pmem from '../utils/pmem';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\nconst MIN_YEAR = 1983;\nconst MIN_YEAR_MONTH = `${MIN_YEAR}-01`; // Birth of the Internet\n\nconst supportsInputMonth = (() => {\n  try {\n    const input = document.createElement('input');\n    input.setAttribute('type', 'month');\n    return input.type === 'month';\n  } catch (e) {\n    return false;\n  }\n})();\n\nasync function _isSearchEnabled(instance) {\n  const { masto } = api({ instance });\n  const results = await masto.v2.search.fetch({\n    q: 'from:me',\n    type: 'statuses',\n    limit: 1,\n  });\n  return !!results?.statuses?.length;\n}\nconst isSearchEnabled = pmem(_isSearchEnabled);\n\nfunction AccountStatuses() {\n  const snapStates = useSnapshot(states);\n  const { id, ...params } = useParams();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const month = searchParams.get('month');\n  const excludeReplies = !searchParams.get('replies');\n  const excludeBoosts = !!searchParams.get('boosts');\n  const tagged = searchParams.get('tagged');\n  const media = !!searchParams.get('media');\n  const { masto, instance, authenticated } = api({ instance: params.instance });\n  const { masto: currentMasto, instance: currentInstance } = api();\n  const accountStatusesIterator = useRef();\n\n  const allSearchParams = [month, excludeReplies, excludeBoosts, tagged, media];\n  const [account, setAccount] = useState();\n  const searchOffsetRef = useRef(0);\n  useEffect(() => {\n    searchOffsetRef.current = 0;\n  }, allSearchParams);\n\n  const sameCurrentInstance = useMemo(\n    () => instance === currentInstance,\n    [instance, currentInstance],\n  );\n  const [searchEnabled, setSearchEnabled] = useState(false);\n  useEffect(() => {\n    // Only enable for current logged-in instance\n    // Most remote instances don't allow unauthenticated searches\n    if (!sameCurrentInstance) return;\n    if (!account?.acct) return;\n    (async () => {\n      const enabled = await isSearchEnabled(instance);\n      console.log({ enabled });\n      setSearchEnabled(enabled);\n    })();\n  }, [instance, sameCurrentInstance, account?.acct]);\n\n  async function fetchAccountStatuses(firstLoad) {\n    const isValidMonth = /^\\d{4}-[01]\\d$/.test(month);\n    const isValidYear = month?.split?.('-')?.[0] >= MIN_YEAR;\n    if (isValidMonth && isValidYear) {\n      if (!account) {\n        return {\n          value: [],\n          done: true,\n        };\n      }\n      const [_year, _month] = month.split('-');\n      const monthIndex = parseInt(_month, 10) - 1;\n      // YYYY-MM (no day)\n      // Search options:\n      // - from:account\n      // - after:YYYY-MM-DD (non-inclusive)\n      // - before:YYYY-MM-DD (non-inclusive)\n\n      // Last day of previous month\n      const after = new Date(_year, monthIndex, 0);\n      const afterStr = `${after.getFullYear()}-${(after.getMonth() + 1)\n        .toString()\n        .padStart(2, '0')}-${after.getDate().toString().padStart(2, '0')}`;\n      // First day of next month\n      const before = new Date(_year, monthIndex + 1, 1);\n      const beforeStr = `${before.getFullYear()}-${(before.getMonth() + 1)\n        .toString()\n        .padStart(2, '0')}-${before.getDate().toString().padStart(2, '0')}`;\n      console.log({\n        month,\n        _year,\n        _month,\n        monthIndex,\n        after,\n        before,\n        afterStr,\n        beforeStr,\n      });\n\n      let limit;\n      if (firstLoad) {\n        limit = LIMIT + 1;\n        searchOffsetRef.current = 0;\n      } else {\n        limit = LIMIT + searchOffsetRef.current + 1;\n        searchOffsetRef.current += LIMIT;\n      }\n\n      const searchResults = await masto.v2.search.fetch({\n        q: `from:${account.acct} after:${afterStr} before:${beforeStr}`,\n        type: 'statuses',\n        limit,\n        offset: searchOffsetRef.current,\n      });\n      if (searchResults?.statuses?.length) {\n        const value = searchResults.statuses.slice(0, LIMIT);\n        value.forEach((item) => {\n          saveStatus(item, instance);\n        });\n        const done = searchResults.statuses.length <= LIMIT;\n        return { value, done };\n      } else {\n        return { value: [], done: true };\n      }\n    }\n\n    const results = [];\n    if (firstLoad) {\n      const { value } = await masto.v1.accounts\n        .$select(id)\n        .statuses.list({\n          pinned: true,\n        })\n        .next();\n      if (value?.length && !tagged && !media) {\n        const pinnedStatuses = value.map((status) => {\n          saveStatus(status, instance);\n          return {\n            ...status,\n            _pinned: true,\n          };\n        });\n        if (pinnedStatuses.length >= 3) {\n          const pinnedStatusesIds = pinnedStatuses.map((status) => status.id);\n          results.push({\n            id: pinnedStatusesIds,\n            items: pinnedStatuses,\n            type: 'pinned',\n          });\n        } else {\n          results.push(...pinnedStatuses);\n        }\n      }\n    }\n    if (firstLoad || !accountStatusesIterator.current) {\n      accountStatusesIterator.current = masto.v1.accounts\n        .$select(id)\n        .statuses.list({\n          limit: LIMIT,\n          exclude_replies: excludeReplies,\n          exclude_reblogs: excludeBoosts,\n          only_media: media,\n          tagged,\n        });\n    }\n    const { value, done } = await accountStatusesIterator.current.next();\n    if (value?.length) {\n      results.push(...value);\n\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      value: results,\n      done,\n    };\n  }\n\n  const [featuredTags, setFeaturedTags] = useState([]);\n  useTitle(\n    account?.acct\n      ? `${account?.displayName ? account.displayName + ' ' : ''}@${\n          account.acct\n        }${\n          !excludeReplies\n            ? ' (+ Replies)'\n            : excludeBoosts\n            ? ' (- Boosts)'\n            : tagged\n            ? ` (#${tagged})`\n            : media\n            ? ' (Media)'\n            : month\n            ? ` (${new Date(month).toLocaleString('default', {\n                month: 'long',\n                year: 'numeric',\n              })})`\n            : ''\n        }`\n      : 'Account posts',\n    '/:instance?/a/:id',\n  );\n\n  const fetchAccountPromiseRef = useRef();\n  const fetchAccount = useCallback(() => {\n    const fetchPromise =\n      fetchAccountPromiseRef.current || masto.v1.accounts.$select(id).fetch();\n    fetchAccountPromiseRef.current = fetchPromise;\n    return fetchPromise;\n  }, [id, masto]);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const acc = await fetchAccount();\n        console.log(acc);\n        setAccount(acc);\n      } catch (e) {\n        console.error(e);\n      }\n      try {\n        const featuredTags = await masto.v1.accounts\n          .$select(id)\n          .featuredTags.list();\n        console.log({ featuredTags });\n        setFeaturedTags(featuredTags);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [id]);\n\n  const { displayName, acct, emojis } = account || {};\n\n  const accountInfoMemo = useMemo(() => {\n    const cachedAccount = snapStates.accounts[`${id}@${instance}`];\n    return (\n      <AccountInfo\n        instance={instance}\n        account={cachedAccount || id}\n        fetchAccount={fetchAccount}\n        authenticated={authenticated}\n        standalone\n      />\n    );\n  }, [id, instance, authenticated, fetchAccount]);\n\n  const filterBarRef = useRef();\n  const TimelineStart = useMemo(() => {\n    const filtered =\n      !excludeReplies || excludeBoosts || tagged || media || !!month;\n\n    return (\n      <>\n        {accountInfoMemo}\n        <div\n          class=\"filter-bar\"\n          ref={filterBarRef}\n          style={{\n            position: 'relative',\n          }}\n        >\n          {filtered ? (\n            <Link\n              to={`/${instance}/a/${id}`}\n              class=\"insignificant filter-clear\"\n              title=\"Clear filters\"\n              key=\"clear-filters\"\n            >\n              <Icon icon=\"x\" size=\"l\" />\n            </Link>\n          ) : (\n            <Icon icon=\"filter\" class=\"insignificant\" size=\"l\" />\n          )}\n          <Link\n            to={`/${instance}/a/${id}${excludeReplies ? '?replies=1' : ''}`}\n            onClick={() => {\n              if (excludeReplies) {\n                showToast('Showing post with replies');\n              }\n            }}\n            class={excludeReplies ? '' : 'is-active'}\n          >\n            + Replies\n          </Link>\n          <Link\n            to={`/${instance}/a/${id}${excludeBoosts ? '' : '?boosts=0'}`}\n            onClick={() => {\n              if (!excludeBoosts) {\n                showToast('Showing posts without boosts');\n              }\n            }}\n            class={!excludeBoosts ? '' : 'is-active'}\n          >\n            - Boosts\n          </Link>\n          <Link\n            to={`/${instance}/a/${id}${media ? '' : '?media=1'}`}\n            onClick={() => {\n              if (!media) {\n                showToast('Showing posts with media');\n              }\n            }}\n            class={media ? 'is-active' : ''}\n          >\n            Media\n          </Link>\n          {featuredTags.map((tag) => (\n            <Link\n              key={tag.id}\n              to={`/${instance}/a/${id}${\n                tagged === tag.name\n                  ? ''\n                  : `?tagged=${encodeURIComponent(tag.name)}`\n              }`}\n              onClick={() => {\n                if (tagged !== tag.name) {\n                  showToast(`Showing posts tagged with #${tag.name}`);\n                }\n              }}\n              class={tagged === tag.name ? 'is-active' : ''}\n            >\n              <span>\n                <span class=\"more-insignificant\">#</span>\n                {tag.name}\n              </span>\n              {\n                // The count differs based on instance 😅\n              }\n              {/* <span class=\"filter-count\">{tag.statusesCount}</span> */}\n            </Link>\n          ))}\n          {searchEnabled &&\n            (supportsInputMonth ? (\n              <label class={`filter-field ${month ? 'is-active' : ''}`}>\n                <Icon icon=\"month\" size=\"l\" />\n                <input\n                  type=\"month\"\n                  disabled={!account?.acct}\n                  value={month || ''}\n                  min={MIN_YEAR_MONTH}\n                  max={new Date().toISOString().slice(0, 7)}\n                  onInput={(e) => {\n                    const { value, validity } = e.currentTarget;\n                    if (!validity.valid) return;\n                    setSearchParams(\n                      value\n                        ? {\n                            month: value,\n                          }\n                        : {},\n                    );\n                    showToast(\n                      `Showing posts in ${new Date(value).toLocaleString(\n                        'default',\n                        {\n                          month: 'long',\n                          year: 'numeric',\n                        },\n                      )}`,\n                    );\n                  }}\n                />\n              </label>\n            ) : (\n              // Fallback to <select> for month and <input type=\"number\"> for year\n              <MonthPicker\n                class={`filter-field ${month ? 'is-active' : ''}`}\n                disabled={!account?.acct}\n                value={month || ''}\n                min={MIN_YEAR_MONTH}\n                max={new Date().toISOString().slice(0, 7)}\n                onInput={(e) => {\n                  const { value, validity } = e;\n                  if (!validity.valid) return;\n                  setSearchParams(\n                    value\n                      ? {\n                          month: value,\n                        }\n                      : {},\n                  );\n                }}\n              />\n            ))}\n        </div>\n      </>\n    );\n  }, [\n    id,\n    instance,\n    authenticated,\n    featuredTags,\n    searchEnabled,\n    ...allSearchParams,\n  ]);\n\n  useEffect(() => {\n    // Focus on .is-active\n    const active = filterBarRef.current?.querySelector('.is-active');\n    if (active) {\n      console.log('active', active, active.offsetLeft);\n      filterBarRef.current.scrollTo({\n        behavior: 'smooth',\n        left:\n          active.offsetLeft -\n          (filterBarRef.current.offsetWidth - active.offsetWidth) / 2,\n      });\n    }\n  }, [featuredTags, searchEnabled, ...allSearchParams]);\n\n  const accountInstance = useMemo(() => {\n    if (!account?.url) return null;\n    const domain = new URL(account.url).hostname;\n    return domain;\n  }, [account]);\n  const sameInstance = instance === accountInstance;\n  const allowSwitch = !!account && !sameInstance;\n\n  return (\n    <Timeline\n      key={id}\n      title={`${account?.acct ? '@' + account.acct : 'Posts'}`}\n      titleComponent={\n        <h1\n          class=\"header-double-lines header-account\"\n          // onClick={() => {\n          //   states.showAccount = {\n          //     account,\n          //     instance,\n          //   };\n          // }}\n        >\n          <b>\n            <EmojiText text={displayName} emojis={emojis} />\n          </b>\n          <div>\n            <span>@{acct}</span>\n          </div>\n        </h1>\n      }\n      id=\"account-statuses\"\n      instance={instance}\n      emptyText=\"Nothing to see here yet.\"\n      errorText=\"Unable to load posts\"\n      fetchItems={fetchAccountStatuses}\n      useItemID\n      view={media ? 'media' : undefined}\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      timelineStart={TimelineStart}\n      refresh={[\n        excludeReplies,\n        excludeBoosts,\n        tagged,\n        media,\n        month + account?.acct,\n      ].toString()}\n      headerEnd={\n        <Menu2\n          portal\n          // setDownOverflow\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          <MenuItem\n            disabled={!allowSwitch}\n            onClick={() => {\n              (async () => {\n                try {\n                  const { masto } = api({\n                    instance: accountInstance,\n                  });\n                  const acc = await masto.v1.accounts.lookup({\n                    acct: account.acct,\n                  });\n                  const { id } = acc;\n                  location.hash = `/${accountInstance}/a/${id}`;\n                } catch (e) {\n                  console.error(e);\n                  alert('Unable to fetch account info');\n                }\n              })();\n            }}\n          >\n            <Icon icon=\"transfer\" />{' '}\n            <small class=\"menu-double-lines\">\n              Switch to account's instance (<b>{accountInstance}</b>)\n            </small>\n          </MenuItem>\n          {!sameCurrentInstance && (\n            <MenuItem\n              onClick={() => {\n                (async () => {\n                  try {\n                    const acc = await currentMasto.v1.accounts.lookup({\n                      acct: account.acct + '@' + instance,\n                    });\n                    const { id } = acc;\n                    location.hash = `/${currentInstance}/a/${id}`;\n                  } catch (e) {\n                    console.error(e);\n                    alert('Unable to fetch account info');\n                  }\n                })();\n              }}\n            >\n              <Icon icon=\"transfer\" />{' '}\n              <small class=\"menu-double-lines\">\n                Switch to my instance (<b>{currentInstance}</b>)\n              </small>\n            </MenuItem>\n          )}\n        </Menu2>\n      }\n    />\n  );\n}\n\nfunction MonthPicker(props) {\n  const {\n    class: className,\n    disabled,\n    value,\n    min,\n    max,\n    onInput = () => {},\n  } = props;\n  const [_year, _month] = value?.split('-') || [];\n  const monthFieldRef = useRef();\n  const yearFieldRef = useRef();\n\n  const checkValidity = (month, year) => {\n    const [minYear, minMonth] = min?.split('-') || [];\n    const [maxYear, maxMonth] = max?.split('-') || [];\n    if (year < minYear) return false;\n    if (year > maxYear) return false;\n    if (year === minYear && month < minMonth) return false;\n    if (year === maxYear && month > maxMonth) return false;\n    return true;\n  };\n\n  return (\n    <div class={className}>\n      <Icon icon=\"month\" size=\"l\" />\n      <select\n        ref={monthFieldRef}\n        disabled={disabled}\n        value={_month || ''}\n        onInput={(e) => {\n          const { value: month } = e.currentTarget;\n          const year = yearFieldRef.current.value;\n          if (!checkValidity(month, year))\n            return {\n              value: '',\n              validity: {\n                valid: false,\n              },\n            };\n          onInput({\n            value: month ? `${year}-${month}` : '',\n            validity: {\n              valid: true,\n            },\n          });\n        }}\n      >\n        <option value=\"\">Month</option>\n        <option disabled>-----</option>\n        {Array.from({ length: 12 }, (_, i) => (\n          <option\n            value={\n              // Month is 1-indexed\n              (i + 1).toString().padStart(2, '0')\n            }\n            key={i}\n          >\n            {new Date(0, i).toLocaleString('default', {\n              month: 'long',\n            })}\n          </option>\n        ))}\n      </select>{' '}\n      <input\n        ref={yearFieldRef}\n        type=\"number\"\n        disabled={disabled}\n        value={_year || new Date().getFullYear()}\n        min={min?.slice(0, 4) || MIN_YEAR}\n        max={max?.slice(0, 4) || new Date().getFullYear()}\n        onInput={(e) => {\n          const { value: year, validity } = e.currentTarget;\n          const month = monthFieldRef.current.value;\n          if (!validity.valid || !checkValidity(month, year))\n            return {\n              value: '',\n              validity: {\n                valid: false,\n              },\n            };\n          onInput({\n            value: year ? `${year}-${month}` : '',\n            validity: {\n              valid: true,\n            },\n          });\n        }}\n        style={{\n          width: '4.5em',\n        }}\n      />\n    </div>\n  );\n}\n\nexport default AccountStatuses;\n","import { useRef } from 'preact/hooks';\n\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Bookmarks() {\n  useTitle('Bookmarks', '/b');\n  const { masto, instance } = api();\n  const bookmarksIterator = useRef();\n  async function fetchBookmarks(firstLoad) {\n    if (firstLoad || !bookmarksIterator.current) {\n      bookmarksIterator.current = masto.v1.bookmarks.list({ limit: LIMIT });\n    }\n    return await bookmarksIterator.current.next();\n  }\n\n  return (\n    <Timeline\n      title=\"Bookmarks\"\n      id=\"bookmarks\"\n      emptyText=\"No bookmarks yet. Go bookmark something!\"\n      errorText=\"Unable to load bookmarks\"\n      instance={instance}\n      fetchItems={fetchBookmarks}\n    />\n  );\n}\n\nexport default Bookmarks;\n","import { useRef } from 'preact/hooks';\n\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Favourites() {\n  useTitle('Likes', '/f');\n  const { masto, instance } = api();\n  const favouritesIterator = useRef();\n  async function fetchFavourites(firstLoad) {\n    if (firstLoad || !favouritesIterator.current) {\n      favouritesIterator.current = masto.v1.favourites.list({ limit: LIMIT });\n    }\n    return await favouritesIterator.current.next();\n  }\n\n  return (\n    <Timeline\n      title=\"Likes\"\n      id=\"favourites\"\n      emptyText=\"No likes yet. Go like something!\"\n      errorText=\"Unable to load likes\"\n      instance={instance}\n      fetchItems={fetchFavourites}\n    />\n  );\n}\n\nexport default Favourites;\n","import { useEffect, useState } from 'preact/hooks';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport NavMenu from '../components/nav-menu';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 200;\n\nfunction FollowedHashtags() {\n  const { masto, instance } = api();\n  useTitle(`Followed Hashtags`, `/ft`);\n  const [uiState, setUIState] = useState('default');\n\n  const [followedHashtags, setFollowedHashtags] = useState([]);\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const iterator = masto.v1.followedTags.list({\n          limit: LIMIT,\n        });\n        const tags = [];\n        do {\n          const { value, done } = await iterator.next();\n          if (done || value?.length === 0) break;\n          tags.push(...value);\n        } while (true);\n        tags.sort((a, b) => a.name.localeCompare(b.name));\n        console.log(tags);\n        setFollowedHashtags(tags);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, []);\n\n  return (\n    <div id=\"followed-hashtags-page\" class=\"deck-container\" tabIndex=\"-1\">\n      <div class=\"timeline-deck deck\">\n        <header>\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n              <Link to=\"/\" class=\"button plain\">\n                <Icon icon=\"home\" size=\"l\" />\n              </Link>\n            </div>\n            <h1>Followed Hashtags</h1>\n            <div class=\"header-side\" />\n          </div>\n        </header>\n        <main>\n          {followedHashtags.length > 0 ? (\n            <ul class=\"link-list\">\n              {followedHashtags.map((tag) => (\n                <li>\n                  <Link\n                    to={\n                      instance ? `/${instance}/t/${tag.name}` : `/t/${tag.name}`\n                    }\n                  >\n                    <Icon icon=\"hashtag\" /> <span>{tag.name}</span>\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          ) : uiState === 'loading' ? (\n            <p class=\"ui-state\">\n              <Loader abrupt />\n            </p>\n          ) : uiState === 'error' ? (\n            <p class=\"ui-state\">Unable to load followed hashtags.</p>\n          ) : (\n            <p class=\"ui-state\">No hashtags followed yet.</p>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default FollowedHashtags;\n","import { useEffect, useRef } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { filteredItems } from '../utils/filters';\nimport states from '../utils/states';\nimport { getStatus, saveStatus } from '../utils/states';\nimport { dedupeBoosts } from '../utils/timeline-utils';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Following({ title, path, id, ...props }) {\n  useTitle(title || 'Following', path || '/following');\n  const { masto, streaming, instance } = api();\n  const snapStates = useSnapshot(states);\n  const homeIterator = useRef();\n  const latestItem = useRef();\n\n  console.debug('RENDER Following', title, id);\n\n  async function fetchHome(firstLoad) {\n    if (firstLoad || !homeIterator.current) {\n      homeIterator.current = masto.v1.timelines.home.list({ limit: LIMIT });\n    }\n    const results = await homeIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n        console.log('First load', latestItem.current);\n      }\n\n      // value = filteredItems(value, 'home');\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n      value = dedupeBoosts(value, instance);\n\n      // ENFORCE sort by datetime (Latest first)\n      value.sort((a, b) => {\n        const aDate = new Date(a.createdAt);\n        const bDate = new Date(b.createdAt);\n        return bDate - aDate;\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines.home\n        .list({\n          limit: 5,\n          since_id: latestItem.current,\n        })\n        .next();\n      let { value } = results;\n      console.log('checkForUpdates', latestItem.current, value);\n      if (value?.length) {\n        latestItem.current = value[0].id;\n        value = dedupeBoosts(value, instance);\n        value = filteredItems(value, 'home');\n        if (value.some((item) => !item.reblog)) {\n          return true;\n        }\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  useEffect(() => {\n    let sub;\n    (async () => {\n      if (streaming) {\n        sub = streaming.user.subscribe();\n        console.log('🎏 Streaming user', sub);\n        for await (const entry of sub) {\n          if (!sub) break;\n          if (entry.event === 'status.update') {\n            const status = entry.payload;\n            console.log(`🔄 Status ${status.id} updated`);\n            saveStatus(status, instance);\n          } else if (entry.event === 'delete') {\n            const statusID = entry.payload;\n            console.log(`❌ Status ${statusID} deleted`);\n            // delete states.statuses[statusID];\n            const s = getStatus(statusID, instance);\n            if (s) s._deleted = true;\n          }\n        }\n      }\n    })();\n    return () => {\n      sub?.unsubscribe?.();\n      sub = null;\n    };\n  }, [streaming]);\n\n  return (\n    <Timeline\n      title={title || 'Following'}\n      id={id || 'following'}\n      emptyText=\"Nothing to see here.\"\n      errorText=\"Unable to load posts.\"\n      instance={instance}\n      fetchItems={fetchHome}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      {...props}\n      // allowFilters\n      filterContext=\"home\"\n    />\n  );\n}\n\nexport default Following;\n","import {\n  FocusableItem,\n  MenuDivider,\n  MenuGroup,\n  MenuHeader,\n  MenuItem,\n} from '@szhsin/react-menu';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useNavigate, useParams, useSearchParams } from 'react-router-dom';\n\nimport Icon from '../components/icon';\nimport Menu2 from '../components/menu2';\nimport MenuConfirm from '../components/menu-confirm';\nimport { SHORTCUTS_LIMIT } from '../components/shortcuts-settings';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { filteredItems } from '../utils/filters';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\n// Limit is 4 per \"mode\"\n// https://github.com/mastodon/mastodon/issues/15194\n// Hard-coded https://github.com/mastodon/mastodon/blob/19614ba2477f3d12468f5ec251ce1cc5f8c6210c/app/models/tag_feed.rb#L4\nconst TAGS_LIMIT_PER_MODE = 4;\nconst TOTAL_TAGS_LIMIT = TAGS_LIMIT_PER_MODE + 1;\n\nfunction Hashtags({ media: mediaView, columnMode, ...props }) {\n  // const navigate = useNavigate();\n  let { hashtag, ...params } = columnMode ? {} : useParams();\n  if (props.hashtag) hashtag = props.hashtag;\n  let hashtags = hashtag.trim().split(/[\\s+]+/);\n  hashtags.sort();\n  hashtag = hashtags[0];\n  const [searchParams, setSearchParams] = useSearchParams();\n  const media = mediaView || !!searchParams.get('media');\n  const linkParams = media ? '?media=1' : '';\n\n  const { masto, instance, authenticated } = api({\n    instance: props?.instance || params.instance,\n  });\n  const {\n    masto: currentMasto,\n    instance: currentInstance,\n    authenticated: currentAuthenticated,\n  } = api();\n  const hashtagTitle = hashtags.map((t) => `#${t}`).join(' ');\n  const hashtagPostTitle = media ? ` (Media only)` : '';\n  const title = instance\n    ? `${hashtagTitle}${hashtagPostTitle} on ${instance}`\n    : `${hashtagTitle}${hashtagPostTitle}`;\n  useTitle(title, `/:instance?/t/:hashtag`);\n  const latestItem = useRef();\n\n  // const hashtagsIterator = useRef();\n  const maxID = useRef(undefined);\n  async function fetchHashtags(firstLoad) {\n    // if (firstLoad || !hashtagsIterator.current) {\n    //   hashtagsIterator.current = masto.v1.timelines.tag.$select(hashtag).list({\n    //     limit: LIMIT,\n    //     any: hashtags.slice(1),\n    //   });\n    // }\n    // const results = await hashtagsIterator.current.next();\n\n    // NOTE: Temporary fix for listHashtag not persisting `any` in subsequent calls.\n    const results = await masto.v1.timelines.tag\n      .$select(hashtag)\n      .list({\n        limit: LIMIT,\n        any: hashtags.slice(1),\n        maxId: firstLoad ? undefined : maxID.current,\n        onlyMedia: media,\n      })\n      .next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      // value = filteredItems(value, 'public');\n      value.forEach((item) => {\n        saveStatus(item, instance, {\n          skipThreading: media, // If media view, no need to form threads\n        });\n      });\n\n      maxID.current = value[value.length - 1].id;\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines.tag\n        .$select(hashtag)\n        .list({\n          limit: 1,\n          any: hashtags.slice(1),\n          since_id: latestItem.current,\n          onlyMedia: media,\n        })\n        .next();\n      let { value } = results;\n      value = filteredItems(value, 'public');\n      if (value?.length) {\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  const [followUIState, setFollowUIState] = useState('default');\n  const [info, setInfo] = useState();\n  // Get hashtag info\n  useEffect(() => {\n    (async () => {\n      try {\n        const info = await masto.v1.tags.$select(hashtag).fetch();\n        console.log(info);\n        setInfo(info);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [hashtag]);\n\n  const reachLimit = hashtags.length >= TOTAL_TAGS_LIMIT;\n\n  return (\n    <Timeline\n      key={instance + hashtagTitle}\n      title={title}\n      titleComponent={\n        !!instance && (\n          <h1 class=\"header-double-lines\">\n            <b>{hashtagTitle}</b>\n            <div>{instance}</div>\n          </h1>\n        )\n      }\n      id=\"hashtag\"\n      instance={instance}\n      emptyText=\"No one has posted anything with this tag yet.\"\n      errorText=\"Unable to load posts with this tag\"\n      fetchItems={fetchHashtags}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      view={media ? 'media' : undefined}\n      refresh={media}\n      // allowFilters\n      filterContext=\"public\"\n      headerEnd={\n        <Menu2\n          portal\n          setDownOverflow\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          {!!info && hashtags.length === 1 && (\n            <>\n              <MenuConfirm\n                subMenu\n                confirm={info.following}\n                confirmLabel={`Unfollow #${hashtag}?`}\n                disabled={followUIState === 'loading' || !authenticated}\n                onClick={() => {\n                  setFollowUIState('loading');\n                  if (info.following) {\n                    // const yes = confirm(`Unfollow #${hashtag}?`);\n                    // if (!yes) {\n                    //   setFollowUIState('default');\n                    //   return;\n                    // }\n                    masto.v1.tags\n                      .$select(hashtag)\n                      .unfollow()\n                      .then(() => {\n                        setInfo({ ...info, following: false });\n                        showToast(`Unfollowed #${hashtag}`);\n                      })\n                      .catch((e) => {\n                        alert(e);\n                        console.error(e);\n                      })\n                      .finally(() => {\n                        setFollowUIState('default');\n                      });\n                  } else {\n                    masto.v1.tags\n                      .$select(hashtag)\n                      .follow()\n                      .then(() => {\n                        setInfo({ ...info, following: true });\n                        showToast(`Followed #${hashtag}`);\n                      })\n                      .catch((e) => {\n                        alert(e);\n                        console.error(e);\n                      })\n                      .finally(() => {\n                        setFollowUIState('default');\n                      });\n                  }\n                }}\n              >\n                {info.following ? (\n                  <>\n                    <Icon icon=\"check-circle\" /> <span>Following…</span>\n                  </>\n                ) : (\n                  <>\n                    <Icon icon=\"plus\" /> <span>Follow</span>\n                  </>\n                )}\n              </MenuConfirm>\n              <MenuDivider />\n            </>\n          )}\n          <MenuHeader className=\"plain\">Filters</MenuHeader>\n          <MenuItem\n            type=\"checkbox\"\n            checked={!!media}\n            onClick={() => {\n              if (media) {\n                searchParams.delete('media');\n              } else {\n                searchParams.set('media', '1');\n              }\n              setSearchParams(searchParams);\n            }}\n          >\n            <Icon icon=\"check-circle\" />{' '}\n            <span class=\"menu-grow\">Media only</span>\n          </MenuItem>\n          <MenuDivider />\n          <FocusableItem className=\"menu-field\" disabled={reachLimit}>\n            {({ ref }) => (\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  const newHashtag = e.target[0].value?.trim?.();\n                  // Use includes but need to be case insensitive\n                  if (\n                    newHashtag &&\n                    !hashtags.some(\n                      (t) => t.toLowerCase() === newHashtag.toLowerCase(),\n                    )\n                  ) {\n                    hashtags.push(newHashtag);\n                    hashtags.sort();\n                    // navigate(\n                    //   instance\n                    //     ? `/${instance}/t/${hashtags.join('+')}`\n                    //     : `/t/${hashtags.join('+')}`,\n                    // );\n                    location.hash = instance\n                      ? `/${instance}/t/${hashtags.join('+')}`\n                      : `/t/${hashtags.join('+')}${linkParams}`;\n                  }\n                }}\n              >\n                <Icon icon=\"hashtag\" />\n                <input\n                  ref={ref}\n                  type=\"text\"\n                  placeholder={\n                    reachLimit ? `Max ${TOTAL_TAGS_LIMIT} tags` : 'Add hashtag'\n                  }\n                  required\n                  autocorrect=\"off\"\n                  autocapitalize=\"off\"\n                  spellcheck={false}\n                  // no spaces, no hashtags\n                  pattern=\"[^#][^\\s#]+[^#]\"\n                  disabled={reachLimit}\n                />\n              </form>\n            )}\n          </FocusableItem>\n          <MenuGroup takeOverflow>\n            {hashtags.map((t, i) => (\n              <MenuItem\n                key={t}\n                disabled={hashtags.length === 1}\n                onClick={(e) => {\n                  hashtags.splice(i, 1);\n                  hashtags.sort();\n                  // navigate(\n                  //   instance\n                  //     ? `/${instance}/t/${hashtags.join('+')}`\n                  //     : `/t/${hashtags.join('+')}`,\n                  // );\n                  location.hash = instance\n                    ? `/${instance}/t/${hashtags.join('+')}${linkParams}`\n                    : `/t/${hashtags.join('+')}${linkParams}`;\n                }}\n              >\n                <Icon icon=\"x\" alt=\"Remove hashtag\" class=\"danger-icon\" />\n                <span>\n                  <span class=\"more-insignificant\">#</span>\n                  {t}\n                </span>\n              </MenuItem>\n            ))}\n          </MenuGroup>\n          <MenuDivider />\n          <MenuItem\n            disabled={!currentAuthenticated}\n            onClick={() => {\n              if (states.shortcuts.length >= SHORTCUTS_LIMIT) {\n                alert(\n                  `Max ${SHORTCUTS_LIMIT} shortcuts reached. Unable to add shortcut.`,\n                );\n                return;\n              }\n              const shortcut = {\n                type: 'hashtag',\n                hashtag: hashtags.join(' '),\n                instance,\n                media: media ? 'on' : undefined,\n              };\n              // Check if already exists\n              const exists = states.shortcuts.some(\n                (s) =>\n                  s.type === shortcut.type &&\n                  s.hashtag\n                    .split(/[\\s+]+/)\n                    .sort()\n                    .join(' ') ===\n                    shortcut.hashtag\n                      .split(/[\\s+]+/)\n                      .sort()\n                      .join(' ') &&\n                  (s.instance ? s.instance === shortcut.instance : true) &&\n                  (s.media ? !!s.media === !!shortcut.media : true),\n              );\n              if (exists) {\n                alert('This shortcut already exists');\n              } else {\n                states.shortcuts.push(shortcut);\n                showToast(`Hashtag shortcut added`);\n              }\n            }}\n          >\n            <Icon icon=\"shortcut\" /> <span>Add to Shorcuts</span>\n          </MenuItem>\n          <MenuItem\n            onClick={() => {\n              let newInstance = prompt(\n                'Enter a new instance e.g. \"mastodon.social\"',\n              );\n              if (!/\\./.test(newInstance)) {\n                if (newInstance) alert('Invalid instance');\n                return;\n              }\n              if (newInstance) {\n                newInstance = newInstance.toLowerCase().trim();\n                // navigate(`/${newInstance}/t/${hashtags.join('+')}`);\n                location.hash = `/${newInstance}/t/${hashtags.join(\n                  '+',\n                )}${linkParams}`;\n              }\n            }}\n          >\n            <Icon icon=\"bus\" /> <span>Go to another instance…</span>\n          </MenuItem>\n          {currentInstance !== instance && (\n            <MenuItem\n              onClick={() => {\n                location.hash = `/${currentInstance}/t/${hashtags.join(\n                  '+',\n                )}${linkParams}`;\n              }}\n            >\n              <Icon icon=\"bus\" />{' '}\n              <small class=\"menu-double-lines\">\n                Go to my instance (<b>{currentInstance}</b>)\n              </small>\n            </MenuItem>\n          )}\n        </Menu2>\n      }\n    />\n  );\n}\n\nexport default Hashtags;\n","import './lists.css';\n\nimport { Menu, MenuItem } from '@szhsin/react-menu';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { InView } from 'react-intersection-observer';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport AccountBlock from '../components/account-block';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport ListAddEdit from '../components/list-add-edit';\nimport Menu2 from '../components/menu2';\nimport MenuConfirm from '../components/menu-confirm';\nimport Modal from '../components/modal';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { filteredItems } from '../utils/filters';\nimport states, { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction List(props) {\n  const snapStates = useSnapshot(states);\n  const { masto, instance } = api();\n  const id = props?.id || useParams()?.id;\n  // const navigate = useNavigate();\n  const latestItem = useRef();\n  // const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n\n  const listIterator = useRef();\n  async function fetchList(firstLoad) {\n    if (firstLoad || !listIterator.current) {\n      listIterator.current = masto.v1.timelines.list.$select(id).list({\n        limit: LIMIT,\n      });\n    }\n    const results = await listIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      // value = filteredItems(value, 'home');\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines.list.$select(id).list({\n        limit: 1,\n        since_id: latestItem.current,\n      });\n      let { value } = results;\n      value = filteredItems(value, 'home');\n      if (value?.length) {\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  const [list, setList] = useState({ title: 'List' });\n  // const [title, setTitle] = useState(`List`);\n  useTitle(list.title, `/l/:id`);\n  useEffect(() => {\n    (async () => {\n      try {\n        const list = await masto.v1.lists.$select(id).fetch();\n        setList(list);\n        // setTitle(list.title);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [id]);\n\n  const [showListAddEditModal, setShowListAddEditModal] = useState(false);\n  const [showManageMembersModal, setShowManageMembersModal] = useState(false);\n\n  return (\n    <>\n      <Timeline\n        key={id}\n        title={list.title}\n        id=\"list\"\n        emptyText=\"Nothing yet.\"\n        errorText=\"Unable to load posts.\"\n        instance={instance}\n        fetchItems={fetchList}\n        checkForUpdates={checkForUpdates}\n        useItemID\n        boostsCarousel={snapStates.settings.boostsCarousel}\n        // allowFilters\n        filterContext=\"home\"\n        // refresh={reloadCount}\n        headerStart={\n          <Link to=\"/l\" class=\"button plain\">\n            <Icon icon=\"list\" size=\"l\" />\n          </Link>\n        }\n        headerEnd={\n          <Menu2\n            portal\n            setDownOverflow\n            overflow=\"auto\"\n            viewScroll=\"close\"\n            position=\"anchor\"\n            menuButton={\n              <button type=\"button\" class=\"plain\">\n                <Icon icon=\"more\" size=\"l\" />\n              </button>\n            }\n          >\n            <MenuItem\n              onClick={() =>\n                setShowListAddEditModal({\n                  list,\n                })\n              }\n            >\n              <Icon icon=\"pencil\" size=\"l\" />\n              <span>Edit</span>\n            </MenuItem>\n            <MenuItem onClick={() => setShowManageMembersModal(true)}>\n              <Icon icon=\"group\" size=\"l\" />\n              <span>Manage members</span>\n            </MenuItem>\n          </Menu2>\n        }\n      />\n      {showListAddEditModal && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowListAddEditModal(false);\n            }\n          }}\n        >\n          <ListAddEdit\n            list={showListAddEditModal?.list}\n            onClose={(result) => {\n              if (result.state === 'success' && result.list) {\n                setList(result.list);\n                // reload();\n              } else if (result.state === 'deleted') {\n                // navigate('/l');\n                location.hash = '/l';\n              }\n              setShowListAddEditModal(false);\n            }}\n          />\n        </Modal>\n      )}\n      {showManageMembersModal && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowManageMembersModal(false);\n            }\n          }}\n        >\n          <ListManageMembers\n            listID={id}\n            onClose={() => setShowManageMembersModal(false)}\n          />\n        </Modal>\n      )}\n    </>\n  );\n}\n\nconst MEMBERS_LIMIT = 40;\nfunction ListManageMembers({ listID, onClose }) {\n  // Show list of members with [Remove] button\n  // API only returns 40 members at a time, so this need to be paginated with infinite scroll\n  // Show [Add] button after removing a member\n  const { masto, instance } = api();\n  const [members, setMembers] = useState([]);\n  const [uiState, setUIState] = useState('default');\n  const [showMore, setShowMore] = useState(false);\n\n  const membersIterator = useRef();\n\n  async function fetchMembers(firstLoad) {\n    setShowMore(false);\n    setUIState('loading');\n    (async () => {\n      try {\n        if (firstLoad || !membersIterator.current) {\n          membersIterator.current = masto.v1.lists\n            .$select(listID)\n            .accounts.list({\n              limit: MEMBERS_LIMIT,\n            });\n        }\n        const results = await membersIterator.current.next();\n        let { done, value } = results;\n        if (value?.length) {\n          if (firstLoad) {\n            setMembers(value);\n          } else {\n            setMembers(members.concat(value));\n          }\n          setShowMore(!done);\n        } else {\n          setShowMore(false);\n        }\n        setUIState('default');\n      } catch (e) {\n        setUIState('error');\n      }\n    })();\n  }\n\n  useEffect(() => {\n    fetchMembers(true);\n  }, []);\n\n  return (\n    <div class=\"sheet\" id=\"list-manage-members-container\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Manage members</h2>\n      </header>\n      <main>\n        <ul>\n          {members.map((member) => (\n            <li key={member.id}>\n              <AccountBlock account={member} instance={instance} />\n              <RemoveAddButton account={member} listID={listID} />\n            </li>\n          ))}\n          {showMore && uiState === 'default' && (\n            <InView as=\"li\" onChange={(inView) => inView && fetchMembers()}>\n              <button type=\"button\" class=\"light block\" onClick={fetchMembers}>\n                Show more&hellip;\n              </button>\n            </InView>\n          )}\n        </ul>\n      </main>\n    </div>\n  );\n}\n\nfunction RemoveAddButton({ account, listID }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [removed, setRemoved] = useState(false);\n\n  return (\n    <MenuConfirm\n      confirm={!removed}\n      confirmLabel={<span>Remove @{account.username} from list?</span>}\n      align=\"end\"\n      menuItemClassName=\"danger\"\n      onClick={() => {\n        if (removed) {\n          setUIState('loading');\n          (async () => {\n            try {\n              await masto.v1.lists.$select(listID).accounts.create({\n                accountIds: [account.id],\n              });\n              setUIState('default');\n              setRemoved(false);\n            } catch (e) {\n              setUIState('error');\n            }\n          })();\n        } else {\n          // const yes = confirm(`Remove ${account.username} from this list?`);\n          // if (!yes) return;\n          setUIState('loading');\n\n          (async () => {\n            try {\n              await masto.v1.lists.$select(listID).accounts.remove({\n                accountIds: [account.id],\n              });\n              setUIState('default');\n              setRemoved(true);\n            } catch (e) {\n              setUIState('error');\n            }\n          })();\n        }\n      }}\n    >\n      <button\n        type=\"button\"\n        class={`light ${removed ? '' : 'danger'}`}\n        disabled={uiState === 'loading'}\n      >\n        {removed ? 'Add' : 'Remove…'}\n      </button>\n    </MenuConfirm>\n  );\n}\n\nexport default List;\n","import { useMemo, useRef, useState } from 'preact/hooks';\nimport { useSearchParams } from 'react-router-dom';\n\nimport Link from '../components/link';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\nconst emptySearchParams = new URLSearchParams();\n\nfunction Mentions({ columnMode, ...props }) {\n  const { masto, instance } = api();\n  const [searchParams] = columnMode ? [emptySearchParams] : useSearchParams();\n  const [stateType, setStateType] = useState(null);\n  const type = props?.type || searchParams.get('type') || stateType;\n  useTitle(`Mentions${type === 'private' ? ' (Private)' : ''}`, '/mentions');\n\n  const mentionsIterator = useRef();\n  const latestItem = useRef();\n\n  async function fetchMentions(firstLoad) {\n    if (firstLoad || !mentionsIterator.current) {\n      mentionsIterator.current = masto.v1.notifications.list({\n        limit: LIMIT,\n        types: ['mention'],\n      });\n    }\n    const results = await mentionsIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n        console.log('First load', latestItem.current);\n      }\n\n      value.forEach(({ status: item }) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value: value?.map((item) => item.status),\n    };\n  }\n\n  const conversationsIterator = useRef();\n  const latestConversationItem = useRef();\n  async function fetchConversations(firstLoad) {\n    if (firstLoad || !conversationsIterator.current) {\n      conversationsIterator.current = masto.v1.conversations.list({\n        limit: LIMIT,\n      });\n    }\n    const results = await conversationsIterator.current.next();\n    let { value } = results;\n    value = value?.filter((item) => item.lastStatus);\n    if (value?.length) {\n      if (firstLoad) {\n        latestConversationItem.current = value[0].lastStatus.id;\n        console.log('First load', latestConversationItem.current);\n      }\n\n      value.forEach(({ lastStatus: item }) => {\n        saveStatus(item, instance);\n      });\n    }\n    console.log('results', results);\n    return {\n      ...results,\n      value: value?.map((item) => item.lastStatus),\n    };\n  }\n\n  function fetchItems(...args) {\n    if (type === 'private') {\n      return fetchConversations(...args);\n    }\n    return fetchMentions(...args);\n  }\n\n  async function checkForUpdates() {\n    if (type === 'private') {\n      try {\n        const results = await masto.v1.conversations\n          .list({\n            limit: 1,\n            since_id: latestConversationItem.current,\n          })\n          .next();\n        let { value } = results;\n        console.log(\n          'checkForUpdates PRIVATE',\n          latestConversationItem.current,\n          value,\n        );\n        if (value?.length) {\n          latestConversationItem.current = value[0].lastStatus.id;\n          return true;\n        }\n        return false;\n      } catch (e) {\n        return false;\n      }\n    } else {\n      try {\n        const results = await masto.v1.notifications\n          .list({\n            limit: 1,\n            types: ['mention'],\n            since_id: latestItem.current,\n          })\n          .next();\n        let { value } = results;\n        console.log('checkForUpdates ALL', latestItem.current, value);\n        if (value?.length) {\n          latestItem.current = value[0].id;\n          return true;\n        }\n        return false;\n      } catch (e) {\n        return false;\n      }\n    }\n  }\n\n  const TimelineStart = useMemo(() => {\n    return (\n      <div class=\"filter-bar centered\">\n        <Link\n          to=\"/mentions\"\n          class={!type ? 'is-active' : ''}\n          onClick={(e) => {\n            if (columnMode) {\n              e.preventDefault();\n              setStateType(null);\n            }\n          }}\n        >\n          All\n        </Link>\n        <Link\n          to=\"/mentions?type=private\"\n          class={type === 'private' ? 'is-active' : ''}\n          onClick={(e) => {\n            if (columnMode) {\n              e.preventDefault();\n              setStateType('private');\n            }\n          }}\n        >\n          Private\n        </Link>\n      </div>\n    );\n  }, [type]);\n\n  return (\n    <Timeline\n      title=\"Mentions\"\n      id=\"mentions\"\n      emptyText=\"No one mentioned you :(\"\n      errorText=\"Unable to load mentions.\"\n      instance={instance}\n      fetchItems={fetchItems}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      timelineStart={TimelineStart}\n      refresh={type}\n    />\n  );\n}\n\nexport default Mentions;\n","// This is like very lame \"type-checking\" lol\nconst notificationTypeKeys = {\n  mention: ['account', 'status'],\n  status: ['account', 'status'],\n  reblog: ['account', 'status'],\n  follow: ['account'],\n  follow_request: ['account'],\n  favourite: ['account', 'status'],\n  poll: ['status'],\n  update: ['status'],\n};\nfunction fixNotifications(notifications) {\n  return notifications.filter((notification) => {\n    const { type, id, createdAt } = notification;\n    if (!type) {\n      console.warn('Notification missing type', notification);\n      return false;\n    }\n    if (!id || !createdAt) {\n      console.warn('Notification missing id or createdAt', notification);\n      // Continue processing this despite missing id or createdAt\n    }\n    const keys = notificationTypeKeys[type];\n    if (keys?.length) {\n      return keys.every((key) => !!notification[key]);\n    }\n    return true; // skip other types\n  });\n}\n\nfunction groupNotifications(notifications) {\n  // Filter out invalid notifications\n  notifications = fixNotifications(notifications);\n\n  // Create new flat list of notifications\n  // Combine sibling notifications based on type and status id\n  // Concat all notification.account into an array of _accounts\n  const notificationsMap = {};\n  const cleanNotifications = [];\n  for (let i = 0, j = 0; i < notifications.length; i++) {\n    const notification = notifications[i];\n    const { id, status, account, type, createdAt } = notification;\n    const date = createdAt ? new Date(createdAt).toLocaleDateString() : '';\n    let virtualType = type;\n    if (type === 'favourite' || type === 'reblog') {\n      virtualType = 'favourite+reblog';\n    }\n    const key = `${status?.id}-${virtualType}-${date}`;\n    const mappedNotification = notificationsMap[key];\n    if (virtualType === 'follow_request') {\n      cleanNotifications[j++] = notification;\n    } else if (mappedNotification?.account) {\n      const mappedAccount = mappedNotification._accounts.find(\n        (a) => a.id === account.id,\n      );\n      if (mappedAccount) {\n        mappedAccount._types.push(type);\n        mappedAccount._types.sort().reverse();\n        mappedNotification.id += `-${id}`;\n      } else {\n        account._types = [type];\n        mappedNotification._accounts.push(account);\n        mappedNotification.id += `-${id}`;\n      }\n    } else {\n      account._types = [type];\n      let n = (notificationsMap[key] = {\n        ...notification,\n        type: virtualType,\n        _accounts: [account],\n      });\n      cleanNotifications[j++] = n;\n    }\n  }\n\n  // 2nd pass to group \"favourite+reblog\"-type notifications by account if _accounts.length <= 1\n  // This means one acount has favourited and reblogged the multiple statuses\n  // The grouped notification\n  // - type: \"favourite+reblog+account\"\n  // - _statuses: [status, status, ...]\n  const notificationsMap2 = {};\n  const cleanNotifications2 = [];\n  for (let i = 0, j = 0; i < cleanNotifications.length; i++) {\n    const notification = cleanNotifications[i];\n    const { id, account, _accounts, type, createdAt } = notification;\n    const date = createdAt ? new Date(createdAt).toLocaleDateString() : '';\n    if (type === 'favourite+reblog' && account && _accounts.length === 1) {\n      const key = `${account?.id}-${type}-${date}`;\n      const mappedNotification = notificationsMap2[key];\n      if (mappedNotification) {\n        mappedNotification._statuses.push(notification.status);\n        mappedNotification.id += `-${id}`;\n      } else {\n        let n = (notificationsMap2[key] = {\n          ...notification,\n          type,\n          _statuses: [notification.status],\n        });\n        cleanNotifications2[j++] = n;\n      }\n    } else {\n      cleanNotifications2[j++] = notification;\n    }\n  }\n\n  console.log({ notifications, cleanNotifications, cleanNotifications2 });\n\n  // return cleanNotifications;\n  return cleanNotifications2;\n}\n\nexport default groupNotifications;\n","import './notifications.css';\n\nimport { Fragment } from 'preact';\nimport { memo } from 'preact/compat';\nimport { useCallback, useEffect, useRef, useState } from 'preact/hooks';\nimport { InView } from 'react-intersection-observer';\nimport { useSearchParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\nimport { subscribeKey } from 'valtio/utils';\n\nimport AccountBlock from '../components/account-block';\nimport FollowRequestButtons from '../components/follow-request-buttons';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport NavMenu from '../components/nav-menu';\nimport Notification from '../components/notification';\nimport { api } from '../utils/api';\nimport enhanceContent from '../utils/enhance-content';\nimport groupNotifications from '../utils/group-notifications';\nimport handleContentLinks from '../utils/handle-content-links';\nimport niceDateTime from '../utils/nice-date-time';\nimport { getRegistration } from '../utils/push-notifications';\nimport shortenNumber from '../utils/shorten-number';\nimport states, { saveStatus } from '../utils/states';\nimport { getCurrentInstance } from '../utils/store-utils';\nimport usePageVisibility from '../utils/usePageVisibility';\nimport useScroll from '../utils/useScroll';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 30; // 30 is the maximum limit :(\nconst emptySearchParams = new URLSearchParams();\n\nfunction Notifications({ columnMode }) {\n  useTitle('Notifications', '/notifications');\n  const { masto, instance } = api();\n  const snapStates = useSnapshot(states);\n  const [uiState, setUIState] = useState('default');\n  const [searchParams] = columnMode ? [emptySearchParams] : useSearchParams();\n  const notificationID = searchParams.get('id');\n  const notificationAccessToken = searchParams.get('access_token');\n  const [showMore, setShowMore] = useState(false);\n  const [onlyMentions, setOnlyMentions] = useState(false);\n  const scrollableRef = useRef();\n  const { nearReachEnd, scrollDirection, reachStart, nearReachStart } =\n    useScroll({\n      scrollableRef,\n    });\n  const hiddenUI = scrollDirection === 'end' && !nearReachStart;\n  const [followRequests, setFollowRequests] = useState([]);\n  const [announcements, setAnnouncements] = useState([]);\n\n  console.debug('RENDER Notifications');\n\n  const notificationsIterator = useRef();\n  async function fetchNotifications(firstLoad) {\n    if (firstLoad || !notificationsIterator.current) {\n      // Reset iterator\n      notificationsIterator.current = masto.v1.notifications.list({\n        limit: LIMIT,\n        excludeTypes: ['follow_request'],\n      });\n    }\n    const allNotifications = await notificationsIterator.current.next();\n    const notifications = allNotifications.value;\n\n    if (notifications?.length) {\n      notifications.forEach((notification) => {\n        saveStatus(notification.status, instance, {\n          skipThreading: true,\n        });\n      });\n\n      const groupedNotifications = groupNotifications(notifications);\n\n      if (firstLoad) {\n        states.notificationsLast = notifications[0];\n        states.notifications = groupedNotifications;\n\n        // Update last read marker\n        masto.v1.markers\n          .create({\n            notifications: {\n              lastReadId: notifications[0].id,\n            },\n          })\n          .catch(() => {});\n      } else {\n        states.notifications.push(...groupedNotifications);\n      }\n    }\n\n    states.notificationsShowNew = false;\n    states.notificationsLastFetchTime = Date.now();\n    return allNotifications;\n  }\n\n  async function fetchFollowRequests() {\n    // Note: no pagination here yet because this better be on a separate page. Should be rare use-case???\n    try {\n      return await masto.v1.followRequests.list({\n        limit: 80,\n      });\n    } catch (e) {\n      // Silently fail\n      return [];\n    }\n  }\n\n  const loadFollowRequests = () => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const requests = await fetchFollowRequests();\n        setFollowRequests(requests);\n        setUIState('default');\n      } catch (e) {\n        setUIState('error');\n      }\n    })();\n  };\n\n  async function fetchAnnouncements() {\n    try {\n      return await masto.v1.announcements.list();\n    } catch (e) {\n      // Silently fail\n      return [];\n    }\n  }\n\n  const loadNotifications = (firstLoad) => {\n    setShowNew(false);\n    setUIState('loading');\n    (async () => {\n      try {\n        const fetchNotificationsPromise = fetchNotifications(firstLoad);\n\n        if (firstLoad) {\n          fetchAnnouncements()\n            .then((announcements) => {\n              announcements.sort((a, b) => {\n                // Sort by updatedAt first, then createdAt\n                const aDate = new Date(a.updatedAt || a.createdAt);\n                const bDate = new Date(b.updatedAt || b.createdAt);\n                return bDate - aDate;\n              });\n              setAnnouncements(announcements);\n            })\n            .catch(() => {});\n\n          fetchFollowRequests()\n            .then((requests) => {\n              setFollowRequests(requests);\n            })\n            .catch(() => {});\n        }\n\n        const { done } = await fetchNotificationsPromise;\n        setShowMore(!done);\n\n        setUIState('default');\n      } catch (e) {\n        setUIState('error');\n      }\n    })();\n  };\n\n  useEffect(() => {\n    loadNotifications(true);\n  }, []);\n  useEffect(() => {\n    if (reachStart) {\n      loadNotifications(true);\n    }\n  }, [reachStart]);\n\n  // useEffect(() => {\n  //   if (nearReachEnd && showMore) {\n  //     loadNotifications();\n  //   }\n  // }, [nearReachEnd, showMore]);\n\n  const [showNew, setShowNew] = useState(false);\n\n  const loadUpdates = useCallback(\n    ({ disableIdleCheck = false } = {}) => {\n      if (uiState === 'loading') {\n        return;\n      }\n      console.log('✨ Load updates', {\n        autoRefresh: snapStates.settings.autoRefresh,\n        scrollTop: scrollableRef.current?.scrollTop,\n        inBackground: inBackground(),\n        disableIdleCheck,\n      });\n      if (\n        snapStates.settings.autoRefresh &&\n        scrollableRef.current?.scrollTop < 16 &&\n        (disableIdleCheck || window.__IDLE__) &&\n        !inBackground()\n      ) {\n        loadNotifications(true);\n      }\n    },\n    [snapStates.notificationsShowNew, snapStates.settings.autoRefresh, uiState],\n  );\n  // useEffect(loadUpdates, [snapStates.notificationsShowNew]);\n\n  const lastHiddenTime = useRef();\n  usePageVisibility((visible) => {\n    let unsub;\n    if (visible) {\n      const timeDiff = Date.now() - lastHiddenTime.current;\n      if (!lastHiddenTime.current || timeDiff > 1000 * 3) {\n        // 3 seconds\n        loadUpdates({\n          disableIdleCheck: true,\n        });\n      } else {\n        lastHiddenTime.current = Date.now();\n      }\n      unsub = subscribeKey(states, 'notificationsShowNew', (v) => {\n        if (v) {\n          loadUpdates();\n        }\n        setShowNew(v);\n      });\n    }\n    return () => {\n      unsub?.();\n    };\n  });\n\n  const todayDate = new Date();\n  const yesterdayDate = new Date(todayDate - 24 * 60 * 60 * 1000);\n  let currentDay = new Date();\n  const showTodayEmpty = !snapStates.notifications.some(\n    (notification) =>\n      new Date(notification.createdAt).toDateString() ===\n      todayDate.toDateString(),\n  );\n\n  const announcementsListRef = useRef();\n\n  useEffect(() => {\n    if (notificationID) {\n      states.routeNotification = {\n        id: notificationID,\n        accessToken: atob(notificationAccessToken),\n      };\n    }\n  }, [notificationID, notificationAccessToken]);\n\n  // useEffect(() => {\n  //   if (uiState === 'default') {\n  //     (async () => {\n  //       try {\n  //         const registration = await getRegistration();\n  //         if (registration?.getNotifications) {\n  //           const notifications = await registration.getNotifications();\n  //           console.log('🔔 Push notifications', notifications);\n  //           // Close all notifications?\n  //           // notifications.forEach((notification) => {\n  //           //   notification.close();\n  //           // });\n  //         }\n  //       } catch (e) {}\n  //     })();\n  //   }\n  // }, [uiState]);\n\n  return (\n    <div\n      id=\"notifications-page\"\n      class=\"deck-container\"\n      ref={scrollableRef}\n      tabIndex=\"-1\"\n    >\n      <div class={`timeline-deck deck ${onlyMentions ? 'only-mentions' : ''}`}>\n        <header\n          hidden={hiddenUI}\n          onClick={(e) => {\n            if (!e.target.closest('a, button')) {\n              scrollableRef.current?.scrollTo({ top: 0, behavior: 'smooth' });\n            }\n          }}\n          class={uiState === 'loading' ? 'loading' : ''}\n        >\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n              <Link to=\"/\" class=\"button plain\">\n                <Icon icon=\"home\" size=\"l\" alt=\"Home\" />\n              </Link>\n            </div>\n            <h1>Notifications</h1>\n            <div class=\"header-side\">\n              {/* <Loader hidden={uiState !== 'loading'} /> */}\n            </div>\n          </div>\n          {showNew && uiState !== 'loading' && (\n            <button\n              class=\"updates-button shiny-pill\"\n              type=\"button\"\n              onClick={() => {\n                loadNotifications(true);\n                scrollableRef.current?.scrollTo({\n                  top: 0,\n                  behavior: 'smooth',\n                });\n              }}\n            >\n              <Icon icon=\"arrow-up\" /> New notifications\n            </button>\n          )}\n        </header>\n        {announcements.length > 0 && (\n          <div class=\"shazam-container\">\n            <div class=\"shazam-container-inner\">\n              <details class=\"announcements\">\n                <summary>\n                  <span>\n                    <Icon icon=\"announce\" class=\"announcement-icon\" size=\"l\" />{' '}\n                    <b>Announcement{announcements.length > 1 ? 's' : ''}</b>{' '}\n                    <small class=\"insignificant\">{instance}</small>\n                  </span>\n                  {announcements.length > 1 && (\n                    <span class=\"announcements-nav-buttons\">\n                      {announcements.map((announcement, index) => (\n                        <button\n                          type=\"button\"\n                          class=\"plain2 small\"\n                          onClick={() => {\n                            announcementsListRef.current?.children[\n                              index\n                            ].scrollIntoView({\n                              behavior: 'smooth',\n                              block: 'nearest',\n                            });\n                          }}\n                        >\n                          {index + 1}\n                        </button>\n                      ))}\n                    </span>\n                  )}\n                </summary>\n                <ul\n                  class={`announcements-list-${\n                    announcements.length > 1 ? 'multiple' : 'single'\n                  }`}\n                  ref={announcementsListRef}\n                >\n                  {announcements.map((announcement) => (\n                    <li>\n                      <AnnouncementBlock announcement={announcement} />\n                    </li>\n                  ))}\n                </ul>\n              </details>\n            </div>\n          </div>\n        )}\n        {followRequests.length > 0 && (\n          <div class=\"follow-requests\">\n            <h2 class=\"timeline-header\">Follow requests</h2>\n            {followRequests.length > 5 ? (\n              <details>\n                <summary>{followRequests.length} follow requests</summary>\n                <ul>\n                  {followRequests.map((account) => (\n                    <li key={account.id}>\n                      <AccountBlock account={account} />\n                      <FollowRequestButtons\n                        accountID={account.id}\n                        onChange={() => {\n                          // loadFollowRequests();\n                          // loadNotifications(true);\n                        }}\n                      />\n                    </li>\n                  ))}\n                </ul>\n              </details>\n            ) : (\n              <ul>\n                {followRequests.map((account) => (\n                  <li key={account.id}>\n                    <AccountBlock account={account} />\n                    <FollowRequestButtons\n                      accountID={account.id}\n                      onChange={() => {\n                        // loadFollowRequests();\n                        // loadNotifications(true);\n                      }}\n                    />\n                  </li>\n                ))}\n              </ul>\n            )}\n          </div>\n        )}\n        <div id=\"mentions-option\">\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={onlyMentions}\n              onChange={(e) => {\n                setOnlyMentions(e.target.checked);\n              }}\n            />{' '}\n            Only mentions\n          </label>\n        </div>\n        <h2 class=\"timeline-header\">Today</h2>\n        {showTodayEmpty && !!snapStates.notifications.length && (\n          <p class=\"ui-state insignificant\">\n            {uiState === 'default' ? \"You're all caught up.\" : <>&hellip;</>}\n          </p>\n        )}\n        {snapStates.notifications.length ? (\n          <>\n            {snapStates.notifications\n              // This is leaked from Notifications popover\n              .filter((n) => n.type !== 'follow_request')\n              .map((notification) => {\n                if (onlyMentions && notification.type !== 'mention') {\n                  return null;\n                }\n                const notificationDay = new Date(notification.createdAt);\n                const differentDay =\n                  notificationDay.toDateString() !== currentDay.toDateString();\n                if (differentDay) {\n                  currentDay = notificationDay;\n                }\n                // if notificationDay is yesterday, show \"Yesterday\"\n                // if notificationDay is before yesterday, show date\n                const heading =\n                  notificationDay.toDateString() ===\n                  yesterdayDate.toDateString()\n                    ? 'Yesterday'\n                    : niceDateTime(currentDay, {\n                        hideTime: true,\n                      });\n                return (\n                  <Fragment key={notification.id}>\n                    {differentDay && <h2 class=\"timeline-header\">{heading}</h2>}\n                    <Notification\n                      instance={instance}\n                      notification={notification}\n                      key={notification.id}\n                    />\n                  </Fragment>\n                );\n              })}\n          </>\n        ) : (\n          <>\n            {uiState === 'loading' && (\n              <>\n                <ul class=\"timeline flat\">\n                  {Array.from({ length: 5 }).map((_, i) => (\n                    <li class=\"notification skeleton\">\n                      <div class=\"notification-type\">\n                        <Icon icon=\"notification\" size=\"xl\" />\n                      </div>\n                      <div class=\"notification-content\">\n                        <p>███████████ ████</p>\n                      </div>\n                    </li>\n                  ))}\n                </ul>\n              </>\n            )}\n            {uiState === 'error' && (\n              <p class=\"ui-state\">\n                Unable to load notifications\n                <br />\n                <br />\n                <button type=\"button\" onClick={() => loadNotifications(true)}>\n                  Try again\n                </button>\n              </p>\n            )}\n          </>\n        )}\n        {showMore && (\n          <InView\n            onChange={(inView) => {\n              if (inView) {\n                loadNotifications();\n              }\n            }}\n          >\n            <button\n              type=\"button\"\n              class=\"plain block\"\n              disabled={uiState === 'loading'}\n              onClick={() => loadNotifications()}\n              style={{ marginBlockEnd: '6em' }}\n            >\n              {uiState === 'loading' ? (\n                <Loader abrupt />\n              ) : (\n                <>Show more&hellip;</>\n              )}\n            </button>\n          </InView>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction inBackground() {\n  return !!document.querySelector('.deck-backdrop, #modal-container > *');\n}\n\nfunction AnnouncementBlock({ announcement }) {\n  const { instance } = api();\n  const { contact } = getCurrentInstance();\n  const contactAccount = contact?.account;\n  const {\n    id,\n    content,\n    startsAt,\n    endsAt,\n    published,\n    allDay,\n    publishedAt,\n    updatedAt,\n    read,\n    mentions,\n    statuses,\n    tags,\n    emojis,\n    reactions,\n  } = announcement;\n\n  const publishedAtDate = new Date(publishedAt);\n  const publishedDateText = niceDateTime(publishedAtDate);\n  const updatedAtDate = new Date(updatedAt);\n  const updatedAtText = niceDateTime(updatedAtDate);\n\n  return (\n    <div class=\"announcement-block\">\n      <AccountBlock account={contactAccount} />\n      <div\n        class=\"announcement-content\"\n        onClick={handleContentLinks({ mentions, instance })}\n        dangerouslySetInnerHTML={{\n          __html: enhanceContent(content, {\n            emojis,\n          }),\n        }}\n      />\n      <p class=\"insignificant\">\n        <time datetime={publishedAtDate.toISOString()}>\n          {niceDateTime(publishedAtDate)}\n        </time>\n        {updatedAt && updatedAtText !== publishedDateText && (\n          <>\n            {' '}\n            &bull;{' '}\n            <span class=\"ib\">\n              Updated{' '}\n              <time datetime={updatedAtDate.toISOString()}>\n                {niceDateTime(updatedAtDate)}\n              </time>\n            </span>\n          </>\n        )}\n      </p>\n      <div class=\"announcement-reactions\" hidden>\n        {reactions.map((reaction) => {\n          const { name, count, me, staticUrl, url } = reaction;\n          return (\n            <button type=\"button\" class={`plain4 small ${me ? 'reacted' : ''}`}>\n              {url || staticUrl ? (\n                <img src={url || staticUrl} alt={name} width=\"16\" height=\"16\" />\n              ) : (\n                <span>{name}</span>\n              )}{' '}\n              <span class=\"count\">{shortenNumber(count)}</span>\n            </button>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(Notifications);\n","import { Menu, MenuDivider, MenuItem } from '@szhsin/react-menu';\nimport { useRef } from 'preact/hooks';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport Icon from '../components/icon';\nimport Menu2 from '../components/menu2';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { filteredItems } from '../utils/filters';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Public({ local, columnMode, ...props }) {\n  const snapStates = useSnapshot(states);\n  const isLocal = !!local;\n  const params = columnMode ? {} : useParams();\n  const { masto, instance } = api({\n    instance: props?.instance || params.instance,\n  });\n  const { masto: currentMasto, instance: currentInstance } = api();\n  const title = `${isLocal ? 'Local' : 'Federated'} timeline (${instance})`;\n  useTitle(title, isLocal ? `/:instance?/p/l` : `/:instance?/p`);\n  // const navigate = useNavigate();\n  const latestItem = useRef();\n\n  const publicIterator = useRef();\n  async function fetchPublic(firstLoad) {\n    if (firstLoad || !publicIterator.current) {\n      publicIterator.current = masto.v1.timelines.public.list({\n        limit: LIMIT,\n        local: isLocal,\n      });\n    }\n    const results = await publicIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      // value = filteredItems(value, 'public');\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines.public\n        .list({\n          limit: 1,\n          local: isLocal,\n          since_id: latestItem.current,\n        })\n        .next();\n      let { value } = results;\n      value = filteredItems(value, 'public');\n      if (value?.length) {\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  return (\n    <Timeline\n      key={instance + isLocal}\n      title={title}\n      titleComponent={\n        <h1 class=\"header-double-lines\">\n          <b>{isLocal ? 'Local timeline' : 'Federated timeline'}</b>\n          <div>{instance}</div>\n        </h1>\n      }\n      id=\"public\"\n      instance={instance}\n      emptyText=\"No one has posted anything yet.\"\n      errorText=\"Unable to load posts\"\n      fetchItems={fetchPublic}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      headerStart={<></>}\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      // allowFilters\n      filterContext=\"public\"\n      headerEnd={\n        <Menu2\n          portal\n          // setDownOverflow\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          <MenuItem href={isLocal ? `/#/${instance}/p` : `/#/${instance}/p/l`}>\n            {isLocal ? (\n              <>\n                <Icon icon=\"transfer\" /> <span>Switch to Federated</span>\n              </>\n            ) : (\n              <>\n                <Icon icon=\"transfer\" /> <span>Switch to Local</span>\n              </>\n            )}\n          </MenuItem>\n          <MenuDivider />\n          <MenuItem\n            onClick={() => {\n              let newInstance = prompt(\n                'Enter a new instance e.g. \"mastodon.social\"',\n              );\n              if (!/\\./.test(newInstance)) {\n                if (newInstance) alert('Invalid instance');\n                return;\n              }\n              if (newInstance) {\n                newInstance = newInstance.toLowerCase().trim();\n                // navigate(isLocal ? `/${newInstance}/p/l` : `/${newInstance}/p`);\n                location.hash = isLocal\n                  ? `/${newInstance}/p/l`\n                  : `/${newInstance}/p`;\n              }\n            }}\n          >\n            <Icon icon=\"bus\" /> <span>Go to another instance…</span>\n          </MenuItem>\n          {currentInstance !== instance && (\n            <MenuItem\n              onClick={() => {\n                location.hash = isLocal\n                  ? `/${currentInstance}/p/l`\n                  : `/${currentInstance}/p`;\n              }}\n            >\n              <Icon icon=\"bus\" />{' '}\n              <small class=\"menu-double-lines\">\n                Go to my instance (<b>{currentInstance}</b>)\n              </small>\n            </MenuItem>\n          )}\n        </Menu2>\n      }\n    />\n  );\n}\n\nexport default Public;\n","import './trending.css';\n\nimport { MenuItem } from '@szhsin/react-menu';\nimport { getBlurHashAverageColor } from 'fast-blurhash';\nimport { useMemo, useRef, useState } from 'preact/hooks';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Menu2 from '../components/menu2';\nimport RelativeTime from '../components/relative-time';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { oklab2rgb, rgb2oklab } from '../utils/color-utils';\nimport { filteredItems } from '../utils/filters';\nimport pmem from '../utils/pmem';\nimport shortenNumber from '../utils/shorten-number';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nconst fetchLinks = pmem(\n  (masto) => {\n    return masto.v1.trends.links.list().next();\n  },\n  {\n    // News last much longer\n    maxAge: 10 * 60 * 1000, // 10 minutes\n  },\n);\n\nfunction Trending({ columnMode, ...props }) {\n  const snapStates = useSnapshot(states);\n  const params = columnMode ? {} : useParams();\n  const { masto, instance } = api({\n    instance: props?.instance || params.instance,\n  });\n  const { masto: currentMasto, instance: currentInstance } = api();\n  const title = `Trending (${instance})`;\n  useTitle(title, `/:instance?/trending`);\n  // const navigate = useNavigate();\n  const latestItem = useRef();\n\n  const [hashtags, setHashtags] = useState([]);\n  const [links, setLinks] = useState([]);\n  const trendIterator = useRef();\n  async function fetchTrend(firstLoad) {\n    if (firstLoad || !trendIterator.current) {\n      trendIterator.current = masto.v1.trends.statuses.list({\n        limit: LIMIT,\n      });\n\n      // Get hashtags\n      try {\n        const iterator = masto.v1.trends.tags.list();\n        const { value: tags } = await iterator.next();\n        console.log('tags', tags);\n        if (tags?.length) {\n          setHashtags(tags);\n        }\n      } catch (e) {\n        console.error(e);\n      }\n\n      // Get links\n      try {\n        const { value } = await fetchLinks(masto);\n        // 4 types available: link, photo, video, rich\n        // Only want links for now\n        const links = value?.filter?.((link) => link.type === 'link');\n        console.log('links', links);\n        if (links?.length) {\n          setLinks(links);\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    }\n    const results = await trendIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      // value = filteredItems(value, 'public'); // Might not work here\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.trends.statuses\n        .list({\n          limit: 1,\n          // NOT SUPPORTED\n          // since_id: latestItem.current,\n        })\n        .next();\n      let { value } = results;\n      value = filteredItems(value, 'public');\n      if (value?.length && value[0].id !== latestItem.current) {\n        latestItem.current = value[0].id;\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  const TimelineStart = useMemo(() => {\n    return (\n      <>\n        {!!hashtags.length && (\n          <div class=\"filter-bar expandable\">\n            <Icon icon=\"chart\" class=\"insignificant\" size=\"l\" />\n            {hashtags.map((tag, i) => {\n              const { name, history } = tag;\n              const total = history.reduce((acc, cur) => acc + +cur.uses, 0);\n              return (\n                <Link to={`/${instance}/t/${name}`} key={name}>\n                  <span>\n                    <span class=\"more-insignificant\">#</span>\n                    {name}\n                  </span>\n                  <span class=\"filter-count\">{shortenNumber(total)}</span>\n                </Link>\n              );\n            })}\n          </div>\n        )}\n        {!!links.length && (\n          <div class=\"links-bar\">\n            <header>\n              <h3>Trending News</h3>\n            </header>\n            {links.map((link) => {\n              const {\n                authorName,\n                authorUrl,\n                blurhash,\n                description,\n                height,\n                image,\n                imageDescription,\n                language,\n                providerName,\n                providerUrl,\n                publishedAt,\n                title,\n                url,\n                width,\n              } = link;\n              const domain = new URL(url).hostname\n                .replace(/^www\\./, '')\n                .replace(/\\/$/, '');\n              let accentColor;\n              if (blurhash) {\n                const averageColor = getBlurHashAverageColor(blurhash);\n                const labAverageColor = rgb2oklab(averageColor);\n                accentColor = oklab2rgb([\n                  0.6,\n                  labAverageColor[1],\n                  labAverageColor[2],\n                ]);\n              }\n\n              return (\n                <a\n                  key={url}\n                  href={url}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  style={\n                    accentColor\n                      ? {\n                          '--accent-color': `rgb(${accentColor.join(',')})`,\n                          '--accent-alpha-color': `rgba(${accentColor.join(\n                            ',',\n                          )}, 0.4)`,\n                        }\n                      : {}\n                  }\n                >\n                  <article>\n                    <figure>\n                      <img\n                        src={image}\n                        alt={imageDescription}\n                        width={width}\n                        height={height}\n                        loading=\"lazy\"\n                      />\n                    </figure>\n                    <div class=\"article-body\">\n                      <header>\n                        <div class=\"article-meta\">\n                          <span class=\"domain\">{domain}</span>{' '}\n                          {!!publishedAt && <>&middot; </>}\n                          {!!publishedAt && (\n                            <>\n                              <RelativeTime\n                                datetime={publishedAt}\n                                format=\"micro\"\n                              />\n                            </>\n                          )}\n                        </div>\n                        {!!title && (\n                          <h1 class=\"title\" lang={language} dir=\"auto\">\n                            {title}\n                          </h1>\n                        )}\n                      </header>\n                      {!!description && (\n                        <p class=\"description\" lang={language} dir=\"auto\">\n                          {description}\n                        </p>\n                      )}\n                    </div>\n                  </article>\n                </a>\n              );\n            })}\n          </div>\n        )}\n      </>\n    );\n  }, [hashtags, links]);\n\n  return (\n    <Timeline\n      key={instance}\n      title={title}\n      titleComponent={\n        <h1 class=\"header-double-lines\">\n          <b>Trending</b>\n          <div>{instance}</div>\n        </h1>\n      }\n      id=\"trending\"\n      instance={instance}\n      emptyText=\"No trending posts.\"\n      errorText=\"Unable to load posts\"\n      fetchItems={fetchTrend}\n      checkForUpdates={checkForUpdates}\n      checkForUpdatesInterval={5 * 60 * 1000} // 5 minutes\n      useItemID\n      headerStart={<></>}\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      // allowFilters\n      filterContext=\"public\"\n      timelineStart={TimelineStart}\n      headerEnd={\n        <Menu2\n          portal\n          // setDownOverflow\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          <MenuItem\n            onClick={() => {\n              let newInstance = prompt(\n                'Enter a new instance e.g. \"mastodon.social\"',\n              );\n              if (!/\\./.test(newInstance)) {\n                if (newInstance) alert('Invalid instance');\n                return;\n              }\n              if (newInstance) {\n                newInstance = newInstance.toLowerCase().trim();\n                // navigate(`/${newInstance}/trending`);\n                location.hash = `/${newInstance}/trending`;\n              }\n            }}\n          >\n            <Icon icon=\"bus\" /> <span>Go to another instance…</span>\n          </MenuItem>\n          {currentInstance !== instance && (\n            <MenuItem\n              onClick={() => {\n                location.hash = `/${currentInstance}/trending`;\n              }}\n            >\n              <Icon icon=\"bus\" />{' '}\n              <small class=\"menu-double-lines\">\n                Go to my instance (<b>{currentInstance}</b>)\n              </small>\n            </MenuItem>\n          )}\n        </Menu2>\n      }\n    />\n  );\n}\n\nexport default Trending;\n","import { useHotkeys } from 'react-hotkeys-hook';\nimport { useSnapshot } from 'valtio';\n\nimport Bookmarks from '../pages/bookmarks';\nimport Favourites from '../pages/favourites';\nimport Following from '../pages/following';\nimport Hashtag from '../pages/hashtag';\nimport List from '../pages/list';\nimport Mentions from '../pages/mentions';\nimport Notifications from '../pages/notifications';\nimport Public from '../pages/public';\nimport Trending from '../pages/trending';\nimport states from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nfunction Columns() {\n  useTitle('Home', '/');\n  const snapStates = useSnapshot(states);\n  const { shortcuts } = snapStates;\n\n  console.debug('RENDER Columns', shortcuts);\n\n  const components = shortcuts.map((shortcut) => {\n    if (!shortcut) return null;\n    const { type, ...params } = shortcut;\n    const Component = {\n      following: Following,\n      notifications: Notifications,\n      list: List,\n      public: Public,\n      bookmarks: Bookmarks,\n      favourites: Favourites,\n      hashtag: Hashtag,\n      mentions: Mentions,\n      trending: Trending,\n    }[type];\n    if (!Component) return null;\n    return (\n      <Component key={type + JSON.stringify(params)} {...params} columnMode />\n    );\n  });\n\n  useHotkeys(['1', '2', '3', '4', '5', '6', '7', '8', '9'], (e, handler) => {\n    try {\n      const index = parseInt(handler.keys[0], 10) - 1;\n      document.querySelectorAll('#columns > *')[index].focus();\n    } catch (e) {\n      console.error(e);\n    }\n  });\n\n  return (\n    <div\n      id=\"columns\"\n      onContextMenu={(e) => {\n        // If right-click on header, but not links or buttons\n        if (\n          e.target.closest('.deck > header') &&\n          !e.target.closest('a') &&\n          !e.target.closest('button')\n        ) {\n          e.preventDefault();\n          states.showShortcutsSettings = true;\n        }\n      }}\n    >\n      {components}\n    </div>\n  );\n}\n\nexport default Columns;\n","import './notifications-menu.css';\n\nimport { ControlledMenu } from '@szhsin/react-menu';\nimport { memo } from 'preact/compat';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport Columns from '../components/columns';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport Notification from '../components/notification';\nimport { api } from '../utils/api';\nimport db from '../utils/db';\nimport groupNotifications from '../utils/group-notifications';\nimport states, { saveStatus } from '../utils/states';\nimport { getCurrentAccountNS } from '../utils/store-utils';\n\nimport Following from './following';\n\nfunction Home() {\n  const snapStates = useSnapshot(states);\n  useEffect(() => {\n    (async () => {\n      const keys = await db.drafts.keys();\n      if (keys.length) {\n        const ns = getCurrentAccountNS();\n        const ownKeys = keys.filter((key) => key.startsWith(ns));\n        if (ownKeys.length) {\n          states.showDrafts = true;\n        }\n      }\n    })();\n  }, []);\n\n  return (\n    <>\n      {(snapStates.settings.shortcutsViewMode === 'multi-column' ||\n        (!snapStates.settings.shortcutsViewMode &&\n          snapStates.settings.shortcutsColumnsMode)) &&\n      !!snapStates.shortcuts?.length ? (\n        <Columns />\n      ) : (\n        <Following\n          title=\"Home\"\n          path=\"/\"\n          id=\"home\"\n          headerStart={false}\n          headerEnd={<NotificationsLink />}\n        />\n      )}\n    </>\n  );\n}\n\nfunction NotificationsLink() {\n  const snapStates = useSnapshot(states);\n  const notificationLinkRef = useRef();\n  const [menuState, setMenuState] = useState(undefined);\n  return (\n    <>\n      <Link\n        ref={notificationLinkRef}\n        to=\"/notifications\"\n        class={`button plain notifications-button ${\n          snapStates.notificationsShowNew ? 'has-badge' : ''\n        } ${menuState || ''}`}\n        onClick={(e) => {\n          e.stopPropagation();\n          if (window.matchMedia('(min-width: calc(40em))').matches) {\n            e.preventDefault();\n            setMenuState((state) => (!state ? 'open' : undefined));\n          }\n        }}\n      >\n        <Icon icon=\"notification\" size=\"l\" alt=\"Notifications\" />\n      </Link>\n      <NotificationsMenu\n        state={menuState}\n        anchorRef={notificationLinkRef}\n        onClose={() => setMenuState(undefined)}\n      />\n    </>\n  );\n}\n\nconst NOTIFICATIONS_LIMIT = 30;\nconst NOTIFICATIONS_DISPLAY_LIMIT = 5;\nfunction NotificationsMenu({ anchorRef, state, onClose }) {\n  const { masto, instance } = api();\n  const snapStates = useSnapshot(states);\n  const [uiState, setUIState] = useState('default');\n\n  const notificationsIterator = masto.v1.notifications.list({\n    limit: NOTIFICATIONS_LIMIT,\n  });\n\n  async function fetchNotifications() {\n    const allNotifications = await notificationsIterator.next();\n    const notifications = allNotifications.value;\n\n    if (notifications?.length) {\n      notifications.forEach((notification) => {\n        saveStatus(notification.status, instance, {\n          skipThreading: true,\n        });\n      });\n\n      const groupedNotifications = groupNotifications(notifications);\n\n      states.notificationsLast = notifications[0];\n      states.notifications = groupedNotifications;\n\n      // Update last read marker\n      masto.v1.markers\n        .create({\n          notifications: {\n            lastReadId: notifications[0].id,\n          },\n        })\n        .catch(() => {});\n    }\n\n    states.notificationsShowNew = false;\n    states.notificationsLastFetchTime = Date.now();\n    return allNotifications;\n  }\n\n  const [hasFollowRequests, setHasFollowRequests] = useState(false);\n  function fetchFollowRequests() {\n    return masto.v1.followRequests.list({\n      limit: 1,\n    });\n  }\n\n  function loadNotifications() {\n    setUIState('loading');\n    (async () => {\n      try {\n        await fetchNotifications();\n        const followRequests = await fetchFollowRequests();\n        setHasFollowRequests(!!followRequests?.length);\n        setUIState('default');\n      } catch (e) {\n        setUIState('error');\n      }\n    })();\n  }\n\n  useEffect(() => {\n    if (state === 'open') loadNotifications();\n  }, [state]);\n\n  return (\n    <ControlledMenu\n      menuClassName=\"notifications-menu\"\n      state={state}\n      anchorRef={anchorRef}\n      onClose={onClose}\n      portal={{\n        target: document.body,\n      }}\n      overflow=\"auto\"\n      viewScroll=\"close\"\n      position=\"anchor\"\n      align=\"center\"\n      boundingBoxPadding=\"8 8 8 8\"\n    >\n      <header>\n        <h2>Notifications</h2>\n      </header>\n      <main>\n        {snapStates.notifications.length ? (\n          <>\n            {snapStates.notifications\n              .slice(0, NOTIFICATIONS_DISPLAY_LIMIT)\n              .map((notification) => (\n                <Notification\n                  key={notification.id}\n                  instance={instance}\n                  notification={notification}\n                />\n              ))}\n          </>\n        ) : uiState === 'loading' ? (\n          <div class=\"ui-state\">\n            <Loader abrupt />\n          </div>\n        ) : (\n          uiState === 'error' && (\n            <div class=\"ui-state\">\n              <p>Unable to fetch notifications.</p>\n              <p>\n                <button type=\"button\" onClick={loadNotifications}>\n                  Try again\n                </button>\n              </p>\n            </div>\n          )\n        )}\n      </main>\n      <footer>\n        <Link to=\"/mentions\" class=\"button plain\">\n          <Icon icon=\"at\" /> <span>Mentions</span>\n        </Link>\n        <Link to=\"/notifications\" class=\"button plain2\">\n          {hasFollowRequests ? (\n            <>\n              <span class=\"tag collapsed\">New</span>{' '}\n              <span>Follow Requests</span>\n            </>\n          ) : (\n            <b>See all</b>\n          )}{' '}\n          <Icon icon=\"arrow-right\" />\n        </Link>\n      </footer>\n    </ControlledMenu>\n  );\n}\n\nexport default memo(Home);\n","// export const statusRegex = /\\/@([^@\\/]+)@?([^\\/]+)?\\/([^\\/]+)\\/?$/i;\n// export const statusNoteRegex = /\\/notes\\/([^\\/]+)\\/?$/i;\n\nconst statusPostRegexes = [\n  /^\\/@[^@\\/]+\\/(?:statuses|posts)\\/([^\\/]+)/i, // GoToSocial, Takahe\n  /\\/notes\\/([^\\/]+)/i, // Misskey, Firefish\n  /^\\/(?:notice|objects)\\/([a-z0-9-]+)/i, // Pleroma\n  /\\/@[^@\\/]+@?[^\\/]+?\\/([^\\/]+)/i, // Mastodon\n];\n\nexport function getInstanceStatusObject(url) {\n  // Regex /:username/:id, where username = @username or @username@domain, id = anything\n  const { hostname, pathname } = new URL(url);\n  // const [, username, domain, id] = pathname.match(statusRegex) || [];\n  for (const regex of statusPostRegexes) {\n    const [, id] = pathname.match(regex) || [];\n    console.log(pathname, regex, id);\n    if (id) {\n      return {\n        instance: hostname,\n        id,\n      };\n    }\n  }\n  return null;\n}\n\nfunction getInstanceStatusURL(url) {\n  const { instance, id } = getInstanceStatusObject(url);\n  if (instance && id) {\n    return `/${instance}/s/${id}`;\n  }\n  return null;\n}\n\nexport default getInstanceStatusURL;\n","import { useLayoutEffect, useState } from 'preact/hooks';\nimport { useLocation } from 'react-router-dom';\n\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport { api } from '../utils/api';\nimport getInstanceStatusURL, {\n  getInstanceStatusObject,\n} from '../utils/get-instance-status-url';\n\nexport default function HttpRoute() {\n  const location = useLocation();\n  const url = location.pathname.replace(/^\\//, '');\n  const statusObject = getInstanceStatusObject(url);\n  // const statusURL = getInstanceStatusURL(url);\n  const statusURL = statusObject?.instance\n    ? `/${statusObject.instance}/s/${statusObject.id}`\n    : null;\n  const [uiState, setUIState] = useState('loading');\n\n  useLayoutEffect(() => {\n    setUIState('loading');\n    (async () => {\n      const { instance, id } = statusObject;\n      const { masto } = api({ instance });\n\n      // Check if status returns 200\n      try {\n        const status = await masto.v1.statuses.$select(id).fetch();\n        if (status) {\n          window.location.hash = statusURL + '?view=full';\n          return;\n        }\n      } catch (e) {}\n\n      // Fallback to search\n      {\n        const { masto: currentMasto, instance: currentInstance } = api();\n        const result = await currentMasto.v2.search.fetch({\n          q: url,\n          type: 'statuses',\n          limit: 1,\n          resolve: true,\n        });\n        if (result.statuses.length) {\n          const status = result.statuses[0];\n          window.location.hash = `/${currentInstance}/s/${status.id}?view=full`;\n        } else {\n          // Fallback to original URL, which will probably show error\n          window.location.hash = statusURL + '?view=full';\n        }\n      }\n    })();\n  }, [statusURL]);\n\n  return (\n    <div class=\"ui-state\" tabIndex=\"-1\">\n      {uiState === 'loading' ? (\n        <>\n          <Loader abrupt />\n          <h2>Resolving…</h2>\n          <p>\n            <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n              {url}\n            </a>\n          </p>\n        </>\n      ) : (\n        <>\n          <h2>Unable to resolve URL</h2>\n          <p>\n            <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n              {url}\n            </a>\n          </p>\n        </>\n      )}\n      <hr />\n      <p>\n        <Link to=\"/\">Go home</Link>\n      </p>\n    </div>\n  );\n}\n","import './lists.css';\n\nimport { useEffect, useReducer, useRef, useState } from 'preact/hooks';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport ListAddEdit from '../components/list-add-edit';\nimport Loader from '../components/loader';\nimport Modal from '../components/modal';\nimport NavMenu from '../components/nav-menu';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nfunction Lists() {\n  const { masto } = api();\n  useTitle(`Lists`, `/l`);\n  const [uiState, setUIState] = useState('default');\n\n  const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n  const [lists, setLists] = useState([]);\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const lists = await masto.v1.lists.list();\n        lists.sort((a, b) => a.title.localeCompare(b.title));\n        console.log(lists);\n        setLists(lists);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, [reloadCount]);\n\n  const [showListAddEditModal, setShowListAddEditModal] = useState(false);\n\n  return (\n    <div id=\"lists-page\" class=\"deck-container\" tabIndex=\"-1\">\n      <div class=\"timeline-deck deck\">\n        <header>\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n              <Link to=\"/\" class=\"button plain\">\n                <Icon icon=\"home\" size=\"l\" />\n              </Link>\n            </div>\n            <h1>Lists</h1>\n            <div class=\"header-side\">\n              <button\n                type=\"button\"\n                class=\"plain\"\n                onClick={() => setShowListAddEditModal(true)}\n              >\n                <Icon icon=\"plus\" size=\"l\" alt=\"New list\" />\n              </button>\n            </div>\n          </div>\n        </header>\n        <main>\n          {lists.length > 0 ? (\n            <ul class=\"link-list\">\n              {lists.map((list) => (\n                <li>\n                  <Link to={`/l/${list.id}`}>\n                    <span>\n                      <Icon icon=\"list\" /> <span>{list.title}</span>\n                    </span>\n                    {/* <button\n                      type=\"button\"\n                      class=\"plain\"\n                      onClick={(e) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        setShowListAddEditModal({\n                          list,\n                        });\n                      }}\n                    >\n                      <Icon icon=\"pencil\" />\n                    </button> */}\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          ) : uiState === 'loading' ? (\n            <p class=\"ui-state\">\n              <Loader />\n            </p>\n          ) : uiState === 'error' ? (\n            <p class=\"ui-state\">Unable to load lists.</p>\n          ) : (\n            <p class=\"ui-state\">No lists yet.</p>\n          )}\n        </main>\n      </div>\n      {showListAddEditModal && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowListAddEditModal(false);\n            }\n          }}\n        >\n          <ListAddEdit\n            list={showListAddEditModal?.list}\n            onClose={(result) => {\n              if (result.state === 'success') {\n                reload();\n              }\n              setShowListAddEditModal(false);\n            }}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nexport default Lists;\n","export default \"__VITE_ASSET__Y_wpqkTO__\"","const { VITE_CLIENT_NAME: CLIENT_NAME, VITE_WEBSITE: WEBSITE } = import.meta\n  .env;\n\nconst SCOPES = 'read write follow push';\n\nexport async function registerApplication({ instanceURL }) {\n  const registrationParams = new URLSearchParams({\n    client_name: CLIENT_NAME,\n    redirect_uris: location.origin + location.pathname,\n    scopes: SCOPES,\n    website: WEBSITE,\n  });\n  const registrationResponse = await fetch(\n    `https://${instanceURL}/api/v1/apps`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: registrationParams.toString(),\n    },\n  );\n  const registrationJSON = await registrationResponse.json();\n  console.log({ registrationJSON });\n  return registrationJSON;\n}\n\nexport async function getAuthorizationURL({ instanceURL, client_id }) {\n  const authorizationParams = new URLSearchParams({\n    client_id,\n    scope: SCOPES,\n    redirect_uri: location.origin + location.pathname,\n    // redirect_uri: 'urn:ietf:wg:oauth:2.0:oob',\n    response_type: 'code',\n  });\n  const authorizationURL = `https://${instanceURL}/oauth/authorize?${authorizationParams.toString()}`;\n  return authorizationURL;\n}\n\nexport async function getAccessToken({\n  instanceURL,\n  client_id,\n  client_secret,\n  code,\n}) {\n  const params = new URLSearchParams({\n    client_id,\n    client_secret,\n    redirect_uri: location.origin + location.pathname,\n    grant_type: 'authorization_code',\n    code,\n    scope: SCOPES,\n  });\n  const tokenResponse = await fetch(`https://${instanceURL}/oauth/token`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: params.toString(),\n  });\n  const tokenJSON = await tokenResponse.json();\n  console.log({ tokenJSON });\n  return tokenJSON;\n}\n","import './login.css';\n\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useSearchParams } from 'react-router-dom';\n\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport instancesListURL from '../data/instances.json?url';\nimport { getAuthorizationURL, registerApplication } from '../utils/auth';\nimport store from '../utils/store';\nimport useTitle from '../utils/useTitle';\n\nfunction Login() {\n  useTitle('Log in');\n  const instanceURLRef = useRef();\n  const cachedInstanceURL = store.local.get('instanceURL');\n  const [uiState, setUIState] = useState('default');\n  const [searchParams] = useSearchParams();\n  const instance = searchParams.get('instance');\n  const [instanceText, setInstanceText] = useState(\n    instance || cachedInstanceURL?.toLowerCase() || '',\n  );\n\n  const [instancesList, setInstancesList] = useState([]);\n  useEffect(() => {\n    (async () => {\n      try {\n        const res = await fetch(instancesListURL);\n        const data = await res.json();\n        setInstancesList(data);\n      } catch (e) {\n        // Silently fail\n        console.error(e);\n      }\n    })();\n  }, []);\n\n  // useEffect(() => {\n  //   if (cachedInstanceURL) {\n  //     instanceURLRef.current.value = cachedInstanceURL.toLowerCase();\n  //   }\n  // }, []);\n\n  const submitInstance = (instanceURL) => {\n    store.local.set('instanceURL', instanceURL);\n\n    (async () => {\n      setUIState('loading');\n      try {\n        const { client_id, client_secret, vapid_key } =\n          await registerApplication({\n            instanceURL,\n          });\n\n        if (client_id && client_secret) {\n          store.session.set('clientID', client_id);\n          store.session.set('clientSecret', client_secret);\n          store.session.set('vapidKey', vapid_key);\n\n          location.href = await getAuthorizationURL({\n            instanceURL,\n            client_id,\n          });\n        } else {\n          alert('Failed to register application');\n        }\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  };\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    const { elements } = e.target;\n    let instanceURL = elements.instanceURL.value.toLowerCase();\n    // Remove protocol from instance URL\n    instanceURL = instanceURL.replace(/^https?:\\/\\//, '').replace(/\\/+$/, '');\n    // Remove @acct@ or acct@ from instance URL\n    instanceURL = instanceURL.replace(/^@?[^@]+@/, '');\n    if (!/\\./.test(instanceURL)) {\n      instanceURL = instancesList.find((instance) =>\n        instance.includes(instanceURL),\n      );\n    }\n    submitInstance(instanceURL);\n  };\n\n  const instancesSuggestions = instanceText\n    ? instancesList\n        .filter((instance) => instance.includes(instanceText))\n        .sort((a, b) => {\n          // Move text that starts with instanceText to the start\n          const aStartsWith = a\n            .toLowerCase()\n            .startsWith(instanceText.toLowerCase());\n          const bStartsWith = b\n            .toLowerCase()\n            .startsWith(instanceText.toLowerCase());\n          if (aStartsWith && !bStartsWith) return -1;\n          if (!aStartsWith && bStartsWith) return 1;\n          return 0;\n        })\n        .slice(0, 10)\n    : [];\n\n  return (\n    <main id=\"login\" style={{ textAlign: 'center' }}>\n      <form onSubmit={onSubmit}>\n        <h1>Log in</h1>\n        <label>\n          <p>Instance</p>\n          <input\n            value={instanceText}\n            required\n            type=\"text\"\n            class=\"large\"\n            id=\"instanceURL\"\n            ref={instanceURLRef}\n            disabled={uiState === 'loading'}\n            // list=\"instances-list\"\n            autocorrect=\"off\"\n            autocapitalize=\"off\"\n            autocomplete=\"off\"\n            spellcheck={false}\n            placeholder=\"instance domain\"\n            onInput={(e) => {\n              setInstanceText(e.target.value);\n            }}\n          />\n          {instancesSuggestions?.length > 0 ? (\n            <ul id=\"instances-suggestions\">\n              {instancesSuggestions.map((instance) => (\n                <li>\n                  <button\n                    type=\"button\"\n                    class=\"plain4\"\n                    onClick={() => {\n                      submitInstance(instance);\n                    }}\n                  >\n                    {instance}\n                  </button>\n                </li>\n              ))}\n            </ul>\n          ) : (\n            <div id=\"instances-eg\">e.g. &ldquo;mastodon.social&rsquo;</div>\n          )}\n          {/* <datalist id=\"instances-list\">\n            {instancesList.map((instance) => (\n              <option value={instance} />\n            ))}\n          </datalist> */}\n        </label>\n        {uiState === 'error' && (\n          <p class=\"error\">\n            Failed to log in. Please try again or another instance.\n          </p>\n        )}\n        <div>\n          <button class=\"large\" disabled={uiState === 'loading'}>\n            Log in\n          </button>{' '}\n        </div>\n        <Loader hidden={uiState !== 'loading'} />\n        <hr />\n        <p>\n          <a href=\"https://joinmastodon.org/servers\" target=\"_blank\">\n            Don't have an account? Create one!\n          </a>\n        </p>\n        <p>\n          <Link to=\"/\">Go home</Link>\n        </p>\n      </form>\n    </main>\n  );\n}\n\nexport default Login;\n","import './search.css';\n\nimport { useAutoAnimate } from '@formkit/auto-animate/preact';\nimport { useEffect, useLayoutEffect, useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { InView } from 'react-intersection-observer';\nimport { useParams, useSearchParams } from 'react-router-dom';\n\nimport AccountBlock from '../components/account-block';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport NavMenu from '../components/nav-menu';\nimport SearchForm from '../components/search-form';\nimport Status from '../components/status';\nimport { api } from '../utils/api';\nimport shortenNumber from '../utils/shorten-number';\nimport useTitle from '../utils/useTitle';\n\nconst SHORT_LIMIT = 5;\nconst LIMIT = 40;\n\nfunction Search(props) {\n  const params = useParams();\n  const { masto, instance, authenticated } = api({\n    instance: params.instance,\n  });\n  const [uiState, setUIState] = useState('default');\n  const [searchParams] = useSearchParams();\n  const searchFormRef = useRef();\n  const q = props?.query || searchParams.get('q');\n  const type = props?.type || searchParams.get('type');\n  useTitle(\n    q\n      ? `Search: ${q}${\n          type\n            ? ` (${\n                {\n                  statuses: 'Posts',\n                  accounts: 'Accounts',\n                  hashtags: 'Hashtags',\n                }[type]\n              })`\n            : ''\n        }`\n      : 'Search',\n    `/search`,\n  );\n\n  const [showMore, setShowMore] = useState(false);\n  const offsetRef = useRef(0);\n  useEffect(() => {\n    offsetRef.current = 0;\n  }, [q, type]);\n\n  const scrollableRef = useRef();\n  useLayoutEffect(() => {\n    scrollableRef.current?.scrollTo?.(0, 0);\n  }, [q, type]);\n\n  const [statusResults, setStatusResults] = useState([]);\n  const [accountResults, setAccountResults] = useState([]);\n  const [hashtagResults, setHashtagResults] = useState([]);\n  useEffect(() => {\n    setStatusResults([]);\n    setAccountResults([]);\n    setHashtagResults([]);\n  }, [q]);\n  const setTypeResultsFunc = {\n    statuses: setStatusResults,\n    accounts: setAccountResults,\n    hashtags: setHashtagResults,\n  };\n\n  function loadResults(firstLoad) {\n    if (!firstLoad && !authenticated) {\n      // Search results pagination is only available to authenticated users\n      return;\n    }\n\n    setUIState('loading');\n    if (firstLoad && !type) {\n      setStatusResults(statusResults.slice(0, SHORT_LIMIT));\n      setAccountResults(accountResults.slice(0, SHORT_LIMIT));\n      setHashtagResults(hashtagResults.slice(0, SHORT_LIMIT));\n    }\n\n    (async () => {\n      const params = {\n        q,\n        resolve: authenticated,\n        limit: SHORT_LIMIT,\n      };\n      if (type) {\n        params.limit = LIMIT;\n        params.type = type;\n        if (authenticated) params.offset = offsetRef.current;\n      }\n\n      try {\n        const results = await masto.v2.search.fetch(params);\n        console.log(results);\n        if (type) {\n          if (firstLoad) {\n            setTypeResultsFunc[type](results[type]);\n            const length = results[type]?.length;\n            offsetRef.current = LIMIT;\n            setShowMore(!!length);\n          } else {\n            setTypeResultsFunc[type]((prev) => [...prev, ...results[type]]);\n            const length = results[type]?.length;\n            offsetRef.current = offsetRef.current + LIMIT;\n            setShowMore(!!length);\n          }\n        } else {\n          setStatusResults(results.statuses);\n          setAccountResults(results.accounts);\n          setHashtagResults(results.hashtags);\n          offsetRef.current = 0;\n          setShowMore(false);\n        }\n        setUIState('default');\n      } catch (err) {\n        console.error(err);\n        setUIState('error');\n      }\n    })();\n  }\n\n  useEffect(() => {\n    if (q) {\n      searchFormRef.current?.setValue?.(q);\n      loadResults(true);\n    } else {\n      searchFormRef.current?.focus?.();\n    }\n  }, [q, type, instance]);\n\n  useHotkeys(\n    '/',\n    (e) => {\n      searchFormRef.current?.focus?.();\n    },\n    {\n      preventDefault: true,\n    },\n  );\n\n  const [filterBarParent] = useAutoAnimate();\n\n  return (\n    <div id=\"search-page\" class=\"deck-container\" ref={scrollableRef}>\n      <div class=\"timeline-deck deck\">\n        <header class={uiState === 'loading' ? 'loading' : ''}>\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n            </div>\n            <SearchForm ref={searchFormRef} />\n            <div class=\"header-side\">&nbsp;</div>\n          </div>\n        </header>\n        <main>\n          {!!q && (\n            <div\n              ref={filterBarParent}\n              class={`filter-bar ${uiState === 'loading' ? 'loading' : ''}`}\n            >\n              {!!type && (\n                <Link to={`/search${q ? `?q=${encodeURIComponent(q)}` : ''}`}>\n                  ‹ All\n                </Link>\n              )}\n              {[\n                {\n                  label: 'Accounts',\n                  type: 'accounts',\n                  to: `/search?q=${encodeURIComponent(q)}&type=accounts`,\n                },\n                {\n                  label: 'Hashtags',\n                  type: 'hashtags',\n                  to: `/search?q=${encodeURIComponent(q)}&type=hashtags`,\n                },\n                {\n                  label: 'Posts',\n                  type: 'statuses',\n                  to: `/search?q=${encodeURIComponent(q)}&type=statuses`,\n                },\n              ]\n                .sort((a, b) => {\n                  if (a.type === type) return -1;\n                  if (b.type === type) return 1;\n                  return 0;\n                })\n                .map((link) => (\n                  <Link to={link.to} key={link.type}>\n                    {link.label}\n                  </Link>\n                ))}\n            </div>\n          )}\n          {!!q ? (\n            <>\n              {(!type || type === 'accounts') && (\n                <>\n                  {type !== 'accounts' && (\n                    <h2 class=\"timeline-header\">Accounts</h2>\n                  )}\n                  {accountResults.length > 0 ? (\n                    <>\n                      <ul class=\"timeline flat accounts-list\">\n                        {accountResults.map((account) => (\n                          <li key={account.id}>\n                            <AccountBlock\n                              account={account}\n                              instance={instance}\n                              showStats\n                            />\n                          </li>\n                        ))}\n                      </ul>\n                      {type !== 'accounts' && (\n                        <div class=\"ui-state\">\n                          <Link\n                            class=\"plain button\"\n                            to={`/search?q=${q}&type=accounts`}\n                          >\n                            See more accounts <Icon icon=\"arrow-right\" />\n                          </Link>\n                        </div>\n                      )}\n                    </>\n                  ) : (\n                    !type &&\n                    (uiState === 'loading' ? (\n                      <p class=\"ui-state\">\n                        <Loader abrupt />\n                      </p>\n                    ) : (\n                      <p class=\"ui-state\">No accounts found.</p>\n                    ))\n                  )}\n                </>\n              )}\n              {(!type || type === 'hashtags') && (\n                <>\n                  {type !== 'hashtags' && (\n                    <h2 class=\"timeline-header\">Hashtags</h2>\n                  )}\n                  {hashtagResults.length > 0 ? (\n                    <>\n                      <ul class=\"link-list hashtag-list\">\n                        {hashtagResults.map((hashtag) => {\n                          const { name, history } = hashtag;\n                          const total = history.reduce(\n                            (acc, cur) => acc + +cur.uses,\n                            0,\n                          );\n                          return (\n                            <li key={hashtag.name}>\n                              <Link\n                                to={\n                                  instance\n                                    ? `/${instance}/t/${hashtag.name}`\n                                    : `/t/${hashtag.name}`\n                                }\n                              >\n                                <Icon icon=\"hashtag\" />\n                                <span>{hashtag.name}</span>\n                                {!!total && (\n                                  <span class=\"count\">\n                                    {shortenNumber(total)}\n                                  </span>\n                                )}\n                              </Link>\n                            </li>\n                          );\n                        })}\n                      </ul>\n                      {type !== 'hashtags' && (\n                        <div class=\"ui-state\">\n                          <Link\n                            class=\"plain button\"\n                            to={`/search?q=${q}&type=hashtags`}\n                          >\n                            See more hashtags <Icon icon=\"arrow-right\" />\n                          </Link>\n                        </div>\n                      )}\n                    </>\n                  ) : (\n                    !type &&\n                    (uiState === 'loading' ? (\n                      <p class=\"ui-state\">\n                        <Loader abrupt />\n                      </p>\n                    ) : (\n                      <p class=\"ui-state\">No hashtags found.</p>\n                    ))\n                  )}\n                </>\n              )}\n              {(!type || type === 'statuses') && (\n                <>\n                  {type !== 'statuses' && (\n                    <h2 class=\"timeline-header\">Posts</h2>\n                  )}\n                  {statusResults.length > 0 ? (\n                    <>\n                      <ul class=\"timeline\">\n                        {statusResults.map((status) => (\n                          <li key={status.id}>\n                            <Link\n                              class=\"status-link\"\n                              to={\n                                instance\n                                  ? `/${instance}/s/${status.id}`\n                                  : `/s/${status.id}`\n                              }\n                            >\n                              <Status status={status} />\n                            </Link>\n                          </li>\n                        ))}\n                      </ul>\n                      {type !== 'statuses' && (\n                        <div class=\"ui-state\">\n                          <Link\n                            class=\"plain button\"\n                            to={`/search?q=${q}&type=statuses`}\n                          >\n                            See more posts <Icon icon=\"arrow-right\" />\n                          </Link>\n                        </div>\n                      )}\n                    </>\n                  ) : (\n                    !type &&\n                    (uiState === 'loading' ? (\n                      <p class=\"ui-state\">\n                        <Loader abrupt />\n                      </p>\n                    ) : (\n                      <p class=\"ui-state\">No posts found.</p>\n                    ))\n                  )}\n                </>\n              )}\n              {!!type &&\n                (uiState === 'default' ? (\n                  showMore ? (\n                    <InView\n                      onChange={(inView) => {\n                        if (inView) {\n                          loadResults();\n                        }\n                      }}\n                    >\n                      <button\n                        type=\"button\"\n                        class=\"plain block\"\n                        onClick={() => loadResults()}\n                        style={{ marginBlockEnd: '6em' }}\n                      >\n                        Show more&hellip;\n                      </button>\n                    </InView>\n                  ) : (\n                    <p class=\"ui-state insignificant\">The end.</p>\n                  )\n                ) : (\n                  uiState === 'loading' && (\n                    <p class=\"ui-state\">\n                      <Loader abrupt />\n                    </p>\n                  )\n                ))}\n            </>\n          ) : uiState === 'loading' ? (\n            <p class=\"ui-state\">\n              <Loader abrupt />\n            </p>\n          ) : (\n            <p class=\"ui-state\">\n              Enter your search term or paste a URL above to get started.\n            </p>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default Search;\n","import './status.css';\n\nimport { Menu, MenuDivider, MenuHeader, MenuItem } from '@szhsin/react-menu';\nimport debounce from 'just-debounce-it';\nimport pRetry from 'p-retry';\nimport { memo } from 'preact/compat';\nimport {\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { InView } from 'react-intersection-observer';\nimport { matchPath, useSearchParams } from 'react-router-dom';\nimport { useDebouncedCallback } from 'use-debounce';\nimport { useSnapshot } from 'valtio';\n\nimport Avatar from '../components/avatar';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport MediaModal from '../components/media-modal';\nimport Menu2 from '../components/menu2';\nimport NameText from '../components/name-text';\nimport RelativeTime from '../components/relative-time';\nimport Status from '../components/status';\nimport { api } from '../utils/api';\nimport htmlContentLength from '../utils/html-content-length';\nimport shortenNumber from '../utils/shorten-number';\nimport states, {\n  getStatus,\n  saveStatus,\n  statusKey,\n  threadifyStatus,\n} from '../utils/states';\nimport statusPeek from '../utils/status-peek';\nimport { getCurrentAccount } from '../utils/store-utils';\nimport useScroll from '../utils/useScroll';\nimport useTitle from '../utils/useTitle';\n\nimport getInstanceStatusURL from './../utils/get-instance-status-url';\n\nconst LIMIT = 40;\nconst SUBCOMMENTS_OPEN_ALL_LIMIT = 10;\nconst MAX_WEIGHT = 5;\n\nlet cachedRepliesToggle = {};\nlet cachedStatusesMap = {};\nlet scrollPositions = {};\nfunction resetScrollPosition(id) {\n  delete cachedStatusesMap[id];\n  delete scrollPositions[id];\n}\n\nconst scrollIntoViewOptions = {\n  block: 'nearest',\n  inline: 'center',\n  behavior: 'smooth',\n};\n\n// Select all statuses except those inside collapsed details/summary\n// Hat-tip to @AmeliaBR@front-end.social\n// https://front-end.social/@AmeliaBR/109784776146144471\nconst STATUSES_SELECTOR =\n  '.status-link:not(details:not([open]) > summary ~ *, details:not([open]) > summary ~ * *), .status-focus:not(details:not([open]) > summary ~ *, details:not([open]) > summary ~ * *)';\n\nconst STATUS_URL_REGEX = /\\/s\\//i;\n\nfunction StatusPage(params) {\n  const { id } = params;\n  const { masto, instance } = api({ instance: params.instance });\n  const snapStates = useSnapshot(states);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const mediaParam = searchParams.get('media');\n  const mediaOnlyParam = searchParams.get('media-only');\n  const mediaIndex = parseInt(mediaParam || mediaOnlyParam, 10);\n  let showMedia = mediaIndex > 0;\n  const mediaStatusID = searchParams.get('mediaStatusID');\n  const mediaStatus = getStatus(mediaStatusID, instance);\n  if (mediaStatusID && !mediaStatus) {\n    showMedia = false;\n  }\n  const showMediaOnly = showMedia && !!mediaOnlyParam;\n\n  const sKey = statusKey(id, instance);\n  const [heroStatus, setHeroStatus] = useState(states.statuses[sKey]);\n  useEffect(() => {\n    if (states.statuses[sKey]) {\n      setHeroStatus(states.statuses[sKey]);\n    }\n  }, [sKey]);\n\n  const closeLink = useMemo(() => {\n    const { prevLocation } = states;\n    const pathname =\n      (prevLocation?.pathname || '') + (prevLocation?.search || '');\n    const matchStatusPath =\n      matchPath('/:instance/s/:id', pathname) || matchPath('/s/:id', pathname);\n    if (!pathname || matchStatusPath) {\n      return '/';\n    }\n    return pathname;\n  }, []);\n\n  useEffect(() => {\n    if (!heroStatus && showMedia) {\n      (async () => {\n        try {\n          const status = await masto.v1.statuses.$select(id).fetch();\n          saveStatus(status, instance);\n          setHeroStatus(status);\n        } catch (err) {\n          console.error(err);\n          alert('Unable to load post.');\n          location.hash = closeLink;\n        }\n      })();\n    }\n  }, [showMedia]);\n\n  const mediaAttachments = mediaStatusID\n    ? mediaStatus?.mediaAttachments\n    : heroStatus?.mediaAttachments;\n\n  const handleMediaClose = useCallback(() => {\n    if (\n      !window.matchMedia('(min-width: calc(40em + 350px))').matches &&\n      snapStates.prevLocation\n    ) {\n      history.back();\n    } else {\n      if (showMediaOnly) {\n        location.hash = closeLink;\n      } else {\n        searchParams.delete('media');\n        searchParams.delete('mediaStatusID');\n        setSearchParams(searchParams);\n      }\n    }\n  }, [showMediaOnly, closeLink, snapStates.prevLocation]);\n\n  return (\n    <div class=\"deck-backdrop\">\n      {showMedia ? (\n        mediaAttachments?.length ? (\n          <MediaModal\n            mediaAttachments={mediaAttachments}\n            statusID={mediaStatusID || id}\n            instance={instance}\n            lang={heroStatus?.language}\n            index={mediaIndex - 1}\n            onClose={handleMediaClose}\n          />\n        ) : (\n          <div class=\"media-modal-container loading\">\n            <Loader abrupt />\n          </div>\n        )\n      ) : (\n        <Link to={closeLink} />\n      )}\n      {!showMediaOnly && (\n        <StatusThread\n          id={id}\n          instance={params.instance}\n          closeLink={closeLink}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction StatusThread({ id, closeLink = '/', instance: propInstance }) {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const mediaParam = searchParams.get('media');\n  const mediaStatusID = searchParams.get('mediaStatusID');\n  const showMedia = parseInt(mediaParam, 10) > 0;\n  const firstLoad = useRef(\n    !states.prevLocation &&\n      (history.length === 1 ||\n        ('navigation' in window && navigation?.entries?.()?.length === 1)),\n  );\n  const [viewMode, setViewMode] = useState(\n    searchParams.get('view') || firstLoad.current ? 'full' : null,\n  );\n  const translate = !!parseInt(searchParams.get('translate'));\n  const { masto, instance } = api({ instance: propInstance });\n  const {\n    masto: currentMasto,\n    instance: currentInstance,\n    authenticated,\n  } = api();\n  const sameInstance = instance === currentInstance;\n  const snapStates = useSnapshot(states);\n  const [statuses, setStatuses] = useState([]);\n  const [uiState, setUIState] = useState('default');\n  const heroStatusRef = useRef();\n  const sKey = statusKey(id, instance);\n  const totalDescendants = useRef(0);\n\n  const scrollableRef = useRef();\n  useEffect(() => {\n    scrollableRef.current?.focus();\n  }, []);\n  useEffect(() => {\n    const onScroll = debounce(() => {\n      // console.log('onScroll');\n      if (!scrollableRef.current) return;\n      const { scrollTop } = scrollableRef.current;\n      if (uiState !== 'loading') {\n        scrollPositions[id] = scrollTop;\n      }\n    }, 50);\n    scrollableRef.current?.addEventListener('scroll', onScroll, {\n      passive: true,\n    });\n    onScroll();\n    return () => {\n      onScroll.cancel();\n      scrollableRef.current?.removeEventListener('scroll', onScroll);\n    };\n  }, [id, uiState !== 'loading']);\n\n  const scrollOffsets = useRef();\n  const initContext = ({ reloadHero } = {}) => {\n    console.debug('initContext', id);\n    setUIState('loading');\n    let heroTimer;\n\n    const cachedStatuses = cachedStatusesMap[id];\n    if (cachedStatuses) {\n      // Case 1: It's cached, let's restore them to make it snappy\n      const reallyCachedStatuses = cachedStatuses.filter(\n        (s) => states.statuses[sKey],\n        // Some are not cached in the global state, so we need to filter them out\n      );\n      setStatuses(reallyCachedStatuses);\n    } else {\n      // const heroIndex = statuses.findIndex((s) => s.id === id);\n      // if (heroIndex !== -1) {\n      //   // Case 2: It's in current statuses. Slice off all descendant statuses after the hero status to be safe\n      //   const slicedStatuses = statuses.slice(0, heroIndex + 1);\n      //   setStatuses(slicedStatuses);\n      // } else {\n      // Case 3: Not cached and not in statuses, let's start from scratch\n      setStatuses([{ id }]);\n      // }\n    }\n\n    (async () => {\n      const heroFetch = () =>\n        pRetry(() => masto.v1.statuses.$select(id).fetch(), {\n          retries: 4,\n        });\n      const contextFetch = pRetry(\n        () => masto.v1.statuses.$select(id).context.fetch(),\n        {\n          retries: 8,\n        },\n      );\n\n      const hasStatus = !!snapStates.statuses[sKey];\n      let heroStatus = snapStates.statuses[sKey];\n      if (hasStatus && !reloadHero) {\n        console.debug('Hero status is cached');\n      } else {\n        try {\n          heroStatus = await heroFetch();\n          saveStatus(heroStatus, instance);\n          // Give time for context to appear\n          await new Promise((resolve) => {\n            setTimeout(resolve, 100);\n          });\n        } catch (e) {\n          console.error(e);\n          setUIState('error');\n          return;\n        }\n      }\n\n      try {\n        const context = await contextFetch;\n        const { ancestors, descendants } = context;\n\n        totalDescendants.current = descendants?.length || 0;\n\n        const missingStatuses = new Set();\n        ancestors.forEach((status) => {\n          saveStatus(status, instance, {\n            skipThreading: true,\n          });\n          if (\n            status.inReplyToId &&\n            !ancestors.find((s) => s.id === status.inReplyToId)\n          ) {\n            missingStatuses.add(status.inReplyToId);\n          }\n        });\n        const ancestorsIsThread = ancestors.every(\n          (s) => s.account.id === heroStatus.account.id,\n        );\n        const nestedDescendants = [];\n        descendants.forEach((status) => {\n          saveStatus(status, instance, {\n            skipThreading: true,\n          });\n\n          if (\n            status.inReplyToId &&\n            !descendants.find((s) => s.id === status.inReplyToId) &&\n            status.inReplyToId !== heroStatus.id\n          ) {\n            missingStatuses.add(status.inReplyToId);\n          }\n\n          if (status.inReplyToAccountId === status.account.id) {\n            // If replying to self, it's part of the thread, level 1\n            nestedDescendants.push(status);\n          } else if (status.inReplyToId === heroStatus.id) {\n            // If replying to the hero status, it's a reply, level 1\n            nestedDescendants.push(status);\n          } else if (\n            !status.inReplyToAccountId &&\n            nestedDescendants.find((s) => s.id === status.inReplyToId) &&\n            status.account.id === heroStatus.account.id\n          ) {\n            // If replying to hero's own statuses, it's part of the thread, level 1\n            nestedDescendants.push(status);\n          } else {\n            // If replying to someone else, it's a reply to a reply, level 2\n            const parent = descendants.find((s) => s.id === status.inReplyToId);\n            if (parent) {\n              if (!parent.__replies) {\n                parent.__replies = [];\n              }\n              parent.__replies.push(status);\n            } else {\n              // If no parent, something is wrong\n              console.warn('No parent found for', status);\n            }\n          }\n        });\n\n        console.log({ ancestors, descendants, nestedDescendants });\n        if (missingStatuses.size) {\n          console.error('Missing statuses', [...missingStatuses]);\n        }\n\n        function expandReplies(_replies) {\n          return _replies?.map((_r) => ({\n            id: _r.id,\n            account: _r.account,\n            repliesCount: _r.repliesCount,\n            content: _r.content,\n            weight: calcStatusWeight(_r),\n            replies: expandReplies(_r.__replies),\n          }));\n        }\n\n        const allStatuses = [\n          ...ancestors.map((s) => ({\n            id: s.id,\n            ancestor: true,\n            isThread: ancestorsIsThread,\n            accountID: s.account.id,\n            account: s.account,\n            repliesCount: s.repliesCount,\n            weight: calcStatusWeight(s),\n          })),\n          {\n            id,\n            accountID: heroStatus.account.id,\n            weight: calcStatusWeight(heroStatus),\n          },\n          ...nestedDescendants.map((s) => ({\n            id: s.id,\n            account: s.account,\n            accountID: s.account.id,\n            descendant: true,\n            thread: s.account.id === heroStatus.account.id,\n            weight: calcStatusWeight(s),\n            replies: expandReplies(s.__replies),\n          })),\n        ];\n\n        setUIState('default');\n        scrollOffsets.current = {\n          offsetTop: heroStatusRef.current?.offsetTop,\n          scrollTop: scrollableRef.current?.scrollTop,\n        };\n\n        // Set limit to hero's index\n        const heroLimit = allStatuses.findIndex((s) => s.id === id);\n        if (heroLimit >= limit) {\n          setLimit(heroLimit + 1);\n        }\n\n        console.log({ allStatuses });\n        setStatuses(allStatuses);\n        cachedStatusesMap[id] = allStatuses;\n\n        // Let's threadify this one\n        // Note that all non-hero statuses will trigger saveStatus which will threadify them too\n        // By right, at this point, all descendant statuses should be cached\n        threadifyStatus(heroStatus, instance);\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n\n    return () => {\n      clearTimeout(heroTimer);\n    };\n  };\n\n  useEffect(initContext, [id, masto]);\n  useEffect(() => {\n    if (!statuses.length) return;\n    console.debug('STATUSES', statuses);\n    const scrollPosition = scrollPositions[id];\n    console.debug('scrollPosition', scrollPosition);\n    if (!!scrollPosition) {\n      console.debug('Case 1', {\n        id,\n        scrollPosition,\n      });\n      scrollableRef.current.scrollTop = scrollPosition;\n    } else if (scrollOffsets.current) {\n      const newScrollOffsets = {\n        offsetTop: heroStatusRef.current?.offsetTop,\n        scrollTop: scrollableRef.current?.scrollTop,\n      };\n      const newScrollTop =\n        newScrollOffsets.offsetTop -\n        scrollOffsets.current.offsetTop +\n        newScrollOffsets.scrollTop;\n      console.debug('Case 2', {\n        scrollOffsets: scrollOffsets.current,\n        newScrollOffsets,\n        newScrollTop,\n        statuses: [...statuses],\n      });\n      scrollableRef.current.scrollTop = newScrollTop;\n    } else if (statuses.length === 1) {\n      console.debug('Case 3', {\n        id,\n      });\n      scrollableRef.current.scrollTop = 0;\n    }\n\n    // RESET\n    scrollOffsets.current = null;\n  }, [statuses]);\n\n  useEffect(() => {\n    if (snapStates.reloadStatusPage <= 0) return;\n    // Delete the cache for the context\n    (async () => {\n      try {\n        const { instanceURL } = getCurrentAccount();\n        const contextURL = `https://${instanceURL}/api/v1/statuses/${id}/context`;\n        console.log('Clear cache', contextURL);\n        const apiCache = await caches.open('api');\n        await apiCache.delete(contextURL, { ignoreVary: true });\n\n        return initContext({\n          reloadHero: true,\n        });\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [snapStates.reloadStatusPage]);\n\n  useEffect(() => {\n    return () => {\n      // RESET\n      scrollPositions = {};\n      states.reloadStatusPage = 0;\n      cachedStatusesMap = {};\n      cachedRepliesToggle = {};\n      statusWeightCache.clear();\n    };\n  }, []);\n\n  const heroStatus = snapStates.statuses[sKey] || snapStates.statuses[id];\n  const heroDisplayName = useMemo(() => {\n    // Remove shortcodes from display name\n    if (!heroStatus) return '';\n    const { account } = heroStatus;\n    const div = document.createElement('div');\n    div.innerHTML = account.displayName;\n    return div.innerText.trim();\n  }, [heroStatus]);\n  const heroContentText = useMemo(() => {\n    if (!heroStatus) return '';\n    let text = statusPeek(heroStatus);\n    if (text.length > 64) {\n      // \"The title should ideally be less than 64 characters in length\"\n      // https://www.w3.org/Provider/Style/TITLE.html\n      text = text.slice(0, 64) + '…';\n    }\n    return text;\n  }, [heroStatus]);\n  useTitle(\n    heroDisplayName && heroContentText\n      ? `${heroDisplayName}: \"${heroContentText}\"`\n      : 'Status',\n    '/:instance?/s/:id',\n  );\n\n  const postInstance = useMemo(() => {\n    if (!heroStatus) return;\n    const { url } = heroStatus;\n    if (!url) return;\n    return new URL(url).hostname;\n  }, [heroStatus]);\n  const postSameInstance = useMemo(() => {\n    if (!postInstance) return;\n    return postInstance === instance;\n  }, [postInstance, instance]);\n\n  const [limit, setLimit] = useState(LIMIT);\n  const showMore = useMemo(() => {\n    // return number of statuses to show\n    return statuses.length - limit;\n  }, [statuses.length, limit]);\n\n  const hasDescendants = statuses.some((s) => s.descendant);\n  const ancestors = statuses.filter((s) => s.ancestor);\n\n  const [heroInView, setHeroInView] = useState(true);\n  const onView = useDebouncedCallback(setHeroInView, 100);\n  const heroPointer = useMemo(() => {\n    // get top offset of heroStatus\n    if (!heroStatusRef.current || heroInView) return null;\n    const { top } = heroStatusRef.current.getBoundingClientRect();\n    return top > 0 ? 'down' : 'up';\n  }, [heroInView]);\n\n  useHotkeys(\n    'esc',\n    () => {\n      location.hash = closeLink;\n    },\n    {\n      // If media is open, esc to close media first\n      // Else close the status page\n      enabled: !showMedia,\n      ignoreEventWhen: (e) => {\n        const hasModal = !!document.querySelector('#modal-container > *');\n        return hasModal;\n      },\n    },\n  );\n  // For backspace, will always close both media and status page\n  useHotkeys('backspace', () => {\n    location.hash = closeLink;\n  });\n\n  useHotkeys('j', () => {\n    const activeStatus = document.activeElement.closest(\n      '.status-link, .status-focus',\n    );\n    const activeStatusRect = activeStatus?.getBoundingClientRect();\n    const allStatusLinks = Array.from(\n      scrollableRef.current.querySelectorAll(STATUSES_SELECTOR),\n    );\n    console.log({ allStatusLinks });\n    if (\n      activeStatus &&\n      activeStatusRect.top < scrollableRef.current.clientHeight &&\n      activeStatusRect.bottom > 0\n    ) {\n      const activeStatusIndex = allStatusLinks.indexOf(activeStatus);\n      let nextStatus = allStatusLinks[activeStatusIndex + 1];\n      if (nextStatus) {\n        nextStatus.focus();\n        nextStatus.scrollIntoView(scrollIntoViewOptions);\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostStatusLink = allStatusLinks.find((statusLink) => {\n        const statusLinkRect = statusLink.getBoundingClientRect();\n        return statusLinkRect.top >= 44 && statusLinkRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostStatusLink) {\n        topmostStatusLink.focus();\n        topmostStatusLink.scrollIntoView(scrollIntoViewOptions);\n      }\n    }\n  });\n\n  useHotkeys('k', () => {\n    const activeStatus = document.activeElement.closest(\n      '.status-link, .status-focus',\n    );\n    const activeStatusRect = activeStatus?.getBoundingClientRect();\n    const allStatusLinks = Array.from(\n      scrollableRef.current.querySelectorAll(STATUSES_SELECTOR),\n    );\n    if (\n      activeStatus &&\n      activeStatusRect.top < scrollableRef.current.clientHeight &&\n      activeStatusRect.bottom > 0\n    ) {\n      const activeStatusIndex = allStatusLinks.indexOf(activeStatus);\n      let prevStatus = allStatusLinks[activeStatusIndex - 1];\n      if (prevStatus) {\n        prevStatus.focus();\n        prevStatus.scrollIntoView(scrollIntoViewOptions);\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostStatusLink = allStatusLinks.find((statusLink) => {\n        const statusLinkRect = statusLink.getBoundingClientRect();\n        return statusLinkRect.top >= 44 && statusLinkRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostStatusLink) {\n        topmostStatusLink.focus();\n        topmostStatusLink.scrollIntoView(scrollIntoViewOptions);\n      }\n    }\n  });\n\n  // NOTE: I'm not sure if 'x' is the best shortcut for this, might change it later\n  // IDEA: x is for expand\n  useHotkeys('x', () => {\n    const activeStatus = document.activeElement.closest(\n      '.status-link, .status-focus',\n    );\n    if (activeStatus) {\n      const details = activeStatus.nextElementSibling;\n      if (details && details.tagName.toLowerCase() === 'details') {\n        details.open = !details.open;\n      }\n    }\n  });\n\n  const { nearReachStart } = useScroll({\n    scrollableRef,\n    distanceFromStartPx: 16,\n  });\n\n  const initialPageState = useRef(showMedia ? 'media+status' : 'status');\n\n  const handleMediaClick = useCallback(\n    (e, i, media, status) => {\n      e.preventDefault();\n      e.stopPropagation();\n      setSearchParams({\n        media: i + 1,\n        mediaStatusID: status.id,\n      });\n    },\n    [id],\n  );\n\n  const handleStatusLinkClick = useCallback((e, status) => {\n    resetScrollPosition(status.id);\n  }, []);\n\n  useEffect(() => {\n    let timer;\n    if (mediaStatusID && showMedia) {\n      timer = setTimeout(() => {\n        const status = scrollableRef.current?.querySelector(\n          `.status-link[href*=\"/${mediaStatusID}\"]`,\n        );\n        if (status) {\n          status.scrollIntoView(scrollIntoViewOptions);\n        }\n      }, 400); // After CSS transition\n    }\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [mediaStatusID, showMedia]);\n\n  const renderStatus = useCallback(\n    (status) => {\n      const {\n        id: statusID,\n        ancestor,\n        isThread,\n        descendant,\n        thread,\n        replies,\n        repliesCount,\n        weight,\n      } = status;\n      const isHero = statusID === id;\n      // const StatusParent = useCallback(\n      //   (props) =>\n      //     isThread || thread || ancestor ? (\n      //       <Link\n      //         class=\"status-link\"\n      //         to={\n      //           instance ? `/${instance}/s/${statusID}` : `/s/${statusID}`\n      //         }\n      //         onClick={() => {\n      //           resetScrollPosition(statusID);\n      //         }}\n      //         {...props}\n      //       />\n      //     ) : (\n      //       <div class=\"status-focus\" tabIndex={0} {...props} />\n      //     ),\n      //   [isThread, thread],\n      // );\n      return (\n        <li\n          key={statusID}\n          ref={isHero ? heroStatusRef : null}\n          class={`${ancestor ? 'ancestor' : ''} ${\n            descendant ? 'descendant' : ''\n          } ${thread ? 'thread' : ''} ${isHero ? 'hero' : ''}`}\n        >\n          {isHero ? (\n            <>\n              <InView\n                threshold={0.1}\n                onChange={onView}\n                class=\"status-focus\"\n                tabIndex={0}\n              >\n                <Status\n                  statusID={statusID}\n                  instance={instance}\n                  withinContext\n                  size=\"l\"\n                  enableTranslate\n                  forceTranslate={translate}\n                />\n              </InView>\n              {uiState !== 'loading' && !authenticated ? (\n                <div class=\"post-status-banner\">\n                  <p>\n                    You're not logged in. Interactions (reply, boost, etc) are\n                    not possible.\n                  </p>\n                  <Link to=\"/login\" class=\"button\">\n                    Log in\n                  </Link>\n                </div>\n              ) : (\n                !sameInstance && (\n                  <div class=\"post-status-banner\">\n                    <p>\n                      This post is from another instance (<b>{instance}</b>).\n                      Interactions (reply, boost, etc) are not possible.\n                    </p>\n                    <button\n                      type=\"button\"\n                      disabled={uiState === 'loading'}\n                      onClick={() => {\n                        setUIState('loading');\n                        (async () => {\n                          try {\n                            const results = await currentMasto.v2.search.fetch({\n                              q: heroStatus.url,\n                              type: 'statuses',\n                              resolve: true,\n                              limit: 1,\n                            });\n                            if (results.statuses.length) {\n                              const status = results.statuses[0];\n                              location.hash = currentInstance\n                                ? `/${currentInstance}/s/${status.id}`\n                                : `/s/${status.id}`;\n                            } else {\n                              throw new Error('No results');\n                            }\n                          } catch (e) {\n                            setUIState('default');\n                            alert('Error: ' + e);\n                            console.error(e);\n                          }\n                        })();\n                      }}\n                    >\n                      <Icon icon=\"transfer\" /> Switch to my instance to enable\n                      interactions\n                    </button>\n                  </div>\n                )\n              )}\n            </>\n          ) : (\n            // <StatusParent>\n            <Link\n              class=\"status-link\"\n              to={instance ? `/${instance}/s/${statusID}` : `/s/${statusID}`}\n              onClick={() => {\n                resetScrollPosition(statusID);\n              }}\n            >\n              <Status\n                statusID={statusID}\n                instance={instance}\n                withinContext\n                size={thread || ancestor ? 'm' : 's'}\n                enableTranslate\n                onMediaClick={handleMediaClick}\n                onStatusLinkClick={handleStatusLinkClick}\n              />\n              {ancestor && isThread && repliesCount > 1 && (\n                <div class=\"replies-link\">\n                  <Icon icon=\"comment2\" />{' '}\n                  <span title={repliesCount}>\n                    {shortenNumber(repliesCount)}\n                  </span>\n                </div>\n              )}{' '}\n              {/* {replies?.length > LIMIT && (\n                        <div class=\"replies-link\">\n                          <Icon icon=\"comment\" />{' '}\n                          <span title={replies.length}>\n                            {shortenNumber(replies.length)}\n                          </span>\n                        </div>\n                      )} */}\n              {/* </StatusParent> */}\n            </Link>\n          )}\n          {descendant && replies?.length > 0 && (\n            <SubComments\n              instance={instance}\n              replies={replies}\n              hasParentThread={thread}\n              level={1}\n              accWeight={weight}\n              openAll={totalDescendants.current < SUBCOMMENTS_OPEN_ALL_LIMIT}\n            />\n          )}\n          {uiState === 'loading' &&\n            isHero &&\n            !!heroStatus?.repliesCount &&\n            !hasDescendants && (\n              <div class=\"status-loading\">\n                <Loader />\n              </div>\n            )}\n          {uiState === 'error' &&\n            isHero &&\n            !!heroStatus?.repliesCount &&\n            !hasDescendants && (\n              <div class=\"status-error\">\n                Unable to load replies.\n                <br />\n                <button\n                  type=\"button\"\n                  class=\"plain\"\n                  onClick={() => {\n                    states.reloadStatusPage++;\n                  }}\n                >\n                  Try again\n                </button>\n              </div>\n            )}\n        </li>\n      );\n    },\n    [\n      id,\n      instance,\n      uiState,\n      authenticated,\n      sameInstance,\n      translate,\n      handleMediaClick,\n      handleStatusLinkClick,\n      hasDescendants,\n    ],\n  );\n\n  const prevLocationIsStatusPage = useMemo(() => {\n    // Navigation API\n    if ('navigation' in window && navigation?.entries) {\n      const prevEntry = navigation.entries()[navigation.currentEntry.index - 1];\n      if (prevEntry?.url) {\n        return STATUS_URL_REGEX.test(prevEntry.url);\n      }\n    }\n    return STATUS_URL_REGEX.test(states.prevLocation?.pathname);\n  }, [sKey]);\n\n  return (\n    <div\n      tabIndex=\"-1\"\n      ref={scrollableRef}\n      class={`status-deck deck contained ${\n        statuses.length > 1 ? 'padded-bottom' : ''\n      } ${\n        initialPageState.current === 'status' && !firstLoad.current\n          ? 'slide-in'\n          : ''\n      } ${viewMode ? `deck-view-${viewMode}` : ''}`}\n      onAnimationEnd={(e) => {\n        // Fix the bounce effect when switching viewMode\n        // `slide-in` animation kicks in when switching viewMode\n        if (initialPageState.current === 'status') {\n          // e.target.classList.remove('slide-in');\n          initialPageState.current = null;\n        }\n      }}\n    >\n      <header\n        class={`${heroInView ? 'inview' : ''} ${\n          uiState === 'loading' ? 'loading' : ''\n        }`}\n        onDblClick={(e) => {\n          // reload statuses\n          states.reloadStatusPage++;\n        }}\n      >\n        {/* <div>\n            <Link class=\"button plain deck-close\" href={closeLink}>\n              <Icon icon=\"chevron-left\" size=\"xl\" />\n            </Link>\n          </div> */}\n        <div class=\"header-grid header-grid-2\">\n          <h1>\n            {prevLocationIsStatusPage && (\n              <button\n                type=\"button\"\n                class=\"plain deck-back\"\n                onClick={() => {\n                  history.back();\n                }}\n              >\n                <Icon icon=\"chevron-left\" size=\"xl\" />\n              </button>\n            )}\n            {!heroInView && heroStatus && uiState !== 'loading' ? (\n              <>\n                <span class=\"hero-heading\">\n                  <NameText\n                    account={heroStatus.account}\n                    instance={instance}\n                    showAvatar\n                    short\n                  />{' '}\n                  <span class=\"insignificant\">\n                    &bull;{' '}\n                    <RelativeTime\n                      datetime={heroStatus.createdAt}\n                      format=\"micro\"\n                    />\n                  </span>\n                </span>{' '}\n                <button\n                  type=\"button\"\n                  class=\"ancestors-indicator light small\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    heroStatusRef.current.scrollIntoView({\n                      behavior: 'smooth',\n                      block: 'start',\n                    });\n                  }}\n                  title=\"Go to main post\"\n                >\n                  <Icon\n                    icon={heroPointer === 'down' ? 'arrow-down' : 'arrow-up'}\n                  />\n                </button>\n              </>\n            ) : (\n              <>\n                Post{' '}\n                <button\n                  type=\"button\"\n                  class=\"ancestors-indicator light small\"\n                  onClick={(e) => {\n                    // Scroll to top\n                    e.preventDefault();\n                    e.stopPropagation();\n                    scrollableRef.current.scrollTo({\n                      top: 0,\n                      behavior: 'smooth',\n                    });\n                  }}\n                  hidden={!ancestors.length || nearReachStart}\n                  title={`${ancestors.length} posts above ‒ Go to top`}\n                >\n                  <Icon icon=\"arrow-up\" />\n                  {ancestors\n                    .filter(\n                      (a, i, arr) =>\n                        arr.findIndex((b) => b.accountID === a.accountID) === i,\n                    )\n                    .slice(0, 3)\n                    .map((ancestor) => (\n                      <Avatar\n                        key={ancestor.account.id}\n                        url={ancestor.account.avatar}\n                        alt={ancestor.account.displayName}\n                      />\n                    ))}\n                  {/* <Icon icon=\"comment\" />{' '} */}\n                  {ancestors.length > 3 && (\n                    <>\n                      {' '}\n                      <span class=\"insignificant\">\n                        {shortenNumber(ancestors.length)}\n                      </span>\n                    </>\n                  )}\n                </button>\n              </>\n            )}\n          </h1>\n          <div class=\"header-side\">\n            <button\n              type=\"button\"\n              class=\"plain4 button-switch-view\"\n              style={{\n                display: viewMode === 'full' ? '' : 'none',\n              }}\n              onClick={() => {\n                setViewMode(null);\n                searchParams.delete('media');\n                searchParams.delete('media-only');\n                searchParams.delete('view');\n                setSearchParams(searchParams);\n              }}\n              title=\"Switch to Side Peek view\"\n            >\n              <Icon icon=\"layout4\" size=\"l\" />\n            </button>\n            <Menu2\n              align=\"end\"\n              portal={{\n                // Need this, else the menu click will cause scroll jump\n                target: scrollableRef.current,\n              }}\n              menuButton={\n                <button type=\"button\" class=\"button plain4\">\n                  <Icon icon=\"more\" alt=\"Actions\" size=\"xl\" />\n                </button>\n              }\n            >\n              <MenuItem\n                disabled={uiState === 'loading'}\n                onClick={() => {\n                  states.reloadStatusPage++;\n                }}\n              >\n                <Icon icon=\"refresh\" />\n                <span>Refresh</span>\n              </MenuItem>\n              <MenuItem\n                className=\"menu-switch-view\"\n                onClick={() => {\n                  setViewMode(viewMode === 'full' ? null : 'full');\n                  searchParams.delete('media');\n                  searchParams.delete('media-only');\n                  if (viewMode === 'full') {\n                    searchParams.delete('view');\n                  } else {\n                    searchParams.set('view', 'full');\n                  }\n                  setSearchParams(searchParams);\n                }}\n              >\n                <Icon\n                  icon={\n                    {\n                      '': 'layout5',\n                      full: 'layout4',\n                    }[viewMode || '']\n                  }\n                />\n                <span>\n                  Switch to {viewMode === 'full' ? 'Side Peek' : 'Full'} view\n                </span>\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  // Click all buttons with class .spoiler but not .spoiling\n                  const buttons = Array.from(\n                    scrollableRef.current.querySelectorAll(\n                      'button.spoiler:not(.spoiling)',\n                    ),\n                  );\n                  buttons.forEach((button) => {\n                    button.click();\n                  });\n                }}\n              >\n                <Icon icon=\"eye-open\" /> <span>Show all sensitive content</span>\n              </MenuItem>\n              <MenuDivider />\n              <MenuHeader className=\"plain\">Experimental</MenuHeader>\n              <MenuItem\n                disabled={!postInstance || postSameInstance}\n                onClick={() => {\n                  const statusURL = getInstanceStatusURL(heroStatus.url);\n                  if (statusURL) {\n                    location.hash = statusURL;\n                  } else {\n                    alert('Unable to switch');\n                  }\n                }}\n              >\n                <Icon icon=\"transfer\" />\n                <small class=\"menu-double-lines\">\n                  Switch to post's instance\n                  {postInstance ? (\n                    <>\n                      {' '}\n                      (<b>{postInstance}</b>)\n                    </>\n                  ) : (\n                    ''\n                  )}\n                </small>\n              </MenuItem>\n            </Menu2>\n            <Link class=\"button plain deck-close\" to={closeLink}>\n              <Icon icon=\"x\" size=\"xl\" />\n            </Link>\n          </div>\n        </div>\n      </header>\n      {!!statuses.length && heroStatus ? (\n        <ul\n          class={`timeline flat contextual grow ${\n            uiState === 'loading' ? 'loading' : ''\n          }`}\n        >\n          {statuses.slice(0, limit).map(renderStatus)}\n          {showMore > 0 && (\n            <li>\n              <button\n                type=\"button\"\n                class=\"plain block show-more\"\n                disabled={uiState === 'loading'}\n                onClick={() => setLimit((l) => l + LIMIT)}\n                style={{ marginBlockEnd: '6em' }}\n                data-state-post-ids={statuses\n                  .slice(limit)\n                  .map((s) => statusKey(s.id, instance))\n                  .join(' ')}\n              >\n                <div class=\"ib avatars-bunch\">\n                  {/* show avatars for first 5 statuses */}\n                  {statuses.slice(limit, limit + 5).map((status) => (\n                    <Avatar\n                      key={status.id}\n                      url={status.account.avatarStatic}\n                      // title={`${status.avatar.displayName} (@${status.avatar.acct})`}\n                    />\n                  ))}\n                </div>{' '}\n                <div class=\"ib\">\n                  Show more&hellip;{' '}\n                  <span class=\"tag\">\n                    {showMore > LIMIT ? `${LIMIT}+` : showMore}\n                  </span>\n                </div>\n              </button>\n            </li>\n          )}\n        </ul>\n      ) : (\n        <>\n          {uiState === 'loading' && (\n            <ul class=\"timeline flat contextual grow loading\">\n              <li>\n                <Status skeleton size=\"l\" />\n              </li>\n            </ul>\n          )}\n          {uiState === 'error' && (\n            <p class=\"ui-state\">\n              Unable to load post\n              <br />\n              <br />\n              <button\n                type=\"button\"\n                onClick={() => {\n                  states.reloadStatusPage++;\n                }}\n              >\n                Try again\n              </button>\n            </p>\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n\nfunction SubComments({\n  replies,\n  instance,\n  hasParentThread,\n  level,\n  accWeight,\n  openAll,\n}) {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  // Total comments count, including sub-replies\n  const diveDeep = (replies) => {\n    return replies.reduce((acc, reply) => {\n      const { repliesCount, replies } = reply;\n      const count = replies?.length || repliesCount;\n      return acc + count + diveDeep(replies || []);\n    }, 0);\n  };\n  const totalComments = replies.length + diveDeep(replies);\n  const sameCount = replies.length === totalComments;\n\n  // Get the first 3 accounts, unique by id\n  const accounts = replies\n    .map((r) => r.account)\n    .filter((a, i, arr) => arr.findIndex((b) => b.id === a.id) === i)\n    .slice(0, 3);\n\n  const totalWeight = useMemo(() => {\n    return replies?.reduce((acc, reply) => {\n      return acc + reply?.weight;\n    }, accWeight);\n  }, [accWeight, replies?.length]);\n\n  let open = false;\n  if (openAll) {\n    open = true;\n  } else if (totalWeight <= MAX_WEIGHT) {\n    open = true;\n  } else if (!hasParentThread && totalComments === 1) {\n    const shortReply = calcStatusWeight(replies[0]) < 2;\n    if (shortReply) open = true;\n  }\n  const openBefore = cachedRepliesToggle[replies[0].id];\n\n  const handleMediaClick = useCallback((e, i, media, status) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setSearchParams({\n      media: i + 1,\n      mediaStatusID: status.id,\n    });\n  }, []);\n\n  const detailsRef = useRef();\n  useLayoutEffect(() => {\n    function handleScroll(e) {\n      e.target.dataset.scrollLeft = e.target.scrollLeft;\n    }\n    detailsRef.current?.addEventListener('scroll', handleScroll, {\n      passive: true,\n    });\n    return () => {\n      detailsRef.current?.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n\n  return (\n    <details\n      ref={detailsRef}\n      class=\"replies\"\n      open={openBefore || open}\n      onToggle={(e) => {\n        const { open } = e.target;\n        // use first reply as ID\n        cachedRepliesToggle[replies[0].id] = open;\n      }}\n      style={{\n        '--comments-level': level,\n      }}\n      data-comments-level={level}\n      data-comments-level-overflow={level > 4}\n    >\n      <summary class=\"replies-summary\" hidden={open}>\n        <span class=\"avatars\">\n          {accounts.map((a) => (\n            <Avatar\n              key={a.id}\n              url={a.avatarStatic}\n              title={`${a.displayName} @${a.username}`}\n              squircle={a?.bot}\n            />\n          ))}\n        </span>\n        <b>\n          <span title={replies.length}>{shortenNumber(replies.length)}</span>{' '}\n          repl\n          {replies.length === 1 ? 'y' : 'ies'}\n        </b>\n        {!sameCount && totalComments > 1 && (\n          <>\n            {' '}\n            &middot;{' '}\n            <span>\n              <span title={totalComments}>{shortenNumber(totalComments)}</span>{' '}\n              comment\n              {totalComments === 1 ? '' : 's'}\n            </span>\n          </>\n        )}\n      </summary>\n      <ul>\n        {replies.map((r) => (\n          <li key={r.id}>\n            <Link\n              class=\"status-link\"\n              to={instance ? `/${instance}/s/${r.id}` : `/s/${r.id}`}\n              onClick={() => {\n                resetScrollPosition(r.id);\n              }}\n            >\n              {/* <div class=\"status-focus\" tabIndex={0}> */}\n              <Status\n                statusID={r.id}\n                instance={instance}\n                withinContext\n                size=\"s\"\n                enableTranslate\n                onMediaClick={handleMediaClick}\n              />\n              {!r.replies?.length && r.repliesCount > 0 && (\n                <div class=\"replies-link\">\n                  <Icon icon=\"comment2\" />{' '}\n                  <span title={r.repliesCount}>\n                    {shortenNumber(r.repliesCount)}\n                  </span>\n                </div>\n              )}\n              {/* </div> */}\n            </Link>\n            {r.replies?.length && (\n              <SubComments\n                instance={instance}\n                replies={r.replies}\n                level={level + 1}\n                accWeight={!open ? r.weight : totalWeight}\n                openAll={openAll}\n              />\n            )}\n          </li>\n        ))}\n      </ul>\n    </details>\n  );\n}\n\nconst MEDIA_VIRTUAL_LENGTH = 140;\nconst POLL_VIRTUAL_LENGTH = 35;\nconst CARD_VIRTUAL_LENGTH = 70;\nconst WEIGHT_SEGMENT = 140;\nconst statusWeightCache = new Map();\nfunction calcStatusWeight(status) {\n  const cachedWeight = statusWeightCache.get(status.id);\n  if (cachedWeight) return cachedWeight;\n  const { spoilerText, content, mediaAttachments, poll, card } = status;\n  const length = htmlContentLength(spoilerText + content);\n  const mediaLength = mediaAttachments?.length ? MEDIA_VIRTUAL_LENGTH : 0;\n  const pollLength = (poll?.options?.length || 0) * POLL_VIRTUAL_LENGTH;\n  const cardLength =\n    card && (mediaAttachments?.length || poll?.options?.length)\n      ? 0\n      : CARD_VIRTUAL_LENGTH;\n  const totalLength = length + mediaLength + pollLength + cardLength;\n  const weight = totalLength / WEIGHT_SEGMENT;\n  statusWeightCache.set(status.id, weight);\n  return weight;\n}\n\nexport default memo(StatusPage);\n","import { useParams } from 'react-router-dom';\n\nimport Status from './status';\n\nexport default function StatusRoute() {\n  const params = useParams();\n  const { id, instance } = params;\n  return <Status id={id} instance={instance} />;\n}\n","export default \"__VITE_ASSET__W5CngKHO__\"","export default \"__VITE_ASSET__vmqRZ5q5__\"","export default \"__VITE_ASSET__DFAo1Udm__\"","export default \"__VITE_ASSET__D2_o1n6___\"","export default \"__VITE_ASSET__ySLnBMku__\"","export default \"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20xml:space='preserve'%20fill-rule='evenodd'%20stroke-linejoin='round'%20stroke-miterlimit='2'%20clip-rule='evenodd'%20viewBox='0%200%20102%2028'%3e%3cpath%20fill='none'%20d='M0%200h101.5v27.5H0z'/%3e%3cg%20fill-rule='nonzero'%3e%3cpath%20fill='url(%23a)'%20d='M2.32%2021.85c1.4%200%202.21-.85%202.21-2.3v-4.64H8.5c4.45%200%207.54-2.9%207.54-7.24%200-4.35-2.98-7.24-7.32-7.24h-6.4C.93.43.11%201.28.11%202.73v16.82c0%201.45.82%202.3%202.21%202.3Zm2.21-10.4V3.94h3c2.54%200%204%201.34%204%203.75s-1.47%203.76-4%203.76h-3Z'/%3e%3cpath%20fill='url(%23b)'%20d='M20.52%2021.88c1.25%200%202.13-.76%202.13-2.23v-7.04c0-2.07%201.2-3.49%203.21-3.49%201.95%200%202.95%201.23%202.95%203.25v7.28c0%201.47.89%202.23%202.13%202.23%201.26%200%202.14-.76%202.14-2.23v-8.18c0-3.64-1.99-5.9-5.48-5.9-2.38%200-4.1%201.12-4.93%203.1h-.09V2.3c0-1.38-.78-2.2-2.1-2.2-1.31%200-2.1.82-2.1%202.2v17.34c0%201.47.9%202.23%202.14%202.23Z'/%3e%3cpath%20fill='url(%23c)'%20d='M40.45%2021.82c1.96%200%203.93-.98%204.8-2.65h.1v.8c.08%201.27.89%201.91%202.05%201.91%201.21%200%202.08-.73%202.08-2.15v-8.95c0-3.17-2.63-5.25-6.65-5.25-3.26%200-5.78%201.16-6.5%203.04-.15.32-.23.63-.23.96%200%20.97.75%201.64%201.79%201.64.69%200%201.23-.26%201.7-.79.95-1.23%201.74-1.65%203.04-1.65%201.62%200%202.64.85%202.64%202.31v1.04l-3.95.24c-3.93.23-6.13%201.88-6.13%204.74%200%202.83%202.27%204.76%205.26%204.76Zm1.4-3.09c-1.43%200-2.4-.73-2.4-1.9%200-1.12.91-1.83%202.51-1.95l3.31-.2v1.14c0%201.7-1.54%202.91-3.41%202.91Z'/%3e%3cpath%20fill='url(%23d)'%20d='M54.37%2021.88c1.26%200%202.14-.76%202.14-2.23v-7.09c0-2.03%201.21-3.44%203.13-3.44s2.89%201.17%202.89%203.22v7.31c0%201.47.88%202.23%202.14%202.23%201.24%200%202.13-.76%202.13-2.23v-8.2c0-3.68-1.96-5.87-5.45-5.87-2.41%200-4%201.07-4.83%203.01h-.09v-.87c0-1.35-.85-2.17-2.14-2.17-1.28%200-2.06.82-2.06%202.15v11.95c0%201.47.9%202.23%202.14%202.23Z'/%3e%3cpath%20fill='url(%23e)'%20d='M71.65%2027.17c1.26%200%202.14-.76%202.14-2.23v-6h.09a5.15%205.15%200%200%200%204.88%202.88c3.92%200%206.35-3.05%206.35-8.1%200-5.07-2.44-8.1-6.43-8.1a5.12%205.12%200%200%200-4.86%202.99h-.09v-.85c0-1.45-.88-2.21-2.1-2.21-1.24%200-2.11.76-2.11%202.2v17.2c0%201.46.89%202.22%202.13%202.22Zm5.6-8.8c-2.1%200-3.47-1.8-3.47-4.65%200-2.81%201.37-4.67%203.47-4.67%202.14%200%203.49%201.83%203.49%204.67%200%202.86-1.35%204.66-3.5%204.66Z'/%3e%3cpath%20fill='url(%23f)'%20d='M89.61%2027.39c3.44%200%205.26-1.5%206.73-5.55l4.81-13.1a4%204%200%200%200%20.24-1.26c0-1.13-.85-1.93-2.08-1.93-1.1%200-1.71.51-2.07%201.7l-3.4%2010.9h-.08L90.35%207.28c-.36-1.25-.94-1.73-2.07-1.73-1.26%200-2.21.83-2.21%201.99%200%20.35.09.82.25%201.26l5%2013.21-.21.56c-.52%201.1-1.32%201.42-2.07%201.42l-.75-.01c-.96%200-1.56.54-1.56%201.4%200%201.29%201%202%202.88%202Z'/%3e%3c/g%3e%3cdefs%3e%3cradialGradient%20id='a'%20cx='0'%20cy='0'%20r='1'%20gradientTransform='rotate(28.51%20.06%20.22)%20scale(57.6252)'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20offset='0'%20stop-color='%23a4bff7'/%3e%3cstop%20offset='1'%20stop-color='%236081e6'/%3e%3c/radialGradient%3e%3cradialGradient%20id='b'%20cx='0'%20cy='0'%20r='1'%20gradientTransform='rotate(28.51%20.06%20.22)%20scale(57.6252)'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20offset='0'%20stop-color='%23a4bff7'/%3e%3cstop%20offset='1'%20stop-color='%236081e6'/%3e%3c/radialGradient%3e%3cradialGradient%20id='c'%20cx='0'%20cy='0'%20r='1'%20gradientTransform='rotate(28.51%20.06%20.22)%20scale(57.6252)'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20offset='0'%20stop-color='%23a4bff7'/%3e%3cstop%20offset='1'%20stop-color='%236081e6'/%3e%3c/radialGradient%3e%3cradialGradient%20id='d'%20cx='0'%20cy='0'%20r='1'%20gradientTransform='rotate(28.51%20.06%20.22)%20scale(57.6252)'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20offset='0'%20stop-color='%23a4bff7'/%3e%3cstop%20offset='1'%20stop-color='%236081e6'/%3e%3c/radialGradient%3e%3cradialGradient%20id='e'%20cx='0'%20cy='0'%20r='1'%20gradientTransform='rotate(28.51%20.06%20.22)%20scale(57.6252)'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20offset='0'%20stop-color='%23a4bff7'/%3e%3cstop%20offset='1'%20stop-color='%236081e6'/%3e%3c/radialGradient%3e%3cradialGradient%20id='f'%20cx='0'%20cy='0'%20r='1'%20gradientTransform='rotate(28.51%20.06%20.22)%20scale(57.6252)'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20offset='0'%20stop-color='%23a4bff7'/%3e%3cstop%20offset='1'%20stop-color='%236081e6'/%3e%3c/radialGradient%3e%3c/defs%3e%3c/svg%3e\"","import './welcome.css';\n\nimport boostsCarouselUrl from '../assets/features/boosts-carousel.jpg';\nimport groupedNotificationsUrl from '../assets/features/grouped-notifications.jpg';\nimport multiColumnUrl from '../assets/features/multi-column.jpg';\nimport multiHashtagTimelineUrl from '../assets/features/multi-hashtag-timeline.jpg';\nimport nestedCommentsThreadUrl from '../assets/features/nested-comments-thread.jpg';\nimport logoText from '../assets/logo-text.svg';\nimport logo from '../assets/logo.svg';\n\nimport Link from '../components/link';\nimport states from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nfunction Welcome() {\n  useTitle(null, ['/', '/welcome']);\n  return (\n    <main id=\"welcome\">\n      <div class=\"hero-container\">\n        <h1>\n          <img\n            src={logo}\n            alt=\"\"\n            width=\"200\"\n            height=\"200\"\n            style={{\n              aspectRatio: '1/1',\n              marginBlockEnd: -16,\n            }}\n          />\n          <img src={logoText} alt=\"Phanpy\" width=\"250\" />\n        </h1>\n        <p>\n          <big>\n            <b>\n              <Link to=\"/login\" class=\"button\">\n                Log in\n              </Link>\n            </b>\n          </big>\n        </p>\n        <p class=\"desc\">A minimalistic opinionated Mastodon web client.</p>\n      </div>\n      <div id=\"why-container\">\n        <div class=\"sections\">\n          <section>\n            <img\n              src={boostsCarouselUrl}\n              alt=\"Screenshot of Boosts Carousel\"\n              loading=\"lazy\"\n            />\n            <h4>Boosts Carousel</h4>\n            <p>\n              Visually separate original posts and re-shared posts (boosted\n              posts).\n            </p>\n          </section>\n          <section>\n            <img\n              src={nestedCommentsThreadUrl}\n              alt=\"Screenshot of nested comments thread\"\n              loading=\"lazy\"\n            />\n            <h4>Nested comments thread</h4>\n            <p>Effortlessly follow conversations. Semi-collapsible replies.</p>\n          </section>\n          <section>\n            <img\n              src={groupedNotificationsUrl}\n              alt=\"Screenshot of grouped notifications\"\n              loading=\"lazy\"\n            />\n            <h4>Grouped notifications</h4>\n            <p>\n              Similar notifications are grouped and collapsed to reduce clutter.\n            </p>\n          </section>\n          <section>\n            <img\n              src={multiColumnUrl}\n              alt=\"Screenshot of multi-column UI\"\n              loading=\"lazy\"\n            />\n            <h4>Single or multi-column</h4>\n            <p>\n              By default, single column for zen-mode seekers. Configurable\n              multi-column for power users.\n            </p>\n          </section>\n          <section>\n            <img\n              src={multiHashtagTimelineUrl}\n              alt=\"Screenshot of multi-hashtag timeline with a form to add more hashtags\"\n              loading=\"lazy\"\n            />\n            <h4>Multi-hashtag timeline</h4>\n            <p>Up to 5 hashtags combined into a single timeline.</p>\n          </section>\n        </div>\n      </div>\n      <footer>\n        <hr />\n        <p>\n          <a href=\"https://github.com/cheeaun/phanpy\" target=\"_blank\">\n            Built\n          </a>{' '}\n          by{' '}\n          <a\n            href=\"https://mastodon.social/@cheeaun\"\n            target=\"_blank\"\n            onClick={(e) => {\n              e.preventDefault();\n              states.showAccount = 'cheeaun@mastodon.social';\n            }}\n          >\n            @cheeaun\n          </a>\n          .{' '}\n          <a\n            href=\"https://github.com/cheeaun/phanpy/blob/main/PRIVACY.MD\"\n            target=\"_blank\"\n          >\n            Privacy Policy\n          </a>\n          .\n        </p>\n      </footer>\n    </main>\n  );\n}\n\nexport default Welcome;\n","// Replace alert() with toastify-js\nimport Toastify from 'toastify-js';\n\nconst nativeAlert = window.alert;\nif (!window.__nativeAlert) window.__nativeAlert = nativeAlert;\n\nwindow.alert = function (message) {\n  console.debug(\n    'ALERT: This is a custom alert() function. Native alert() is still available as window.__nativeAlert()',\n  );\n  // If Error object, show the message\n  if (message instanceof Error && message?.message) {\n    message = message.message;\n  }\n  // If not string, stringify it\n  if (typeof message !== 'string') {\n    message = JSON.stringify(message);\n  }\n\n  const toast = Toastify({\n    text: message,\n    className: 'alert',\n    gravity: 'top',\n    position: 'center',\n    duration: 10_000,\n    offset: {\n      y: 48,\n    },\n    onClick: () => {\n      toast.hideToast();\n    },\n  });\n  toast.showToast();\n};\n","import './app.css';\n\nimport debounce from 'just-debounce-it';\nimport {\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'preact/hooks';\nimport { matchPath, Route, Routes, useLocation } from 'react-router-dom';\nimport 'swiped-events';\nimport { subscribe } from 'valtio';\n\nimport BackgroundService from './components/background-service';\nimport ComposeButton from './components/compose-button';\nimport { ICONS } from './components/icon';\nimport KeyboardShortcutsHelp from './components/keyboard-shortcuts-help';\nimport Loader from './components/loader';\nimport Modals from './components/modals';\nimport NotificationService from './components/notification-service';\nimport SearchCommand from './components/search-command';\nimport Shortcuts from './components/shortcuts';\nimport NotFound from './pages/404';\nimport AccountStatuses from './pages/account-statuses';\nimport Bookmarks from './pages/bookmarks';\nimport Favourites from './pages/favourites';\nimport FollowedHashtags from './pages/followed-hashtags';\nimport Following from './pages/following';\nimport Hashtag from './pages/hashtag';\nimport Home from './pages/home';\nimport HttpRoute from './pages/http-route';\nimport List from './pages/list';\nimport Lists from './pages/lists';\nimport Login from './pages/login';\nimport Mentions from './pages/mentions';\nimport Notifications from './pages/notifications';\nimport Public from './pages/public';\nimport Search from './pages/search';\nimport StatusRoute from './pages/status-route';\nimport Trending from './pages/trending';\nimport Welcome from './pages/welcome';\nimport {\n  api,\n  initAccount,\n  initClient,\n  initInstance,\n  initPreferences,\n} from './utils/api';\nimport { getAccessToken } from './utils/auth';\nimport focusDeck from './utils/focus-deck';\nimport states, { initStates, statusKey } from './utils/states';\nimport store from './utils/store';\nimport { getCurrentAccount } from './utils/store-utils';\nimport './utils/toast-alert';\n\nwindow.__STATES__ = states;\nwindow.__STATES_STATS__ = () => {\n  const keys = [\n    'statuses',\n    'accounts',\n    'spoilers',\n    'unfurledLinks',\n    'statusQuotes',\n  ];\n  const counts = {};\n  keys.forEach((key) => {\n    counts[key] = Object.keys(states[key]).length;\n  });\n  console.warn('STATE stats', counts);\n\n  const { statuses } = states;\n  const unmountedPosts = [];\n  for (const key in statuses) {\n    const $post = document.querySelector(\n      `[data-state-post-id~=\"${key}\"], [data-state-post-ids~=\"${key}\"]`,\n    );\n    if (!$post) {\n      unmountedPosts.push(key);\n    }\n  }\n  console.warn('Unmounted posts', unmountedPosts.length, unmountedPosts);\n};\n\n// Experimental \"garbage collection\" for states\n// Every 15 minutes\n// Only posts for now\nsetInterval(() => {\n  if (!window.__IDLE__) return;\n  const { statuses, unfurledLinks, notifications } = states;\n  let keysCount = 0;\n  const { instance } = api();\n  for (const key in statuses) {\n    if (!window.__IDLE__) break;\n    try {\n      const $post = document.querySelector(\n        `[data-state-post-id~=\"${key}\"], [data-state-post-ids~=\"${key}\"]`,\n      );\n      const postInNotifications = notifications.some(\n        (n) => key === statusKey(n.status?.id, instance),\n      );\n      if (!$post && !postInNotifications) {\n        delete states.statuses[key];\n        delete states.statusQuotes[key];\n        for (const link in unfurledLinks) {\n          const unfurled = unfurledLinks[link];\n          const sKey = statusKey(unfurled.id, unfurled.instance);\n          if (sKey === key) {\n            delete states.unfurledLinks[link];\n            break;\n          }\n        }\n        keysCount++;\n      }\n    } catch (e) {}\n  }\n  if (keysCount) {\n    console.info(`GC: Removed ${keysCount} keys`);\n  }\n}, 15 * 60 * 1000);\n\n// Preload icons\n// There's probably a better way to do this\n// Related: https://github.com/vitejs/vite/issues/10600\nsetTimeout(() => {\n  for (const icon in ICONS) {\n    if (Array.isArray(ICONS[icon])) {\n      ICONS[icon][0]?.();\n    } else {\n      ICONS[icon]?.();\n    }\n  }\n}, 5000);\n\n(() => {\n  window.__IDLE__ = true;\n  const nonIdleEvents = [\n    'mousemove',\n    'mousedown',\n    'resize',\n    'keydown',\n    'touchstart',\n    'pointerdown',\n    'pointermove',\n    'wheel',\n  ];\n  const setIdle = () => {\n    window.__IDLE__ = true;\n  };\n  const IDLE_TIME = 3_000; // 3 seconds\n  const debouncedSetIdle = debounce(setIdle, IDLE_TIME);\n  const onNonIdle = () => {\n    window.__IDLE__ = false;\n    debouncedSetIdle();\n  };\n  nonIdleEvents.forEach((event) => {\n    window.addEventListener(event, onNonIdle, {\n      passive: true,\n      capture: true,\n    });\n  });\n  window.addEventListener('blur', setIdle, {\n    passive: true,\n  });\n  // When cursor leaves the window, set idle\n  document.documentElement.addEventListener(\n    'mouseleave',\n    (e) => {\n      if (!e.relatedTarget && !e.toElement) {\n        setIdle();\n      }\n    },\n    {\n      passive: true,\n    },\n  );\n  // document.addEventListener(\n  //   'visibilitychange',\n  //   () => {\n  //     if (document.visibilityState === 'visible') {\n  //       onNonIdle();\n  //     }\n  //   },\n  //   {\n  //     passive: true,\n  //   },\n  // );\n})();\n\nsubscribe(states, (changes) => {\n  for (const [action, path, value, prevValue] of changes) {\n    // Change #app dataset based on settings.shortcutsViewMode\n    if (path.join('.') === 'settings.shortcutsViewMode') {\n      const $app = document.getElementById('app');\n      if ($app) {\n        $app.dataset.shortcutsViewMode = states.shortcuts?.length ? value : '';\n      }\n    }\n\n    // Add/Remove cloak class to body\n    if (path.join('.') === 'settings.cloakMode') {\n      const $body = document.body;\n      $body.classList.toggle('cloak', value);\n    }\n  }\n});\n\nfunction App() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [uiState, setUIState] = useState('loading');\n\n  useLayoutEffect(() => {\n    const theme = store.local.get('theme');\n    if (theme) {\n      document.documentElement.classList.add(`is-${theme}`);\n      document\n        .querySelector('meta[name=\"color-scheme\"]')\n        .setAttribute('content', theme === 'auto' ? 'dark light' : theme);\n    }\n    const textSize = store.local.get('textSize');\n    if (textSize) {\n      document.documentElement.style.setProperty(\n        '--text-size',\n        `${textSize}px`,\n      );\n    }\n  }, []);\n\n  useEffect(() => {\n    const instanceURL = store.local.get('instanceURL');\n    const code = decodeURIComponent(\n      (window.location.search.match(/code=([^&]+)/) || [, ''])[1],\n    );\n\n    if (code) {\n      console.log({ code });\n      // Clear the code from the URL\n      window.history.replaceState({}, document.title, location.pathname || '/');\n\n      const clientID = store.session.get('clientID');\n      const clientSecret = store.session.get('clientSecret');\n      const vapidKey = store.session.get('vapidKey');\n\n      (async () => {\n        setUIState('loading');\n        const { access_token: accessToken } = await getAccessToken({\n          instanceURL,\n          client_id: clientID,\n          client_secret: clientSecret,\n          code,\n        });\n\n        const client = initClient({ instance: instanceURL, accessToken });\n        await Promise.allSettled([\n          initInstance(client, instanceURL),\n          initAccount(client, instanceURL, accessToken, vapidKey),\n        ]);\n        initStates();\n        initPreferences(client);\n\n        setIsLoggedIn(true);\n        setUIState('default');\n      })();\n    } else {\n      window.__IGNORE_GET_ACCOUNT_ERROR__ = true;\n      const account = getCurrentAccount();\n      if (account) {\n        store.session.set('currentAccount', account.info.id);\n        const { client } = api({ account });\n        const { instance } = client;\n        // console.log('masto', masto);\n        initStates();\n        initPreferences(client);\n        setUIState('loading');\n        (async () => {\n          try {\n            await initInstance(client, instance);\n          } catch (e) {\n          } finally {\n            setIsLoggedIn(true);\n            setUIState('default');\n          }\n        })();\n      } else {\n        setUIState('default');\n      }\n    }\n  }, []);\n\n  let location = useLocation();\n  states.currentLocation = location.pathname;\n  // useLayoutEffect(() => {\n  //   states.currentLocation = location.pathname;\n  // }, [location.pathname]);\n\n  useEffect(focusDeck, [location, isLoggedIn]);\n\n  if (/\\/https?:/.test(location.pathname)) {\n    return <HttpRoute />;\n  }\n\n  return (\n    <>\n      <PrimaryRoutes isLoggedIn={isLoggedIn} loading={uiState === 'loading'} />\n      <SecondaryRoutes isLoggedIn={isLoggedIn} />\n      {uiState === 'default' && (\n        <Routes>\n          <Route path=\"/:instance?/s/:id\" element={<StatusRoute />} />\n        </Routes>\n      )}\n      {isLoggedIn && <ComposeButton />}\n      {isLoggedIn && <Shortcuts />}\n      <Modals />\n      {isLoggedIn && <NotificationService />}\n      <BackgroundService isLoggedIn={isLoggedIn} />\n      {uiState !== 'loading' && <SearchCommand onClose={focusDeck} />}\n      <KeyboardShortcutsHelp />\n    </>\n  );\n}\n\nfunction PrimaryRoutes({ isLoggedIn, loading }) {\n  const location = useLocation();\n  const nonRootLocation = useMemo(() => {\n    const { pathname } = location;\n    return !/^\\/(login|welcome)/.test(pathname);\n  }, [location]);\n\n  return (\n    <Routes location={nonRootLocation || location}>\n      <Route\n        path=\"/\"\n        element={\n          isLoggedIn ? (\n            <Home />\n          ) : loading ? (\n            <Loader id=\"loader-root\" />\n          ) : (\n            <Welcome />\n          )\n        }\n      />\n      <Route path=\"/login\" element={<Login />} />\n      <Route path=\"/welcome\" element={<Welcome />} />\n    </Routes>\n  );\n}\n\nfunction getPrevLocation() {\n  return states.prevLocation || null;\n}\nfunction SecondaryRoutes({ isLoggedIn }) {\n  // const snapStates = useSnapshot(states);\n  const location = useLocation();\n  // const prevLocation = snapStates.prevLocation;\n  const backgroundLocation = useRef(getPrevLocation());\n\n  const isModalPage = useMemo(() => {\n    return (\n      matchPath('/:instance/s/:id', location.pathname) ||\n      matchPath('/s/:id', location.pathname)\n    );\n  }, [location.pathname, matchPath]);\n  if (isModalPage) {\n    if (!backgroundLocation.current)\n      backgroundLocation.current = getPrevLocation();\n  } else {\n    backgroundLocation.current = null;\n  }\n  console.debug({\n    backgroundLocation: backgroundLocation.current,\n    location,\n  });\n\n  return (\n    <Routes location={backgroundLocation.current || location}>\n      {isLoggedIn && (\n        <>\n          <Route path=\"/notifications\" element={<Notifications />} />\n          <Route path=\"/mentions\" element={<Mentions />} />\n          <Route path=\"/following\" element={<Following />} />\n          <Route path=\"/b\" element={<Bookmarks />} />\n          <Route path=\"/f\" element={<Favourites />} />\n          <Route path=\"/l\">\n            <Route index element={<Lists />} />\n            <Route path=\":id\" element={<List />} />\n          </Route>\n          <Route path=\"/ft\" element={<FollowedHashtags />} />\n        </>\n      )}\n      <Route path=\"/:instance?/t/:hashtag\" element={<Hashtag />} />\n      <Route path=\"/:instance?/a/:id\" element={<AccountStatuses />} />\n      <Route path=\"/:instance?/p\">\n        <Route index element={<Public />} />\n        <Route path=\"l\" element={<Public local />} />\n      </Route>\n      <Route path=\"/:instance?/trending\" element={<Trending />} />\n      <Route path=\"/:instance?/search\" element={<Search />} />\n      {/* <Route path=\"/:anything\" element={<NotFound />} /> */}\n    </Routes>\n  );\n}\n\nexport { App };\n","import './index.css';\n\nimport './cloak-mode.css';\n\nimport { render } from 'preact';\nimport { HashRouter } from 'react-router-dom';\n\nimport { App } from './app';\n\nif (import.meta.env.DEV) {\n  import('preact/debug');\n}\n\n// AbortSignal.timeout polyfill\n// Temporary fix from https://github.com/mo/abortcontroller-polyfill/issues/73#issuecomment-1541180943\n// Incorrect implementation, but should be good enough for now\nif ('AbortSignal' in window) {\n  AbortSignal.timeout =\n    AbortSignal.timeout ||\n    ((duration) => {\n      const controller = new AbortController();\n      setTimeout(() => controller.abort(), duration);\n      return controller.signal;\n    });\n}\n\nrender(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('app'),\n);\n\n// Storage cleanup\nsetTimeout(() => {\n  try {\n    // Clean up iconify localStorage\n    Object.keys(localStorage).forEach((key) => {\n      if (key.startsWith('iconify')) {\n        localStorage.removeItem(key);\n      }\n    });\n    Object.keys(sessionStorage).forEach((key) => {\n      if (key.startsWith('iconify')) {\n        sessionStorage.removeItem(key);\n      }\n    });\n\n    // Clean up old settings key\n    localStorage.removeItem('settings:boostsCarousel');\n  } catch (e) {}\n}, 5000);\n\nwindow.__CLOAK__ = () => {\n  document.body.classList.toggle('cloak');\n};\n"],"names":["usePageVisibility","fn","deps","savedCallback","useRef","useEffect","current","handleVisibilityChange","hidden","document","visibilityState","console","STREAMING_TIMEOUT","POLL_INTERVAL","BackgroundService","memo","isLoggedIn","visible","setVisible","useState","checkLatestNotification","masto","instance","skipCheckMarkers","states","notificationsLast","notificationsIterator","v1","notifications","list","limit","sinceId","id","value","next","length","notificationsShowNew","lastReadId","markers","fetch","timeline","sub","pollNotifications","streaming","api","hasStreaming","setTimeout","user","notification","subscribe","log","entry","_a","lastCheckDate","clearTimeout","clearInterval","r","info","visible2","useInterval","catch","checkForUpdates","useHotkeys","currentCloakMode","diff","showToast","ComposeButton","handleButton","e","shiftKey","openCompose","showCompose","ignoreEventWhen","querySelector","_jsx","type","onClick","children","Icon","icon","size","alt","KeyboardShortcutsHelp","snapStates","useSnapshot","onClose","showKeyboardShortcutsHelp","hasModal","escRef","Modal","class","_jsxs","tabindex","ref","action","keys","_Fragment","className","map","Accounts","accounts","store","local","getJSON","currentAccount","session","get","moreThanOneAccount","_","reload","useReducer","x","accountsListParent","useAutoAnimate","tabIndex","account","i","isCurrent","isDefault","Avatar","url","avatarStatic","onDblClick","$select","NameText","test","showAcct","set","Menu2","align","menuButton","title","MenuItem","MenuDivider","disabled","splice","MenuConfirm","subMenu","confirmLabel","menuItemClassName","href","Link","to","logo","createBackendPushSubscription","subscription","push","create","fetchBackendPushSubscription","updateBackendPushSubscription","update","removeBackendPushSubscription","remove","isPushSupported","navigator","window","getRegistration","serviceWorker","getSubscription","registration","pushManager","undefined","urlBase64ToUint8Array","base64String","padding","repeat","base64","replace","rawData","atob","outputArray","Uint8Array","charCodeAt","initSubscription","backendSubscription","err","message","sameEndpoint","vapidKey","sameKey","getCurrentAccount","applicationServerKey","vapidKeyStr","applicationServerKeyStr","updateSubscription","data","policy","removeSubscription","userVisibleOnly","DEFAULT_TEXT_SIZE","TEXT_SIZES","Settings","currentTheme","themeFormRef","targetLanguage","settings","contentTranslationTargetLanguage","systemTargetLanguage","getTranslateTargetLanguage","systemTargetLanguageText","localeCode2Text","currentTextSize","prefs","setPrefs","authenticated","onInput","formData","theme","documentElement","html","classList","toggle","name","defaultChecked","fontSize","min","max","step","onChange","parseInt","setProperty","for","target","alert","rel","checked","autoRefresh","boostsCarousel","contentTranslation","targetLanguages","lang","code","contentTranslationHideLanguages","cloakMode","PushNotificationsSection","display","gap","lineHeight","src","width","aspectRatio","verticalAlign","borderRadius","readOnly","__BUILD_TIME__","writeText","datetime","uiState","setUIState","allowNofitications","setAllowNotifications","setNeedRelogin","pushFormRef","needRelogin","alerts","previousPolicyRef","policyEl","elements","namedItem","Object","el","warn","values","params","mention","favourite","reblog","follow","follow_request","poll","status","key","policyChanged","alertsCount","isLoading","permission","Notification","label","alert2","focusDeck","timer","columns","getElementById","modals","querySelectorAll","modal","modalFocusElement","focus","backDrop","pages","page","useLocationChange","location","useLocation","currentLocationRef","pathname","ListAddEdit","editMode","nameFieldRef","repliesPolicyFieldRef","exclusiveFieldRef","repliesPolicy","exclusive","supportsExclusive","supports","onSubmit","preventDefault","FormData","listResult","replies_policy","MUTE_DURATIONS","MUTE_DURATIONS_LABELS","LIMIT","ACCOUNT_INFO_MAX_AGE","fetchFamiliarFollowers","currentID","familiarFollowers","memFetchFamiliarFollowers","pmem","maxAge","fetchPostingStats","accountID","fetchStatuses","statuses","total","originals","replies","stats","boosts","memFetchPostingStats","fetchAccount","standalone","currentMasto","currentInstance","isString","useMemo","setInfo","sameCurrentInstance","info2","acct","avatar","bot","createdAt","displayName","emojis","fields","group","lastStatusAt","locked","note","statusesCount","username","memorial","moved","roles","header","headerStatic","headerIsAvatar","isSelf","infoHasEssentials","account2","updated","forEach","headerCornerColors","setHeaderCornerColors","followersIterator","domain","fetchFollowers","firstLoad","familiarFollowersCache","results","familiarFollowers2","newValue","familiar","followingIterator","LinkOrDiv","accountLink","postingStats","setPostingStats","renderFamiliarFollowers","setFamiliarFollowers","postingStatsUIState","setPostingStatsUIState","hasPostingStats","followers","renderPostingStats","onRelationshipChange","AccountBlock","canvas","add","pixelDimension","createElement","ctx","g","b","height","drawImage","colors","getImageData","a","dataLength","color","lightenRGB","rgbColors","avatarSize","external","role","accountInstance","handleContentLinks","enhanceContent","verifiedAt","__html","EmojiText","follower","heading","fetchAccounts","shortenNumber","followersCount","fetchFollowing","followingCount","niceDateTime","FAMILIAR_FOLLOWERS_LIMIT","currentAuthenticated","relationship","privateNote","following","showingReblogs","notifying","followedBy","blocking","blockedBy","muting","mutingNotifications","requested","domainBlocking","endorsed","currentInfo","setIsSelf","q","fetchRelationships","relationships","setRelationshipUIState","relationship2","updateAccount","setRelationship","loading","relationshipUIState","showTranslatedBio","setShowPrivateNoteModal","showAddRemoveLists","showPrivateNoteModal","dir","setShowTranslatedBio","setShowAddRemoveLists","clipboard","share","newRelationship","openTrigger","duration","counter","Loader","confirm","AddRemoveListsSheet","PrivateNoteSheet","luminence","alpha","urlObj","host","path","TranslatedBioSheet","fieldsText","Math","getHTMLText","text","lists","setLists","listsContainingAccount","setListsContainingAccount","c","style","listsContainingAccount2","lists2","reloadCount","showListAddEditModal","setShowListAddEditModal","sort","l","inList","accountIds","result","abrupt","textareaRef","initialNote","e2","trim","AccountSheet","propInstance","AccountInfo","lookup","skip_webfinger","v2","search","resolve","URL","Drafts","drafts","setDrafts","db","ns","getCurrentAccountNS","ownKeys","filter","startsWith","getMany","Date","updatedAt","getTime","hasDrafts","draft","draftStatus","replyTo","updatedAtDate","replyToStatus","MiniDraft","spoilerText","mediaAttachments","hasPoll","options","hasMedia","firstImageMedia","media","image","file","objectURL","createObjectURL","hasPollOrMedia","GenericAccounts","setAccounts","showMore","setShowMore","showGenericAccounts","staticAccounts","showReactions","loadAccounts","done","Array","isArray","prev","reloadGenericAccounts","_types","InView","MediaAltModal","forceTranslate","setForceTranslate","differentLanguage","localeMatch","find","whiteSpace","textWrap","TranslationBlock","sourceLanguage","clamp","gammaToLinear","pow","linearToGamma","rgb2oklab","m","s","cbrt","oklab2rgb","L","round","MediaModal","statusID","index","carouselRef","currentIndex","setCurrentIndex","carouselFocusItem","useLayoutEffect","scrollIntoView","prevStatusID","scrollLeft","clientWidth","differentStatusID","scrollTo","left","behavior","showControls","setShowControls","handleSwipe","addEventListener","removeEventListener","handleScroll","passive","mediaAccentColors","blurhash","averageColor","getBlurHashAverageColor","labAverageColor","mediaAccentGradient","range","start","end","join","contains","backgroundAttachment","backgroundImage","accentColor","description","showMediaAlt","Media","showOriginal","stopPropagation","overflow","position","menuClassName","MenuLink","remoteUrl","matchMedia","matches","floatingButtonUrl","multiColumnUrl$1","tabMenuBarUrl","AsyncText","setText","Promise","then","SHORTCUTS_LIMIT","TYPES","TYPE_TEXT","public","bookmarks","favourites","hashtag","trending","mentions","TYPE_PARAMS","placeholder","notRequired","pattern","fetchListTitle","fetchAccountTitle","SHORTCUTS_META","subtitle","query","split","ShortcutsSettings","shortcuts","showForm","setShowForm","showImportExport","setShowImportExport","shortcutsListParent","opacity","textTransform","imgURL","multiColumnUrl","shortcutsViewMode","Boolean","shortcut","shortcutsArr","from","temp","shortcutIndex","justifyContent","alignItems","currentTarget","ShortcutForm","mode","ImportExport","FETCH_MAX_AGE","fetchLists","setFollowedHashtags","currentType","iterator","tags","form","formRef","input","setCurrentType","required","defaultValue","autocorrect","followedHashtags","tag","shortcutsStr","compressToEncodedURIComponent","importUIState","setImportUIState","parsedImportShortcutStr","importShortcutStr","parsed","parse","hasCurrentSettings","nonUniqueShortcuts","every","exceededLimit","newShortcuts","changes","prevValue","Modals","navigate","useNavigate","Compose","__COMPOSE__","editStatus","newStatus","reloadStatusPage","post","reply","edit","delay","toast","hideToast","prevLocation","showSettings","showAccounts","showAccount","destination","showDrafts","showMediaModal","showShortcutsSettings","FollowRequestButtons","requestState","setRequestState","hasRelationship","followRequests","authorize","Error","NOTIFICATION_ICONS","contentText","count","reblog_reply","favourite_reply","targetAccount","AVATARS_LIMIT","isStatic","report","_accounts","_statuses","actualStatus","actualStatusID","isVoted","voted","isReplyToOthers","inReplyToAccountId","favsCount","reblogsCount","includes","showAvatar","formattedCreatedAt","toLocaleString","genericAccountsHeading","handleOpenGenericAccounts","debug","RelativeTime","format","Fragment","type2","status2","Status","TruncatedLink","dispatchEvent","clientX","clientY","props","useTruncated","NotificationService","routeNotification","accessToken","setShowNotificationSheet","showNotificationSheet","sameInstance","getAccountByAccessToken","isFollow","notificationAccount","hasAccount","hasStatus","event","id2","hash","accessToken2","handleMessage","clearAppBadge","tagName","instanceURL","SearchForm","forwardRef","searchParams","setSearchParams","useSearchParams","searchMenuOpen","setSearchMenuOpen","setQuery","searchFieldRef","useImperativeHandle","setValue","select","blur","encodeURIComponent","autocomplete","autocapitalize","onSearch","onFocus","onBlur","onKeyDown","focusItem","nextItem","nextElementSibling","parentElement","firstItem","prevItem","previousElementSibling","lastItem","click","top","SearchCommand","showSearch","setShowSearch","searchFormRef","isSearchPage","closeSearch","enabled","enableOnFormTags","Shortcuts","shortcutsColumnsMode","menuRef","formattedShortcuts","pin","handler","closeMenu","onContextMenu","updatesButton","instanceRef","viewScroll","_b","groupBoosts","newValues","boostStash","serialBoosts","item","boostStashID","items","half","floor","slice","dedupeBoosts","boostedStatusIDs","filteredItems","statusKey","boosterID","groupContext","contexts","contextIndex","t","repliedItem","j","self","context","inReplyToId","firstItemAccountID","newItems","appliedContextIndices","contextItems","aDate","bDate","i2","useScroll","scrollableRef","distanceFromStart","distanceFromEnd","scrollThresholdStart","scrollThresholdEnd","direction","distanceFromStartPx","_distanceFromStartPx","distanceFromEndPx","_distanceFromEndPx","scrollDirection","setScrollDirection","reachStart","setReachStart","reachEnd","setReachEnd","nearReachStart","setNearReachStart","nearReachEnd","setNearReachEnd","isVertical","scrollableElement","previousScrollStart","scrollTop","onScroll","scrollHeight","scrollWidth","clientHeight","scrollStart","scrollDimension","clientDimension","scrollDistance","abs","init","Event","MediaPost","parent","onMediaClick","sKey","accountId","accountURL","accountEmojis","repliesCount","reblogged","favourited","favouritesCount","bookmarked","muted","sensitive","visibility","language","editedAt","filtered","card","content","uri","_deleted","_pinned","debugHover","filterContext","useContext","FilterContext","isFiltered","filterInfo","mediaKey","titlesStr","hasSpoiler","NavMenu","setCurrentAccount","setMoreThanOneAccount","acc","showFollowing","bindLongPress","useLongPress","threshold","detect","cancelOnMovement","buttonRef","menuState","setMenuState","boundingBoxPadding","safeBoundingBoxPadding","mutesIterator","fetchMutes","mutes","blocksIterator","fetchBlocks","blocks","open","state","squircle","ControlledMenu","anchorRef","containerProps","zIndex","portal","body","unmountOnClose","appVersion","commitHash","__COMMIT_HASH__","scrollIntoViewOptions","block","inline","Timeline","titleComponent","emptyText","errorText","useItemID","fetchItems","checkForUpdatesInterval","headerStart","headerEnd","timelineStart","refresh","view","setItems","showNew","setShowNew","allowGrouping","loadItems","useDebouncedCallback","otherPosts","pinnedPosts","items2","itemsSelector","jRef","activeItem","activeItemRect","closest","getBoundingClientRect","allItems","activeItemIndex","indexOf","itemRect","topmostItem","kRef","findLast","oRef","prevView","useCallback","disableIdleCheck","loadOrCheckUpdates","inBackground","noPointers","__IDLE__","timeDiff","hasUpdate","lastHiddenTime","node","hiddenUI","TimelineItem","inView","bFiltered","isCarousel","StatusCarousel","aFiltered","statusID2","reblog2","actualStatusID2","url2","_pinned2","manyItems","_differentAuthor","isMiddle","isSpoiler","showCompact","isEnd","TimelineStatusCompact","itemKey","statusPeekText","statusThreadNumber","MIN_YEAR","MIN_YEAR_MONTH","supportsInputMonth","setAttribute","_isSearchEnabled","isSearchEnabled","AccountStatuses","useParams","month","excludeReplies","excludeBoosts","tagged","accountStatusesIterator","allSearchParams","setAccount","searchOffsetRef","searchEnabled","setSearchEnabled","isValidMonth","_year","_month","monthIndex","after","afterStr","before","beforeStr","searchResults","saveStatus","value2","offset","pinnedStatuses","pinnedStatusesIds","exclude_replies","fetchPromise","fetchAccountPromiseRef","setFeaturedTags","useTitle","cachedAccount","featuredTags","accountInfoMemo","filterBarRef","TimelineStart","validity","active","allowSwitch","offsetLeft","fetchAccountStatuses","masto2","monthFieldRef","checkValidity","year","minYear","maxYear","maxMonth","minMonth","yearFieldRef","Bookmarks","bookmarksIterator","fetchBookmarks","Favourites","favouritesIterator","fetchFavourites","FollowedHashtags","followedTags","localeCompare","Following","homeIterator","latestItem","payload","fetchHome","TAGS_LIMIT_PER_MODE","TOTAL_TAGS_LIMIT","Hashtags","mediaView","columnMode","hashtags","linkParams","hashtagTitle","hashtagPostTitle","maxID","fetchHashtags","timelines","any","maxId","onlyMedia","skipThreading","since_id","followUIState","setFollowUIState","reachLimit","setDownOverflow","finally","MenuHeader","FocusableItem","newHashtag","MenuGroup","exists","some","newInstance","List","listIterator","fetchList","setList","showManageMembersModal","setShowManageMembersModal","ListManageMembers","MEMBERS_LIMIT","listID","members","setMembers","membersIterator","fetchMembers","member","as","RemoveAddButton","removed","setRemoved","emptySearchParams","URLSearchParams","Mentions","stateType","setStateType","mentionsIterator","fetchMentions","types","conversationsIterator","latestConversationItem","lastStatus","fetchConversations","args","notificationTypeKeys","fixNotifications","groupNotifications","notificationsMap","cleanNotifications","virtualType","date","mappedNotification","mappedAccount","n","cleanNotifications2","notificationsMap2","Notifications","notificationID","notificationAccessToken","onlyMentions","setOnlyMentions","setFollowRequests","announcements","setAnnouncements","excludeTypes","allNotifications","groupedNotifications","notificationsLastFetchTime","fetchFollowRequests","loadFollowRequests","requests","fetchAnnouncements","loadNotifications","fetchNotificationsPromise","fetchNotifications","announcements2","loadUpdates","unsub","v","subscribeKey","yesterdayDate","todayDate","currentDay","showTodayEmpty","announcementsListRef","announcement","AnnouncementBlock","notificationDay","differentDay","contact","contactAccount","startsAt","allDay","publishedAt","endsAt","published","read","reactions","publishedAtDate","publishedDateText","updatedAtText","dangerouslySetInnerHTML","staticUrl","me","reaction","Public","isLocal","publicIterator","fetchPublic","prompt","toLowerCase","fetchLinks","trends","links","Trending","setHashtags","setLinks","trendIterator","fetchTrend","links2","link","history","cur","reduce","authorName","authorUrl","imageDescription","providerName","providerUrl","title2","Columns","components","Hashtag","Component","error","Home","NotificationsLink","notificationLinkRef","NotificationsMenu","NOTIFICATIONS_LIMIT","NOTIFICATIONS_DISPLAY_LIMIT","now","hasFollowRequests","setHasFollowRequests","statusPostRegexes","getInstanceStatusObject","hostname","regex","match","getInstanceStatusURL","HttpRoute","statusObject","statusURL","Lists","instancesListURL","define_import_meta_env_default","Login","instanceURLRef","cachedInstanceURL","instanceText","setInstanceText","instancesList","setInstancesList","json","submitInstance","client_id","client_secret","vapid_key","getAuthorizationURL","instance2","instancesSuggestions","bStartsWith","aStartsWith","textAlign","SHORT_LIMIT","Search","offsetRef","statusResults","setStatusResults","accountResults","setAccountResults","hashtagResults","setHashtagResults","setTypeResultsFunc","loadResults","filterBarParent","SUBCOMMENTS_OPEN_ALL_LIMIT","MAX_WEIGHT","cachedRepliesToggle","cachedStatusesMap","scrollPositions","resetScrollPosition","STATUSES_SELECTOR","STATUS_URL_REGEX","StatusPage","mediaParam","mediaOnlyParam","mediaIndex","showMedia","mediaStatusID","mediaStatus","getStatus","showMediaOnly","heroStatus","setHeroStatus","closeLink","matchStatusPath","matchPath","handleMediaClose","delete","StatusThread","navigation","translate","setStatuses","heroStatusRef","totalDescendants","debounce","scrollOffsets","reloadHero","heroTimer","cachedStatuses","reallyCachedStatuses","heroFetch","pRetry","contextFetch","heroStatus2","_replies","_r","expandReplies","weight","descendants","missingStatuses","ancestors2","ancestors","ancestorsIsThread","nestedDescendants","__replies","ancestor","isThread","allStatuses","offsetTop","heroLimit","setLimit","scrollPosition","threadifyStatus","newScrollTop","newScrollOffsets","contextURL","initContext","statusWeightCache","div","apiCache","heroDisplayName","heroContentText","postInstance","hasDescendants","innerHTML","heroInView","postSameInstance","allStatusLinks","activeStatus","activeStatusIndex","nextStatus","statusLink","onView","setHeroInView","heroPointer","statusLinkRect","topmostStatusLink","activeStatusRect","prevStatus","details","initialPageState","handleMediaClick","handleStatusLinkClick","descendant","thread","isHero","renderStatus","SubComments","withinContext","prevEntry","level","openAll","prevLocationIsStatusPage","entries","arr","viewMode","setViewMode","button","buttons","diveDeep","replies2","replies3","totalComments","accWeight","totalWeight","calcStatusWeight","openBefore","hasParentThread","detailsRef","sameCount","open2","shortReply","dataset","MEDIA_VIRTUAL_LENGTH","CARD_VIRTUAL_LENGTH","WEIGHT_SEGMENT","cachedWeight","htmlContentLength","mediaLength","pollLength","POLL_VIRTUAL_LENGTH","cardLength","StatusRoute","boostsCarouselUrl","groupedNotificationsUrl","multiHashtagTimelineUrl","nestedCommentsThreadUrl","logoText","Welcome","marginBlockEnd","nativeAlert","__nativeAlert","Toastify","gravity","y","__STATES__","__STATES_STATS__","counts","unmountedPosts","setInterval","unfurledLinks","$post","postInNotifications","unfurled","keysCount","ICONS","_d","_c","nonIdleEvents","setIdle","debouncedSetIdle","onNonIdle","$app","$body","setIsLoggedIn","textSize","decodeURIComponent","clientID","clientSecret","initPreferences","client","initInstance","initStates","PrimaryRoutes","Routes","Route","nonRootLocation","element","backgroundLocation","getPrevLocation","isModalPage","timeout","AbortSignal","controller","AbortController","abort","signal","render","HashRouter","App","localStorage","removeItem","sessionStorage","__CLOAK__"],"mappings":"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"}