{"version":3,"file":"main-d1d1736c.js","sources":["../../src/utils/usePageVisibility.js","../../src/components/background-service.jsx","../../src/components/compose-button.jsx","../../src/components/keyboard-shortcuts-help.jsx","../../src/pages/accounts.jsx","../../src/assets/logo.svg","../../src/utils/push-notifications.js","../../src/pages/settings.jsx","../../src/utils/focus-deck.jsx","../../src/utils/useLocationChange.js","../../src/components/list-add-edit.jsx","../../src/components/account-info.jsx","../../src/components/account-sheet.jsx","../../src/components/drafts.jsx","../../src/components/generic-accounts.jsx","../../src/components/media-alt-modal.jsx","../../src/utils/color-utils.js","../../src/components/media-modal.jsx","../../src/assets/floating-button.svg","../../src/assets/multi-column.svg","../../src/assets/tab-menu-bar.svg","../../src/components/AsyncText.jsx","../../src/components/shortcuts-settings.jsx","../../src/components/modals.jsx","../../src/components/follow-request-buttons.jsx","../../src/components/notification.jsx","../../src/components/notification-service.jsx","../../src/components/search-form.jsx","../../src/components/search-command.jsx","../../src/components/shortcuts.jsx","../../src/components/menu2.jsx","../../src/utils/timeline-utils.jsx","../../src/utils/useScroll.js","../../src/components/media-post.jsx","../../src/components/nav-menu.jsx","../../src/components/timeline.jsx","../../src/pages/account-statuses.jsx","../../src/pages/bookmarks.jsx","../../src/pages/favourites.jsx","../../src/pages/followed-hashtags.jsx","../../src/utils/filters.jsx","../../src/pages/following.jsx","../../src/pages/hashtag.jsx","../../src/pages/list.jsx","../../src/pages/mentions.jsx","../../src/utils/group-notifications.jsx","../../src/pages/notifications.jsx","../../src/pages/public.jsx","../../src/pages/trending.jsx","../../src/components/columns.jsx","../../src/pages/home.jsx","../../src/utils/get-instance-status-url.js","../../src/pages/http-route.jsx","../../src/pages/lists.jsx","../../src/data/instances.json?url","../../src/utils/auth.js","../../src/pages/login.jsx","../../src/pages/search.jsx","../../src/pages/status.jsx","../../src/pages/status-route.jsx","../../src/assets/features/boosts-carousel.jpg","../../src/assets/features/grouped-notifications.jpg","../../src/assets/features/multi-column.jpg","../../src/assets/features/multi-hashtag-timeline.jpg","../../src/assets/features/nested-comments-thread.jpg","../../src/assets/logo-text.svg","../../src/pages/welcome.jsx","../../src/utils/toast-alert.js","../../src/app.jsx","../../src/main.jsx"],"sourcesContent":["import { useEffect, useRef } from 'preact/hooks';\n\nexport default function usePageVisibility(fn = () => {}, deps = []) {\n  const savedCallback = useRef(fn);\n  useEffect(() => {\n    savedCallback.current = fn;\n  }, [deps]);\n\n  useEffect(() => {\n    const handleVisibilityChange = () => {\n      const hidden = document.hidden || document.visibilityState === 'hidden';\n      console.log('👀 Page visibility changed', hidden ? 'hidden' : 'visible');\n      savedCallback.current(!hidden);\n    };\n\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    return () =>\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n  }, []);\n}\n","import { memo } from 'preact/compat';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\n\nimport { api } from '../utils/api';\nimport showToast from '../utils/show-toast';\nimport states, { saveStatus } from '../utils/states';\nimport useInterval from '../utils/useInterval';\nimport usePageVisibility from '../utils/usePageVisibility';\n\nconst STREAMING_TIMEOUT = 1000 * 3; // 3 seconds\nconst POLL_INTERVAL = 1000 * 60; // 1 minute\n\nexport default memo(function BackgroundService({ isLoggedIn }) {\n  // Notifications service\n  // - WebSocket to receive notifications when page is visible\n  const [visible, setVisible] = useState(true);\n  usePageVisibility(setVisible);\n  const checkLatestNotification = async (masto, instance, skipCheckMarkers) => {\n    if (states.notificationsLast) {\n      const notificationsIterator = masto.v1.notifications.list({\n        limit: 1,\n        sinceId: states.notificationsLast.id,\n      });\n      const { value: notifications } = await notificationsIterator.next();\n      if (notifications?.length) {\n        if (skipCheckMarkers) {\n          states.notificationsShowNew = true;\n        } else {\n          let lastReadId;\n          try {\n            const markers = await masto.v1.markers.fetch({\n              timeline: 'notifications',\n            });\n            lastReadId = markers?.notifications?.lastReadId;\n          } catch (e) {}\n          if (lastReadId) {\n            states.notificationsShowNew = notifications[0].id !== lastReadId;\n          } else {\n            states.notificationsShowNew = true;\n          }\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    let sub;\n    let pollNotifications;\n    if (isLoggedIn && visible) {\n      const { masto, streaming, instance } = api();\n      (async () => {\n        // 1. Get the latest notification\n        await checkLatestNotification(masto, instance);\n\n        let hasStreaming = false;\n        // 2. Start streaming\n        if (streaming) {\n          pollNotifications = setTimeout(() => {\n            (async () => {\n              try {\n                hasStreaming = true;\n                sub = streaming.user.notification.subscribe();\n                console.log('🎏 Streaming notification', sub);\n                for await (const entry of sub) {\n                  if (!sub) break;\n                  if (!visible) break;\n                  console.log('🔔🔔 Notification entry', entry);\n                  if (entry.event === 'notification') {\n                    console.log('🔔🔔 Notification', entry);\n                    saveStatus(entry.payload, instance, {\n                      skipThreading: true,\n                    });\n                  }\n                  states.notificationsShowNew = true;\n                }\n              } catch (e) {\n                hasStreaming = false;\n                console.error(e);\n              }\n\n              if (!hasStreaming) {\n                console.log('🎏 Streaming failed, fallback to polling');\n                pollNotifications = setInterval(() => {\n                  checkLatestNotification(masto, instance, true);\n                }, POLL_INTERVAL);\n              }\n            })();\n          }, STREAMING_TIMEOUT);\n        }\n      })();\n    }\n    return () => {\n      sub?.unsubscribe?.();\n      sub = null;\n      clearTimeout(pollNotifications);\n      clearInterval(pollNotifications);\n    };\n  }, [visible, isLoggedIn]);\n\n  // Check for updates service\n  const lastCheckDate = useRef();\n  const checkForUpdates = () => {\n    lastCheckDate.current = Date.now();\n    console.log('✨ Check app update');\n    fetch('./version.json')\n      .then((r) => r.json())\n      .then((info) => {\n        if (info) states.appVersion = info;\n      })\n      .catch((e) => {\n        console.error(e);\n      });\n  };\n  useInterval(checkForUpdates, visible && 1000 * 60 * 30); // 30 minutes\n  usePageVisibility((visible) => {\n    if (visible) {\n      if (!lastCheckDate.current) {\n        checkForUpdates();\n      } else {\n        const diff = Date.now() - lastCheckDate.current;\n        if (diff > 1000 * 60 * 60) {\n          // 1 hour\n          checkForUpdates();\n        }\n      }\n    }\n  });\n\n  // Global keyboard shortcuts \"service\"\n  useHotkeys('shift+alt+k', () => {\n    const currentCloakMode = states.settings.cloakMode;\n    states.settings.cloakMode = !currentCloakMode;\n    showToast({\n      text: `Cloak mode ${currentCloakMode ? 'disabled' : 'enabled'}`,\n    });\n  });\n\n  return null;\n});\n","import { useHotkeys } from 'react-hotkeys-hook';\n\nimport openCompose from '../utils/open-compose';\nimport states from '../utils/states';\n\nimport Icon from './icon';\n\nexport default function ComposeButton() {\n  function handleButton(e) {\n    if (e.shiftKey) {\n      const newWin = openCompose();\n\n      if (!newWin) {\n        alert('Looks like your browser is blocking popups.');\n        states.showCompose = true;\n      }\n    } else {\n      states.showCompose = true;\n    }\n  }\n\n  useHotkeys('c, shift+c', handleButton, {\n    ignoreEventWhen: (e) => {\n      const hasModal = !!document.querySelector('#modal-container > *');\n      return hasModal;\n    },\n  });\n\n  return (\n    <button type=\"button\" id=\"compose-button\" onClick={handleButton}>\n      <Icon icon=\"quill\" size=\"xl\" alt=\"Compose\" />\n    </button>\n  );\n}\n","import './keyboard-shortcuts-help.css';\n\nimport { memo } from 'preact/compat';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { useSnapshot } from 'valtio';\n\nimport states from '../utils/states';\n\nimport Icon from './icon';\nimport Modal from './modal';\n\nexport default memo(function KeyboardShortcutsHelp() {\n  const snapStates = useSnapshot(states);\n\n  function onClose() {\n    states.showKeyboardShortcutsHelp = false;\n  }\n\n  useHotkeys(\n    '?, shift+?',\n    (e) => {\n      console.log('help');\n      states.showKeyboardShortcutsHelp = true;\n    },\n    {\n      ignoreEventWhen: (e) => {\n        const hasModal = !!document.querySelector('#modal-container > *');\n        return hasModal;\n      },\n    },\n  );\n\n  const escRef = useHotkeys('esc', onClose, []);\n\n  return (\n    !!snapStates.showKeyboardShortcutsHelp && (\n      <Modal\n        class=\"light\"\n        onClick={(e) => {\n          if (e.target === e.currentTarget) {\n            onClose();\n          }\n        }}\n      >\n        <div\n          id=\"keyboard-shortcuts-help-container\"\n          class=\"sheet\"\n          tabindex=\"-1\"\n          ref={escRef}\n        >\n          <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n            <Icon icon=\"x\" />\n          </button>\n          <header>\n            <h2>Keyboard shortcuts</h2>\n          </header>\n          <main>\n            <table>\n              {[\n                {\n                  action: 'Keyboard shortcuts help',\n                  keys: <kbd>?</kbd>,\n                },\n                {\n                  action: 'Next post',\n                  keys: <kbd>j</kbd>,\n                },\n                {\n                  action: 'Previous post',\n                  keys: <kbd>k</kbd>,\n                },\n                {\n                  action: 'Skip carousel to next post',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>j</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Skip carousel to previous post',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>k</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Open post details',\n                  keys: (\n                    <>\n                      <kbd>Enter</kbd> or <kbd>o</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Toggle expanded/collapsed thread',\n                  keys: <kbd>x</kbd>,\n                },\n                {\n                  action: 'Close post or dialogs',\n                  keys: (\n                    <>\n                      <kbd>Esc</kbd> or <kbd>Backspace</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Focus column in multi-column mode',\n                  keys: (\n                    <>\n                      <kbd>1</kbd> to <kbd>9</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Compose new post',\n                  keys: <kbd>c</kbd>,\n                },\n                {\n                  action: 'Send post',\n                  keys: (\n                    <>\n                      <kbd>Ctrl</kbd> + <kbd>Enter</kbd> or <kbd>⌘</kbd> +{' '}\n                      <kbd>Enter</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Search',\n                  keys: <kbd>/</kbd>,\n                },\n                {\n                  action: 'Reply',\n                  keys: <kbd>r</kbd>,\n                },\n                {\n                  action: 'Like (favourite)',\n                  keys: (\n                    <>\n                      <kbd>l</kbd> or <kbd>f</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Boost',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>b</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Bookmark',\n                  keys: <kbd>d</kbd>,\n                },\n                {\n                  action: 'Toggle Cloak mode',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>Alt</kbd> + <kbd>k</kbd>\n                    </>\n                  ),\n                },\n              ].map(({ action, keys }) => (\n                <tr key={action}>\n                  <th>{action}</th>\n                  <td>{keys}</td>\n                </tr>\n              ))}\n            </table>\n          </main>\n        </div>\n      </Modal>\n    )\n  );\n});\n","import './accounts.css';\n\nimport { useAutoAnimate } from '@formkit/auto-animate/preact';\nimport { Menu, MenuDivider, MenuItem } from '@szhsin/react-menu';\nimport { useReducer } from 'preact/hooks';\n\nimport Avatar from '../components/avatar';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport MenuConfirm from '../components/menu-confirm';\nimport NameText from '../components/name-text';\nimport { api } from '../utils/api';\nimport states from '../utils/states';\nimport store from '../utils/store';\n\nfunction Accounts({ onClose }) {\n  const { masto } = api();\n  // Accounts\n  const accounts = store.local.getJSON('accounts');\n  const currentAccount = store.session.get('currentAccount');\n  const moreThanOneAccount = accounts.length > 1;\n\n  const [_, reload] = useReducer((x) => x + 1, 0);\n  const [accountsListParent] = useAutoAnimate();\n\n  return (\n    <div id=\"accounts-container\" class=\"sheet\" tabIndex=\"-1\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header class=\"header-grid\">\n        <h2>Accounts</h2>\n      </header>\n      <main>\n        <section>\n          <ul class=\"accounts-list\" ref={accountsListParent}>\n            {accounts.map((account, i) => {\n              const isCurrent = account.info.id === currentAccount;\n              const isDefault = i === 0; // first account is always default\n              return (\n                <li key={account.info.id}>\n                  <div>\n                    {moreThanOneAccount && (\n                      <span class={`current ${isCurrent ? 'is-current' : ''}`}>\n                        <Icon icon=\"check-circle\" alt=\"Current\" />\n                      </span>\n                    )}\n                    <Avatar\n                      url={account.info.avatarStatic}\n                      size=\"xxl\"\n                      onDblClick={async () => {\n                        if (isCurrent) {\n                          try {\n                            const info = await masto.v1.accounts\n                              .$select(account.info.id)\n                              .fetch();\n                            console.log('fetched account info', info);\n                            account.info = info;\n                            store.local.setJSON('accounts', accounts);\n                            reload();\n                          } catch (e) {}\n                        }\n                      }}\n                    />\n                    <NameText\n                      account={\n                        moreThanOneAccount\n                          ? {\n                              ...account.info,\n                              acct: /@/.test(account.info.acct)\n                                ? account.info.acct\n                                : `${account.info.acct}@${account.instanceURL}`,\n                            }\n                          : account.info\n                      }\n                      showAcct\n                      onClick={() => {\n                        if (isCurrent) {\n                          states.showAccount = `${account.info.username}@${account.instanceURL}`;\n                        } else {\n                          store.session.set('currentAccount', account.info.id);\n                          location.reload();\n                        }\n                      }}\n                    />\n                  </div>\n                  <div class=\"actions\">\n                    {isDefault && moreThanOneAccount && (\n                      <>\n                        <span class=\"tag\">Default</span>{' '}\n                      </>\n                    )}\n                    <Menu\n                      align=\"end\"\n                      menuButton={\n                        <button\n                          type=\"button\"\n                          title=\"More\"\n                          class=\"plain more-button\"\n                        >\n                          <Icon icon=\"more\" size=\"l\" alt=\"More\" />\n                        </button>\n                      }\n                    >\n                      <MenuItem\n                        onClick={() => {\n                          states.showAccount = `${account.info.username}@${account.instanceURL}`;\n                        }}\n                      >\n                        <Icon icon=\"user\" />\n                        <span>View profile…</span>\n                      </MenuItem>\n                      <MenuDivider />\n                      {moreThanOneAccount && (\n                        <MenuItem\n                          disabled={isDefault}\n                          onClick={() => {\n                            // Move account to the top of the list\n                            accounts.splice(i, 1);\n                            accounts.unshift(account);\n                            store.local.setJSON('accounts', accounts);\n                            reload();\n                          }}\n                        >\n                          <Icon icon=\"check-circle\" />\n                          <span>Set as default</span>\n                        </MenuItem>\n                      )}\n                      <MenuConfirm\n                        subMenu\n                        confirmLabel={\n                          <>\n                            <Icon icon=\"exit\" />\n                            <span>Log out @{account.info.acct}?</span>\n                          </>\n                        }\n                        disabled={!isCurrent}\n                        menuItemClassName=\"danger\"\n                        onClick={() => {\n                          // const yes = confirm('Log out?');\n                          // if (!yes) return;\n                          accounts.splice(i, 1);\n                          store.local.setJSON('accounts', accounts);\n                          // location.reload();\n                          location.href = location.pathname || '/';\n                        }}\n                      >\n                        <Icon icon=\"exit\" />\n                        <span>Log out…</span>\n                      </MenuConfirm>\n                    </Menu>\n                  </div>\n                </li>\n              );\n            })}\n          </ul>\n          <p>\n            <Link to=\"/login\" class=\"button plain2\" onClick={onClose}>\n              <Icon icon=\"plus\" /> <span>Add an existing account</span>\n            </Link>\n          </p>\n          {moreThanOneAccount && (\n            <p>\n              <small>\n                Note: <i>Default</i> account will always be used for first load.\n                Switched accounts will persist during the session.\n              </small>\n            </p>\n          )}\n        </section>\n      </main>\n    </div>\n  );\n}\n\nexport default Accounts;\n","export default \"__VITE_ASSET__c2b3a5f0__\"","// Utils for push notifications\nimport { api } from './api';\nimport { getCurrentAccount } from './store-utils';\n\n// Subscription is an object with the following structure:\n// {\n//   data: {\n//     alerts: {\n//       admin: {\n//         report: boolean,\n//         signUp: boolean,\n//       },\n//       favourite: boolean,\n//       follow: boolean,\n//       mention: boolean,\n//       poll: boolean,\n//       reblog: boolean,\n//       status: boolean,\n//       update: boolean,\n//     }\n//   },\n//   policy: \"all\" | \"followed\" | \"follower\" | \"none\",\n//   subscription: {\n//     endpoint: string,\n//     keys: {\n//       auth: string,\n//       p256dh: string,\n//     },\n//   },\n// }\n\n// Back-end CRUD\n// =============\n\nfunction createBackendPushSubscription(subscription) {\n  const { masto } = api();\n  return masto.v1.push.subscription.create(subscription);\n}\n\nfunction fetchBackendPushSubscription() {\n  const { masto } = api();\n  return masto.v1.push.subscription.fetch();\n}\n\nfunction updateBackendPushSubscription(subscription) {\n  const { masto } = api();\n  return masto.v1.push.subscription.update(subscription);\n}\n\nfunction removeBackendPushSubscription() {\n  const { masto } = api();\n  return masto.v1.push.subscription.remove();\n}\n\n// Front-end\n// =========\n\nexport function isPushSupported() {\n  return 'serviceWorker' in navigator && 'PushManager' in window;\n}\n\nexport function getRegistration() {\n  // return navigator.serviceWorker.ready;\n  return navigator.serviceWorker.getRegistration();\n}\n\nasync function getSubscription() {\n  const registration = await getRegistration();\n  const subscription = registration\n    ? await registration.pushManager.getSubscription()\n    : undefined;\n  return { registration, subscription };\n}\n\nfunction urlBase64ToUint8Array(base64String) {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = `${base64String}${padding}`\n    .replace(/-/g, '+')\n    .replace(/_/g, '/');\n\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n\n  return outputArray;\n}\n\n// Front-end <-> back-end\n// ======================\n\nexport async function initSubscription() {\n  if (!isPushSupported()) return;\n  const { subscription } = await getSubscription();\n  let backendSubscription = null;\n  try {\n    backendSubscription = await fetchBackendPushSubscription();\n  } catch (err) {\n    if (/(not found|unknown)/i.test(err.message)) {\n      // No subscription found\n    } else {\n      // Other error\n      throw err;\n    }\n  }\n  console.log('INIT subscription', {\n    subscription,\n    backendSubscription,\n  });\n\n  // Check if the subscription changed\n  if (backendSubscription && subscription) {\n    const sameEndpoint = backendSubscription.endpoint === subscription.endpoint;\n    const { vapidKey } = getCurrentAccount();\n    const sameKey = backendSubscription.serverKey === vapidKey;\n    if (!sameEndpoint) {\n      throw new Error('Backend subscription endpoint changed');\n    }\n    if (sameKey) {\n      // Subscription didn't change\n    } else {\n      // Subscription changed\n      console.error('🔔 Subscription changed', {\n        sameEndpoint,\n        serverKey: backendSubscription.serverKey,\n        vapIdKey: vapidKey,\n        endpoint1: backendSubscription.endpoint,\n        endpoint2: subscription.endpoint,\n        sameKey,\n        key1: backendSubscription.serverKey,\n        key2: vapidKey,\n      });\n      throw new Error('Backend subscription key and vapid key changed');\n      // Only unsubscribe from backend, not from browser\n      // await removeBackendPushSubscription();\n      // // Now let's resubscribe\n      // // NOTE: I have no idea if this works\n      // return await updateSubscription({\n      //   data: backendSubscription.data,\n      //   policy: backendSubscription.policy,\n      // });\n    }\n  }\n\n  if (subscription && !backendSubscription) {\n    // check if account's vapidKey is same as subscription's applicationServerKey\n    const { vapidKey } = getCurrentAccount();\n    const { applicationServerKey } = subscription.options;\n    const vapidKeyStr = urlBase64ToUint8Array(vapidKey).toString();\n    const applicationServerKeyStr = new Uint8Array(\n      applicationServerKey,\n    ).toString();\n    const sameKey = vapidKeyStr === applicationServerKeyStr;\n    if (sameKey) {\n      // Subscription didn't change\n    } else {\n      // Subscription changed\n      console.error('🔔 Subscription changed', {\n        vapidKeyStr,\n        applicationServerKeyStr,\n        sameKey,\n      });\n      // Unsubscribe since backend doesn't have a subscription\n      await subscription.unsubscribe();\n      throw new Error('Subscription key and vapid key changed');\n    }\n  }\n\n  // Check if backend subscription returns 404\n  // if (subscription && !backendSubscription) {\n  //   // Re-subscribe to backend\n  //   backendSubscription = await createBackendPushSubscription({\n  //     subscription,\n  //     data: {},\n  //     policy: 'all',\n  //   });\n  // }\n\n  return { subscription, backendSubscription };\n}\n\nexport async function updateSubscription({ data, policy }) {\n  console.log('🔔 Updating subscription', { data, policy });\n  if (!isPushSupported()) return;\n  let { registration, subscription } = await getSubscription();\n  let backendSubscription = null;\n\n  if (subscription) {\n    try {\n      backendSubscription = await updateBackendPushSubscription({\n        data,\n        policy,\n      });\n      // TODO: save subscription in user settings\n    } catch (error) {\n      // Backend doesn't have a subscription for this user\n      // Create a new one\n      backendSubscription = await createBackendPushSubscription({\n        subscription,\n        data,\n        policy,\n      });\n      // TODO: save subscription in user settings\n    }\n  } else {\n    // User is not subscribed\n    const { vapidKey } = getCurrentAccount();\n    if (!vapidKey) throw new Error('No server key found');\n    subscription = await registration.pushManager.subscribe({\n      userVisibleOnly: true,\n      applicationServerKey: urlBase64ToUint8Array(vapidKey),\n    });\n    backendSubscription = await createBackendPushSubscription({\n      subscription,\n      data,\n      policy,\n    });\n    // TODO: save subscription in user settings\n  }\n\n  return { subscription, backendSubscription };\n}\n\nexport async function removeSubscription() {\n  if (!isPushSupported()) return;\n  const { subscription } = await getSubscription();\n  if (subscription) {\n    await removeBackendPushSubscription();\n    await subscription.unsubscribe();\n  }\n}\n","import './settings.css';\n\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport logo from '../assets/logo.svg';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport RelativeTime from '../components/relative-time';\nimport targetLanguages from '../data/lingva-target-languages';\nimport { api } from '../utils/api';\nimport getTranslateTargetLanguage from '../utils/get-translate-target-language';\nimport localeCode2Text from '../utils/localeCode2Text';\nimport {\n  initSubscription,\n  isPushSupported,\n  removeSubscription,\n  updateSubscription,\n} from '../utils/push-notifications';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\nimport store from '../utils/store';\n\nconst DEFAULT_TEXT_SIZE = 16;\nconst TEXT_SIZES = [16, 17, 18, 19, 20];\n\nfunction Settings({ onClose }) {\n  const snapStates = useSnapshot(states);\n  const currentTheme = store.local.get('theme') || 'auto';\n  const themeFormRef = useRef();\n  const targetLanguage =\n    snapStates.settings.contentTranslationTargetLanguage || null;\n  const systemTargetLanguage = getTranslateTargetLanguage();\n  const systemTargetLanguageText = localeCode2Text(systemTargetLanguage);\n  const currentTextSize = store.local.get('textSize') || DEFAULT_TEXT_SIZE;\n\n  const [prefs, setPrefs] = useState(store.account.get('preferences') || {});\n  const { masto, authenticated, instance } = api();\n  // Get preferences every time Settings is opened\n  // NOTE: Disabled for now because I don't expect this to change often. Also for some reason, the /api/v1/preferences endpoint is cached for a while and return old prefs if refresh immediately after changing them.\n  // useEffect(() => {\n  //   const { masto } = api();\n  //   (async () => {\n  //     try {\n  //       const preferences = await masto.v1.preferences.fetch();\n  //       setPrefs(preferences);\n  //       store.account.set('preferences', preferences);\n  //     } catch (e) {\n  //       // Silently fail\n  //       console.error(e);\n  //     }\n  //   })();\n  // }, []);\n\n  return (\n    <div id=\"settings-container\" class=\"sheet\" tabIndex=\"-1\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Settings</h2>\n      </header>\n      <main>\n        <section>\n          <ul>\n            <li>\n              <div>\n                <label>Appearance</label>\n              </div>\n              <div>\n                <form\n                  ref={themeFormRef}\n                  onInput={(e) => {\n                    console.log(e);\n                    e.preventDefault();\n                    const formData = new FormData(themeFormRef.current);\n                    const theme = formData.get('theme');\n                    const html = document.documentElement;\n\n                    if (theme === 'auto') {\n                      html.classList.remove('is-light', 'is-dark');\n                    } else {\n                      html.classList.toggle('is-light', theme === 'light');\n                      html.classList.toggle('is-dark', theme === 'dark');\n                    }\n                    document\n                      .querySelector('meta[name=\"color-scheme\"]')\n                      .setAttribute(\n                        'content',\n                        theme === 'auto' ? 'dark light' : theme,\n                      );\n\n                    if (theme === 'auto') {\n                      store.local.del('theme');\n                    } else {\n                      store.local.set('theme', theme);\n                    }\n                  }}\n                >\n                  <div class=\"radio-group\">\n                    <label>\n                      <input\n                        type=\"radio\"\n                        name=\"theme\"\n                        value=\"light\"\n                        defaultChecked={currentTheme === 'light'}\n                      />\n                      <span>Light</span>\n                    </label>\n                    <label>\n                      <input\n                        type=\"radio\"\n                        name=\"theme\"\n                        value=\"dark\"\n                        defaultChecked={currentTheme === 'dark'}\n                      />\n                      <span>Dark</span>\n                    </label>\n                    <label>\n                      <input\n                        type=\"radio\"\n                        name=\"theme\"\n                        value=\"auto\"\n                        defaultChecked={\n                          currentTheme !== 'light' && currentTheme !== 'dark'\n                        }\n                      />\n                      <span>Auto</span>\n                    </label>\n                  </div>\n                </form>\n              </div>\n            </li>\n            <li>\n              <div>\n                <label>Text size</label>\n              </div>\n              <div class=\"range-group\">\n                <span style={{ fontSize: TEXT_SIZES[0] }}>A</span>{' '}\n                <input\n                  type=\"range\"\n                  min={TEXT_SIZES[0]}\n                  max={TEXT_SIZES[TEXT_SIZES.length - 1]}\n                  step=\"1\"\n                  value={currentTextSize}\n                  list=\"sizes\"\n                  onChange={(e) => {\n                    const value = parseInt(e.target.value, 10);\n                    const html = document.documentElement;\n                    // set CSS variable\n                    html.style.setProperty('--text-size', `${value}px`);\n                    // save to local storage\n                    if (value === DEFAULT_TEXT_SIZE) {\n                      store.local.del('textSize');\n                    } else {\n                      store.local.set('textSize', e.target.value);\n                    }\n                  }}\n                />{' '}\n                <span style={{ fontSize: TEXT_SIZES[TEXT_SIZES.length - 1] }}>\n                  A\n                </span>\n                <datalist id=\"sizes\">\n                  {TEXT_SIZES.map((size) => (\n                    <option value={size} />\n                  ))}\n                </datalist>\n              </div>\n            </li>\n          </ul>\n        </section>\n        {authenticated && (\n          <>\n            <h3>Posting</h3>\n            <section>\n              <ul>\n                <li>\n                  <div>\n                    <label for=\"posting-privacy-field\">\n                      Default visibility{' '}\n                      <Icon icon=\"cloud\" alt=\"Synced\" class=\"synced-icon\" />\n                    </label>\n                  </div>\n                  <div>\n                    <select\n                      id=\"posting-privacy-field\"\n                      value={prefs['posting:default:visibility'] || 'public'}\n                      onChange={(e) => {\n                        const { value } = e.target;\n                        (async () => {\n                          try {\n                            await masto.v1.accounts.updateCredentials({\n                              source: {\n                                privacy: value,\n                              },\n                            });\n                            setPrefs({\n                              ...prefs,\n                              'posting:default:visibility': value,\n                            });\n                            store.account.set('preferences', {\n                              ...prefs,\n                              'posting:default:visibility': value,\n                            });\n                          } catch (e) {\n                            alert('Failed to update posting privacy');\n                            console.error(e);\n                          }\n                        })();\n                      }}\n                    >\n                      <option value=\"public\">Public</option>\n                      <option value=\"unlisted\">Unlisted</option>\n                      <option value=\"private\">Followers only</option>\n                    </select>\n                  </div>\n                </li>\n              </ul>\n            </section>\n            <p class=\"section-postnote\">\n              <Icon icon=\"cloud\" alt=\"Synced\" class=\"synced-icon\" />{' '}\n              <small>\n                Synced to your instance server's settings.{' '}\n                <a\n                  href={`https://${instance}/`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  Go to your instance ({instance}) for more settings.\n                </a>\n              </small>\n            </p>\n          </>\n        )}\n        <h3>Experiments</h3>\n        <section>\n          <ul>\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.autoRefresh}\n                  onChange={(e) => {\n                    states.settings.autoRefresh = e.target.checked;\n                  }}\n                />{' '}\n                Auto refresh timeline posts\n              </label>\n            </li>\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.boostsCarousel}\n                  onChange={(e) => {\n                    states.settings.boostsCarousel = e.target.checked;\n                  }}\n                />{' '}\n                Boosts carousel\n              </label>\n            </li>\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.contentTranslation}\n                  onChange={(e) => {\n                    const { checked } = e.target;\n                    states.settings.contentTranslation = checked;\n                    if (!checked) {\n                      states.settings.contentTranslationTargetLanguage = null;\n                    }\n                  }}\n                />{' '}\n                Post translation\n              </label>\n              <div\n                class={`sub-section ${\n                  !snapStates.settings.contentTranslation\n                    ? 'more-insignificant'\n                    : ''\n                }`}\n              >\n                <div>\n                  <label>\n                    Translate to{' '}\n                    <select\n                      value={targetLanguage || ''}\n                      disabled={!snapStates.settings.contentTranslation}\n                      onChange={(e) => {\n                        states.settings.contentTranslationTargetLanguage =\n                          e.target.value || null;\n                      }}\n                    >\n                      <option value=\"\">\n                        System language ({systemTargetLanguageText})\n                      </option>\n                      <option disabled>──────────</option>\n                      {targetLanguages.map((lang) => (\n                        <option value={lang.code}>{lang.name}</option>\n                      ))}\n                    </select>\n                  </label>\n                </div>\n                <hr />\n                <p class=\"checkbox-fieldset\">\n                  Hide \"Translate\" button for\n                  {snapStates.settings.contentTranslationHideLanguages.length >\n                    0 && (\n                    <>\n                      {' '}\n                      (\n                      {\n                        snapStates.settings.contentTranslationHideLanguages\n                          .length\n                      }\n                      )\n                    </>\n                  )}\n                  :\n                  <div class=\"checkbox-fields\">\n                    {targetLanguages.map((lang) => (\n                      <label>\n                        <input\n                          type=\"checkbox\"\n                          checked={snapStates.settings.contentTranslationHideLanguages.includes(\n                            lang.code,\n                          )}\n                          onChange={(e) => {\n                            const { checked } = e.target;\n                            if (checked) {\n                              states.settings.contentTranslationHideLanguages.push(\n                                lang.code,\n                              );\n                            } else {\n                              states.settings.contentTranslationHideLanguages =\n                                snapStates.settings.contentTranslationHideLanguages.filter(\n                                  (code) => code !== lang.code,\n                                );\n                            }\n                          }}\n                        />{' '}\n                        {lang.name}\n                      </label>\n                    ))}\n                  </div>\n                </p>\n                <p class=\"insignificant\">\n                  <small>\n                    Note: This feature uses an external API to translate,\n                    powered by{' '}\n                    <a\n                      href=\"https://github.com/thedaviddelta/lingva-translate\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      Lingva Translate\n                    </a>\n                    .\n                  </small>\n                </p>\n                <hr />\n                <div>\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      checked={snapStates.settings.contentTranslationAutoInline}\n                      disabled={!snapStates.settings.contentTranslation}\n                      onChange={(e) => {\n                        states.settings.contentTranslationAutoInline =\n                          e.target.checked;\n                      }}\n                    />{' '}\n                    Auto inline translation\n                  </label>\n                  <p class=\"insignificant\">\n                    <small>\n                      Automatically show translation for posts in timeline. Only\n                      works for <b>short</b> posts without content warning,\n                      media and poll.\n                    </small>\n                  </p>\n                </div>\n              </div>\n            </li>\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.cloakMode}\n                  onChange={(e) => {\n                    states.settings.cloakMode = e.target.checked;\n                  }}\n                />{' '}\n                Cloak mode{' '}\n                <span class=\"insignificant\">\n                  (<samp>Text</samp> → <samp>████</samp>)\n                </span>\n              </label>\n              <div class=\"sub-section insignificant\">\n                <small>\n                  Replace text as blocks, useful when taking screenshots, for\n                  privacy reasons.\n                </small>\n              </div>\n            </li>\n            {authenticated && (\n              <li>\n                <button\n                  type=\"button\"\n                  class=\"light\"\n                  onClick={() => {\n                    states.showDrafts = true;\n                    states.showSettings = false;\n                  }}\n                >\n                  Unsent drafts\n                </button>\n              </li>\n            )}\n          </ul>\n        </section>\n        {authenticated && <PushNotificationsSection onClose={onClose} />}\n        <h3>About</h3>\n        <section>\n          <div\n            style={{\n              display: 'flex',\n              gap: 8,\n              lineHeight: 1.25,\n              alignItems: 'center',\n              marginTop: 8,\n            }}\n          >\n            <img\n              src={logo}\n              alt=\"\"\n              width=\"64\"\n              height=\"64\"\n              style={{\n                aspectRatio: '1/1',\n                verticalAlign: 'middle',\n                background: '#b7cdf9',\n                borderRadius: 12,\n              }}\n            />\n            <div>\n              <b>Phanpy</b>{' '}\n              <a\n                href=\"https://hachyderm.io/@phanpy\"\n                // target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  states.showAccount = 'phanpy@hachyderm.io';\n                }}\n              >\n                @phanpy\n              </a>\n              <br />\n              <a\n                href=\"https://github.com/cheeaun/phanpy\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                Built\n              </a>{' '}\n              by{' '}\n              <a\n                href=\"https://mastodon.social/@cheeaun\"\n                // target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  states.showAccount = 'cheeaun@mastodon.social';\n                }}\n              >\n                @cheeaun\n              </a>\n            </div>\n          </div>\n          <p>\n            <a\n              href=\"https://github.com/sponsors/cheeaun\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Sponsor\n            </a>{' '}\n            &middot;{' '}\n            <a\n              href=\"https://www.buymeacoffee.com/cheeaun\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Donate\n            </a>{' '}\n            &middot;{' '}\n            <a\n              href=\"https://github.com/cheeaun/phanpy/blob/main/PRIVACY.MD\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Privacy Policy\n            </a>\n          </p>\n          {__BUILD_TIME__ && (\n            <p>\n              Version:{' '}\n              <input\n                type=\"text\"\n                class=\"version-string\"\n                readOnly\n                size=\"18\" // Manually calculated here\n                value={`${__BUILD_TIME__.slice(0, 10).replace(/-/g, '.')}${\n                  __COMMIT_HASH__ ? `.${__COMMIT_HASH__}` : ''\n                }`}\n                onClick={(e) => {\n                  e.target.select();\n                  // Copy to clipboard\n                  try {\n                    navigator.clipboard.writeText(e.target.value);\n                    showToast('Version string copied');\n                  } catch (e) {\n                    console.warn(e);\n                    showToast('Unable to copy version string');\n                  }\n                }}\n              />{' '}\n              <span class=\"ib insignificant\">\n                (\n                <a\n                  href={`https://github.com/cheeaun/phanpy/commit/${__COMMIT_HASH__}`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  <RelativeTime datetime={new Date(__BUILD_TIME__)} />\n                </a>\n                )\n              </span>\n            </p>\n          )}\n        </section>\n      </main>\n    </div>\n  );\n}\n\nfunction PushNotificationsSection({ onClose }) {\n  if (!isPushSupported()) return null;\n\n  const { instance } = api();\n  const [uiState, setUIState] = useState('default');\n  const pushFormRef = useRef();\n  const [allowNofitications, setAllowNotifications] = useState(false);\n  const [needRelogin, setNeedRelogin] = useState(false);\n  const previousPolicyRef = useRef();\n  useEffect(() => {\n    (async () => {\n      setUIState('loading');\n      try {\n        const { subscription, backendSubscription } = await initSubscription();\n        if (\n          backendSubscription?.policy &&\n          backendSubscription.policy !== 'none'\n        ) {\n          setAllowNotifications(true);\n          const { alerts, policy } = backendSubscription;\n          previousPolicyRef.current = policy;\n          const { elements } = pushFormRef.current;\n          const policyEl = elements.namedItem(policy);\n          if (policyEl) policyEl.value = policy;\n          // alerts is {}, iterate it\n          Object.keys(alerts).forEach((alert) => {\n            const el = elements.namedItem(alert);\n            if (el?.type === 'checkbox') {\n              el.checked = true;\n            }\n          });\n        }\n        setUIState('default');\n      } catch (err) {\n        console.warn(err);\n        if (/outside.*authorized/i.test(err.message)) {\n          setNeedRelogin(true);\n        } else {\n          alert(err?.message || err);\n        }\n        setUIState('error');\n      }\n    })();\n  }, []);\n\n  const isLoading = uiState === 'loading';\n\n  return (\n    <form\n      ref={pushFormRef}\n      onChange={() => {\n        const values = Object.fromEntries(new FormData(pushFormRef.current));\n        const allowNofitications = !!values['policy-allow'];\n        const params = {\n          policy: values.policy,\n          data: {\n            alerts: {\n              mention: !!values.mention,\n              favourite: !!values.favourite,\n              reblog: !!values.reblog,\n              follow: !!values.follow,\n              follow_request: !!values.followRequest,\n              poll: !!values.poll,\n              update: !!values.update,\n              status: !!values.status,\n            },\n          },\n        };\n\n        let alertsCount = 0;\n        // Remove false values from data.alerts\n        // API defaults to false anyway\n        Object.keys(params.data.alerts).forEach((key) => {\n          if (!params.data.alerts[key]) {\n            delete params.data.alerts[key];\n          } else {\n            alertsCount++;\n          }\n        });\n        const policyChanged = previousPolicyRef.current !== params.policy;\n\n        console.log('PN Form', { values, allowNofitications, params });\n\n        if (allowNofitications && alertsCount > 0) {\n          if (policyChanged) {\n            console.debug('Policy changed.');\n            removeSubscription()\n              .then(() => {\n                updateSubscription(params);\n              })\n              .catch((err) => {\n                console.warn(err);\n                alert('Failed to update subscription. Please try again.');\n              });\n          } else {\n            updateSubscription(params).catch((err) => {\n              console.warn(err);\n              alert('Failed to update subscription. Please try again.');\n            });\n          }\n        } else {\n          removeSubscription().catch((err) => {\n            console.warn(err);\n            alert('Failed to remove subscription. Please try again.');\n          });\n        }\n      }}\n    >\n      <h3>Push Notifications (beta)</h3>\n      <section>\n        <ul>\n          <li>\n            <label>\n              <input\n                type=\"checkbox\"\n                disabled={isLoading || needRelogin}\n                name=\"policy-allow\"\n                checked={allowNofitications}\n                onChange={async (e) => {\n                  const { checked } = e.target;\n                  if (checked) {\n                    // Request permission\n                    const permission = await Notification.requestPermission();\n                    if (permission === 'granted') {\n                      setAllowNotifications(true);\n                    } else {\n                      setAllowNotifications(false);\n                      if (permission === 'denied') {\n                        alert(\n                          'Push notifications are blocked. Please enable them in your browser settings.',\n                        );\n                      }\n                    }\n                  } else {\n                    setAllowNotifications(false);\n                  }\n                }}\n              />{' '}\n              Allow from{' '}\n              <select\n                name=\"policy\"\n                disabled={isLoading || needRelogin || !allowNofitications}\n              >\n                {[\n                  {\n                    value: 'all',\n                    label: 'anyone',\n                  },\n                  {\n                    value: 'followed',\n                    label: 'people I follow',\n                  },\n                  {\n                    value: 'follower',\n                    label: 'followers',\n                  },\n                ].map((type) => (\n                  <option value={type.value}>{type.label}</option>\n                ))}\n              </select>\n            </label>\n            <div\n              class=\"shazam-container no-animation\"\n              style={{\n                width: '100%',\n              }}\n              hidden={!allowNofitications}\n            >\n              <div class=\"shazam-container-inner\">\n                <div class=\"sub-section\">\n                  <ul>\n                    {[\n                      {\n                        value: 'mention',\n                        label: 'Mentions',\n                      },\n                      {\n                        value: 'favourite',\n                        label: 'Likes',\n                      },\n                      {\n                        value: 'reblog',\n                        label: 'Boosts',\n                      },\n                      {\n                        value: 'follow',\n                        label: 'Follows',\n                      },\n                      {\n                        value: 'followRequest',\n                        label: 'Follow requests',\n                      },\n                      {\n                        value: 'poll',\n                        label: 'Polls',\n                      },\n                      {\n                        value: 'update',\n                        label: 'Post edits',\n                      },\n                      {\n                        value: 'status',\n                        label: 'New posts',\n                      },\n                    ].map((alert) => (\n                      <li>\n                        <label>\n                          <input type=\"checkbox\" name={alert.value} />{' '}\n                          {alert.label}\n                        </label>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              </div>\n            </div>\n            {needRelogin && (\n              <div class=\"sub-section\">\n                <p>\n                  Push permission was not granted since your last login. You'll\n                  need to{' '}\n                  <Link to={`/login?instance=${instance}`} onClick={onClose}>\n                    <b>log in</b> again to grant push permission\n                  </Link>\n                  .\n                </p>\n              </div>\n            )}\n          </li>\n        </ul>\n      </section>\n      <p class=\"section-postnote\">\n        <small>\n          NOTE: Push notifications only work for <b>one account</b>.\n        </small>\n      </p>\n    </form>\n  );\n}\n\nexport default Settings;\n","const focusDeck = () => {\n  let timer = setTimeout(() => {\n    const columns = document.getElementById('columns');\n    if (columns) {\n      // Focus first column\n      // columns.querySelector('.deck-container')?.focus?.();\n    } else {\n      const modals = document.querySelectorAll('#modal-container > *');\n      if (modals?.length) {\n        // Focus last modal\n        const modal = modals[modals.length - 1]; // last one\n        const modalFocusElement =\n          modal.querySelector('[tabindex=\"-1\"]') || modal;\n        if (modalFocusElement) {\n          modalFocusElement.focus();\n          return;\n        }\n      }\n      const backDrop = document.querySelector('.deck-backdrop');\n      if (backDrop) return;\n      // Focus last deck\n      const pages = document.querySelectorAll('.deck-container');\n      const page = pages[pages.length - 1]; // last one\n      if (page && page.tabIndex === -1) {\n        console.log('FOCUS', page);\n        page.focus();\n      }\n    }\n  }, 100);\n  return () => clearTimeout(timer);\n};\n\nexport default focusDeck;\n","import { useEffect, useRef } from 'preact/hooks';\nimport { useLocation } from 'react-router-dom';\n\n// Hook that runs a callback when the location changes\n// Won't run on the first render\n\nexport default function useLocationChange(fn) {\n  if (!fn) return;\n  const location = useLocation();\n  const currentLocationRef = useRef(location.pathname);\n  useEffect(() => {\n    // console.log('location', {\n    //   current: currentLocationRef.current,\n    //   next: location.pathname,\n    // });\n    if (\n      currentLocationRef.current &&\n      location.pathname !== currentLocationRef.current\n    ) {\n      fn?.();\n    }\n  }, [location.pathname, fn]);\n}\n","import { useEffect, useRef, useState } from 'preact/hooks';\n\nimport { api } from '../utils/api';\nimport supports from '../utils/supports';\n\nimport Icon from './icon';\nimport MenuConfirm from './menu-confirm';\n\nfunction ListAddEdit({ list, onClose }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const editMode = !!list;\n  const nameFieldRef = useRef();\n  const repliesPolicyFieldRef = useRef();\n  const exclusiveFieldRef = useRef();\n  useEffect(() => {\n    if (editMode) {\n      nameFieldRef.current.value = list.title;\n      repliesPolicyFieldRef.current.value = list.repliesPolicy;\n      if (exclusiveFieldRef.current) {\n        exclusiveFieldRef.current.checked = list.exclusive;\n      }\n    }\n  }, [editMode]);\n  const supportsExclusive = supports('@mastodon/list-exclusive');\n\n  return (\n    <div class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}{' '}\n      <header>\n        <h2>{editMode ? 'Edit list' : 'New list'}</h2>\n      </header>\n      <main>\n        <form\n          class=\"list-form\"\n          onSubmit={(e) => {\n            e.preventDefault(); // Get form values\n\n            const formData = new FormData(e.target);\n            const title = formData.get('title');\n            const repliesPolicy = formData.get('replies_policy');\n            const exclusive = formData.get('exclusive') === 'on';\n            console.log({\n              title,\n              repliesPolicy,\n              exclusive,\n            });\n            setUIState('loading');\n\n            (async () => {\n              try {\n                let listResult;\n\n                if (editMode) {\n                  listResult = await masto.v1.lists.$select(list.id).update({\n                    title,\n                    replies_policy: repliesPolicy,\n                    exclusive,\n                  });\n                } else {\n                  listResult = await masto.v1.lists.create({\n                    title,\n                    replies_policy: repliesPolicy,\n                    exclusive,\n                  });\n                }\n\n                console.log(listResult);\n                setUIState('default');\n                onClose?.({\n                  state: 'success',\n                  list: listResult,\n                });\n              } catch (e) {\n                console.error(e);\n                setUIState('error');\n                alert(\n                  editMode ? 'Unable to edit list.' : 'Unable to create list.',\n                );\n              }\n            })();\n          }}\n        >\n          <div class=\"list-form-row\">\n            <label for=\"list-title\">\n              Name{' '}\n              <input\n                ref={nameFieldRef}\n                type=\"text\"\n                id=\"list-title\"\n                name=\"title\"\n                required\n                disabled={uiState === 'loading'}\n                dir=\"auto\"\n              />\n            </label>\n          </div>\n          <div class=\"list-form-row\">\n            <select\n              ref={repliesPolicyFieldRef}\n              name=\"replies_policy\"\n              required\n              disabled={uiState === 'loading'}\n            >\n              <option value=\"list\">Show replies to list members</option>\n              <option value=\"followed\">Show replies to people I follow</option>\n              <option value=\"none\">Don't show replies</option>\n            </select>\n          </div>\n          {supportsExclusive && (\n            <div class=\"list-form-row\">\n              <label class=\"label-block\">\n                <input\n                  ref={exclusiveFieldRef}\n                  type=\"checkbox\"\n                  name=\"exclusive\"\n                  disabled={uiState === 'loading'}\n                />{' '}\n                Hide posts on this list from Home/Following\n              </label>\n            </div>\n          )}\n          <div class=\"list-form-footer\">\n            <button type=\"submit\" disabled={uiState === 'loading'}>\n              {editMode ? 'Save' : 'Create'}\n            </button>\n            {editMode && (\n              <MenuConfirm\n                disabled={uiState === 'loading'}\n                align=\"end\"\n                menuItemClassName=\"danger\"\n                confirmLabel=\"Delete this list?\"\n                onClick={() => {\n                  // const yes = confirm('Delete this list?');\n                  // if (!yes) return;\n                  setUIState('loading');\n\n                  (async () => {\n                    try {\n                      await masto.v1.lists.$select(list.id).remove();\n                      setUIState('default');\n                      onClose?.({\n                        state: 'deleted',\n                      });\n                    } catch (e) {\n                      console.error(e);\n                      setUIState('error');\n                      alert('Unable to delete list.');\n                    }\n                  })();\n                }}\n              >\n                <button\n                  type=\"button\"\n                  class=\"light danger\"\n                  disabled={uiState === 'loading'}\n                >\n                  Delete…\n                </button>\n              </MenuConfirm>\n            )}\n          </div>\n        </form>\n      </main>\n    </div>\n  );\n}\n\nexport default ListAddEdit;\n","import './account-info.css';\n\nimport { Menu, MenuDivider, MenuItem, SubMenu } from '@szhsin/react-menu';\nimport {\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n} from 'preact/hooks';\n\nimport { api } from '../utils/api';\nimport enhanceContent from '../utils/enhance-content';\nimport getHTMLText from '../utils/getHTMLText';\nimport handleContentLinks from '../utils/handle-content-links';\nimport niceDateTime from '../utils/nice-date-time';\nimport pmem from '../utils/pmem';\nimport shortenNumber from '../utils/shorten-number';\nimport showToast from '../utils/show-toast';\nimport states, { hideAllModals } from '../utils/states';\nimport store from '../utils/store';\nimport { updateAccount } from '../utils/store-utils';\n\nimport AccountBlock from './account-block';\nimport Avatar from './avatar';\nimport EmojiText from './emoji-text';\nimport Icon from './icon';\nimport Link from './link';\nimport ListAddEdit from './list-add-edit';\nimport Loader from './loader';\nimport MenuConfirm from './menu-confirm';\nimport Modal from './modal';\nimport TranslationBlock from './translation-block';\n\nconst MUTE_DURATIONS = [\n  1000 * 60 * 5, // 5 minutes\n  1000 * 60 * 30, // 30 minutes\n  1000 * 60 * 60, // 1 hour\n  1000 * 60 * 60 * 6, // 6 hours\n  1000 * 60 * 60 * 24, // 1 day\n  1000 * 60 * 60 * 24 * 3, // 3 days\n  1000 * 60 * 60 * 24 * 7, // 1 week\n  0, // forever\n];\nconst MUTE_DURATIONS_LABELS = {\n  0: 'Forever',\n  300_000: '5 minutes',\n  1_800_000: '30 minutes',\n  3_600_000: '1 hour',\n  21_600_000: '6 hours',\n  86_400_000: '1 day',\n  259_200_000: '3 days',\n  604_800_000: '1 week',\n};\n\nconst LIMIT = 80;\n\nconst ACCOUNT_INFO_MAX_AGE = 1000 * 60 * 10; // 10 mins\n\nfunction fetchFamiliarFollowers(currentID, masto) {\n  return masto.v1.accounts.familiarFollowers.fetch({\n    id: [currentID],\n  });\n}\nconst memFetchFamiliarFollowers = pmem(fetchFamiliarFollowers, {\n  maxAge: ACCOUNT_INFO_MAX_AGE,\n});\n\nasync function fetchPostingStats(accountID, masto) {\n  const fetchStatuses = masto.v1.accounts\n    .$select(accountID)\n    .statuses.list({\n      limit: 20,\n    })\n    .next();\n\n  const { value: statuses } = await fetchStatuses;\n  console.log('fetched statuses', statuses);\n  const stats = {\n    total: statuses.length,\n    originals: 0,\n    replies: 0,\n    boosts: 0,\n  };\n  // Categories statuses by type\n  // - Original posts (not replies to others)\n  // - Threads (self-replies + 1st original post)\n  // - Boosts (reblogs)\n  // - Replies (not-self replies)\n  statuses.forEach((status) => {\n    if (status.reblog) {\n      stats.boosts++;\n    } else if (\n      !!status.inReplyToId &&\n      status.inReplyToAccountId !== status.account.id // Not self-reply\n    ) {\n      stats.replies++;\n    } else {\n      stats.originals++;\n    }\n  });\n\n  // Count days since last post\n  if (statuses.length) {\n    stats.daysSinceLastPost = Math.ceil(\n      (Date.now() - new Date(statuses[statuses.length - 1].createdAt)) /\n        86400000,\n    );\n  }\n\n  console.log('posting stats', stats);\n  return stats;\n}\nconst memFetchPostingStats = pmem(fetchPostingStats, {\n  maxAge: ACCOUNT_INFO_MAX_AGE,\n});\n\nfunction AccountInfo({\n  account,\n  fetchAccount = () => {},\n  standalone,\n  instance,\n  authenticated,\n}) {\n  const { masto } = api({\n    instance,\n  });\n  const { masto: currentMasto, instance: currentInstance } = api();\n  const [uiState, setUIState] = useState('default');\n  const isString = typeof account === 'string';\n  const [info, setInfo] = useState(isString ? null : account);\n\n  const isSelf = useMemo(\n    () => account.id === store.session.get('currentAccount'),\n    [account?.id],\n  );\n\n  const sameCurrentInstance = useMemo(\n    () => instance === currentInstance,\n    [instance, currentInstance],\n  );\n\n  useEffect(() => {\n    if (!isString) {\n      setInfo(account);\n      return;\n    }\n    setUIState('loading');\n    (async () => {\n      try {\n        const info = await fetchAccount();\n        states.accounts[`${info.id}@${instance}`] = info;\n        setInfo(info);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setInfo(null);\n        setUIState('error');\n      }\n    })();\n  }, [isString, account, fetchAccount]);\n\n  const {\n    acct,\n    avatar,\n    avatarStatic,\n    bot,\n    createdAt,\n    displayName,\n    emojis,\n    fields,\n    followersCount,\n    followingCount,\n    group,\n    // header,\n    // headerStatic,\n    id,\n    lastStatusAt,\n    locked,\n    note,\n    statusesCount,\n    url,\n    username,\n    memorial,\n    moved,\n    roles,\n  } = info || {};\n  let headerIsAvatar = false;\n  let { header, headerStatic } = info || {};\n  if (!header || /missing\\.png$/.test(header)) {\n    if (avatar && !/missing\\.png$/.test(avatar)) {\n      header = avatar;\n      headerIsAvatar = true;\n      if (avatarStatic && !/missing\\.png$/.test(avatarStatic)) {\n        headerStatic = avatarStatic;\n      }\n    }\n  }\n\n  const accountInstance = useMemo(() => {\n    if (!url) return null;\n    const domain = new URL(url).hostname;\n    return domain;\n  }, [url]);\n\n  const [headerCornerColors, setHeaderCornerColors] = useState([]);\n\n  const followersIterator = useRef();\n  const familiarFollowersCache = useRef([]);\n  async function fetchFollowers(firstLoad) {\n    if (firstLoad || !followersIterator.current) {\n      followersIterator.current = masto.v1.accounts.$select(id).followers.list({\n        limit: LIMIT,\n      });\n    }\n    const results = await followersIterator.current.next();\n    if (isSelf) return results;\n    if (!sameCurrentInstance) return results;\n\n    const { value } = results;\n    let newValue = [];\n    // On first load, fetch familiar followers, merge to top of results' `value`\n    // Remove dups on every fetch\n    if (firstLoad) {\n      const familiarFollowers = await masto.v1.accounts.familiarFollowers.fetch(\n        {\n          id: [id],\n        },\n      );\n      familiarFollowersCache.current = familiarFollowers[0].accounts;\n      newValue = [\n        ...familiarFollowersCache.current,\n        ...value.filter(\n          (account) =>\n            !familiarFollowersCache.current.some(\n              (familiar) => familiar.id === account.id,\n            ),\n        ),\n      ];\n    } else if (value?.length) {\n      newValue = value.filter(\n        (account) =>\n          !familiarFollowersCache.current.some(\n            (familiar) => familiar.id === account.id,\n          ),\n      );\n    }\n\n    return {\n      ...results,\n      value: newValue,\n    };\n  }\n\n  const followingIterator = useRef();\n  async function fetchFollowing(firstLoad) {\n    if (firstLoad || !followingIterator.current) {\n      followingIterator.current = masto.v1.accounts.$select(id).following.list({\n        limit: LIMIT,\n      });\n    }\n    const results = await followingIterator.current.next();\n    return results;\n  }\n\n  const LinkOrDiv = standalone ? 'div' : Link;\n  const accountLink = instance ? `/${instance}/a/${id}` : `/a/${id}`;\n\n  const [familiarFollowers, setFamiliarFollowers] = useState([]);\n  const [postingStats, setPostingStats] = useState();\n  const [postingStatsUIState, setPostingStatsUIState] = useState('default');\n  const hasPostingStats = !!postingStats?.total;\n\n  const renderFamiliarFollowers = async (currentID) => {\n    try {\n      const followers = await memFetchFamiliarFollowers(\n        currentID,\n        currentMasto,\n      );\n      console.log('fetched familiar followers', followers);\n      setFamiliarFollowers(\n        followers[0].accounts.slice(0, FAMILIAR_FOLLOWERS_LIMIT),\n      );\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const renderPostingStats = async () => {\n    if (!id) return;\n    setPostingStatsUIState('loading');\n    try {\n      const stats = await memFetchPostingStats(id, masto);\n      setPostingStats(stats);\n      setPostingStatsUIState('default');\n    } catch (e) {\n      console.error(e);\n      setPostingStatsUIState('error');\n    }\n  };\n\n  const onRelationshipChange = useCallback(\n    ({ relationship, currentID }) => {\n      if (!relationship.following) {\n        renderFamiliarFollowers(currentID);\n        if (!standalone) {\n          renderPostingStats();\n        }\n      }\n    },\n    [standalone, id],\n  );\n\n  return (\n    <div\n      tabIndex=\"-1\"\n      class={`account-container  ${uiState === 'loading' ? 'skeleton' : ''}`}\n      style={{\n        '--header-color-1': headerCornerColors[0],\n        '--header-color-2': headerCornerColors[1],\n        '--header-color-3': headerCornerColors[2],\n        '--header-color-4': headerCornerColors[3],\n      }}\n    >\n      {uiState === 'error' && (\n        <div class=\"ui-state\">\n          <p>Unable to load account.</p>\n          <p>\n            <a\n              href={isString ? account : url}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Go to account page <Icon icon=\"external\" />\n            </a>\n          </p>\n        </div>\n      )}\n      {uiState === 'loading' ? (\n        <>\n          <header>\n            <AccountBlock avatarSize=\"xxxl\" skeleton />\n          </header>\n          <main>\n            <div class=\"note\">\n              <p>███████ ████ ████</p>\n              <p>████ ████████ ██████ █████████ ████ ██</p>\n            </div>\n            <div class=\"account-metadata-box\">\n              <div class=\"profile-metadata\">\n                <div class=\"profile-field\">\n                  <b class=\"more-insignificant\">███</b>\n                  <p>██████</p>\n                </div>\n                <div class=\"profile-field\">\n                  <b class=\"more-insignificant\">████</b>\n                  <p>███████████</p>\n                </div>\n              </div>\n              <div class=\"stats\">\n                <div>\n                  <span>██</span> Followers\n                </div>\n                <div>\n                  <span>██</span> Following\n                </div>\n                <div>\n                  <span>██</span> Posts\n                </div>\n              </div>\n            </div>\n            <div class=\"actions\">\n              <span />\n              <span class=\"buttons\">\n                <button type=\"button\" title=\"More\" class=\"plain\" disabled>\n                  <Icon icon=\"more\" size=\"l\" alt=\"More\" />\n                </button>\n              </span>\n            </div>\n          </main>\n        </>\n      ) : (\n        info && (\n          <>\n            {!!moved && (\n              <div class=\"account-moved\">\n                <p>\n                  <b>{displayName}</b> has indicated that their new account is\n                  now:\n                </p>\n                <AccountBlock\n                  account={moved}\n                  instance={instance}\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    states.showAccount = moved;\n                  }}\n                />\n              </div>\n            )}\n            {!!header && !/missing\\.png$/.test(header) && (\n              <img\n                src={header}\n                alt=\"\"\n                class={`header-banner ${\n                  headerIsAvatar ? 'header-is-avatar' : ''\n                }`}\n                onError={(e) => {\n                  if (e.target.crossOrigin) {\n                    if (e.target.src !== headerStatic) {\n                      e.target.src = headerStatic;\n                    } else {\n                      e.target.removeAttribute('crossorigin');\n                      e.target.src = header;\n                    }\n                  } else if (e.target.src !== headerStatic) {\n                    e.target.src = headerStatic;\n                  } else {\n                    e.target.remove();\n                  }\n                }}\n                crossOrigin=\"anonymous\"\n                onLoad={(e) => {\n                  e.target.classList.add('loaded');\n                  try {\n                    // Get color from four corners of image\n                    const canvas = document.createElement('canvas');\n                    const ctx = canvas.getContext('2d', {\n                      willReadFrequently: true,\n                    });\n                    canvas.width = e.target.width;\n                    canvas.height = e.target.height;\n                    ctx.drawImage(e.target, 0, 0);\n                    // const colors = [\n                    //   ctx.getImageData(0, 0, 1, 1).data,\n                    //   ctx.getImageData(e.target.width - 1, 0, 1, 1).data,\n                    //   ctx.getImageData(0, e.target.height - 1, 1, 1).data,\n                    //   ctx.getImageData(\n                    //     e.target.width - 1,\n                    //     e.target.height - 1,\n                    //     1,\n                    //     1,\n                    //   ).data,\n                    // ];\n                    // Get 10x10 pixels from corners, get average color from each\n                    const pixelDimension = 10;\n                    const colors = [\n                      ctx.getImageData(0, 0, pixelDimension, pixelDimension)\n                        .data,\n                      ctx.getImageData(\n                        e.target.width - pixelDimension,\n                        0,\n                        pixelDimension,\n                        pixelDimension,\n                      ).data,\n                      ctx.getImageData(\n                        0,\n                        e.target.height - pixelDimension,\n                        pixelDimension,\n                        pixelDimension,\n                      ).data,\n                      ctx.getImageData(\n                        e.target.width - pixelDimension,\n                        e.target.height - pixelDimension,\n                        pixelDimension,\n                        pixelDimension,\n                      ).data,\n                    ].map((data) => {\n                      let r = 0;\n                      let g = 0;\n                      let b = 0;\n                      let a = 0;\n                      for (let i = 0; i < data.length; i += 4) {\n                        r += data[i];\n                        g += data[i + 1];\n                        b += data[i + 2];\n                        a += data[i + 3];\n                      }\n                      const dataLength = data.length / 4;\n                      return [\n                        r / dataLength,\n                        g / dataLength,\n                        b / dataLength,\n                        a / dataLength,\n                      ];\n                    });\n                    const rgbColors = colors.map((color) => {\n                      const [r, g, b, a] = lightenRGB(color);\n                      return `rgba(${r}, ${g}, ${b}, ${a})`;\n                    });\n                    setHeaderCornerColors(rgbColors);\n                    console.log({ colors, rgbColors });\n                  } catch (e) {\n                    // Silently fail\n                  }\n                }}\n              />\n            )}\n            <header>\n              <AccountBlock\n                account={info}\n                instance={instance}\n                avatarSize=\"xxxl\"\n                external={standalone}\n                internal={!standalone}\n              />\n            </header>\n            <div class=\"faux-header-bg\" aria-hidden=\"true\" />\n            <main>\n              {!!memorial && <span class=\"tag\">In Memoriam</span>}\n              {!!bot && (\n                <span class=\"tag\">\n                  <Icon icon=\"bot\" /> Automated\n                </span>\n              )}\n              {!!group && (\n                <span class=\"tag\">\n                  <Icon icon=\"group\" /> Group\n                </span>\n              )}\n              {roles?.map((role) => (\n                <span class=\"tag\">\n                  {role.name}\n                  {!!accountInstance && (\n                    <>\n                      {' '}\n                      <span class=\"more-insignificant\">{accountInstance}</span>\n                    </>\n                  )}\n                </span>\n              ))}\n              <div\n                class=\"note\"\n                dir=\"auto\"\n                onClick={handleContentLinks({\n                  instance: currentInstance,\n                })}\n                dangerouslySetInnerHTML={{\n                  __html: enhanceContent(note, { emojis }),\n                }}\n              />\n              <div class=\"account-metadata-box\">\n                {fields?.length > 0 && (\n                  <div class=\"profile-metadata\">\n                    {fields.map(({ name, value, verifiedAt }, i) => (\n                      <div\n                        class={`profile-field ${\n                          verifiedAt ? 'profile-verified' : ''\n                        }`}\n                        key={name + i}\n                        dir=\"auto\"\n                      >\n                        <b>\n                          <EmojiText text={name} emojis={emojis} />{' '}\n                          {!!verifiedAt && (\n                            <Icon icon=\"check-circle\" size=\"s\" />\n                          )}\n                        </b>\n                        <p\n                          dangerouslySetInnerHTML={{\n                            __html: enhanceContent(value, { emojis }),\n                          }}\n                        />\n                      </div>\n                    ))}\n                  </div>\n                )}\n                <div class=\"stats\">\n                  <LinkOrDiv\n                    tabIndex={0}\n                    to={accountLink}\n                    onClick={() => {\n                      // states.showAccount = false;\n                      setTimeout(() => {\n                        states.showGenericAccounts = {\n                          heading: 'Followers',\n                          fetchAccounts: fetchFollowers,\n                        };\n                      }, 0);\n                    }}\n                  >\n                    {!!familiarFollowers.length && (\n                      <span class=\"shazam-container-horizontal\">\n                        <span class=\"shazam-container-inner stats-avatars-bunch\">\n                          {familiarFollowers.map((follower) => (\n                            <Avatar\n                              url={follower.avatarStatic}\n                              size=\"s\"\n                              alt={`${follower.displayName} @${follower.acct}`}\n                              squircle={follower?.bot}\n                            />\n                          ))}\n                        </span>\n                      </span>\n                    )}\n                    <span title={followersCount}>\n                      {shortenNumber(followersCount)}\n                    </span>{' '}\n                    Followers\n                  </LinkOrDiv>\n                  <LinkOrDiv\n                    class=\"insignificant\"\n                    tabIndex={0}\n                    to={accountLink}\n                    onClick={() => {\n                      // states.showAccount = false;\n                      setTimeout(() => {\n                        states.showGenericAccounts = {\n                          heading: 'Following',\n                          fetchAccounts: fetchFollowing,\n                        };\n                      }, 0);\n                    }}\n                  >\n                    <span title={followingCount}>\n                      {shortenNumber(followingCount)}\n                    </span>{' '}\n                    Following\n                    <br />\n                  </LinkOrDiv>\n                  <LinkOrDiv\n                    class=\"insignificant\"\n                    to={accountLink}\n                    // onClick={\n                    //   standalone\n                    //     ? undefined\n                    //     : () => {\n                    //         hideAllModals();\n                    //       }\n                    // }\n                  >\n                    <span title={statusesCount}>\n                      {shortenNumber(statusesCount)}\n                    </span>{' '}\n                    Posts\n                  </LinkOrDiv>\n                  {!!createdAt && (\n                    <div class=\"insignificant\">\n                      Joined{' '}\n                      <time datetime={createdAt}>\n                        {niceDateTime(createdAt, {\n                          hideTime: true,\n                        })}\n                      </time>\n                    </div>\n                  )}\n                </div>\n              </div>\n              {!!postingStats && (\n                <LinkOrDiv\n                  to={accountLink}\n                  class=\"account-metadata-box\"\n                  // onClick={() => {\n                  //   states.showAccount = false;\n                  // }}\n                >\n                  <div class=\"shazam-container\">\n                    <div class=\"shazam-container-inner\">\n                      {hasPostingStats ? (\n                        <div\n                          class=\"posting-stats\"\n                          title={`${Math.round(\n                            (postingStats.originals / postingStats.total) * 100,\n                          )}% original posts, ${Math.round(\n                            (postingStats.replies / postingStats.total) * 100,\n                          )}% replies, ${Math.round(\n                            (postingStats.boosts / postingStats.total) * 100,\n                          )}% boosts`}\n                        >\n                          <div>\n                            {postingStats.daysSinceLastPost < 365\n                              ? `Last ${postingStats.total} post${\n                                  postingStats.total > 1 ? 's' : ''\n                                } in the past \n                      ${postingStats.daysSinceLastPost} day${\n                                  postingStats.daysSinceLastPost > 1 ? 's' : ''\n                                }`\n                              : `\n                      Last ${postingStats.total} posts in the past year(s)\n                      `}\n                          </div>\n                          <div\n                            class=\"posting-stats-bar\"\n                            style={{\n                              // [originals | replies | boosts]\n                              '--originals-percentage': `${\n                                (postingStats.originals / postingStats.total) *\n                                100\n                              }%`,\n                              '--replies-percentage': `${\n                                ((postingStats.originals +\n                                  postingStats.replies) /\n                                  postingStats.total) *\n                                100\n                              }%`,\n                            }}\n                          />\n                          <div class=\"posting-stats-legends\">\n                            <span class=\"ib\">\n                              <span class=\"posting-stats-legend-item posting-stats-legend-item-originals\" />{' '}\n                              Original\n                            </span>{' '}\n                            <span class=\"ib\">\n                              <span class=\"posting-stats-legend-item posting-stats-legend-item-replies\" />{' '}\n                              Replies\n                            </span>{' '}\n                            <span class=\"ib\">\n                              <span class=\"posting-stats-legend-item posting-stats-legend-item-boosts\" />{' '}\n                              Boosts\n                            </span>\n                          </div>\n                        </div>\n                      ) : (\n                        <div class=\"posting-stats\">Post stats unavailable.</div>\n                      )}\n                    </div>\n                  </div>\n                </LinkOrDiv>\n              )}\n              <div class=\"account-metadata-box\">\n                <div\n                  class=\"shazam-container no-animation\"\n                  hidden={!!postingStats}\n                >\n                  <div class=\"shazam-container-inner\">\n                    <button\n                      type=\"button\"\n                      class=\"posting-stats-button\"\n                      disabled={postingStatsUIState === 'loading'}\n                      onClick={() => {\n                        renderPostingStats();\n                      }}\n                    >\n                      <div\n                        class={`posting-stats-bar posting-stats-icon ${\n                          postingStatsUIState === 'loading' ? 'loading' : ''\n                        }`}\n                        style={{\n                          '--originals-percentage': '33%',\n                          '--replies-percentage': '66%',\n                        }}\n                      />\n                      View post stats{' '}\n                      {/* <Loader\n                        abrupt\n                        hidden={postingStatsUIState !== 'loading'}\n                      /> */}\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </main>\n            <footer>\n              <RelatedActions\n                info={info}\n                instance={instance}\n                authenticated={authenticated}\n                onRelationshipChange={onRelationshipChange}\n              />\n            </footer>\n          </>\n        )\n      )}\n    </div>\n  );\n}\n\nconst FAMILIAR_FOLLOWERS_LIMIT = 3;\n\nfunction RelatedActions({\n  info,\n  instance,\n  authenticated,\n  onRelationshipChange = () => {},\n}) {\n  if (!info) return null;\n  const {\n    masto: currentMasto,\n    instance: currentInstance,\n    authenticated: currentAuthenticated,\n  } = api();\n  const sameInstance = instance === currentInstance;\n\n  const [relationshipUIState, setRelationshipUIState] = useState('default');\n  const [relationship, setRelationship] = useState(null);\n\n  const { id, acct, url, username, locked, lastStatusAt, note, fields, moved } =\n    info;\n  const accountID = useRef(id);\n\n  const {\n    following,\n    showingReblogs,\n    notifying,\n    followedBy,\n    blocking,\n    blockedBy,\n    muting,\n    mutingNotifications,\n    requested,\n    domainBlocking,\n    endorsed,\n    note: privateNote,\n  } = relationship || {};\n\n  const [currentInfo, setCurrentInfo] = useState(null);\n  const [isSelf, setIsSelf] = useState(false);\n\n  useEffect(() => {\n    if (info) {\n      const currentAccount = store.session.get('currentAccount');\n      let currentID;\n      (async () => {\n        if (sameInstance && authenticated) {\n          currentID = id;\n        } else if (!sameInstance && currentAuthenticated) {\n          // Grab this account from my logged-in instance\n          const acctHasInstance = info.acct.includes('@');\n          try {\n            const results = await currentMasto.v2.search.fetch({\n              q: acctHasInstance ? info.acct : `${info.username}@${instance}`,\n              type: 'accounts',\n              limit: 1,\n              resolve: true,\n            });\n            console.log('🥏 Fetched account from logged-in instance', results);\n            if (results.accounts.length) {\n              currentID = results.accounts[0].id;\n              setCurrentInfo(results.accounts[0]);\n            }\n          } catch (e) {\n            console.error(e);\n          }\n        }\n\n        if (!currentID) return;\n\n        if (currentAccount === currentID) {\n          // It's myself!\n          setIsSelf(true);\n          return;\n        }\n\n        accountID.current = currentID;\n\n        if (moved) return;\n\n        setRelationshipUIState('loading');\n\n        const fetchRelationships = currentMasto.v1.accounts.relationships.fetch(\n          {\n            id: [currentID],\n          },\n        );\n\n        try {\n          const relationships = await fetchRelationships;\n          console.log('fetched relationship', relationships);\n          setRelationshipUIState('default');\n\n          if (relationships.length) {\n            const relationship = relationships[0];\n            setRelationship(relationship);\n            onRelationshipChange({ relationship, currentID });\n          }\n        } catch (e) {\n          console.error(e);\n          setRelationshipUIState('error');\n        }\n      })();\n    }\n  }, [info, authenticated]);\n\n  useEffect(() => {\n    if (info && isSelf) {\n      updateAccount(info);\n    }\n  }, [info, isSelf]);\n\n  const loading = relationshipUIState === 'loading';\n  const menuInstanceRef = useRef(null);\n\n  const [showTranslatedBio, setShowTranslatedBio] = useState(false);\n  const [showAddRemoveLists, setShowAddRemoveLists] = useState(false);\n  const [showPrivateNoteModal, setShowPrivateNoteModal] = useState(false);\n\n  return (\n    <>\n      <div class=\"actions\">\n        <span>\n          {followedBy ? (\n            <span class=\"tag\">Following you</span>\n          ) : !!lastStatusAt ? (\n            <small class=\"insignificant\">\n              Last post:{' '}\n              <span class=\"ib\">\n                {niceDateTime(lastStatusAt, {\n                  hideTime: true,\n                })}\n              </span>\n            </small>\n          ) : (\n            <span />\n          )}\n          {muting && <span class=\"tag danger\">Muted</span>}\n          {blocking && <span class=\"tag danger\">Blocked</span>}\n        </span>{' '}\n        <span class=\"buttons\">\n          {!!privateNote && (\n            <button\n              type=\"button\"\n              class=\"private-note-tag\"\n              title=\"Private note\"\n              onClick={() => {\n                setShowPrivateNoteModal(true);\n              }}\n              dir=\"auto\"\n            >\n              <span>{privateNote}</span>\n            </button>\n          )}\n          <Menu\n            instanceRef={menuInstanceRef}\n            portal={{\n              target: document.body,\n            }}\n            containerProps={{\n              style: {\n                // Higher than the backdrop\n                zIndex: 1001,\n              },\n              onClick: (e) => {\n                if (e.target === e.currentTarget) {\n                  menuInstanceRef.current?.closeMenu?.();\n                }\n              },\n            }}\n            align=\"center\"\n            position=\"anchor\"\n            overflow=\"auto\"\n            boundingBoxPadding=\"8 8 8 8\"\n            menuButton={\n              <button\n                type=\"button\"\n                title=\"More\"\n                class=\"plain\"\n                disabled={loading}\n              >\n                <Icon icon=\"more\" size=\"l\" alt=\"More\" />\n              </button>\n            }\n          >\n            {currentAuthenticated && !isSelf && (\n              <>\n                <MenuItem\n                  onClick={() => {\n                    states.showCompose = {\n                      draftStatus: {\n                        status: `@${currentInfo?.acct || acct} `,\n                      },\n                    };\n                  }}\n                >\n                  <Icon icon=\"at\" />\n                  <span>Mention @{username}</span>\n                </MenuItem>\n                <MenuItem\n                  onClick={() => {\n                    setShowTranslatedBio(true);\n                  }}\n                >\n                  <Icon icon=\"translate\" />\n                  <span>Translate bio</span>\n                </MenuItem>\n                <MenuItem\n                  onClick={() => {\n                    setShowPrivateNoteModal(true);\n                  }}\n                >\n                  <Icon icon=\"pencil\" />\n                  <span>\n                    {privateNote ? 'Edit private note' : 'Add private note'}\n                  </span>\n                </MenuItem>\n                {/* Add/remove from lists is only possible if following the account */}\n                {following && (\n                  <MenuItem\n                    onClick={() => {\n                      setShowAddRemoveLists(true);\n                    }}\n                  >\n                    <Icon icon=\"list\" />\n                    <span>Add/remove from Lists</span>\n                  </MenuItem>\n                )}\n                <MenuDivider />\n              </>\n            )}\n            <MenuItem href={url} target=\"_blank\">\n              <Icon icon=\"external\" />\n              <small class=\"menu-double-lines\">{niceAccountURL(url)}</small>\n            </MenuItem>\n            <div class=\"menu-horizontal\">\n              <MenuItem\n                onClick={() => {\n                  // Copy url to clipboard\n                  try {\n                    navigator.clipboard.writeText(url);\n                    showToast('Link copied');\n                  } catch (e) {\n                    console.error(e);\n                    showToast('Unable to copy link');\n                  }\n                }}\n              >\n                <Icon icon=\"link\" />\n                <span>Copy</span>\n              </MenuItem>\n              {navigator?.share &&\n                navigator?.canShare?.({\n                  url,\n                }) && (\n                  <MenuItem\n                    onClick={() => {\n                      try {\n                        navigator.share({\n                          url,\n                        });\n                      } catch (e) {\n                        console.error(e);\n                        alert(\"Sharing doesn't seem to work.\");\n                      }\n                    }}\n                  >\n                    <Icon icon=\"share\" />\n                    <span>Share…</span>\n                  </MenuItem>\n                )}\n            </div>\n            {!!relationship && (\n              <>\n                <MenuDivider />\n                {muting ? (\n                  <MenuItem\n                    onClick={() => {\n                      setRelationshipUIState('loading');\n                      (async () => {\n                        try {\n                          const newRelationship = await currentMasto.v1.accounts\n                            .$select(currentInfo?.id || id)\n                            .unmute();\n                          console.log('unmuting', newRelationship);\n                          setRelationship(newRelationship);\n                          setRelationshipUIState('default');\n                          showToast(`Unmuted @${username}`);\n                          states.reloadGenericAccounts.id = 'mute';\n                          states.reloadGenericAccounts.counter++;\n                        } catch (e) {\n                          console.error(e);\n                          setRelationshipUIState('error');\n                        }\n                      })();\n                    }}\n                  >\n                    <Icon icon=\"unmute\" />\n                    <span>Unmute @{username}</span>\n                  </MenuItem>\n                ) : (\n                  <SubMenu\n                    openTrigger=\"clickOnly\"\n                    direction=\"bottom\"\n                    overflow=\"auto\"\n                    shift={16}\n                    label={\n                      <>\n                        <Icon icon=\"mute\" />\n                        <span class=\"menu-grow\">Mute @{username}…</span>\n                        <span\n                          style={{\n                            textOverflow: 'clip',\n                          }}\n                        >\n                          <Icon icon=\"time\" />\n                          <Icon icon=\"chevron-right\" />\n                        </span>\n                      </>\n                    }\n                  >\n                    <div class=\"menu-wrap\">\n                      {MUTE_DURATIONS.map((duration) => (\n                        <MenuItem\n                          onClick={() => {\n                            setRelationshipUIState('loading');\n                            (async () => {\n                              try {\n                                const newRelationship =\n                                  await currentMasto.v1.accounts\n                                    .$select(currentInfo?.id || id)\n                                    .mute({\n                                      duration,\n                                    });\n                                console.log('muting', newRelationship);\n                                setRelationship(newRelationship);\n                                setRelationshipUIState('default');\n                                showToast(\n                                  `Muted @${username} for ${MUTE_DURATIONS_LABELS[duration]}`,\n                                );\n                                states.reloadGenericAccounts.id = 'mute';\n                                states.reloadGenericAccounts.counter++;\n                              } catch (e) {\n                                console.error(e);\n                                setRelationshipUIState('error');\n                                showToast(`Unable to mute @${username}`);\n                              }\n                            })();\n                          }}\n                        >\n                          {MUTE_DURATIONS_LABELS[duration]}\n                        </MenuItem>\n                      ))}\n                    </div>\n                  </SubMenu>\n                )}\n                <MenuConfirm\n                  subMenu\n                  confirm={!blocking}\n                  confirmLabel={\n                    <>\n                      <Icon icon=\"block\" />\n                      <span>Block @{username}?</span>\n                    </>\n                  }\n                  menuItemClassName=\"danger\"\n                  onClick={() => {\n                    // if (!blocking && !confirm(`Block @${username}?`)) {\n                    //   return;\n                    // }\n                    setRelationshipUIState('loading');\n                    (async () => {\n                      try {\n                        if (blocking) {\n                          const newRelationship = await currentMasto.v1.accounts\n                            .$select(currentInfo?.id || id)\n                            .unblock();\n                          console.log('unblocking', newRelationship);\n                          setRelationship(newRelationship);\n                          setRelationshipUIState('default');\n                          showToast(`Unblocked @${username}`);\n                        } else {\n                          const newRelationship = await currentMasto.v1.accounts\n                            .$select(currentInfo?.id || id)\n                            .block();\n                          console.log('blocking', newRelationship);\n                          setRelationship(newRelationship);\n                          setRelationshipUIState('default');\n                          showToast(`Blocked @${username}`);\n                        }\n                        states.reloadGenericAccounts.id = 'block';\n                        states.reloadGenericAccounts.counter++;\n                      } catch (e) {\n                        console.error(e);\n                        setRelationshipUIState('error');\n                        if (blocking) {\n                          showToast(`Unable to unblock @${username}`);\n                        } else {\n                          showToast(`Unable to block @${username}`);\n                        }\n                      }\n                    })();\n                  }}\n                >\n                  {blocking ? (\n                    <>\n                      <Icon icon=\"unblock\" />\n                      <span>Unblock @{username}</span>\n                    </>\n                  ) : (\n                    <>\n                      <Icon icon=\"block\" />\n                      <span>Block @{username}…</span>\n                    </>\n                  )}\n                </MenuConfirm>\n                {/* <MenuItem>\n                <Icon icon=\"flag\" />\n                <span>Report @{username}…</span>\n              </MenuItem> */}\n              </>\n            )}\n          </Menu>\n          {!relationship && relationshipUIState === 'loading' && (\n            <Loader abrupt />\n          )}\n          {!!relationship && (\n            <MenuConfirm\n              confirm={following || requested}\n              confirmLabel={\n                <span>\n                  {requested\n                    ? 'Withdraw follow request?'\n                    : `Unfollow @${info.acct || info.username}?`}\n                </span>\n              }\n              menuItemClassName=\"danger\"\n              align=\"end\"\n              disabled={loading}\n              onClick={() => {\n                setRelationshipUIState('loading');\n                (async () => {\n                  try {\n                    let newRelationship;\n\n                    if (following || requested) {\n                      // const yes = confirm(\n                      //   requested\n                      //     ? 'Withdraw follow request?'\n                      //     : `Unfollow @${info.acct || info.username}?`,\n                      // );\n\n                      // if (yes) {\n                      newRelationship = await currentMasto.v1.accounts\n                        .$select(accountID.current)\n                        .unfollow();\n                      // }\n                    } else {\n                      newRelationship = await currentMasto.v1.accounts\n                        .$select(accountID.current)\n                        .follow();\n                    }\n\n                    if (newRelationship) setRelationship(newRelationship);\n                    setRelationshipUIState('default');\n                  } catch (e) {\n                    alert(e);\n                    setRelationshipUIState('error');\n                  }\n                })();\n              }}\n            >\n              <button\n                type=\"button\"\n                class={`${following || requested ? 'light swap' : ''}`}\n                data-swap-state={following || requested ? 'danger' : ''}\n                disabled={loading}\n              >\n                {following ? (\n                  <>\n                    <span>Following</span>\n                    <span>Unfollow…</span>\n                  </>\n                ) : requested ? (\n                  <>\n                    <span>Requested</span>\n                    <span>Withdraw…</span>\n                  </>\n                ) : locked ? (\n                  <>\n                    <Icon icon=\"lock\" /> <span>Follow</span>\n                  </>\n                ) : (\n                  'Follow'\n                )}\n              </button>\n            </MenuConfirm>\n          )}\n        </span>\n      </div>\n      {!!showTranslatedBio && (\n        <Modal\n          class=\"light\"\n          onClose={() => {\n            setShowTranslatedBio(false);\n          }}\n        >\n          <TranslatedBioSheet\n            note={note}\n            fields={fields}\n            onClose={() => setShowTranslatedBio(false)}\n          />\n        </Modal>\n      )}\n      {!!showAddRemoveLists && (\n        <Modal\n          class=\"light\"\n          onClose={() => {\n            setShowAddRemoveLists(false);\n          }}\n        >\n          <AddRemoveListsSheet\n            accountID={accountID.current}\n            onClose={() => setShowAddRemoveLists(false)}\n          />\n        </Modal>\n      )}\n      {!!showPrivateNoteModal && (\n        <Modal\n          class=\"light\"\n          onClose={() => {\n            setShowPrivateNoteModal(false);\n          }}\n        >\n          <PrivateNoteSheet\n            account={info}\n            note={privateNote}\n            onRelationshipChange={(relationship) => {\n              setRelationship(relationship);\n              // onRelationshipChange({ relationship, currentID: accountID.current });\n            }}\n            onClose={() => setShowPrivateNoteModal(false)}\n          />\n        </Modal>\n      )}\n    </>\n  );\n}\n\n// Apply more alpha if high luminence\nfunction lightenRGB([r, g, b]) {\n  const luminence = 0.2126 * r + 0.7152 * g + 0.0722 * b;\n  console.log('luminence', luminence);\n  let alpha;\n  if (luminence >= 220) {\n    alpha = 1;\n  } else if (luminence <= 50) {\n    alpha = 0.1;\n  } else {\n    alpha = luminence / 255;\n  }\n  alpha = Math.min(1, alpha);\n  return [r, g, b, alpha];\n}\n\nfunction niceAccountURL(url) {\n  if (!url) return;\n  const urlObj = new URL(url);\n  const { host, pathname } = urlObj;\n  const path = pathname.replace(/\\/$/, '').replace(/^\\//, '');\n  return (\n    <>\n      <span class=\"more-insignificant\">{host}/</span>\n      <wbr />\n      <span>{path}</span>\n    </>\n  );\n}\n\nfunction TranslatedBioSheet({ note, fields, onClose }) {\n  const fieldsText =\n    fields\n      ?.map(({ name, value }) => `${name}\\n${getHTMLText(value)}`)\n      .join('\\n\\n') || '';\n\n  const text = getHTMLText(note) + (fieldsText ? `\\n\\n${fieldsText}` : '');\n\n  return (\n    <div class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Translated Bio</h2>\n      </header>\n      <main>\n        <p\n          style={{\n            whiteSpace: 'pre-wrap',\n          }}\n        >\n          {text}\n        </p>\n        <TranslationBlock forceTranslate text={text} />\n      </main>\n    </div>\n  );\n}\n\nfunction AddRemoveListsSheet({ accountID, onClose }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [lists, setLists] = useState([]);\n  const [listsContainingAccount, setListsContainingAccount] = useState([]);\n  const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const lists = await masto.v1.lists.list();\n        lists.sort((a, b) => a.title.localeCompare(b.title));\n        const listsContainingAccount = await masto.v1.accounts\n          .$select(accountID)\n          .lists.list();\n        console.log({ lists, listsContainingAccount });\n        setLists(lists);\n        setListsContainingAccount(listsContainingAccount);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, [reloadCount]);\n\n  const [showListAddEditModal, setShowListAddEditModal] = useState(false);\n\n  return (\n    <div class=\"sheet\" id=\"list-add-remove-container\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Add/Remove from Lists</h2>\n      </header>\n      <main>\n        {lists.length > 0 ? (\n          <ul class=\"list-add-remove\">\n            {lists.map((list) => {\n              const inList = listsContainingAccount.some(\n                (l) => l.id === list.id,\n              );\n              return (\n                <li>\n                  <button\n                    type=\"button\"\n                    class={`light ${inList ? 'checked' : ''}`}\n                    disabled={uiState === 'loading'}\n                    onClick={() => {\n                      setUIState('loading');\n                      (async () => {\n                        try {\n                          if (inList) {\n                            await masto.v1.lists\n                              .$select(list.id)\n                              .accounts.remove({\n                                accountIds: [accountID],\n                              });\n                          } else {\n                            await masto.v1.lists\n                              .$select(list.id)\n                              .accounts.create({\n                                accountIds: [accountID],\n                              });\n                          }\n                          // setUIState('default');\n                          reload();\n                        } catch (e) {\n                          console.error(e);\n                          setUIState('error');\n                          alert(\n                            inList\n                              ? 'Unable to remove from list.'\n                              : 'Unable to add to list.',\n                          );\n                        }\n                      })();\n                    }}\n                  >\n                    <Icon icon=\"check-circle\" />\n                    <span>{list.title}</span>\n                  </button>\n                </li>\n              );\n            })}\n          </ul>\n        ) : uiState === 'loading' ? (\n          <p class=\"ui-state\">\n            <Loader abrupt />\n          </p>\n        ) : uiState === 'error' ? (\n          <p class=\"ui-state\">Unable to load lists.</p>\n        ) : (\n          <p class=\"ui-state\">No lists.</p>\n        )}\n        <button\n          type=\"button\"\n          class=\"plain2\"\n          onClick={() => setShowListAddEditModal(true)}\n          disabled={uiState !== 'default'}\n        >\n          <Icon icon=\"plus\" size=\"l\" /> <span>New list</span>\n        </button>\n      </main>\n      {showListAddEditModal && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowListAddEditModal(false);\n            }\n          }}\n        >\n          <ListAddEdit\n            list={showListAddEditModal?.list}\n            onClose={(result) => {\n              if (result.state === 'success') {\n                reload();\n              }\n              setShowListAddEditModal(false);\n            }}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nfunction PrivateNoteSheet({\n  account,\n  note: initialNote,\n  onRelationshipChange = () => {},\n  onClose = () => {},\n}) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const textareaRef = useRef(null);\n\n  useEffect(() => {\n    let timer;\n    if (textareaRef.current && !initialNote) {\n      timer = setTimeout(() => {\n        textareaRef.current.focus?.();\n      }, 100);\n    }\n    return () => {\n      clearTimeout(timer);\n    };\n  }, []);\n\n  return (\n    <div class=\"sheet\" id=\"private-note-container\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <b>Private note about @{account?.username || account?.acct}</b>\n      </header>\n      <main>\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const note = formData.get('note');\n            if (note?.trim() !== initialNote?.trim()) {\n              setUIState('loading');\n              (async () => {\n                try {\n                  const newRelationship = await masto.v1.accounts\n                    .$select(account?.id)\n                    .note.create({\n                      comment: note,\n                    });\n                  console.log('updated relationship', newRelationship);\n                  setUIState('default');\n                  onRelationshipChange(newRelationship);\n                  onClose();\n                } catch (e) {\n                  console.error(e);\n                  setUIState('error');\n                  alert(e?.message || 'Unable to update private note.');\n                }\n              })();\n            }\n          }}\n        >\n          <textarea\n            ref={textareaRef}\n            name=\"note\"\n            disabled={uiState === 'loading'}\n          >\n            {initialNote}\n          </textarea>\n          <footer>\n            <button\n              type=\"button\"\n              class=\"light\"\n              disabled={uiState === 'loading'}\n              onClick={() => {\n                onClose?.();\n              }}\n            >\n              Cancel\n            </button>\n            <span>\n              <Loader abrupt hidden={uiState !== 'loading'} />\n              <button disabled={uiState === 'loading'} type=\"submit\">\n                Save &amp; close\n              </button>\n            </span>\n          </footer>\n        </form>\n      </main>\n    </div>\n  );\n}\n\nexport default AccountInfo;\n","import { useEffect } from 'preact/hooks';\n\nimport { api } from '../utils/api';\nimport states from '../utils/states';\nimport useLocationChange from '../utils/useLocationChange';\n\nimport AccountInfo from './account-info';\nimport Icon from './icon';\n\nfunction AccountSheet({ account, instance: propInstance, onClose }) {\n  const { masto, instance, authenticated } = api({ instance: propInstance });\n  const isString = typeof account === 'string';\n\n  useEffect(() => {\n    if (!isString) {\n      states.accounts[`${account.id}@${instance}`] = account;\n    }\n  }, [account]);\n\n  useLocationChange(onClose);\n\n  return (\n    <div\n      class=\"sheet\"\n      // onClick={(e) => {\n      //   const accountBlock = e.target.closest('.account-block');\n      //   if (accountBlock) {\n      //     onClose({\n      //       destination: 'account-statuses',\n      //     });\n      //   }\n      // }}\n    >\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close outer\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <AccountInfo\n        instance={instance}\n        authenticated={authenticated}\n        account={account}\n        fetchAccount={async () => {\n          if (isString) {\n            try {\n              const info = await masto.v1.accounts.lookup({\n                acct: account,\n                skip_webfinger: false,\n              });\n              return info;\n            } catch (e) {\n              const result = await masto.v2.search.fetch({\n                q: account,\n                type: 'accounts',\n                limit: 1,\n                resolve: authenticated,\n              });\n              if (result.accounts.length) {\n                return result.accounts[0];\n              } else if (/https?:\\/\\/[^/]+\\/@/.test(account)) {\n                const accountURL = new URL(account);\n                const acct = accountURL.pathname.replace(/^\\//, '');\n                const result = await masto.v2.search.fetch({\n                  q: acct,\n                  type: 'accounts',\n                  limit: 1,\n                  resolve: authenticated,\n                });\n                if (result.accounts.length) {\n                  return result.accounts[0];\n                }\n              }\n            }\n          } else {\n            return account;\n          }\n        }}\n      />\n    </div>\n  );\n}\n\nexport default AccountSheet;\n","import './drafts.css';\n\nimport { useEffect, useMemo, useReducer, useState } from 'react';\n\nimport { api } from '../utils/api';\nimport db from '../utils/db';\nimport niceDateTime from '../utils/nice-date-time';\nimport states from '../utils/states';\nimport { getCurrentAccountNS } from '../utils/store-utils';\n\nimport Icon from './icon';\nimport Loader from './loader';\nimport MenuConfirm from './menu-confirm';\n\nfunction Drafts({ onClose }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [drafts, setDrafts] = useState([]);\n  const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const keys = await db.drafts.keys();\n        if (keys.length) {\n          const ns = getCurrentAccountNS();\n          const ownKeys = keys.filter((key) => key.startsWith(ns));\n          if (ownKeys.length) {\n            const drafts = await db.drafts.getMany(ownKeys);\n            drafts.sort(\n              (a, b) =>\n                new Date(b.updatedAt).getTime() -\n                new Date(a.updatedAt).getTime(),\n            );\n            setDrafts(drafts);\n          } else {\n            setDrafts([]);\n          }\n        } else {\n          setDrafts([]);\n        }\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, [reloadCount]);\n\n  const hasDrafts = drafts?.length > 0;\n\n  return (\n    <div class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>\n          Unsent drafts <Loader abrupt hidden={uiState !== 'loading'} />\n        </h2>\n        {hasDrafts && (\n          <div class=\"insignificant\">\n            Looks like you have unsent drafts. Let's continue where you left\n            off.\n          </div>\n        )}\n      </header>\n      <main>\n        {hasDrafts ? (\n          <>\n            <ul class=\"drafts-list\">\n              {drafts.map((draft) => {\n                const { updatedAt, key, draftStatus, replyTo } = draft;\n                const updatedAtDate = new Date(updatedAt);\n                return (\n                  <li key={updatedAt}>\n                    <div class=\"mini-draft-meta\">\n                      <b>\n                        <Icon icon={replyTo ? 'reply' : 'quill'} size=\"s\" />{' '}\n                        <time>\n                          {!!replyTo && (\n                            <>\n                              @{replyTo.account.acct}\n                              <br />\n                            </>\n                          )}\n                          {niceDateTime(updatedAtDate)}\n                        </time>\n                      </b>\n                      <MenuConfirm\n                        confirmLabel={<span>Delete this draft?</span>}\n                        menuItemClassName=\"danger\"\n                        align=\"end\"\n                        disabled={uiState === 'loading'}\n                        onClick={() => {\n                          (async () => {\n                            try {\n                              // const yes = confirm('Delete this draft?');\n                              // if (yes) {\n                              await db.drafts.del(key);\n                              reload();\n                              // }\n                            } catch (e) {\n                              alert('Error deleting draft! Please try again.');\n                            }\n                          })();\n                        }}\n                      >\n                        <button\n                          type=\"button\"\n                          class=\"small light\"\n                          disabled={uiState === 'loading'}\n                        >\n                          Delete&hellip;\n                        </button>\n                      </MenuConfirm>\n                    </div>\n                    <button\n                      type=\"button\"\n                      disabled={uiState === 'loading'}\n                      class=\"draft-item\"\n                      onClick={async () => {\n                        // console.log({ draftStatus });\n                        let replyToStatus;\n                        if (replyTo) {\n                          setUIState('loading');\n                          try {\n                            replyToStatus = await masto.v1.statuses\n                              .$select(replyTo.id)\n                              .fetch();\n                          } catch (e) {\n                            console.error(e);\n                            alert('Error fetching reply-to status!');\n                            setUIState('default');\n                            return;\n                          }\n                          setUIState('default');\n                        }\n                        window.__COMPOSE__ = {\n                          draftStatus,\n                          replyToStatus,\n                        };\n                        states.showCompose = true;\n                        states.showDrafts = false;\n                      }}\n                    >\n                      <MiniDraft draft={draft} />\n                    </button>\n                  </li>\n                );\n              })}\n            </ul>\n            {drafts.length > 1 && (\n              <p>\n                <MenuConfirm\n                  confirmLabel={<span>Delete all drafts?</span>}\n                  menuItemClassName=\"danger\"\n                  disabled={uiState === 'loading'}\n                  onClick={() => {\n                    (async () => {\n                      // const yes = confirm('Delete all drafts?');\n                      // if (yes) {\n                      setUIState('loading');\n                      try {\n                        await db.drafts.delMany(\n                          drafts.map((draft) => draft.key),\n                        );\n                        setUIState('default');\n                        reload();\n                      } catch (e) {\n                        console.error(e);\n                        alert('Error deleting drafts! Please try again.');\n                        setUIState('error');\n                      }\n                      // }\n                    })();\n                  }}\n                >\n                  <button\n                    type=\"button\"\n                    class=\"light danger\"\n                    disabled={uiState === 'loading'}\n                  >\n                    Delete all&hellip;\n                  </button>\n                </MenuConfirm>\n              </p>\n            )}\n          </>\n        ) : (\n          <p>No drafts found.</p>\n        )}\n      </main>\n    </div>\n  );\n}\n\nfunction MiniDraft({ draft }) {\n  const { draftStatus, replyTo } = draft;\n  const { status, spoilerText, poll, mediaAttachments } = draftStatus;\n  const hasPoll = poll?.options?.length > 0;\n  const hasMedia = mediaAttachments?.length > 0;\n  const hasPollOrMedia = hasPoll || hasMedia;\n  const firstImageMedia = useMemo(() => {\n    if (!hasMedia) return;\n    const image = mediaAttachments.find((media) => /image/.test(media.type));\n    if (!image) return;\n    const { file } = image;\n    const objectURL = URL.createObjectURL(file);\n    return objectURL;\n  }, [hasMedia, mediaAttachments]);\n  return (\n    <>\n      <div class=\"mini-draft\">\n        {hasPollOrMedia && (\n          <div\n            class={`mini-draft-aside ${firstImageMedia ? 'has-image' : ''}`}\n            style={\n              firstImageMedia\n                ? {\n                    '--bg-image': `url(${firstImageMedia})`,\n                  }\n                : {}\n            }\n          >\n            {hasPoll && <Icon icon=\"poll\" />}\n            {hasMedia && (\n              <span>\n                <Icon icon=\"attachment\" />{' '}\n                <small>{mediaAttachments?.length}</small>\n              </span>\n            )}\n          </div>\n        )}\n        <div class=\"mini-draft-main\">\n          {!!spoilerText && <div class=\"mini-draft-spoiler\">{spoilerText}</div>}\n          {!!status && <div class=\"mini-draft-status\">{status}</div>}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Drafts;\n","import './generic-accounts.css';\n\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { InView } from 'react-intersection-observer';\nimport { useSnapshot } from 'valtio';\n\nimport states from '../utils/states';\nimport useLocationChange from '../utils/useLocationChange';\n\nimport AccountBlock from './account-block';\nimport Icon from './icon';\nimport Loader from './loader';\n\nexport default function GenericAccounts({ onClose = () => {} }) {\n  const snapStates = useSnapshot(states);\n  const [uiState, setUIState] = useState('default');\n  const [accounts, setAccounts] = useState([]);\n  const [showMore, setShowMore] = useState(false);\n\n  useLocationChange(onClose);\n\n  if (!snapStates.showGenericAccounts) {\n    return null;\n  }\n\n  const {\n    id,\n    heading,\n    fetchAccounts,\n    accounts: staticAccounts,\n    showReactions,\n  } = snapStates.showGenericAccounts;\n\n  const loadAccounts = (firstLoad) => {\n    if (!fetchAccounts) return;\n    if (firstLoad) setAccounts([]);\n    setUIState('loading');\n    (async () => {\n      try {\n        const { done, value } = await fetchAccounts(firstLoad);\n        if (Array.isArray(value)) {\n          if (firstLoad) {\n            setAccounts(value);\n          } else {\n            setAccounts((prev) => [...prev, ...value]);\n          }\n          setShowMore(!done);\n        } else {\n          setShowMore(false);\n        }\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  };\n\n  const firstLoad = useRef(true);\n  useEffect(() => {\n    if (staticAccounts?.length > 0) {\n      setAccounts(staticAccounts);\n    } else {\n      loadAccounts(true);\n      firstLoad.current = false;\n    }\n  }, [staticAccounts, fetchAccounts]);\n\n  useEffect(() => {\n    if (firstLoad.current) return;\n    // reloadGenericAccounts contains value like {id: 'mute', counter: 1}\n    // We only need to reload if the id matches\n    if (snapStates.reloadGenericAccounts?.id === id) {\n      loadAccounts(true);\n    }\n  }, [snapStates.reloadGenericAccounts.counter]);\n\n  return (\n    <div id=\"generic-accounts-container\" class=\"sheet\" tabindex=\"-1\">\n      <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n        <Icon icon=\"x\" />\n      </button>\n      <header>\n        <h2>{heading || 'Accounts'}</h2>\n      </header>\n      <main>\n        {accounts.length > 0 ? (\n          <>\n            <ul class=\"accounts-list\">\n              {accounts.map((account) => (\n                <li key={account.id + (account._types || '')}>\n                  {showReactions && account._types?.length > 0 && (\n                    <div class=\"reactions-block\">\n                      {account._types.map((type) => (\n                        <Icon\n                          icon={\n                            {\n                              reblog: 'rocket',\n                              favourite: 'heart',\n                            }[type]\n                          }\n                          class={`${type}-icon`}\n                        />\n                      ))}\n                    </div>\n                  )}\n                  <AccountBlock account={account} />\n                </li>\n              ))}\n            </ul>\n            {uiState === 'default' ? (\n              showMore ? (\n                <InView\n                  onChange={(inView) => {\n                    if (inView) {\n                      loadAccounts();\n                    }\n                  }}\n                >\n                  <button\n                    type=\"button\"\n                    class=\"plain block\"\n                    onClick={() => loadAccounts()}\n                  >\n                    Show more&hellip;\n                  </button>\n                </InView>\n              ) : (\n                <p class=\"ui-state insignificant\">The end.</p>\n              )\n            ) : (\n              uiState === 'loading' && (\n                <p class=\"ui-state\">\n                  <Loader abrupt />\n                </p>\n              )\n            )}\n          </>\n        ) : uiState === 'loading' ? (\n          <p class=\"ui-state\">\n            <Loader abrupt />\n          </p>\n        ) : uiState === 'error' ? (\n          <p class=\"ui-state\">Error loading accounts</p>\n        ) : (\n          <p class=\"ui-state insignificant\">Nothing to show</p>\n        )}\n      </main>\n    </div>\n  );\n}\n","import { Menu, MenuItem } from '@szhsin/react-menu';\nimport { useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport getTranslateTargetLanguage from '../utils/get-translate-target-language';\nimport localeMatch from '../utils/locale-match';\nimport states from '../utils/states';\n\nimport Icon from './icon';\nimport TranslationBlock from './translation-block';\n\nexport default function MediaAltModal({ alt, lang, onClose }) {\n  const snapStates = useSnapshot(states);\n  const [forceTranslate, setForceTranslate] = useState(false);\n  const targetLanguage = getTranslateTargetLanguage(true);\n  const contentTranslationHideLanguages =\n    snapStates.settings.contentTranslationHideLanguages || [];\n  const differentLanguage =\n    !!lang &&\n    lang !== targetLanguage &&\n    !localeMatch([lang], [targetLanguage]) &&\n    !contentTranslationHideLanguages.find(\n      (l) => lang === l || localeMatch([lang], [l]),\n    );\n\n  return (\n    <div class=\"sheet\" tabindex=\"-1\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close outer\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header class=\"header-grid\">\n        <h2>Media description</h2>\n        <div class=\"header-side\">\n          <Menu\n            align=\"end\"\n            menuButton={\n              <button type=\"button\" class=\"plain4\">\n                <Icon icon=\"more\" alt=\"More\" size=\"xl\" />\n              </button>\n            }\n          >\n            <MenuItem\n              disabled={forceTranslate}\n              onClick={() => {\n                setForceTranslate(true);\n              }}\n            >\n              <Icon icon=\"translate\" />\n              <span>Translate</span>\n            </MenuItem>\n          </Menu>\n        </div>\n      </header>\n      <main lang={lang} dir=\"auto\">\n        <p\n          style={{\n            whiteSpace: 'pre-wrap',\n          }}\n        >\n          {alt}\n        </p>\n        {(differentLanguage || forceTranslate) && (\n          <TranslationBlock\n            forceTranslate={forceTranslate}\n            sourceLanguage={lang}\n            text={alt}\n          />\n        )}\n      </main>\n    </div>\n  );\n}\n","// https://gist.github.com/earthbound19/e7fe15fdf8ca3ef814750a61bc75b5ce\nfunction clamp(value, min, max) {\n  return Math.max(Math.min(value, max), min);\n}\n\nconst gammaToLinear = (c) =>\n  c >= 0.04045 ? Math.pow((c + 0.055) / 1.055, 2.4) : c / 12.92;\nconst linearToGamma = (c) =>\n  c >= 0.0031308 ? 1.055 * Math.pow(c, 1 / 2.4) - 0.055 : 12.92 * c;\n\nexport function rgb2oklab([r, g, b]) {\n  r = gammaToLinear(r / 255);\n  g = gammaToLinear(g / 255);\n  b = gammaToLinear(b / 255);\n  var l = 0.4122214708 * r + 0.5363325363 * g + 0.0514459929 * b;\n  var m = 0.2119034982 * r + 0.6806995451 * g + 0.1073969566 * b;\n  var s = 0.0883024619 * r + 0.2817188376 * g + 0.6299787005 * b;\n  l = Math.cbrt(l);\n  m = Math.cbrt(m);\n  s = Math.cbrt(s);\n  return [\n    l * +0.2104542553 + m * +0.793617785 + s * -0.0040720468,\n    l * +1.9779984951 + m * -2.428592205 + s * +0.4505937099,\n    l * +0.0259040371 + m * +0.7827717662 + s * -0.808675766,\n  ];\n}\n\nexport function oklab2rgb([L, a, b]) {\n  var l = L + a * +0.3963377774 + b * +0.2158037573;\n  var m = L + a * -0.1055613458 + b * -0.0638541728;\n  var s = L + a * -0.0894841775 + b * -1.291485548;\n  // The ** operator here cubes; same as l_*l_*l_ in the C++ example:\n  l = l ** 3;\n  m = m ** 3;\n  s = s ** 3;\n  var r = l * +4.0767416621 + m * -3.3077115913 + s * +0.2309699292;\n  var g = l * -1.2684380046 + m * +2.6097574011 + s * -0.3413193965;\n  var b = l * -0.0041960863 + m * -0.7034186147 + s * +1.707614701;\n  // Convert linear RGB values returned from oklab math to sRGB for our use before returning them:\n  r = 255 * linearToGamma(r);\n  g = 255 * linearToGamma(g);\n  b = 255 * linearToGamma(b);\n  // OPTION: clamp r g and b values to the range 0-255; but if you use the values immediately to draw, JavaScript clamps them on use:\n  r = clamp(r, 0, 255);\n  g = clamp(g, 0, 255);\n  b = clamp(b, 0, 255);\n  // OPTION: round the values. May not be necessary if you use them immediately for rendering in JavaScript, as JavaScript (also) discards decimals on render:\n  r = Math.round(r);\n  g = Math.round(g);\n  b = Math.round(b);\n  return [r, g, b];\n}\n","import { Menu } from '@szhsin/react-menu';\nimport { getBlurHashAverageColor } from 'fast-blurhash';\nimport { useEffect, useLayoutEffect, useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\n\nimport { oklab2rgb, rgb2oklab } from '../utils/color-utils';\nimport states from '../utils/states';\n\nimport Icon from './icon';\nimport Link from './link';\nimport Media from './media';\nimport MenuLink from './menu-link';\n\nfunction MediaModal({\n  mediaAttachments,\n  statusID,\n  instance,\n  lang,\n  index = 0,\n  onClose = () => {},\n}) {\n  const carouselRef = useRef(null);\n\n  const [currentIndex, setCurrentIndex] = useState(index);\n  const carouselFocusItem = useRef(null);\n  useLayoutEffect(() => {\n    carouselFocusItem.current?.scrollIntoView();\n\n    // history.pushState({ mediaModal: true }, '');\n    // const handlePopState = (e) => {\n    //   if (e.state?.mediaModal) {\n    //     onClose();\n    //   }\n    // };\n    // window.addEventListener('popstate', handlePopState);\n    // return () => {\n    //   window.removeEventListener('popstate', handlePopState);\n    // };\n  }, []);\n  const prevStatusID = useRef(statusID);\n  useEffect(() => {\n    const scrollLeft = index * carouselRef.current.clientWidth;\n    const differentStatusID = prevStatusID.current !== statusID;\n    if (differentStatusID) prevStatusID.current = statusID;\n    carouselRef.current.scrollTo({\n      left: scrollLeft,\n      behavior: differentStatusID ? 'auto' : 'smooth',\n    });\n    carouselRef.current.focus();\n  }, [index, statusID]);\n\n  const [showControls, setShowControls] = useState(true);\n\n  useEffect(() => {\n    let handleSwipe = () => {\n      onClose();\n    };\n    if (carouselRef.current) {\n      carouselRef.current.addEventListener('swiped-down', handleSwipe);\n    }\n    return () => {\n      if (carouselRef.current) {\n        carouselRef.current.removeEventListener('swiped-down', handleSwipe);\n      }\n    };\n  }, []);\n\n  useHotkeys(\n    'esc',\n    onClose,\n    {\n      ignoreEventWhen: (e) => {\n        const hasModal = !!document.querySelector('#modal-container > *');\n        return hasModal;\n      },\n    },\n    [onClose],\n  );\n\n  useEffect(() => {\n    let handleScroll = () => {\n      const { clientWidth, scrollLeft } = carouselRef.current;\n      const index = Math.round(scrollLeft / clientWidth);\n      setCurrentIndex(index);\n    };\n    if (carouselRef.current) {\n      carouselRef.current.addEventListener('scroll', handleScroll, {\n        passive: true,\n      });\n    }\n    return () => {\n      if (carouselRef.current) {\n        carouselRef.current.removeEventListener('scroll', handleScroll);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    let timer = setTimeout(() => {\n      carouselRef.current?.focus?.();\n    }, 100);\n    return () => clearTimeout(timer);\n  }, []);\n\n  return (\n    <div class=\"media-modal-container\">\n      <div\n        ref={carouselRef}\n        tabIndex=\"0\"\n        data-swipe-threshold=\"44\"\n        class=\"carousel\"\n        onClick={(e) => {\n          if (\n            e.target.classList.contains('carousel-item') ||\n            e.target.classList.contains('media') ||\n            e.target.classList.contains('media-zoom')\n          ) {\n            onClose();\n          }\n        }}\n      >\n        {mediaAttachments?.map((media, i) => {\n          const { blurhash } = media;\n          let accentColor;\n          if (blurhash) {\n            const averageColor = getBlurHashAverageColor(blurhash);\n            const labAverageColor = rgb2oklab(averageColor);\n            accentColor = oklab2rgb([\n              0.6,\n              labAverageColor[1],\n              labAverageColor[2],\n            ]);\n          }\n          return (\n            <div\n              class=\"carousel-item\"\n              style={{\n                '--accent-color': `rgb(${accentColor?.join(',')})`,\n                '--accent-alpha-color': `rgba(${accentColor?.join(',')}, 0.4)`,\n              }}\n              tabindex=\"0\"\n              key={media.id}\n              ref={i === currentIndex ? carouselFocusItem : null}\n              onClick={(e) => {\n                // console.log(e);\n                // if (e.target !== e.currentTarget) {\n                //   setShowControls(!showControls);\n                // }\n                if (!e.target.classList.contains('media')) {\n                  setShowControls(!showControls);\n                }\n              }}\n            >\n              {!!media.description && (\n                <button\n                  type=\"button\"\n                  class=\"media-alt\"\n                  hidden={!showControls}\n                  onClick={() => {\n                    states.showMediaAlt = {\n                      alt: media.description,\n                      lang,\n                    };\n                  }}\n                >\n                  <span class=\"alt-badge\">ALT</span>\n                  <span class=\"media-alt-desc\" lang={lang} dir=\"auto\">\n                    {media.description}\n                  </span>\n                </button>\n              )}\n              <Media media={media} showOriginal lang={lang} />\n            </div>\n          );\n        })}\n      </div>\n      <div class=\"carousel-top-controls\" hidden={!showControls}>\n        <span>\n          <button\n            type=\"button\"\n            class=\"carousel-button\"\n            onClick={() => onClose()}\n          >\n            <Icon icon=\"x\" />\n          </button>\n        </span>\n        {mediaAttachments?.length > 1 ? (\n          <span class=\"carousel-dots\">\n            {mediaAttachments?.map((media, i) => (\n              <button\n                key={media.id}\n                type=\"button\"\n                disabled={i === currentIndex}\n                class={`carousel-dot ${i === currentIndex ? 'active' : ''}`}\n                onClick={(e) => {\n                  e.preventDefault();\n                  e.stopPropagation();\n                  carouselRef.current.scrollTo({\n                    left: carouselRef.current.clientWidth * i,\n                    behavior: 'smooth',\n                  });\n                  carouselRef.current.focus();\n                }}\n              >\n                <Icon icon=\"round\" size=\"s\" />\n              </button>\n            ))}\n          </span>\n        ) : (\n          <span />\n        )}\n        <span>\n          <Menu\n            overflow=\"auto\"\n            align=\"end\"\n            position=\"anchor\"\n            boundingBoxPadding=\"8 8 8 8\"\n            gap={4}\n            menuClassName=\"glass-menu\"\n            menuButton={\n              <button type=\"button\" class=\"carousel-button\">\n                <Icon icon=\"more\" alt=\"More\" />\n              </button>\n            }\n          >\n            <MenuLink\n              href={\n                mediaAttachments[currentIndex]?.remoteUrl ||\n                mediaAttachments[currentIndex]?.url\n              }\n              class=\"carousel-button\"\n              target=\"_blank\"\n              title=\"Open original media in new window\"\n            >\n              <Icon icon=\"popout\" />\n              <span>Open original media</span>\n            </MenuLink>\n          </Menu>{' '}\n          <Link\n            to={`${instance ? `/${instance}` : ''}/s/${statusID}${\n              window.matchMedia('(min-width: calc(40em + 350px))').matches\n                ? `?media=${currentIndex + 1}`\n                : ''\n            }`}\n            class=\"button carousel-button media-post-link\"\n            // onClick={() => {\n            //   // if small screen (not media query min-width 40em + 350px), run onClose\n            //   if (\n            //     !window.matchMedia('(min-width: calc(40em + 350px))').matches\n            //   ) {\n            //     onClose();\n            //   }\n            // }}\n          >\n            <span class=\"button-label\">See post </span>&raquo;\n          </Link>\n        </span>\n      </div>\n      {mediaAttachments?.length > 1 && (\n        <div class=\"carousel-controls\" hidden={!showControls}>\n          <button\n            type=\"button\"\n            class=\"carousel-button\"\n            hidden={currentIndex === 0}\n            onClick={(e) => {\n              e.preventDefault();\n              e.stopPropagation();\n              carouselRef.current.focus();\n              carouselRef.current.scrollTo({\n                left: carouselRef.current.clientWidth * (currentIndex - 1),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"arrow-left\" />\n          </button>\n          <button\n            type=\"button\"\n            class=\"carousel-button\"\n            hidden={currentIndex === mediaAttachments.length - 1}\n            onClick={(e) => {\n              e.preventDefault();\n              e.stopPropagation();\n              carouselRef.current.focus();\n              carouselRef.current.scrollTo({\n                left: carouselRef.current.clientWidth * (currentIndex + 1),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"arrow-right\" />\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default MediaModal;\n","export default \"__VITE_ASSET__bb9f04b2__\"","export default \"__VITE_ASSET__4fe390d9__\"","export default \"__VITE_ASSET__976e7e89__\"","import { useEffect, useState } from 'preact/hooks';\n\nfunction AsyncText({ children }) {\n  if (typeof children === 'string') return children;\n  const [text, setText] = useState('');\n  useEffect(() => {\n    Promise.resolve(children).then(setText);\n  }, [children]);\n  return text;\n}\n\nexport default AsyncText;\n","import './shortcuts-settings.css';\n\nimport { useAutoAnimate } from '@formkit/auto-animate/preact';\nimport {\n  compressToEncodedURIComponent,\n  decompressFromEncodedURIComponent,\n} from 'lz-string';\nimport { useEffect, useMemo, useRef, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport floatingButtonUrl from '../assets/floating-button.svg';\nimport multiColumnUrl from '../assets/multi-column.svg';\nimport tabMenuBarUrl from '../assets/tab-menu-bar.svg';\n\nimport { api } from '../utils/api';\nimport pmem from '../utils/pmem';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\n\nimport AsyncText from './AsyncText';\nimport Icon from './icon';\nimport MenuConfirm from './menu-confirm';\nimport Modal from './modal';\n\nexport const SHORTCUTS_LIMIT = 9;\n\nconst TYPES = [\n  'following',\n  'mentions',\n  'notifications',\n  'list',\n  'public',\n  'trending',\n  // NOTE: Hide for now\n  // 'search', // Search on Mastodon ain't great\n  // 'account-statuses', // Need @acct search first\n  'hashtag',\n  'bookmarks',\n  'favourites',\n];\nconst TYPE_TEXT = {\n  following: 'Home / Following',\n  notifications: 'Notifications',\n  list: 'List',\n  public: 'Public (Local / Federated)',\n  search: 'Search',\n  'account-statuses': 'Account',\n  bookmarks: 'Bookmarks',\n  favourites: 'Likes',\n  hashtag: 'Hashtag',\n  trending: 'Trending',\n  mentions: 'Mentions',\n};\nconst TYPE_PARAMS = {\n  list: [\n    {\n      text: 'List ID',\n      name: 'id',\n    },\n  ],\n  public: [\n    {\n      text: 'Local only',\n      name: 'local',\n      type: 'checkbox',\n    },\n    {\n      text: 'Instance',\n      name: 'instance',\n      type: 'text',\n      placeholder: 'Optional, e.g. mastodon.social',\n      notRequired: true,\n    },\n  ],\n  trending: [\n    {\n      text: 'Instance',\n      name: 'instance',\n      type: 'text',\n      placeholder: 'Optional, e.g. mastodon.social',\n      notRequired: true,\n    },\n  ],\n  search: [\n    {\n      text: 'Search term',\n      name: 'query',\n      type: 'text',\n    },\n  ],\n  'account-statuses': [\n    {\n      text: '@',\n      name: 'id',\n      type: 'text',\n      placeholder: 'cheeaun@mastodon.social',\n    },\n  ],\n  hashtag: [\n    {\n      text: '#',\n      name: 'hashtag',\n      type: 'text',\n      placeholder: 'e.g. PixelArt (Max 5, space-separated)',\n      pattern: '[^#]+',\n    },\n    {\n      text: 'Media only',\n      name: 'media',\n      type: 'checkbox',\n    },\n    {\n      text: 'Instance',\n      name: 'instance',\n      type: 'text',\n      placeholder: 'Optional, e.g. mastodon.social',\n      notRequired: true,\n    },\n  ],\n};\nexport const SHORTCUTS_META = {\n  following: {\n    id: 'home',\n    title: (_, index) => (index === 0 ? 'Home' : 'Following'),\n    path: '/',\n    icon: 'home',\n  },\n  mentions: {\n    id: 'mentions',\n    title: 'Mentions',\n    path: '/mentions',\n    icon: 'at',\n  },\n  notifications: {\n    id: 'notifications',\n    title: 'Notifications',\n    path: '/notifications',\n    icon: 'notification',\n  },\n  list: {\n    id: 'list',\n    title: pmem(async ({ id }) => {\n      const list = await api().masto.v1.lists.$select(id).fetch();\n      return list.title;\n    }),\n    path: ({ id }) => `/l/${id}`,\n    icon: 'list',\n  },\n  public: {\n    id: 'public',\n    title: ({ local }) => (local ? 'Local' : 'Federated'),\n    subtitle: ({ instance }) => instance || api().instance,\n    path: ({ local, instance }) => `/${instance}/p${local ? '/l' : ''}`,\n    icon: ({ local }) => (local ? 'group' : 'earth'),\n  },\n  trending: {\n    id: 'trending',\n    title: 'Trending',\n    subtitle: ({ instance }) => instance || api().instance,\n    path: ({ instance }) => `/${instance}/trending`,\n    icon: 'chart',\n  },\n  search: {\n    id: 'search',\n    title: ({ query }) => query,\n    path: ({ query }) => `/search?q=${query}`,\n    icon: 'search',\n  },\n  'account-statuses': {\n    id: 'account-statuses',\n    title: pmem(async ({ id }) => {\n      const account = await api().masto.v1.accounts.$select(id).fetch();\n      return account.username || account.acct || account.displayName;\n    }),\n    path: ({ id }) => `/a/${id}`,\n    icon: 'user',\n  },\n  bookmarks: {\n    id: 'bookmarks',\n    title: 'Bookmarks',\n    path: '/b',\n    icon: 'bookmark',\n  },\n  favourites: {\n    id: 'favourites',\n    title: 'Likes',\n    path: '/f',\n    icon: 'heart',\n  },\n  hashtag: {\n    id: 'hashtag',\n    title: ({ hashtag }) => hashtag,\n    subtitle: ({ instance }) => instance || api().instance,\n    path: ({ hashtag, instance, media }) =>\n      `${instance ? `/${instance}` : ''}/t/${hashtag.split(/\\s+/).join('+')}${\n        media ? '?media=1' : ''\n      }`,\n    icon: 'hashtag',\n  },\n};\n\nfunction ShortcutsSettings({ onClose }) {\n  const snapStates = useSnapshot(states);\n  const { masto } = api();\n  const { shortcuts } = snapStates;\n\n  const [lists, setLists] = useState([]);\n  const [followedHashtags, setFollowedHashtags] = useState([]);\n  const [showForm, setShowForm] = useState(false);\n  const [showImportExport, setShowImportExport] = useState(false);\n\n  const [shortcutsListParent] = useAutoAnimate();\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const lists = await masto.v1.lists.list();\n        lists.sort((a, b) => a.title.localeCompare(b.title));\n        setLists(lists);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n\n    (async () => {\n      try {\n        const iterator = masto.v1.followedTags.list();\n        const tags = [];\n        do {\n          const { value, done } = await iterator.next();\n          if (done || value?.length === 0) break;\n          tags.push(...value);\n        } while (true);\n        setFollowedHashtags(tags);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, []);\n\n  return (\n    <div id=\"shortcuts-settings-container\" class=\"sheet\" tabindex=\"-1\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>\n          <Icon icon=\"shortcut\" /> Shortcuts{' '}\n          <sup\n            style={{\n              fontSize: 12,\n              opacity: 0.5,\n              textTransform: 'uppercase',\n            }}\n          >\n            beta\n          </sup>\n        </h2>\n      </header>\n      <main>\n        <p>Specify a list of shortcuts that'll appear&nbsp;as:</p>\n        <div class=\"shortcuts-view-mode\">\n          {[\n            {\n              value: 'float-button',\n              label: 'Floating button',\n              imgURL: floatingButtonUrl,\n            },\n            {\n              value: 'tab-menu-bar',\n              label: 'Tab/Menu bar',\n              imgURL: tabMenuBarUrl,\n            },\n            {\n              value: 'multi-column',\n              label: 'Multi-column',\n              imgURL: multiColumnUrl,\n            },\n          ].map(({ value, label, imgURL }) => {\n            const checked =\n              snapStates.settings.shortcutsViewMode === value ||\n              (value === 'float-button' &&\n                !snapStates.settings.shortcutsViewMode);\n            return (\n              <label key={value} class={checked ? 'checked' : ''}>\n                <input\n                  type=\"radio\"\n                  name=\"shortcuts-view-mode\"\n                  value={value}\n                  checked={checked}\n                  onChange={(e) => {\n                    states.settings.shortcutsViewMode = e.target.value;\n                  }}\n                />{' '}\n                <img src={imgURL} alt=\"\" width=\"80\" height=\"58\" />{' '}\n                <span>{label}</span>\n              </label>\n            );\n          })}\n        </div>\n        {/* <select\n              value={snapStates.settings.shortcutsViewMode || 'float-button'}\n              onChange={(e) => {\n                states.settings.shortcutsViewMode = e.target.value;\n              }}\n            >\n              <option value=\"float-button\">Floating button</option>\n              <option value=\"multi-column\">Multi-column</option>\n              <option value=\"tab-menu-bar\">Tab/Menu bar </option>\n            </select> */}\n        {/* <p>\n          <details>\n            <summary class=\"insignificant\">\n              Experimental Multi-column mode\n            </summary>\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={snapStates.settings.shortcutsColumnsMode}\n                onChange={(e) => {\n                  states.settings.shortcutsColumnsMode = e.target.checked;\n                }}\n              />{' '}\n              Show shortcuts in multiple columns instead of the floating button.\n            </label>\n          </details>\n        </p> */}\n        {shortcuts.length > 0 ? (\n          <ol class=\"shortcuts-list\" ref={shortcutsListParent}>\n            {shortcuts.filter(Boolean).map((shortcut, i) => {\n              // const key = i + Object.values(shortcut);\n              const key = Object.values(shortcut).join('-');\n              const { type } = shortcut;\n              if (!SHORTCUTS_META[type]) return null;\n              let { icon, title, subtitle } = SHORTCUTS_META[type];\n              if (typeof title === 'function') {\n                title = title(shortcut, i);\n              }\n              if (typeof subtitle === 'function') {\n                subtitle = subtitle(shortcut, i);\n              }\n              if (typeof icon === 'function') {\n                icon = icon(shortcut, i);\n              }\n              return (\n                <li key={key}>\n                  <Icon icon={icon} />\n                  <span class=\"shortcut-text\">\n                    <AsyncText>{title}</AsyncText>\n                    {subtitle && (\n                      <>\n                        {' '}\n                        <small class=\"ib insignificant\">{subtitle}</small>\n                      </>\n                    )}\n                  </span>\n                  <span class=\"shortcut-actions\">\n                    <button\n                      type=\"button\"\n                      class=\"plain small\"\n                      disabled={i === 0}\n                      onClick={() => {\n                        const shortcutsArr = Array.from(states.shortcuts);\n                        if (i > 0) {\n                          const temp = states.shortcuts[i - 1];\n                          shortcutsArr[i - 1] = shortcut;\n                          shortcutsArr[i] = temp;\n                          states.shortcuts = shortcutsArr;\n                        }\n                      }}\n                    >\n                      <Icon icon=\"arrow-up\" alt=\"Move up\" />\n                    </button>\n                    <button\n                      type=\"button\"\n                      class=\"plain small\"\n                      disabled={i === shortcuts.length - 1}\n                      onClick={() => {\n                        const shortcutsArr = Array.from(states.shortcuts);\n                        if (i < states.shortcuts.length - 1) {\n                          const temp = states.shortcuts[i + 1];\n                          shortcutsArr[i + 1] = shortcut;\n                          shortcutsArr[i] = temp;\n                          states.shortcuts = shortcutsArr;\n                        }\n                      }}\n                    >\n                      <Icon icon=\"arrow-down\" alt=\"Move down\" />\n                    </button>\n                    <button\n                      type=\"button\"\n                      class=\"plain small\"\n                      onClick={() => {\n                        setShowForm({\n                          shortcut,\n                          shortcutIndex: i,\n                        });\n                      }}\n                    >\n                      <Icon icon=\"pencil\" alt=\"Edit\" />\n                    </button>\n                    {/* <button\n                      type=\"button\"\n                      class=\"plain small\"\n                      onClick={() => {\n                        states.shortcuts.splice(i, 1);\n                      }}\n                    >\n                      <Icon icon=\"x\" alt=\"Remove\" />\n                    </button> */}\n                  </span>\n                </li>\n              );\n            })}\n          </ol>\n        ) : (\n          <div class=\"ui-state insignificant\">\n            <p>No shortcuts yet. Tap on the Add shortcut button.</p>\n            <p>\n              Not sure what to add?\n              <br />\n              Try adding{' '}\n              <a\n                href=\"#\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  states.shortcuts = [\n                    {\n                      type: 'following',\n                    },\n                    {\n                      type: 'notifications',\n                    },\n                  ];\n                }}\n              >\n                Home / Following and Notifications\n              </a>{' '}\n              first.\n            </p>\n          </div>\n        )}\n        <p class=\"insignificant\">\n          {shortcuts.length >= SHORTCUTS_LIMIT &&\n            `Max ${SHORTCUTS_LIMIT} shortcuts`}\n        </p>\n        <p\n          style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n          }}\n        >\n          <button\n            type=\"button\"\n            class=\"light\"\n            onClick={() => setShowImportExport(true)}\n          >\n            Import/export\n          </button>\n          <button\n            type=\"button\"\n            disabled={shortcuts.length >= SHORTCUTS_LIMIT}\n            onClick={() => setShowForm(true)}\n          >\n            <Icon icon=\"plus\" /> <span>Add shortcut</span>\n          </button>\n        </p>\n      </main>\n      {showForm && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowForm(false);\n            }\n          }}\n        >\n          <ShortcutForm\n            shortcut={showForm.shortcut}\n            shortcutIndex={showForm.shortcutIndex}\n            lists={lists}\n            followedHashtags={followedHashtags}\n            onSubmit={({ result, mode }) => {\n              console.log('onSubmit', result);\n              if (mode === 'edit') {\n                states.shortcuts[showForm.shortcutIndex] = result;\n              } else {\n                states.shortcuts.push(result);\n              }\n            }}\n            onClose={() => setShowForm(false)}\n          />\n        </Modal>\n      )}\n      {showImportExport && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowImportExport(false);\n            }\n          }}\n        >\n          <ImportExport\n            shortcuts={shortcuts}\n            onClose={() => setShowImportExport(false)}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nfunction ShortcutForm({\n  lists,\n  followedHashtags,\n  onSubmit,\n  disabled,\n  shortcut,\n  shortcutIndex,\n  onClose,\n}) {\n  console.log('shortcut', shortcut);\n  const editMode = !!shortcut;\n  const [currentType, setCurrentType] = useState(shortcut?.type || null);\n\n  const formRef = useRef();\n  useEffect(() => {\n    if (editMode && currentType && TYPE_PARAMS[currentType]) {\n      // Populate form\n      const form = formRef.current;\n      TYPE_PARAMS[currentType].forEach(({ name, type }) => {\n        const input = form.querySelector(`[name=\"${name}\"]`);\n        if (input && shortcut[name]) {\n          if (type === 'checkbox') {\n            input.checked = shortcut[name] === 'on' ? true : false;\n          } else {\n            input.value = shortcut[name];\n          }\n        }\n      });\n    }\n  }, [editMode, currentType]);\n\n  return (\n    <div id=\"shortcut-settings-form\" class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>{editMode ? 'Edit' : 'Add'} shortcut</h2>\n      </header>\n      <main tabindex=\"-1\">\n        <form\n          ref={formRef}\n          onSubmit={(e) => {\n            // Construct a nice object from form\n            e.preventDefault();\n            const data = new FormData(e.target);\n            const result = {};\n            data.forEach((value, key) => {\n              result[key] = value?.trim();\n              if (key === 'instance') {\n                // Remove protocol and trailing slash\n                result[key] = result[key]\n                  .replace(/^https?:\\/\\//, '')\n                  .replace(/\\/+$/, '');\n                // Remove @acct@ or acct@ from instance URL\n                result[key] = result[key].replace(/^@?[^@]+@/, '');\n              }\n            });\n            console.log('result', result);\n            if (!result.type) return;\n            onSubmit({\n              result,\n              mode: editMode ? 'edit' : 'add',\n            });\n            // Reset\n            e.target.reset();\n            setCurrentType(null);\n            onClose?.();\n          }}\n        >\n          <p>\n            <label>\n              <span>Timeline</span>\n              <select\n                required\n                disabled={disabled}\n                onChange={(e) => {\n                  setCurrentType(e.target.value);\n                }}\n                defaultValue={editMode ? shortcut.type : undefined}\n                name=\"type\"\n              >\n                <option></option>\n                {TYPES.map((type) => (\n                  <option value={type}>{TYPE_TEXT[type]}</option>\n                ))}\n              </select>\n            </label>\n          </p>\n          {TYPE_PARAMS[currentType]?.map?.(\n            ({ text, name, type, placeholder, pattern, notRequired }) => {\n              if (currentType === 'list') {\n                return (\n                  <p>\n                    <label>\n                      <span>List</span>\n                      <select\n                        name=\"id\"\n                        required={!notRequired}\n                        disabled={disabled}\n                      >\n                        {lists.map((list) => (\n                          <option value={list.id}>{list.title}</option>\n                        ))}\n                      </select>\n                    </label>\n                  </p>\n                );\n              }\n\n              return (\n                <p>\n                  <label>\n                    <span>{text}</span>{' '}\n                    <input\n                      type={type}\n                      name={name}\n                      placeholder={placeholder}\n                      required={type === 'text' && !notRequired}\n                      disabled={disabled}\n                      list={\n                        currentType === 'hashtag'\n                          ? 'followed-hashtags-datalist'\n                          : null\n                      }\n                      autocorrect=\"off\"\n                      autocapitalize=\"off\"\n                      spellcheck={false}\n                      pattern={pattern}\n                    />\n                    {currentType === 'hashtag' &&\n                      followedHashtags.length > 0 && (\n                        <datalist id=\"followed-hashtags-datalist\">\n                          {followedHashtags.map((tag) => (\n                            <option value={tag.name} />\n                          ))}\n                        </datalist>\n                      )}\n                  </label>\n                </p>\n              );\n            },\n          )}\n          <footer>\n            <button type=\"submit\" class=\"block\" disabled={disabled}>\n              {editMode ? 'Save' : 'Add'}\n            </button>\n            {editMode && (\n              <button\n                type=\"button\"\n                class=\"light danger\"\n                onClick={() => {\n                  states.shortcuts.splice(shortcutIndex, 1);\n                  onClose?.();\n                }}\n              >\n                Remove\n              </button>\n            )}\n          </footer>\n        </form>\n      </main>\n    </div>\n  );\n}\n\nfunction ImportExport({ shortcuts, onClose }) {\n  const shortcutsStr = useMemo(() => {\n    if (!shortcuts) return '';\n    if (!shortcuts.filter(Boolean).length) return '';\n    return compressToEncodedURIComponent(\n      JSON.stringify(shortcuts.filter(Boolean)),\n    );\n  }, [shortcuts]);\n  const [importShortcutStr, setImportShortcutStr] = useState('');\n  const [importUIState, setImportUIState] = useState('default');\n  const parsedImportShortcutStr = useMemo(() => {\n    if (!importShortcutStr) {\n      setImportUIState('default');\n      return null;\n    }\n    try {\n      const parsed = JSON.parse(\n        decompressFromEncodedURIComponent(importShortcutStr),\n      );\n      // Very basic validation, I know\n      if (!Array.isArray(parsed)) throw new Error('Not an array');\n      setImportUIState('default');\n      return parsed;\n    } catch (err) {\n      // Fallback to JSON string parsing\n      // There's a chance that someone might want to import a JSON string instead of the compressed version\n      try {\n        const parsed = JSON.parse(importShortcutStr);\n        if (!Array.isArray(parsed)) throw new Error('Not an array');\n        setImportUIState('default');\n        return parsed;\n      } catch (err) {\n        setImportUIState('error');\n        return null;\n      }\n    }\n  }, [importShortcutStr]);\n  const hasCurrentSettings = states.shortcuts.length > 0;\n\n  return (\n    <div id=\"import-export-container\" class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>\n          Import/Export <small class=\"ib insignificant\">Shortcuts</small>\n        </h2>\n      </header>\n      <main tabindex=\"-1\">\n        <section>\n          <h3>\n            <Icon icon=\"arrow-down-circle\" size=\"l\" class=\"insignificant\" />{' '}\n            <span>Import</span>\n          </h3>\n          <p>\n            <input\n              type=\"text\"\n              name=\"import\"\n              placeholder=\"Paste shortcuts here\"\n              class=\"block\"\n              onInput={(e) => {\n                setImportShortcutStr(e.target.value);\n              }}\n            />\n          </p>\n          {!!parsedImportShortcutStr &&\n            Array.isArray(parsedImportShortcutStr) && (\n              <>\n                <p>\n                  <b>{parsedImportShortcutStr.length}</b> shortcut\n                  {parsedImportShortcutStr.length > 1 ? 's' : ''}{' '}\n                  <small class=\"insignificant\">\n                    ({importShortcutStr.length} characters)\n                  </small>\n                </p>\n                <ol class=\"import-settings-list\">\n                  {parsedImportShortcutStr.map((shortcut) => (\n                    <li>\n                      <span\n                        style={{\n                          opacity: shortcuts.some((s) =>\n                            // Compare all properties\n                            Object.keys(s).every(\n                              (key) => s[key] === shortcut[key],\n                            ),\n                          )\n                            ? 1\n                            : 0,\n                        }}\n                      >\n                        *\n                      </span>\n                      <span>\n                        {TYPE_TEXT[shortcut.type]}\n                        {shortcut.type === 'list' && ' ⚠️'}{' '}\n                        {TYPE_PARAMS[shortcut.type]?.map?.(\n                          ({ text, name, type }) =>\n                            shortcut[name] ? (\n                              <>\n                                <span class=\"tag collapsed insignificant\">\n                                  {text}:{' '}\n                                  {type === 'checkbox'\n                                    ? shortcut[name] === 'on'\n                                      ? '✅'\n                                      : '❌'\n                                    : shortcut[name]}\n                                </span>{' '}\n                              </>\n                            ) : null,\n                        )}\n                      </span>\n                    </li>\n                  ))}\n                </ol>\n                <p>\n                  <small>* Exists in current shortcuts</small>\n                  <br />\n                  <small>\n                    ⚠️ List may not work if it's from a different account.\n                  </small>\n                </p>\n              </>\n            )}\n          {importUIState === 'error' && (\n            <p class=\"error\">\n              <small>⚠️ Invalid settings format</small>\n            </p>\n          )}\n          <p>\n            {hasCurrentSettings && (\n              <>\n                <MenuConfirm\n                  confirmLabel=\"Append to current shortcuts?\"\n                  menuFooter={\n                    <div class=\"footer\">\n                      Only shortcuts that don’t exist in current shortcuts will\n                      be appended.\n                    </div>\n                  }\n                  onClick={() => {\n                    // states.shortcuts = [\n                    //   ...states.shortcuts,\n                    //   ...parsedImportShortcutStr,\n                    // ];\n                    // Append non-unique shortcuts only\n                    const nonUniqueShortcuts = parsedImportShortcutStr.filter(\n                      (shortcut) =>\n                        !states.shortcuts.some((s) =>\n                          // Compare all properties\n                          Object.keys(s).every(\n                            (key) => s[key] === shortcut[key],\n                          ),\n                        ),\n                    );\n                    if (!nonUniqueShortcuts.length) {\n                      showToast('No new shortcuts to import');\n                      return;\n                    }\n                    let newShortcuts = [\n                      ...states.shortcuts,\n                      ...nonUniqueShortcuts,\n                    ];\n                    const exceededLimit = newShortcuts.length > SHORTCUTS_LIMIT;\n                    if (exceededLimit) {\n                      // If exceeded, trim it\n                      newShortcuts = newShortcuts.slice(0, SHORTCUTS_LIMIT);\n                    }\n                    states.shortcuts = newShortcuts;\n                    showToast(\n                      exceededLimit\n                        ? `Shortcuts imported. Exceeded max ${SHORTCUTS_LIMIT}, so the rest are not imported.`\n                        : 'Shortcuts imported',\n                    );\n                    onClose?.();\n                  }}\n                >\n                  <button\n                    type=\"button\"\n                    class=\"plain2\"\n                    disabled={!parsedImportShortcutStr}\n                  >\n                    Import & append…\n                  </button>\n                </MenuConfirm>{' '}\n              </>\n            )}\n            <MenuConfirm\n              confirmLabel={\n                hasCurrentSettings\n                  ? 'Override current shortcuts?'\n                  : 'Import shortcuts?'\n              }\n              menuItemClassName={hasCurrentSettings ? 'danger' : undefined}\n              onClick={() => {\n                states.shortcuts = parsedImportShortcutStr;\n                showToast('Shortcuts imported');\n                onClose?.();\n              }}\n            >\n              <button\n                type=\"button\"\n                class=\"plain2\"\n                disabled={!parsedImportShortcutStr}\n              >\n                {hasCurrentSettings ? 'or override…' : 'Import…'}\n              </button>\n            </MenuConfirm>\n          </p>\n        </section>\n        <section>\n          <h3>\n            <Icon icon=\"arrow-up-circle\" size=\"l\" class=\"insignificant\" />{' '}\n            <span>Export</span>\n          </h3>\n          <p>\n            <input\n              style={{ width: '100%' }}\n              type=\"text\"\n              value={shortcutsStr}\n              readOnly\n              onClick={(e) => {\n                if (!e.target.value) return;\n                e.target.select();\n                // Copy url to clipboard\n                try {\n                  navigator.clipboard.writeText(e.target.value);\n                  showToast('Shortcuts copied');\n                } catch (e) {\n                  console.error(e);\n                  showToast('Unable to copy shortcuts');\n                }\n              }}\n            />\n          </p>\n          <p>\n            <button\n              type=\"button\"\n              class=\"plain2\"\n              disabled={!shortcutsStr}\n              onClick={() => {\n                try {\n                  navigator.clipboard.writeText(shortcutsStr);\n                  showToast('Shortcut settings copied');\n                } catch (e) {\n                  console.error(e);\n                  showToast('Unable to copy shortcut settings');\n                }\n              }}\n            >\n              <Icon icon=\"clipboard\" /> <span>Copy</span>\n            </button>{' '}\n            {navigator?.share &&\n              navigator?.canShare?.({\n                text: shortcutsStr,\n              }) && (\n                <button\n                  type=\"button\"\n                  class=\"plain2\"\n                  disabled={!shortcutsStr}\n                  onClick={() => {\n                    try {\n                      navigator.share({\n                        text: shortcutsStr,\n                      });\n                    } catch (e) {\n                      console.error(e);\n                      alert(\"Sharing doesn't seem to work.\");\n                    }\n                  }}\n                >\n                  <Icon icon=\"share\" /> <span>Share</span>\n                </button>\n              )}{' '}\n            {shortcutsStr.length > 0 && (\n              <small class=\"insignificant\">\n                {shortcutsStr.length} characters\n              </small>\n            )}\n          </p>\n          {!!shortcutsStr && (\n            <details>\n              <summary class=\"insignificant\">\n                <small>Raw Shortcuts JSON</small>\n              </summary>\n              <textarea style={{ width: '100%' }} rows={10} readOnly>\n                {JSON.stringify(shortcuts.filter(Boolean), null, 2)}\n              </textarea>\n            </details>\n          )}\n        </section>\n      </main>\n    </div>\n  );\n}\n\nexport default ShortcutsSettings;\n","import { useLocation, useNavigate } from 'react-router-dom';\nimport { subscribe, useSnapshot } from 'valtio';\n\nimport Accounts from '../pages/accounts';\nimport Settings from '../pages/settings';\nimport focusDeck from '../utils/focus-deck';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\n\nimport AccountSheet from './account-sheet';\nimport Compose from './compose';\nimport Drafts from './drafts';\nimport GenericAccounts from './generic-accounts';\nimport MediaAltModal from './media-alt-modal';\nimport MediaModal from './media-modal';\nimport Modal from './modal';\nimport ShortcutsSettings from './shortcuts-settings';\n\nsubscribe(states, (changes) => {\n  for (const [action, path, value, prevValue] of changes) {\n    // When closing modal, focus on deck\n    if (/^show/i.test(path) && !value) {\n      focusDeck();\n    }\n  }\n});\n\nexport default function Modals() {\n  const snapStates = useSnapshot(states);\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  return (\n    <>\n      {!!snapStates.showCompose && (\n        <Modal>\n          <Compose\n            replyToStatus={\n              typeof snapStates.showCompose !== 'boolean'\n                ? snapStates.showCompose.replyToStatus\n                : window.__COMPOSE__?.replyToStatus || null\n            }\n            editStatus={\n              states.showCompose?.editStatus ||\n              window.__COMPOSE__?.editStatus ||\n              null\n            }\n            draftStatus={\n              states.showCompose?.draftStatus ||\n              window.__COMPOSE__?.draftStatus ||\n              null\n            }\n            onClose={(results) => {\n              const { newStatus, instance, type } = results || {};\n              states.showCompose = false;\n              window.__COMPOSE__ = null;\n              if (newStatus) {\n                states.reloadStatusPage++;\n                showToast({\n                  text: {\n                    post: 'Post published. Check it out.',\n                    reply: 'Reply posted. Check it out.',\n                    edit: 'Post updated. Check it out.',\n                  }[type || 'post'],\n                  delay: 1000,\n                  duration: 10_000, // 10 seconds\n                  onClick: (toast) => {\n                    toast.hideToast();\n                    states.prevLocation = location;\n                    navigate(\n                      instance\n                        ? `/${instance}/s/${newStatus.id}`\n                        : `/s/${newStatus.id}`,\n                    );\n                  },\n                });\n              }\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showSettings && (\n        <Modal\n          onClose={() => {\n            states.showSettings = false;\n          }}\n        >\n          <Settings\n            onClose={() => {\n              states.showSettings = false;\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showAccounts && (\n        <Modal\n          onClose={() => {\n            states.showAccounts = false;\n          }}\n        >\n          <Accounts\n            onClose={() => {\n              states.showAccounts = false;\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showAccount && (\n        <Modal\n          class=\"light\"\n          onClose={() => {\n            states.showAccount = false;\n          }}\n        >\n          <AccountSheet\n            account={snapStates.showAccount?.account || snapStates.showAccount}\n            instance={snapStates.showAccount?.instance}\n            onClose={({ destination } = {}) => {\n              states.showAccount = false;\n              // states.showGenericAccounts = false;\n              // if (destination) {\n              //   states.showAccounts = false;\n              // }\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showDrafts && (\n        <Modal\n          onClose={() => {\n            states.showDrafts = false;\n          }}\n        >\n          <Drafts onClose={() => (states.showDrafts = false)} />\n        </Modal>\n      )}\n      {!!snapStates.showMediaModal && (\n        <Modal\n          onClick={(e) => {\n            if (\n              e.target === e.currentTarget ||\n              e.target.classList.contains('media')\n            ) {\n              states.showMediaModal = false;\n            }\n          }}\n        >\n          <MediaModal\n            mediaAttachments={snapStates.showMediaModal.mediaAttachments}\n            instance={snapStates.showMediaModal.instance}\n            index={snapStates.showMediaModal.index}\n            statusID={snapStates.showMediaModal.statusID}\n            onClose={() => {\n              states.showMediaModal = false;\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showShortcutsSettings && (\n        <Modal\n          class=\"light\"\n          onClose={() => {\n            states.showShortcutsSettings = false;\n          }}\n        >\n          <ShortcutsSettings\n            onClose={() => (states.showShortcutsSettings = false)}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showGenericAccounts && (\n        <Modal\n          class=\"light\"\n          onClose={() => {\n            states.showGenericAccounts = false;\n          }}\n        >\n          <GenericAccounts\n            onClose={() => (states.showGenericAccounts = false)}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showMediaAlt && (\n        <Modal\n          class=\"light\"\n          onClose={(e) => {\n            states.showMediaAlt = false;\n          }}\n        >\n          <MediaAltModal\n            alt={snapStates.showMediaAlt.alt || snapStates.showMediaAlt}\n            lang={snapStates.showMediaAlt?.lang}\n            onClose={() => {\n              states.showMediaAlt = false;\n            }}\n          />\n        </Modal>\n      )}\n    </>\n  );\n}\n","import { useState } from 'preact/hooks';\n\nimport { api } from '../utils/api';\n\nimport Icon from './icon';\nimport Loader from './loader';\n\nfunction FollowRequestButtons({ accountID, onChange }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [requestState, setRequestState] = useState(null); // accept, reject\n  const [relationship, setRelationship] = useState(null);\n\n  const hasRelationship = relationship !== null;\n\n  return (\n    <p class=\"follow-request-buttons\">\n      <button\n        type=\"button\"\n        disabled={uiState === 'loading' || hasRelationship}\n        onClick={() => {\n          setUIState('loading');\n          setRequestState('accept');\n          (async () => {\n            try {\n              const rel = await masto.v1.followRequests\n                .$select(accountID)\n                .authorize();\n              if (!rel?.followedBy) {\n                throw new Error('Follow request not accepted');\n              }\n              setRelationship(rel);\n              onChange();\n            } catch (e) {\n              console.error(e);\n            }\n            setUIState('default');\n          })();\n        }}\n      >\n        Accept\n      </button>{' '}\n      <button\n        type=\"button\"\n        disabled={uiState === 'loading' || hasRelationship}\n        class=\"light danger\"\n        onClick={() => {\n          setUIState('loading');\n          setRequestState('reject');\n          (async () => {\n            try {\n              const rel = await masto.v1.followRequests\n                .$select(accountID)\n                .reject();\n              if (rel?.followedBy) {\n                throw new Error('Follow request not rejected');\n              }\n              setRelationship(rel);\n              onChange();\n            } catch (e) {\n              console.error(e);\n              setUIState('default');\n            }\n          })();\n        }}\n      >\n        Reject\n      </button>\n      <span class=\"follow-request-states\">\n        {hasRelationship && requestState ? (\n          requestState === 'accept' ? (\n            <Icon icon=\"check-circle\" alt=\"Accepted\" class=\"follow-accepted\" />\n          ) : (\n            <Icon icon=\"x-circle\" alt=\"Rejected\" class=\"follow-rejected\" />\n          )\n        ) : (\n          <Loader hidden={uiState !== 'loading'} />\n        )}\n      </span>\n    </p>\n  );\n}\n\nexport default FollowRequestButtons;\n","import { Fragment } from 'preact';\nimport { memo } from 'preact/compat';\n\nimport shortenNumber from '../utils/shorten-number';\nimport states from '../utils/states';\nimport store from '../utils/store';\nimport useTruncated from '../utils/useTruncated';\n\nimport Avatar from './avatar';\nimport FollowRequestButtons from './follow-request-buttons';\nimport Icon from './icon';\nimport Link from './link';\nimport NameText from './name-text';\nimport RelativeTime from './relative-time';\nimport Status from './status';\n\nconst NOTIFICATION_ICONS = {\n  mention: 'comment',\n  status: 'notification',\n  reblog: 'rocket',\n  follow: 'follow',\n  follow_request: 'follow-add',\n  favourite: 'heart',\n  poll: 'poll',\n  update: 'pencil',\n  'admin.signup': 'account-edit',\n  'admin.report': 'account-warning',\n};\n\n/*\nNotification types\n==================\nmention = Someone mentioned you in their status\nstatus = Someone you enabled notifications for has posted a status\nreblog = Someone boosted one of your statuses\nfollow = Someone followed you\nfollow_request = Someone requested to follow you\nfavourite = Someone favourited one of your statuses\npoll = A poll you have voted in or created has ended\nupdate = A status you interacted with has been edited\nadmin.sign_up = Someone signed up (optionally sent to admins)\nadmin.report = A new report has been filed\n*/\n\nconst contentText = {\n  mention: 'mentioned you in their post.',\n  status: 'published a post.',\n  reblog: 'boosted your post.',\n  'reblog+account': (count) => `boosted ${count} of your posts.`,\n  reblog_reply: 'boosted your reply.',\n  follow: 'followed you.',\n  follow_request: 'requested to follow you.',\n  favourite: 'liked your post.',\n  'favourite+account': (count) => `liked ${count} of your posts.`,\n  favourite_reply: 'liked your reply.',\n  poll: 'A poll you have voted in or created has ended.',\n  'poll-self': 'A poll you have created has ended.',\n  'poll-voted': 'A poll you have voted in has ended.',\n  update: 'A post you interacted with has been edited.',\n  'favourite+reblog': 'boosted & liked your post.',\n  'favourite+reblog+account': (count) =>\n    `boosted & liked ${count} of your posts.`,\n  'favourite+reblog_reply': 'boosted & liked your reply.',\n  'admin.sign_up': 'signed up.',\n  'admin.report': (targetAccount) => <>reported {targetAccount}</>,\n};\n\nconst AVATARS_LIMIT = 50;\n\nfunction Notification({ notification, instance, isStatic }) {\n  const { id, status, account, report, _accounts, _statuses } = notification;\n  let { type } = notification;\n\n  // status = Attached when type of the notification is favourite, reblog, status, mention, poll, or update\n  const actualStatus = status?.reblog || status;\n  const actualStatusID = actualStatus?.id;\n\n  const currentAccount = store.session.get('currentAccount');\n  const isSelf = currentAccount === account?.id;\n  const isVoted = status?.poll?.voted;\n  const isReplyToOthers =\n    !!status?.inReplyToAccountId &&\n    status?.inReplyToAccountId !== currentAccount &&\n    status?.account?.id === currentAccount;\n\n  let favsCount = 0;\n  let reblogsCount = 0;\n  if (type === 'favourite+reblog') {\n    for (const account of _accounts) {\n      if (account._types?.includes('favourite')) {\n        favsCount++;\n      }\n      if (account._types?.includes('reblog')) {\n        reblogsCount++;\n      }\n    }\n    if (!reblogsCount && favsCount) type = 'favourite';\n    if (!favsCount && reblogsCount) type = 'reblog';\n  }\n\n  let text;\n  if (type === 'poll') {\n    text = contentText[isSelf ? 'poll-self' : isVoted ? 'poll-voted' : 'poll'];\n  } else if (\n    type === 'reblog' ||\n    type === 'favourite' ||\n    type === 'favourite+reblog'\n  ) {\n    if (_statuses?.length > 1) {\n      text = contentText[`${type}+account`];\n    } else if (isReplyToOthers) {\n      text = contentText[`${type}_reply`];\n    } else {\n      text = contentText[type];\n    }\n  } else if (contentText[type]) {\n    text = contentText[type];\n  } else {\n    // Anticipate unhandled notification types, possibly from Mastodon forks or non-Mastodon instances\n    // This surfaces the error to the user, hoping that users will report it\n    text = `[Unknown notification type: ${type}]`;\n  }\n\n  if (typeof text === 'function') {\n    const count = _statuses?.length || _accounts?.length;\n    if (count) {\n      text = text(count);\n    } else if (type === 'admin.report') {\n      const targetAccount = report?.targetAccount;\n      if (targetAccount) {\n        text = text(<NameText account={targetAccount} showAvatar />);\n      }\n    }\n  }\n\n  if (type === 'mention' && !status) {\n    // Could be deleted\n    return null;\n  }\n\n  const formattedCreatedAt =\n    notification.createdAt && new Date(notification.createdAt).toLocaleString();\n\n  const genericAccountsHeading =\n    {\n      'favourite+reblog': 'Boosted/Liked by…',\n      favourite: 'Liked by…',\n      reblog: 'Boosted by…',\n      follow: 'Followed by…',\n    }[type] || 'Accounts';\n  const handleOpenGenericAccounts = () => {\n    states.showGenericAccounts = {\n      heading: genericAccountsHeading,\n      accounts: _accounts,\n      showReactions: type === 'favourite+reblog',\n    };\n  };\n\n  console.debug('RENDER Notification', notification.id);\n\n  return (\n    <div\n      class={`notification notification-${type}`}\n      data-notification-id={id}\n      tabIndex=\"0\"\n    >\n      <div\n        class={`notification-type notification-${type}`}\n        title={formattedCreatedAt}\n      >\n        {type === 'favourite+reblog' ? (\n          <>\n            <Icon icon=\"rocket\" size=\"xl\" alt={type} class=\"reblog-icon\" />\n            <Icon icon=\"heart\" size=\"xl\" alt={type} class=\"favourite-icon\" />\n          </>\n        ) : (\n          <Icon\n            icon={NOTIFICATION_ICONS[type] || 'notification'}\n            size=\"xl\"\n            alt={type}\n          />\n        )}\n      </div>\n      <div class=\"notification-content\">\n        {type !== 'mention' && (\n          <>\n            <p>\n              {!/poll|update/i.test(type) && (\n                <>\n                  {_accounts?.length > 1 ? (\n                    <>\n                      <b tabIndex=\"0\" onClick={handleOpenGenericAccounts}>\n                        <span title={_accounts.length}>\n                          {shortenNumber(_accounts.length)}\n                        </span>{' '}\n                        people\n                      </b>{' '}\n                    </>\n                  ) : (\n                    <>\n                      <NameText account={account} showAvatar />{' '}\n                    </>\n                  )}\n                </>\n              )}\n              {text}\n              {type === 'mention' && (\n                <span class=\"insignificant\">\n                  {' '}\n                  •{' '}\n                  <RelativeTime\n                    datetime={notification.createdAt}\n                    format=\"micro\"\n                  />\n                </span>\n              )}\n            </p>\n            {type === 'follow_request' && (\n              <FollowRequestButtons accountID={account.id} />\n            )}\n          </>\n        )}\n        {_accounts?.length > 1 && (\n          <p class=\"avatars-stack\">\n            {_accounts.slice(0, AVATARS_LIMIT).map((account) => (\n              <Fragment key={account.id}>\n                <a\n                  key={account.id}\n                  href={account.url}\n                  rel=\"noopener noreferrer\"\n                  class=\"account-avatar-stack\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    states.showAccount = account;\n                  }}\n                >\n                  <Avatar\n                    url={account.avatarStatic}\n                    size={\n                      _accounts.length <= 10\n                        ? 'xxl'\n                        : _accounts.length < 20\n                        ? 'xl'\n                        : _accounts.length < 30\n                        ? 'l'\n                        : _accounts.length < 40\n                        ? 'm'\n                        : 's' // My god, this person is popular!\n                    }\n                    key={account.id}\n                    alt={`${account.displayName} @${account.acct}`}\n                    squircle={account?.bot}\n                  />\n                  {type === 'favourite+reblog' && (\n                    <div class=\"account-sub-icons\">\n                      {account._types.map((type) => (\n                        <Icon\n                          icon={NOTIFICATION_ICONS[type]}\n                          size=\"s\"\n                          class={`${type}-icon`}\n                        />\n                      ))}\n                    </div>\n                  )}\n                </a>{' '}\n              </Fragment>\n            ))}\n            <button\n              type=\"button\"\n              class=\"small plain\"\n              onClick={handleOpenGenericAccounts}\n            >\n              {_accounts.length > AVATARS_LIMIT &&\n                `+${_accounts.length - AVATARS_LIMIT}`}\n              <Icon icon=\"chevron-down\" />\n            </button>\n          </p>\n        )}\n        {_statuses?.length > 1 && (\n          <ul class=\"notification-group-statuses\">\n            {_statuses.map((status) => (\n              <li key={status.id}>\n                <TruncatedLink\n                  class={`status-link status-type-${type}`}\n                  to={\n                    instance ? `/${instance}/s/${status.id}` : `/s/${status.id}`\n                  }\n                >\n                  <Status status={status} size=\"s\" />\n                </TruncatedLink>\n              </li>\n            ))}\n          </ul>\n        )}\n        {status && (!_statuses?.length || _statuses?.length <= 1) && (\n          <TruncatedLink\n            class={`status-link status-type-${type}`}\n            to={\n              instance\n                ? `/${instance}/s/${actualStatusID}`\n                : `/s/${actualStatusID}`\n            }\n            onContextMenu={(e) => {\n              const post = e.target.querySelector('.status');\n              if (post) {\n                // Fire a custom event to open the context menu\n                if (e.metaKey) return;\n                e.preventDefault();\n                post.dispatchEvent(\n                  new MouseEvent('contextmenu', {\n                    clientX: e.clientX,\n                    clientY: e.clientY,\n                  }),\n                );\n              }\n            }}\n          >\n            {isStatic ? (\n              <Status status={actualStatus} size=\"s\" />\n            ) : (\n              <Status statusID={actualStatusID} size=\"s\" />\n            )}\n          </TruncatedLink>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction TruncatedLink(props) {\n  const ref = useTruncated();\n  return <Link {...props} data-read-more=\"Read more →\" ref={ref} />;\n}\n\nexport default memo(Notification);\n","import { memo } from 'preact/compat';\nimport { useLayoutEffect, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport { api } from '../utils/api';\nimport states from '../utils/states';\nimport {\n  getAccountByAccessToken,\n  getCurrentAccount,\n} from '../utils/store-utils';\nimport usePageVisibility from '../utils/usePageVisibility';\n\nimport Icon from './icon';\nimport Link from './link';\nimport Modal from './modal';\nimport Notification from './notification';\n\nexport default memo(function NotificationService() {\n  if (!('serviceWorker' in navigator)) return null;\n\n  const snapStates = useSnapshot(states);\n  const { routeNotification } = snapStates;\n\n  console.log('🛎️ Notification service', routeNotification);\n\n  const { id, accessToken } = routeNotification || {};\n  const [showNotificationSheet, setShowNotificationSheet] = useState(false);\n\n  useLayoutEffect(() => {\n    if (!id || !accessToken) return;\n    const { instance: currentInstance } = api();\n    const { masto, instance } = api({\n      accessToken,\n    });\n    console.log('API', { accessToken, currentInstance, instance });\n    const sameInstance = currentInstance === instance;\n    const account = accessToken\n      ? getAccountByAccessToken(accessToken)\n      : getCurrentAccount();\n    (async () => {\n      const notification = await masto.v1.notifications.$select(id).fetch();\n      if (notification && account) {\n        console.log('🛎️ Notification', { id, notification, account });\n        const accountInstance = account.instanceURL;\n        const { type, status, account: notificationAccount } = notification;\n        const hasModal = !!document.querySelector('#modal-container > *');\n        const isFollow = type === 'follow' && !!notificationAccount?.id;\n        const hasAccount = !!notificationAccount?.id;\n        const hasStatus = !!status?.id;\n        if (isFollow && sameInstance) {\n          // Show account sheet, can handle different instances\n          states.showAccount = {\n            account: notificationAccount,\n            instance: accountInstance,\n          };\n        } else if (hasModal || !sameInstance || (hasAccount && hasStatus)) {\n          // Show sheet of notification, if\n          // - there is a modal open\n          // - the notification is from another instance\n          // - the notification has both account and status, gives choice for users to go to account or status\n          setShowNotificationSheet({\n            id,\n            account,\n            notification,\n            sameInstance,\n          });\n        } else {\n          if (hasStatus) {\n            // Go to status page\n            location.hash = `/${currentInstance}/s/${status.id}`;\n          } else if (isFollow) {\n            // Go to profile page\n            location.hash = `/${currentInstance}/a/${notificationAccount.id}`;\n          } else {\n            // Go to notifications page\n            location.hash = '/notifications';\n          }\n        }\n      } else {\n        console.warn('🛎️ Notification not found', id);\n      }\n    })();\n  }, [id, accessToken]);\n\n  useLayoutEffect(() => {\n    // Listen to message from service worker\n    const handleMessage = (event) => {\n      console.log('💥💥💥 Message event', event);\n      const { type, id, accessToken } = event?.data || {};\n      if (type === 'notification') {\n        states.routeNotification = {\n          id,\n          accessToken,\n        };\n      }\n    };\n    console.log('👂👂👂 Listen to message');\n    navigator.serviceWorker.addEventListener('message', handleMessage);\n    return () => {\n      console.log('👂👂👂 Remove listen to message');\n      navigator.serviceWorker.removeEventListener('message', handleMessage);\n    };\n  }, []);\n\n  useLayoutEffect(() => {\n    if (navigator?.clearAppBadge) {\n      navigator.clearAppBadge();\n    }\n  }, []);\n  usePageVisibility((visible) => {\n    if (visible && navigator?.clearAppBadge) {\n      console.log('🔰 Clear app badge');\n      navigator.clearAppBadge();\n    }\n  });\n\n  const onClose = () => {\n    setShowNotificationSheet(false);\n    states.routeNotification = null;\n\n    // If url is #/notifications?id=123, go to #/notifications\n    if (/\\/notifications\\?id=/i.test(location.hash)) {\n      location.hash = '/notifications';\n    }\n  };\n\n  if (showNotificationSheet) {\n    const { id, account, notification, sameInstance } = showNotificationSheet;\n    return (\n      <Modal\n        class=\"light\"\n        onClick={(e) => {\n          if (e.target === e.currentTarget) {\n            onClose();\n          }\n        }}\n      >\n        <div class=\"sheet\" tabIndex=\"-1\">\n          <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n            <Icon icon=\"x\" />\n          </button>\n          <header>\n            <b>Notification</b>\n          </header>\n          <main>\n            {!sameInstance && (\n              <p>This notification is from your other account.</p>\n            )}\n            <div\n              class=\"notification-peek\"\n              // style={{\n              //   pointerEvents: sameInstance ? '' : 'none',\n              // }}\n              onClick={(e) => {\n                const { target } = e;\n                // If button or links\n                if (e.target.tagName === 'BUTTON' || e.target.tagName === 'A') {\n                  onClose();\n                }\n              }}\n            >\n              <Notification\n                instance={account.instanceURL}\n                notification={notification}\n                isStatic\n              />\n            </div>\n            <div\n              style={{\n                textAlign: 'end',\n              }}\n            >\n              <Link to=\"/notifications\" class=\"button light\" onClick={onClose}>\n                <span>View all notifications</span> <Icon icon=\"arrow-right\" />\n              </Link>\n            </div>\n          </main>\n        </div>\n      </Modal>\n    );\n  }\n\n  return null;\n});\n","import { forwardRef } from 'preact/compat';\nimport { useImperativeHandle, useRef, useState } from 'preact/hooks';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { api } from '../utils/api';\n\nimport Icon from './icon';\nimport Link from './link';\n\nconst SearchForm = forwardRef((props, ref) => {\n  const { instance } = api();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [searchMenuOpen, setSearchMenuOpen] = useState(false);\n  const [query, setQuery] = useState(searchParams.get('q') || '');\n  const type = searchParams.get('type');\n  const formRef = useRef(null);\n\n  const searchFieldRef = useRef(null);\n  useImperativeHandle(ref, () => ({\n    setValue: (value) => {\n      setQuery(value);\n    },\n    focus: () => {\n      searchFieldRef.current.focus();\n    },\n    select: () => {\n      searchFieldRef.current.select();\n    },\n    blur: () => {\n      searchFieldRef.current.blur();\n    },\n  }));\n\n  return (\n    <form\n      ref={formRef}\n      class=\"search-popover-container\"\n      onSubmit={(e) => {\n        e.preventDefault();\n\n        const isSearchPage = /\\/search/.test(location.hash);\n        if (isSearchPage) {\n          if (query) {\n            const params = {\n              q: query,\n            };\n            if (type) params.type = type; // Preserve type\n            setSearchParams(params);\n          } else {\n            setSearchParams({});\n          }\n        } else {\n          if (query) {\n            location.hash = `/search?q=${encodeURIComponent(query)}${\n              type ? `&type=${type}` : ''\n            }`;\n          } else {\n            location.hash = `/search`;\n          }\n        }\n\n        props?.onSubmit?.(e);\n      }}\n    >\n      <input\n        ref={searchFieldRef}\n        value={query}\n        name=\"q\"\n        type=\"search\"\n        // autofocus\n        placeholder=\"Search\"\n        dir=\"auto\"\n        autocomplete=\"off\"\n        autocorrect=\"off\"\n        autocapitalize=\"off\"\n        onSearch={(e) => {\n          if (!e.target.value) {\n            setSearchParams({});\n          }\n        }}\n        onInput={(e) => {\n          setQuery(e.target.value);\n          setSearchMenuOpen(true);\n        }}\n        onFocus={() => {\n          setSearchMenuOpen(true);\n        }}\n        onBlur={() => {\n          setTimeout(() => {\n            setSearchMenuOpen(false);\n          }, 100);\n          formRef.current\n            ?.querySelector('.search-popover-item.focus')\n            ?.classList.remove('focus');\n        }}\n        onKeyDown={(e) => {\n          const { key } = e;\n          switch (key) {\n            case 'Escape':\n              setSearchMenuOpen(false);\n              break;\n            case 'Down':\n            case 'ArrowDown':\n              e.preventDefault();\n              if (searchMenuOpen) {\n                const focusItem = formRef.current.querySelector(\n                  '.search-popover-item.focus',\n                );\n                if (focusItem) {\n                  let nextItem = focusItem.nextElementSibling;\n                  while (nextItem && nextItem.hidden) {\n                    nextItem = nextItem.nextElementSibling;\n                  }\n                  if (nextItem) {\n                    nextItem.classList.add('focus');\n                    const siblings = Array.from(\n                      nextItem.parentElement.children,\n                    ).filter((el) => el !== nextItem);\n                    siblings.forEach((el) => {\n                      el.classList.remove('focus');\n                    });\n                  }\n                } else {\n                  const firstItem = formRef.current.querySelector(\n                    '.search-popover-item',\n                  );\n                  if (firstItem) {\n                    firstItem.classList.add('focus');\n                  }\n                }\n              }\n              break;\n            case 'Up':\n            case 'ArrowUp':\n              e.preventDefault();\n              if (searchMenuOpen) {\n                const focusItem = document.querySelector(\n                  '.search-popover-item.focus',\n                );\n                if (focusItem) {\n                  let prevItem = focusItem.previousElementSibling;\n                  while (prevItem && prevItem.hidden) {\n                    prevItem = prevItem.previousElementSibling;\n                  }\n                  if (prevItem) {\n                    prevItem.classList.add('focus');\n                    const siblings = Array.from(\n                      prevItem.parentElement.children,\n                    ).filter((el) => el !== prevItem);\n                    siblings.forEach((el) => {\n                      el.classList.remove('focus');\n                    });\n                  }\n                } else {\n                  const lastItem = document.querySelector(\n                    '.search-popover-item:last-child',\n                  );\n                  if (lastItem) {\n                    lastItem.classList.add('focus');\n                  }\n                }\n              }\n              break;\n            case 'Enter':\n              if (searchMenuOpen) {\n                const focusItem = document.querySelector(\n                  '.search-popover-item.focus',\n                );\n                if (focusItem) {\n                  e.preventDefault();\n                  focusItem.click();\n                }\n                setSearchMenuOpen(false);\n                props?.onSubmit?.(e);\n              }\n              break;\n          }\n        }}\n      />\n      <div class=\"search-popover\" hidden={!searchMenuOpen || !query}>\n        {!!query &&\n          [\n            {\n              label: (\n                <>\n                  Posts with <q>{query}</q>\n                </>\n              ),\n              to: `/search?q=${encodeURIComponent(query)}&type=statuses`,\n              hidden: /^https?:/.test(query),\n            },\n            {\n              label: (\n                <>\n                  Posts tagged with <mark>#{query.replace(/^#/, '')}</mark>\n                </>\n              ),\n              to: `/${instance}/t/${query.replace(/^#/, '')}`,\n              hidden:\n                /^@/.test(query) || /^https?:/.test(query) || /\\s/.test(query),\n              top: /^#/.test(query),\n              type: 'link',\n            },\n            {\n              label: (\n                <>\n                  Look up <mark>{query}</mark>\n                </>\n              ),\n              to: `/${query}`,\n              hidden: !/^https?:/.test(query),\n              top: /^https?:/.test(query),\n              type: 'link',\n            },\n            {\n              label: (\n                <>\n                  Accounts with <q>{query}</q>\n                </>\n              ),\n              to: `/search?q=${encodeURIComponent(query)}&type=accounts`,\n            },\n          ]\n            .sort((a, b) => {\n              if (a.top && !b.top) return -1;\n              if (!a.top && b.top) return 1;\n              return 0;\n            })\n            .map(({ label, to, hidden, type }) => (\n              <Link\n                to={to}\n                class=\"search-popover-item\"\n                hidden={hidden}\n                onClick={(e) => {\n                  props?.onSubmit?.(e);\n                }}\n              >\n                <Icon\n                  icon={type === 'link' ? 'arrow-right' : 'search'}\n                  class=\"more-insignificant\"\n                />\n                <span>{label}</span>{' '}\n              </Link>\n            ))}\n      </div>\n    </form>\n  );\n});\n\nexport default SearchForm;\n","import './search-command.css';\n\nimport { memo } from 'preact/compat';\nimport { useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\n\nimport SearchForm from './search-form';\n\nexport default memo(function SearchCommand({ onClose = () => {} }) {\n  const [showSearch, setShowSearch] = useState(false);\n  const searchFormRef = useRef(null);\n\n  useHotkeys(\n    '/',\n    (e) => {\n      setShowSearch(true);\n      setTimeout(() => {\n        searchFormRef.current?.focus?.();\n        searchFormRef.current?.select?.();\n      }, 0);\n    },\n    {\n      preventDefault: true,\n      ignoreEventWhen: (e) => {\n        const isSearchPage = /\\/search/.test(location.hash);\n        const hasModal = !!document.querySelector('#modal-container > *');\n        return isSearchPage || hasModal;\n      },\n    },\n  );\n\n  const closeSearch = () => {\n    setShowSearch(false);\n    onClose();\n  };\n\n  useHotkeys(\n    'esc',\n    (e) => {\n      searchFormRef.current?.blur?.();\n      closeSearch();\n    },\n    {\n      enabled: showSearch,\n      enableOnFormTags: true,\n      preventDefault: true,\n    },\n  );\n\n  return (\n    <div\n      id=\"search-command-container\"\n      hidden={!showSearch}\n      onClick={(e) => {\n        console.log(e);\n        if (e.target === e.currentTarget) {\n          closeSearch();\n        }\n      }}\n    >\n      <SearchForm\n        ref={searchFormRef}\n        onSubmit={() => {\n          closeSearch();\n        }}\n      />\n    </div>\n  );\n});\n","import './shortcuts.css';\n\nimport { Menu, MenuItem } from '@szhsin/react-menu';\nimport { memo } from 'preact/compat';\nimport { useMemo, useRef } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { useNavigate } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport { SHORTCUTS_META } from '../components/shortcuts-settings';\nimport { api } from '../utils/api';\nimport states from '../utils/states';\n\nimport AsyncText from './AsyncText';\nimport Icon from './icon';\nimport Link from './link';\nimport MenuLink from './menu-link';\n\nfunction Shortcuts() {\n  const { instance } = api();\n  const snapStates = useSnapshot(states);\n  const { shortcuts, settings } = snapStates;\n\n  if (!shortcuts.length) {\n    return null;\n  }\n  if (\n    settings.shortcutsColumnsMode ||\n    settings.shortcutsViewMode === 'multi-column'\n  ) {\n    return null;\n  }\n\n  const menuRef = useRef();\n\n  const formattedShortcuts = useMemo(\n    () =>\n      shortcuts\n        .map((pin, i) => {\n          const { type, ...data } = pin;\n          if (!SHORTCUTS_META[type]) return null;\n          let { id, path, title, subtitle, icon } = SHORTCUTS_META[type];\n\n          if (typeof id === 'function') {\n            id = id(data, i);\n          }\n          if (typeof path === 'function') {\n            path = path(\n              {\n                ...data,\n                instance: data.instance || instance,\n              },\n              i,\n            );\n          }\n          if (typeof title === 'function') {\n            title = title(data, i);\n          }\n          if (typeof subtitle === 'function') {\n            subtitle = subtitle(data, i);\n          }\n          if (typeof icon === 'function') {\n            icon = icon(data, i);\n          }\n\n          return {\n            id,\n            path,\n            title,\n            subtitle,\n            icon,\n          };\n        })\n        .filter(Boolean),\n    [shortcuts],\n  );\n\n  const navigate = useNavigate();\n  useHotkeys(['1', '2', '3', '4', '5', '6', '7', '8', '9'], (e, handler) => {\n    const index = parseInt(handler.keys[0], 10) - 1;\n    if (index < formattedShortcuts.length) {\n      const { path } = formattedShortcuts[index];\n      if (path) {\n        navigate(path);\n        menuRef.current?.closeMenu?.();\n      }\n    }\n  });\n\n  return (\n    <div id=\"shortcuts\">\n      {snapStates.settings.shortcutsViewMode === 'tab-menu-bar' ? (\n        <nav class=\"tab-bar\">\n          <ul>\n            {formattedShortcuts.map(\n              ({ id, path, title, subtitle, icon }, i) => {\n                return (\n                  <li key={i + title}>\n                    <Link\n                      class={subtitle ? 'has-subtitle' : ''}\n                      to={path}\n                      onClick={(e) => {\n                        if (e.target.classList.contains('is-active')) {\n                          e.preventDefault();\n                          const page = document.getElementById(`${id}-page`);\n                          console.log(id, page);\n                          if (page) {\n                            page.scrollTop = 0;\n                            const updatesButton =\n                              page.querySelector('.updates-button');\n                            if (updatesButton) {\n                              updatesButton.click();\n                            }\n                          }\n                        }\n                      }}\n                    >\n                      <Icon icon={icon} size=\"xl\" alt={title} />\n                      <span>\n                        <AsyncText>{title}</AsyncText>\n                        {subtitle && (\n                          <>\n                            <br />\n                            <small>{subtitle}</small>\n                          </>\n                        )}\n                      </span>\n                    </Link>\n                  </li>\n                );\n              },\n            )}\n          </ul>\n        </nav>\n      ) : (\n        <Menu\n          instanceRef={menuRef}\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          boundingBoxPadding=\"8 8 8 8\"\n          menuClassName=\"glass-menu shortcuts-menu\"\n          gap={8}\n          position=\"anchor\"\n          menuButton={\n            <button\n              type=\"button\"\n              id=\"shortcuts-button\"\n              class=\"plain\"\n              onTransitionStart={(e) => {\n                // Close menu if the button disappears\n                try {\n                  const { target } = e;\n                  if (getComputedStyle(target).pointerEvents === 'none') {\n                    menuRef.current?.closeMenu?.();\n                  }\n                } catch (e) {}\n              }}\n            >\n              <Icon icon=\"shortcut\" size=\"xl\" alt=\"Shortcuts\" />\n            </button>\n          }\n        >\n          {formattedShortcuts.map(({ path, title, subtitle, icon }, i) => {\n            return (\n              <MenuLink to={path} key={i + title} class=\"glass-menu-item\">\n                <Icon icon={icon} size=\"l\" />{' '}\n                <span class=\"menu-grow\">\n                  <span>\n                    <AsyncText>{title}</AsyncText>\n                  </span>\n                  {subtitle && (\n                    <>\n                      {' '}\n                      <small class=\"more-insignificant\">{subtitle}</small>\n                    </>\n                  )}\n                </span>\n                <span class=\"menu-shortcut hide-until-focus-visible\">\n                  {i + 1}\n                </span>\n              </MenuLink>\n            );\n          })}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(Shortcuts);\n","import { Menu } from '@szhsin/react-menu';\nimport { useWindowSize } from '@uidotdev/usehooks';\nimport { useRef } from 'preact/hooks';\n\nimport safeBoundingBoxPadding from '../utils/safe-bounding-box-padding';\n\n// It's like Menu but with sensible defaults, bug fixes and improvements.\nfunction Menu2(props) {\n  const { containerProps } = props;\n  const size = useWindowSize();\n  const instanceRef = useRef();\n  return (\n    <Menu\n      boundingBoxPadding={safeBoundingBoxPadding()}\n      repositionFlag={`${size.width}x${size.height}`}\n      {...props}\n      instanceRef={instanceRef}\n      containerProps={{\n        onClick: (e) => {\n          if (e.target === e.currentTarget) {\n            instanceRef.current?.closeMenu?.();\n          }\n          containerProps?.onClick?.(e);\n        },\n        ...containerProps,\n      }}\n    />\n  );\n}\n\nexport default Menu2;\n","import store from './store';\n\nexport function groupBoosts(values) {\n  let newValues = [];\n  let boostStash = [];\n  let serialBoosts = 0;\n  for (let i = 0; i < values.length; i++) {\n    const item = values[i];\n    if (item.reblog && !item.account?.group) {\n      boostStash.push(item);\n      serialBoosts++;\n    } else {\n      newValues.push(item);\n      if (serialBoosts < 3) {\n        serialBoosts = 0;\n      }\n    }\n  }\n  // if boostStash is more than quarter of values\n  // or if there are 3 or more boosts in a row\n  if (\n    values.length > 10 &&\n    (boostStash.length > values.length / 4 || serialBoosts >= 3)\n  ) {\n    // if boostStash is more than 3 quarter of values\n    const boostStashID = boostStash.map((status) => status.id);\n    if (boostStash.length > (values.length * 3) / 4) {\n      // insert boost array at the end of specialHome list\n      newValues = [\n        ...newValues,\n        { id: boostStashID, items: boostStash, type: 'boosts' },\n      ];\n    } else {\n      // insert boosts array in the middle of specialHome list\n      const half = Math.floor(newValues.length / 2);\n      newValues = [\n        ...newValues.slice(0, half),\n        {\n          id: boostStashID,\n          items: boostStash,\n          type: 'boosts',\n        },\n        ...newValues.slice(half),\n      ];\n    }\n    return newValues;\n  } else {\n    return values;\n  }\n}\n\nexport function dedupeBoosts(items, instance) {\n  const boostedStatusIDs = store.account.get('boostedStatusIDs') || {};\n  const filteredItems = items.filter((item) => {\n    if (!item.reblog) return true;\n    const statusKey = `${instance}-${item.reblog.id}`;\n    const boosterID = boostedStatusIDs[statusKey];\n    if (boosterID && boosterID !== item.id) {\n      console.warn(\n        `🚫 Duplicate boost by ${item.account.displayName}`,\n        item,\n        item.reblog,\n      );\n      return false;\n    } else {\n      boostedStatusIDs[statusKey] = item.id;\n    }\n    return true;\n  });\n  // Limit to 50\n  const keys = Object.keys(boostedStatusIDs);\n  if (keys.length > 50) {\n    keys.slice(0, keys.length - 50).forEach((key) => {\n      delete boostedStatusIDs[key];\n    });\n  }\n  store.account.set('boostedStatusIDs', boostedStatusIDs);\n  return filteredItems;\n}\n\nexport function groupContext(items) {\n  const contexts = [];\n  let contextIndex = 0;\n  items.forEach((item) => {\n    for (let i = 0; i < contexts.length; i++) {\n      if (contexts[i].find((t) => t.id === item.id)) return;\n      if (\n        contexts[i].find((t) => t.id === item.inReplyToId) ||\n        contexts[i].find((t) => t.inReplyToId === item.id)\n      ) {\n        contexts[i].push(item);\n        return;\n      }\n    }\n    const repliedItem = items.find((i) => i.id === item.inReplyToId);\n    if (repliedItem) {\n      contexts[contextIndex++] = [item, repliedItem];\n    }\n  });\n\n  // Check for cross-item contexts\n  // Merge contexts into one if they have a common item (same id)\n  for (let i = 0; i < contexts.length; i++) {\n    for (let j = i + 1; j < contexts.length; j++) {\n      const commonItem = contexts[i].find((t) => contexts[j].includes(t));\n      if (commonItem) {\n        contexts[i] = [...contexts[i], ...contexts[j]];\n        // Remove duplicate items\n        contexts[i] = contexts[i].filter(\n          (item, index, self) =>\n            self.findIndex((t) => t.id === item.id) === index,\n        );\n        contexts.splice(j, 1);\n        j--;\n      }\n    }\n  }\n\n  // Sort items by checking inReplyToId\n  contexts.forEach((context) => {\n    context.sort((a, b) => {\n      if (!a.inReplyToId && !b.inReplyToId) {\n        return new Date(a.createdAt) - new Date(b.createdAt);\n      }\n      if (a.inReplyToId === b.id) return 1;\n      if (b.inReplyToId === a.id) return -1;\n      if (!a.inReplyToId) return -1;\n      if (!b.inReplyToId) return 1;\n      return new Date(a.createdAt) - new Date(b.createdAt);\n    });\n  });\n\n  // Tag items that has different author than first post's author\n  contexts.forEach((context) => {\n    const firstItemAccountID = context[0].account.id;\n    context.forEach((item) => {\n      if (item.account.id !== firstItemAccountID) {\n        item._differentAuthor = true;\n      }\n    });\n  });\n\n  if (contexts.length) console.log('🧵 Contexts', contexts);\n\n  const newItems = [];\n  const appliedContextIndices = [];\n  items.forEach((item) => {\n    if (item.reblog) {\n      newItems.push(item);\n      return;\n    }\n    for (let i = 0; i < contexts.length; i++) {\n      if (contexts[i].find((t) => t.id === item.id)) {\n        if (appliedContextIndices.includes(i)) return;\n        const contextItems = contexts[i];\n        contextItems.sort((a, b) => {\n          const aDate = new Date(a.createdAt);\n          const bDate = new Date(b.createdAt);\n          return aDate - bDate;\n        });\n        const firstItemAccountID = contextItems[0].account.id;\n        newItems.push({\n          id: contextItems.map((i) => i.id),\n          items: contextItems,\n          type: contextItems.every((it) => it.account.id === firstItemAccountID)\n            ? 'thread'\n            : 'conversation',\n        });\n        appliedContextIndices.push(i);\n        return;\n      }\n    }\n    newItems.push(item);\n  });\n\n  return newItems;\n}\n","import { useLayoutEffect, useState } from 'preact/hooks';\n\nexport default function useScroll({\n  scrollableRef,\n  distanceFromStart = 1, // ratio of clientHeight/clientWidth\n  distanceFromEnd = 1, // ratio of clientHeight/clientWidth\n  scrollThresholdStart = 10,\n  scrollThresholdEnd = 10,\n  direction = 'vertical',\n  distanceFromStartPx: _distanceFromStartPx,\n  distanceFromEndPx: _distanceFromEndPx,\n} = {}) {\n  const [scrollDirection, setScrollDirection] = useState(null);\n  const [reachStart, setReachStart] = useState(false);\n  const [reachEnd, setReachEnd] = useState(false);\n  const [nearReachStart, setNearReachStart] = useState(false);\n  const [nearReachEnd, setNearReachEnd] = useState(false);\n  const isVertical = direction === 'vertical';\n\n  useLayoutEffect(() => {\n    const scrollableElement = scrollableRef.current;\n    if (!scrollableElement) return {};\n    let previousScrollStart = isVertical\n      ? scrollableElement.scrollTop\n      : scrollableElement.scrollLeft;\n\n    function onScroll() {\n      const {\n        scrollTop,\n        scrollLeft,\n        scrollHeight,\n        scrollWidth,\n        clientHeight,\n        clientWidth,\n      } = scrollableElement;\n      const scrollStart = isVertical ? scrollTop : scrollLeft;\n      const scrollDimension = isVertical ? scrollHeight : scrollWidth;\n      const clientDimension = isVertical ? clientHeight : clientWidth;\n      const scrollDistance = Math.abs(scrollStart - previousScrollStart);\n      const distanceFromStartPx =\n        _distanceFromStartPx ||\n        Math.min(\n          clientDimension * distanceFromStart,\n          scrollDimension,\n          scrollStart,\n        );\n      const distanceFromEndPx =\n        _distanceFromEndPx ||\n        Math.min(\n          clientDimension * distanceFromEnd,\n          scrollDimension,\n          scrollDimension - scrollStart - clientDimension,\n        );\n\n      if (\n        scrollDistance >=\n        (previousScrollStart < scrollStart\n          ? scrollThresholdEnd\n          : scrollThresholdStart)\n      ) {\n        setScrollDirection(previousScrollStart < scrollStart ? 'end' : 'start');\n        previousScrollStart = scrollStart;\n      }\n\n      setReachStart(scrollStart <= 0);\n      setReachEnd(scrollStart + clientDimension >= scrollDimension);\n      setNearReachStart(scrollStart <= distanceFromStartPx);\n      setNearReachEnd(\n        scrollStart + clientDimension >= scrollDimension - distanceFromEndPx,\n      );\n    }\n\n    scrollableElement.addEventListener('scroll', onScroll, { passive: true });\n\n    return () => scrollableElement.removeEventListener('scroll', onScroll);\n  }, [\n    distanceFromStart,\n    distanceFromEnd,\n    scrollThresholdStart,\n    scrollThresholdEnd,\n  ]);\n\n  return {\n    scrollDirection,\n    reachStart,\n    reachEnd,\n    nearReachStart,\n    nearReachEnd,\n    init: () => {\n      if (scrollableRef.current) {\n        scrollableRef.current.dispatchEvent(new Event('scroll'));\n      }\n    },\n  };\n}\n","import './media-post.css';\n\nimport { memo } from 'preact/compat';\nimport { useSnapshot } from 'valtio';\n\nimport states, { statusKey } from '../utils/states';\n\nimport Media from './media';\n\nfunction MediaPost({\n  class: className,\n  statusID,\n  status,\n  instance,\n  parent,\n  allowFilters,\n  onMediaClick,\n}) {\n  let sKey = statusKey(statusID, instance);\n  const snapStates = useSnapshot(states);\n  if (!status) {\n    status = snapStates.statuses[sKey] || snapStates.statuses[statusID];\n    sKey = statusKey(status?.id, instance);\n  }\n  if (!status) {\n    return null;\n  }\n\n  const {\n    account: {\n      acct,\n      avatar,\n      avatarStatic,\n      id: accountId,\n      url: accountURL,\n      displayName,\n      username,\n      emojis: accountEmojis,\n      bot,\n      group,\n    },\n    id,\n    repliesCount,\n    reblogged,\n    reblogsCount,\n    favourited,\n    favouritesCount,\n    bookmarked,\n    poll,\n    muted,\n    sensitive,\n    spoilerText,\n    visibility, // public, unlisted, private, direct\n    language,\n    editedAt,\n    filtered,\n    card,\n    createdAt,\n    inReplyToId,\n    inReplyToAccountId,\n    content,\n    mentions,\n    mediaAttachments,\n    reblog,\n    uri,\n    url,\n    emojis,\n    // Non-API props\n    _deleted,\n    _pinned,\n    _filtered,\n  } = status;\n\n  if (!mediaAttachments?.length) {\n    return null;\n  }\n\n  const debugHover = (e) => {\n    if (e.shiftKey) {\n      console.log({\n        ...status,\n      });\n    }\n  };\n\n  console.debug('RENDER Media post', id, status?.account.displayName);\n\n  // const readingExpandSpoilers = useMemo(() => {\n  //   const prefs = store.account.get('preferences') || {};\n  //   return !!prefs['reading:expand:spoilers'];\n  // }, []);\n  const hasSpoiler = spoilerText || sensitive;\n\n  const Parent = parent || 'div';\n\n  return mediaAttachments.map((media, i) => {\n    const mediaKey = `${sKey}-${media.id}`;\n    return (\n      <Parent\n        onMouseEnter={debugHover}\n        key={mediaKey}\n        data-spoiler-text={\n          spoilerText || (sensitive ? 'Sensitive media' : undefined)\n        }\n        data-filtered-text={_filtered ? 'Filtered' : undefined}\n        class={`\n          media-post\n          ${allowFilters && _filtered ? 'filtered' : ''}\n          ${hasSpoiler ? 'has-spoiler' : ''}\n        `}\n      >\n        <Media\n          class={className}\n          media={media}\n          lang={language}\n          to={`/${instance}/s/${id}?media-only=${i + 1}`}\n          onClick={\n            onMediaClick ? (e) => onMediaClick(e, i, media, status) : undefined\n          }\n        />\n      </Parent>\n    );\n  });\n}\n\nexport default memo(MediaPost);\n","import './nav-menu.css';\n\nimport { ControlledMenu, MenuDivider, MenuItem } from '@szhsin/react-menu';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useLongPress } from 'use-long-press';\nimport { useSnapshot } from 'valtio';\n\nimport { api } from '../utils/api';\nimport safeBoundingBoxPadding from '../utils/safe-bounding-box-padding';\nimport states from '../utils/states';\nimport store from '../utils/store';\n\nimport Avatar from './avatar';\nimport Icon from './icon';\nimport MenuLink from './menu-link';\n\nfunction NavMenu(props) {\n  const snapStates = useSnapshot(states);\n  const { masto, instance, authenticated } = api();\n\n  const [currentAccount, setCurrentAccount] = useState();\n  const [moreThanOneAccount, setMoreThanOneAccount] = useState(false);\n\n  useEffect(() => {\n    const accounts = store.local.getJSON('accounts') || [];\n    const acc = accounts.find(\n      (account) => account.info.id === store.session.get('currentAccount'),\n    );\n    if (acc) setCurrentAccount(acc);\n    setMoreThanOneAccount(accounts.length > 1);\n  }, []);\n\n  // Home = Following\n  // But when in multi-column mode, Home becomes columns of anything\n  // User may choose pin or not to pin Following\n  // If user doesn't pin Following, we show it in the menu\n  const showFollowing =\n    (snapStates.settings.shortcutsColumnsMode ||\n      snapStates.settings.shortcutsViewMode === 'multi-column') &&\n    !snapStates.shortcuts.find((pin) => pin.type === 'following');\n\n  const bindLongPress = useLongPress(\n    () => {\n      states.showAccounts = true;\n    },\n    {\n      threshold: 600,\n      detect: 'touch',\n      cancelOnMovement: true,\n    },\n  );\n\n  const buttonRef = useRef();\n  const [menuState, setMenuState] = useState(undefined);\n\n  const boundingBoxPadding = safeBoundingBoxPadding([\n    0,\n    0,\n    snapStates.settings.shortcutsViewMode === 'tab-menu-bar' ? 50 : 0,\n    0,\n  ]);\n\n  const mutesIterator = useRef();\n  async function fetchMutes(firstLoad) {\n    if (firstLoad || !mutesIterator.current) {\n      mutesIterator.current = masto.v1.mutes.list({\n        limit: 80,\n      });\n    }\n    const results = await mutesIterator.current.next();\n    return results;\n  }\n\n  const blocksIterator = useRef();\n  async function fetchBlocks(firstLoad) {\n    if (firstLoad || !blocksIterator.current) {\n      blocksIterator.current = masto.v1.blocks.list({\n        limit: 80,\n      });\n    }\n    const results = await blocksIterator.current.next();\n    return results;\n  }\n\n  return (\n    <>\n      <button\n        ref={buttonRef}\n        type=\"button\"\n        class={`button plain nav-menu-button ${\n          moreThanOneAccount ? 'with-avatar' : ''\n        } ${open ? 'active' : ''}`}\n        style={{ position: 'relative' }}\n        onClick={() => {\n          setMenuState((state) => (!state ? 'open' : undefined));\n        }}\n        onContextMenu={(e) => {\n          e.preventDefault();\n          states.showAccounts = true;\n        }}\n        {...bindLongPress()}\n      >\n        {moreThanOneAccount && (\n          <Avatar\n            url={\n              currentAccount?.info?.avatar || currentAccount?.info?.avatarStatic\n            }\n            size=\"l\"\n            squircle={currentAccount?.info?.bot}\n          />\n        )}\n        <Icon icon=\"menu\" size={moreThanOneAccount ? 's' : 'l'} />\n      </button>\n      <ControlledMenu\n        menuClassName=\"nav-menu\"\n        state={menuState}\n        anchorRef={buttonRef}\n        onClose={() => {\n          setMenuState(undefined);\n        }}\n        containerProps={{\n          style: {\n            zIndex: 10,\n          },\n          onClick: () => {\n            setMenuState(undefined);\n          },\n        }}\n        portal={{\n          target: document.body,\n        }}\n        {...props}\n        overflow=\"auto\"\n        viewScroll=\"close\"\n        position=\"anchor\"\n        align=\"center\"\n        boundingBoxPadding={boundingBoxPadding}\n        unmountOnClose\n      >\n        {!!snapStates.appVersion?.commitHash &&\n          __COMMIT_HASH__ !== snapStates.appVersion.commitHash && (\n            <div class=\"top-menu\">\n              <MenuItem\n                onClick={() => {\n                  const yes = confirm('Reload page now to update?');\n                  if (yes) {\n                    (async () => {\n                      try {\n                        location.reload();\n                      } catch (e) {}\n                    })();\n                  }\n                }}\n              >\n                <Icon icon=\"sparkles\" class=\"sparkle-icon\" size=\"l\" />{' '}\n                <span>New update available…</span>\n              </MenuItem>\n              <MenuDivider />\n            </div>\n          )}\n        <section>\n          <MenuLink to=\"/\">\n            <Icon icon=\"home\" size=\"l\" /> <span>Home</span>\n          </MenuLink>\n          {authenticated && (\n            <>\n              {showFollowing && (\n                <MenuLink to=\"/following\">\n                  <Icon icon=\"following\" size=\"l\" /> <span>Following</span>\n                </MenuLink>\n              )}\n              <MenuLink to=\"/mentions\">\n                <Icon icon=\"at\" size=\"l\" /> <span>Mentions</span>\n              </MenuLink>\n              <MenuLink to=\"/notifications\">\n                <Icon icon=\"notification\" size=\"l\" /> <span>Notifications</span>\n                {snapStates.notificationsShowNew && (\n                  <sup title=\"New\" style={{ opacity: 0.5 }}>\n                    {' '}\n                    &bull;\n                  </sup>\n                )}\n              </MenuLink>\n              <MenuDivider />\n              <MenuLink to=\"/l\">\n                <Icon icon=\"list\" size=\"l\" /> <span>Lists</span>\n              </MenuLink>\n              <MenuLink to=\"/ft\">\n                <Icon icon=\"hashtag\" size=\"l\" /> <span>Followed Hashtags</span>\n              </MenuLink>\n              <MenuLink to=\"/b\">\n                <Icon icon=\"bookmark\" size=\"l\" /> <span>Bookmarks</span>\n              </MenuLink>\n              <MenuLink to=\"/f\">\n                <Icon icon=\"heart\" size=\"l\" /> <span>Likes</span>\n              </MenuLink>\n            </>\n          )}\n          <MenuDivider />\n          <MenuLink to={`/search`}>\n            <Icon icon=\"search\" size=\"l\" /> <span>Search</span>\n          </MenuLink>\n          <MenuLink to={`/${instance}/p/l`}>\n            <Icon icon=\"group\" size=\"l\" /> <span>Local</span>\n          </MenuLink>\n          <MenuLink to={`/${instance}/p`}>\n            <Icon icon=\"earth\" size=\"l\" /> <span>Federated</span>\n          </MenuLink>\n          <MenuLink to={`/${instance}/trending`}>\n            <Icon icon=\"chart\" size=\"l\" /> <span>Trending</span>\n          </MenuLink>\n        </section>\n        <section>\n          {authenticated ? (\n            <>\n              <MenuDivider />\n              {currentAccount?.info?.id && (\n                <MenuLink to={`/${instance}/a/${currentAccount.info.id}`}>\n                  <Icon icon=\"user\" size=\"l\" /> <span>Profile</span>\n                </MenuLink>\n              )}\n              <MenuItem\n                onClick={() => {\n                  states.showAccounts = true;\n                }}\n              >\n                <Icon icon=\"group\" size=\"l\" /> <span>Accounts&hellip;</span>\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  states.showGenericAccounts = {\n                    id: 'mute',\n                    heading: 'Muted users',\n                    fetchAccounts: fetchMutes,\n                  };\n                }}\n              >\n                <Icon icon=\"mute\" size=\"l\" /> Muted users&hellip;\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  states.showGenericAccounts = {\n                    id: 'block',\n                    heading: 'Blocked users',\n                    fetchAccounts: fetchBlocks,\n                  };\n                }}\n              >\n                <Icon icon=\"block\" size=\"l\" />\n                Blocked users&hellip;\n              </MenuItem>\n              <MenuDivider className=\"divider-grow\" />\n              <MenuItem\n                onClick={() => {\n                  states.showKeyboardShortcutsHelp = true;\n                }}\n              >\n                <Icon icon=\"keyboard\" size=\"l\" />{' '}\n                <span>Keyboard shortcuts</span>\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  states.showShortcutsSettings = true;\n                }}\n              >\n                <Icon icon=\"shortcut\" size=\"l\" />{' '}\n                <span>Shortcuts / Columns&hellip;</span>\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  states.showSettings = true;\n                }}\n              >\n                <Icon icon=\"gear\" size=\"l\" /> <span>Settings&hellip;</span>\n              </MenuItem>\n            </>\n          ) : (\n            <>\n              <MenuDivider />\n              <MenuLink to=\"/login\">\n                <Icon icon=\"user\" size=\"l\" /> <span>Log in</span>\n              </MenuLink>\n              <MenuItem\n                onClick={() => {\n                  states.showSettings = true;\n                }}\n              >\n                <Icon icon=\"gear\" size=\"l\" /> <span>Settings&hellip;</span>\n              </MenuItem>\n            </>\n          )}\n        </section>\n      </ControlledMenu>\n    </>\n  );\n}\n\nexport default NavMenu;\n","import { useCallback, useEffect, useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { InView } from 'react-intersection-observer';\nimport { useDebouncedCallback } from 'use-debounce';\nimport { useSnapshot } from 'valtio';\n\nimport states, { statusKey } from '../utils/states';\nimport statusPeek from '../utils/status-peek';\nimport { groupBoosts, groupContext } from '../utils/timeline-utils';\nimport useInterval from '../utils/useInterval';\nimport usePageVisibility from '../utils/usePageVisibility';\nimport useScroll from '../utils/useScroll';\n\nimport Icon from './icon';\nimport Link from './link';\nimport Media from './media';\nimport MediaPost from './media-post';\nimport NavMenu from './nav-menu';\nimport Status from './status';\n\nconst scrollIntoViewOptions = {\n  block: 'nearest',\n  inline: 'center',\n  behavior: 'smooth',\n};\n\nfunction Timeline({\n  title,\n  titleComponent,\n  id,\n  instance,\n  emptyText,\n  errorText,\n  useItemID, // use statusID instead of status object, assuming it's already in states\n  boostsCarousel,\n  fetchItems = () => {},\n  checkForUpdates = () => {},\n  checkForUpdatesInterval = 60_000, // 1 minute\n  headerStart,\n  headerEnd,\n  timelineStart,\n  allowFilters,\n  refresh,\n  view,\n}) {\n  const snapStates = useSnapshot(states);\n  const [items, setItems] = useState([]);\n  const [uiState, setUIState] = useState('default');\n  const [showMore, setShowMore] = useState(false);\n  const [showNew, setShowNew] = useState(false);\n  const [visible, setVisible] = useState(true);\n  const scrollableRef = useRef();\n\n  console.debug('RENDER Timeline', id, refresh);\n\n  const allowGrouping = view !== 'media';\n  const loadItems = useDebouncedCallback(\n    (firstLoad) => {\n      setShowNew(false);\n      if (uiState === 'loading') return;\n      setUIState('loading');\n      (async () => {\n        try {\n          let { done, value } = await fetchItems(firstLoad);\n          if (Array.isArray(value)) {\n            if (allowGrouping) {\n              if (boostsCarousel) {\n                value = groupBoosts(value);\n              }\n              value = groupContext(value);\n            }\n            console.log(value);\n            if (firstLoad) {\n              setItems(value);\n            } else {\n              setItems((items) => [...items, ...value]);\n            }\n            if (!value.length) done = true;\n            setShowMore(!done);\n          } else {\n            setShowMore(false);\n          }\n          setUIState('default');\n        } catch (e) {\n          console.error(e);\n          setUIState('error');\n        } finally {\n          loadItems.cancel();\n        }\n      })();\n    },\n    1500,\n    {\n      leading: true,\n      trailing: false,\n    },\n  );\n\n  const itemsSelector = '.timeline-item, .timeline-item-alt';\n\n  const jRef = useHotkeys('j, shift+j', (_, handler) => {\n    // focus on next status after active item\n    const activeItem = document.activeElement.closest(itemsSelector);\n    const activeItemRect = activeItem?.getBoundingClientRect();\n    const allItems = Array.from(\n      scrollableRef.current.querySelectorAll(itemsSelector),\n    );\n    if (\n      activeItem &&\n      activeItemRect.top < scrollableRef.current.clientHeight &&\n      activeItemRect.bottom > 0\n    ) {\n      const activeItemIndex = allItems.indexOf(activeItem);\n      let nextItem = allItems[activeItemIndex + 1];\n      if (handler.shift) {\n        // get next status that's not .timeline-item-alt\n        nextItem = allItems.find(\n          (item, index) =>\n            index > activeItemIndex &&\n            !item.classList.contains('timeline-item-alt'),\n        );\n      }\n      if (nextItem) {\n        nextItem.focus();\n        nextItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostItem = allItems.find((item) => {\n        const itemRect = item.getBoundingClientRect();\n        return itemRect.top >= 44 && itemRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostItem) {\n        topmostItem.focus();\n        topmostItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    }\n  });\n\n  const kRef = useHotkeys('k, shift+k', (_, handler) => {\n    // focus on previous status after active item\n    const activeItem = document.activeElement.closest(itemsSelector);\n    const activeItemRect = activeItem?.getBoundingClientRect();\n    const allItems = Array.from(\n      scrollableRef.current.querySelectorAll(itemsSelector),\n    );\n    if (\n      activeItem &&\n      activeItemRect.top < scrollableRef.current.clientHeight &&\n      activeItemRect.bottom > 0\n    ) {\n      const activeItemIndex = allItems.indexOf(activeItem);\n      let prevItem = allItems[activeItemIndex - 1];\n      if (handler.shift) {\n        // get prev status that's not .timeline-item-alt\n        prevItem = allItems.findLast(\n          (item, index) =>\n            index < activeItemIndex &&\n            !item.classList.contains('timeline-item-alt'),\n        );\n      }\n      if (prevItem) {\n        prevItem.focus();\n        prevItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostItem = allItems.find((item) => {\n        const itemRect = item.getBoundingClientRect();\n        return itemRect.top >= 44 && itemRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostItem) {\n        topmostItem.focus();\n        topmostItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    }\n  });\n\n  const oRef = useHotkeys(['enter', 'o'], () => {\n    // open active status\n    const activeItem = document.activeElement.closest(itemsSelector);\n    if (activeItem) {\n      activeItem.click();\n    }\n  });\n\n  const {\n    scrollDirection,\n    nearReachStart,\n    nearReachEnd,\n    reachStart,\n    reachEnd,\n  } = useScroll({\n    scrollableRef,\n    distanceFromEnd: 2,\n    scrollThresholdStart: 44,\n  });\n\n  useEffect(() => {\n    scrollableRef.current?.scrollTo({ top: 0 });\n    loadItems(true);\n  }, []);\n  useEffect(() => {\n    loadItems(true);\n  }, [refresh]);\n\n  useEffect(() => {\n    if (reachStart) {\n      loadItems(true);\n    }\n  }, [reachStart]);\n\n  useEffect(() => {\n    if (nearReachEnd || (reachEnd && showMore)) {\n      loadItems();\n    }\n  }, [nearReachEnd, showMore]);\n\n  const prevView = useRef(view);\n  useEffect(() => {\n    if (prevView.current !== view) {\n      prevView.current = view;\n      setItems([]);\n    }\n  }, [view]);\n\n  const loadOrCheckUpdates = useCallback(\n    async ({ disableIdleCheck = false } = {}) => {\n      const noPointers = scrollableRef.current\n        ? getComputedStyle(scrollableRef.current).pointerEvents === 'none'\n        : false;\n      console.log('✨ Load or check updates', id, {\n        autoRefresh: snapStates.settings.autoRefresh,\n        scrollTop: scrollableRef.current.scrollTop,\n        disableIdleCheck,\n        idle: window.__IDLE__,\n        inBackground: inBackground(),\n        noPointers,\n      });\n      if (\n        snapStates.settings.autoRefresh &&\n        scrollableRef.current.scrollTop < 16 &&\n        (disableIdleCheck || window.__IDLE__) &&\n        !inBackground() &&\n        !noPointers\n      ) {\n        console.log('✨ Load updates', id, snapStates.settings.autoRefresh);\n        loadItems(true);\n      } else {\n        console.log('✨ Check updates', id, snapStates.settings.autoRefresh);\n        const hasUpdate = await checkForUpdates();\n        if (hasUpdate) {\n          console.log('✨ Has new updates', id);\n          setShowNew(true);\n        }\n      }\n    },\n    [id, loadItems, checkForUpdates, snapStates.settings.autoRefresh],\n  );\n\n  const lastHiddenTime = useRef();\n  usePageVisibility(\n    (visible) => {\n      if (visible) {\n        const timeDiff = Date.now() - lastHiddenTime.current;\n        if (!lastHiddenTime.current || timeDiff > 1000 * 60) {\n          loadOrCheckUpdates({\n            disableIdleCheck: true,\n          });\n        }\n      } else {\n        lastHiddenTime.current = Date.now();\n      }\n      setVisible(visible);\n    },\n    [checkForUpdates, loadOrCheckUpdates, snapStates.settings.autoRefresh],\n  );\n\n  // checkForUpdates interval\n  useInterval(\n    loadOrCheckUpdates,\n    visible && !showNew ? checkForUpdatesInterval : null,\n  );\n\n  const hiddenUI = scrollDirection === 'end' && !nearReachStart;\n\n  return (\n    <div\n      id={`${id}-page`}\n      class=\"deck-container\"\n      ref={(node) => {\n        scrollableRef.current = node;\n        jRef.current = node;\n        kRef.current = node;\n        oRef.current = node;\n      }}\n      tabIndex=\"-1\"\n    >\n      <div class=\"timeline-deck deck\">\n        <header\n          hidden={hiddenUI}\n          onClick={(e) => {\n            if (!e.target.closest('a, button')) {\n              scrollableRef.current?.scrollTo({\n                top: 0,\n                behavior: 'smooth',\n              });\n            }\n          }}\n          onDblClick={(e) => {\n            if (!e.target.closest('a, button')) {\n              loadItems(true);\n            }\n          }}\n          class={uiState === 'loading' ? 'loading' : ''}\n        >\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n              {headerStart !== null && headerStart !== undefined ? (\n                headerStart\n              ) : (\n                <Link to=\"/\" class=\"button plain home-button\">\n                  <Icon icon=\"home\" size=\"l\" />\n                </Link>\n              )}\n            </div>\n            {title && (titleComponent ? titleComponent : <h1>{title}</h1>)}\n            <div class=\"header-side\">\n              {/* <Loader hidden={uiState !== 'loading'} /> */}\n              {!!headerEnd && headerEnd}\n            </div>\n          </div>\n          {items.length > 0 &&\n            uiState !== 'loading' &&\n            !hiddenUI &&\n            showNew && (\n              <button\n                class=\"updates-button shiny-pill\"\n                type=\"button\"\n                onClick={() => {\n                  loadItems(true);\n                  scrollableRef.current?.scrollTo({\n                    top: 0,\n                    behavior: 'smooth',\n                  });\n                }}\n              >\n                <Icon icon=\"arrow-up\" /> New posts\n              </button>\n            )}\n        </header>\n        {!!timelineStart && (\n          <div\n            class={`timeline-start ${uiState === 'loading' ? 'loading' : ''}`}\n          >\n            {timelineStart}\n          </div>\n        )}\n        {!!items.length ? (\n          <>\n            <ul class={`timeline ${view ? `timeline-${view}` : ''}`}>\n              {items.map((status) => (\n                <TimelineItem\n                  status={status}\n                  instance={instance}\n                  useItemID={useItemID}\n                  allowFilters={allowFilters}\n                  key={status.id + status?._pinned}\n                  view={view}\n                />\n              ))}\n              {showMore &&\n                uiState === 'loading' &&\n                (view === 'media' ? null : (\n                  <>\n                    <li\n                      style={{\n                        height: '20vh',\n                      }}\n                    >\n                      <Status skeleton />\n                    </li>\n                    <li\n                      style={{\n                        height: '25vh',\n                      }}\n                    >\n                      <Status skeleton />\n                    </li>\n                  </>\n                ))}\n            </ul>\n            {uiState === 'default' &&\n              (showMore ? (\n                <InView\n                  onChange={(inView) => {\n                    if (inView) {\n                      loadItems();\n                    }\n                  }}\n                >\n                  <button\n                    type=\"button\"\n                    class=\"plain block\"\n                    onClick={() => loadItems()}\n                    style={{ marginBlockEnd: '6em' }}\n                  >\n                    Show more&hellip;\n                  </button>\n                </InView>\n              ) : (\n                <p class=\"ui-state insignificant\">The end.</p>\n              ))}\n          </>\n        ) : uiState === 'loading' ? (\n          <ul class=\"timeline\">\n            {Array.from({ length: 5 }).map((_, i) =>\n              view === 'media' ? (\n                <div\n                  style={{\n                    height: '50vh',\n                  }}\n                />\n              ) : (\n                <li key={i}>\n                  <Status skeleton />\n                </li>\n              ),\n            )}\n          </ul>\n        ) : (\n          uiState !== 'error' && <p class=\"ui-state\">{emptyText}</p>\n        )}\n        {uiState === 'error' && (\n          <p class=\"ui-state\">\n            {errorText}\n            <br />\n            <br />\n            <button\n              class=\"button plain\"\n              onClick={() => loadItems(!items.length)}\n            >\n              Try again\n            </button>\n          </p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction TimelineItem({ status, instance, useItemID, allowFilters, view }) {\n  const { id: statusID, reblog, items, type, _pinned } = status;\n  const actualStatusID = reblog?.id || statusID;\n  const url = instance\n    ? `/${instance}/s/${actualStatusID}`\n    : `/s/${actualStatusID}`;\n  let title = '';\n  if (type === 'boosts') {\n    title = `${items.length} Boosts`;\n  } else if (type === 'pinned') {\n    title = 'Pinned posts';\n  }\n  const isCarousel = type === 'boosts' || type === 'pinned';\n  if (items) {\n    if (isCarousel) {\n      // Here, we don't hide filtered posts, but we sort them last\n      items.sort((a, b) => {\n        if (a._filtered && !b._filtered) {\n          return 1;\n        }\n        if (!a._filtered && b._filtered) {\n          return -1;\n        }\n        return 0;\n      });\n      return (\n        <li key={`timeline-${statusID}`} class=\"timeline-item-carousel\">\n          <StatusCarousel title={title} class={`${type}-carousel`}>\n            {items.map((item) => {\n              const { id: statusID, reblog } = item;\n              const actualStatusID = reblog?.id || statusID;\n              const url = instance\n                ? `/${instance}/s/${actualStatusID}`\n                : `/s/${actualStatusID}`;\n              return (\n                <li key={statusID}>\n                  <Link class=\"status-carousel-link timeline-item-alt\" to={url}>\n                    {useItemID ? (\n                      <Status\n                        statusID={statusID}\n                        instance={instance}\n                        size=\"s\"\n                        contentTextWeight\n                        allowFilters={allowFilters}\n                      />\n                    ) : (\n                      <Status\n                        status={item}\n                        instance={instance}\n                        size=\"s\"\n                        contentTextWeight\n                        allowFilters={allowFilters}\n                      />\n                    )}\n                  </Link>\n                </li>\n              );\n            })}\n          </StatusCarousel>\n        </li>\n      );\n    }\n    const manyItems = items.length > 3;\n    return items.map((item, i) => {\n      const { id: statusID, _differentAuthor } = item;\n      const url = instance ? `/${instance}/s/${statusID}` : `/s/${statusID}`;\n      const isMiddle = i > 0 && i < items.length - 1;\n      const isSpoiler = item.sensitive && !!item.spoilerText;\n      const showCompact =\n        (!_differentAuthor && isSpoiler && i > 0) ||\n        (manyItems &&\n          isMiddle &&\n          (type === 'thread' ||\n            (type === 'conversation' &&\n              !_differentAuthor &&\n              !items[i - 1]._differentAuthor &&\n              !items[i + 1]._differentAuthor)));\n      return (\n        <li\n          key={`timeline-${statusID}`}\n          class={`timeline-item-container timeline-item-container-type-${type} timeline-item-container-${\n            i === 0 ? 'start' : i === items.length - 1 ? 'end' : 'middle'\n          } ${_differentAuthor ? 'timeline-item-diff-author' : ''}`}\n        >\n          <Link class=\"status-link timeline-item\" to={url}>\n            {showCompact ? (\n              <TimelineStatusCompact status={item} instance={instance} />\n            ) : useItemID ? (\n              <Status\n                statusID={statusID}\n                instance={instance}\n                allowFilters={allowFilters}\n              />\n            ) : (\n              <Status\n                status={item}\n                instance={instance}\n                allowFilters={allowFilters}\n              />\n            )}\n          </Link>\n        </li>\n      );\n    });\n  }\n\n  const itemKey = `timeline-${statusID + _pinned}`;\n\n  if (view === 'media') {\n    return useItemID ? (\n      <MediaPost\n        class=\"timeline-item\"\n        parent=\"li\"\n        key={itemKey}\n        statusID={statusID}\n        instance={instance}\n        allowFilters={allowFilters}\n      />\n    ) : (\n      <MediaPost\n        class=\"timeline-item\"\n        parent=\"li\"\n        key={itemKey}\n        status={status}\n        instance={instance}\n        allowFilters={allowFilters}\n      />\n    );\n  }\n\n  return (\n    <li key={itemKey}>\n      <Link class=\"status-link timeline-item\" to={url}>\n        {useItemID ? (\n          <Status\n            statusID={statusID}\n            instance={instance}\n            allowFilters={allowFilters}\n          />\n        ) : (\n          <Status\n            status={status}\n            instance={instance}\n            allowFilters={allowFilters}\n          />\n        )}\n      </Link>\n    </li>\n  );\n}\n\nfunction StatusCarousel({ title, class: className, children }) {\n  const carouselRef = useRef();\n  const { reachStart, reachEnd, init } = useScroll({\n    scrollableRef: carouselRef,\n    direction: 'horizontal',\n  });\n  useEffect(() => {\n    init?.();\n  }, []);\n\n  return (\n    <div class={`status-carousel ${className}`}>\n      <header>\n        <h3>{title}</h3>\n        <span>\n          <button\n            type=\"button\"\n            class=\"small plain2\"\n            disabled={reachStart}\n            onClick={() => {\n              carouselRef.current?.scrollBy({\n                left: -Math.min(320, carouselRef.current?.offsetWidth),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"chevron-left\" />\n          </button>{' '}\n          <button\n            type=\"button\"\n            class=\"small plain2\"\n            disabled={reachEnd}\n            onClick={() => {\n              carouselRef.current?.scrollBy({\n                left: Math.min(320, carouselRef.current?.offsetWidth),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"chevron-right\" />\n          </button>\n        </span>\n      </header>\n      <ul ref={carouselRef}>{children}</ul>\n    </div>\n  );\n}\n\nfunction TimelineStatusCompact({ status, instance }) {\n  const snapStates = useSnapshot(states);\n  const { id, visibility } = status;\n  const statusPeekText = statusPeek(status);\n  const sKey = statusKey(id, instance);\n  return (\n    <article\n      class={`status compact-thread ${\n        visibility === 'direct' ? 'visibility-direct' : ''\n      }`}\n      tabindex=\"-1\"\n    >\n      {!!snapStates.statusThreadNumber[sKey] ? (\n        <div class=\"status-thread-badge\">\n          <Icon icon=\"thread\" size=\"s\" />\n          {snapStates.statusThreadNumber[sKey]\n            ? ` ${snapStates.statusThreadNumber[sKey]}/X`\n            : ''}\n        </div>\n      ) : (\n        <div class=\"status-thread-badge\">\n          <Icon icon=\"thread\" size=\"s\" />\n        </div>\n      )}\n      <div class=\"content-compact\" title={statusPeekText}>\n        {statusPeekText}\n        {status.sensitive && status.spoilerText && (\n          <>\n            {' '}\n            <span class=\"spoiler-badge\">\n              <Icon icon=\"eye-close\" size=\"s\" />\n            </span>\n          </>\n        )}\n      </div>\n    </article>\n  );\n}\n\nfunction inBackground() {\n  return !!document.querySelector('.deck-backdrop, #modal-container > *');\n}\n\nexport default Timeline;\n","import { MenuItem } from '@szhsin/react-menu';\nimport {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'preact/hooks';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport AccountInfo from '../components/account-info';\nimport EmojiText from '../components/emoji-text';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Menu2 from '../components/menu2';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport pmem from '../utils/pmem';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\nconst MIN_YEAR = 1983;\nconst MIN_YEAR_MONTH = `${MIN_YEAR}-01`; // Birth of the Internet\n\nconst supportsInputMonth = (() => {\n  try {\n    const input = document.createElement('input');\n    input.setAttribute('type', 'month');\n    return input.type === 'month';\n  } catch (e) {\n    return false;\n  }\n})();\n\nasync function _isSearchEnabled(instance) {\n  const { masto } = api({ instance });\n  const results = await masto.v2.search.fetch({\n    q: 'from:me',\n    type: 'statuses',\n    limit: 1,\n  });\n  return !!results?.statuses?.length;\n}\nconst isSearchEnabled = pmem(_isSearchEnabled);\n\nfunction AccountStatuses() {\n  const snapStates = useSnapshot(states);\n  const { id, ...params } = useParams();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const month = searchParams.get('month');\n  const excludeReplies = !searchParams.get('replies');\n  const excludeBoosts = !!searchParams.get('boosts');\n  const tagged = searchParams.get('tagged');\n  const media = !!searchParams.get('media');\n  const { masto, instance, authenticated } = api({ instance: params.instance });\n  const accountStatusesIterator = useRef();\n\n  const allSearchParams = [month, excludeReplies, excludeBoosts, tagged, media];\n  const [account, setAccount] = useState();\n  const searchOffsetRef = useRef(0);\n  useEffect(() => {\n    searchOffsetRef.current = 0;\n  }, allSearchParams);\n\n  const sameCurrentInstance = useMemo(\n    () => instance === api().instance,\n    [instance],\n  );\n  const [searchEnabled, setSearchEnabled] = useState(false);\n  useEffect(() => {\n    // Only enable for current logged-in instance\n    // Most remote instances don't allow unauthenticated searches\n    if (!sameCurrentInstance) return;\n    if (!account?.acct) return;\n    (async () => {\n      const enabled = await isSearchEnabled(instance);\n      console.log({ enabled });\n      setSearchEnabled(enabled);\n    })();\n  }, [instance, sameCurrentInstance, account?.acct]);\n\n  async function fetchAccountStatuses(firstLoad) {\n    const isValidMonth = /^\\d{4}-[01]\\d$/.test(month);\n    const isValidYear = month?.split?.('-')?.[0] >= MIN_YEAR;\n    if (isValidMonth && isValidYear) {\n      if (!account) {\n        return {\n          value: [],\n          done: true,\n        };\n      }\n      const [_year, _month] = month.split('-');\n      const monthIndex = parseInt(_month, 10) - 1;\n      // YYYY-MM (no day)\n      // Search options:\n      // - from:account\n      // - after:YYYY-MM-DD (non-inclusive)\n      // - before:YYYY-MM-DD (non-inclusive)\n\n      // Last day of previous month\n      const after = new Date(_year, monthIndex, 0);\n      const afterStr = `${after.getFullYear()}-${(after.getMonth() + 1)\n        .toString()\n        .padStart(2, '0')}-${after.getDate().toString().padStart(2, '0')}`;\n      // First day of next month\n      const before = new Date(_year, monthIndex + 1, 1);\n      const beforeStr = `${before.getFullYear()}-${(before.getMonth() + 1)\n        .toString()\n        .padStart(2, '0')}-${before.getDate().toString().padStart(2, '0')}`;\n      console.log({\n        month,\n        _year,\n        _month,\n        monthIndex,\n        after,\n        before,\n        afterStr,\n        beforeStr,\n      });\n\n      let limit;\n      if (firstLoad) {\n        limit = LIMIT + 1;\n        searchOffsetRef.current = 0;\n      } else {\n        limit = LIMIT + searchOffsetRef.current + 1;\n        searchOffsetRef.current += LIMIT;\n      }\n\n      const searchResults = await masto.v2.search.fetch({\n        q: `from:${account.acct} after:${afterStr} before:${beforeStr}`,\n        type: 'statuses',\n        limit,\n        offset: searchOffsetRef.current,\n      });\n      if (searchResults?.statuses?.length) {\n        const value = searchResults.statuses.slice(0, LIMIT);\n        value.forEach((item) => {\n          saveStatus(item, instance);\n        });\n        const done = searchResults.statuses.length <= LIMIT;\n        return { value, done };\n      } else {\n        return { value: [], done: true };\n      }\n    }\n\n    const results = [];\n    if (firstLoad) {\n      const { value: pinnedStatuses } = await masto.v1.accounts\n        .$select(id)\n        .statuses.list({\n          pinned: true,\n        })\n        .next();\n      if (pinnedStatuses?.length && !tagged && !media) {\n        pinnedStatuses.forEach((status) => {\n          status._pinned = true;\n          saveStatus(status, instance);\n        });\n        if (pinnedStatuses.length >= 3) {\n          const pinnedStatusesIds = pinnedStatuses.map((status) => status.id);\n          results.push({\n            id: pinnedStatusesIds,\n            items: pinnedStatuses,\n            type: 'pinned',\n          });\n        } else {\n          results.push(...pinnedStatuses);\n        }\n      }\n    }\n    if (firstLoad || !accountStatusesIterator.current) {\n      accountStatusesIterator.current = masto.v1.accounts\n        .$select(id)\n        .statuses.list({\n          limit: LIMIT,\n          exclude_replies: excludeReplies,\n          exclude_reblogs: excludeBoosts,\n          only_media: media,\n          tagged,\n        });\n    }\n    const { value, done } = await accountStatusesIterator.current.next();\n    if (value?.length) {\n      results.push(...value);\n\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      value: results,\n      done,\n    };\n  }\n\n  const [featuredTags, setFeaturedTags] = useState([]);\n  useTitle(\n    account?.acct\n      ? `${account?.displayName ? account.displayName + ' ' : ''}@${\n          account.acct\n        }${\n          !excludeReplies\n            ? ' (+ Replies)'\n            : excludeBoosts\n            ? ' (- Boosts)'\n            : tagged\n            ? ` (#${tagged})`\n            : media\n            ? ' (Media)'\n            : month\n            ? ` (${new Date(month).toLocaleString('default', {\n                month: 'long',\n                year: 'numeric',\n              })})`\n            : ''\n        }`\n      : 'Account posts',\n    '/:instance?/a/:id',\n  );\n\n  const fetchAccountPromiseRef = useRef();\n  const fetchAccount = useCallback(() => {\n    const fetchPromise =\n      fetchAccountPromiseRef.current || masto.v1.accounts.$select(id).fetch();\n    fetchAccountPromiseRef.current = fetchPromise;\n    return fetchPromise;\n  }, [id, masto]);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const acc = await fetchAccount();\n        console.log(acc);\n        setAccount(acc);\n      } catch (e) {\n        console.error(e);\n      }\n      try {\n        const featuredTags = await masto.v1.accounts\n          .$select(id)\n          .featuredTags.list();\n        console.log({ featuredTags });\n        setFeaturedTags(featuredTags);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [id]);\n\n  const { displayName, acct, emojis } = account || {};\n\n  const accountInfoMemo = useMemo(() => {\n    const cachedAccount = snapStates.accounts[`${id}@${instance}`];\n    return (\n      <AccountInfo\n        instance={instance}\n        account={cachedAccount || id}\n        fetchAccount={fetchAccount}\n        authenticated={authenticated}\n        standalone\n      />\n    );\n  }, [id, instance, authenticated, fetchAccount]);\n\n  const filterBarRef = useRef();\n  const TimelineStart = useMemo(() => {\n    const filtered =\n      !excludeReplies || excludeBoosts || tagged || media || !!month;\n\n    return (\n      <>\n        {accountInfoMemo}\n        <div\n          class=\"filter-bar\"\n          ref={filterBarRef}\n          style={{\n            position: 'relative',\n          }}\n        >\n          {filtered ? (\n            <Link\n              to={`/${instance}/a/${id}`}\n              class=\"insignificant filter-clear\"\n              title=\"Clear filters\"\n              key=\"clear-filters\"\n            >\n              <Icon icon=\"x\" size=\"l\" />\n            </Link>\n          ) : (\n            <Icon icon=\"filter\" class=\"insignificant\" size=\"l\" />\n          )}\n          <Link\n            to={`/${instance}/a/${id}${excludeReplies ? '?replies=1' : ''}`}\n            onClick={() => {\n              if (excludeReplies) {\n                showToast('Showing post with replies');\n              }\n            }}\n            class={excludeReplies ? '' : 'is-active'}\n          >\n            + Replies\n          </Link>\n          <Link\n            to={`/${instance}/a/${id}${excludeBoosts ? '' : '?boosts=0'}`}\n            onClick={() => {\n              if (!excludeBoosts) {\n                showToast('Showing posts without boosts');\n              }\n            }}\n            class={!excludeBoosts ? '' : 'is-active'}\n          >\n            - Boosts\n          </Link>\n          <Link\n            to={`/${instance}/a/${id}${media ? '' : '?media=1'}`}\n            onClick={() => {\n              if (!media) {\n                showToast('Showing posts with media');\n              }\n            }}\n            class={media ? 'is-active' : ''}\n          >\n            Media\n          </Link>\n          {featuredTags.map((tag) => (\n            <Link\n              key={tag.id}\n              to={`/${instance}/a/${id}${\n                tagged === tag.name\n                  ? ''\n                  : `?tagged=${encodeURIComponent(tag.name)}`\n              }`}\n              onClick={() => {\n                if (tagged !== tag.name) {\n                  showToast(`Showing posts tagged with #${tag.name}`);\n                }\n              }}\n              class={tagged === tag.name ? 'is-active' : ''}\n            >\n              <span>\n                <span class=\"more-insignificant\">#</span>\n                {tag.name}\n              </span>\n              {\n                // The count differs based on instance 😅\n              }\n              {/* <span class=\"filter-count\">{tag.statusesCount}</span> */}\n            </Link>\n          ))}\n          {searchEnabled &&\n            (supportsInputMonth ? (\n              <label class={`filter-field ${month ? 'is-active' : ''}`}>\n                <Icon icon=\"month\" size=\"l\" />\n                <input\n                  type=\"month\"\n                  disabled={!account?.acct}\n                  value={month || ''}\n                  min={MIN_YEAR_MONTH}\n                  max={new Date().toISOString().slice(0, 7)}\n                  onInput={(e) => {\n                    const { value, validity } = e.currentTarget;\n                    if (!validity.valid) return;\n                    setSearchParams(\n                      value\n                        ? {\n                            month: value,\n                          }\n                        : {},\n                    );\n                    showToast(\n                      `Showing posts in ${new Date(value).toLocaleString(\n                        'default',\n                        {\n                          month: 'long',\n                          year: 'numeric',\n                        },\n                      )}`,\n                    );\n                  }}\n                />\n              </label>\n            ) : (\n              // Fallback to <select> for month and <input type=\"number\"> for year\n              <MonthPicker\n                class={`filter-field ${month ? 'is-active' : ''}`}\n                disabled={!account?.acct}\n                value={month || ''}\n                min={MIN_YEAR_MONTH}\n                max={new Date().toISOString().slice(0, 7)}\n                onInput={(e) => {\n                  const { value, validity } = e;\n                  if (!validity.valid) return;\n                  setSearchParams(\n                    value\n                      ? {\n                          month: value,\n                        }\n                      : {},\n                  );\n                }}\n              />\n            ))}\n        </div>\n      </>\n    );\n  }, [\n    id,\n    instance,\n    authenticated,\n    featuredTags,\n    searchEnabled,\n    ...allSearchParams,\n  ]);\n\n  useEffect(() => {\n    // Focus on .is-active\n    const active = filterBarRef.current?.querySelector('.is-active');\n    if (active) {\n      console.log('active', active, active.offsetLeft);\n      filterBarRef.current.scrollTo({\n        behavior: 'smooth',\n        left:\n          active.offsetLeft -\n          (filterBarRef.current.offsetWidth - active.offsetWidth) / 2,\n      });\n    }\n  }, [featuredTags, searchEnabled, ...allSearchParams]);\n\n  const accountInstance = useMemo(() => {\n    if (!account?.url) return null;\n    const domain = new URL(account.url).hostname;\n    return domain;\n  }, [account]);\n  const sameInstance = instance === accountInstance;\n  const allowSwitch = !!account && !sameInstance;\n\n  return (\n    <Timeline\n      key={id}\n      title={`${account?.acct ? '@' + account.acct : 'Posts'}`}\n      titleComponent={\n        <h1\n          class=\"header-double-lines header-account\"\n          // onClick={() => {\n          //   states.showAccount = {\n          //     account,\n          //     instance,\n          //   };\n          // }}\n        >\n          <b>\n            <EmojiText text={displayName} emojis={emojis} />\n          </b>\n          <div>\n            <span>@{acct}</span>\n          </div>\n        </h1>\n      }\n      id=\"account-statuses\"\n      instance={instance}\n      emptyText=\"Nothing to see here yet.\"\n      errorText=\"Unable to load posts\"\n      fetchItems={fetchAccountStatuses}\n      useItemID\n      view={media ? 'media' : undefined}\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      timelineStart={TimelineStart}\n      refresh={[\n        excludeReplies,\n        excludeBoosts,\n        tagged,\n        media,\n        month + account?.acct,\n      ].toString()}\n      headerEnd={\n        <Menu2\n          portal\n          // setDownOverflow\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          <MenuItem\n            disabled={!allowSwitch}\n            onClick={() => {\n              (async () => {\n                try {\n                  const { masto } = api({\n                    instance: accountInstance,\n                  });\n                  const acc = await masto.v1.accounts.lookup({\n                    acct: account.acct,\n                  });\n                  const { id } = acc;\n                  location.hash = `/${accountInstance}/a/${id}`;\n                } catch (e) {\n                  console.error(e);\n                  alert('Unable to fetch account info');\n                }\n              })();\n            }}\n          >\n            <Icon icon=\"transfer\" />{' '}\n            <small class=\"menu-double-lines\">\n              Switch to account's instance (<b>{accountInstance}</b>)\n            </small>\n          </MenuItem>\n        </Menu2>\n      }\n    />\n  );\n}\n\nfunction MonthPicker(props) {\n  const {\n    class: className,\n    disabled,\n    value,\n    min,\n    max,\n    onInput = () => {},\n  } = props;\n  const [_year, _month] = value?.split('-') || [];\n  const monthFieldRef = useRef();\n  const yearFieldRef = useRef();\n\n  const checkValidity = (month, year) => {\n    const [minYear, minMonth] = min?.split('-') || [];\n    const [maxYear, maxMonth] = max?.split('-') || [];\n    if (year < minYear) return false;\n    if (year > maxYear) return false;\n    if (year === minYear && month < minMonth) return false;\n    if (year === maxYear && month > maxMonth) return false;\n    return true;\n  };\n\n  return (\n    <div class={className}>\n      <Icon icon=\"month\" size=\"l\" />\n      <select\n        ref={monthFieldRef}\n        disabled={disabled}\n        value={_month || ''}\n        onInput={(e) => {\n          const { value: month } = e.currentTarget;\n          const year = yearFieldRef.current.value;\n          if (!checkValidity(month, year))\n            return {\n              value: '',\n              validity: {\n                valid: false,\n              },\n            };\n          onInput({\n            value: month ? `${year}-${month}` : '',\n            validity: {\n              valid: true,\n            },\n          });\n        }}\n      >\n        <option value=\"\">Month</option>\n        <option disabled>-----</option>\n        {Array.from({ length: 12 }, (_, i) => (\n          <option\n            value={\n              // Month is 1-indexed\n              (i + 1).toString().padStart(2, '0')\n            }\n            key={i}\n          >\n            {new Date(0, i).toLocaleString('default', {\n              month: 'long',\n            })}\n          </option>\n        ))}\n      </select>{' '}\n      <input\n        ref={yearFieldRef}\n        type=\"number\"\n        disabled={disabled}\n        value={_year || new Date().getFullYear()}\n        min={min?.slice(0, 4) || MIN_YEAR}\n        max={max?.slice(0, 4) || new Date().getFullYear()}\n        onInput={(e) => {\n          const { value: year, validity } = e.currentTarget;\n          const month = monthFieldRef.current.value;\n          if (!validity.valid || !checkValidity(month, year))\n            return {\n              value: '',\n              validity: {\n                valid: false,\n              },\n            };\n          onInput({\n            value: year ? `${year}-${month}` : '',\n            validity: {\n              valid: true,\n            },\n          });\n        }}\n        style={{\n          width: '4.5em',\n        }}\n      />\n    </div>\n  );\n}\n\nexport default AccountStatuses;\n","import { useRef } from 'preact/hooks';\n\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Bookmarks() {\n  useTitle('Bookmarks', '/b');\n  const { masto, instance } = api();\n  const bookmarksIterator = useRef();\n  async function fetchBookmarks(firstLoad) {\n    if (firstLoad || !bookmarksIterator.current) {\n      bookmarksIterator.current = masto.v1.bookmarks.list({ limit: LIMIT });\n    }\n    return await bookmarksIterator.current.next();\n  }\n\n  return (\n    <Timeline\n      title=\"Bookmarks\"\n      id=\"bookmarks\"\n      emptyText=\"No bookmarks yet. Go bookmark something!\"\n      errorText=\"Unable to load bookmarks\"\n      instance={instance}\n      fetchItems={fetchBookmarks}\n    />\n  );\n}\n\nexport default Bookmarks;\n","import { useRef } from 'preact/hooks';\n\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Favourites() {\n  useTitle('Likes', '/f');\n  const { masto, instance } = api();\n  const favouritesIterator = useRef();\n  async function fetchFavourites(firstLoad) {\n    if (firstLoad || !favouritesIterator.current) {\n      favouritesIterator.current = masto.v1.favourites.list({ limit: LIMIT });\n    }\n    return await favouritesIterator.current.next();\n  }\n\n  return (\n    <Timeline\n      title=\"Likes\"\n      id=\"favourites\"\n      emptyText=\"No likes yet. Go like something!\"\n      errorText=\"Unable to load likes\"\n      instance={instance}\n      fetchItems={fetchFavourites}\n    />\n  );\n}\n\nexport default Favourites;\n","import { useEffect, useState } from 'preact/hooks';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport NavMenu from '../components/nav-menu';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 200;\n\nfunction FollowedHashtags() {\n  const { masto, instance } = api();\n  useTitle(`Followed Hashtags`, `/ft`);\n  const [uiState, setUIState] = useState('default');\n\n  const [followedHashtags, setFollowedHashtags] = useState([]);\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const iterator = masto.v1.followedTags.list({\n          limit: LIMIT,\n        });\n        const tags = [];\n        do {\n          const { value, done } = await iterator.next();\n          if (done || value?.length === 0) break;\n          tags.push(...value);\n        } while (true);\n        tags.sort((a, b) => a.name.localeCompare(b.name));\n        console.log(tags);\n        setFollowedHashtags(tags);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, []);\n\n  return (\n    <div id=\"followed-hashtags-page\" class=\"deck-container\" tabIndex=\"-1\">\n      <div class=\"timeline-deck deck\">\n        <header>\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n              <Link to=\"/\" class=\"button plain\">\n                <Icon icon=\"home\" size=\"l\" />\n              </Link>\n            </div>\n            <h1>Followed Hashtags</h1>\n            <div class=\"header-side\" />\n          </div>\n        </header>\n        <main>\n          {followedHashtags.length > 0 ? (\n            <ul class=\"link-list\">\n              {followedHashtags.map((tag) => (\n                <li>\n                  <Link\n                    to={\n                      instance ? `/${instance}/t/${tag.name}` : `/t/${tag.name}`\n                    }\n                  >\n                    <Icon icon=\"hashtag\" /> <span>{tag.name}</span>\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          ) : uiState === 'loading' ? (\n            <p class=\"ui-state\">\n              <Loader abrupt />\n            </p>\n          ) : uiState === 'error' ? (\n            <p class=\"ui-state\">Unable to load followed hashtags.</p>\n          ) : (\n            <p class=\"ui-state\">No hashtags followed yet.</p>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default FollowedHashtags;\n","import store from './store';\n\nexport function filteredItem(item, filterContext, currentAccountID) {\n  const { filtered } = item;\n  if (!filtered?.length) return true;\n  const isSelf = currentAccountID && item.account?.id === currentAccountID;\n  if (isSelf) return true;\n  const appliedFilters = filtered.filter((f) => {\n    const { filter } = f;\n    const hasContext = filter.context.includes(filterContext);\n    if (!hasContext) return false;\n    if (!filter.expiresAt) return hasContext;\n    return new Date(filter.expiresAt) > new Date();\n  });\n  if (!appliedFilters.length) return true;\n  const isHidden = appliedFilters.some((f) => f.filter.filterAction === 'hide');\n  console.log({ isHidden, filtered, appliedFilters, item });\n  if (isHidden) return false;\n  const isWarn = appliedFilters.some((f) => f.filter.filterAction === 'warn');\n  if (isWarn) {\n    const filterTitles = appliedFilters.map((f) => f.filter.title);\n    item._filtered = {\n      titles: filterTitles,\n      titlesStr: filterTitles.join(' • '),\n    };\n  }\n  return isWarn;\n}\nexport function filteredItems(items, filterContext) {\n  if (!items?.length) return [];\n  if (!filterContext) return items;\n  const currentAccountID = store.session.get('currentAccount');\n  return items.filter((item) =>\n    filteredItem(item, filterContext, currentAccountID),\n  );\n}\n","import { useEffect, useRef } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { filteredItems } from '../utils/filters';\nimport states from '../utils/states';\nimport { getStatus, saveStatus } from '../utils/states';\nimport { dedupeBoosts } from '../utils/timeline-utils';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Following({ title, path, id, ...props }) {\n  useTitle(title || 'Following', path || '/following');\n  const { masto, streaming, instance } = api();\n  const snapStates = useSnapshot(states);\n  const homeIterator = useRef();\n  const latestItem = useRef();\n\n  console.debug('RENDER Following', title, id);\n\n  async function fetchHome(firstLoad) {\n    if (firstLoad || !homeIterator.current) {\n      homeIterator.current = masto.v1.timelines.home.list({ limit: LIMIT });\n    }\n    const results = await homeIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n        console.log('First load', latestItem.current);\n      }\n\n      value = filteredItems(value, 'home');\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n      value = dedupeBoosts(value, instance);\n\n      // ENFORCE sort by datetime (Latest first)\n      value.sort((a, b) => {\n        const aDate = new Date(a.createdAt);\n        const bDate = new Date(b.createdAt);\n        return bDate - aDate;\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines.home\n        .list({\n          limit: 5,\n          since_id: latestItem.current,\n        })\n        .next();\n      let { value } = results;\n      console.log('checkForUpdates', latestItem.current, value);\n      if (value?.length) {\n        latestItem.current = value[0].id;\n        value = dedupeBoosts(value, instance);\n        value = filteredItems(value, 'home');\n        if (value.some((item) => !item.reblog)) {\n          return true;\n        }\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  useEffect(() => {\n    let sub;\n    (async () => {\n      if (streaming) {\n        sub = streaming.user.subscribe();\n        console.log('🎏 Streaming user', sub);\n        for await (const entry of sub) {\n          if (!sub) break;\n          if (entry.event === 'status.update') {\n            const status = entry.payload;\n            console.log(`🔄 Status ${status.id} updated`);\n            saveStatus(status, instance);\n          } else if (entry.event === 'delete') {\n            const statusID = entry.payload;\n            console.log(`❌ Status ${statusID} deleted`);\n            // delete states.statuses[statusID];\n            const s = getStatus(statusID, instance);\n            if (s) s._deleted = true;\n          }\n        }\n      }\n    })();\n    return () => {\n      sub?.unsubscribe?.();\n      sub = null;\n    };\n  }, [streaming]);\n\n  return (\n    <Timeline\n      title={title || 'Following'}\n      id={id || 'following'}\n      emptyText=\"Nothing to see here.\"\n      errorText=\"Unable to load posts.\"\n      instance={instance}\n      fetchItems={fetchHome}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      {...props}\n      allowFilters\n    />\n  );\n}\n\nexport default Following;\n","import {\n  FocusableItem,\n  MenuDivider,\n  MenuGroup,\n  MenuHeader,\n  MenuItem,\n} from '@szhsin/react-menu';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useNavigate, useParams, useSearchParams } from 'react-router-dom';\n\nimport Icon from '../components/icon';\nimport Menu2 from '../components/menu2';\nimport MenuConfirm from '../components/menu-confirm';\nimport { SHORTCUTS_LIMIT } from '../components/shortcuts-settings';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\n// Limit is 4 per \"mode\"\n// https://github.com/mastodon/mastodon/issues/15194\n// Hard-coded https://github.com/mastodon/mastodon/blob/19614ba2477f3d12468f5ec251ce1cc5f8c6210c/app/models/tag_feed.rb#L4\nconst TAGS_LIMIT_PER_MODE = 4;\nconst TOTAL_TAGS_LIMIT = TAGS_LIMIT_PER_MODE + 1;\n\nfunction Hashtags({ media: mediaView, columnMode, ...props }) {\n  // const navigate = useNavigate();\n  let { hashtag, ...params } = columnMode ? {} : useParams();\n  if (props.hashtag) hashtag = props.hashtag;\n  let hashtags = hashtag.trim().split(/[\\s+]+/);\n  hashtags.sort();\n  hashtag = hashtags[0];\n  const [searchParams, setSearchParams] = useSearchParams();\n  const media = mediaView || !!searchParams.get('media');\n  const linkParams = media ? '?media=1' : '';\n\n  const { masto, instance, authenticated } = api({\n    instance: props?.instance || params.instance,\n  });\n  const { authenticated: currentAuthenticated } = api();\n  const hashtagTitle = hashtags.map((t) => `#${t}`).join(' ');\n  const hashtagPostTitle = media ? ` (Media only)` : '';\n  const title = instance\n    ? `${hashtagTitle}${hashtagPostTitle} on ${instance}`\n    : `${hashtagTitle}${hashtagPostTitle}`;\n  useTitle(title, `/:instance?/t/:hashtag`);\n  const latestItem = useRef();\n\n  // const hashtagsIterator = useRef();\n  const maxID = useRef(undefined);\n  async function fetchHashtags(firstLoad) {\n    // if (firstLoad || !hashtagsIterator.current) {\n    //   hashtagsIterator.current = masto.v1.timelines.tag.$select(hashtag).list({\n    //     limit: LIMIT,\n    //     any: hashtags.slice(1),\n    //   });\n    // }\n    // const results = await hashtagsIterator.current.next();\n\n    // NOTE: Temporary fix for listHashtag not persisting `any` in subsequent calls.\n    const results = await masto.v1.timelines.tag\n      .$select(hashtag)\n      .list({\n        limit: LIMIT,\n        any: hashtags.slice(1),\n        maxId: firstLoad ? undefined : maxID.current,\n        onlyMedia: media,\n      })\n      .next();\n    const { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      value.forEach((item) => {\n        saveStatus(item, instance, {\n          skipThreading: media, // If media view, no need to form threads\n        });\n      });\n\n      maxID.current = value[value.length - 1].id;\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines.tag\n        .$select(hashtag)\n        .list({\n          limit: 1,\n          any: hashtags.slice(1),\n          since_id: latestItem.current,\n          onlyMedia: media,\n        })\n        .next();\n      const { value } = results;\n      if (value?.length) {\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  const [followUIState, setFollowUIState] = useState('default');\n  const [info, setInfo] = useState();\n  // Get hashtag info\n  useEffect(() => {\n    (async () => {\n      try {\n        const info = await masto.v1.tags.$select(hashtag).fetch();\n        console.log(info);\n        setInfo(info);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [hashtag]);\n\n  const reachLimit = hashtags.length >= TOTAL_TAGS_LIMIT;\n\n  return (\n    <Timeline\n      key={instance + hashtagTitle}\n      title={title}\n      titleComponent={\n        !!instance && (\n          <h1 class=\"header-double-lines\">\n            <b>{hashtagTitle}</b>\n            <div>{instance}</div>\n          </h1>\n        )\n      }\n      id=\"hashtag\"\n      instance={instance}\n      emptyText=\"No one has posted anything with this tag yet.\"\n      errorText=\"Unable to load posts with this tag\"\n      fetchItems={fetchHashtags}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      view={media ? 'media' : undefined}\n      refresh={media}\n      headerEnd={\n        <Menu2\n          portal\n          setDownOverflow\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          {!!info && hashtags.length === 1 && (\n            <>\n              <MenuConfirm\n                subMenu\n                confirm={info.following}\n                confirmLabel={`Unfollow #${hashtag}?`}\n                disabled={followUIState === 'loading' || !authenticated}\n                onClick={() => {\n                  setFollowUIState('loading');\n                  if (info.following) {\n                    // const yes = confirm(`Unfollow #${hashtag}?`);\n                    // if (!yes) {\n                    //   setFollowUIState('default');\n                    //   return;\n                    // }\n                    masto.v1.tags\n                      .$select(hashtag)\n                      .unfollow()\n                      .then(() => {\n                        setInfo({ ...info, following: false });\n                        showToast(`Unfollowed #${hashtag}`);\n                      })\n                      .catch((e) => {\n                        alert(e);\n                        console.error(e);\n                      })\n                      .finally(() => {\n                        setFollowUIState('default');\n                      });\n                  } else {\n                    masto.v1.tags\n                      .$select(hashtag)\n                      .follow()\n                      .then(() => {\n                        setInfo({ ...info, following: true });\n                        showToast(`Followed #${hashtag}`);\n                      })\n                      .catch((e) => {\n                        alert(e);\n                        console.error(e);\n                      })\n                      .finally(() => {\n                        setFollowUIState('default');\n                      });\n                  }\n                }}\n              >\n                {info.following ? (\n                  <>\n                    <Icon icon=\"check-circle\" /> <span>Following…</span>\n                  </>\n                ) : (\n                  <>\n                    <Icon icon=\"plus\" /> <span>Follow</span>\n                  </>\n                )}\n              </MenuConfirm>\n              <MenuDivider />\n            </>\n          )}\n          <MenuHeader className=\"plain\">Filters</MenuHeader>\n          <MenuItem\n            type=\"checkbox\"\n            checked={!!media}\n            onClick={() => {\n              if (media) {\n                searchParams.delete('media');\n              } else {\n                searchParams.set('media', '1');\n              }\n              setSearchParams(searchParams);\n            }}\n          >\n            <Icon icon=\"check-circle\" />{' '}\n            <span class=\"menu-grow\">Media only</span>\n          </MenuItem>\n          <MenuDivider />\n          <FocusableItem className=\"menu-field\" disabled={reachLimit}>\n            {({ ref }) => (\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  const newHashtag = e.target[0].value?.trim?.();\n                  // Use includes but need to be case insensitive\n                  if (\n                    newHashtag &&\n                    !hashtags.some(\n                      (t) => t.toLowerCase() === newHashtag.toLowerCase(),\n                    )\n                  ) {\n                    hashtags.push(newHashtag);\n                    hashtags.sort();\n                    // navigate(\n                    //   instance\n                    //     ? `/${instance}/t/${hashtags.join('+')}`\n                    //     : `/t/${hashtags.join('+')}`,\n                    // );\n                    location.hash = instance\n                      ? `/${instance}/t/${hashtags.join('+')}`\n                      : `/t/${hashtags.join('+')}${linkParams}`;\n                  }\n                }}\n              >\n                <Icon icon=\"hashtag\" />\n                <input\n                  ref={ref}\n                  type=\"text\"\n                  placeholder={\n                    reachLimit ? `Max ${TOTAL_TAGS_LIMIT} tags` : 'Add hashtag'\n                  }\n                  required\n                  autocorrect=\"off\"\n                  autocapitalize=\"off\"\n                  spellcheck={false}\n                  // no spaces, no hashtags\n                  pattern=\"[^#][^\\s#]+[^#]\"\n                  disabled={reachLimit}\n                />\n              </form>\n            )}\n          </FocusableItem>\n          <MenuGroup takeOverflow>\n            {hashtags.map((t, i) => (\n              <MenuItem\n                key={t}\n                disabled={hashtags.length === 1}\n                onClick={(e) => {\n                  hashtags.splice(i, 1);\n                  hashtags.sort();\n                  // navigate(\n                  //   instance\n                  //     ? `/${instance}/t/${hashtags.join('+')}`\n                  //     : `/t/${hashtags.join('+')}`,\n                  // );\n                  location.hash = instance\n                    ? `/${instance}/t/${hashtags.join('+')}${linkParams}`\n                    : `/t/${hashtags.join('+')}${linkParams}`;\n                }}\n              >\n                <Icon icon=\"x\" alt=\"Remove hashtag\" class=\"danger-icon\" />\n                <span>\n                  <span class=\"more-insignificant\">#</span>\n                  {t}\n                </span>\n              </MenuItem>\n            ))}\n          </MenuGroup>\n          <MenuDivider />\n          <MenuItem\n            disabled={!currentAuthenticated}\n            onClick={() => {\n              if (states.shortcuts.length >= SHORTCUTS_LIMIT) {\n                alert(\n                  `Max ${SHORTCUTS_LIMIT} shortcuts reached. Unable to add shortcut.`,\n                );\n                return;\n              }\n              const shortcut = {\n                type: 'hashtag',\n                hashtag: hashtags.join(' '),\n                instance,\n                media: media ? 'on' : undefined,\n              };\n              // Check if already exists\n              const exists = states.shortcuts.some(\n                (s) =>\n                  s.type === shortcut.type &&\n                  s.hashtag\n                    .split(/[\\s+]+/)\n                    .sort()\n                    .join(' ') ===\n                    shortcut.hashtag\n                      .split(/[\\s+]+/)\n                      .sort()\n                      .join(' ') &&\n                  (s.instance ? s.instance === shortcut.instance : true) &&\n                  (s.media ? !!s.media === !!shortcut.media : true),\n              );\n              if (exists) {\n                alert('This shortcut already exists');\n              } else {\n                states.shortcuts.push(shortcut);\n                showToast(`Hashtag shortcut added`);\n              }\n            }}\n          >\n            <Icon icon=\"shortcut\" /> <span>Add to Shorcuts</span>\n          </MenuItem>\n          <MenuItem\n            onClick={() => {\n              let newInstance = prompt(\n                'Enter a new instance e.g. \"mastodon.social\"',\n              );\n              if (!/\\./.test(newInstance)) {\n                if (newInstance) alert('Invalid instance');\n                return;\n              }\n              if (newInstance) {\n                newInstance = newInstance.toLowerCase().trim();\n                // navigate(`/${newInstance}/t/${hashtags.join('+')}`);\n                location.hash = `/${newInstance}/t/${hashtags.join(\n                  '+',\n                )}${linkParams}`;\n              }\n            }}\n          >\n            <Icon icon=\"bus\" /> <span>Go to another instance…</span>\n          </MenuItem>\n        </Menu2>\n      }\n    />\n  );\n}\n\nexport default Hashtags;\n","import './lists.css';\n\nimport { Menu, MenuItem } from '@szhsin/react-menu';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { InView } from 'react-intersection-observer';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport AccountBlock from '../components/account-block';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport ListAddEdit from '../components/list-add-edit';\nimport Menu2 from '../components/menu2';\nimport MenuConfirm from '../components/menu-confirm';\nimport Modal from '../components/modal';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { filteredItems } from '../utils/filters';\nimport states, { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction List(props) {\n  const snapStates = useSnapshot(states);\n  const { masto, instance } = api();\n  const id = props?.id || useParams()?.id;\n  // const navigate = useNavigate();\n  const latestItem = useRef();\n  // const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n\n  const listIterator = useRef();\n  async function fetchList(firstLoad) {\n    if (firstLoad || !listIterator.current) {\n      listIterator.current = masto.v1.timelines.list.$select(id).list({\n        limit: LIMIT,\n      });\n    }\n    const results = await listIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      value = filteredItems(value, 'home');\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines.list.$select(id).list({\n        limit: 1,\n        since_id: latestItem.current,\n      });\n      let { value } = results;\n      value = filteredItems(value, 'home');\n      if (value?.length) {\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  const [list, setList] = useState({ title: 'List' });\n  // const [title, setTitle] = useState(`List`);\n  useTitle(list.title, `/l/:id`);\n  useEffect(() => {\n    (async () => {\n      try {\n        const list = await masto.v1.lists.$select(id).fetch();\n        setList(list);\n        // setTitle(list.title);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [id]);\n\n  const [showListAddEditModal, setShowListAddEditModal] = useState(false);\n  const [showManageMembersModal, setShowManageMembersModal] = useState(false);\n\n  return (\n    <>\n      <Timeline\n        key={id}\n        title={list.title}\n        id=\"list\"\n        emptyText=\"Nothing yet.\"\n        errorText=\"Unable to load posts.\"\n        instance={instance}\n        fetchItems={fetchList}\n        checkForUpdates={checkForUpdates}\n        useItemID\n        boostsCarousel={snapStates.settings.boostsCarousel}\n        allowFilters\n        // refresh={reloadCount}\n        headerStart={\n          <Link to=\"/l\" class=\"button plain\">\n            <Icon icon=\"list\" size=\"l\" />\n          </Link>\n        }\n        headerEnd={\n          <Menu2\n            portal\n            setDownOverflow\n            overflow=\"auto\"\n            viewScroll=\"close\"\n            position=\"anchor\"\n            menuButton={\n              <button type=\"button\" class=\"plain\">\n                <Icon icon=\"more\" size=\"l\" />\n              </button>\n            }\n          >\n            <MenuItem\n              onClick={() =>\n                setShowListAddEditModal({\n                  list,\n                })\n              }\n            >\n              <Icon icon=\"pencil\" size=\"l\" />\n              <span>Edit</span>\n            </MenuItem>\n            <MenuItem onClick={() => setShowManageMembersModal(true)}>\n              <Icon icon=\"group\" size=\"l\" />\n              <span>Manage members</span>\n            </MenuItem>\n          </Menu2>\n        }\n      />\n      {showListAddEditModal && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowListAddEditModal(false);\n            }\n          }}\n        >\n          <ListAddEdit\n            list={showListAddEditModal?.list}\n            onClose={(result) => {\n              if (result.state === 'success' && result.list) {\n                setList(result.list);\n                // reload();\n              } else if (result.state === 'deleted') {\n                // navigate('/l');\n                location.hash = '/l';\n              }\n              setShowListAddEditModal(false);\n            }}\n          />\n        </Modal>\n      )}\n      {showManageMembersModal && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowManageMembersModal(false);\n            }\n          }}\n        >\n          <ListManageMembers\n            listID={id}\n            onClose={() => setShowManageMembersModal(false)}\n          />\n        </Modal>\n      )}\n    </>\n  );\n}\n\nconst MEMBERS_LIMIT = 40;\nfunction ListManageMembers({ listID, onClose }) {\n  // Show list of members with [Remove] button\n  // API only returns 40 members at a time, so this need to be paginated with infinite scroll\n  // Show [Add] button after removing a member\n  const { masto, instance } = api();\n  const [members, setMembers] = useState([]);\n  const [uiState, setUIState] = useState('default');\n  const [showMore, setShowMore] = useState(false);\n\n  const membersIterator = useRef();\n\n  async function fetchMembers(firstLoad) {\n    setShowMore(false);\n    setUIState('loading');\n    (async () => {\n      try {\n        if (firstLoad || !membersIterator.current) {\n          membersIterator.current = masto.v1.lists\n            .$select(listID)\n            .accounts.list({\n              limit: MEMBERS_LIMIT,\n            });\n        }\n        const results = await membersIterator.current.next();\n        let { done, value } = results;\n        if (value?.length) {\n          if (firstLoad) {\n            setMembers(value);\n          } else {\n            setMembers(members.concat(value));\n          }\n          setShowMore(!done);\n        } else {\n          setShowMore(false);\n        }\n        setUIState('default');\n      } catch (e) {\n        setUIState('error');\n      }\n    })();\n  }\n\n  useEffect(() => {\n    fetchMembers(true);\n  }, []);\n\n  return (\n    <div class=\"sheet\" id=\"list-manage-members-container\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Manage members</h2>\n      </header>\n      <main>\n        <ul>\n          {members.map((member) => (\n            <li key={member.id}>\n              <AccountBlock account={member} instance={instance} />\n              <RemoveAddButton account={member} listID={listID} />\n            </li>\n          ))}\n          {showMore && uiState === 'default' && (\n            <InView as=\"li\" onChange={(inView) => inView && fetchMembers()}>\n              <button type=\"button\" class=\"light block\" onClick={fetchMembers}>\n                Show more&hellip;\n              </button>\n            </InView>\n          )}\n        </ul>\n      </main>\n    </div>\n  );\n}\n\nfunction RemoveAddButton({ account, listID }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [removed, setRemoved] = useState(false);\n\n  return (\n    <MenuConfirm\n      confirm={!removed}\n      confirmLabel={<span>Remove @{account.username} from list?</span>}\n      align=\"end\"\n      menuItemClassName=\"danger\"\n      onClick={() => {\n        if (removed) {\n          setUIState('loading');\n          (async () => {\n            try {\n              await masto.v1.lists.$select(listID).accounts.create({\n                accountIds: [account.id],\n              });\n              setUIState('default');\n              setRemoved(false);\n            } catch (e) {\n              setUIState('error');\n            }\n          })();\n        } else {\n          // const yes = confirm(`Remove ${account.username} from this list?`);\n          // if (!yes) return;\n          setUIState('loading');\n\n          (async () => {\n            try {\n              await masto.v1.lists.$select(listID).accounts.remove({\n                accountIds: [account.id],\n              });\n              setUIState('default');\n              setRemoved(true);\n            } catch (e) {\n              setUIState('error');\n            }\n          })();\n        }\n      }}\n    >\n      <button\n        type=\"button\"\n        class={`light ${removed ? '' : 'danger'}`}\n        disabled={uiState === 'loading'}\n      >\n        {removed ? 'Add' : 'Remove…'}\n      </button>\n    </MenuConfirm>\n  );\n}\n\nexport default List;\n","import { useMemo, useRef, useState } from 'preact/hooks';\nimport { useSearchParams } from 'react-router-dom';\n\nimport Link from '../components/link';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\nconst emptySearchParams = new URLSearchParams();\n\nfunction Mentions({ columnMode, ...props }) {\n  const { masto, instance } = api();\n  const [searchParams] = columnMode ? [emptySearchParams] : useSearchParams();\n  const [stateType, setStateType] = useState(null);\n  const type = props?.type || searchParams.get('type') || stateType;\n  useTitle(`Mentions${type === 'private' ? ' (Private)' : ''}`, '/mentions');\n\n  const mentionsIterator = useRef();\n  const latestItem = useRef();\n\n  async function fetchMentions(firstLoad) {\n    if (firstLoad || !mentionsIterator.current) {\n      mentionsIterator.current = masto.v1.notifications.list({\n        limit: LIMIT,\n        types: ['mention'],\n      });\n    }\n    const results = await mentionsIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n        console.log('First load', latestItem.current);\n      }\n\n      value.forEach(({ status: item }) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value: value?.map((item) => item.status),\n    };\n  }\n\n  const conversationsIterator = useRef();\n  const latestConversationItem = useRef();\n  async function fetchConversations(firstLoad) {\n    if (firstLoad || !conversationsIterator.current) {\n      conversationsIterator.current = masto.v1.conversations.list({\n        limit: LIMIT,\n      });\n    }\n    const results = await conversationsIterator.current.next();\n    let { value } = results;\n    value = value?.filter((item) => item.lastStatus);\n    if (value?.length) {\n      if (firstLoad) {\n        latestConversationItem.current = value[0].lastStatus.id;\n        console.log('First load', latestConversationItem.current);\n      }\n\n      value.forEach(({ lastStatus: item }) => {\n        saveStatus(item, instance);\n      });\n    }\n    console.log('results', results);\n    return {\n      ...results,\n      value: value?.map((item) => item.lastStatus),\n    };\n  }\n\n  function fetchItems(...args) {\n    if (type === 'private') {\n      return fetchConversations(...args);\n    }\n    return fetchMentions(...args);\n  }\n\n  async function checkForUpdates() {\n    if (type === 'private') {\n      try {\n        const results = await masto.v1.conversations\n          .list({\n            limit: 1,\n            since_id: latestConversationItem.current,\n          })\n          .next();\n        let { value } = results;\n        console.log(\n          'checkForUpdates PRIVATE',\n          latestConversationItem.current,\n          value,\n        );\n        if (value?.length) {\n          latestConversationItem.current = value[0].lastStatus.id;\n          return true;\n        }\n        return false;\n      } catch (e) {\n        return false;\n      }\n    } else {\n      try {\n        const results = await masto.v1.notifications\n          .list({\n            limit: 1,\n            types: ['mention'],\n            since_id: latestItem.current,\n          })\n          .next();\n        let { value } = results;\n        console.log('checkForUpdates ALL', latestItem.current, value);\n        if (value?.length) {\n          latestItem.current = value[0].id;\n          return true;\n        }\n        return false;\n      } catch (e) {\n        return false;\n      }\n    }\n  }\n\n  const TimelineStart = useMemo(() => {\n    return (\n      <div class=\"filter-bar centered\">\n        <Link\n          to=\"/mentions\"\n          class={!type ? 'is-active' : ''}\n          onClick={(e) => {\n            if (columnMode) {\n              e.preventDefault();\n              setStateType(null);\n            }\n          }}\n        >\n          All\n        </Link>\n        <Link\n          to=\"/mentions?type=private\"\n          class={type === 'private' ? 'is-active' : ''}\n          onClick={(e) => {\n            if (columnMode) {\n              e.preventDefault();\n              setStateType('private');\n            }\n          }}\n        >\n          Private\n        </Link>\n      </div>\n    );\n  }, [type]);\n\n  return (\n    <Timeline\n      title=\"Mentions\"\n      id=\"mentions\"\n      emptyText=\"No one mentioned you :(\"\n      errorText=\"Unable to load mentions.\"\n      instance={instance}\n      fetchItems={fetchItems}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      timelineStart={TimelineStart}\n      refresh={type}\n    />\n  );\n}\n\nexport default Mentions;\n","// This is like very lame \"type-checking\" lol\nconst notificationTypeKeys = {\n  mention: ['account', 'status'],\n  status: ['account', 'status'],\n  reblog: ['account', 'status'],\n  follow: ['account'],\n  follow_request: ['account'],\n  favourite: ['account', 'status'],\n  poll: ['status'],\n  update: ['status'],\n};\nfunction fixNotifications(notifications) {\n  return notifications.filter((notification) => {\n    const { type, id, createdAt } = notification;\n    if (!type) {\n      console.warn('Notification missing type', notification);\n      return false;\n    }\n    if (!id || !createdAt) {\n      console.warn('Notification missing id or createdAt', notification);\n      // Continue processing this despite missing id or createdAt\n    }\n    const keys = notificationTypeKeys[type];\n    if (keys?.length) {\n      return keys.every((key) => !!notification[key]);\n    }\n    return true; // skip other types\n  });\n}\n\nfunction groupNotifications(notifications) {\n  // Filter out invalid notifications\n  notifications = fixNotifications(notifications);\n\n  // Create new flat list of notifications\n  // Combine sibling notifications based on type and status id\n  // Concat all notification.account into an array of _accounts\n  const notificationsMap = {};\n  const cleanNotifications = [];\n  for (let i = 0, j = 0; i < notifications.length; i++) {\n    const notification = notifications[i];\n    const { id, status, account, type, createdAt } = notification;\n    const date = createdAt ? new Date(createdAt).toLocaleDateString() : '';\n    let virtualType = type;\n    if (type === 'favourite' || type === 'reblog') {\n      virtualType = 'favourite+reblog';\n    }\n    const key = `${status?.id}-${virtualType}-${date}`;\n    const mappedNotification = notificationsMap[key];\n    if (virtualType === 'follow_request') {\n      cleanNotifications[j++] = notification;\n    } else if (mappedNotification?.account) {\n      const mappedAccount = mappedNotification._accounts.find(\n        (a) => a.id === account.id,\n      );\n      if (mappedAccount) {\n        mappedAccount._types.push(type);\n        mappedAccount._types.sort().reverse();\n        mappedNotification.id += `-${id}`;\n      } else {\n        account._types = [type];\n        mappedNotification._accounts.push(account);\n        mappedNotification.id += `-${id}`;\n      }\n    } else {\n      account._types = [type];\n      let n = (notificationsMap[key] = {\n        ...notification,\n        type: virtualType,\n        _accounts: [account],\n      });\n      cleanNotifications[j++] = n;\n    }\n  }\n\n  // 2nd pass to group \"favourite+reblog\"-type notifications by account if _accounts.length <= 1\n  // This means one acount has favourited and reblogged the multiple statuses\n  // The grouped notification\n  // - type: \"favourite+reblog+account\"\n  // - _statuses: [status, status, ...]\n  const notificationsMap2 = {};\n  const cleanNotifications2 = [];\n  for (let i = 0, j = 0; i < cleanNotifications.length; i++) {\n    const notification = cleanNotifications[i];\n    const { id, account, _accounts, type, createdAt } = notification;\n    const date = createdAt ? new Date(createdAt).toLocaleDateString() : '';\n    if (type === 'favourite+reblog' && account && _accounts.length === 1) {\n      const key = `${account?.id}-${type}-${date}`;\n      const mappedNotification = notificationsMap2[key];\n      if (mappedNotification) {\n        mappedNotification._statuses.push(notification.status);\n        mappedNotification.id += `-${id}`;\n      } else {\n        let n = (notificationsMap2[key] = {\n          ...notification,\n          type,\n          _statuses: [notification.status],\n        });\n        cleanNotifications2[j++] = n;\n      }\n    } else {\n      cleanNotifications2[j++] = notification;\n    }\n  }\n\n  console.log({ notifications, cleanNotifications, cleanNotifications2 });\n\n  // return cleanNotifications;\n  return cleanNotifications2;\n}\n\nexport default groupNotifications;\n","import './notifications.css';\n\nimport { Fragment } from 'preact';\nimport { memo } from 'preact/compat';\nimport { useCallback, useEffect, useRef, useState } from 'preact/hooks';\nimport { InView } from 'react-intersection-observer';\nimport { useSearchParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\nimport { subscribeKey } from 'valtio/utils';\n\nimport AccountBlock from '../components/account-block';\nimport FollowRequestButtons from '../components/follow-request-buttons';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport NavMenu from '../components/nav-menu';\nimport Notification from '../components/notification';\nimport { api } from '../utils/api';\nimport enhanceContent from '../utils/enhance-content';\nimport groupNotifications from '../utils/group-notifications';\nimport handleContentLinks from '../utils/handle-content-links';\nimport niceDateTime from '../utils/nice-date-time';\nimport { getRegistration } from '../utils/push-notifications';\nimport shortenNumber from '../utils/shorten-number';\nimport states, { saveStatus } from '../utils/states';\nimport { getCurrentInstance } from '../utils/store-utils';\nimport usePageVisibility from '../utils/usePageVisibility';\nimport useScroll from '../utils/useScroll';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 30; // 30 is the maximum limit :(\nconst emptySearchParams = new URLSearchParams();\n\nfunction Notifications({ columnMode }) {\n  useTitle('Notifications', '/notifications');\n  const { masto, instance } = api();\n  const snapStates = useSnapshot(states);\n  const [uiState, setUIState] = useState('default');\n  const [searchParams] = columnMode ? [emptySearchParams] : useSearchParams();\n  const notificationID = searchParams.get('id');\n  const notificationAccessToken = searchParams.get('access_token');\n  const [showMore, setShowMore] = useState(false);\n  const [onlyMentions, setOnlyMentions] = useState(false);\n  const scrollableRef = useRef();\n  const { nearReachEnd, scrollDirection, reachStart, nearReachStart } =\n    useScroll({\n      scrollableRef,\n    });\n  const hiddenUI = scrollDirection === 'end' && !nearReachStart;\n  const [followRequests, setFollowRequests] = useState([]);\n  const [announcements, setAnnouncements] = useState([]);\n\n  console.debug('RENDER Notifications');\n\n  const notificationsIterator = useRef();\n  async function fetchNotifications(firstLoad) {\n    states.notificationsShowNew = false; // Hide \"new notifications\" button early\n\n    if (firstLoad || !notificationsIterator.current) {\n      // Reset iterator\n      notificationsIterator.current = masto.v1.notifications.list({\n        limit: LIMIT,\n        excludeTypes: ['follow_request'],\n      });\n    }\n    const allNotifications = await notificationsIterator.current.next();\n    const notifications = allNotifications.value;\n\n    if (notifications?.length) {\n      notifications.forEach((notification) => {\n        saveStatus(notification.status, instance, {\n          skipThreading: true,\n        });\n      });\n\n      const groupedNotifications = groupNotifications(notifications);\n\n      if (firstLoad) {\n        states.notificationsLast = notifications[0];\n        states.notifications = groupedNotifications;\n\n        // Update last read marker\n        masto.v1.markers\n          .create({\n            notifications: {\n              lastReadId: notifications[0].id,\n            },\n          })\n          .catch(() => {});\n      } else {\n        states.notifications.push(...groupedNotifications);\n      }\n    }\n\n    states.notificationsLastFetchTime = Date.now();\n    return allNotifications;\n  }\n\n  async function fetchFollowRequests() {\n    // Note: no pagination here yet because this better be on a separate page. Should be rare use-case???\n    try {\n      return await masto.v1.followRequests.list({\n        limit: 80,\n      });\n    } catch (e) {\n      // Silently fail\n      return [];\n    }\n  }\n\n  const loadFollowRequests = () => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const requests = await fetchFollowRequests();\n        setFollowRequests(requests);\n        setUIState('default');\n      } catch (e) {\n        setUIState('error');\n      }\n    })();\n  };\n\n  async function fetchAnnouncements() {\n    try {\n      return await masto.v1.announcements.list();\n    } catch (e) {\n      // Silently fail\n      return [];\n    }\n  }\n\n  const loadNotifications = (firstLoad) => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const fetchNotificationsPromise = fetchNotifications(firstLoad);\n        const fetchFollowRequestsPromise = fetchFollowRequests();\n        const fetchAnnouncementsPromise = fetchAnnouncements();\n\n        if (firstLoad) {\n          const announcements = await fetchAnnouncementsPromise;\n          announcements.sort((a, b) => {\n            // Sort by updatedAt first, then createdAt\n            const aDate = new Date(a.updatedAt || a.createdAt);\n            const bDate = new Date(b.updatedAt || b.createdAt);\n            return bDate - aDate;\n          });\n          setAnnouncements(announcements);\n          const requests = await fetchFollowRequestsPromise;\n          setFollowRequests(requests);\n        }\n\n        const { done } = await fetchNotificationsPromise;\n        setShowMore(!done);\n\n        setUIState('default');\n      } catch (e) {\n        setUIState('error');\n      }\n    })();\n  };\n\n  useEffect(() => {\n    loadNotifications(true);\n  }, []);\n  useEffect(() => {\n    if (reachStart) {\n      loadNotifications(true);\n    }\n  }, [reachStart]);\n\n  // useEffect(() => {\n  //   if (nearReachEnd && showMore) {\n  //     loadNotifications();\n  //   }\n  // }, [nearReachEnd, showMore]);\n\n  const loadUpdates = useCallback(\n    ({ disableIdleCheck = false } = {}) => {\n      console.log('✨ Load updates', {\n        autoRefresh: snapStates.settings.autoRefresh,\n        scrollTop: scrollableRef.current?.scrollTop,\n        inBackground: inBackground(),\n        disableIdleCheck,\n        notificationsShowNew: snapStates.notificationsShowNew,\n        uiState,\n      });\n      if (\n        snapStates.settings.autoRefresh &&\n        scrollableRef.current?.scrollTop < 16 &&\n        (disableIdleCheck || window.__IDLE__) &&\n        !inBackground() &&\n        snapStates.notificationsShowNew &&\n        uiState !== 'loading'\n      ) {\n        loadNotifications(true);\n      }\n    },\n    [snapStates.notificationsShowNew, snapStates.settings.autoRefresh, uiState],\n  );\n  // useEffect(loadUpdates, [snapStates.notificationsShowNew]);\n\n  const lastHiddenTime = useRef();\n  usePageVisibility((visible) => {\n    let unsub;\n    if (visible) {\n      const timeDiff = Date.now() - lastHiddenTime.current;\n      if (!lastHiddenTime.current || timeDiff > 1000 * 60) {\n        loadUpdates({\n          disableIdleCheck: true,\n        });\n      } else {\n        lastHiddenTime.current = Date.now();\n      }\n      unsub = subscribeKey(states, 'notificationsShowNew', (v) => {\n        if (v) {\n          loadUpdates();\n        }\n      });\n    }\n    return () => {\n      unsub?.();\n    };\n  });\n\n  const todayDate = new Date();\n  const yesterdayDate = new Date(todayDate - 24 * 60 * 60 * 1000);\n  let currentDay = new Date();\n  const showTodayEmpty = !snapStates.notifications.some(\n    (notification) =>\n      new Date(notification.createdAt).toDateString() ===\n      todayDate.toDateString(),\n  );\n\n  const announcementsListRef = useRef();\n\n  useEffect(() => {\n    if (notificationID) {\n      states.routeNotification = {\n        id: notificationID,\n        accessToken: atob(notificationAccessToken),\n      };\n    }\n  }, [notificationID, notificationAccessToken]);\n\n  // useEffect(() => {\n  //   if (uiState === 'default') {\n  //     (async () => {\n  //       try {\n  //         const registration = await getRegistration();\n  //         if (registration?.getNotifications) {\n  //           const notifications = await registration.getNotifications();\n  //           console.log('🔔 Push notifications', notifications);\n  //           // Close all notifications?\n  //           // notifications.forEach((notification) => {\n  //           //   notification.close();\n  //           // });\n  //         }\n  //       } catch (e) {}\n  //     })();\n  //   }\n  // }, [uiState]);\n\n  return (\n    <div\n      id=\"notifications-page\"\n      class=\"deck-container\"\n      ref={scrollableRef}\n      tabIndex=\"-1\"\n    >\n      <div class={`timeline-deck deck ${onlyMentions ? 'only-mentions' : ''}`}>\n        <header\n          hidden={hiddenUI}\n          onClick={(e) => {\n            if (!e.target.closest('a, button')) {\n              scrollableRef.current?.scrollTo({ top: 0, behavior: 'smooth' });\n            }\n          }}\n          class={uiState === 'loading' ? 'loading' : ''}\n        >\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n              <Link to=\"/\" class=\"button plain\">\n                <Icon icon=\"home\" size=\"l\" alt=\"Home\" />\n              </Link>\n            </div>\n            <h1>Notifications</h1>\n            <div class=\"header-side\">\n              {/* <Loader hidden={uiState !== 'loading'} /> */}\n            </div>\n          </div>\n          {snapStates.notificationsShowNew && uiState !== 'loading' && (\n            <button\n              class=\"updates-button shiny-pill\"\n              type=\"button\"\n              onClick={() => {\n                loadNotifications(true);\n                scrollableRef.current?.scrollTo({\n                  top: 0,\n                  behavior: 'smooth',\n                });\n              }}\n            >\n              <Icon icon=\"arrow-up\" /> New notifications\n            </button>\n          )}\n        </header>\n        {announcements.length > 0 && (\n          <div class=\"shazam-container\">\n            <div class=\"shazam-container-inner\">\n              <details class=\"announcements\">\n                <summary>\n                  <span>\n                    <Icon icon=\"announce\" class=\"announcement-icon\" size=\"l\" />{' '}\n                    <b>Announcement{announcements.length > 1 ? 's' : ''}</b>{' '}\n                    <small class=\"insignificant\">{instance}</small>\n                  </span>\n                  {announcements.length > 1 && (\n                    <span class=\"announcements-nav-buttons\">\n                      {announcements.map((announcement, index) => (\n                        <button\n                          type=\"button\"\n                          class=\"plain2 small\"\n                          onClick={() => {\n                            announcementsListRef.current?.children[\n                              index\n                            ].scrollIntoView({\n                              behavior: 'smooth',\n                              block: 'nearest',\n                            });\n                          }}\n                        >\n                          {index + 1}\n                        </button>\n                      ))}\n                    </span>\n                  )}\n                </summary>\n                <ul\n                  class={`announcements-list-${\n                    announcements.length > 1 ? 'multiple' : 'single'\n                  }`}\n                  ref={announcementsListRef}\n                >\n                  {announcements.map((announcement) => (\n                    <li>\n                      <AnnouncementBlock announcement={announcement} />\n                    </li>\n                  ))}\n                </ul>\n              </details>\n            </div>\n          </div>\n        )}\n        {followRequests.length > 0 && (\n          <div class=\"follow-requests\">\n            <h2 class=\"timeline-header\">Follow requests</h2>\n            {followRequests.length > 5 ? (\n              <details>\n                <summary>{followRequests.length} follow requests</summary>\n                <ul>\n                  {followRequests.map((account) => (\n                    <li key={account.id}>\n                      <AccountBlock account={account} />\n                      <FollowRequestButtons\n                        accountID={account.id}\n                        onChange={() => {\n                          // loadFollowRequests();\n                          // loadNotifications(true);\n                        }}\n                      />\n                    </li>\n                  ))}\n                </ul>\n              </details>\n            ) : (\n              <ul>\n                {followRequests.map((account) => (\n                  <li key={account.id}>\n                    <AccountBlock account={account} />\n                    <FollowRequestButtons\n                      accountID={account.id}\n                      onChange={() => {\n                        // loadFollowRequests();\n                        // loadNotifications(true);\n                      }}\n                    />\n                  </li>\n                ))}\n              </ul>\n            )}\n          </div>\n        )}\n        <div id=\"mentions-option\">\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={onlyMentions}\n              onChange={(e) => {\n                setOnlyMentions(e.target.checked);\n              }}\n            />{' '}\n            Only mentions\n          </label>\n        </div>\n        <h2 class=\"timeline-header\">Today</h2>\n        {showTodayEmpty && !!snapStates.notifications.length && (\n          <p class=\"ui-state insignificant\">\n            {uiState === 'default' ? \"You're all caught up.\" : <>&hellip;</>}\n          </p>\n        )}\n        {snapStates.notifications.length ? (\n          <>\n            {snapStates.notifications\n              // This is leaked from Notifications popover\n              .filter((n) => n.type !== 'follow_request')\n              .map((notification) => {\n                if (onlyMentions && notification.type !== 'mention') {\n                  return null;\n                }\n                const notificationDay = new Date(notification.createdAt);\n                const differentDay =\n                  notificationDay.toDateString() !== currentDay.toDateString();\n                if (differentDay) {\n                  currentDay = notificationDay;\n                }\n                // if notificationDay is yesterday, show \"Yesterday\"\n                // if notificationDay is before yesterday, show date\n                const heading =\n                  notificationDay.toDateString() ===\n                  yesterdayDate.toDateString()\n                    ? 'Yesterday'\n                    : niceDateTime(currentDay, {\n                        hideTime: true,\n                      });\n                return (\n                  <Fragment key={notification.id}>\n                    {differentDay && <h2 class=\"timeline-header\">{heading}</h2>}\n                    <Notification\n                      instance={instance}\n                      notification={notification}\n                      key={notification.id}\n                    />\n                  </Fragment>\n                );\n              })}\n          </>\n        ) : (\n          <>\n            {uiState === 'loading' && (\n              <>\n                <ul class=\"timeline flat\">\n                  {Array.from({ length: 5 }).map((_, i) => (\n                    <li class=\"notification skeleton\">\n                      <div class=\"notification-type\">\n                        <Icon icon=\"notification\" size=\"xl\" />\n                      </div>\n                      <div class=\"notification-content\">\n                        <p>███████████ ████</p>\n                      </div>\n                    </li>\n                  ))}\n                </ul>\n              </>\n            )}\n            {uiState === 'error' && (\n              <p class=\"ui-state\">\n                Unable to load notifications\n                <br />\n                <br />\n                <button type=\"button\" onClick={() => loadNotifications(true)}>\n                  Try again\n                </button>\n              </p>\n            )}\n          </>\n        )}\n        {showMore && (\n          <InView\n            onChange={(inView) => {\n              if (inView) {\n                loadNotifications();\n              }\n            }}\n          >\n            <button\n              type=\"button\"\n              class=\"plain block\"\n              disabled={uiState === 'loading'}\n              onClick={() => loadNotifications()}\n              style={{ marginBlockEnd: '6em' }}\n            >\n              {uiState === 'loading' ? (\n                <Loader abrupt />\n              ) : (\n                <>Show more&hellip;</>\n              )}\n            </button>\n          </InView>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction inBackground() {\n  return !!document.querySelector('.deck-backdrop, #modal-container > *');\n}\n\nfunction AnnouncementBlock({ announcement }) {\n  const { instance } = api();\n  const { contact } = getCurrentInstance();\n  const contactAccount = contact?.account;\n  const {\n    id,\n    content,\n    startsAt,\n    endsAt,\n    published,\n    allDay,\n    publishedAt,\n    updatedAt,\n    read,\n    mentions,\n    statuses,\n    tags,\n    emojis,\n    reactions,\n  } = announcement;\n\n  const publishedAtDate = new Date(publishedAt);\n  const publishedDateText = niceDateTime(publishedAtDate);\n  const updatedAtDate = new Date(updatedAt);\n  const updatedAtText = niceDateTime(updatedAtDate);\n\n  return (\n    <div class=\"announcement-block\">\n      <AccountBlock account={contactAccount} />\n      <div\n        class=\"announcement-content\"\n        onClick={handleContentLinks({ mentions, instance })}\n        dangerouslySetInnerHTML={{\n          __html: enhanceContent(content, {\n            emojis,\n          }),\n        }}\n      />\n      <p class=\"insignificant\">\n        <time datetime={publishedAtDate.toISOString()}>\n          {niceDateTime(publishedAtDate)}\n        </time>\n        {updatedAt && updatedAtText !== publishedDateText && (\n          <>\n            {' '}\n            &bull;{' '}\n            <span class=\"ib\">\n              Updated{' '}\n              <time datetime={updatedAtDate.toISOString()}>\n                {niceDateTime(updatedAtDate)}\n              </time>\n            </span>\n          </>\n        )}\n      </p>\n      <div class=\"announcement-reactions\" hidden>\n        {reactions.map((reaction) => {\n          const { name, count, me, staticUrl, url } = reaction;\n          return (\n            <button type=\"button\" class={`plain4 small ${me ? 'reacted' : ''}`}>\n              {url || staticUrl ? (\n                <img src={url || staticUrl} alt={name} width=\"16\" height=\"16\" />\n              ) : (\n                <span>{name}</span>\n              )}{' '}\n              <span class=\"count\">{shortenNumber(count)}</span>\n            </button>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(Notifications);\n","import { Menu, MenuDivider, MenuItem } from '@szhsin/react-menu';\nimport { useRef } from 'preact/hooks';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport Icon from '../components/icon';\nimport Menu2 from '../components/menu2';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { filteredItems } from '../utils/filters';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Public({ local, columnMode, ...props }) {\n  const snapStates = useSnapshot(states);\n  const isLocal = !!local;\n  const params = columnMode ? {} : useParams();\n  const { masto, instance } = api({\n    instance: props?.instance || params.instance,\n  });\n  const title = `${isLocal ? 'Local' : 'Federated'} timeline (${instance})`;\n  useTitle(title, isLocal ? `/:instance?/p/l` : `/:instance?/p`);\n  // const navigate = useNavigate();\n  const latestItem = useRef();\n\n  const publicIterator = useRef();\n  async function fetchPublic(firstLoad) {\n    if (firstLoad || !publicIterator.current) {\n      publicIterator.current = masto.v1.timelines.public.list({\n        limit: LIMIT,\n        local: isLocal,\n      });\n    }\n    const results = await publicIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      value = filteredItems(value, 'public');\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines.public\n        .list({\n          limit: 1,\n          local: isLocal,\n          since_id: latestItem.current,\n        })\n        .next();\n      let { value } = results;\n      value = filteredItems(value, 'public');\n      if (value?.length) {\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  return (\n    <Timeline\n      key={instance + isLocal}\n      title={title}\n      titleComponent={\n        <h1 class=\"header-double-lines\">\n          <b>{isLocal ? 'Local timeline' : 'Federated timeline'}</b>\n          <div>{instance}</div>\n        </h1>\n      }\n      id=\"public\"\n      instance={instance}\n      emptyText=\"No one has posted anything yet.\"\n      errorText=\"Unable to load posts\"\n      fetchItems={fetchPublic}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      headerStart={<></>}\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      allowFilters\n      headerEnd={\n        <Menu2\n          portal\n          // setDownOverflow\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          <MenuItem href={isLocal ? `/#/${instance}/p` : `/#/${instance}/p/l`}>\n            {isLocal ? (\n              <>\n                <Icon icon=\"transfer\" /> <span>Switch to Federated</span>\n              </>\n            ) : (\n              <>\n                <Icon icon=\"transfer\" /> <span>Switch to Local</span>\n              </>\n            )}\n          </MenuItem>\n          <MenuDivider />\n          <MenuItem\n            onClick={() => {\n              let newInstance = prompt(\n                'Enter a new instance e.g. \"mastodon.social\"',\n              );\n              if (!/\\./.test(newInstance)) {\n                if (newInstance) alert('Invalid instance');\n                return;\n              }\n              if (newInstance) {\n                newInstance = newInstance.toLowerCase().trim();\n                // navigate(isLocal ? `/${newInstance}/p/l` : `/${newInstance}/p`);\n                location.hash = isLocal\n                  ? `/${newInstance}/p/l`\n                  : `/${newInstance}/p`;\n              }\n            }}\n          >\n            <Icon icon=\"bus\" /> <span>Go to another instance…</span>\n          </MenuItem>\n        </Menu2>\n      }\n    />\n  );\n}\n\nexport default Public;\n","import './trending.css';\n\nimport { MenuItem } from '@szhsin/react-menu';\nimport { getBlurHashAverageColor } from 'fast-blurhash';\nimport { useMemo, useRef, useState } from 'preact/hooks';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Menu2 from '../components/menu2';\nimport RelativeTime from '../components/relative-time';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { oklab2rgb, rgb2oklab } from '../utils/color-utils';\nimport { filteredItems } from '../utils/filters';\nimport pmem from '../utils/pmem';\nimport shortenNumber from '../utils/shorten-number';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nconst fetchLinks = pmem(\n  (masto) => {\n    return masto.v1.trends.links.list().next();\n  },\n  {\n    // News last much longer\n    maxAge: 10 * 60 * 1000, // 10 minutes\n  },\n);\n\nfunction Trending({ columnMode, ...props }) {\n  const snapStates = useSnapshot(states);\n  const params = columnMode ? {} : useParams();\n  const { masto, instance } = api({\n    instance: props?.instance || params.instance,\n  });\n  const title = `Trending (${instance})`;\n  useTitle(title, `/:instance?/trending`);\n  // const navigate = useNavigate();\n  const latestItem = useRef();\n\n  const [hashtags, setHashtags] = useState([]);\n  const [links, setLinks] = useState([]);\n  const trendIterator = useRef();\n  async function fetchTrend(firstLoad) {\n    if (firstLoad || !trendIterator.current) {\n      trendIterator.current = masto.v1.trends.statuses.list({\n        limit: LIMIT,\n      });\n\n      // Get hashtags\n      try {\n        const iterator = masto.v1.trends.tags.list();\n        const { value: tags } = await iterator.next();\n        console.log('tags', tags);\n        if (tags?.length) {\n          setHashtags(tags);\n        }\n      } catch (e) {\n        console.error(e);\n      }\n\n      // Get links\n      try {\n        const { value } = await fetchLinks(masto);\n        // 4 types available: link, photo, video, rich\n        // Only want links for now\n        const links = value?.filter?.((link) => link.type === 'link');\n        console.log('links', links);\n        if (links?.length) {\n          setLinks(links);\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    }\n    const results = await trendIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      value = filteredItems(value, 'public'); // Might not work here\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.trends.statuses\n        .list({\n          limit: 1,\n          // NOT SUPPORTED\n          // since_id: latestItem.current,\n        })\n        .next();\n      let { value } = results;\n      value = filteredItems(value, 'public');\n      if (value?.length && value[0].id !== latestItem.current) {\n        latestItem.current = value[0].id;\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  const TimelineStart = useMemo(() => {\n    return (\n      <>\n        {!!hashtags.length && (\n          <div class=\"filter-bar expandable\">\n            <Icon icon=\"chart\" class=\"insignificant\" size=\"l\" />\n            {hashtags.map((tag, i) => {\n              const { name, history } = tag;\n              const total = history.reduce((acc, cur) => acc + +cur.uses, 0);\n              return (\n                <Link to={`/${instance}/t/${name}`} key={name}>\n                  <span>\n                    <span class=\"more-insignificant\">#</span>\n                    {name}\n                  </span>\n                  <span class=\"filter-count\">{shortenNumber(total)}</span>\n                </Link>\n              );\n            })}\n          </div>\n        )}\n        {!!links.length && (\n          <div class=\"links-bar\">\n            <header>\n              <h3>Trending News</h3>\n            </header>\n            {links.map((link) => {\n              const {\n                authorName,\n                authorUrl,\n                blurhash,\n                description,\n                height,\n                image,\n                imageDescription,\n                language,\n                providerName,\n                providerUrl,\n                publishedAt,\n                title,\n                url,\n                width,\n              } = link;\n              const domain = new URL(url).hostname\n                .replace(/^www\\./, '')\n                .replace(/\\/$/, '');\n              let accentColor;\n              if (blurhash) {\n                const averageColor = getBlurHashAverageColor(blurhash);\n                const labAverageColor = rgb2oklab(averageColor);\n                accentColor = oklab2rgb([\n                  0.6,\n                  labAverageColor[1],\n                  labAverageColor[2],\n                ]);\n              }\n\n              return (\n                <a\n                  key={url}\n                  href={url}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  style={\n                    accentColor\n                      ? {\n                          '--accent-color': `rgb(${accentColor.join(',')})`,\n                          '--accent-alpha-color': `rgba(${accentColor.join(\n                            ',',\n                          )}, 0.4)`,\n                        }\n                      : {}\n                  }\n                >\n                  <article>\n                    <figure>\n                      <img\n                        src={image}\n                        alt={imageDescription}\n                        width={width}\n                        height={height}\n                        loading=\"lazy\"\n                      />\n                    </figure>\n                    <div class=\"article-body\">\n                      <header>\n                        <div class=\"article-meta\">\n                          <span class=\"domain\">{domain}</span>{' '}\n                          {!!publishedAt && <>&middot; </>}\n                          {!!publishedAt && (\n                            <>\n                              <RelativeTime\n                                datetime={publishedAt}\n                                format=\"micro\"\n                              />\n                            </>\n                          )}\n                        </div>\n                        {!!title && (\n                          <h1 class=\"title\" lang={language} dir=\"auto\">\n                            {title}\n                          </h1>\n                        )}\n                      </header>\n                      {!!description && (\n                        <p class=\"description\" lang={language} dir=\"auto\">\n                          {description}\n                        </p>\n                      )}\n                    </div>\n                  </article>\n                </a>\n              );\n            })}\n          </div>\n        )}\n      </>\n    );\n  }, [hashtags, links]);\n\n  return (\n    <Timeline\n      key={instance}\n      title={title}\n      titleComponent={\n        <h1 class=\"header-double-lines\">\n          <b>Trending</b>\n          <div>{instance}</div>\n        </h1>\n      }\n      id=\"trending\"\n      instance={instance}\n      emptyText=\"No trending posts.\"\n      errorText=\"Unable to load posts\"\n      fetchItems={fetchTrend}\n      checkForUpdates={checkForUpdates}\n      checkForUpdatesInterval={5 * 60 * 1000} // 5 minutes\n      useItemID\n      headerStart={<></>}\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      allowFilters\n      timelineStart={TimelineStart}\n      headerEnd={\n        <Menu2\n          portal\n          // setDownOverflow\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          <MenuItem\n            onClick={() => {\n              let newInstance = prompt(\n                'Enter a new instance e.g. \"mastodon.social\"',\n              );\n              if (!/\\./.test(newInstance)) {\n                if (newInstance) alert('Invalid instance');\n                return;\n              }\n              if (newInstance) {\n                newInstance = newInstance.toLowerCase().trim();\n                // navigate(`/${newInstance}/trending`);\n                location.hash = `/${newInstance}/trending`;\n              }\n            }}\n          >\n            <Icon icon=\"bus\" /> <span>Go to another instance…</span>\n          </MenuItem>\n        </Menu2>\n      }\n    />\n  );\n}\n\nexport default Trending;\n","import { useHotkeys } from 'react-hotkeys-hook';\nimport { useSnapshot } from 'valtio';\n\nimport Bookmarks from '../pages/bookmarks';\nimport Favourites from '../pages/favourites';\nimport Following from '../pages/following';\nimport Hashtag from '../pages/hashtag';\nimport List from '../pages/list';\nimport Mentions from '../pages/mentions';\nimport Notifications from '../pages/notifications';\nimport Public from '../pages/public';\nimport Trending from '../pages/trending';\nimport states from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nfunction Columns() {\n  useTitle('Home', '/');\n  const snapStates = useSnapshot(states);\n  const { shortcuts } = snapStates;\n\n  console.debug('RENDER Columns', shortcuts);\n\n  const components = shortcuts.map((shortcut) => {\n    if (!shortcut) return null;\n    const { type, ...params } = shortcut;\n    const Component = {\n      following: Following,\n      notifications: Notifications,\n      list: List,\n      public: Public,\n      bookmarks: Bookmarks,\n      favourites: Favourites,\n      hashtag: Hashtag,\n      mentions: Mentions,\n      trending: Trending,\n    }[type];\n    if (!Component) return null;\n    return (\n      <Component key={type + JSON.stringify(params)} {...params} columnMode />\n    );\n  });\n\n  useHotkeys(['1', '2', '3', '4', '5', '6', '7', '8', '9'], (e, handler) => {\n    try {\n      const index = parseInt(handler.keys[0], 10) - 1;\n      document.querySelectorAll('#columns > *')[index].focus();\n    } catch (e) {\n      console.error(e);\n    }\n  });\n\n  return <div id=\"columns\">{components}</div>;\n}\n\nexport default Columns;\n","import './notifications-menu.css';\n\nimport { ControlledMenu } from '@szhsin/react-menu';\nimport { memo } from 'preact/compat';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport Columns from '../components/columns';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport Notification from '../components/notification';\nimport { api } from '../utils/api';\nimport db from '../utils/db';\nimport groupNotifications from '../utils/group-notifications';\nimport states, { saveStatus } from '../utils/states';\nimport { getCurrentAccountNS } from '../utils/store-utils';\n\nimport Following from './following';\n\nfunction Home() {\n  const snapStates = useSnapshot(states);\n  useEffect(() => {\n    (async () => {\n      const keys = await db.drafts.keys();\n      if (keys.length) {\n        const ns = getCurrentAccountNS();\n        const ownKeys = keys.filter((key) => key.startsWith(ns));\n        if (ownKeys.length) {\n          states.showDrafts = true;\n        }\n      }\n    })();\n  }, []);\n\n  return (\n    <>\n      {(snapStates.settings.shortcutsColumnsMode ||\n        snapStates.settings.shortcutsViewMode === 'multi-column') &&\n      !!snapStates.shortcuts?.length ? (\n        <Columns />\n      ) : (\n        <Following\n          title=\"Home\"\n          path=\"/\"\n          id=\"home\"\n          headerStart={false}\n          headerEnd={<NotificationsLink />}\n        />\n      )}\n    </>\n  );\n}\n\nfunction NotificationsLink() {\n  const snapStates = useSnapshot(states);\n  const notificationLinkRef = useRef();\n  const [menuState, setMenuState] = useState(undefined);\n  return (\n    <>\n      <Link\n        ref={notificationLinkRef}\n        to=\"/notifications\"\n        class={`button plain notifications-button ${\n          snapStates.notificationsShowNew ? 'has-badge' : ''\n        } ${menuState || ''}`}\n        onClick={(e) => {\n          e.stopPropagation();\n          if (window.matchMedia('(min-width: calc(40em))').matches) {\n            e.preventDefault();\n            setMenuState((state) => (!state ? 'open' : undefined));\n          }\n        }}\n      >\n        <Icon icon=\"notification\" size=\"l\" alt=\"Notifications\" />\n      </Link>\n      <NotificationsMenu\n        state={menuState}\n        anchorRef={notificationLinkRef}\n        onClose={() => setMenuState(undefined)}\n      />\n    </>\n  );\n}\n\nconst NOTIFICATIONS_LIMIT = 30;\nconst NOTIFICATIONS_DISPLAY_LIMIT = 5;\nfunction NotificationsMenu({ anchorRef, state, onClose }) {\n  const { masto, instance } = api();\n  const snapStates = useSnapshot(states);\n  const [uiState, setUIState] = useState('default');\n\n  const notificationsIterator = masto.v1.notifications.list({\n    limit: NOTIFICATIONS_LIMIT,\n  });\n\n  async function fetchNotifications() {\n    const allNotifications = await notificationsIterator.next();\n    const notifications = allNotifications.value;\n\n    if (notifications?.length) {\n      notifications.forEach((notification) => {\n        saveStatus(notification.status, instance, {\n          skipThreading: true,\n        });\n      });\n\n      const groupedNotifications = groupNotifications(notifications);\n\n      states.notificationsLast = notifications[0];\n      states.notifications = groupedNotifications;\n\n      // Update last read marker\n      masto.v1.markers\n        .create({\n          notifications: {\n            lastReadId: notifications[0].id,\n          },\n        })\n        .catch(() => {});\n    }\n\n    states.notificationsShowNew = false;\n    states.notificationsLastFetchTime = Date.now();\n    return allNotifications;\n  }\n\n  const [hasFollowRequests, setHasFollowRequests] = useState(false);\n  function fetchFollowRequests() {\n    return masto.v1.followRequests.list({\n      limit: 1,\n    });\n  }\n\n  function loadNotifications() {\n    setUIState('loading');\n    (async () => {\n      try {\n        await fetchNotifications();\n        const followRequests = await fetchFollowRequests();\n        setHasFollowRequests(!!followRequests?.length);\n        setUIState('default');\n      } catch (e) {\n        setUIState('error');\n      }\n    })();\n  }\n\n  useEffect(() => {\n    if (state === 'open') loadNotifications();\n  }, [state]);\n\n  return (\n    <ControlledMenu\n      menuClassName=\"notifications-menu\"\n      state={state}\n      anchorRef={anchorRef}\n      onClose={onClose}\n      portal={{\n        target: document.body,\n      }}\n      overflow=\"auto\"\n      viewScroll=\"close\"\n      position=\"anchor\"\n      align=\"center\"\n      boundingBoxPadding=\"8 8 8 8\"\n    >\n      <header>\n        <h2>Notifications</h2>\n      </header>\n      <main>\n        {snapStates.notifications.length ? (\n          <>\n            {snapStates.notifications\n              .slice(0, NOTIFICATIONS_DISPLAY_LIMIT)\n              .map((notification) => (\n                <Notification\n                  key={notification.id}\n                  instance={instance}\n                  notification={notification}\n                />\n              ))}\n          </>\n        ) : uiState === 'loading' ? (\n          <div class=\"ui-state\">\n            <Loader abrupt />\n          </div>\n        ) : (\n          uiState === 'error' && (\n            <div class=\"ui-state\">\n              <p>Unable to fetch notifications.</p>\n              <p>\n                <button type=\"button\" onClick={loadNotifications}>\n                  Try again\n                </button>\n              </p>\n            </div>\n          )\n        )}\n      </main>\n      <footer>\n        <Link to=\"/mentions\" class=\"button plain\">\n          <Icon icon=\"at\" /> <span>Mentions</span>\n        </Link>\n        <Link to=\"/notifications\" class=\"button plain2\">\n          {hasFollowRequests ? (\n            <>\n              <span class=\"tag collapsed\">New</span>{' '}\n              <span>Follow Requests</span>\n            </>\n          ) : (\n            <b>See all</b>\n          )}{' '}\n          <Icon icon=\"arrow-right\" />\n        </Link>\n      </footer>\n    </ControlledMenu>\n  );\n}\n\nexport default memo(Home);\n","export const statusRegex = /\\/@([^@\\/]+)@?([^\\/]+)?\\/([^\\/]+)\\/?$/i;\nexport const statusNoteRegex = /\\/notes\\/([^\\/]+)\\/?$/i;\nfunction getInstanceStatusURL(url) {\n  // Regex /:username/:id, where username = @username or @username@domain, id = anything\n  const { hostname, pathname } = new URL(url);\n  const [, username, domain, id] = pathname.match(statusRegex) || [];\n\n  if (id) {\n    return `/${hostname}/s/${id}`;\n  }\n\n  const [, noteId] = pathname.match(statusNoteRegex) || [];\n\n  if (noteId) {\n    return `/${hostname}/s/${noteId}`;\n  }\n}\n\nexport default getInstanceStatusURL;\n","import { useLayoutEffect } from 'preact/hooks';\nimport { useLocation } from 'react-router-dom';\n\nimport Link from '../components/link';\nimport getInstanceStatusURL from '../utils/get-instance-status-url';\n\nexport default function HttpRoute() {\n  const location = useLocation();\n  const url = location.pathname.replace(/^\\//, '');\n  const statusURL = getInstanceStatusURL(url);\n\n  useLayoutEffect(() => {\n    if (statusURL) {\n      setTimeout(() => {\n        window.location.hash = statusURL + '?view=full';\n      }, 300);\n    }\n  }, [statusURL]);\n\n  return (\n    <div class=\"ui-state\" tabIndex=\"-1\">\n      {statusURL ? (\n        <>\n          <h2>Redirecting…</h2>\n          <p>\n            <a href={`#${statusURL}?view=full`}>{statusURL}</a>\n          </p>\n        </>\n      ) : (\n        <>\n          <h2>Unable to process URL</h2>\n          <p>\n            <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n              {url}\n            </a>\n          </p>\n        </>\n      )}\n      <hr />\n      <p>\n        <Link to=\"/\">Go home</Link>\n      </p>\n    </div>\n  );\n}\n","import './lists.css';\n\nimport { useEffect, useReducer, useRef, useState } from 'preact/hooks';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport ListAddEdit from '../components/list-add-edit';\nimport Loader from '../components/loader';\nimport Modal from '../components/modal';\nimport NavMenu from '../components/nav-menu';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nfunction Lists() {\n  const { masto } = api();\n  useTitle(`Lists`, `/l`);\n  const [uiState, setUIState] = useState('default');\n\n  const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n  const [lists, setLists] = useState([]);\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const lists = await masto.v1.lists.list();\n        lists.sort((a, b) => a.title.localeCompare(b.title));\n        console.log(lists);\n        setLists(lists);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, [reloadCount]);\n\n  const [showListAddEditModal, setShowListAddEditModal] = useState(false);\n\n  return (\n    <div id=\"lists-page\" class=\"deck-container\" tabIndex=\"-1\">\n      <div class=\"timeline-deck deck\">\n        <header>\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n              <Link to=\"/\" class=\"button plain\">\n                <Icon icon=\"home\" size=\"l\" />\n              </Link>\n            </div>\n            <h1>Lists</h1>\n            <div class=\"header-side\">\n              <button\n                type=\"button\"\n                class=\"plain\"\n                onClick={() => setShowListAddEditModal(true)}\n              >\n                <Icon icon=\"plus\" size=\"l\" alt=\"New list\" />\n              </button>\n            </div>\n          </div>\n        </header>\n        <main>\n          {lists.length > 0 ? (\n            <ul class=\"link-list\">\n              {lists.map((list) => (\n                <li>\n                  <Link to={`/l/${list.id}`}>\n                    <span>\n                      <Icon icon=\"list\" /> <span>{list.title}</span>\n                    </span>\n                    {/* <button\n                      type=\"button\"\n                      class=\"plain\"\n                      onClick={(e) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        setShowListAddEditModal({\n                          list,\n                        });\n                      }}\n                    >\n                      <Icon icon=\"pencil\" />\n                    </button> */}\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          ) : uiState === 'loading' ? (\n            <p class=\"ui-state\">\n              <Loader />\n            </p>\n          ) : uiState === 'error' ? (\n            <p class=\"ui-state\">Unable to load lists.</p>\n          ) : (\n            <p class=\"ui-state\">No lists yet.</p>\n          )}\n        </main>\n      </div>\n      {showListAddEditModal && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowListAddEditModal(false);\n            }\n          }}\n        >\n          <ListAddEdit\n            list={showListAddEditModal?.list}\n            onClose={(result) => {\n              if (result.state === 'success') {\n                reload();\n              }\n              setShowListAddEditModal(false);\n            }}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nexport default Lists;\n","export default \"__VITE_ASSET__cc8865ad__\"","const { VITE_CLIENT_NAME: CLIENT_NAME, VITE_WEBSITE: WEBSITE } = import.meta\n  .env;\n\nconst SCOPES = 'read write follow push';\n\nexport async function registerApplication({ instanceURL }) {\n  const registrationParams = new URLSearchParams({\n    client_name: CLIENT_NAME,\n    redirect_uris: location.origin + location.pathname,\n    scopes: SCOPES,\n    website: WEBSITE,\n  });\n  const registrationResponse = await fetch(\n    `https://${instanceURL}/api/v1/apps`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: registrationParams.toString(),\n    },\n  );\n  const registrationJSON = await registrationResponse.json();\n  console.log({ registrationJSON });\n  return registrationJSON;\n}\n\nexport async function getAuthorizationURL({ instanceURL, client_id }) {\n  const authorizationParams = new URLSearchParams({\n    client_id,\n    scope: SCOPES,\n    redirect_uri: location.origin + location.pathname,\n    // redirect_uri: 'urn:ietf:wg:oauth:2.0:oob',\n    response_type: 'code',\n  });\n  const authorizationURL = `https://${instanceURL}/oauth/authorize?${authorizationParams.toString()}`;\n  return authorizationURL;\n}\n\nexport async function getAccessToken({\n  instanceURL,\n  client_id,\n  client_secret,\n  code,\n}) {\n  const params = new URLSearchParams({\n    client_id,\n    client_secret,\n    redirect_uri: location.origin + location.pathname,\n    grant_type: 'authorization_code',\n    code,\n    scope: SCOPES,\n  });\n  const tokenResponse = await fetch(`https://${instanceURL}/oauth/token`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: params.toString(),\n  });\n  const tokenJSON = await tokenResponse.json();\n  console.log({ tokenJSON });\n  return tokenJSON;\n}\n","import './login.css';\n\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useSearchParams } from 'react-router-dom';\n\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport instancesListURL from '../data/instances.json?url';\nimport { getAuthorizationURL, registerApplication } from '../utils/auth';\nimport store from '../utils/store';\nimport useTitle from '../utils/useTitle';\n\nfunction Login() {\n  useTitle('Log in');\n  const instanceURLRef = useRef();\n  const cachedInstanceURL = store.local.get('instanceURL');\n  const [uiState, setUIState] = useState('default');\n  const [searchParams] = useSearchParams();\n  const instance = searchParams.get('instance');\n  const [instanceText, setInstanceText] = useState(\n    instance || cachedInstanceURL?.toLowerCase() || '',\n  );\n\n  const [instancesList, setInstancesList] = useState([]);\n  useEffect(() => {\n    (async () => {\n      try {\n        const res = await fetch(instancesListURL);\n        const data = await res.json();\n        setInstancesList(data);\n      } catch (e) {\n        // Silently fail\n        console.error(e);\n      }\n    })();\n  }, []);\n\n  // useEffect(() => {\n  //   if (cachedInstanceURL) {\n  //     instanceURLRef.current.value = cachedInstanceURL.toLowerCase();\n  //   }\n  // }, []);\n\n  const submitInstance = (instanceURL) => {\n    store.local.set('instanceURL', instanceURL);\n\n    (async () => {\n      setUIState('loading');\n      try {\n        const { client_id, client_secret, vapid_key } =\n          await registerApplication({\n            instanceURL,\n          });\n\n        if (client_id && client_secret) {\n          store.session.set('clientID', client_id);\n          store.session.set('clientSecret', client_secret);\n          store.session.set('vapidKey', vapid_key);\n\n          location.href = await getAuthorizationURL({\n            instanceURL,\n            client_id,\n          });\n        } else {\n          alert('Failed to register application');\n        }\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  };\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    const { elements } = e.target;\n    let instanceURL = elements.instanceURL.value.toLowerCase();\n    // Remove protocol from instance URL\n    instanceURL = instanceURL.replace(/^https?:\\/\\//, '').replace(/\\/+$/, '');\n    // Remove @acct@ or acct@ from instance URL\n    instanceURL = instanceURL.replace(/^@?[^@]+@/, '');\n    if (!/\\./.test(instanceURL)) {\n      instanceURL = instancesList.find((instance) =>\n        instance.includes(instanceURL),\n      );\n    }\n    submitInstance(instanceURL);\n  };\n\n  const instancesSuggestions = instanceText\n    ? instancesList\n        .filter((instance) => instance.includes(instanceText))\n        .sort((a, b) => {\n          // Move text that starts with instanceText to the start\n          const aStartsWith = a\n            .toLowerCase()\n            .startsWith(instanceText.toLowerCase());\n          const bStartsWith = b\n            .toLowerCase()\n            .startsWith(instanceText.toLowerCase());\n          if (aStartsWith && !bStartsWith) return -1;\n          if (!aStartsWith && bStartsWith) return 1;\n          return 0;\n        })\n        .slice(0, 10)\n    : [];\n\n  return (\n    <main id=\"login\" style={{ textAlign: 'center' }}>\n      <form onSubmit={onSubmit}>\n        <h1>Log in</h1>\n        <label>\n          <p>Instance</p>\n          <input\n            value={instanceText}\n            required\n            type=\"text\"\n            class=\"large\"\n            id=\"instanceURL\"\n            ref={instanceURLRef}\n            disabled={uiState === 'loading'}\n            // list=\"instances-list\"\n            autocorrect=\"off\"\n            autocapitalize=\"off\"\n            autocomplete=\"off\"\n            spellcheck={false}\n            placeholder=\"instance domain\"\n            onInput={(e) => {\n              setInstanceText(e.target.value);\n            }}\n          />\n          {instancesSuggestions?.length > 0 ? (\n            <ul id=\"instances-suggestions\">\n              {instancesSuggestions.map((instance) => (\n                <li>\n                  <button\n                    type=\"button\"\n                    class=\"plain4\"\n                    onClick={() => {\n                      submitInstance(instance);\n                    }}\n                  >\n                    {instance}\n                  </button>\n                </li>\n              ))}\n            </ul>\n          ) : (\n            <div id=\"instances-eg\">e.g. &ldquo;mastodon.social&rsquo;</div>\n          )}\n          {/* <datalist id=\"instances-list\">\n            {instancesList.map((instance) => (\n              <option value={instance} />\n            ))}\n          </datalist> */}\n        </label>\n        {uiState === 'error' && (\n          <p class=\"error\">\n            Failed to log in. Please try again or another instance.\n          </p>\n        )}\n        <div>\n          <button class=\"large\" disabled={uiState === 'loading'}>\n            Log in\n          </button>{' '}\n        </div>\n        <Loader hidden={uiState !== 'loading'} />\n        <hr />\n        <p>\n          <a href=\"https://joinmastodon.org/servers\" target=\"_blank\">\n            Don't have an account? Create one!\n          </a>\n        </p>\n        <p>\n          <Link to=\"/\">Go home</Link>\n        </p>\n      </form>\n    </main>\n  );\n}\n\nexport default Login;\n","import './search.css';\n\nimport { useAutoAnimate } from '@formkit/auto-animate/preact';\nimport { useEffect, useLayoutEffect, useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { InView } from 'react-intersection-observer';\nimport { useParams, useSearchParams } from 'react-router-dom';\n\nimport AccountBlock from '../components/account-block';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport NavMenu from '../components/nav-menu';\nimport SearchForm from '../components/search-form';\nimport Status from '../components/status';\nimport { api } from '../utils/api';\nimport shortenNumber from '../utils/shorten-number';\nimport useTitle from '../utils/useTitle';\n\nconst SHORT_LIMIT = 5;\nconst LIMIT = 40;\n\nfunction Search(props) {\n  const params = useParams();\n  const { masto, instance, authenticated } = api({\n    instance: params.instance,\n  });\n  const [uiState, setUIState] = useState('default');\n  const [searchParams] = useSearchParams();\n  const searchFormRef = useRef();\n  const q = props?.query || searchParams.get('q');\n  const type = props?.type || searchParams.get('type');\n  useTitle(\n    q\n      ? `Search: ${q}${\n          type\n            ? ` (${\n                {\n                  statuses: 'Posts',\n                  accounts: 'Accounts',\n                  hashtags: 'Hashtags',\n                }[type]\n              })`\n            : ''\n        }`\n      : 'Search',\n    `/search`,\n  );\n\n  const [showMore, setShowMore] = useState(false);\n  const offsetRef = useRef(0);\n  useEffect(() => {\n    offsetRef.current = 0;\n  }, [q, type]);\n\n  const scrollableRef = useRef();\n  useLayoutEffect(() => {\n    scrollableRef.current?.scrollTo?.(0, 0);\n  }, [q, type]);\n\n  const [statusResults, setStatusResults] = useState([]);\n  const [accountResults, setAccountResults] = useState([]);\n  const [hashtagResults, setHashtagResults] = useState([]);\n  useEffect(() => {\n    setStatusResults([]);\n    setAccountResults([]);\n    setHashtagResults([]);\n  }, [q]);\n  const setTypeResultsFunc = {\n    statuses: setStatusResults,\n    accounts: setAccountResults,\n    hashtags: setHashtagResults,\n  };\n\n  function loadResults(firstLoad) {\n    if (!firstLoad && !authenticated) {\n      // Search results pagination is only available to authenticated users\n      return;\n    }\n\n    setUIState('loading');\n    if (firstLoad && !type) {\n      setStatusResults(statusResults.slice(0, SHORT_LIMIT));\n      setAccountResults(accountResults.slice(0, SHORT_LIMIT));\n      setHashtagResults(hashtagResults.slice(0, SHORT_LIMIT));\n    }\n\n    (async () => {\n      const params = {\n        q,\n        resolve: authenticated,\n        limit: SHORT_LIMIT,\n      };\n      if (type) {\n        params.limit = LIMIT;\n        params.type = type;\n        if (authenticated) params.offset = offsetRef.current;\n      }\n\n      try {\n        const results = await masto.v2.search.fetch(params);\n        console.log(results);\n        if (type) {\n          if (firstLoad) {\n            setTypeResultsFunc[type](results[type]);\n            const length = results[type]?.length;\n            offsetRef.current = LIMIT;\n            setShowMore(!!length);\n          } else {\n            setTypeResultsFunc[type]((prev) => [...prev, ...results[type]]);\n            const length = results[type]?.length;\n            offsetRef.current = offsetRef.current + LIMIT;\n            setShowMore(!!length);\n          }\n        } else {\n          setStatusResults(results.statuses);\n          setAccountResults(results.accounts);\n          setHashtagResults(results.hashtags);\n          offsetRef.current = 0;\n          setShowMore(false);\n        }\n        setUIState('default');\n      } catch (err) {\n        console.error(err);\n        setUIState('error');\n      }\n    })();\n  }\n\n  useEffect(() => {\n    if (q) {\n      searchFormRef.current?.setValue?.(q);\n      loadResults(true);\n    } else {\n      searchFormRef.current?.focus?.();\n    }\n  }, [q, type, instance]);\n\n  useHotkeys(\n    '/',\n    (e) => {\n      searchFormRef.current?.focus?.();\n    },\n    {\n      preventDefault: true,\n    },\n  );\n\n  const [filterBarParent] = useAutoAnimate();\n\n  return (\n    <div id=\"search-page\" class=\"deck-container\" ref={scrollableRef}>\n      <div class=\"timeline-deck deck\">\n        <header class={uiState === 'loading' ? 'loading' : ''}>\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n            </div>\n            <SearchForm ref={searchFormRef} />\n            <div class=\"header-side\">&nbsp;</div>\n          </div>\n        </header>\n        <main>\n          {!!q && (\n            <div\n              ref={filterBarParent}\n              class={`filter-bar ${uiState === 'loading' ? 'loading' : ''}`}\n            >\n              {!!type && (\n                <Link to={`/search${q ? `?q=${encodeURIComponent(q)}` : ''}`}>\n                  ‹ All\n                </Link>\n              )}\n              {[\n                {\n                  label: 'Accounts',\n                  type: 'accounts',\n                  to: `/search?q=${encodeURIComponent(q)}&type=accounts`,\n                },\n                {\n                  label: 'Hashtags',\n                  type: 'hashtags',\n                  to: `/search?q=${encodeURIComponent(q)}&type=hashtags`,\n                },\n                {\n                  label: 'Posts',\n                  type: 'statuses',\n                  to: `/search?q=${encodeURIComponent(q)}&type=statuses`,\n                },\n              ]\n                .sort((a, b) => {\n                  if (a.type === type) return -1;\n                  if (b.type === type) return 1;\n                  return 0;\n                })\n                .map((link) => (\n                  <Link to={link.to} key={link.type}>\n                    {link.label}\n                  </Link>\n                ))}\n            </div>\n          )}\n          {!!q ? (\n            <>\n              {(!type || type === 'accounts') && (\n                <>\n                  {type !== 'accounts' && (\n                    <h2 class=\"timeline-header\">Accounts</h2>\n                  )}\n                  {accountResults.length > 0 ? (\n                    <>\n                      <ul class=\"timeline flat accounts-list\">\n                        {accountResults.map((account) => (\n                          <li key={account.id}>\n                            <AccountBlock\n                              account={account}\n                              instance={instance}\n                              showStats\n                            />\n                          </li>\n                        ))}\n                      </ul>\n                      {type !== 'accounts' && (\n                        <div class=\"ui-state\">\n                          <Link\n                            class=\"plain button\"\n                            to={`/search?q=${q}&type=accounts`}\n                          >\n                            See more accounts <Icon icon=\"arrow-right\" />\n                          </Link>\n                        </div>\n                      )}\n                    </>\n                  ) : (\n                    !type &&\n                    (uiState === 'loading' ? (\n                      <p class=\"ui-state\">\n                        <Loader abrupt />\n                      </p>\n                    ) : (\n                      <p class=\"ui-state\">No accounts found.</p>\n                    ))\n                  )}\n                </>\n              )}\n              {(!type || type === 'hashtags') && (\n                <>\n                  {type !== 'hashtags' && (\n                    <h2 class=\"timeline-header\">Hashtags</h2>\n                  )}\n                  {hashtagResults.length > 0 ? (\n                    <>\n                      <ul class=\"link-list hashtag-list\">\n                        {hashtagResults.map((hashtag) => {\n                          const { name, history } = hashtag;\n                          const total = history.reduce(\n                            (acc, cur) => acc + +cur.uses,\n                            0,\n                          );\n                          return (\n                            <li key={hashtag.name}>\n                              <Link\n                                to={\n                                  instance\n                                    ? `/${instance}/t/${hashtag.name}`\n                                    : `/t/${hashtag.name}`\n                                }\n                              >\n                                <Icon icon=\"hashtag\" />\n                                <span>{hashtag.name}</span>\n                                {!!total && (\n                                  <span class=\"count\">\n                                    {shortenNumber(total)}\n                                  </span>\n                                )}\n                              </Link>\n                            </li>\n                          );\n                        })}\n                      </ul>\n                      {type !== 'hashtags' && (\n                        <div class=\"ui-state\">\n                          <Link\n                            class=\"plain button\"\n                            to={`/search?q=${q}&type=hashtags`}\n                          >\n                            See more hashtags <Icon icon=\"arrow-right\" />\n                          </Link>\n                        </div>\n                      )}\n                    </>\n                  ) : (\n                    !type &&\n                    (uiState === 'loading' ? (\n                      <p class=\"ui-state\">\n                        <Loader abrupt />\n                      </p>\n                    ) : (\n                      <p class=\"ui-state\">No hashtags found.</p>\n                    ))\n                  )}\n                </>\n              )}\n              {(!type || type === 'statuses') && (\n                <>\n                  {type !== 'statuses' && (\n                    <h2 class=\"timeline-header\">Posts</h2>\n                  )}\n                  {statusResults.length > 0 ? (\n                    <>\n                      <ul class=\"timeline\">\n                        {statusResults.map((status) => (\n                          <li key={status.id}>\n                            <Link\n                              class=\"status-link\"\n                              to={\n                                instance\n                                  ? `/${instance}/s/${status.id}`\n                                  : `/s/${status.id}`\n                              }\n                            >\n                              <Status status={status} />\n                            </Link>\n                          </li>\n                        ))}\n                      </ul>\n                      {type !== 'statuses' && (\n                        <div class=\"ui-state\">\n                          <Link\n                            class=\"plain button\"\n                            to={`/search?q=${q}&type=statuses`}\n                          >\n                            See more posts <Icon icon=\"arrow-right\" />\n                          </Link>\n                        </div>\n                      )}\n                    </>\n                  ) : (\n                    !type &&\n                    (uiState === 'loading' ? (\n                      <p class=\"ui-state\">\n                        <Loader abrupt />\n                      </p>\n                    ) : (\n                      <p class=\"ui-state\">No posts found.</p>\n                    ))\n                  )}\n                </>\n              )}\n              {!!type &&\n                (uiState === 'default' ? (\n                  showMore ? (\n                    <InView\n                      onChange={(inView) => {\n                        if (inView) {\n                          loadResults();\n                        }\n                      }}\n                    >\n                      <button\n                        type=\"button\"\n                        class=\"plain block\"\n                        onClick={() => loadResults()}\n                        style={{ marginBlockEnd: '6em' }}\n                      >\n                        Show more&hellip;\n                      </button>\n                    </InView>\n                  ) : (\n                    <p class=\"ui-state insignificant\">The end.</p>\n                  )\n                ) : (\n                  uiState === 'loading' && (\n                    <p class=\"ui-state\">\n                      <Loader abrupt />\n                    </p>\n                  )\n                ))}\n            </>\n          ) : uiState === 'loading' ? (\n            <p class=\"ui-state\">\n              <Loader abrupt />\n            </p>\n          ) : (\n            <p class=\"ui-state\">\n              Enter your search term or paste a URL above to get started.\n            </p>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default Search;\n","import './status.css';\n\nimport { Menu, MenuDivider, MenuHeader, MenuItem } from '@szhsin/react-menu';\nimport debounce from 'just-debounce-it';\nimport pRetry from 'p-retry';\nimport { memo } from 'preact/compat';\nimport {\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { InView } from 'react-intersection-observer';\nimport { matchPath, useSearchParams } from 'react-router-dom';\nimport { useDebouncedCallback } from 'use-debounce';\nimport { useSnapshot } from 'valtio';\n\nimport Avatar from '../components/avatar';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport MediaModal from '../components/media-modal';\nimport NameText from '../components/name-text';\nimport RelativeTime from '../components/relative-time';\nimport Status from '../components/status';\nimport { api } from '../utils/api';\nimport htmlContentLength from '../utils/html-content-length';\nimport shortenNumber from '../utils/shorten-number';\nimport states, {\n  getStatus,\n  saveStatus,\n  statusKey,\n  threadifyStatus,\n} from '../utils/states';\nimport statusPeek from '../utils/status-peek';\nimport { getCurrentAccount } from '../utils/store-utils';\nimport useScroll from '../utils/useScroll';\nimport useTitle from '../utils/useTitle';\n\nimport getInstanceStatusURL from './../utils/get-instance-status-url';\n\nconst LIMIT = 40;\nconst SUBCOMMENTS_OPEN_ALL_LIMIT = 10;\nconst MAX_WEIGHT = 5;\n\nlet cachedRepliesToggle = {};\nlet cachedStatusesMap = {};\nlet scrollPositions = {};\nfunction resetScrollPosition(id) {\n  delete cachedStatusesMap[id];\n  delete scrollPositions[id];\n}\n\nconst scrollIntoViewOptions = {\n  block: 'nearest',\n  inline: 'center',\n  behavior: 'smooth',\n};\n\n// Select all statuses except those inside collapsed details/summary\n// Hat-tip to @AmeliaBR@front-end.social\n// https://front-end.social/@AmeliaBR/109784776146144471\nconst STATUSES_SELECTOR =\n  '.status-link:not(details:not([open]) > summary ~ *, details:not([open]) > summary ~ * *), .status-focus:not(details:not([open]) > summary ~ *, details:not([open]) > summary ~ * *)';\n\nconst STATUS_URL_REGEX = /\\/s\\//i;\n\nfunction StatusPage(params) {\n  const { id } = params;\n  const { masto, instance } = api({ instance: params.instance });\n  const snapStates = useSnapshot(states);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const mediaParam = searchParams.get('media');\n  const mediaOnlyParam = searchParams.get('media-only');\n  const mediaIndex = parseInt(mediaParam || mediaOnlyParam, 10);\n  let showMedia = mediaIndex > 0;\n  const mediaStatusID = searchParams.get('mediaStatusID');\n  const mediaStatus = getStatus(mediaStatusID, instance);\n  if (mediaStatusID && !mediaStatus) {\n    showMedia = false;\n  }\n  const showMediaOnly = showMedia && !!mediaOnlyParam;\n\n  const sKey = statusKey(id, instance);\n  const [heroStatus, setHeroStatus] = useState(states.statuses[sKey]);\n  useEffect(() => {\n    if (states.statuses[sKey]) {\n      setHeroStatus(states.statuses[sKey]);\n    }\n  }, [sKey]);\n\n  const closeLink = useMemo(() => {\n    const { prevLocation } = states;\n    const pathname =\n      (prevLocation?.pathname || '') + (prevLocation?.search || '');\n    const matchStatusPath =\n      matchPath('/:instance/s/:id', pathname) || matchPath('/s/:id', pathname);\n    if (!pathname || matchStatusPath) {\n      return '/';\n    }\n    return pathname;\n  }, []);\n\n  useEffect(() => {\n    if (!heroStatus && showMedia) {\n      (async () => {\n        try {\n          const status = await masto.v1.statuses.$select(id).fetch();\n          saveStatus(status, instance);\n          setHeroStatus(status);\n        } catch (err) {\n          console.error(err);\n          alert('Unable to load post.');\n          location.hash = closeLink;\n        }\n      })();\n    }\n  }, [showMedia]);\n\n  const mediaAttachments = mediaStatusID\n    ? mediaStatus?.mediaAttachments\n    : heroStatus?.mediaAttachments;\n\n  const handleMediaClose = useCallback(() => {\n    if (\n      !window.matchMedia('(min-width: calc(40em + 350px))').matches &&\n      snapStates.prevLocation\n    ) {\n      history.back();\n    } else {\n      if (showMediaOnly) {\n        location.hash = closeLink;\n      } else {\n        searchParams.delete('media');\n        searchParams.delete('mediaStatusID');\n        setSearchParams(searchParams);\n      }\n    }\n  }, [showMediaOnly, closeLink, snapStates.prevLocation]);\n\n  return (\n    <div class=\"deck-backdrop\">\n      {showMedia ? (\n        mediaAttachments?.length ? (\n          <MediaModal\n            mediaAttachments={mediaAttachments}\n            statusID={mediaStatusID || id}\n            instance={instance}\n            lang={heroStatus?.language}\n            index={mediaIndex - 1}\n            onClose={handleMediaClose}\n          />\n        ) : (\n          <div class=\"media-modal-container loading\">\n            <Loader abrupt />\n          </div>\n        )\n      ) : (\n        <Link to={closeLink} />\n      )}\n      {!showMediaOnly && (\n        <StatusThread\n          id={id}\n          instance={params.instance}\n          closeLink={closeLink}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction StatusThread({ id, closeLink = '/', instance: propInstance }) {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const mediaParam = searchParams.get('media');\n  const mediaStatusID = searchParams.get('mediaStatusID');\n  const showMedia = parseInt(mediaParam, 10) > 0;\n  const firstLoad = useRef(\n    !states.prevLocation &&\n      (history.length === 1 ||\n        ('navigation' in window && navigation?.entries?.()?.length === 1)),\n  );\n  const [viewMode, setViewMode] = useState(\n    searchParams.get('view') || firstLoad.current ? 'full' : null,\n  );\n  const translate = !!parseInt(searchParams.get('translate'));\n  const { masto, instance } = api({ instance: propInstance });\n  const {\n    masto: currentMasto,\n    instance: currentInstance,\n    authenticated,\n  } = api();\n  const sameInstance = instance === currentInstance;\n  const snapStates = useSnapshot(states);\n  const [statuses, setStatuses] = useState([]);\n  const [uiState, setUIState] = useState('default');\n  const heroStatusRef = useRef();\n  const sKey = statusKey(id, instance);\n  const totalDescendants = useRef(0);\n\n  const scrollableRef = useRef();\n  useEffect(() => {\n    scrollableRef.current?.focus();\n  }, []);\n  useEffect(() => {\n    const onScroll = debounce(() => {\n      // console.log('onScroll');\n      if (!scrollableRef.current) return;\n      const { scrollTop } = scrollableRef.current;\n      if (uiState !== 'loading') {\n        scrollPositions[id] = scrollTop;\n      }\n    }, 50);\n    scrollableRef.current?.addEventListener('scroll', onScroll, {\n      passive: true,\n    });\n    onScroll();\n    return () => {\n      onScroll.cancel();\n      scrollableRef.current?.removeEventListener('scroll', onScroll);\n    };\n  }, [id, uiState !== 'loading']);\n\n  const scrollOffsets = useRef();\n  const initContext = ({ reloadHero } = {}) => {\n    console.debug('initContext', id);\n    setUIState('loading');\n    let heroTimer;\n\n    const cachedStatuses = cachedStatusesMap[id];\n    if (cachedStatuses) {\n      // Case 1: It's cached, let's restore them to make it snappy\n      const reallyCachedStatuses = cachedStatuses.filter(\n        (s) => states.statuses[sKey],\n        // Some are not cached in the global state, so we need to filter them out\n      );\n      setStatuses(reallyCachedStatuses);\n    } else {\n      // const heroIndex = statuses.findIndex((s) => s.id === id);\n      // if (heroIndex !== -1) {\n      //   // Case 2: It's in current statuses. Slice off all descendant statuses after the hero status to be safe\n      //   const slicedStatuses = statuses.slice(0, heroIndex + 1);\n      //   setStatuses(slicedStatuses);\n      // } else {\n      // Case 3: Not cached and not in statuses, let's start from scratch\n      setStatuses([{ id }]);\n      // }\n    }\n\n    (async () => {\n      const heroFetch = () =>\n        pRetry(() => masto.v1.statuses.$select(id).fetch(), {\n          retries: 4,\n        });\n      const contextFetch = pRetry(\n        () => masto.v1.statuses.$select(id).context.fetch(),\n        {\n          retries: 8,\n        },\n      );\n\n      const hasStatus = !!snapStates.statuses[sKey];\n      let heroStatus = snapStates.statuses[sKey];\n      if (hasStatus && !reloadHero) {\n        console.debug('Hero status is cached');\n      } else {\n        try {\n          heroStatus = await heroFetch();\n          saveStatus(heroStatus, instance);\n          // Give time for context to appear\n          await new Promise((resolve) => {\n            setTimeout(resolve, 100);\n          });\n        } catch (e) {\n          console.error(e);\n          setUIState('error');\n          return;\n        }\n      }\n\n      try {\n        const context = await contextFetch;\n        const { ancestors, descendants } = context;\n\n        totalDescendants.current = descendants?.length || 0;\n\n        const missingStatuses = new Set();\n        ancestors.forEach((status) => {\n          saveStatus(status, instance, {\n            skipThreading: true,\n          });\n          if (\n            status.inReplyToId &&\n            !ancestors.find((s) => s.id === status.inReplyToId)\n          ) {\n            missingStatuses.add(status.inReplyToId);\n          }\n        });\n        const ancestorsIsThread = ancestors.every(\n          (s) => s.account.id === heroStatus.account.id,\n        );\n        const nestedDescendants = [];\n        descendants.forEach((status) => {\n          saveStatus(status, instance, {\n            skipThreading: true,\n          });\n\n          if (\n            status.inReplyToId &&\n            !descendants.find((s) => s.id === status.inReplyToId) &&\n            status.inReplyToId !== heroStatus.id\n          ) {\n            missingStatuses.add(status.inReplyToId);\n          }\n\n          if (status.inReplyToAccountId === status.account.id) {\n            // If replying to self, it's part of the thread, level 1\n            nestedDescendants.push(status);\n          } else if (status.inReplyToId === heroStatus.id) {\n            // If replying to the hero status, it's a reply, level 1\n            nestedDescendants.push(status);\n          } else if (\n            !status.inReplyToAccountId &&\n            nestedDescendants.find((s) => s.id === status.inReplyToId) &&\n            status.account.id === heroStatus.account.id\n          ) {\n            // If replying to hero's own statuses, it's part of the thread, level 1\n            nestedDescendants.push(status);\n          } else {\n            // If replying to someone else, it's a reply to a reply, level 2\n            const parent = descendants.find((s) => s.id === status.inReplyToId);\n            if (parent) {\n              if (!parent.__replies) {\n                parent.__replies = [];\n              }\n              parent.__replies.push(status);\n            } else {\n              // If no parent, something is wrong\n              console.warn('No parent found for', status);\n            }\n          }\n        });\n\n        console.log({ ancestors, descendants, nestedDescendants });\n        if (missingStatuses.size) {\n          console.error('Missing statuses', [...missingStatuses]);\n        }\n\n        function expandReplies(_replies) {\n          return _replies?.map((_r) => ({\n            id: _r.id,\n            account: _r.account,\n            repliesCount: _r.repliesCount,\n            content: _r.content,\n            weight: calcStatusWeight(_r),\n            replies: expandReplies(_r.__replies),\n          }));\n        }\n\n        const allStatuses = [\n          ...ancestors.map((s) => ({\n            id: s.id,\n            ancestor: true,\n            isThread: ancestorsIsThread,\n            accountID: s.account.id,\n            account: s.account,\n            repliesCount: s.repliesCount,\n            weight: calcStatusWeight(s),\n          })),\n          {\n            id,\n            accountID: heroStatus.account.id,\n            weight: calcStatusWeight(heroStatus),\n          },\n          ...nestedDescendants.map((s) => ({\n            id: s.id,\n            account: s.account,\n            accountID: s.account.id,\n            descendant: true,\n            thread: s.account.id === heroStatus.account.id,\n            weight: calcStatusWeight(s),\n            replies: expandReplies(s.__replies),\n          })),\n        ];\n\n        setUIState('default');\n        scrollOffsets.current = {\n          offsetTop: heroStatusRef.current?.offsetTop,\n          scrollTop: scrollableRef.current?.scrollTop,\n        };\n\n        // Set limit to hero's index\n        const heroLimit = allStatuses.findIndex((s) => s.id === id);\n        if (heroLimit >= limit) {\n          setLimit(heroLimit + 1);\n        }\n\n        console.log({ allStatuses });\n        setStatuses(allStatuses);\n        cachedStatusesMap[id] = allStatuses;\n\n        // Let's threadify this one\n        // Note that all non-hero statuses will trigger saveStatus which will threadify them too\n        // By right, at this point, all descendant statuses should be cached\n        threadifyStatus(heroStatus, instance);\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n\n    return () => {\n      clearTimeout(heroTimer);\n    };\n  };\n\n  useEffect(initContext, [id, masto]);\n  useEffect(() => {\n    if (!statuses.length) return;\n    console.debug('STATUSES', statuses);\n    const scrollPosition = scrollPositions[id];\n    console.debug('scrollPosition', scrollPosition);\n    if (!!scrollPosition) {\n      console.debug('Case 1', {\n        id,\n        scrollPosition,\n      });\n      scrollableRef.current.scrollTop = scrollPosition;\n    } else if (scrollOffsets.current) {\n      const newScrollOffsets = {\n        offsetTop: heroStatusRef.current?.offsetTop,\n        scrollTop: scrollableRef.current?.scrollTop,\n      };\n      const newScrollTop =\n        newScrollOffsets.offsetTop -\n        scrollOffsets.current.offsetTop +\n        newScrollOffsets.scrollTop;\n      console.debug('Case 2', {\n        scrollOffsets: scrollOffsets.current,\n        newScrollOffsets,\n        newScrollTop,\n        statuses: [...statuses],\n      });\n      scrollableRef.current.scrollTop = newScrollTop;\n    } else if (statuses.length === 1) {\n      console.debug('Case 3', {\n        id,\n      });\n      scrollableRef.current.scrollTop = 0;\n    }\n\n    // RESET\n    scrollOffsets.current = null;\n  }, [statuses]);\n\n  useEffect(() => {\n    if (snapStates.reloadStatusPage <= 0) return;\n    // Delete the cache for the context\n    (async () => {\n      try {\n        const { instanceURL } = getCurrentAccount();\n        const contextURL = `https://${instanceURL}/api/v1/statuses/${id}/context`;\n        console.log('Clear cache', contextURL);\n        const apiCache = await caches.open('api');\n        await apiCache.delete(contextURL, { ignoreVary: true });\n\n        return initContext({\n          reloadHero: true,\n        });\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [snapStates.reloadStatusPage]);\n\n  useEffect(() => {\n    return () => {\n      // RESET\n      scrollPositions = {};\n      states.reloadStatusPage = 0;\n      cachedStatusesMap = {};\n      cachedRepliesToggle = {};\n      statusWeightCache.clear();\n    };\n  }, []);\n\n  const heroStatus = snapStates.statuses[sKey] || snapStates.statuses[id];\n  const heroDisplayName = useMemo(() => {\n    // Remove shortcodes from display name\n    if (!heroStatus) return '';\n    const { account } = heroStatus;\n    const div = document.createElement('div');\n    div.innerHTML = account.displayName;\n    return div.innerText.trim();\n  }, [heroStatus]);\n  const heroContentText = useMemo(() => {\n    if (!heroStatus) return '';\n    let text = statusPeek(heroStatus);\n    if (text.length > 64) {\n      // \"The title should ideally be less than 64 characters in length\"\n      // https://www.w3.org/Provider/Style/TITLE.html\n      text = text.slice(0, 64) + '…';\n    }\n    return text;\n  }, [heroStatus]);\n  useTitle(\n    heroDisplayName && heroContentText\n      ? `${heroDisplayName}: \"${heroContentText}\"`\n      : 'Status',\n    '/:instance?/s/:id',\n  );\n\n  const postInstance = useMemo(() => {\n    if (!heroStatus) return;\n    const { url } = heroStatus;\n    if (!url) return;\n    return new URL(url).hostname;\n  }, [heroStatus]);\n  const postSameInstance = useMemo(() => {\n    if (!postInstance) return;\n    return postInstance === instance;\n  }, [postInstance, instance]);\n\n  const [limit, setLimit] = useState(LIMIT);\n  const showMore = useMemo(() => {\n    // return number of statuses to show\n    return statuses.length - limit;\n  }, [statuses.length, limit]);\n\n  const hasDescendants = statuses.some((s) => s.descendant);\n  const ancestors = statuses.filter((s) => s.ancestor);\n\n  const [heroInView, setHeroInView] = useState(true);\n  const onView = useDebouncedCallback(setHeroInView, 100);\n  const heroPointer = useMemo(() => {\n    // get top offset of heroStatus\n    if (!heroStatusRef.current || heroInView) return null;\n    const { top } = heroStatusRef.current.getBoundingClientRect();\n    return top > 0 ? 'down' : 'up';\n  }, [heroInView]);\n\n  useHotkeys(\n    'esc',\n    () => {\n      location.hash = closeLink;\n    },\n    {\n      // If media is open, esc to close media first\n      // Else close the status page\n      enabled: !showMedia,\n      ignoreEventWhen: (e) => {\n        const hasModal = !!document.querySelector('#modal-container > *');\n        return hasModal;\n      },\n    },\n  );\n  // For backspace, will always close both media and status page\n  useHotkeys('backspace', () => {\n    location.hash = closeLink;\n  });\n\n  useHotkeys('j', () => {\n    const activeStatus = document.activeElement.closest(\n      '.status-link, .status-focus',\n    );\n    const activeStatusRect = activeStatus?.getBoundingClientRect();\n    const allStatusLinks = Array.from(\n      scrollableRef.current.querySelectorAll(STATUSES_SELECTOR),\n    );\n    console.log({ allStatusLinks });\n    if (\n      activeStatus &&\n      activeStatusRect.top < scrollableRef.current.clientHeight &&\n      activeStatusRect.bottom > 0\n    ) {\n      const activeStatusIndex = allStatusLinks.indexOf(activeStatus);\n      let nextStatus = allStatusLinks[activeStatusIndex + 1];\n      if (nextStatus) {\n        nextStatus.focus();\n        nextStatus.scrollIntoView(scrollIntoViewOptions);\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostStatusLink = allStatusLinks.find((statusLink) => {\n        const statusLinkRect = statusLink.getBoundingClientRect();\n        return statusLinkRect.top >= 44 && statusLinkRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostStatusLink) {\n        topmostStatusLink.focus();\n        topmostStatusLink.scrollIntoView(scrollIntoViewOptions);\n      }\n    }\n  });\n\n  useHotkeys('k', () => {\n    const activeStatus = document.activeElement.closest(\n      '.status-link, .status-focus',\n    );\n    const activeStatusRect = activeStatus?.getBoundingClientRect();\n    const allStatusLinks = Array.from(\n      scrollableRef.current.querySelectorAll(STATUSES_SELECTOR),\n    );\n    if (\n      activeStatus &&\n      activeStatusRect.top < scrollableRef.current.clientHeight &&\n      activeStatusRect.bottom > 0\n    ) {\n      const activeStatusIndex = allStatusLinks.indexOf(activeStatus);\n      let prevStatus = allStatusLinks[activeStatusIndex - 1];\n      if (prevStatus) {\n        prevStatus.focus();\n        prevStatus.scrollIntoView(scrollIntoViewOptions);\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostStatusLink = allStatusLinks.find((statusLink) => {\n        const statusLinkRect = statusLink.getBoundingClientRect();\n        return statusLinkRect.top >= 44 && statusLinkRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostStatusLink) {\n        topmostStatusLink.focus();\n        topmostStatusLink.scrollIntoView(scrollIntoViewOptions);\n      }\n    }\n  });\n\n  // NOTE: I'm not sure if 'x' is the best shortcut for this, might change it later\n  // IDEA: x is for expand\n  useHotkeys('x', () => {\n    const activeStatus = document.activeElement.closest(\n      '.status-link, .status-focus',\n    );\n    if (activeStatus) {\n      const details = activeStatus.nextElementSibling;\n      if (details && details.tagName.toLowerCase() === 'details') {\n        details.open = !details.open;\n      }\n    }\n  });\n\n  const { nearReachStart } = useScroll({\n    scrollableRef,\n    distanceFromStartPx: 16,\n  });\n\n  const initialPageState = useRef(showMedia ? 'media+status' : 'status');\n\n  const handleMediaClick = useCallback(\n    (e, i, media, status) => {\n      e.preventDefault();\n      e.stopPropagation();\n      setSearchParams({\n        media: i + 1,\n        mediaStatusID: status.id,\n      });\n    },\n    [id],\n  );\n\n  const handleStatusLinkClick = useCallback((e, status) => {\n    resetScrollPosition(status.id);\n  }, []);\n\n  useEffect(() => {\n    let timer;\n    if (mediaStatusID && showMedia) {\n      timer = setTimeout(() => {\n        const status = scrollableRef.current?.querySelector(\n          `.status-link[href*=\"/${mediaStatusID}\"]`,\n        );\n        if (status) {\n          status.scrollIntoView(scrollIntoViewOptions);\n        }\n      }, 400); // After CSS transition\n    }\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [mediaStatusID, showMedia]);\n\n  const renderStatus = useCallback(\n    (status) => {\n      const {\n        id: statusID,\n        ancestor,\n        isThread,\n        descendant,\n        thread,\n        replies,\n        repliesCount,\n        weight,\n      } = status;\n      const isHero = statusID === id;\n      // const StatusParent = useCallback(\n      //   (props) =>\n      //     isThread || thread || ancestor ? (\n      //       <Link\n      //         class=\"status-link\"\n      //         to={\n      //           instance ? `/${instance}/s/${statusID}` : `/s/${statusID}`\n      //         }\n      //         onClick={() => {\n      //           resetScrollPosition(statusID);\n      //         }}\n      //         {...props}\n      //       />\n      //     ) : (\n      //       <div class=\"status-focus\" tabIndex={0} {...props} />\n      //     ),\n      //   [isThread, thread],\n      // );\n      return (\n        <li\n          key={statusID}\n          ref={isHero ? heroStatusRef : null}\n          class={`${ancestor ? 'ancestor' : ''} ${\n            descendant ? 'descendant' : ''\n          } ${thread ? 'thread' : ''} ${isHero ? 'hero' : ''}`}\n        >\n          {isHero ? (\n            <>\n              <InView\n                threshold={0.1}\n                onChange={onView}\n                class=\"status-focus\"\n                tabIndex={0}\n              >\n                <Status\n                  statusID={statusID}\n                  instance={instance}\n                  withinContext\n                  size=\"l\"\n                  enableTranslate\n                  forceTranslate={translate}\n                />\n              </InView>\n              {uiState !== 'loading' && !authenticated ? (\n                <div class=\"post-status-banner\">\n                  <p>\n                    You're not logged in. Interactions (reply, boost, etc) are\n                    not possible.\n                  </p>\n                  <Link to=\"/login\" class=\"button\">\n                    Log in\n                  </Link>\n                </div>\n              ) : (\n                !sameInstance && (\n                  <div class=\"post-status-banner\">\n                    <p>\n                      This post is from another instance (<b>{instance}</b>).\n                      Interactions (reply, boost, etc) are not possible.\n                    </p>\n                    <button\n                      type=\"button\"\n                      disabled={uiState === 'loading'}\n                      onClick={() => {\n                        setUIState('loading');\n                        (async () => {\n                          try {\n                            const results = await currentMasto.v2.search.fetch({\n                              q: heroStatus.url,\n                              type: 'statuses',\n                              resolve: true,\n                              limit: 1,\n                            });\n                            if (results.statuses.length) {\n                              const status = results.statuses[0];\n                              location.hash = currentInstance\n                                ? `/${currentInstance}/s/${status.id}`\n                                : `/s/${status.id}`;\n                            } else {\n                              throw new Error('No results');\n                            }\n                          } catch (e) {\n                            setUIState('default');\n                            alert('Error: ' + e);\n                            console.error(e);\n                          }\n                        })();\n                      }}\n                    >\n                      <Icon icon=\"transfer\" /> Switch to my instance to enable\n                      interactions\n                    </button>\n                  </div>\n                )\n              )}\n            </>\n          ) : (\n            // <StatusParent>\n            <Link\n              class=\"status-link\"\n              to={instance ? `/${instance}/s/${statusID}` : `/s/${statusID}`}\n              onClick={() => {\n                resetScrollPosition(statusID);\n              }}\n            >\n              <Status\n                statusID={statusID}\n                instance={instance}\n                withinContext\n                size={thread || ancestor ? 'm' : 's'}\n                enableTranslate\n                onMediaClick={handleMediaClick}\n                onStatusLinkClick={handleStatusLinkClick}\n              />\n              {ancestor && isThread && repliesCount > 1 && (\n                <div class=\"replies-link\">\n                  <Icon icon=\"comment\" />{' '}\n                  <span title={repliesCount}>\n                    {shortenNumber(repliesCount)}\n                  </span>\n                </div>\n              )}{' '}\n              {/* {replies?.length > LIMIT && (\n                        <div class=\"replies-link\">\n                          <Icon icon=\"comment\" />{' '}\n                          <span title={replies.length}>\n                            {shortenNumber(replies.length)}\n                          </span>\n                        </div>\n                      )} */}\n              {/* </StatusParent> */}\n            </Link>\n          )}\n          {descendant && replies?.length > 0 && (\n            <SubComments\n              instance={instance}\n              replies={replies}\n              hasParentThread={thread}\n              level={1}\n              accWeight={weight}\n              openAll={totalDescendants.current < SUBCOMMENTS_OPEN_ALL_LIMIT}\n            />\n          )}\n          {uiState === 'loading' &&\n            isHero &&\n            !!heroStatus?.repliesCount &&\n            !hasDescendants && (\n              <div class=\"status-loading\">\n                <Loader />\n              </div>\n            )}\n          {uiState === 'error' &&\n            isHero &&\n            !!heroStatus?.repliesCount &&\n            !hasDescendants && (\n              <div class=\"status-error\">\n                Unable to load replies.\n                <br />\n                <button\n                  type=\"button\"\n                  class=\"plain\"\n                  onClick={() => {\n                    states.reloadStatusPage++;\n                  }}\n                >\n                  Try again\n                </button>\n              </div>\n            )}\n        </li>\n      );\n    },\n    [\n      id,\n      instance,\n      uiState,\n      authenticated,\n      sameInstance,\n      translate,\n      handleMediaClick,\n      handleStatusLinkClick,\n      hasDescendants,\n    ],\n  );\n\n  const prevLocationIsStatusPage = useMemo(() => {\n    // Navigation API\n    if ('navigation' in window && navigation?.entries) {\n      const prevEntry = navigation.entries()[navigation.currentEntry.index - 1];\n      if (prevEntry?.url) {\n        return STATUS_URL_REGEX.test(prevEntry.url);\n      }\n    }\n    return STATUS_URL_REGEX.test(states.prevLocation?.pathname);\n  }, [sKey]);\n\n  return (\n    <div\n      tabIndex=\"-1\"\n      ref={scrollableRef}\n      class={`status-deck deck contained ${\n        statuses.length > 1 ? 'padded-bottom' : ''\n      } ${\n        initialPageState.current === 'status' && !firstLoad.current\n          ? 'slide-in'\n          : ''\n      } ${viewMode ? `deck-view-${viewMode}` : ''}`}\n      onAnimationEnd={(e) => {\n        // Fix the bounce effect when switching viewMode\n        // `slide-in` animation kicks in when switching viewMode\n        if (initialPageState.current === 'status') {\n          // e.target.classList.remove('slide-in');\n          initialPageState.current = null;\n        }\n      }}\n    >\n      <header\n        class={`${heroInView ? 'inview' : ''} ${\n          uiState === 'loading' ? 'loading' : ''\n        }`}\n        onDblClick={(e) => {\n          // reload statuses\n          states.reloadStatusPage++;\n        }}\n      >\n        {/* <div>\n            <Link class=\"button plain deck-close\" href={closeLink}>\n              <Icon icon=\"chevron-left\" size=\"xl\" />\n            </Link>\n          </div> */}\n        <div class=\"header-grid header-grid-2\">\n          <h1>\n            {prevLocationIsStatusPage && (\n              <button\n                type=\"button\"\n                class=\"plain deck-back\"\n                onClick={() => {\n                  history.back();\n                }}\n              >\n                <Icon icon=\"chevron-left\" size=\"xl\" />\n              </button>\n            )}\n            {!heroInView && heroStatus && uiState !== 'loading' ? (\n              <>\n                <span class=\"hero-heading\">\n                  <NameText\n                    account={heroStatus.account}\n                    instance={instance}\n                    showAvatar\n                    short\n                  />{' '}\n                  <span class=\"insignificant\">\n                    &bull;{' '}\n                    <RelativeTime\n                      datetime={heroStatus.createdAt}\n                      format=\"micro\"\n                    />\n                  </span>\n                </span>{' '}\n                <button\n                  type=\"button\"\n                  class=\"ancestors-indicator light small\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    heroStatusRef.current.scrollIntoView({\n                      behavior: 'smooth',\n                      block: 'start',\n                    });\n                  }}\n                  title=\"Go to main post\"\n                >\n                  <Icon\n                    icon={heroPointer === 'down' ? 'arrow-down' : 'arrow-up'}\n                  />\n                </button>\n              </>\n            ) : (\n              <>\n                Post{' '}\n                <button\n                  type=\"button\"\n                  class=\"ancestors-indicator light small\"\n                  onClick={(e) => {\n                    // Scroll to top\n                    e.preventDefault();\n                    e.stopPropagation();\n                    scrollableRef.current.scrollTo({\n                      top: 0,\n                      behavior: 'smooth',\n                    });\n                  }}\n                  hidden={!ancestors.length || nearReachStart}\n                  title={`${ancestors.length} posts above ‒ Go to top`}\n                >\n                  <Icon icon=\"arrow-up\" />\n                  {ancestors\n                    .filter(\n                      (a, i, arr) =>\n                        arr.findIndex((b) => b.accountID === a.accountID) === i,\n                    )\n                    .slice(0, 3)\n                    .map((ancestor) => (\n                      <Avatar\n                        key={ancestor.account.id}\n                        url={ancestor.account.avatar}\n                        alt={ancestor.account.displayName}\n                      />\n                    ))}\n                  {/* <Icon icon=\"comment\" />{' '} */}\n                  {ancestors.length > 3 && (\n                    <>\n                      {' '}\n                      <span class=\"insignificant\">\n                        {shortenNumber(ancestors.length)}\n                      </span>\n                    </>\n                  )}\n                </button>\n              </>\n            )}\n          </h1>\n          <div class=\"header-side\">\n            <button\n              type=\"button\"\n              class=\"plain4 button-switch-view\"\n              style={{\n                display: viewMode === 'full' ? '' : 'none',\n              }}\n              onClick={() => {\n                setViewMode(null);\n                searchParams.delete('media');\n                searchParams.delete('media-only');\n                searchParams.delete('view');\n                setSearchParams(searchParams);\n              }}\n              title=\"Switch to Side Peek view\"\n            >\n              <Icon icon=\"layout4\" size=\"l\" />\n            </button>\n            <Menu\n              align=\"end\"\n              portal={{\n                // Need this, else the menu click will cause scroll jump\n                target: scrollableRef.current,\n              }}\n              menuButton={\n                <button type=\"button\" class=\"button plain4\">\n                  <Icon icon=\"more\" alt=\"Actions\" size=\"xl\" />\n                </button>\n              }\n            >\n              <MenuItem\n                disabled={uiState === 'loading'}\n                onClick={() => {\n                  states.reloadStatusPage++;\n                }}\n              >\n                <Icon icon=\"refresh\" />\n                <span>Refresh</span>\n              </MenuItem>\n              <MenuItem\n                className=\"menu-switch-view\"\n                onClick={() => {\n                  setViewMode(viewMode === 'full' ? null : 'full');\n                  searchParams.delete('media');\n                  searchParams.delete('media-only');\n                  if (viewMode === 'full') {\n                    searchParams.delete('view');\n                  } else {\n                    searchParams.set('view', 'full');\n                  }\n                  setSearchParams(searchParams);\n                }}\n              >\n                <Icon\n                  icon={\n                    {\n                      '': 'layout5',\n                      full: 'layout4',\n                    }[viewMode || '']\n                  }\n                />\n                <span>\n                  Switch to {viewMode === 'full' ? 'Side Peek' : 'Full'} view\n                </span>\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  // Click all buttons with class .spoiler but not .spoiling\n                  const buttons = Array.from(\n                    scrollableRef.current.querySelectorAll(\n                      'button.spoiler:not(.spoiling)',\n                    ),\n                  );\n                  buttons.forEach((button) => {\n                    button.click();\n                  });\n                }}\n              >\n                <Icon icon=\"eye-open\" /> <span>Show all sensitive content</span>\n              </MenuItem>\n              <MenuDivider />\n              <MenuHeader className=\"plain\">Experimental</MenuHeader>\n              <MenuItem\n                disabled={postSameInstance}\n                onClick={() => {\n                  const statusURL = getInstanceStatusURL(heroStatus.url);\n                  if (statusURL) {\n                    location.hash = statusURL;\n                  } else {\n                    alert('Unable to switch');\n                  }\n                }}\n              >\n                <Icon icon=\"transfer\" />\n                <small class=\"menu-double-lines\">\n                  Switch to post's instance (<b>{postInstance}</b>)\n                </small>\n              </MenuItem>\n            </Menu>\n            <Link class=\"button plain deck-close\" to={closeLink}>\n              <Icon icon=\"x\" size=\"xl\" />\n            </Link>\n          </div>\n        </div>\n      </header>\n      {!!statuses.length && heroStatus ? (\n        <ul\n          class={`timeline flat contextual grow ${\n            uiState === 'loading' ? 'loading' : ''\n          }`}\n        >\n          {statuses.slice(0, limit).map(renderStatus)}\n          {showMore > 0 && (\n            <li>\n              <button\n                type=\"button\"\n                class=\"plain block show-more\"\n                disabled={uiState === 'loading'}\n                onClick={() => setLimit((l) => l + LIMIT)}\n                style={{ marginBlockEnd: '6em' }}\n              >\n                <div class=\"ib avatars-bunch\">\n                  {/* show avatars for first 5 statuses */}\n                  {statuses.slice(limit, limit + 5).map((status) => (\n                    <Avatar\n                      key={status.id}\n                      url={status.account.avatarStatic}\n                      // title={`${status.avatar.displayName} (@${status.avatar.acct})`}\n                    />\n                  ))}\n                </div>{' '}\n                <div class=\"ib\">\n                  Show more&hellip;{' '}\n                  <span class=\"tag\">\n                    {showMore > LIMIT ? `${LIMIT}+` : showMore}\n                  </span>\n                </div>\n              </button>\n            </li>\n          )}\n        </ul>\n      ) : (\n        <>\n          {uiState === 'loading' && (\n            <ul class=\"timeline flat contextual grow loading\">\n              <li>\n                <Status skeleton size=\"l\" />\n              </li>\n            </ul>\n          )}\n          {uiState === 'error' && (\n            <p class=\"ui-state\">\n              Unable to load post\n              <br />\n              <br />\n              <button\n                type=\"button\"\n                onClick={() => {\n                  states.reloadStatusPage++;\n                }}\n              >\n                Try again\n              </button>\n            </p>\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n\nfunction SubComments({\n  replies,\n  instance,\n  hasParentThread,\n  level,\n  accWeight,\n  openAll,\n}) {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  // Total comments count, including sub-replies\n  const diveDeep = (replies) => {\n    return replies.reduce((acc, reply) => {\n      const { repliesCount, replies } = reply;\n      const count = replies?.length || repliesCount;\n      return acc + count + diveDeep(replies || []);\n    }, 0);\n  };\n  const totalComments = replies.length + diveDeep(replies);\n  const sameCount = replies.length === totalComments;\n\n  // Get the first 3 accounts, unique by id\n  const accounts = replies\n    .map((r) => r.account)\n    .filter((a, i, arr) => arr.findIndex((b) => b.id === a.id) === i)\n    .slice(0, 3);\n\n  const totalWeight = useMemo(() => {\n    return replies?.reduce((acc, reply) => {\n      return acc + reply?.weight;\n    }, accWeight);\n  }, [accWeight, replies?.length]);\n\n  let open = false;\n  if (openAll) {\n    open = true;\n  } else if (totalWeight <= MAX_WEIGHT) {\n    open = true;\n  } else if (!hasParentThread && totalComments === 1) {\n    const shortReply = calcStatusWeight(replies[0]) < 2;\n    if (shortReply) open = true;\n  }\n  const openBefore = cachedRepliesToggle[replies[0].id];\n\n  const handleMediaClick = useCallback((e, i, media, status) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setSearchParams({\n      media: i + 1,\n      mediaStatusID: status.id,\n    });\n  }, []);\n\n  const detailsRef = useRef();\n  useLayoutEffect(() => {\n    function handleScroll(e) {\n      e.target.dataset.scrollLeft = e.target.scrollLeft;\n    }\n    detailsRef.current?.addEventListener('scroll', handleScroll, {\n      passive: true,\n    });\n    return () => {\n      detailsRef.current?.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n\n  return (\n    <details\n      ref={detailsRef}\n      class=\"replies\"\n      open={openBefore || open}\n      onToggle={(e) => {\n        const { open } = e.target;\n        // use first reply as ID\n        cachedRepliesToggle[replies[0].id] = open;\n      }}\n      style={{\n        '--comments-level': level,\n      }}\n      data-comments-level={level}\n      data-comments-level-overflow={level > 4}\n    >\n      <summary class=\"replies-summary\" hidden={open}>\n        <span class=\"avatars\">\n          {accounts.map((a) => (\n            <Avatar\n              key={a.id}\n              url={a.avatarStatic}\n              title={`${a.displayName} @${a.username}`}\n              squircle={a?.bot}\n            />\n          ))}\n        </span>\n        <span>\n          <span title={replies.length}>{shortenNumber(replies.length)}</span>{' '}\n          repl\n          {replies.length === 1 ? 'y' : 'ies'}\n        </span>\n        {!sameCount && totalComments > 1 && (\n          <>\n            {' '}\n            &middot;{' '}\n            <span>\n              <span title={totalComments}>{shortenNumber(totalComments)}</span>{' '}\n              comment\n              {totalComments === 1 ? '' : 's'}\n            </span>\n          </>\n        )}\n      </summary>\n      <ul>\n        {replies.map((r) => (\n          <li key={r.id}>\n            <Link\n              class=\"status-link\"\n              to={instance ? `/${instance}/s/${r.id}` : `/s/${r.id}`}\n              onClick={() => {\n                resetScrollPosition(r.id);\n              }}\n            >\n              {/* <div class=\"status-focus\" tabIndex={0}> */}\n              <Status\n                statusID={r.id}\n                instance={instance}\n                withinContext\n                size=\"s\"\n                enableTranslate\n                onMediaClick={handleMediaClick}\n              />\n              {!r.replies?.length && r.repliesCount > 0 && (\n                <div class=\"replies-link\">\n                  <Icon icon=\"comment\" />{' '}\n                  <span title={r.repliesCount}>\n                    {shortenNumber(r.repliesCount)}\n                  </span>\n                </div>\n              )}\n              {/* </div> */}\n            </Link>\n            {r.replies?.length && (\n              <SubComments\n                instance={instance}\n                replies={r.replies}\n                level={level + 1}\n                accWeight={!open ? r.weight : totalWeight}\n                openAll={openAll}\n              />\n            )}\n          </li>\n        ))}\n      </ul>\n    </details>\n  );\n}\n\nconst MEDIA_VIRTUAL_LENGTH = 140;\nconst POLL_VIRTUAL_LENGTH = 35;\nconst CARD_VIRTUAL_LENGTH = 70;\nconst WEIGHT_SEGMENT = 140;\nconst statusWeightCache = new Map();\nfunction calcStatusWeight(status) {\n  const cachedWeight = statusWeightCache.get(status.id);\n  if (cachedWeight) return cachedWeight;\n  const { spoilerText, content, mediaAttachments, poll, card } = status;\n  const length = htmlContentLength(spoilerText + content);\n  const mediaLength = mediaAttachments?.length ? MEDIA_VIRTUAL_LENGTH : 0;\n  const pollLength = (poll?.options?.length || 0) * POLL_VIRTUAL_LENGTH;\n  const cardLength =\n    card && (mediaAttachments?.length || poll?.options?.length)\n      ? 0\n      : CARD_VIRTUAL_LENGTH;\n  const totalLength = length + mediaLength + pollLength + cardLength;\n  const weight = totalLength / WEIGHT_SEGMENT;\n  statusWeightCache.set(status.id, weight);\n  return weight;\n}\n\nexport default memo(StatusPage);\n","import { useParams } from 'react-router-dom';\n\nimport Status from './status';\n\nexport default function StatusRoute() {\n  const params = useParams();\n  const { id, instance } = params;\n  return <Status id={id} instance={instance} />;\n}\n","export default \"__VITE_ASSET__9f719d7a__\"","export default \"__VITE_ASSET__dbb57588__\"","export default \"__VITE_ASSET__61903085__\"","export default \"__VITE_ASSET__f411f03b__\"","export default \"__VITE_ASSET__57516dc0__\"","export default \"__VITE_ASSET__0bd95074__\"","import './welcome.css';\n\nimport boostsCarouselUrl from '../assets/features/boosts-carousel.jpg';\nimport groupedNotificationsUrl from '../assets/features/grouped-notifications.jpg';\nimport multiColumnUrl from '../assets/features/multi-column.jpg';\nimport multiHashtagTimelineUrl from '../assets/features/multi-hashtag-timeline.jpg';\nimport nestedCommentsThreadUrl from '../assets/features/nested-comments-thread.jpg';\nimport logoText from '../assets/logo-text.svg';\nimport logo from '../assets/logo.svg';\n\nimport Link from '../components/link';\nimport states from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nfunction Welcome() {\n  useTitle(null, ['/', '/welcome']);\n  return (\n    <main id=\"welcome\">\n      <div class=\"hero-container\">\n        <h1>\n          <img\n            src={logo}\n            alt=\"\"\n            width=\"200\"\n            height=\"200\"\n            style={{\n              aspectRatio: '1/1',\n              marginBlockEnd: -16,\n            }}\n          />\n          <img src={logoText} alt=\"Phanpy\" width=\"250\" />\n        </h1>\n        <p>\n          <big>\n            <b>\n              <Link to=\"/login\" class=\"button\">\n                Log in\n              </Link>\n            </b>\n          </big>\n        </p>\n        <p class=\"desc\">A minimalistic opinionated Mastodon web client.</p>\n      </div>\n      <div id=\"why-container\">\n        <div class=\"sections\">\n          <section>\n            <img\n              src={boostsCarouselUrl}\n              alt=\"Screenshot of Boosts Carousel\"\n              loading=\"lazy\"\n            />\n            <h4>Boosts Carousel</h4>\n            <p>\n              Visually separate original posts and re-shared posts (boosted\n              posts).\n            </p>\n          </section>\n          <section>\n            <img\n              src={nestedCommentsThreadUrl}\n              alt=\"Screenshot of nested comments thread\"\n              loading=\"lazy\"\n            />\n            <h4>Nested comments thread</h4>\n            <p>Effortlessly follow conversations. Semi-collapsible replies.</p>\n          </section>\n          <section>\n            <img\n              src={groupedNotificationsUrl}\n              alt=\"Screenshot of grouped notifications\"\n              loading=\"lazy\"\n            />\n            <h4>Grouped notifications</h4>\n            <p>\n              Similar notifications are grouped and collapsed to reduce clutter.\n            </p>\n          </section>\n          <section>\n            <img\n              src={multiColumnUrl}\n              alt=\"Screenshot of multi-column UI\"\n              loading=\"lazy\"\n            />\n            <h4>Single or multi-column</h4>\n            <p>\n              By default, single column for zen-mode seekers. Configurable\n              multi-column for power users.\n            </p>\n          </section>\n          <section>\n            <img\n              src={multiHashtagTimelineUrl}\n              alt=\"Screenshot of multi-hashtag timeline with a form to add more hashtags\"\n              loading=\"lazy\"\n            />\n            <h4>Multi-hashtag timeline</h4>\n            <p>Up to 5 hashtags combined into a single timeline.</p>\n          </section>\n        </div>\n      </div>\n      <hr />\n      <p>\n        <a href=\"https://github.com/cheeaun/phanpy\" target=\"_blank\">\n          Built\n        </a>{' '}\n        by{' '}\n        <a\n          href=\"https://mastodon.social/@cheeaun\"\n          target=\"_blank\"\n          onClick={(e) => {\n            e.preventDefault();\n            states.showAccount = 'cheeaun@mastodon.social';\n          }}\n        >\n          @cheeaun\n        </a>\n        .{' '}\n        <a\n          href=\"https://github.com/cheeaun/phanpy/blob/main/PRIVACY.MD\"\n          target=\"_blank\"\n        >\n          Privacy Policy\n        </a>\n        .\n      </p>\n    </main>\n  );\n}\n\nexport default Welcome;\n","// Replace alert() with toastify-js\nimport Toastify from 'toastify-js';\n\nconst nativeAlert = window.alert;\nif (!window.__nativeAlert) window.__nativeAlert = nativeAlert;\n\nwindow.alert = function (message) {\n  console.debug(\n    'ALERT: This is a custom alert() function. Native alert() is still available as window.__nativeAlert()',\n  );\n  // If Error object, show the message\n  if (message instanceof Error && message?.message) {\n    message = message.message;\n  }\n  // If not string, stringify it\n  if (typeof message !== 'string') {\n    message = JSON.stringify(message);\n  }\n\n  const toast = Toastify({\n    text: message,\n    className: 'alert',\n    gravity: 'top',\n    position: 'center',\n    duration: 10_000,\n    offset: {\n      y: 48,\n    },\n    onClick: () => {\n      toast.hideToast();\n    },\n  });\n  toast.showToast();\n};\n","import './app.css';\n\nimport debounce from 'just-debounce-it';\nimport {\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'preact/hooks';\nimport { matchPath, Route, Routes, useLocation } from 'react-router-dom';\nimport 'swiped-events';\nimport { subscribe } from 'valtio';\n\nimport BackgroundService from './components/background-service';\nimport ComposeButton from './components/compose-button';\nimport { ICONS } from './components/icon';\nimport KeyboardShortcutsHelp from './components/keyboard-shortcuts-help';\nimport Loader from './components/loader';\nimport Modals from './components/modals';\nimport NotificationService from './components/notification-service';\nimport SearchCommand from './components/search-command';\nimport Shortcuts from './components/shortcuts';\nimport NotFound from './pages/404';\nimport AccountStatuses from './pages/account-statuses';\nimport Bookmarks from './pages/bookmarks';\nimport Favourites from './pages/favourites';\nimport FollowedHashtags from './pages/followed-hashtags';\nimport Following from './pages/following';\nimport Hashtag from './pages/hashtag';\nimport Home from './pages/home';\nimport HttpRoute from './pages/http-route';\nimport List from './pages/list';\nimport Lists from './pages/lists';\nimport Login from './pages/login';\nimport Mentions from './pages/mentions';\nimport Notifications from './pages/notifications';\nimport Public from './pages/public';\nimport Search from './pages/search';\nimport StatusRoute from './pages/status-route';\nimport Trending from './pages/trending';\nimport Welcome from './pages/welcome';\nimport {\n  api,\n  initAccount,\n  initClient,\n  initInstance,\n  initPreferences,\n} from './utils/api';\nimport { getAccessToken } from './utils/auth';\nimport focusDeck from './utils/focus-deck';\nimport states, { initStates } from './utils/states';\nimport store from './utils/store';\nimport { getCurrentAccount } from './utils/store-utils';\nimport './utils/toast-alert';\n\nwindow.__STATES__ = states;\nwindow.__STATES_STATS__ = () => {\n  const keys = [\n    'statuses',\n    'accounts',\n    'spoilers',\n    'unfurledLinks',\n    'statusQuotes',\n  ];\n  const counts = {};\n  keys.forEach((key) => {\n    counts[key] = Object.keys(states[key]).length;\n  });\n  console.warn('STATE stats', counts);\n};\n\n// Preload icons\n// There's probably a better way to do this\n// Related: https://github.com/vitejs/vite/issues/10600\nsetTimeout(() => {\n  for (const icon in ICONS) {\n    if (Array.isArray(ICONS[icon])) {\n      ICONS[icon][0]?.();\n    } else {\n      ICONS[icon]?.();\n    }\n  }\n}, 5000);\n\n(() => {\n  window.__IDLE__ = true;\n  const nonIdleEvents = [\n    'mousemove',\n    'mousedown',\n    'resize',\n    'keydown',\n    'touchstart',\n    'pointerdown',\n    'pointermove',\n    'wheel',\n  ];\n  const setIdle = () => {\n    window.__IDLE__ = true;\n  };\n  const IDLE_TIME = 3_000; // 3 seconds\n  const debouncedSetIdle = debounce(setIdle, IDLE_TIME);\n  const onNonIdle = () => {\n    window.__IDLE__ = false;\n    debouncedSetIdle();\n  };\n  nonIdleEvents.forEach((event) => {\n    window.addEventListener(event, onNonIdle, {\n      passive: true,\n      capture: true,\n    });\n  });\n  window.addEventListener('blur', setIdle, {\n    passive: true,\n  });\n  // When cursor leaves the window, set idle\n  document.documentElement.addEventListener(\n    'mouseleave',\n    (e) => {\n      if (!e.relatedTarget && !e.toElement) {\n        setIdle();\n      }\n    },\n    {\n      passive: true,\n    },\n  );\n  // document.addEventListener(\n  //   'visibilitychange',\n  //   () => {\n  //     if (document.visibilityState === 'visible') {\n  //       onNonIdle();\n  //     }\n  //   },\n  //   {\n  //     passive: true,\n  //   },\n  // );\n})();\n\nsubscribe(states, (changes) => {\n  for (const [action, path, value, prevValue] of changes) {\n    // Change #app dataset based on settings.shortcutsViewMode\n    if (path.join('.') === 'settings.shortcutsViewMode') {\n      const $app = document.getElementById('app');\n      if ($app) {\n        $app.dataset.shortcutsViewMode = states.shortcuts?.length ? value : '';\n      }\n    }\n\n    // Add/Remove cloak class to body\n    if (path.join('.') === 'settings.cloakMode') {\n      const $body = document.body;\n      $body.classList.toggle('cloak', value);\n    }\n  }\n});\n\nfunction App() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [uiState, setUIState] = useState('loading');\n\n  useLayoutEffect(() => {\n    const theme = store.local.get('theme');\n    if (theme) {\n      document.documentElement.classList.add(`is-${theme}`);\n      document\n        .querySelector('meta[name=\"color-scheme\"]')\n        .setAttribute('content', theme === 'auto' ? 'dark light' : theme);\n    }\n    const textSize = store.local.get('textSize');\n    if (textSize) {\n      document.documentElement.style.setProperty(\n        '--text-size',\n        `${textSize}px`,\n      );\n    }\n  }, []);\n\n  useEffect(() => {\n    const instanceURL = store.local.get('instanceURL');\n    const code = decodeURIComponent(\n      (window.location.search.match(/code=([^&]+)/) || [, ''])[1],\n    );\n\n    if (code) {\n      console.log({ code });\n      // Clear the code from the URL\n      window.history.replaceState({}, document.title, location.pathname || '/');\n\n      const clientID = store.session.get('clientID');\n      const clientSecret = store.session.get('clientSecret');\n      const vapidKey = store.session.get('vapidKey');\n\n      (async () => {\n        setUIState('loading');\n        const { access_token: accessToken } = await getAccessToken({\n          instanceURL,\n          client_id: clientID,\n          client_secret: clientSecret,\n          code,\n        });\n\n        const client = initClient({ instance: instanceURL, accessToken });\n        await Promise.allSettled([\n          initInstance(client, instanceURL),\n          initAccount(client, instanceURL, accessToken, vapidKey),\n        ]);\n        initStates();\n        initPreferences(client);\n\n        setIsLoggedIn(true);\n        setUIState('default');\n      })();\n    } else {\n      window.__IGNORE_GET_ACCOUNT_ERROR__ = true;\n      const account = getCurrentAccount();\n      if (account) {\n        store.session.set('currentAccount', account.info.id);\n        const { client } = api({ account });\n        const { instance } = client;\n        // console.log('masto', masto);\n        initStates();\n        initPreferences(client);\n        setUIState('loading');\n        (async () => {\n          try {\n            await initInstance(client, instance);\n          } catch (e) {\n          } finally {\n            setIsLoggedIn(true);\n            setUIState('default');\n          }\n        })();\n      } else {\n        setUIState('default');\n      }\n    }\n  }, []);\n\n  let location = useLocation();\n  states.currentLocation = location.pathname;\n  // useLayoutEffect(() => {\n  //   states.currentLocation = location.pathname;\n  // }, [location.pathname]);\n\n  useEffect(focusDeck, [location, isLoggedIn]);\n\n  if (/\\/https?:/.test(location.pathname)) {\n    return <HttpRoute />;\n  }\n\n  return (\n    <>\n      <PrimaryRoutes isLoggedIn={isLoggedIn} loading={uiState === 'loading'} />\n      <SecondaryRoutes isLoggedIn={isLoggedIn} />\n      {uiState === 'default' && (\n        <Routes>\n          <Route path=\"/:instance?/s/:id\" element={<StatusRoute />} />\n        </Routes>\n      )}\n      {isLoggedIn && <ComposeButton />}\n      {isLoggedIn && <Shortcuts />}\n      <Modals />\n      {isLoggedIn && <NotificationService />}\n      <BackgroundService isLoggedIn={isLoggedIn} />\n      {uiState !== 'loading' && <SearchCommand onClose={focusDeck} />}\n      <KeyboardShortcutsHelp />\n    </>\n  );\n}\n\nfunction PrimaryRoutes({ isLoggedIn, loading }) {\n  const location = useLocation();\n  const nonRootLocation = useMemo(() => {\n    const { pathname } = location;\n    return !/^\\/(login|welcome)/.test(pathname);\n  }, [location]);\n\n  return (\n    <Routes location={nonRootLocation || location}>\n      <Route\n        path=\"/\"\n        element={\n          isLoggedIn ? (\n            <Home />\n          ) : loading ? (\n            <Loader id=\"loader-root\" />\n          ) : (\n            <Welcome />\n          )\n        }\n      />\n      <Route path=\"/login\" element={<Login />} />\n      <Route path=\"/welcome\" element={<Welcome />} />\n    </Routes>\n  );\n}\n\nfunction getPrevLocation() {\n  return states.prevLocation || null;\n}\nfunction SecondaryRoutes({ isLoggedIn }) {\n  // const snapStates = useSnapshot(states);\n  const location = useLocation();\n  // const prevLocation = snapStates.prevLocation;\n  const backgroundLocation = useRef(getPrevLocation());\n\n  const isModalPage = useMemo(() => {\n    return (\n      matchPath('/:instance/s/:id', location.pathname) ||\n      matchPath('/s/:id', location.pathname)\n    );\n  }, [location.pathname, matchPath]);\n  if (isModalPage) {\n    if (!backgroundLocation.current)\n      backgroundLocation.current = getPrevLocation();\n  } else {\n    backgroundLocation.current = null;\n  }\n  console.debug({\n    backgroundLocation: backgroundLocation.current,\n    location,\n  });\n\n  return (\n    <Routes location={backgroundLocation.current || location}>\n      {isLoggedIn && (\n        <>\n          <Route path=\"/notifications\" element={<Notifications />} />\n          <Route path=\"/mentions\" element={<Mentions />} />\n          <Route path=\"/following\" element={<Following />} />\n          <Route path=\"/b\" element={<Bookmarks />} />\n          <Route path=\"/f\" element={<Favourites />} />\n          <Route path=\"/l\">\n            <Route index element={<Lists />} />\n            <Route path=\":id\" element={<List />} />\n          </Route>\n          <Route path=\"/ft\" element={<FollowedHashtags />} />\n        </>\n      )}\n      <Route path=\"/:instance?/t/:hashtag\" element={<Hashtag />} />\n      <Route path=\"/:instance?/a/:id\" element={<AccountStatuses />} />\n      <Route path=\"/:instance?/p\">\n        <Route index element={<Public />} />\n        <Route path=\"l\" element={<Public local />} />\n      </Route>\n      <Route path=\"/:instance?/trending\" element={<Trending />} />\n      <Route path=\"/:instance?/search\" element={<Search />} />\n      {/* <Route path=\"/:anything\" element={<NotFound />} /> */}\n    </Routes>\n  );\n}\n\nexport { App };\n","import './index.css';\n\nimport './cloak-mode.css';\n\nimport { render } from 'preact';\nimport { HashRouter } from 'react-router-dom';\n\nimport { App } from './app';\n\nif (import.meta.env.DEV) {\n  import('preact/debug');\n}\n\n// AbortSignal.timeout polyfill\n// Temporary fix from https://github.com/mo/abortcontroller-polyfill/issues/73#issuecomment-1541180943\n// Incorrect implementation, but should be good enough for now\nif ('AbortSignal' in window) {\n  AbortSignal.timeout =\n    AbortSignal.timeout ||\n    ((duration) => {\n      const controller = new AbortController();\n      setTimeout(() => controller.abort(), duration);\n      return controller.signal;\n    });\n}\n\nrender(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('app'),\n);\n\n// Storage cleanup\nsetTimeout(() => {\n  try {\n    // Clean up iconify localStorage\n    Object.keys(localStorage).forEach((key) => {\n      if (key.startsWith('iconify')) {\n        localStorage.removeItem(key);\n      }\n    });\n    Object.keys(sessionStorage).forEach((key) => {\n      if (key.startsWith('iconify')) {\n        sessionStorage.removeItem(key);\n      }\n    });\n\n    // Clean up old settings key\n    localStorage.removeItem('settings:boostsCarousel');\n  } catch (e) {}\n}, 5000);\n\nwindow.__CLOAK__ = () => {\n  document.body.classList.toggle('cloak');\n};\n"],"names":["usePageVisibility","fn","deps","savedCallback","useRef","useEffect","current","handleVisibilityChange","hidden","document","visibilityState","console","STREAMING_TIMEOUT","POLL_INTERVAL","BackgroundService","memo","isLoggedIn","visible","setVisible","useState","checkLatestNotification","masto","instance","skipCheckMarkers","states","notificationsLast","notificationsIterator","v1","notifications","list","limit","sinceId","id","value","next","length","notificationsShowNew","lastReadId","markers","fetch","timeline","sub","pollNotifications","streaming","api","hasStreaming","setTimeout","user","notification","subscribe","log","entry","_a","lastCheckDate","clearTimeout","clearInterval","r","info","visible2","useInterval","catch","checkForUpdates","useHotkeys","currentCloakMode","diff","showToast","ComposeButton","handleButton","e","shiftKey","openCompose","alert","showCompose","ignoreEventWhen","querySelector","_jsx","type","onClick","children","Icon","icon","size","alt","KeyboardShortcutsHelp","snapStates","useSnapshot","onClose","showKeyboardShortcutsHelp","hasModal","escRef","Modal","class","_jsxs","tabindex","ref","action","keys","_Fragment","map","Accounts","accounts","store","local","getJSON","currentAccount","session","get","moreThanOneAccount","_","reload","useReducer","x","accountsListParent","useAutoAnimate","tabIndex","account","i","isCurrent","isDefault","Avatar","url","avatarStatic","onDblClick","$select","NameText","test","showAcct","set","Menu","align","menuButton","title","MenuItem","MenuDivider","disabled","splice","MenuConfirm","subMenu","confirmLabel","menuItemClassName","href","Link","to","logo","createBackendPushSubscription","subscription","push","create","fetchBackendPushSubscription","updateBackendPushSubscription","update","removeBackendPushSubscription","remove","isPushSupported","navigator","window","getRegistration","serviceWorker","getSubscription","registration","pushManager","undefined","urlBase64ToUint8Array","base64String","padding","repeat","base64","replace","rawData","atob","outputArray","Uint8Array","charCodeAt","initSubscription","backendSubscription","err","message","sameEndpoint","vapidKey","sameKey","getCurrentAccount","applicationServerKey","vapidKeyStr","applicationServerKeyStr","updateSubscription","data","policy","removeSubscription","userVisibleOnly","DEFAULT_TEXT_SIZE","TEXT_SIZES","Settings","currentTheme","themeFormRef","targetLanguage","settings","contentTranslationTargetLanguage","systemTargetLanguage","getTranslateTargetLanguage","systemTargetLanguageText","localeCode2Text","currentTextSize","prefs","setPrefs","authenticated","onInput","formData","FormData","theme","html","classList","toggle","name","defaultChecked","fontSize","min","max","step","parseInt","documentElement","setProperty","for","target","source","rel","checked","autoRefresh","boostsCarousel","contentTranslation","onChange","targetLanguages","lang","code","contentTranslationHideLanguages","contentTranslationAutoInline","cloakMode","PushNotificationsSection","style","display","gap","lineHeight","src","width","aspectRatio","verticalAlign","borderRadius","showAccount","__BUILD_TIME__","readOnly","writeText","datetime","uiState","setUIState","allowNofitications","setAllowNotifications","setNeedRelogin","pushFormRef","needRelogin","alerts","previousPolicyRef","policyEl","elements","namedItem","Object","el","warn","values","params","mention","favourite","reblog","follow","follow_request","poll","status","key","policyChanged","alertsCount","permission","isLoading","Notification","label","alert2","focusDeck","timer","columns","getElementById","modals","querySelectorAll","modal","modalFocusElement","focus","backDrop","pages","page","useLocationChange","location","useLocation","currentLocationRef","pathname","ListAddEdit","editMode","nameFieldRef","repliesPolicyFieldRef","exclusiveFieldRef","repliesPolicy","exclusive","supportsExclusive","supports","onSubmit","preventDefault","listResult","replies_policy","MUTE_DURATIONS","MUTE_DURATIONS_LABELS","LIMIT","ACCOUNT_INFO_MAX_AGE","fetchFamiliarFollowers","currentID","familiarFollowers","memFetchFamiliarFollowers","pmem","maxAge","fetchPostingStats","accountID","fetchStatuses","statuses","total","originals","replies","stats","boosts","memFetchPostingStats","fetchAccount","standalone","currentMasto","currentInstance","isString","sameCurrentInstance","useMemo","setInfo","info2","acct","avatar","bot","createdAt","displayName","emojis","fields","group","lastStatusAt","locked","note","statusesCount","username","memorial","moved","roles","header","headerStatic","headerIsAvatar","accountInstance","headerCornerColors","hostname","domain","setHeaderCornerColors","followersIterator","familiarFollowersCache","firstLoad","isSelf","results","newValue","account2","familiar","fetchFollowing","followingIterator","LinkOrDiv","setFamiliarFollowers","accountLink","hasPostingStats","renderFamiliarFollowers","FAMILIAR_FOLLOWERS_LIMIT","setPostingStats","setPostingStatsUIState","useCallback","onRelationshipChange","relationship","following","crossOrigin","ctx","canvas","add","createElement","getContext","pixelDimension","willReadFrequently","g","height","colors","getImageData","b","a","dataLength","color","lightenRGB","rgbColors","external","internal","role","enhanceContent","dir","handleContentLinks","__html","verifiedAt","EmojiText","fetchFollowers","follower","showGenericAccounts","heading","fetchAccounts","followersCount","followingCount","shortenNumber","niceDateTime","postingStats","round","postingStatsUIState","renderPostingStats","RelatedActions","setRelationshipUIState","setRelationship","endorsed","showingReblogs","notifying","followedBy","blocking","blockedBy","muting","mutingNotifications","requested","domainBlocking","privateNote","currentInfo","acctHasInstance","setCurrentInfo","sameInstance","q","setIsSelf","relationships","relationship2","loading","setShowTranslatedBio","showAddRemoveLists","setShowAddRemoveLists","setShowPrivateNoteModal","updateAccount","menuInstanceRef","showTranslatedBio","showPrivateNoteModal","_b","instanceRef","portal","body","currentAuthenticated","draftStatus","niceAccountURL","clipboard","newRelationship","SubMenu","counter","error","direction","duration","Loader","TranslatedBioSheet","PrivateNoteSheet","luminence","alpha","path","host","Math","getHTMLText","text","fieldsText","urlObj","lists","setLists","setListsContainingAccount","c","lists2","listsContainingAccount2","forceTranslate","reloadCount","AddRemoveListsSheet","setShowListAddEditModal","localeCompare","listsContainingAccount","inList","showListAddEditModal","accountIds","result","textareaRef","initialNote","e2","trim","AccountSheet","propInstance","AccountInfo","lookup","skip_webfinger","v2","search","resolve","URL","Drafts","drafts","setDrafts","db","ns","getCurrentAccountNS","ownKeys","filter","startsWith","getMany","sort","Date","updatedAt","getTime","hasDrafts","abrupt","draft","replyTo","updatedAtDate","replyToStatus","MiniDraft","spoilerText","mediaAttachments","hasPoll","options","hasMedia","firstImageMedia","media","image","file","objectURL","createObjectURL","hasPollOrMedia","GenericAccounts","setAccounts","showMore","setShowMore","staticAccounts","showReactions","loadAccounts","done","Array","isArray","prev","reloadGenericAccounts","AccountBlock","_types","InView","MediaAltModal","setForceTranslate","differentLanguage","localeMatch","find","l","whiteSpace","TranslationBlock","sourceLanguage","clamp","gammaToLinear","pow","linearToGamma","rgb2oklab","m","s","cbrt","oklab2rgb","L","MediaModal","statusID","index","carouselRef","currentIndex","setCurrentIndex","carouselFocusItem","useLayoutEffect","scrollIntoView","prevStatusID","scrollLeft","clientWidth","differentStatusID","scrollTo","left","behavior","showControls","setShowControls","handleSwipe","addEventListener","removeEventListener","handleScroll","passive","contains","blurhash","accentColor","averageColor","getBlurHashAverageColor","labAverageColor","join","description","showMediaAlt","Media","showOriginal","stopPropagation","overflow","position","boundingBoxPadding","menuClassName","MenuLink","remoteUrl","matchMedia","matches","floatingButtonUrl","multiColumnUrl$1","tabMenuBarUrl","AsyncText","setText","Promise","then","SHORTCUTS_LIMIT","TYPES","TYPE_TEXT","public","bookmarks","favourites","hashtag","trending","mentions","TYPE_PARAMS","placeholder","notRequired","pattern","SHORTCUTS_META","subtitle","query","split","ShortcutsSettings","shortcuts","followedHashtags","setFollowedHashtags","showForm","setShowForm","showImportExport","setShowImportExport","shortcutsListParent","iterator","tags","imgURL","multiColumnUrl","shortcut","shortcutsArr","temp","justifyContent","alignItems","shortcutIndex","ImportExport","currentType","formRef","form","input","forEach","setCurrentType","mode","required","defaultValue","tag","spellcheck","shortcutsStr","parsedImportShortcutStr","setImportUIState","importUIState","decompressFromEncodedURIComponent","importShortcutStr","parsed","JSON","hasCurrentSettings","setImportShortcutStr","opacity","some","nonUniqueShortcuts","menuFooter","every","exceededLimit","newShortcuts","share","changes","prevValue","Modals","navigate","useNavigate","Compose","__COMPOSE__","editStatus","newStatus","reloadStatusPage","post","reply","edit","delay","toast","hideToast","prevLocation","showSettings","showAccounts","destination","showDrafts","showMediaModal","currentTarget","showShortcutsSettings","FollowRequestButtons","requestState","setRequestState","hasRelationship","followRequests","authorize","Error","NOTIFICATION_ICONS","contentText","count","reblog_reply","favourite_reply","targetAccount","AVATARS_LIMIT","isStatic","report","_accounts","_statuses","actualStatus","actualStatusID","isVoted","voted","isReplyToOthers","inReplyToAccountId","favsCount","reblogsCount","includes","showAvatar","formattedCreatedAt","toLocaleString","genericAccountsHeading","handleOpenGenericAccounts","debug","RelativeTime","format","Fragment","type2","status2","Status","TruncatedLink","dispatchEvent","clientX","clientY","props","useTruncated","NotificationService","routeNotification","accessToken","setShowNotificationSheet","showNotificationSheet","getAccountByAccessToken","isFollow","notificationAccount","hasAccount","hasStatus","event","id2","hash","accessToken2","handleMessage","clearAppBadge","tagName","instanceURL","SearchForm","forwardRef","searchParams","setSearchParams","useSearchParams","searchMenuOpen","setSearchMenuOpen","setQuery","searchFieldRef","useImperativeHandle","setValue","select","blur","encodeURIComponent","autocomplete","autocorrect","autocapitalize","onSearch","onFocus","onBlur","onKeyDown","focusItem","nextItem","nextElementSibling","from","parentElement","firstItem","prevItem","previousElementSibling","lastItem","click","top","SearchCommand","showSearch","setShowSearch","searchFormRef","isSearchPage","closeSearch","enabled","enableOnFormTags","Shortcuts","shortcutsColumnsMode","shortcutsViewMode","menuRef","formattedShortcuts","pin","Boolean","handler","closeMenu","updatesButton","viewScroll","Menu2","containerProps","useWindowSize","safeBoundingBoxPadding","repositionFlag","groupBoosts","newValues","boostStash","serialBoosts","item","boostStashID","items","half","floor","slice","dedupeBoosts","boostedStatusIDs","filteredItems","statusKey","boosterID","groupContext","contexts","contextIndex","t","repliedItem","j","self","context","inReplyToId","firstItemAccountID","newItems","appliedContextIndices","contextItems","aDate","bDate","i2","useScroll","scrollableRef","distanceFromStart","distanceFromEnd","scrollThresholdStart","scrollThresholdEnd","distanceFromStartPx","_distanceFromStartPx","distanceFromEndPx","_distanceFromEndPx","scrollDirection","setScrollDirection","reachStart","setReachStart","reachEnd","setReachEnd","nearReachStart","setNearReachStart","nearReachEnd","setNearReachEnd","isVertical","scrollableElement","previousScrollStart","scrollTop","onScroll","scrollHeight","scrollWidth","clientHeight","scrollStart","scrollDimension","clientDimension","scrollDistance","abs","init","Event","MediaPost","className","parent","allowFilters","onMediaClick","sKey","accountId","accountURL","accountEmojis","repliesCount","reblogged","favourited","favouritesCount","bookmarked","muted","sensitive","visibility","language","editedAt","filtered","card","content","uri","_deleted","_pinned","_filtered","debugHover","hasSpoiler","Parent","mediaKey","NavMenu","setCurrentAccount","setMoreThanOneAccount","acc","showFollowing","bindLongPress","useLongPress","threshold","detect","cancelOnMovement","buttonRef","menuState","setMenuState","mutesIterator","fetchMutes","mutes","blocksIterator","fetchBlocks","blocks","open","state","onContextMenu","squircle","ControlledMenu","anchorRef","zIndex","unmountOnClose","appVersion","commitHash","__COMMIT_HASH__","confirm","scrollIntoViewOptions","block","inline","Timeline","titleComponent","emptyText","errorText","useItemID","fetchItems","checkForUpdatesInterval","headerStart","headerEnd","timelineStart","refresh","view","setItems","showNew","setShowNew","allowGrouping","loadItems","useDebouncedCallback","items2","itemsSelector","jRef","activeItem","activeItemRect","closest","getBoundingClientRect","allItems","activeItemIndex","indexOf","itemRect","topmostItem","kRef","findLast","oRef","prevView","disableIdleCheck","loadOrCheckUpdates","inBackground","noPointers","__IDLE__","timeDiff","hasUpdate","lastHiddenTime","node","hiddenUI","TimelineItem","inView","isCarousel","StatusCarousel","statusID2","reblog2","actualStatusID2","url2","isSpoiler","showCompact","_differentAuthor","manyItems","isMiddle","TimelineStatusCompact","itemKey","statusPeekText","statusThreadNumber","MIN_YEAR","MIN_YEAR_MONTH","supportsInputMonth","setAttribute","_isSearchEnabled","isSearchEnabled","AccountStatuses","useParams","month","excludeReplies","excludeBoosts","tagged","accountStatusesIterator","allSearchParams","setAccount","searchOffsetRef","searchEnabled","setSearchEnabled","isValidMonth","_year","_month","monthIndex","after","afterStr","before","beforeStr","searchResults","saveStatus","value2","offset","pinnedStatuses","pinnedStatusesIds","exclude_replies","fetchPromise","fetchAccountPromiseRef","setFeaturedTags","useTitle","cachedAccount","featuredTags","accountInfoMemo","filterBarRef","TimelineStart","validity","active","allowSwitch","offsetLeft","fetchAccountStatuses","masto2","yearFieldRef","checkValidity","year","minYear","minMonth","maxYear","maxMonth","monthFieldRef","valid","toString","Bookmarks","bookmarksIterator","fetchBookmarks","Favourites","favouritesIterator","fetchFavourites","FollowedHashtags","followedTags","filteredItem","filterContext","currentAccountID","appliedFilters","f","hasContext","expiresAt","filterAction","isHidden","filterTitles","isWarn","titlesStr","Following","homeIterator","latestItem","payload","fetchHome","TAGS_LIMIT_PER_MODE","TOTAL_TAGS_LIMIT","Hashtags","mediaView","columnMode","hashtags","linkParams","hashtagTitle","hashtagPostTitle","maxID","fetchHashtags","timelines","any","maxId","onlyMedia","skipThreading","since_id","followUIState","setFollowUIState","reachLimit","setDownOverflow","finally","MenuHeader","FocusableItem","newHashtag","MenuGroup","exists","newInstance","List","listIterator","fetchList","setList","showManageMembersModal","setShowManageMembersModal","ListManageMembers","MEMBERS_LIMIT","listID","members","setMembers","membersIterator","fetchMembers","member","as","RemoveAddButton","removed","setRemoved","emptySearchParams","URLSearchParams","Mentions","stateType","setStateType","mentionsIterator","fetchMentions","types","conversationsIterator","latestConversationItem","lastStatus","fetchConversations","args","notificationTypeKeys","fixNotifications","groupNotifications","notificationsMap","cleanNotifications","virtualType","date","mappedNotification","mappedAccount","n","cleanNotifications2","notificationsMap2","Notifications","notificationID","notificationAccessToken","onlyMentions","setOnlyMentions","setFollowRequests","announcements","setAnnouncements","excludeTypes","allNotifications","groupedNotifications","notificationsLastFetchTime","fetchFollowRequests","loadFollowRequests","requests","fetchAnnouncements","loadNotifications","fetchNotificationsPromise","fetchNotifications","fetchFollowRequestsPromise","announcements2","fetchAnnouncementsPromise","loadUpdates","unsub","subscribeKey","v","todayDate","yesterdayDate","currentDay","showTodayEmpty","announcementsListRef","announcement","AnnouncementBlock","notificationDay","differentDay","contact","getCurrentInstance","contactAccount","published","read","startsAt","endsAt","allDay","publishedAt","reactions","publishedAtDate","publishedDateText","updatedAtText","reaction","me","staticUrl","Public","isLocal","publicIterator","fetchPublic","prompt","toLowerCase","fetchLinks","trends","links","Trending","setHashtags","setLinks","trendIterator","fetchTrend","links2","link","history","cur","reduce","authorName","authorUrl","imageDescription","providerName","providerUrl","title2","Columns","components","Hashtag","Component","Home","NotificationsLink","notificationLinkRef","NotificationsMenu","NOTIFICATIONS_LIMIT","NOTIFICATIONS_DISPLAY_LIMIT","now","hasFollowRequests","setHasFollowRequests","statusRegex","statusNoteRegex","getInstanceStatusURL","match","noteId","HttpRoute","statusURL","Lists","instancesListURL","VITE_CLIENT_NAME","CLIENT_NAME","VITE_WEBSITE","WEBSITE","import","SCOPES","registerApplication","registrationParams","client_name","redirect_uris","origin","scopes","website","method","headers","json","registrationJSON","getAuthorizationURL","client_id","scope","redirect_uri","response_type","authorizationParams","authorizationURL","client_secret","grant_type","tokenResponse","Login","instanceURLRef","cachedInstanceURL","instanceText","setInstanceText","instancesList","setInstancesList","submitInstance","vapid_key","instance2","instancesSuggestions","bStartsWith","aStartsWith","textAlign","SHORT_LIMIT","Search","offsetRef","statusResults","setStatusResults","accountResults","setAccountResults","hashtagResults","setHashtagResults","setTypeResultsFunc","loadResults","filterBarParent","SUBCOMMENTS_OPEN_ALL_LIMIT","MAX_WEIGHT","cachedRepliesToggle","cachedStatusesMap","scrollPositions","resetScrollPosition","STATUSES_SELECTOR","STATUS_URL_REGEX","StatusPage","mediaParam","mediaOnlyParam","mediaIndex","showMedia","mediaStatusID","mediaStatus","getStatus","showMediaOnly","heroStatus","setHeroStatus","closeLink","matchStatusPath","matchPath","handleMediaClose","delete","StatusThread","navigation","translate","setStatuses","heroStatusRef","totalDescendants","debounce","scrollOffsets","reloadHero","heroTimer","cachedStatuses","reallyCachedStatuses","heroFetch","pRetry","contextFetch","heroStatus2","_replies","_r","expandReplies","weight","descendants","missingStatuses","ancestors2","ancestors","ancestorsIsThread","nestedDescendants","__replies","ancestor","isThread","allStatuses","offsetTop","heroLimit","setLimit","scrollPosition","threadifyStatus","newScrollTop","newScrollOffsets","contextURL","initContext","statusWeightCache","div","apiCache","heroDisplayName","heroContentText","postInstance","hasDescendants","innerHTML","heroInView","postSameInstance","allStatusLinks","activeStatus","activeStatusIndex","nextStatus","statusLink","onView","setHeroInView","heroPointer","statusLinkRect","topmostStatusLink","activeStatusRect","prevStatus","details","initialPageState","handleMediaClick","handleStatusLinkClick","descendant","thread","isHero","renderStatus","SubComments","withinContext","prevEntry","level","openAll","prevLocationIsStatusPage","entries","arr","viewMode","setViewMode","button","buttons","diveDeep","replies2","replies3","totalComments","accWeight","totalWeight","calcStatusWeight","openBefore","hasParentThread","detailsRef","sameCount","open2","shortReply","dataset","MEDIA_VIRTUAL_LENGTH","CARD_VIRTUAL_LENGTH","WEIGHT_SEGMENT","cachedWeight","htmlContentLength","mediaLength","pollLength","POLL_VIRTUAL_LENGTH","cardLength","StatusRoute","boostsCarouselUrl","groupedNotificationsUrl","multiHashtagTimelineUrl","nestedCommentsThreadUrl","logoText","Welcome","marginBlockEnd","nativeAlert","__nativeAlert","Toastify","gravity","y","__STATES__","__STATES_STATS__","counts","ICONS","_d","_c","nonIdleEvents","IDLE_TIME","setIdle","debouncedSetIdle","onNonIdle","$app","$body","App","setIsLoggedIn","textSize","decodeURIComponent","getAccessToken","clientID","access_token","clientSecret","client","initInstance","initAccount","initStates","allSettled","initPreferences","Route","element","nonRootLocation","Routes","SecondaryRoutes","backgroundLocation","getPrevLocation","isModalPage","timeout","AbortSignal","controller","AbortController","abort","signal","render","HashRouter","localStorage","removeItem","sessionStorage","__CLOAK__"],"mappings":"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"}