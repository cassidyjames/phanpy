{"version":3,"file":"main-db463dd5.js","sources":["../../src/utils/usePageVisibility.js","../../src/components/background-service.jsx","../../src/components/compose-button.jsx","../../src/components/keyboard-shortcuts-help.jsx","../../src/pages/accounts.jsx","../../src/assets/logo.svg","../../src/utils/push-notifications.js","../../src/pages/settings.jsx","../../src/utils/focus-deck.jsx","../../src/utils/useLocationChange.js","../../src/components/list-add-edit.jsx","../../src/components/account-info.jsx","../../src/components/account-sheet.jsx","../../src/components/drafts.jsx","../../src/components/generic-accounts.jsx","../../src/components/media-alt-modal.jsx","../../src/utils/color-utils.js","../../src/components/media-modal.jsx","../../src/assets/floating-button.svg","../../src/assets/multi-column.svg","../../src/assets/tab-menu-bar.svg","../../src/components/AsyncText.jsx","../../src/components/shortcuts-settings.jsx","../../src/components/modals.jsx","../../src/components/follow-request-buttons.jsx","../../src/components/notification.jsx","../../src/components/notification-service.jsx","../../src/components/search-form.jsx","../../src/components/search-command.jsx","../../src/components/shortcuts.jsx","../../src/components/menu2.jsx","../../src/utils/timeline-utils.jsx","../../src/utils/useScroll.js","../../src/components/media-post.jsx","../../src/components/nav-menu.jsx","../../src/components/timeline.jsx","../../src/pages/account-statuses.jsx","../../src/pages/bookmarks.jsx","../../src/pages/favourites.jsx","../../src/pages/followed-hashtags.jsx","../../src/pages/following.jsx","../../src/pages/hashtag.jsx","../../src/pages/list.jsx","../../src/pages/mentions.jsx","../../src/utils/group-notifications.jsx","../../src/pages/notifications.jsx","../../src/pages/public.jsx","../../src/pages/trending.jsx","../../src/components/columns.jsx","../../src/pages/home.jsx","../../src/utils/get-instance-status-url.js","../../src/pages/http-route.jsx","../../src/pages/lists.jsx","../../src/data/instances.json?url","../../src/utils/auth.js","../../src/pages/login.jsx","../../src/pages/search.jsx","../../src/pages/status.jsx","../../src/pages/status-route.jsx","../../src/assets/features/boosts-carousel.jpg","../../src/assets/features/grouped-notifications.jpg","../../src/assets/features/multi-column.jpg","../../src/assets/features/multi-hashtag-timeline.jpg","../../src/assets/features/nested-comments-thread.jpg","../../src/assets/logo-text.svg","../../src/pages/welcome.jsx","../../src/utils/toast-alert.js","../../src/app.jsx","../../src/main.jsx"],"sourcesContent":["import { useEffect, useRef } from 'preact/hooks';\n\nexport default function usePageVisibility(fn = () => {}, deps = []) {\n  const savedCallback = useRef(fn);\n  useEffect(() => {\n    savedCallback.current = fn;\n  }, [deps]);\n\n  useEffect(() => {\n    const handleVisibilityChange = () => {\n      const hidden = document.hidden || document.visibilityState === 'hidden';\n      console.log('👀 Page visibility changed', hidden ? 'hidden' : 'visible');\n      savedCallback.current(!hidden);\n    };\n\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    return () =>\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n  }, []);\n}\n","import { memo } from 'preact/compat';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\n\nimport { api } from '../utils/api';\nimport showToast from '../utils/show-toast';\nimport states, { saveStatus } from '../utils/states';\nimport useInterval from '../utils/useInterval';\nimport usePageVisibility from '../utils/usePageVisibility';\n\nconst STREAMING_TIMEOUT = 1000 * 3; // 3 seconds\nconst POLL_INTERVAL = 15_000; // 15 seconds\n\nexport default memo(function BackgroundService({ isLoggedIn }) {\n  // Notifications service\n  // - WebSocket to receive notifications when page is visible\n  const [visible, setVisible] = useState(true);\n  usePageVisibility(setVisible);\n  const checkLatestNotification = async (masto, instance, skipCheckMarkers) => {\n    if (states.notificationsLast) {\n      const notificationsIterator = masto.v1.notifications.list({\n        limit: 1,\n        sinceId: states.notificationsLast.id,\n      });\n      const { value: notifications } = await notificationsIterator.next();\n      if (notifications?.length) {\n        if (skipCheckMarkers) {\n          states.notificationsShowNew = true;\n        } else {\n          let lastReadId;\n          try {\n            const markers = await masto.v1.markers.fetch({\n              timeline: 'notifications',\n            });\n            lastReadId = markers?.notifications?.lastReadId;\n          } catch (e) {}\n          if (lastReadId) {\n            states.notificationsShowNew = notifications[0].id !== lastReadId;\n          } else {\n            states.notificationsShowNew = true;\n          }\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    let sub;\n    let pollNotifications;\n    if (isLoggedIn && visible) {\n      const { masto, streaming, instance } = api();\n      (async () => {\n        // 1. Get the latest notification\n        await checkLatestNotification(masto, instance);\n\n        let hasStreaming = false;\n        // 2. Start streaming\n        if (streaming) {\n          pollNotifications = setTimeout(() => {\n            (async () => {\n              try {\n                hasStreaming = true;\n                sub = streaming.user.notification.subscribe();\n                console.log('🎏 Streaming notification', sub);\n                for await (const entry of sub) {\n                  if (!sub) break;\n                  if (!visible) break;\n                  console.log('🔔🔔 Notification entry', entry);\n                  if (entry.event === 'notification') {\n                    console.log('🔔🔔 Notification', entry);\n                    saveStatus(entry.payload, instance, {\n                      skipThreading: true,\n                    });\n                  }\n                  states.notificationsShowNew = true;\n                }\n              } catch (e) {\n                hasStreaming = false;\n                console.error(e);\n              }\n\n              if (!hasStreaming) {\n                console.log('🎏 Streaming failed, fallback to polling');\n                pollNotifications = setInterval(() => {\n                  checkLatestNotification(masto, instance, true);\n                }, POLL_INTERVAL);\n              }\n            })();\n          }, STREAMING_TIMEOUT);\n        }\n      })();\n    }\n    return () => {\n      sub?.unsubscribe?.();\n      sub = null;\n      clearTimeout(pollNotifications);\n      clearInterval(pollNotifications);\n    };\n  }, [visible, isLoggedIn]);\n\n  // Check for updates service\n  const lastCheckDate = useRef();\n  const checkForUpdates = () => {\n    lastCheckDate.current = Date.now();\n    console.log('✨ Check app update');\n    fetch('./version.json')\n      .then((r) => r.json())\n      .then((info) => {\n        if (info) states.appVersion = info;\n      })\n      .catch((e) => {\n        console.error(e);\n      });\n  };\n  useInterval(checkForUpdates, visible && 1000 * 60 * 30); // 30 minutes\n  usePageVisibility((visible) => {\n    if (visible) {\n      if (!lastCheckDate.current) {\n        checkForUpdates();\n      } else {\n        const diff = Date.now() - lastCheckDate.current;\n        if (diff > 1000 * 60 * 60) {\n          // 1 hour\n          checkForUpdates();\n        }\n      }\n    }\n  });\n\n  // Global keyboard shortcuts \"service\"\n  useHotkeys('shift+alt+k', () => {\n    const currentCloakMode = states.settings.cloakMode;\n    states.settings.cloakMode = !currentCloakMode;\n    showToast({\n      text: `Cloak mode ${currentCloakMode ? 'disabled' : 'enabled'}`,\n    });\n  });\n\n  return null;\n});\n","import { useHotkeys } from 'react-hotkeys-hook';\n\nimport openCompose from '../utils/open-compose';\nimport states from '../utils/states';\n\nimport Icon from './icon';\n\nexport default function ComposeButton() {\n  function handleButton(e) {\n    if (e.shiftKey) {\n      const newWin = openCompose();\n\n      if (!newWin) {\n        states.showCompose = true;\n      }\n    } else {\n      states.showCompose = true;\n    }\n  }\n\n  useHotkeys('c, shift+c', handleButton, {\n    ignoreEventWhen: (e) => {\n      const hasModal = !!document.querySelector('#modal-container > *');\n      return hasModal;\n    },\n  });\n\n  return (\n    <button type=\"button\" id=\"compose-button\" onClick={handleButton}>\n      <Icon icon=\"quill\" size=\"xl\" alt=\"Compose\" />\n    </button>\n  );\n}\n","import './keyboard-shortcuts-help.css';\n\nimport { memo } from 'preact/compat';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { useSnapshot } from 'valtio';\n\nimport states from '../utils/states';\n\nimport Icon from './icon';\nimport Modal from './modal';\n\nexport default memo(function KeyboardShortcutsHelp() {\n  const snapStates = useSnapshot(states);\n\n  function onClose() {\n    states.showKeyboardShortcutsHelp = false;\n  }\n\n  useHotkeys(\n    '?, shift+?',\n    (e) => {\n      console.log('help');\n      states.showKeyboardShortcutsHelp = true;\n    },\n    {\n      ignoreEventWhen: (e) => {\n        const hasModal = !!document.querySelector('#modal-container > *');\n        return hasModal;\n      },\n    },\n  );\n\n  const escRef = useHotkeys('esc', onClose, []);\n\n  return (\n    !!snapStates.showKeyboardShortcutsHelp && (\n      <Modal\n        class=\"light\"\n        onClick={(e) => {\n          if (e.target === e.currentTarget) {\n            onClose();\n          }\n        }}\n      >\n        <div\n          id=\"keyboard-shortcuts-help-container\"\n          class=\"sheet\"\n          tabindex=\"-1\"\n          ref={escRef}\n        >\n          <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n            <Icon icon=\"x\" />\n          </button>\n          <header>\n            <h2>Keyboard shortcuts</h2>\n          </header>\n          <main>\n            <table>\n              {[\n                {\n                  action: 'Keyboard shortcuts help',\n                  keys: <kbd>?</kbd>,\n                },\n                {\n                  action: 'Next post',\n                  keys: <kbd>j</kbd>,\n                },\n                {\n                  action: 'Previous post',\n                  keys: <kbd>k</kbd>,\n                },\n                {\n                  action: 'Skip carousel to next post',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>j</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Skip carousel to previous post',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>k</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Open post details',\n                  keys: (\n                    <>\n                      <kbd>Enter</kbd> or <kbd>o</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Toggle expanded/collapsed thread',\n                  keys: <kbd>x</kbd>,\n                },\n                {\n                  action: 'Close post or dialogs',\n                  keys: (\n                    <>\n                      <kbd>Esc</kbd> or <kbd>Backspace</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Focus column in multi-column mode',\n                  keys: (\n                    <>\n                      <kbd>1</kbd> to <kbd>9</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Compose new post',\n                  keys: <kbd>c</kbd>,\n                },\n                {\n                  action: 'Compose new post (new window)',\n                  className: 'insignificant',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>c</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Send post',\n                  keys: (\n                    <>\n                      <kbd>Ctrl</kbd> + <kbd>Enter</kbd> or <kbd>⌘</kbd> +{' '}\n                      <kbd>Enter</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Search',\n                  keys: <kbd>/</kbd>,\n                },\n                {\n                  action: 'Reply',\n                  keys: <kbd>r</kbd>,\n                },\n                {\n                  action: 'Reply (new window)',\n                  className: 'insignificant',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>r</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Like (favourite)',\n                  keys: (\n                    <>\n                      <kbd>l</kbd> or <kbd>f</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Boost',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>b</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Bookmark',\n                  keys: <kbd>d</kbd>,\n                },\n                {\n                  action: 'Toggle Cloak mode',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>Alt</kbd> + <kbd>k</kbd>\n                    </>\n                  ),\n                },\n              ].map(({ action, className, keys }) => (\n                <tr key={action}>\n                  <th class={className}>{action}</th>\n                  <td>{keys}</td>\n                </tr>\n              ))}\n            </table>\n          </main>\n        </div>\n      </Modal>\n    )\n  );\n});\n","import './accounts.css';\n\nimport { useAutoAnimate } from '@formkit/auto-animate/preact';\nimport { Menu, MenuDivider, MenuItem } from '@szhsin/react-menu';\nimport { useReducer } from 'preact/hooks';\n\nimport Avatar from '../components/avatar';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport MenuConfirm from '../components/menu-confirm';\nimport NameText from '../components/name-text';\nimport { api } from '../utils/api';\nimport states from '../utils/states';\nimport store from '../utils/store';\n\nfunction Accounts({ onClose }) {\n  const { masto } = api();\n  // Accounts\n  const accounts = store.local.getJSON('accounts');\n  const currentAccount = store.session.get('currentAccount');\n  const moreThanOneAccount = accounts.length > 1;\n\n  const [_, reload] = useReducer((x) => x + 1, 0);\n  const [accountsListParent] = useAutoAnimate();\n\n  return (\n    <div id=\"accounts-container\" class=\"sheet\" tabIndex=\"-1\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header class=\"header-grid\">\n        <h2>Accounts</h2>\n      </header>\n      <main>\n        <section>\n          <ul class=\"accounts-list\" ref={accountsListParent}>\n            {accounts.map((account, i) => {\n              const isCurrent = account.info.id === currentAccount;\n              const isDefault = i === 0; // first account is always default\n              return (\n                <li key={account.info.id}>\n                  <div>\n                    {moreThanOneAccount && (\n                      <span class={`current ${isCurrent ? 'is-current' : ''}`}>\n                        <Icon icon=\"check-circle\" alt=\"Current\" />\n                      </span>\n                    )}\n                    <Avatar\n                      url={account.info.avatarStatic}\n                      size=\"xxl\"\n                      onDblClick={async () => {\n                        if (isCurrent) {\n                          try {\n                            const info = await masto.v1.accounts\n                              .$select(account.info.id)\n                              .fetch();\n                            console.log('fetched account info', info);\n                            account.info = info;\n                            store.local.setJSON('accounts', accounts);\n                            reload();\n                          } catch (e) {}\n                        }\n                      }}\n                    />\n                    <NameText\n                      account={\n                        moreThanOneAccount\n                          ? {\n                              ...account.info,\n                              acct: /@/.test(account.info.acct)\n                                ? account.info.acct\n                                : `${account.info.acct}@${account.instanceURL}`,\n                            }\n                          : account.info\n                      }\n                      showAcct\n                      onClick={() => {\n                        if (isCurrent) {\n                          states.showAccount = `${account.info.username}@${account.instanceURL}`;\n                        } else {\n                          store.session.set('currentAccount', account.info.id);\n                          location.reload();\n                        }\n                      }}\n                    />\n                  </div>\n                  <div class=\"actions\">\n                    {isDefault && moreThanOneAccount && (\n                      <>\n                        <span class=\"tag\">Default</span>{' '}\n                      </>\n                    )}\n                    <Menu\n                      align=\"end\"\n                      menuButton={\n                        <button\n                          type=\"button\"\n                          title=\"More\"\n                          class=\"plain more-button\"\n                        >\n                          <Icon icon=\"more\" size=\"l\" alt=\"More\" />\n                        </button>\n                      }\n                    >\n                      <MenuItem\n                        onClick={() => {\n                          states.showAccount = `${account.info.username}@${account.instanceURL}`;\n                        }}\n                      >\n                        <Icon icon=\"user\" />\n                        <span>View profile…</span>\n                      </MenuItem>\n                      <MenuDivider />\n                      {moreThanOneAccount && (\n                        <MenuItem\n                          disabled={isDefault}\n                          onClick={() => {\n                            // Move account to the top of the list\n                            accounts.splice(i, 1);\n                            accounts.unshift(account);\n                            store.local.setJSON('accounts', accounts);\n                            reload();\n                          }}\n                        >\n                          <Icon icon=\"check-circle\" />\n                          <span>Set as default</span>\n                        </MenuItem>\n                      )}\n                      <MenuConfirm\n                        subMenu\n                        confirmLabel={\n                          <>\n                            <Icon icon=\"exit\" />\n                            <span>Log out @{account.info.acct}?</span>\n                          </>\n                        }\n                        disabled={!isCurrent}\n                        menuItemClassName=\"danger\"\n                        onClick={() => {\n                          // const yes = confirm('Log out?');\n                          // if (!yes) return;\n                          accounts.splice(i, 1);\n                          store.local.setJSON('accounts', accounts);\n                          // location.reload();\n                          location.href = location.pathname || '/';\n                        }}\n                      >\n                        <Icon icon=\"exit\" />\n                        <span>Log out…</span>\n                      </MenuConfirm>\n                    </Menu>\n                  </div>\n                </li>\n              );\n            })}\n          </ul>\n          <p>\n            <Link to=\"/login\" class=\"button plain2\" onClick={onClose}>\n              <Icon icon=\"plus\" /> <span>Add an existing account</span>\n            </Link>\n          </p>\n          {moreThanOneAccount && (\n            <p>\n              <small>\n                Note: <i>Default</i> account will always be used for first load.\n                Switched accounts will persist during the session.\n              </small>\n            </p>\n          )}\n        </section>\n      </main>\n    </div>\n  );\n}\n\nexport default Accounts;\n","export default \"__VITE_ASSET__c2b3a5f0__\"","// Utils for push notifications\nimport { api } from './api';\nimport { getCurrentAccount } from './store-utils';\n\n// Subscription is an object with the following structure:\n// {\n//   data: {\n//     alerts: {\n//       admin: {\n//         report: boolean,\n//         signUp: boolean,\n//       },\n//       favourite: boolean,\n//       follow: boolean,\n//       mention: boolean,\n//       poll: boolean,\n//       reblog: boolean,\n//       status: boolean,\n//       update: boolean,\n//     }\n//   },\n//   policy: \"all\" | \"followed\" | \"follower\" | \"none\",\n//   subscription: {\n//     endpoint: string,\n//     keys: {\n//       auth: string,\n//       p256dh: string,\n//     },\n//   },\n// }\n\n// Back-end CRUD\n// =============\n\nfunction createBackendPushSubscription(subscription) {\n  const { masto } = api();\n  return masto.v1.push.subscription.create(subscription);\n}\n\nfunction fetchBackendPushSubscription() {\n  const { masto } = api();\n  return masto.v1.push.subscription.fetch();\n}\n\nfunction updateBackendPushSubscription(subscription) {\n  const { masto } = api();\n  return masto.v1.push.subscription.update(subscription);\n}\n\nfunction removeBackendPushSubscription() {\n  const { masto } = api();\n  return masto.v1.push.subscription.remove();\n}\n\n// Front-end\n// =========\n\nexport function isPushSupported() {\n  return 'serviceWorker' in navigator && 'PushManager' in window;\n}\n\nexport function getRegistration() {\n  // return navigator.serviceWorker.ready;\n  return navigator.serviceWorker.getRegistration();\n}\n\nasync function getSubscription() {\n  const registration = await getRegistration();\n  const subscription = registration\n    ? await registration.pushManager.getSubscription()\n    : undefined;\n  return { registration, subscription };\n}\n\nfunction urlBase64ToUint8Array(base64String) {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = `${base64String}${padding}`\n    .replace(/-/g, '+')\n    .replace(/_/g, '/');\n\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n\n  return outputArray;\n}\n\n// Front-end <-> back-end\n// ======================\n\nexport async function initSubscription() {\n  if (!isPushSupported()) return;\n  const { subscription } = await getSubscription();\n  let backendSubscription = null;\n  try {\n    backendSubscription = await fetchBackendPushSubscription();\n  } catch (err) {\n    if (/(not found|unknown)/i.test(err.message)) {\n      // No subscription found\n    } else {\n      // Other error\n      throw err;\n    }\n  }\n  console.log('INIT subscription', {\n    subscription,\n    backendSubscription,\n  });\n\n  // Check if the subscription changed\n  if (backendSubscription && subscription) {\n    const sameEndpoint = backendSubscription.endpoint === subscription.endpoint;\n    const { vapidKey } = getCurrentAccount();\n    const sameKey = backendSubscription.serverKey === vapidKey;\n    if (!sameEndpoint) {\n      throw new Error('Backend subscription endpoint changed');\n    }\n    if (sameKey) {\n      // Subscription didn't change\n    } else {\n      // Subscription changed\n      console.error('🔔 Subscription changed', {\n        sameEndpoint,\n        serverKey: backendSubscription.serverKey,\n        vapIdKey: vapidKey,\n        endpoint1: backendSubscription.endpoint,\n        endpoint2: subscription.endpoint,\n        sameKey,\n        key1: backendSubscription.serverKey,\n        key2: vapidKey,\n      });\n      throw new Error('Backend subscription key and vapid key changed');\n      // Only unsubscribe from backend, not from browser\n      // await removeBackendPushSubscription();\n      // // Now let's resubscribe\n      // // NOTE: I have no idea if this works\n      // return await updateSubscription({\n      //   data: backendSubscription.data,\n      //   policy: backendSubscription.policy,\n      // });\n    }\n  }\n\n  if (subscription && !backendSubscription) {\n    // check if account's vapidKey is same as subscription's applicationServerKey\n    const { vapidKey } = getCurrentAccount();\n    const { applicationServerKey } = subscription.options;\n    const vapidKeyStr = urlBase64ToUint8Array(vapidKey).toString();\n    const applicationServerKeyStr = new Uint8Array(\n      applicationServerKey,\n    ).toString();\n    const sameKey = vapidKeyStr === applicationServerKeyStr;\n    if (sameKey) {\n      // Subscription didn't change\n    } else {\n      // Subscription changed\n      console.error('🔔 Subscription changed', {\n        vapidKeyStr,\n        applicationServerKeyStr,\n        sameKey,\n      });\n      // Unsubscribe since backend doesn't have a subscription\n      await subscription.unsubscribe();\n      throw new Error('Subscription key and vapid key changed');\n    }\n  }\n\n  // Check if backend subscription returns 404\n  // if (subscription && !backendSubscription) {\n  //   // Re-subscribe to backend\n  //   backendSubscription = await createBackendPushSubscription({\n  //     subscription,\n  //     data: {},\n  //     policy: 'all',\n  //   });\n  // }\n\n  return { subscription, backendSubscription };\n}\n\nexport async function updateSubscription({ data, policy }) {\n  console.log('🔔 Updating subscription', { data, policy });\n  if (!isPushSupported()) return;\n  let { registration, subscription } = await getSubscription();\n  let backendSubscription = null;\n\n  if (subscription) {\n    try {\n      backendSubscription = await updateBackendPushSubscription({\n        data,\n        policy,\n      });\n      // TODO: save subscription in user settings\n    } catch (error) {\n      // Backend doesn't have a subscription for this user\n      // Create a new one\n      backendSubscription = await createBackendPushSubscription({\n        subscription,\n        data,\n        policy,\n      });\n      // TODO: save subscription in user settings\n    }\n  } else {\n    // User is not subscribed\n    const { vapidKey } = getCurrentAccount();\n    if (!vapidKey) throw new Error('No server key found');\n    subscription = await registration.pushManager.subscribe({\n      userVisibleOnly: true,\n      applicationServerKey: urlBase64ToUint8Array(vapidKey),\n    });\n    backendSubscription = await createBackendPushSubscription({\n      subscription,\n      data,\n      policy,\n    });\n    // TODO: save subscription in user settings\n  }\n\n  return { subscription, backendSubscription };\n}\n\nexport async function removeSubscription() {\n  if (!isPushSupported()) return;\n  const { subscription } = await getSubscription();\n  if (subscription) {\n    await removeBackendPushSubscription();\n    await subscription.unsubscribe();\n  }\n}\n","import './settings.css';\n\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport logo from '../assets/logo.svg';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport RelativeTime from '../components/relative-time';\nimport targetLanguages from '../data/lingva-target-languages';\nimport { api } from '../utils/api';\nimport getTranslateTargetLanguage from '../utils/get-translate-target-language';\nimport localeCode2Text from '../utils/localeCode2Text';\nimport {\n  initSubscription,\n  isPushSupported,\n  removeSubscription,\n  updateSubscription,\n} from '../utils/push-notifications';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\nimport store from '../utils/store';\n\nconst DEFAULT_TEXT_SIZE = 16;\nconst TEXT_SIZES = [16, 17, 18, 19, 20];\n\nfunction Settings({ onClose }) {\n  const snapStates = useSnapshot(states);\n  const currentTheme = store.local.get('theme') || 'auto';\n  const themeFormRef = useRef();\n  const targetLanguage =\n    snapStates.settings.contentTranslationTargetLanguage || null;\n  const systemTargetLanguage = getTranslateTargetLanguage();\n  const systemTargetLanguageText = localeCode2Text(systemTargetLanguage);\n  const currentTextSize = store.local.get('textSize') || DEFAULT_TEXT_SIZE;\n\n  const [prefs, setPrefs] = useState(store.account.get('preferences') || {});\n  const { masto, authenticated, instance } = api();\n  // Get preferences every time Settings is opened\n  // NOTE: Disabled for now because I don't expect this to change often. Also for some reason, the /api/v1/preferences endpoint is cached for a while and return old prefs if refresh immediately after changing them.\n  // useEffect(() => {\n  //   const { masto } = api();\n  //   (async () => {\n  //     try {\n  //       const preferences = await masto.v1.preferences.fetch();\n  //       setPrefs(preferences);\n  //       store.account.set('preferences', preferences);\n  //     } catch (e) {\n  //       // Silently fail\n  //       console.error(e);\n  //     }\n  //   })();\n  // }, []);\n\n  return (\n    <div id=\"settings-container\" class=\"sheet\" tabIndex=\"-1\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Settings</h2>\n      </header>\n      <main>\n        <section>\n          <ul>\n            <li>\n              <div>\n                <label>Appearance</label>\n              </div>\n              <div>\n                <form\n                  ref={themeFormRef}\n                  onInput={(e) => {\n                    console.log(e);\n                    e.preventDefault();\n                    const formData = new FormData(themeFormRef.current);\n                    const theme = formData.get('theme');\n                    const html = document.documentElement;\n\n                    if (theme === 'auto') {\n                      html.classList.remove('is-light', 'is-dark');\n                    } else {\n                      html.classList.toggle('is-light', theme === 'light');\n                      html.classList.toggle('is-dark', theme === 'dark');\n                    }\n                    document\n                      .querySelector('meta[name=\"color-scheme\"]')\n                      .setAttribute(\n                        'content',\n                        theme === 'auto' ? 'dark light' : theme,\n                      );\n\n                    if (theme === 'auto') {\n                      store.local.del('theme');\n                    } else {\n                      store.local.set('theme', theme);\n                    }\n                  }}\n                >\n                  <div class=\"radio-group\">\n                    <label>\n                      <input\n                        type=\"radio\"\n                        name=\"theme\"\n                        value=\"light\"\n                        defaultChecked={currentTheme === 'light'}\n                      />\n                      <span>Light</span>\n                    </label>\n                    <label>\n                      <input\n                        type=\"radio\"\n                        name=\"theme\"\n                        value=\"dark\"\n                        defaultChecked={currentTheme === 'dark'}\n                      />\n                      <span>Dark</span>\n                    </label>\n                    <label>\n                      <input\n                        type=\"radio\"\n                        name=\"theme\"\n                        value=\"auto\"\n                        defaultChecked={\n                          currentTheme !== 'light' && currentTheme !== 'dark'\n                        }\n                      />\n                      <span>Auto</span>\n                    </label>\n                  </div>\n                </form>\n              </div>\n            </li>\n            <li>\n              <div>\n                <label>Text size</label>\n              </div>\n              <div class=\"range-group\">\n                <span style={{ fontSize: TEXT_SIZES[0] }}>A</span>{' '}\n                <input\n                  type=\"range\"\n                  min={TEXT_SIZES[0]}\n                  max={TEXT_SIZES[TEXT_SIZES.length - 1]}\n                  step=\"1\"\n                  value={currentTextSize}\n                  list=\"sizes\"\n                  onChange={(e) => {\n                    const value = parseInt(e.target.value, 10);\n                    const html = document.documentElement;\n                    // set CSS variable\n                    html.style.setProperty('--text-size', `${value}px`);\n                    // save to local storage\n                    if (value === DEFAULT_TEXT_SIZE) {\n                      store.local.del('textSize');\n                    } else {\n                      store.local.set('textSize', e.target.value);\n                    }\n                  }}\n                />{' '}\n                <span style={{ fontSize: TEXT_SIZES[TEXT_SIZES.length - 1] }}>\n                  A\n                </span>\n                <datalist id=\"sizes\">\n                  {TEXT_SIZES.map((size) => (\n                    <option value={size} />\n                  ))}\n                </datalist>\n              </div>\n            </li>\n          </ul>\n        </section>\n        {authenticated && (\n          <>\n            <h3>Posting</h3>\n            <section>\n              <ul>\n                <li>\n                  <div>\n                    <label for=\"posting-privacy-field\">\n                      Default visibility{' '}\n                      <Icon icon=\"cloud\" alt=\"Synced\" class=\"synced-icon\" />\n                    </label>\n                  </div>\n                  <div>\n                    <select\n                      id=\"posting-privacy-field\"\n                      value={prefs['posting:default:visibility'] || 'public'}\n                      onChange={(e) => {\n                        const { value } = e.target;\n                        (async () => {\n                          try {\n                            await masto.v1.accounts.updateCredentials({\n                              source: {\n                                privacy: value,\n                              },\n                            });\n                            setPrefs({\n                              ...prefs,\n                              'posting:default:visibility': value,\n                            });\n                            store.account.set('preferences', {\n                              ...prefs,\n                              'posting:default:visibility': value,\n                            });\n                          } catch (e) {\n                            alert('Failed to update posting privacy');\n                            console.error(e);\n                          }\n                        })();\n                      }}\n                    >\n                      <option value=\"public\">Public</option>\n                      <option value=\"unlisted\">Unlisted</option>\n                      <option value=\"private\">Followers only</option>\n                    </select>\n                  </div>\n                </li>\n              </ul>\n            </section>\n            <p class=\"section-postnote\">\n              <Icon icon=\"cloud\" alt=\"Synced\" class=\"synced-icon\" />{' '}\n              <small>\n                Synced to your instance server's settings.{' '}\n                <a\n                  href={`https://${instance}/`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  Go to your instance ({instance}) for more settings.\n                </a>\n              </small>\n            </p>\n          </>\n        )}\n        <h3>Experiments</h3>\n        <section>\n          <ul>\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.autoRefresh}\n                  onChange={(e) => {\n                    states.settings.autoRefresh = e.target.checked;\n                  }}\n                />{' '}\n                Auto refresh timeline posts\n              </label>\n            </li>\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.boostsCarousel}\n                  onChange={(e) => {\n                    states.settings.boostsCarousel = e.target.checked;\n                  }}\n                />{' '}\n                Boosts carousel\n              </label>\n            </li>\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.contentTranslation}\n                  onChange={(e) => {\n                    const { checked } = e.target;\n                    states.settings.contentTranslation = checked;\n                    if (!checked) {\n                      states.settings.contentTranslationTargetLanguage = null;\n                    }\n                  }}\n                />{' '}\n                Post translation\n              </label>\n              <div\n                class={`sub-section ${\n                  !snapStates.settings.contentTranslation\n                    ? 'more-insignificant'\n                    : ''\n                }`}\n              >\n                <div>\n                  <label>\n                    Translate to{' '}\n                    <select\n                      value={targetLanguage || ''}\n                      disabled={!snapStates.settings.contentTranslation}\n                      onChange={(e) => {\n                        states.settings.contentTranslationTargetLanguage =\n                          e.target.value || null;\n                      }}\n                    >\n                      <option value=\"\">\n                        System language ({systemTargetLanguageText})\n                      </option>\n                      <option disabled>──────────</option>\n                      {targetLanguages.map((lang) => (\n                        <option value={lang.code}>{lang.name}</option>\n                      ))}\n                    </select>\n                  </label>\n                </div>\n                <hr />\n                <p class=\"checkbox-fieldset\">\n                  Hide \"Translate\" button for\n                  {snapStates.settings.contentTranslationHideLanguages.length >\n                    0 && (\n                    <>\n                      {' '}\n                      (\n                      {\n                        snapStates.settings.contentTranslationHideLanguages\n                          .length\n                      }\n                      )\n                    </>\n                  )}\n                  :\n                  <div class=\"checkbox-fields\">\n                    {targetLanguages.map((lang) => (\n                      <label>\n                        <input\n                          type=\"checkbox\"\n                          checked={snapStates.settings.contentTranslationHideLanguages.includes(\n                            lang.code,\n                          )}\n                          onChange={(e) => {\n                            const { checked } = e.target;\n                            if (checked) {\n                              states.settings.contentTranslationHideLanguages.push(\n                                lang.code,\n                              );\n                            } else {\n                              states.settings.contentTranslationHideLanguages =\n                                snapStates.settings.contentTranslationHideLanguages.filter(\n                                  (code) => code !== lang.code,\n                                );\n                            }\n                          }}\n                        />{' '}\n                        {lang.name}\n                      </label>\n                    ))}\n                  </div>\n                </p>\n                <p class=\"insignificant\">\n                  <small>\n                    Note: This feature uses an external API to translate,\n                    powered by{' '}\n                    <a\n                      href=\"https://github.com/thedaviddelta/lingva-translate\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      Lingva Translate\n                    </a>\n                    .\n                  </small>\n                </p>\n                <hr />\n                <div>\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      checked={snapStates.settings.contentTranslationAutoInline}\n                      disabled={!snapStates.settings.contentTranslation}\n                      onChange={(e) => {\n                        states.settings.contentTranslationAutoInline =\n                          e.target.checked;\n                      }}\n                    />{' '}\n                    Auto inline translation\n                  </label>\n                  <p class=\"insignificant\">\n                    <small>\n                      Automatically show translation for posts in timeline. Only\n                      works for <b>short</b> posts without content warning,\n                      media and poll.\n                    </small>\n                  </p>\n                </div>\n              </div>\n            </li>\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.cloakMode}\n                  onChange={(e) => {\n                    states.settings.cloakMode = e.target.checked;\n                  }}\n                />{' '}\n                Cloak mode{' '}\n                <span class=\"insignificant\">\n                  (<samp>Text</samp> → <samp>████</samp>)\n                </span>\n              </label>\n              <div class=\"sub-section insignificant\">\n                <small>\n                  Replace text as blocks, useful when taking screenshots, for\n                  privacy reasons.\n                </small>\n              </div>\n            </li>\n            {authenticated && (\n              <li>\n                <button\n                  type=\"button\"\n                  class=\"light\"\n                  onClick={() => {\n                    states.showDrafts = true;\n                    states.showSettings = false;\n                  }}\n                >\n                  Unsent drafts\n                </button>\n              </li>\n            )}\n          </ul>\n        </section>\n        {authenticated && <PushNotificationsSection onClose={onClose} />}\n        <h3>About</h3>\n        <section>\n          <div\n            style={{\n              display: 'flex',\n              gap: 8,\n              lineHeight: 1.25,\n              alignItems: 'center',\n              marginTop: 8,\n            }}\n          >\n            <img\n              src={logo}\n              alt=\"\"\n              width=\"64\"\n              height=\"64\"\n              style={{\n                aspectRatio: '1/1',\n                verticalAlign: 'middle',\n                background: '#b7cdf9',\n                borderRadius: 12,\n              }}\n            />\n            <div>\n              <b>Phanpy</b>{' '}\n              <a\n                href=\"https://hachyderm.io/@phanpy\"\n                // target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  states.showAccount = 'phanpy@hachyderm.io';\n                }}\n              >\n                @phanpy\n              </a>\n              <br />\n              <a\n                href=\"https://github.com/cheeaun/phanpy\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                Built\n              </a>{' '}\n              by{' '}\n              <a\n                href=\"https://mastodon.social/@cheeaun\"\n                // target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  states.showAccount = 'cheeaun@mastodon.social';\n                }}\n              >\n                @cheeaun\n              </a>\n            </div>\n          </div>\n          <p>\n            <a\n              href=\"https://github.com/sponsors/cheeaun\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Sponsor\n            </a>{' '}\n            &middot;{' '}\n            <a\n              href=\"https://www.buymeacoffee.com/cheeaun\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Donate\n            </a>{' '}\n            &middot;{' '}\n            <a\n              href=\"https://github.com/cheeaun/phanpy/blob/main/PRIVACY.MD\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Privacy Policy\n            </a>\n          </p>\n          {__BUILD_TIME__ && (\n            <p>\n              Version:{' '}\n              <input\n                type=\"text\"\n                class=\"version-string\"\n                readOnly\n                size=\"18\" // Manually calculated here\n                value={`${__BUILD_TIME__.slice(0, 10).replace(/-/g, '.')}${\n                  __COMMIT_HASH__ ? `.${__COMMIT_HASH__}` : ''\n                }`}\n                onClick={(e) => {\n                  e.target.select();\n                  // Copy to clipboard\n                  try {\n                    navigator.clipboard.writeText(e.target.value);\n                    showToast('Version string copied');\n                  } catch (e) {\n                    console.warn(e);\n                    showToast('Unable to copy version string');\n                  }\n                }}\n              />{' '}\n              <span class=\"ib insignificant\">\n                (\n                <a\n                  href={`https://github.com/cheeaun/phanpy/commit/${__COMMIT_HASH__}`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  <RelativeTime datetime={new Date(__BUILD_TIME__)} />\n                </a>\n                )\n              </span>\n            </p>\n          )}\n        </section>\n      </main>\n    </div>\n  );\n}\n\nfunction PushNotificationsSection({ onClose }) {\n  if (!isPushSupported()) return null;\n\n  const { instance } = api();\n  const [uiState, setUIState] = useState('default');\n  const pushFormRef = useRef();\n  const [allowNofitications, setAllowNotifications] = useState(false);\n  const [needRelogin, setNeedRelogin] = useState(false);\n  const previousPolicyRef = useRef();\n  useEffect(() => {\n    (async () => {\n      setUIState('loading');\n      try {\n        const { subscription, backendSubscription } = await initSubscription();\n        if (\n          backendSubscription?.policy &&\n          backendSubscription.policy !== 'none'\n        ) {\n          setAllowNotifications(true);\n          const { alerts, policy } = backendSubscription;\n          previousPolicyRef.current = policy;\n          const { elements } = pushFormRef.current;\n          const policyEl = elements.namedItem(policy);\n          if (policyEl) policyEl.value = policy;\n          // alerts is {}, iterate it\n          Object.keys(alerts).forEach((alert) => {\n            const el = elements.namedItem(alert);\n            if (el?.type === 'checkbox') {\n              el.checked = true;\n            }\n          });\n        }\n        setUIState('default');\n      } catch (err) {\n        console.warn(err);\n        if (/outside.*authorized/i.test(err.message)) {\n          setNeedRelogin(true);\n        } else {\n          alert(err?.message || err);\n        }\n        setUIState('error');\n      }\n    })();\n  }, []);\n\n  const isLoading = uiState === 'loading';\n\n  return (\n    <form\n      ref={pushFormRef}\n      onChange={() => {\n        const values = Object.fromEntries(new FormData(pushFormRef.current));\n        const allowNofitications = !!values['policy-allow'];\n        const params = {\n          policy: values.policy,\n          data: {\n            alerts: {\n              mention: !!values.mention,\n              favourite: !!values.favourite,\n              reblog: !!values.reblog,\n              follow: !!values.follow,\n              follow_request: !!values.followRequest,\n              poll: !!values.poll,\n              update: !!values.update,\n              status: !!values.status,\n            },\n          },\n        };\n\n        let alertsCount = 0;\n        // Remove false values from data.alerts\n        // API defaults to false anyway\n        Object.keys(params.data.alerts).forEach((key) => {\n          if (!params.data.alerts[key]) {\n            delete params.data.alerts[key];\n          } else {\n            alertsCount++;\n          }\n        });\n        const policyChanged = previousPolicyRef.current !== params.policy;\n\n        console.log('PN Form', { values, allowNofitications, params });\n\n        if (allowNofitications && alertsCount > 0) {\n          if (policyChanged) {\n            console.debug('Policy changed.');\n            removeSubscription()\n              .then(() => {\n                updateSubscription(params);\n              })\n              .catch((err) => {\n                console.warn(err);\n                alert('Failed to update subscription. Please try again.');\n              });\n          } else {\n            updateSubscription(params).catch((err) => {\n              console.warn(err);\n              alert('Failed to update subscription. Please try again.');\n            });\n          }\n        } else {\n          removeSubscription().catch((err) => {\n            console.warn(err);\n            alert('Failed to remove subscription. Please try again.');\n          });\n        }\n      }}\n    >\n      <h3>Push Notifications (beta)</h3>\n      <section>\n        <ul>\n          <li>\n            <label>\n              <input\n                type=\"checkbox\"\n                disabled={isLoading || needRelogin}\n                name=\"policy-allow\"\n                checked={allowNofitications}\n                onChange={async (e) => {\n                  const { checked } = e.target;\n                  if (checked) {\n                    // Request permission\n                    const permission = await Notification.requestPermission();\n                    if (permission === 'granted') {\n                      setAllowNotifications(true);\n                    } else {\n                      setAllowNotifications(false);\n                      if (permission === 'denied') {\n                        alert(\n                          'Push notifications are blocked. Please enable them in your browser settings.',\n                        );\n                      }\n                    }\n                  } else {\n                    setAllowNotifications(false);\n                  }\n                }}\n              />{' '}\n              Allow from{' '}\n              <select\n                name=\"policy\"\n                disabled={isLoading || needRelogin || !allowNofitications}\n              >\n                {[\n                  {\n                    value: 'all',\n                    label: 'anyone',\n                  },\n                  {\n                    value: 'followed',\n                    label: 'people I follow',\n                  },\n                  {\n                    value: 'follower',\n                    label: 'followers',\n                  },\n                ].map((type) => (\n                  <option value={type.value}>{type.label}</option>\n                ))}\n              </select>\n            </label>\n            <div\n              class=\"shazam-container no-animation\"\n              style={{\n                width: '100%',\n              }}\n              hidden={!allowNofitications}\n            >\n              <div class=\"shazam-container-inner\">\n                <div class=\"sub-section\">\n                  <ul>\n                    {[\n                      {\n                        value: 'mention',\n                        label: 'Mentions',\n                      },\n                      {\n                        value: 'favourite',\n                        label: 'Likes',\n                      },\n                      {\n                        value: 'reblog',\n                        label: 'Boosts',\n                      },\n                      {\n                        value: 'follow',\n                        label: 'Follows',\n                      },\n                      {\n                        value: 'followRequest',\n                        label: 'Follow requests',\n                      },\n                      {\n                        value: 'poll',\n                        label: 'Polls',\n                      },\n                      {\n                        value: 'update',\n                        label: 'Post edits',\n                      },\n                      {\n                        value: 'status',\n                        label: 'New posts',\n                      },\n                    ].map((alert) => (\n                      <li>\n                        <label>\n                          <input type=\"checkbox\" name={alert.value} />{' '}\n                          {alert.label}\n                        </label>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              </div>\n            </div>\n            {needRelogin && (\n              <div class=\"sub-section\">\n                <p>\n                  Push permission was not granted since your last login. You'll\n                  need to{' '}\n                  <Link to={`/login?instance=${instance}`} onClick={onClose}>\n                    <b>log in</b> again to grant push permission\n                  </Link>\n                  .\n                </p>\n              </div>\n            )}\n          </li>\n        </ul>\n      </section>\n      <p class=\"section-postnote\">\n        <small>\n          NOTE: Push notifications only work for <b>one account</b>.\n        </small>\n      </p>\n    </form>\n  );\n}\n\nexport default Settings;\n","const focusDeck = () => {\n  let timer = setTimeout(() => {\n    const columns = document.getElementById('columns');\n    if (columns) {\n      // Focus first column\n      // columns.querySelector('.deck-container')?.focus?.();\n    } else {\n      const modals = document.querySelectorAll('#modal-container > *');\n      if (modals?.length) {\n        // Focus last modal\n        const modal = modals[modals.length - 1]; // last one\n        const modalFocusElement =\n          modal.querySelector('[tabindex=\"-1\"]') || modal;\n        if (modalFocusElement) {\n          modalFocusElement.focus();\n          return;\n        }\n      }\n      const backDrop = document.querySelector('.deck-backdrop');\n      if (backDrop) return;\n      // Focus last deck\n      const pages = document.querySelectorAll('.deck-container');\n      const page = pages[pages.length - 1]; // last one\n      if (page && page.tabIndex === -1) {\n        console.log('FOCUS', page);\n        page.focus();\n      }\n    }\n  }, 100);\n  return () => clearTimeout(timer);\n};\n\nexport default focusDeck;\n","import { useEffect, useRef } from 'preact/hooks';\nimport { useLocation } from 'react-router-dom';\n\n// Hook that runs a callback when the location changes\n// Won't run on the first render\n\nexport default function useLocationChange(fn) {\n  if (!fn) return;\n  const location = useLocation();\n  const currentLocationRef = useRef(location.pathname);\n  useEffect(() => {\n    // console.log('location', {\n    //   current: currentLocationRef.current,\n    //   next: location.pathname,\n    // });\n    if (\n      currentLocationRef.current &&\n      location.pathname !== currentLocationRef.current\n    ) {\n      fn?.();\n    }\n  }, [location.pathname, fn]);\n}\n","import { useEffect, useRef, useState } from 'preact/hooks';\n\nimport { api } from '../utils/api';\nimport supports from '../utils/supports';\n\nimport Icon from './icon';\nimport MenuConfirm from './menu-confirm';\n\nfunction ListAddEdit({ list, onClose }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const editMode = !!list;\n  const nameFieldRef = useRef();\n  const repliesPolicyFieldRef = useRef();\n  const exclusiveFieldRef = useRef();\n  useEffect(() => {\n    if (editMode) {\n      nameFieldRef.current.value = list.title;\n      repliesPolicyFieldRef.current.value = list.repliesPolicy;\n      if (exclusiveFieldRef.current) {\n        exclusiveFieldRef.current.checked = list.exclusive;\n      }\n    }\n  }, [editMode]);\n  const supportsExclusive = supports('@mastodon/list-exclusive');\n\n  return (\n    <div class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}{' '}\n      <header>\n        <h2>{editMode ? 'Edit list' : 'New list'}</h2>\n      </header>\n      <main>\n        <form\n          class=\"list-form\"\n          onSubmit={(e) => {\n            e.preventDefault(); // Get form values\n\n            const formData = new FormData(e.target);\n            const title = formData.get('title');\n            const repliesPolicy = formData.get('replies_policy');\n            const exclusive = formData.get('exclusive') === 'on';\n            console.log({\n              title,\n              repliesPolicy,\n              exclusive,\n            });\n            setUIState('loading');\n\n            (async () => {\n              try {\n                let listResult;\n\n                if (editMode) {\n                  listResult = await masto.v1.lists.$select(list.id).update({\n                    title,\n                    replies_policy: repliesPolicy,\n                    exclusive,\n                  });\n                } else {\n                  listResult = await masto.v1.lists.create({\n                    title,\n                    replies_policy: repliesPolicy,\n                    exclusive,\n                  });\n                }\n\n                console.log(listResult);\n                setUIState('default');\n                onClose?.({\n                  state: 'success',\n                  list: listResult,\n                });\n              } catch (e) {\n                console.error(e);\n                setUIState('error');\n                alert(\n                  editMode ? 'Unable to edit list.' : 'Unable to create list.',\n                );\n              }\n            })();\n          }}\n        >\n          <div class=\"list-form-row\">\n            <label for=\"list-title\">\n              Name{' '}\n              <input\n                ref={nameFieldRef}\n                type=\"text\"\n                id=\"list-title\"\n                name=\"title\"\n                required\n                disabled={uiState === 'loading'}\n                dir=\"auto\"\n              />\n            </label>\n          </div>\n          <div class=\"list-form-row\">\n            <select\n              ref={repliesPolicyFieldRef}\n              name=\"replies_policy\"\n              required\n              disabled={uiState === 'loading'}\n            >\n              <option value=\"list\">Show replies to list members</option>\n              <option value=\"followed\">Show replies to people I follow</option>\n              <option value=\"none\">Don't show replies</option>\n            </select>\n          </div>\n          {supportsExclusive && (\n            <div class=\"list-form-row\">\n              <label class=\"label-block\">\n                <input\n                  ref={exclusiveFieldRef}\n                  type=\"checkbox\"\n                  name=\"exclusive\"\n                  disabled={uiState === 'loading'}\n                />{' '}\n                Hide posts on this list from Home/Following\n              </label>\n            </div>\n          )}\n          <div class=\"list-form-footer\">\n            <button type=\"submit\" disabled={uiState === 'loading'}>\n              {editMode ? 'Save' : 'Create'}\n            </button>\n            {editMode && (\n              <MenuConfirm\n                disabled={uiState === 'loading'}\n                align=\"end\"\n                menuItemClassName=\"danger\"\n                confirmLabel=\"Delete this list?\"\n                onClick={() => {\n                  // const yes = confirm('Delete this list?');\n                  // if (!yes) return;\n                  setUIState('loading');\n\n                  (async () => {\n                    try {\n                      await masto.v1.lists.$select(list.id).remove();\n                      setUIState('default');\n                      onClose?.({\n                        state: 'deleted',\n                      });\n                    } catch (e) {\n                      console.error(e);\n                      setUIState('error');\n                      alert('Unable to delete list.');\n                    }\n                  })();\n                }}\n              >\n                <button\n                  type=\"button\"\n                  class=\"light danger\"\n                  disabled={uiState === 'loading'}\n                >\n                  Delete…\n                </button>\n              </MenuConfirm>\n            )}\n          </div>\n        </form>\n      </main>\n    </div>\n  );\n}\n\nexport default ListAddEdit;\n","import './account-info.css';\n\nimport { Menu, MenuDivider, MenuItem, SubMenu } from '@szhsin/react-menu';\nimport {\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n} from 'preact/hooks';\n\nimport { api } from '../utils/api';\nimport enhanceContent from '../utils/enhance-content';\nimport getHTMLText from '../utils/getHTMLText';\nimport handleContentLinks from '../utils/handle-content-links';\nimport niceDateTime from '../utils/nice-date-time';\nimport pmem from '../utils/pmem';\nimport shortenNumber from '../utils/shorten-number';\nimport showToast from '../utils/show-toast';\nimport states, { hideAllModals } from '../utils/states';\nimport store from '../utils/store';\nimport { updateAccount } from '../utils/store-utils';\n\nimport AccountBlock from './account-block';\nimport Avatar from './avatar';\nimport EmojiText from './emoji-text';\nimport Icon from './icon';\nimport Link from './link';\nimport ListAddEdit from './list-add-edit';\nimport Loader from './loader';\nimport MenuConfirm from './menu-confirm';\nimport Modal from './modal';\nimport TranslationBlock from './translation-block';\n\nconst MUTE_DURATIONS = [\n  1000 * 60 * 5, // 5 minutes\n  1000 * 60 * 30, // 30 minutes\n  1000 * 60 * 60, // 1 hour\n  1000 * 60 * 60 * 6, // 6 hours\n  1000 * 60 * 60 * 24, // 1 day\n  1000 * 60 * 60 * 24 * 3, // 3 days\n  1000 * 60 * 60 * 24 * 7, // 1 week\n  0, // forever\n];\nconst MUTE_DURATIONS_LABELS = {\n  0: 'Forever',\n  300_000: '5 minutes',\n  1_800_000: '30 minutes',\n  3_600_000: '1 hour',\n  21_600_000: '6 hours',\n  86_400_000: '1 day',\n  259_200_000: '3 days',\n  604_800_000: '1 week',\n};\n\nconst LIMIT = 80;\n\nconst ACCOUNT_INFO_MAX_AGE = 1000 * 60 * 10; // 10 mins\n\nfunction fetchFamiliarFollowers(currentID, masto) {\n  return masto.v1.accounts.familiarFollowers.fetch({\n    id: [currentID],\n  });\n}\nconst memFetchFamiliarFollowers = pmem(fetchFamiliarFollowers, {\n  maxAge: ACCOUNT_INFO_MAX_AGE,\n});\n\nasync function fetchPostingStats(accountID, masto) {\n  const fetchStatuses = masto.v1.accounts\n    .$select(accountID)\n    .statuses.list({\n      limit: 20,\n    })\n    .next();\n\n  const { value: statuses } = await fetchStatuses;\n  console.log('fetched statuses', statuses);\n  const stats = {\n    total: statuses.length,\n    originals: 0,\n    replies: 0,\n    boosts: 0,\n  };\n  // Categories statuses by type\n  // - Original posts (not replies to others)\n  // - Threads (self-replies + 1st original post)\n  // - Boosts (reblogs)\n  // - Replies (not-self replies)\n  statuses.forEach((status) => {\n    if (status.reblog) {\n      stats.boosts++;\n    } else if (\n      !!status.inReplyToId &&\n      status.inReplyToAccountId !== status.account.id // Not self-reply\n    ) {\n      stats.replies++;\n    } else {\n      stats.originals++;\n    }\n  });\n\n  // Count days since last post\n  if (statuses.length) {\n    stats.daysSinceLastPost = Math.ceil(\n      (Date.now() - new Date(statuses[statuses.length - 1].createdAt)) /\n        86400000,\n    );\n  }\n\n  console.log('posting stats', stats);\n  return stats;\n}\nconst memFetchPostingStats = pmem(fetchPostingStats, {\n  maxAge: ACCOUNT_INFO_MAX_AGE,\n});\n\nfunction AccountInfo({\n  account,\n  fetchAccount = () => {},\n  standalone,\n  instance,\n  authenticated,\n}) {\n  const { masto } = api({\n    instance,\n  });\n  const { masto: currentMasto, instance: currentInstance } = api();\n  const [uiState, setUIState] = useState('default');\n  const isString = typeof account === 'string';\n  const [info, setInfo] = useState(isString ? null : account);\n\n  const sameCurrentInstance = useMemo(\n    () => instance === currentInstance,\n    [instance, currentInstance],\n  );\n\n  useEffect(() => {\n    if (!isString) {\n      setInfo(account);\n      return;\n    }\n    setUIState('loading');\n    (async () => {\n      try {\n        const info = await fetchAccount();\n        states.accounts[`${info.id}@${instance}`] = info;\n        setInfo(info);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setInfo(null);\n        setUIState('error');\n      }\n    })();\n  }, [isString, account, fetchAccount]);\n\n  const {\n    acct,\n    avatar,\n    avatarStatic,\n    bot,\n    createdAt,\n    displayName,\n    emojis,\n    fields,\n    followersCount,\n    followingCount,\n    group,\n    // header,\n    // headerStatic,\n    id,\n    lastStatusAt,\n    locked,\n    note,\n    statusesCount,\n    url,\n    username,\n    memorial,\n    moved,\n    roles,\n  } = info || {};\n  let headerIsAvatar = false;\n  let { header, headerStatic } = info || {};\n  if (!header || /missing\\.png$/.test(header)) {\n    if (avatar && !/missing\\.png$/.test(avatar)) {\n      header = avatar;\n      headerIsAvatar = true;\n      if (avatarStatic && !/missing\\.png$/.test(avatarStatic)) {\n        headerStatic = avatarStatic;\n      }\n    }\n  }\n\n  const isSelf = useMemo(\n    () => id === store.session.get('currentAccount'),\n    [id],\n  );\n\n  useEffect(() => {\n    const infoHasEssentials = !!(\n      info?.id &&\n      info?.username &&\n      info?.acct &&\n      info?.avatar &&\n      info?.avatarStatic &&\n      info?.displayName &&\n      info?.url\n    );\n    if (isSelf && instance && infoHasEssentials) {\n      const accounts = store.local.getJSON('accounts');\n      let updated = false;\n      accounts.forEach((account) => {\n        if (account.info.id === info.id && account.instanceURL === instance) {\n          account.info = info;\n          updated = true;\n        }\n      });\n      if (updated) {\n        console.log('Updated account info', info);\n        store.local.setJSON('accounts', accounts);\n      }\n    }\n  }, [isSelf, info, instance]);\n\n  const accountInstance = useMemo(() => {\n    if (!url) return null;\n    const domain = new URL(url).hostname;\n    return domain;\n  }, [url]);\n\n  const [headerCornerColors, setHeaderCornerColors] = useState([]);\n\n  const followersIterator = useRef();\n  const familiarFollowersCache = useRef([]);\n  async function fetchFollowers(firstLoad) {\n    if (firstLoad || !followersIterator.current) {\n      followersIterator.current = masto.v1.accounts.$select(id).followers.list({\n        limit: LIMIT,\n      });\n    }\n    const results = await followersIterator.current.next();\n    if (isSelf) return results;\n    if (!sameCurrentInstance) return results;\n\n    const { value } = results;\n    let newValue = [];\n    // On first load, fetch familiar followers, merge to top of results' `value`\n    // Remove dups on every fetch\n    if (firstLoad) {\n      const familiarFollowers = await masto.v1.accounts.familiarFollowers.fetch(\n        {\n          id: [id],\n        },\n      );\n      familiarFollowersCache.current = familiarFollowers[0].accounts;\n      newValue = [\n        ...familiarFollowersCache.current,\n        ...value.filter(\n          (account) =>\n            !familiarFollowersCache.current.some(\n              (familiar) => familiar.id === account.id,\n            ),\n        ),\n      ];\n    } else if (value?.length) {\n      newValue = value.filter(\n        (account) =>\n          !familiarFollowersCache.current.some(\n            (familiar) => familiar.id === account.id,\n          ),\n      );\n    }\n\n    return {\n      ...results,\n      value: newValue,\n    };\n  }\n\n  const followingIterator = useRef();\n  async function fetchFollowing(firstLoad) {\n    if (firstLoad || !followingIterator.current) {\n      followingIterator.current = masto.v1.accounts.$select(id).following.list({\n        limit: LIMIT,\n      });\n    }\n    const results = await followingIterator.current.next();\n    return results;\n  }\n\n  const LinkOrDiv = standalone ? 'div' : Link;\n  const accountLink = instance ? `/${instance}/a/${id}` : `/a/${id}`;\n\n  const [familiarFollowers, setFamiliarFollowers] = useState([]);\n  const [postingStats, setPostingStats] = useState();\n  const [postingStatsUIState, setPostingStatsUIState] = useState('default');\n  const hasPostingStats = !!postingStats?.total;\n\n  const renderFamiliarFollowers = async (currentID) => {\n    try {\n      const followers = await memFetchFamiliarFollowers(\n        currentID,\n        currentMasto,\n      );\n      console.log('fetched familiar followers', followers);\n      setFamiliarFollowers(\n        followers[0].accounts.slice(0, FAMILIAR_FOLLOWERS_LIMIT),\n      );\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const renderPostingStats = async () => {\n    if (!id) return;\n    setPostingStatsUIState('loading');\n    try {\n      const stats = await memFetchPostingStats(id, masto);\n      setPostingStats(stats);\n      setPostingStatsUIState('default');\n    } catch (e) {\n      console.error(e);\n      setPostingStatsUIState('error');\n    }\n  };\n\n  const onRelationshipChange = useCallback(\n    ({ relationship, currentID }) => {\n      if (!relationship.following) {\n        renderFamiliarFollowers(currentID);\n        if (!standalone && statusesCount > 0) {\n          // Only render posting stats if not standalone and has posts\n          renderPostingStats();\n        }\n      }\n    },\n    [standalone, id, statusesCount],\n  );\n\n  return (\n    <div\n      tabIndex=\"-1\"\n      class={`account-container  ${uiState === 'loading' ? 'skeleton' : ''}`}\n      style={{\n        '--header-color-1': headerCornerColors[0],\n        '--header-color-2': headerCornerColors[1],\n        '--header-color-3': headerCornerColors[2],\n        '--header-color-4': headerCornerColors[3],\n      }}\n    >\n      {uiState === 'error' && (\n        <div class=\"ui-state\">\n          <p>Unable to load account.</p>\n          <p>\n            <a\n              href={isString ? account : url}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Go to account page <Icon icon=\"external\" />\n            </a>\n          </p>\n        </div>\n      )}\n      {uiState === 'loading' ? (\n        <>\n          <header>\n            <AccountBlock avatarSize=\"xxxl\" skeleton />\n          </header>\n          <main>\n            <div class=\"note\">\n              <p>███████ ████ ████</p>\n              <p>████ ████████ ██████ █████████ ████ ██</p>\n            </div>\n            <div class=\"account-metadata-box\">\n              <div class=\"profile-metadata\">\n                <div class=\"profile-field\">\n                  <b class=\"more-insignificant\">███</b>\n                  <p>██████</p>\n                </div>\n                <div class=\"profile-field\">\n                  <b class=\"more-insignificant\">████</b>\n                  <p>███████████</p>\n                </div>\n              </div>\n              <div class=\"stats\">\n                <div>\n                  <span>██</span> Followers\n                </div>\n                <div>\n                  <span>██</span> Following\n                </div>\n                <div>\n                  <span>██</span> Posts\n                </div>\n              </div>\n            </div>\n            <div class=\"actions\">\n              <span />\n              <span class=\"buttons\">\n                <button type=\"button\" title=\"More\" class=\"plain\" disabled>\n                  <Icon icon=\"more\" size=\"l\" alt=\"More\" />\n                </button>\n              </span>\n            </div>\n          </main>\n        </>\n      ) : (\n        info && (\n          <>\n            {!!moved && (\n              <div class=\"account-moved\">\n                <p>\n                  <b>{displayName}</b> has indicated that their new account is\n                  now:\n                </p>\n                <AccountBlock\n                  account={moved}\n                  instance={instance}\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    states.showAccount = moved;\n                  }}\n                />\n              </div>\n            )}\n            {!!header && !/missing\\.png$/.test(header) && (\n              <img\n                src={header}\n                alt=\"\"\n                class={`header-banner ${\n                  headerIsAvatar ? 'header-is-avatar' : ''\n                }`}\n                onError={(e) => {\n                  if (e.target.crossOrigin) {\n                    if (e.target.src !== headerStatic) {\n                      e.target.src = headerStatic;\n                    } else {\n                      e.target.removeAttribute('crossorigin');\n                      e.target.src = header;\n                    }\n                  } else if (e.target.src !== headerStatic) {\n                    e.target.src = headerStatic;\n                  } else {\n                    e.target.remove();\n                  }\n                }}\n                crossOrigin=\"anonymous\"\n                onLoad={(e) => {\n                  e.target.classList.add('loaded');\n                  try {\n                    // Get color from four corners of image\n                    const canvas = document.createElement('canvas');\n                    const ctx = canvas.getContext('2d', {\n                      willReadFrequently: true,\n                    });\n                    canvas.width = e.target.width;\n                    canvas.height = e.target.height;\n                    ctx.drawImage(e.target, 0, 0);\n                    // const colors = [\n                    //   ctx.getImageData(0, 0, 1, 1).data,\n                    //   ctx.getImageData(e.target.width - 1, 0, 1, 1).data,\n                    //   ctx.getImageData(0, e.target.height - 1, 1, 1).data,\n                    //   ctx.getImageData(\n                    //     e.target.width - 1,\n                    //     e.target.height - 1,\n                    //     1,\n                    //     1,\n                    //   ).data,\n                    // ];\n                    // Get 10x10 pixels from corners, get average color from each\n                    const pixelDimension = 10;\n                    const colors = [\n                      ctx.getImageData(0, 0, pixelDimension, pixelDimension)\n                        .data,\n                      ctx.getImageData(\n                        e.target.width - pixelDimension,\n                        0,\n                        pixelDimension,\n                        pixelDimension,\n                      ).data,\n                      ctx.getImageData(\n                        0,\n                        e.target.height - pixelDimension,\n                        pixelDimension,\n                        pixelDimension,\n                      ).data,\n                      ctx.getImageData(\n                        e.target.width - pixelDimension,\n                        e.target.height - pixelDimension,\n                        pixelDimension,\n                        pixelDimension,\n                      ).data,\n                    ].map((data) => {\n                      let r = 0;\n                      let g = 0;\n                      let b = 0;\n                      let a = 0;\n                      for (let i = 0; i < data.length; i += 4) {\n                        r += data[i];\n                        g += data[i + 1];\n                        b += data[i + 2];\n                        a += data[i + 3];\n                      }\n                      const dataLength = data.length / 4;\n                      return [\n                        r / dataLength,\n                        g / dataLength,\n                        b / dataLength,\n                        a / dataLength,\n                      ];\n                    });\n                    const rgbColors = colors.map((color) => {\n                      const [r, g, b, a] = lightenRGB(color);\n                      return `rgba(${r}, ${g}, ${b}, ${a})`;\n                    });\n                    setHeaderCornerColors(rgbColors);\n                    console.log({ colors, rgbColors });\n                  } catch (e) {\n                    // Silently fail\n                  }\n                }}\n              />\n            )}\n            <header>\n              <AccountBlock\n                account={info}\n                instance={instance}\n                avatarSize=\"xxxl\"\n                external={standalone}\n                internal={!standalone}\n              />\n            </header>\n            <div class=\"faux-header-bg\" aria-hidden=\"true\" />\n            <main>\n              {!!memorial && <span class=\"tag\">In Memoriam</span>}\n              {!!bot && (\n                <span class=\"tag\">\n                  <Icon icon=\"bot\" /> Automated\n                </span>\n              )}\n              {!!group && (\n                <span class=\"tag\">\n                  <Icon icon=\"group\" /> Group\n                </span>\n              )}\n              {roles?.map((role) => (\n                <span class=\"tag\">\n                  {role.name}\n                  {!!accountInstance && (\n                    <>\n                      {' '}\n                      <span class=\"more-insignificant\">{accountInstance}</span>\n                    </>\n                  )}\n                </span>\n              ))}\n              <div\n                class=\"note\"\n                dir=\"auto\"\n                onClick={handleContentLinks({\n                  instance: currentInstance,\n                })}\n                dangerouslySetInnerHTML={{\n                  __html: enhanceContent(note, { emojis }),\n                }}\n              />\n              <div class=\"account-metadata-box\">\n                {fields?.length > 0 && (\n                  <div class=\"profile-metadata\">\n                    {fields.map(({ name, value, verifiedAt }, i) => (\n                      <div\n                        class={`profile-field ${\n                          verifiedAt ? 'profile-verified' : ''\n                        }`}\n                        key={name + i}\n                        dir=\"auto\"\n                      >\n                        <b>\n                          <EmojiText text={name} emojis={emojis} />{' '}\n                          {!!verifiedAt && (\n                            <Icon icon=\"check-circle\" size=\"s\" />\n                          )}\n                        </b>\n                        <p\n                          dangerouslySetInnerHTML={{\n                            __html: enhanceContent(value, { emojis }),\n                          }}\n                        />\n                      </div>\n                    ))}\n                  </div>\n                )}\n                <div class=\"stats\">\n                  <LinkOrDiv\n                    tabIndex={0}\n                    to={accountLink}\n                    onClick={() => {\n                      // states.showAccount = false;\n                      setTimeout(() => {\n                        states.showGenericAccounts = {\n                          heading: 'Followers',\n                          fetchAccounts: fetchFollowers,\n                        };\n                      }, 0);\n                    }}\n                  >\n                    {!!familiarFollowers.length && (\n                      <span class=\"shazam-container-horizontal\">\n                        <span class=\"shazam-container-inner stats-avatars-bunch\">\n                          {familiarFollowers.map((follower) => (\n                            <Avatar\n                              url={follower.avatarStatic}\n                              size=\"s\"\n                              alt={`${follower.displayName} @${follower.acct}`}\n                              squircle={follower?.bot}\n                            />\n                          ))}\n                        </span>\n                      </span>\n                    )}\n                    <span title={followersCount}>\n                      {shortenNumber(followersCount)}\n                    </span>{' '}\n                    Followers\n                  </LinkOrDiv>\n                  <LinkOrDiv\n                    class=\"insignificant\"\n                    tabIndex={0}\n                    to={accountLink}\n                    onClick={() => {\n                      // states.showAccount = false;\n                      setTimeout(() => {\n                        states.showGenericAccounts = {\n                          heading: 'Following',\n                          fetchAccounts: fetchFollowing,\n                        };\n                      }, 0);\n                    }}\n                  >\n                    <span title={followingCount}>\n                      {shortenNumber(followingCount)}\n                    </span>{' '}\n                    Following\n                    <br />\n                  </LinkOrDiv>\n                  <LinkOrDiv\n                    class=\"insignificant\"\n                    to={accountLink}\n                    // onClick={\n                    //   standalone\n                    //     ? undefined\n                    //     : () => {\n                    //         hideAllModals();\n                    //       }\n                    // }\n                  >\n                    <span title={statusesCount}>\n                      {shortenNumber(statusesCount)}\n                    </span>{' '}\n                    Posts\n                  </LinkOrDiv>\n                  {!!createdAt && (\n                    <div class=\"insignificant\">\n                      Joined{' '}\n                      <time datetime={createdAt}>\n                        {niceDateTime(createdAt, {\n                          hideTime: true,\n                        })}\n                      </time>\n                    </div>\n                  )}\n                </div>\n              </div>\n              {!!postingStats && (\n                <LinkOrDiv\n                  to={accountLink}\n                  class=\"account-metadata-box\"\n                  // onClick={() => {\n                  //   states.showAccount = false;\n                  // }}\n                >\n                  <div class=\"shazam-container\">\n                    <div class=\"shazam-container-inner\">\n                      {hasPostingStats ? (\n                        <div\n                          class=\"posting-stats\"\n                          title={`${Math.round(\n                            (postingStats.originals / postingStats.total) * 100,\n                          )}% original posts, ${Math.round(\n                            (postingStats.replies / postingStats.total) * 100,\n                          )}% replies, ${Math.round(\n                            (postingStats.boosts / postingStats.total) * 100,\n                          )}% boosts`}\n                        >\n                          <div>\n                            {postingStats.daysSinceLastPost < 365\n                              ? `Last ${postingStats.total} post${\n                                  postingStats.total > 1 ? 's' : ''\n                                } in the past \n                      ${postingStats.daysSinceLastPost} day${\n                                  postingStats.daysSinceLastPost > 1 ? 's' : ''\n                                }`\n                              : `\n                      Last ${postingStats.total} posts in the past year(s)\n                      `}\n                          </div>\n                          <div\n                            class=\"posting-stats-bar\"\n                            style={{\n                              // [originals | replies | boosts]\n                              '--originals-percentage': `${\n                                (postingStats.originals / postingStats.total) *\n                                100\n                              }%`,\n                              '--replies-percentage': `${\n                                ((postingStats.originals +\n                                  postingStats.replies) /\n                                  postingStats.total) *\n                                100\n                              }%`,\n                            }}\n                          />\n                          <div class=\"posting-stats-legends\">\n                            <span class=\"ib\">\n                              <span class=\"posting-stats-legend-item posting-stats-legend-item-originals\" />{' '}\n                              Original\n                            </span>{' '}\n                            <span class=\"ib\">\n                              <span class=\"posting-stats-legend-item posting-stats-legend-item-replies\" />{' '}\n                              Replies\n                            </span>{' '}\n                            <span class=\"ib\">\n                              <span class=\"posting-stats-legend-item posting-stats-legend-item-boosts\" />{' '}\n                              Boosts\n                            </span>\n                          </div>\n                        </div>\n                      ) : (\n                        <div class=\"posting-stats\">Post stats unavailable.</div>\n                      )}\n                    </div>\n                  </div>\n                </LinkOrDiv>\n              )}\n              <div class=\"account-metadata-box\">\n                <div\n                  class=\"shazam-container no-animation\"\n                  hidden={!!postingStats}\n                >\n                  <div class=\"shazam-container-inner\">\n                    <button\n                      type=\"button\"\n                      class=\"posting-stats-button\"\n                      disabled={postingStatsUIState === 'loading'}\n                      onClick={() => {\n                        renderPostingStats();\n                      }}\n                    >\n                      <div\n                        class={`posting-stats-bar posting-stats-icon ${\n                          postingStatsUIState === 'loading' ? 'loading' : ''\n                        }`}\n                        style={{\n                          '--originals-percentage': '33%',\n                          '--replies-percentage': '66%',\n                        }}\n                      />\n                      View post stats{' '}\n                      {/* <Loader\n                        abrupt\n                        hidden={postingStatsUIState !== 'loading'}\n                      /> */}\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </main>\n            <footer>\n              <RelatedActions\n                info={info}\n                instance={instance}\n                authenticated={authenticated}\n                onRelationshipChange={onRelationshipChange}\n              />\n            </footer>\n          </>\n        )\n      )}\n    </div>\n  );\n}\n\nconst FAMILIAR_FOLLOWERS_LIMIT = 3;\n\nfunction RelatedActions({\n  info,\n  instance,\n  authenticated,\n  onRelationshipChange = () => {},\n}) {\n  if (!info) return null;\n  const {\n    masto: currentMasto,\n    instance: currentInstance,\n    authenticated: currentAuthenticated,\n  } = api();\n  const sameInstance = instance === currentInstance;\n\n  const [relationshipUIState, setRelationshipUIState] = useState('default');\n  const [relationship, setRelationship] = useState(null);\n\n  const { id, acct, url, username, locked, lastStatusAt, note, fields, moved } =\n    info;\n  const accountID = useRef(id);\n\n  const {\n    following,\n    showingReblogs,\n    notifying,\n    followedBy,\n    blocking,\n    blockedBy,\n    muting,\n    mutingNotifications,\n    requested,\n    domainBlocking,\n    endorsed,\n    note: privateNote,\n  } = relationship || {};\n\n  const [currentInfo, setCurrentInfo] = useState(null);\n  const [isSelf, setIsSelf] = useState(false);\n\n  useEffect(() => {\n    if (info) {\n      const currentAccount = store.session.get('currentAccount');\n      let currentID;\n      (async () => {\n        if (sameInstance && authenticated) {\n          currentID = id;\n        } else if (!sameInstance && currentAuthenticated) {\n          // Grab this account from my logged-in instance\n          const acctHasInstance = info.acct.includes('@');\n          try {\n            const results = await currentMasto.v2.search.fetch({\n              q: acctHasInstance ? info.acct : `${info.username}@${instance}`,\n              type: 'accounts',\n              limit: 1,\n              resolve: true,\n            });\n            console.log('🥏 Fetched account from logged-in instance', results);\n            if (results.accounts.length) {\n              currentID = results.accounts[0].id;\n              setCurrentInfo(results.accounts[0]);\n            }\n          } catch (e) {\n            console.error(e);\n          }\n        }\n\n        if (!currentID) return;\n\n        if (currentAccount === currentID) {\n          // It's myself!\n          setIsSelf(true);\n          return;\n        }\n\n        accountID.current = currentID;\n\n        if (moved) return;\n\n        setRelationshipUIState('loading');\n\n        const fetchRelationships = currentMasto.v1.accounts.relationships.fetch(\n          {\n            id: [currentID],\n          },\n        );\n\n        try {\n          const relationships = await fetchRelationships;\n          console.log('fetched relationship', relationships);\n          setRelationshipUIState('default');\n\n          if (relationships.length) {\n            const relationship = relationships[0];\n            setRelationship(relationship);\n            onRelationshipChange({ relationship, currentID });\n          }\n        } catch (e) {\n          console.error(e);\n          setRelationshipUIState('error');\n        }\n      })();\n    }\n  }, [info, authenticated]);\n\n  useEffect(() => {\n    if (info && isSelf) {\n      updateAccount(info);\n    }\n  }, [info, isSelf]);\n\n  const loading = relationshipUIState === 'loading';\n  const menuInstanceRef = useRef(null);\n\n  const [showTranslatedBio, setShowTranslatedBio] = useState(false);\n  const [showAddRemoveLists, setShowAddRemoveLists] = useState(false);\n  const [showPrivateNoteModal, setShowPrivateNoteModal] = useState(false);\n\n  return (\n    <>\n      <div class=\"actions\">\n        <span>\n          {followedBy ? (\n            <span class=\"tag\">Following you</span>\n          ) : !!lastStatusAt ? (\n            <small class=\"insignificant\">\n              Last post:{' '}\n              <span class=\"ib\">\n                {niceDateTime(lastStatusAt, {\n                  hideTime: true,\n                })}\n              </span>\n            </small>\n          ) : (\n            <span />\n          )}\n          {muting && <span class=\"tag danger\">Muted</span>}\n          {blocking && <span class=\"tag danger\">Blocked</span>}\n        </span>{' '}\n        <span class=\"buttons\">\n          {!!privateNote && (\n            <button\n              type=\"button\"\n              class=\"private-note-tag\"\n              title=\"Private note\"\n              onClick={() => {\n                setShowPrivateNoteModal(true);\n              }}\n              dir=\"auto\"\n            >\n              <span>{privateNote}</span>\n            </button>\n          )}\n          <Menu\n            instanceRef={menuInstanceRef}\n            portal={{\n              target: document.body,\n            }}\n            containerProps={{\n              style: {\n                // Higher than the backdrop\n                zIndex: 1001,\n              },\n              onClick: (e) => {\n                if (e.target === e.currentTarget) {\n                  menuInstanceRef.current?.closeMenu?.();\n                }\n              },\n            }}\n            align=\"center\"\n            position=\"anchor\"\n            overflow=\"auto\"\n            boundingBoxPadding=\"8 8 8 8\"\n            menuButton={\n              <button\n                type=\"button\"\n                title=\"More\"\n                class=\"plain\"\n                disabled={loading}\n              >\n                <Icon icon=\"more\" size=\"l\" alt=\"More\" />\n              </button>\n            }\n          >\n            {currentAuthenticated && !isSelf && (\n              <>\n                <MenuItem\n                  onClick={() => {\n                    states.showCompose = {\n                      draftStatus: {\n                        status: `@${currentInfo?.acct || acct} `,\n                      },\n                    };\n                  }}\n                >\n                  <Icon icon=\"at\" />\n                  <span>Mention @{username}</span>\n                </MenuItem>\n                <MenuItem\n                  onClick={() => {\n                    setShowTranslatedBio(true);\n                  }}\n                >\n                  <Icon icon=\"translate\" />\n                  <span>Translate bio</span>\n                </MenuItem>\n                <MenuItem\n                  onClick={() => {\n                    setShowPrivateNoteModal(true);\n                  }}\n                >\n                  <Icon icon=\"pencil\" />\n                  <span>\n                    {privateNote ? 'Edit private note' : 'Add private note'}\n                  </span>\n                </MenuItem>\n                {/* Add/remove from lists is only possible if following the account */}\n                {following && (\n                  <MenuItem\n                    onClick={() => {\n                      setShowAddRemoveLists(true);\n                    }}\n                  >\n                    <Icon icon=\"list\" />\n                    <span>Add/remove from Lists</span>\n                  </MenuItem>\n                )}\n                <MenuDivider />\n              </>\n            )}\n            <MenuItem href={url} target=\"_blank\">\n              <Icon icon=\"external\" />\n              <small class=\"menu-double-lines\">{niceAccountURL(url)}</small>\n            </MenuItem>\n            <div class=\"menu-horizontal\">\n              <MenuItem\n                onClick={() => {\n                  // Copy url to clipboard\n                  try {\n                    navigator.clipboard.writeText(url);\n                    showToast('Link copied');\n                  } catch (e) {\n                    console.error(e);\n                    showToast('Unable to copy link');\n                  }\n                }}\n              >\n                <Icon icon=\"link\" />\n                <span>Copy</span>\n              </MenuItem>\n              {navigator?.share &&\n                navigator?.canShare?.({\n                  url,\n                }) && (\n                  <MenuItem\n                    onClick={() => {\n                      try {\n                        navigator.share({\n                          url,\n                        });\n                      } catch (e) {\n                        console.error(e);\n                        alert(\"Sharing doesn't seem to work.\");\n                      }\n                    }}\n                  >\n                    <Icon icon=\"share\" />\n                    <span>Share…</span>\n                  </MenuItem>\n                )}\n            </div>\n            {!!relationship && (\n              <>\n                <MenuDivider />\n                {muting ? (\n                  <MenuItem\n                    onClick={() => {\n                      setRelationshipUIState('loading');\n                      (async () => {\n                        try {\n                          const newRelationship = await currentMasto.v1.accounts\n                            .$select(currentInfo?.id || id)\n                            .unmute();\n                          console.log('unmuting', newRelationship);\n                          setRelationship(newRelationship);\n                          setRelationshipUIState('default');\n                          showToast(`Unmuted @${username}`);\n                          states.reloadGenericAccounts.id = 'mute';\n                          states.reloadGenericAccounts.counter++;\n                        } catch (e) {\n                          console.error(e);\n                          setRelationshipUIState('error');\n                        }\n                      })();\n                    }}\n                  >\n                    <Icon icon=\"unmute\" />\n                    <span>Unmute @{username}</span>\n                  </MenuItem>\n                ) : (\n                  <SubMenu\n                    openTrigger=\"clickOnly\"\n                    direction=\"bottom\"\n                    overflow=\"auto\"\n                    shift={16}\n                    label={\n                      <>\n                        <Icon icon=\"mute\" />\n                        <span class=\"menu-grow\">Mute @{username}…</span>\n                        <span\n                          style={{\n                            textOverflow: 'clip',\n                          }}\n                        >\n                          <Icon icon=\"time\" />\n                          <Icon icon=\"chevron-right\" />\n                        </span>\n                      </>\n                    }\n                  >\n                    <div class=\"menu-wrap\">\n                      {MUTE_DURATIONS.map((duration) => (\n                        <MenuItem\n                          onClick={() => {\n                            setRelationshipUIState('loading');\n                            (async () => {\n                              try {\n                                const newRelationship =\n                                  await currentMasto.v1.accounts\n                                    .$select(currentInfo?.id || id)\n                                    .mute({\n                                      duration,\n                                    });\n                                console.log('muting', newRelationship);\n                                setRelationship(newRelationship);\n                                setRelationshipUIState('default');\n                                showToast(\n                                  `Muted @${username} for ${MUTE_DURATIONS_LABELS[duration]}`,\n                                );\n                                states.reloadGenericAccounts.id = 'mute';\n                                states.reloadGenericAccounts.counter++;\n                              } catch (e) {\n                                console.error(e);\n                                setRelationshipUIState('error');\n                                showToast(`Unable to mute @${username}`);\n                              }\n                            })();\n                          }}\n                        >\n                          {MUTE_DURATIONS_LABELS[duration]}\n                        </MenuItem>\n                      ))}\n                    </div>\n                  </SubMenu>\n                )}\n                <MenuConfirm\n                  subMenu\n                  confirm={!blocking}\n                  confirmLabel={\n                    <>\n                      <Icon icon=\"block\" />\n                      <span>Block @{username}?</span>\n                    </>\n                  }\n                  menuItemClassName=\"danger\"\n                  onClick={() => {\n                    // if (!blocking && !confirm(`Block @${username}?`)) {\n                    //   return;\n                    // }\n                    setRelationshipUIState('loading');\n                    (async () => {\n                      try {\n                        if (blocking) {\n                          const newRelationship = await currentMasto.v1.accounts\n                            .$select(currentInfo?.id || id)\n                            .unblock();\n                          console.log('unblocking', newRelationship);\n                          setRelationship(newRelationship);\n                          setRelationshipUIState('default');\n                          showToast(`Unblocked @${username}`);\n                        } else {\n                          const newRelationship = await currentMasto.v1.accounts\n                            .$select(currentInfo?.id || id)\n                            .block();\n                          console.log('blocking', newRelationship);\n                          setRelationship(newRelationship);\n                          setRelationshipUIState('default');\n                          showToast(`Blocked @${username}`);\n                        }\n                        states.reloadGenericAccounts.id = 'block';\n                        states.reloadGenericAccounts.counter++;\n                      } catch (e) {\n                        console.error(e);\n                        setRelationshipUIState('error');\n                        if (blocking) {\n                          showToast(`Unable to unblock @${username}`);\n                        } else {\n                          showToast(`Unable to block @${username}`);\n                        }\n                      }\n                    })();\n                  }}\n                >\n                  {blocking ? (\n                    <>\n                      <Icon icon=\"unblock\" />\n                      <span>Unblock @{username}</span>\n                    </>\n                  ) : (\n                    <>\n                      <Icon icon=\"block\" />\n                      <span>Block @{username}…</span>\n                    </>\n                  )}\n                </MenuConfirm>\n                {/* <MenuItem>\n                <Icon icon=\"flag\" />\n                <span>Report @{username}…</span>\n              </MenuItem> */}\n              </>\n            )}\n          </Menu>\n          {!relationship && relationshipUIState === 'loading' && (\n            <Loader abrupt />\n          )}\n          {!!relationship && (\n            <MenuConfirm\n              confirm={following || requested}\n              confirmLabel={\n                <span>\n                  {requested\n                    ? 'Withdraw follow request?'\n                    : `Unfollow @${info.acct || info.username}?`}\n                </span>\n              }\n              menuItemClassName=\"danger\"\n              align=\"end\"\n              disabled={loading}\n              onClick={() => {\n                setRelationshipUIState('loading');\n                (async () => {\n                  try {\n                    let newRelationship;\n\n                    if (following || requested) {\n                      // const yes = confirm(\n                      //   requested\n                      //     ? 'Withdraw follow request?'\n                      //     : `Unfollow @${info.acct || info.username}?`,\n                      // );\n\n                      // if (yes) {\n                      newRelationship = await currentMasto.v1.accounts\n                        .$select(accountID.current)\n                        .unfollow();\n                      // }\n                    } else {\n                      newRelationship = await currentMasto.v1.accounts\n                        .$select(accountID.current)\n                        .follow();\n                    }\n\n                    if (newRelationship) setRelationship(newRelationship);\n                    setRelationshipUIState('default');\n                  } catch (e) {\n                    alert(e);\n                    setRelationshipUIState('error');\n                  }\n                })();\n              }}\n            >\n              <button\n                type=\"button\"\n                class={`${following || requested ? 'light swap' : ''}`}\n                data-swap-state={following || requested ? 'danger' : ''}\n                disabled={loading}\n              >\n                {following ? (\n                  <>\n                    <span>Following</span>\n                    <span>Unfollow…</span>\n                  </>\n                ) : requested ? (\n                  <>\n                    <span>Requested</span>\n                    <span>Withdraw…</span>\n                  </>\n                ) : locked ? (\n                  <>\n                    <Icon icon=\"lock\" /> <span>Follow</span>\n                  </>\n                ) : (\n                  'Follow'\n                )}\n              </button>\n            </MenuConfirm>\n          )}\n        </span>\n      </div>\n      {!!showTranslatedBio && (\n        <Modal\n          class=\"light\"\n          onClose={() => {\n            setShowTranslatedBio(false);\n          }}\n        >\n          <TranslatedBioSheet\n            note={note}\n            fields={fields}\n            onClose={() => setShowTranslatedBio(false)}\n          />\n        </Modal>\n      )}\n      {!!showAddRemoveLists && (\n        <Modal\n          class=\"light\"\n          onClose={() => {\n            setShowAddRemoveLists(false);\n          }}\n        >\n          <AddRemoveListsSheet\n            accountID={accountID.current}\n            onClose={() => setShowAddRemoveLists(false)}\n          />\n        </Modal>\n      )}\n      {!!showPrivateNoteModal && (\n        <Modal\n          class=\"light\"\n          onClose={() => {\n            setShowPrivateNoteModal(false);\n          }}\n        >\n          <PrivateNoteSheet\n            account={info}\n            note={privateNote}\n            onRelationshipChange={(relationship) => {\n              setRelationship(relationship);\n              // onRelationshipChange({ relationship, currentID: accountID.current });\n            }}\n            onClose={() => setShowPrivateNoteModal(false)}\n          />\n        </Modal>\n      )}\n    </>\n  );\n}\n\n// Apply more alpha if high luminence\nfunction lightenRGB([r, g, b]) {\n  const luminence = 0.2126 * r + 0.7152 * g + 0.0722 * b;\n  console.log('luminence', luminence);\n  let alpha;\n  if (luminence >= 220) {\n    alpha = 1;\n  } else if (luminence <= 50) {\n    alpha = 0.1;\n  } else {\n    alpha = luminence / 255;\n  }\n  alpha = Math.min(1, alpha);\n  return [r, g, b, alpha];\n}\n\nfunction niceAccountURL(url) {\n  if (!url) return;\n  const urlObj = new URL(url);\n  const { host, pathname } = urlObj;\n  const path = pathname.replace(/\\/$/, '').replace(/^\\//, '');\n  return (\n    <>\n      <span class=\"more-insignificant\">{host}/</span>\n      <wbr />\n      <span>{path}</span>\n    </>\n  );\n}\n\nfunction TranslatedBioSheet({ note, fields, onClose }) {\n  const fieldsText =\n    fields\n      ?.map(({ name, value }) => `${name}\\n${getHTMLText(value)}`)\n      .join('\\n\\n') || '';\n\n  const text = getHTMLText(note) + (fieldsText ? `\\n\\n${fieldsText}` : '');\n\n  return (\n    <div class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Translated Bio</h2>\n      </header>\n      <main>\n        <p\n          style={{\n            whiteSpace: 'pre-wrap',\n          }}\n        >\n          {text}\n        </p>\n        <TranslationBlock forceTranslate text={text} />\n      </main>\n    </div>\n  );\n}\n\nfunction AddRemoveListsSheet({ accountID, onClose }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [lists, setLists] = useState([]);\n  const [listsContainingAccount, setListsContainingAccount] = useState([]);\n  const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const lists = await masto.v1.lists.list();\n        lists.sort((a, b) => a.title.localeCompare(b.title));\n        const listsContainingAccount = await masto.v1.accounts\n          .$select(accountID)\n          .lists.list();\n        console.log({ lists, listsContainingAccount });\n        setLists(lists);\n        setListsContainingAccount(listsContainingAccount);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, [reloadCount]);\n\n  const [showListAddEditModal, setShowListAddEditModal] = useState(false);\n\n  return (\n    <div class=\"sheet\" id=\"list-add-remove-container\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Add/Remove from Lists</h2>\n      </header>\n      <main>\n        {lists.length > 0 ? (\n          <ul class=\"list-add-remove\">\n            {lists.map((list) => {\n              const inList = listsContainingAccount.some(\n                (l) => l.id === list.id,\n              );\n              return (\n                <li>\n                  <button\n                    type=\"button\"\n                    class={`light ${inList ? 'checked' : ''}`}\n                    disabled={uiState === 'loading'}\n                    onClick={() => {\n                      setUIState('loading');\n                      (async () => {\n                        try {\n                          if (inList) {\n                            await masto.v1.lists\n                              .$select(list.id)\n                              .accounts.remove({\n                                accountIds: [accountID],\n                              });\n                          } else {\n                            await masto.v1.lists\n                              .$select(list.id)\n                              .accounts.create({\n                                accountIds: [accountID],\n                              });\n                          }\n                          // setUIState('default');\n                          reload();\n                        } catch (e) {\n                          console.error(e);\n                          setUIState('error');\n                          alert(\n                            inList\n                              ? 'Unable to remove from list.'\n                              : 'Unable to add to list.',\n                          );\n                        }\n                      })();\n                    }}\n                  >\n                    <Icon icon=\"check-circle\" />\n                    <span>{list.title}</span>\n                  </button>\n                </li>\n              );\n            })}\n          </ul>\n        ) : uiState === 'loading' ? (\n          <p class=\"ui-state\">\n            <Loader abrupt />\n          </p>\n        ) : uiState === 'error' ? (\n          <p class=\"ui-state\">Unable to load lists.</p>\n        ) : (\n          <p class=\"ui-state\">No lists.</p>\n        )}\n        <button\n          type=\"button\"\n          class=\"plain2\"\n          onClick={() => setShowListAddEditModal(true)}\n          disabled={uiState !== 'default'}\n        >\n          <Icon icon=\"plus\" size=\"l\" /> <span>New list</span>\n        </button>\n      </main>\n      {showListAddEditModal && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowListAddEditModal(false);\n            }\n          }}\n        >\n          <ListAddEdit\n            list={showListAddEditModal?.list}\n            onClose={(result) => {\n              if (result.state === 'success') {\n                reload();\n              }\n              setShowListAddEditModal(false);\n            }}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nfunction PrivateNoteSheet({\n  account,\n  note: initialNote,\n  onRelationshipChange = () => {},\n  onClose = () => {},\n}) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const textareaRef = useRef(null);\n\n  useEffect(() => {\n    let timer;\n    if (textareaRef.current && !initialNote) {\n      timer = setTimeout(() => {\n        textareaRef.current.focus?.();\n      }, 100);\n    }\n    return () => {\n      clearTimeout(timer);\n    };\n  }, []);\n\n  return (\n    <div class=\"sheet\" id=\"private-note-container\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <b>Private note about @{account?.username || account?.acct}</b>\n      </header>\n      <main>\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const note = formData.get('note');\n            if (note?.trim() !== initialNote?.trim()) {\n              setUIState('loading');\n              (async () => {\n                try {\n                  const newRelationship = await masto.v1.accounts\n                    .$select(account?.id)\n                    .note.create({\n                      comment: note,\n                    });\n                  console.log('updated relationship', newRelationship);\n                  setUIState('default');\n                  onRelationshipChange(newRelationship);\n                  onClose();\n                } catch (e) {\n                  console.error(e);\n                  setUIState('error');\n                  alert(e?.message || 'Unable to update private note.');\n                }\n              })();\n            }\n          }}\n        >\n          <textarea\n            ref={textareaRef}\n            name=\"note\"\n            disabled={uiState === 'loading'}\n          >\n            {initialNote}\n          </textarea>\n          <footer>\n            <button\n              type=\"button\"\n              class=\"light\"\n              disabled={uiState === 'loading'}\n              onClick={() => {\n                onClose?.();\n              }}\n            >\n              Cancel\n            </button>\n            <span>\n              <Loader abrupt hidden={uiState !== 'loading'} />\n              <button disabled={uiState === 'loading'} type=\"submit\">\n                Save &amp; close\n              </button>\n            </span>\n          </footer>\n        </form>\n      </main>\n    </div>\n  );\n}\n\nexport default AccountInfo;\n","import { useEffect } from 'preact/hooks';\n\nimport { api } from '../utils/api';\nimport states from '../utils/states';\nimport useLocationChange from '../utils/useLocationChange';\n\nimport AccountInfo from './account-info';\nimport Icon from './icon';\n\nfunction AccountSheet({ account, instance: propInstance, onClose }) {\n  const { masto, instance, authenticated } = api({ instance: propInstance });\n  const isString = typeof account === 'string';\n\n  useEffect(() => {\n    if (!isString) {\n      states.accounts[`${account.id}@${instance}`] = account;\n    }\n  }, [account]);\n\n  useLocationChange(onClose);\n\n  return (\n    <div\n      class=\"sheet\"\n      // onClick={(e) => {\n      //   const accountBlock = e.target.closest('.account-block');\n      //   if (accountBlock) {\n      //     onClose({\n      //       destination: 'account-statuses',\n      //     });\n      //   }\n      // }}\n    >\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close outer\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <AccountInfo\n        instance={instance}\n        authenticated={authenticated}\n        account={account}\n        fetchAccount={async () => {\n          if (isString) {\n            try {\n              const info = await masto.v1.accounts.lookup({\n                acct: account,\n                skip_webfinger: false,\n              });\n              return info;\n            } catch (e) {\n              const result = await masto.v2.search.fetch({\n                q: account,\n                type: 'accounts',\n                limit: 1,\n                resolve: authenticated,\n              });\n              if (result.accounts.length) {\n                return result.accounts[0];\n              } else if (/https?:\\/\\/[^/]+\\/@/.test(account)) {\n                const accountURL = new URL(account);\n                const acct = accountURL.pathname.replace(/^\\//, '');\n                const result = await masto.v2.search.fetch({\n                  q: acct,\n                  type: 'accounts',\n                  limit: 1,\n                  resolve: authenticated,\n                });\n                if (result.accounts.length) {\n                  return result.accounts[0];\n                }\n              }\n            }\n          } else {\n            return account;\n          }\n        }}\n      />\n    </div>\n  );\n}\n\nexport default AccountSheet;\n","import './drafts.css';\n\nimport { useEffect, useMemo, useReducer, useState } from 'react';\n\nimport { api } from '../utils/api';\nimport db from '../utils/db';\nimport niceDateTime from '../utils/nice-date-time';\nimport states from '../utils/states';\nimport { getCurrentAccountNS } from '../utils/store-utils';\n\nimport Icon from './icon';\nimport Loader from './loader';\nimport MenuConfirm from './menu-confirm';\n\nfunction Drafts({ onClose }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [drafts, setDrafts] = useState([]);\n  const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const keys = await db.drafts.keys();\n        if (keys.length) {\n          const ns = getCurrentAccountNS();\n          const ownKeys = keys.filter((key) => key.startsWith(ns));\n          if (ownKeys.length) {\n            const drafts = await db.drafts.getMany(ownKeys);\n            drafts.sort(\n              (a, b) =>\n                new Date(b.updatedAt).getTime() -\n                new Date(a.updatedAt).getTime(),\n            );\n            setDrafts(drafts);\n          } else {\n            setDrafts([]);\n          }\n        } else {\n          setDrafts([]);\n        }\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, [reloadCount]);\n\n  const hasDrafts = drafts?.length > 0;\n\n  return (\n    <div class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>\n          Unsent drafts <Loader abrupt hidden={uiState !== 'loading'} />\n        </h2>\n        {hasDrafts && (\n          <div class=\"insignificant\">\n            Looks like you have unsent drafts. Let's continue where you left\n            off.\n          </div>\n        )}\n      </header>\n      <main>\n        {hasDrafts ? (\n          <>\n            <ul class=\"drafts-list\">\n              {drafts.map((draft) => {\n                const { updatedAt, key, draftStatus, replyTo } = draft;\n                const updatedAtDate = new Date(updatedAt);\n                return (\n                  <li key={updatedAt}>\n                    <div class=\"mini-draft-meta\">\n                      <b>\n                        <Icon icon={replyTo ? 'reply' : 'quill'} size=\"s\" />{' '}\n                        <time>\n                          {!!replyTo && (\n                            <>\n                              @{replyTo.account.acct}\n                              <br />\n                            </>\n                          )}\n                          {niceDateTime(updatedAtDate)}\n                        </time>\n                      </b>\n                      <MenuConfirm\n                        confirmLabel={<span>Delete this draft?</span>}\n                        menuItemClassName=\"danger\"\n                        align=\"end\"\n                        disabled={uiState === 'loading'}\n                        onClick={() => {\n                          (async () => {\n                            try {\n                              // const yes = confirm('Delete this draft?');\n                              // if (yes) {\n                              await db.drafts.del(key);\n                              reload();\n                              // }\n                            } catch (e) {\n                              alert('Error deleting draft! Please try again.');\n                            }\n                          })();\n                        }}\n                      >\n                        <button\n                          type=\"button\"\n                          class=\"small light\"\n                          disabled={uiState === 'loading'}\n                        >\n                          Delete&hellip;\n                        </button>\n                      </MenuConfirm>\n                    </div>\n                    <button\n                      type=\"button\"\n                      disabled={uiState === 'loading'}\n                      class=\"draft-item\"\n                      onClick={async () => {\n                        // console.log({ draftStatus });\n                        let replyToStatus;\n                        if (replyTo) {\n                          setUIState('loading');\n                          try {\n                            replyToStatus = await masto.v1.statuses\n                              .$select(replyTo.id)\n                              .fetch();\n                          } catch (e) {\n                            console.error(e);\n                            alert('Error fetching reply-to status!');\n                            setUIState('default');\n                            return;\n                          }\n                          setUIState('default');\n                        }\n                        window.__COMPOSE__ = {\n                          draftStatus,\n                          replyToStatus,\n                        };\n                        states.showCompose = true;\n                        states.showDrafts = false;\n                      }}\n                    >\n                      <MiniDraft draft={draft} />\n                    </button>\n                  </li>\n                );\n              })}\n            </ul>\n            {drafts.length > 1 && (\n              <p>\n                <MenuConfirm\n                  confirmLabel={<span>Delete all drafts?</span>}\n                  menuItemClassName=\"danger\"\n                  disabled={uiState === 'loading'}\n                  onClick={() => {\n                    (async () => {\n                      // const yes = confirm('Delete all drafts?');\n                      // if (yes) {\n                      setUIState('loading');\n                      try {\n                        await db.drafts.delMany(\n                          drafts.map((draft) => draft.key),\n                        );\n                        setUIState('default');\n                        reload();\n                      } catch (e) {\n                        console.error(e);\n                        alert('Error deleting drafts! Please try again.');\n                        setUIState('error');\n                      }\n                      // }\n                    })();\n                  }}\n                >\n                  <button\n                    type=\"button\"\n                    class=\"light danger\"\n                    disabled={uiState === 'loading'}\n                  >\n                    Delete all&hellip;\n                  </button>\n                </MenuConfirm>\n              </p>\n            )}\n          </>\n        ) : (\n          <p>No drafts found.</p>\n        )}\n      </main>\n    </div>\n  );\n}\n\nfunction MiniDraft({ draft }) {\n  const { draftStatus, replyTo } = draft;\n  const { status, spoilerText, poll, mediaAttachments } = draftStatus;\n  const hasPoll = poll?.options?.length > 0;\n  const hasMedia = mediaAttachments?.length > 0;\n  const hasPollOrMedia = hasPoll || hasMedia;\n  const firstImageMedia = useMemo(() => {\n    if (!hasMedia) return;\n    const image = mediaAttachments.find((media) => /image/.test(media.type));\n    if (!image) return;\n    const { file } = image;\n    const objectURL = URL.createObjectURL(file);\n    return objectURL;\n  }, [hasMedia, mediaAttachments]);\n  return (\n    <>\n      <div class=\"mini-draft\">\n        {hasPollOrMedia && (\n          <div\n            class={`mini-draft-aside ${firstImageMedia ? 'has-image' : ''}`}\n            style={\n              firstImageMedia\n                ? {\n                    '--bg-image': `url(${firstImageMedia})`,\n                  }\n                : {}\n            }\n          >\n            {hasPoll && <Icon icon=\"poll\" />}\n            {hasMedia && (\n              <span>\n                <Icon icon=\"attachment\" />{' '}\n                <small>{mediaAttachments?.length}</small>\n              </span>\n            )}\n          </div>\n        )}\n        <div class=\"mini-draft-main\">\n          {!!spoilerText && <div class=\"mini-draft-spoiler\">{spoilerText}</div>}\n          {!!status && <div class=\"mini-draft-status\">{status}</div>}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Drafts;\n","import './generic-accounts.css';\n\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { InView } from 'react-intersection-observer';\nimport { useSnapshot } from 'valtio';\n\nimport states from '../utils/states';\nimport useLocationChange from '../utils/useLocationChange';\n\nimport AccountBlock from './account-block';\nimport Icon from './icon';\nimport Loader from './loader';\n\nexport default function GenericAccounts({ onClose = () => {} }) {\n  const snapStates = useSnapshot(states);\n  const [uiState, setUIState] = useState('default');\n  const [accounts, setAccounts] = useState([]);\n  const [showMore, setShowMore] = useState(false);\n\n  useLocationChange(onClose);\n\n  if (!snapStates.showGenericAccounts) {\n    return null;\n  }\n\n  const {\n    id,\n    heading,\n    fetchAccounts,\n    accounts: staticAccounts,\n    showReactions,\n  } = snapStates.showGenericAccounts;\n\n  const loadAccounts = (firstLoad) => {\n    if (!fetchAccounts) return;\n    if (firstLoad) setAccounts([]);\n    setUIState('loading');\n    (async () => {\n      try {\n        const { done, value } = await fetchAccounts(firstLoad);\n        if (Array.isArray(value)) {\n          if (firstLoad) {\n            setAccounts(value);\n          } else {\n            setAccounts((prev) => [...prev, ...value]);\n          }\n          setShowMore(!done);\n        } else {\n          setShowMore(false);\n        }\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  };\n\n  const firstLoad = useRef(true);\n  useEffect(() => {\n    if (staticAccounts?.length > 0) {\n      setAccounts(staticAccounts);\n    } else {\n      loadAccounts(true);\n      firstLoad.current = false;\n    }\n  }, [staticAccounts, fetchAccounts]);\n\n  useEffect(() => {\n    if (firstLoad.current) return;\n    // reloadGenericAccounts contains value like {id: 'mute', counter: 1}\n    // We only need to reload if the id matches\n    if (snapStates.reloadGenericAccounts?.id === id) {\n      loadAccounts(true);\n    }\n  }, [snapStates.reloadGenericAccounts.counter]);\n\n  return (\n    <div id=\"generic-accounts-container\" class=\"sheet\" tabindex=\"-1\">\n      <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n        <Icon icon=\"x\" />\n      </button>\n      <header>\n        <h2>{heading || 'Accounts'}</h2>\n      </header>\n      <main>\n        {accounts.length > 0 ? (\n          <>\n            <ul class=\"accounts-list\">\n              {accounts.map((account) => (\n                <li key={account.id + (account._types || '')}>\n                  {showReactions && account._types?.length > 0 && (\n                    <div class=\"reactions-block\">\n                      {account._types.map((type) => (\n                        <Icon\n                          icon={\n                            {\n                              reblog: 'rocket',\n                              favourite: 'heart',\n                            }[type]\n                          }\n                          class={`${type}-icon`}\n                        />\n                      ))}\n                    </div>\n                  )}\n                  <AccountBlock account={account} />\n                </li>\n              ))}\n            </ul>\n            {uiState === 'default' ? (\n              showMore ? (\n                <InView\n                  onChange={(inView) => {\n                    if (inView) {\n                      loadAccounts();\n                    }\n                  }}\n                >\n                  <button\n                    type=\"button\"\n                    class=\"plain block\"\n                    onClick={() => loadAccounts()}\n                  >\n                    Show more&hellip;\n                  </button>\n                </InView>\n              ) : (\n                <p class=\"ui-state insignificant\">The end.</p>\n              )\n            ) : (\n              uiState === 'loading' && (\n                <p class=\"ui-state\">\n                  <Loader abrupt />\n                </p>\n              )\n            )}\n          </>\n        ) : uiState === 'loading' ? (\n          <p class=\"ui-state\">\n            <Loader abrupt />\n          </p>\n        ) : uiState === 'error' ? (\n          <p class=\"ui-state\">Error loading accounts</p>\n        ) : (\n          <p class=\"ui-state insignificant\">Nothing to show</p>\n        )}\n      </main>\n    </div>\n  );\n}\n","import { Menu, MenuItem } from '@szhsin/react-menu';\nimport { useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport getTranslateTargetLanguage from '../utils/get-translate-target-language';\nimport localeMatch from '../utils/locale-match';\nimport states from '../utils/states';\n\nimport Icon from './icon';\nimport TranslationBlock from './translation-block';\n\nexport default function MediaAltModal({ alt, lang, onClose }) {\n  const snapStates = useSnapshot(states);\n  const [forceTranslate, setForceTranslate] = useState(false);\n  const targetLanguage = getTranslateTargetLanguage(true);\n  const contentTranslationHideLanguages =\n    snapStates.settings.contentTranslationHideLanguages || [];\n  const differentLanguage =\n    !!lang &&\n    lang !== targetLanguage &&\n    !localeMatch([lang], [targetLanguage]) &&\n    !contentTranslationHideLanguages.find(\n      (l) => lang === l || localeMatch([lang], [l]),\n    );\n\n  return (\n    <div class=\"sheet\" tabindex=\"-1\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close outer\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header class=\"header-grid\">\n        <h2>Media description</h2>\n        <div class=\"header-side\">\n          <Menu\n            align=\"end\"\n            menuButton={\n              <button type=\"button\" class=\"plain4\">\n                <Icon icon=\"more\" alt=\"More\" size=\"xl\" />\n              </button>\n            }\n          >\n            <MenuItem\n              disabled={forceTranslate}\n              onClick={() => {\n                setForceTranslate(true);\n              }}\n            >\n              <Icon icon=\"translate\" />\n              <span>Translate</span>\n            </MenuItem>\n          </Menu>\n        </div>\n      </header>\n      <main lang={lang} dir=\"auto\">\n        <p\n          style={{\n            whiteSpace: 'pre-wrap',\n            textWrap: 'pretty',\n          }}\n        >\n          {alt}\n        </p>\n        {(differentLanguage || forceTranslate) && (\n          <TranslationBlock\n            forceTranslate={forceTranslate}\n            sourceLanguage={lang}\n            text={alt}\n          />\n        )}\n      </main>\n    </div>\n  );\n}\n","// https://gist.github.com/earthbound19/e7fe15fdf8ca3ef814750a61bc75b5ce\nfunction clamp(value, min, max) {\n  return Math.max(Math.min(value, max), min);\n}\n\nconst gammaToLinear = (c) =>\n  c >= 0.04045 ? Math.pow((c + 0.055) / 1.055, 2.4) : c / 12.92;\nconst linearToGamma = (c) =>\n  c >= 0.0031308 ? 1.055 * Math.pow(c, 1 / 2.4) - 0.055 : 12.92 * c;\n\nexport function rgb2oklab([r, g, b]) {\n  r = gammaToLinear(r / 255);\n  g = gammaToLinear(g / 255);\n  b = gammaToLinear(b / 255);\n  var l = 0.4122214708 * r + 0.5363325363 * g + 0.0514459929 * b;\n  var m = 0.2119034982 * r + 0.6806995451 * g + 0.1073969566 * b;\n  var s = 0.0883024619 * r + 0.2817188376 * g + 0.6299787005 * b;\n  l = Math.cbrt(l);\n  m = Math.cbrt(m);\n  s = Math.cbrt(s);\n  return [\n    l * +0.2104542553 + m * +0.793617785 + s * -0.0040720468,\n    l * +1.9779984951 + m * -2.428592205 + s * +0.4505937099,\n    l * +0.0259040371 + m * +0.7827717662 + s * -0.808675766,\n  ];\n}\n\nexport function oklab2rgb([L, a, b]) {\n  var l = L + a * +0.3963377774 + b * +0.2158037573;\n  var m = L + a * -0.1055613458 + b * -0.0638541728;\n  var s = L + a * -0.0894841775 + b * -1.291485548;\n  // The ** operator here cubes; same as l_*l_*l_ in the C++ example:\n  l = l ** 3;\n  m = m ** 3;\n  s = s ** 3;\n  var r = l * +4.0767416621 + m * -3.3077115913 + s * +0.2309699292;\n  var g = l * -1.2684380046 + m * +2.6097574011 + s * -0.3413193965;\n  var b = l * -0.0041960863 + m * -0.7034186147 + s * +1.707614701;\n  // Convert linear RGB values returned from oklab math to sRGB for our use before returning them:\n  r = 255 * linearToGamma(r);\n  g = 255 * linearToGamma(g);\n  b = 255 * linearToGamma(b);\n  // OPTION: clamp r g and b values to the range 0-255; but if you use the values immediately to draw, JavaScript clamps them on use:\n  r = clamp(r, 0, 255);\n  g = clamp(g, 0, 255);\n  b = clamp(b, 0, 255);\n  // OPTION: round the values. May not be necessary if you use them immediately for rendering in JavaScript, as JavaScript (also) discards decimals on render:\n  r = Math.round(r);\n  g = Math.round(g);\n  b = Math.round(b);\n  return [r, g, b];\n}\n","import { Menu } from '@szhsin/react-menu';\nimport { getBlurHashAverageColor } from 'fast-blurhash';\nimport { useEffect, useLayoutEffect, useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\n\nimport { oklab2rgb, rgb2oklab } from '../utils/color-utils';\nimport states from '../utils/states';\n\nimport Icon from './icon';\nimport Link from './link';\nimport Media from './media';\nimport MenuLink from './menu-link';\n\nfunction MediaModal({\n  mediaAttachments,\n  statusID,\n  instance,\n  lang,\n  index = 0,\n  onClose = () => {},\n}) {\n  const carouselRef = useRef(null);\n\n  const [currentIndex, setCurrentIndex] = useState(index);\n  const carouselFocusItem = useRef(null);\n  useLayoutEffect(() => {\n    carouselFocusItem.current?.scrollIntoView();\n\n    // history.pushState({ mediaModal: true }, '');\n    // const handlePopState = (e) => {\n    //   if (e.state?.mediaModal) {\n    //     onClose();\n    //   }\n    // };\n    // window.addEventListener('popstate', handlePopState);\n    // return () => {\n    //   window.removeEventListener('popstate', handlePopState);\n    // };\n  }, []);\n  const prevStatusID = useRef(statusID);\n  useEffect(() => {\n    const scrollLeft = index * carouselRef.current.clientWidth;\n    const differentStatusID = prevStatusID.current !== statusID;\n    if (differentStatusID) prevStatusID.current = statusID;\n    carouselRef.current.scrollTo({\n      left: scrollLeft,\n      behavior: differentStatusID ? 'auto' : 'smooth',\n    });\n    carouselRef.current.focus();\n  }, [index, statusID]);\n\n  const [showControls, setShowControls] = useState(true);\n\n  useEffect(() => {\n    let handleSwipe = () => {\n      onClose();\n    };\n    if (carouselRef.current) {\n      carouselRef.current.addEventListener('swiped-down', handleSwipe);\n    }\n    return () => {\n      if (carouselRef.current) {\n        carouselRef.current.removeEventListener('swiped-down', handleSwipe);\n      }\n    };\n  }, []);\n\n  useHotkeys(\n    'esc',\n    onClose,\n    {\n      ignoreEventWhen: (e) => {\n        const hasModal = !!document.querySelector('#modal-container > *');\n        return hasModal;\n      },\n    },\n    [onClose],\n  );\n\n  useEffect(() => {\n    let handleScroll = () => {\n      const { clientWidth, scrollLeft } = carouselRef.current;\n      const index = Math.round(scrollLeft / clientWidth);\n      setCurrentIndex(index);\n    };\n    if (carouselRef.current) {\n      carouselRef.current.addEventListener('scroll', handleScroll, {\n        passive: true,\n      });\n    }\n    return () => {\n      if (carouselRef.current) {\n        carouselRef.current.removeEventListener('scroll', handleScroll);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    let timer = setTimeout(() => {\n      carouselRef.current?.focus?.();\n    }, 100);\n    return () => clearTimeout(timer);\n  }, []);\n\n  return (\n    <div\n      class={`media-modal-container media-modal-count-${mediaAttachments?.length}`}\n    >\n      <div\n        ref={carouselRef}\n        tabIndex=\"0\"\n        data-swipe-threshold=\"44\"\n        class=\"carousel\"\n        onClick={(e) => {\n          if (\n            e.target.classList.contains('carousel-item') ||\n            e.target.classList.contains('media') ||\n            e.target.classList.contains('media-zoom')\n          ) {\n            onClose();\n          }\n        }}\n      >\n        {mediaAttachments?.map((media, i) => {\n          const { blurhash } = media;\n          let accentColor;\n          if (blurhash) {\n            const averageColor = getBlurHashAverageColor(blurhash);\n            const labAverageColor = rgb2oklab(averageColor);\n            accentColor = oklab2rgb([\n              0.6,\n              labAverageColor[1],\n              labAverageColor[2],\n            ]);\n          }\n          return (\n            <div\n              class=\"carousel-item\"\n              style={{\n                '--accent-color': `rgb(${accentColor?.join(',')})`,\n                '--accent-alpha-color': `rgba(${accentColor?.join(',')}, 0.4)`,\n              }}\n              tabindex=\"0\"\n              key={media.id}\n              ref={i === currentIndex ? carouselFocusItem : null}\n              onClick={(e) => {\n                // console.log(e);\n                // if (e.target !== e.currentTarget) {\n                //   setShowControls(!showControls);\n                // }\n                if (!e.target.classList.contains('media')) {\n                  setShowControls(!showControls);\n                }\n              }}\n            >\n              {!!media.description && (\n                <button\n                  type=\"button\"\n                  class=\"media-alt\"\n                  hidden={!showControls}\n                  onClick={() => {\n                    states.showMediaAlt = {\n                      alt: media.description,\n                      lang,\n                    };\n                  }}\n                >\n                  <span class=\"alt-badge\">ALT</span>\n                  <span class=\"media-alt-desc\" lang={lang} dir=\"auto\">\n                    {media.description}\n                  </span>\n                </button>\n              )}\n              <Media media={media} showOriginal lang={lang} />\n            </div>\n          );\n        })}\n      </div>\n      <div class=\"carousel-top-controls\" hidden={!showControls}>\n        <span>\n          <button\n            type=\"button\"\n            class=\"carousel-button\"\n            onClick={() => onClose()}\n          >\n            <Icon icon=\"x\" />\n          </button>\n        </span>\n        {mediaAttachments?.length > 1 ? (\n          <span class=\"carousel-dots\">\n            {mediaAttachments?.map((media, i) => (\n              <button\n                key={media.id}\n                type=\"button\"\n                disabled={i === currentIndex}\n                class={`carousel-dot ${i === currentIndex ? 'active' : ''}`}\n                onClick={(e) => {\n                  e.preventDefault();\n                  e.stopPropagation();\n                  carouselRef.current.scrollTo({\n                    left: carouselRef.current.clientWidth * i,\n                    behavior: 'smooth',\n                  });\n                  carouselRef.current.focus();\n                }}\n              >\n                <Icon icon=\"round\" size=\"s\" />\n              </button>\n            ))}\n          </span>\n        ) : (\n          <span />\n        )}\n        <span>\n          <Menu\n            overflow=\"auto\"\n            align=\"end\"\n            position=\"anchor\"\n            boundingBoxPadding=\"8 8 8 8\"\n            gap={4}\n            menuClassName=\"glass-menu\"\n            menuButton={\n              <button type=\"button\" class=\"carousel-button\">\n                <Icon icon=\"more\" alt=\"More\" />\n              </button>\n            }\n          >\n            <MenuLink\n              href={\n                mediaAttachments[currentIndex]?.remoteUrl ||\n                mediaAttachments[currentIndex]?.url\n              }\n              class=\"carousel-button\"\n              target=\"_blank\"\n              title=\"Open original media in new window\"\n            >\n              <Icon icon=\"popout\" />\n              <span>Open original media</span>\n            </MenuLink>\n          </Menu>{' '}\n          <Link\n            to={`${instance ? `/${instance}` : ''}/s/${statusID}${\n              window.matchMedia('(min-width: calc(40em + 350px))').matches\n                ? `?media=${currentIndex + 1}`\n                : ''\n            }`}\n            class=\"button carousel-button media-post-link\"\n            // onClick={() => {\n            //   // if small screen (not media query min-width 40em + 350px), run onClose\n            //   if (\n            //     !window.matchMedia('(min-width: calc(40em + 350px))').matches\n            //   ) {\n            //     onClose();\n            //   }\n            // }}\n          >\n            <span class=\"button-label\">View post </span>&raquo;\n          </Link>\n        </span>\n      </div>\n      {mediaAttachments?.length > 1 && (\n        <div class=\"carousel-controls\" hidden={!showControls}>\n          <button\n            type=\"button\"\n            class=\"carousel-button\"\n            hidden={currentIndex === 0}\n            onClick={(e) => {\n              e.preventDefault();\n              e.stopPropagation();\n              carouselRef.current.focus();\n              carouselRef.current.scrollTo({\n                left: carouselRef.current.clientWidth * (currentIndex - 1),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"arrow-left\" />\n          </button>\n          <button\n            type=\"button\"\n            class=\"carousel-button\"\n            hidden={currentIndex === mediaAttachments.length - 1}\n            onClick={(e) => {\n              e.preventDefault();\n              e.stopPropagation();\n              carouselRef.current.focus();\n              carouselRef.current.scrollTo({\n                left: carouselRef.current.clientWidth * (currentIndex + 1),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"arrow-right\" />\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default MediaModal;\n","export default \"__VITE_ASSET__bb9f04b2__\"","export default \"__VITE_ASSET__4fe390d9__\"","export default \"__VITE_ASSET__976e7e89__\"","import { useEffect, useState } from 'preact/hooks';\n\nfunction AsyncText({ children }) {\n  if (typeof children === 'string') return children;\n  const [text, setText] = useState('');\n  useEffect(() => {\n    Promise.resolve(children).then(setText);\n  }, [children]);\n  return text;\n}\n\nexport default AsyncText;\n","import './shortcuts-settings.css';\n\nimport { useAutoAnimate } from '@formkit/auto-animate/preact';\nimport {\n  compressToEncodedURIComponent,\n  decompressFromEncodedURIComponent,\n} from 'lz-string';\nimport { useEffect, useMemo, useRef, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport floatingButtonUrl from '../assets/floating-button.svg';\nimport multiColumnUrl from '../assets/multi-column.svg';\nimport tabMenuBarUrl from '../assets/tab-menu-bar.svg';\n\nimport { api } from '../utils/api';\nimport pmem from '../utils/pmem';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\n\nimport AsyncText from './AsyncText';\nimport Icon from './icon';\nimport MenuConfirm from './menu-confirm';\nimport Modal from './modal';\n\nexport const SHORTCUTS_LIMIT = 9;\n\nconst TYPES = [\n  'following',\n  'mentions',\n  'notifications',\n  'list',\n  'public',\n  'trending',\n  // NOTE: Hide for now\n  // 'search', // Search on Mastodon ain't great\n  // 'account-statuses', // Need @acct search first\n  'hashtag',\n  'bookmarks',\n  'favourites',\n];\nconst TYPE_TEXT = {\n  following: 'Home / Following',\n  notifications: 'Notifications',\n  list: 'List',\n  public: 'Public (Local / Federated)',\n  search: 'Search',\n  'account-statuses': 'Account',\n  bookmarks: 'Bookmarks',\n  favourites: 'Likes',\n  hashtag: 'Hashtag',\n  trending: 'Trending',\n  mentions: 'Mentions',\n};\nconst TYPE_PARAMS = {\n  list: [\n    {\n      text: 'List ID',\n      name: 'id',\n    },\n  ],\n  public: [\n    {\n      text: 'Local only',\n      name: 'local',\n      type: 'checkbox',\n    },\n    {\n      text: 'Instance',\n      name: 'instance',\n      type: 'text',\n      placeholder: 'Optional, e.g. mastodon.social',\n      notRequired: true,\n    },\n  ],\n  trending: [\n    {\n      text: 'Instance',\n      name: 'instance',\n      type: 'text',\n      placeholder: 'Optional, e.g. mastodon.social',\n      notRequired: true,\n    },\n  ],\n  search: [\n    {\n      text: 'Search term',\n      name: 'query',\n      type: 'text',\n    },\n  ],\n  'account-statuses': [\n    {\n      text: '@',\n      name: 'id',\n      type: 'text',\n      placeholder: 'cheeaun@mastodon.social',\n    },\n  ],\n  hashtag: [\n    {\n      text: '#',\n      name: 'hashtag',\n      type: 'text',\n      placeholder: 'e.g. PixelArt (Max 5, space-separated)',\n      pattern: '[^#]+',\n    },\n    {\n      text: 'Media only',\n      name: 'media',\n      type: 'checkbox',\n    },\n    {\n      text: 'Instance',\n      name: 'instance',\n      type: 'text',\n      placeholder: 'Optional, e.g. mastodon.social',\n      notRequired: true,\n    },\n  ],\n};\nconst fetchListTitle = pmem(async ({ id }) => {\n  const list = await api().masto.v1.lists.$select(id).fetch();\n  return list.title;\n});\nconst fetchAccountTitle = pmem(async ({ id }) => {\n  const account = await api().masto.v1.accounts.$select(id).fetch();\n  return account.username || account.acct || account.displayName;\n});\nexport const SHORTCUTS_META = {\n  following: {\n    id: 'home',\n    title: (_, index) => (index === 0 ? 'Home' : 'Following'),\n    path: '/',\n    icon: 'home',\n  },\n  mentions: {\n    id: 'mentions',\n    title: 'Mentions',\n    path: '/mentions',\n    icon: 'at',\n  },\n  notifications: {\n    id: 'notifications',\n    title: 'Notifications',\n    path: '/notifications',\n    icon: 'notification',\n  },\n  list: {\n    id: 'list',\n    title: fetchListTitle,\n    path: ({ id }) => `/l/${id}`,\n    icon: 'list',\n  },\n  public: {\n    id: 'public',\n    title: ({ local }) => (local ? 'Local' : 'Federated'),\n    subtitle: ({ instance }) => instance || api().instance,\n    path: ({ local, instance }) => `/${instance}/p${local ? '/l' : ''}`,\n    icon: ({ local }) => (local ? 'group' : 'earth'),\n  },\n  trending: {\n    id: 'trending',\n    title: 'Trending',\n    subtitle: ({ instance }) => instance || api().instance,\n    path: ({ instance }) => `/${instance}/trending`,\n    icon: 'chart',\n  },\n  search: {\n    id: 'search',\n    title: ({ query }) => query,\n    path: ({ query }) => `/search?q=${query}`,\n    icon: 'search',\n  },\n  'account-statuses': {\n    id: 'account-statuses',\n    title: fetchAccountTitle,\n    path: ({ id }) => `/a/${id}`,\n    icon: 'user',\n  },\n  bookmarks: {\n    id: 'bookmarks',\n    title: 'Bookmarks',\n    path: '/b',\n    icon: 'bookmark',\n  },\n  favourites: {\n    id: 'favourites',\n    title: 'Likes',\n    path: '/f',\n    icon: 'heart',\n  },\n  hashtag: {\n    id: 'hashtag',\n    title: ({ hashtag }) => hashtag,\n    subtitle: ({ instance }) => instance || api().instance,\n    path: ({ hashtag, instance, media }) =>\n      `${instance ? `/${instance}` : ''}/t/${hashtag.split(/\\s+/).join('+')}${\n        media ? '?media=1' : ''\n      }`,\n    icon: 'hashtag',\n  },\n};\n\nfunction ShortcutsSettings({ onClose }) {\n  const snapStates = useSnapshot(states);\n  const { shortcuts } = snapStates;\n  const [showForm, setShowForm] = useState(false);\n  const [showImportExport, setShowImportExport] = useState(false);\n\n  const [shortcutsListParent] = useAutoAnimate();\n\n  return (\n    <div id=\"shortcuts-settings-container\" class=\"sheet\" tabindex=\"-1\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>\n          <Icon icon=\"shortcut\" /> Shortcuts{' '}\n          <sup\n            style={{\n              fontSize: 12,\n              opacity: 0.5,\n              textTransform: 'uppercase',\n            }}\n          >\n            beta\n          </sup>\n        </h2>\n      </header>\n      <main>\n        <p>Specify a list of shortcuts that'll appear&nbsp;as:</p>\n        <div class=\"shortcuts-view-mode\">\n          {[\n            {\n              value: 'float-button',\n              label: 'Floating button',\n              imgURL: floatingButtonUrl,\n            },\n            {\n              value: 'tab-menu-bar',\n              label: 'Tab/Menu bar',\n              imgURL: tabMenuBarUrl,\n            },\n            {\n              value: 'multi-column',\n              label: 'Multi-column',\n              imgURL: multiColumnUrl,\n            },\n          ].map(({ value, label, imgURL }) => {\n            const checked =\n              snapStates.settings.shortcutsViewMode === value ||\n              (value === 'float-button' &&\n                !snapStates.settings.shortcutsViewMode);\n            return (\n              <label key={value} class={checked ? 'checked' : ''}>\n                <input\n                  type=\"radio\"\n                  name=\"shortcuts-view-mode\"\n                  value={value}\n                  checked={checked}\n                  onChange={(e) => {\n                    states.settings.shortcutsViewMode = e.target.value;\n                  }}\n                />{' '}\n                <img src={imgURL} alt=\"\" width=\"80\" height=\"58\" />{' '}\n                <span>{label}</span>\n              </label>\n            );\n          })}\n        </div>\n        {shortcuts.length > 0 ? (\n          <ol class=\"shortcuts-list\" ref={shortcutsListParent}>\n            {shortcuts.filter(Boolean).map((shortcut, i) => {\n              // const key = i + Object.values(shortcut);\n              const key = Object.values(shortcut).join('-');\n              const { type } = shortcut;\n              if (!SHORTCUTS_META[type]) return null;\n              let { icon, title, subtitle } = SHORTCUTS_META[type];\n              if (typeof title === 'function') {\n                title = title(shortcut, i);\n              }\n              if (typeof subtitle === 'function') {\n                subtitle = subtitle(shortcut, i);\n              }\n              if (typeof icon === 'function') {\n                icon = icon(shortcut, i);\n              }\n              return (\n                <li key={key}>\n                  <Icon icon={icon} />\n                  <span class=\"shortcut-text\">\n                    <AsyncText>{title}</AsyncText>\n                    {subtitle && (\n                      <>\n                        {' '}\n                        <small class=\"ib insignificant\">{subtitle}</small>\n                      </>\n                    )}\n                  </span>\n                  <span class=\"shortcut-actions\">\n                    <button\n                      type=\"button\"\n                      class=\"plain small\"\n                      disabled={i === 0}\n                      onClick={() => {\n                        const shortcutsArr = Array.from(states.shortcuts);\n                        if (i > 0) {\n                          const temp = states.shortcuts[i - 1];\n                          shortcutsArr[i - 1] = shortcut;\n                          shortcutsArr[i] = temp;\n                          states.shortcuts = shortcutsArr;\n                        }\n                      }}\n                    >\n                      <Icon icon=\"arrow-up\" alt=\"Move up\" />\n                    </button>\n                    <button\n                      type=\"button\"\n                      class=\"plain small\"\n                      disabled={i === shortcuts.length - 1}\n                      onClick={() => {\n                        const shortcutsArr = Array.from(states.shortcuts);\n                        if (i < states.shortcuts.length - 1) {\n                          const temp = states.shortcuts[i + 1];\n                          shortcutsArr[i + 1] = shortcut;\n                          shortcutsArr[i] = temp;\n                          states.shortcuts = shortcutsArr;\n                        }\n                      }}\n                    >\n                      <Icon icon=\"arrow-down\" alt=\"Move down\" />\n                    </button>\n                    <button\n                      type=\"button\"\n                      class=\"plain small\"\n                      onClick={() => {\n                        setShowForm({\n                          shortcut,\n                          shortcutIndex: i,\n                        });\n                      }}\n                    >\n                      <Icon icon=\"pencil\" alt=\"Edit\" />\n                    </button>\n                    {/* <button\n                      type=\"button\"\n                      class=\"plain small\"\n                      onClick={() => {\n                        states.shortcuts.splice(i, 1);\n                      }}\n                    >\n                      <Icon icon=\"x\" alt=\"Remove\" />\n                    </button> */}\n                  </span>\n                </li>\n              );\n            })}\n          </ol>\n        ) : (\n          <div class=\"ui-state insignificant\">\n            <p>No shortcuts yet. Tap on the Add shortcut button.</p>\n            <p>\n              Not sure what to add?\n              <br />\n              Try adding{' '}\n              <a\n                href=\"#\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  states.shortcuts = [\n                    {\n                      type: 'following',\n                    },\n                    {\n                      type: 'notifications',\n                    },\n                  ];\n                }}\n              >\n                Home / Following and Notifications\n              </a>{' '}\n              first.\n            </p>\n          </div>\n        )}\n        <p class=\"insignificant\">\n          {shortcuts.length >= SHORTCUTS_LIMIT &&\n            `Max ${SHORTCUTS_LIMIT} shortcuts`}\n        </p>\n        <p\n          style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n          }}\n        >\n          <button\n            type=\"button\"\n            class=\"light\"\n            onClick={() => setShowImportExport(true)}\n          >\n            Import/export\n          </button>\n          <button\n            type=\"button\"\n            disabled={shortcuts.length >= SHORTCUTS_LIMIT}\n            onClick={() => setShowForm(true)}\n          >\n            <Icon icon=\"plus\" /> <span>Add shortcut</span>\n          </button>\n        </p>\n      </main>\n      {showForm && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowForm(false);\n            }\n          }}\n        >\n          <ShortcutForm\n            shortcut={showForm.shortcut}\n            shortcutIndex={showForm.shortcutIndex}\n            onSubmit={({ result, mode }) => {\n              console.log('onSubmit', result);\n              if (mode === 'edit') {\n                states.shortcuts[showForm.shortcutIndex] = result;\n              } else {\n                states.shortcuts.push(result);\n              }\n            }}\n            onClose={() => setShowForm(false)}\n          />\n        </Modal>\n      )}\n      {showImportExport && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowImportExport(false);\n            }\n          }}\n        >\n          <ImportExport\n            shortcuts={shortcuts}\n            onClose={() => setShowImportExport(false)}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nconst FETCH_MAX_AGE = 1000 * 60; // 1 minute\nconst fetchLists = pmem(\n  () => {\n    const { masto } = api();\n    return masto.v1.lists.list();\n  },\n  {\n    maxAge: FETCH_MAX_AGE,\n  },\n);\n\nfunction ShortcutForm({\n  onSubmit,\n  disabled,\n  shortcut,\n  shortcutIndex,\n  onClose,\n}) {\n  console.log('shortcut', shortcut);\n  const editMode = !!shortcut;\n  const [currentType, setCurrentType] = useState(shortcut?.type || null);\n  const { masto } = api();\n\n  const [uiState, setUIState] = useState('default');\n  const [lists, setLists] = useState([]);\n  const [followedHashtags, setFollowedHashtags] = useState([]);\n  useEffect(() => {\n    (async () => {\n      if (currentType !== 'list') return;\n      try {\n        setUIState('loading');\n        const lists = await fetchLists();\n        lists.sort((a, b) => a.title.localeCompare(b.title));\n        setLists(lists);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n\n    (async () => {\n      if (currentType !== 'hashtag') return;\n      try {\n        const iterator = masto.v1.followedTags.list();\n        const tags = [];\n        do {\n          const { value, done } = await iterator.next();\n          if (done || value?.length === 0) break;\n          tags.push(...value);\n        } while (true);\n        setFollowedHashtags(tags);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [currentType]);\n\n  const formRef = useRef();\n  useEffect(() => {\n    if (editMode && currentType && TYPE_PARAMS[currentType]) {\n      // Populate form\n      const form = formRef.current;\n      TYPE_PARAMS[currentType].forEach(({ name, type }) => {\n        const input = form.querySelector(`[name=\"${name}\"]`);\n        if (input && shortcut[name]) {\n          if (type === 'checkbox') {\n            input.checked = shortcut[name] === 'on' ? true : false;\n          } else {\n            input.value = shortcut[name];\n          }\n        }\n      });\n    }\n  }, [editMode, currentType]);\n\n  return (\n    <div id=\"shortcut-settings-form\" class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>{editMode ? 'Edit' : 'Add'} shortcut</h2>\n      </header>\n      <main tabindex=\"-1\">\n        <form\n          ref={formRef}\n          onSubmit={(e) => {\n            // Construct a nice object from form\n            e.preventDefault();\n            const data = new FormData(e.target);\n            const result = {};\n            data.forEach((value, key) => {\n              result[key] = value?.trim();\n              if (key === 'instance') {\n                // Remove protocol and trailing slash\n                result[key] = result[key]\n                  .replace(/^https?:\\/\\//, '')\n                  .replace(/\\/+$/, '');\n                // Remove @acct@ or acct@ from instance URL\n                result[key] = result[key].replace(/^@?[^@]+@/, '');\n              }\n            });\n            console.log('result', result);\n            if (!result.type) return;\n            onSubmit({\n              result,\n              mode: editMode ? 'edit' : 'add',\n            });\n            // Reset\n            e.target.reset();\n            setCurrentType(null);\n            onClose?.();\n          }}\n        >\n          <p>\n            <label>\n              <span>Timeline</span>\n              <select\n                required\n                disabled={disabled}\n                onChange={(e) => {\n                  setCurrentType(e.target.value);\n                }}\n                defaultValue={editMode ? shortcut.type : undefined}\n                name=\"type\"\n              >\n                <option></option>\n                {TYPES.map((type) => (\n                  <option value={type}>{TYPE_TEXT[type]}</option>\n                ))}\n              </select>\n            </label>\n          </p>\n          {TYPE_PARAMS[currentType]?.map?.(\n            ({ text, name, type, placeholder, pattern, notRequired }) => {\n              if (currentType === 'list') {\n                return (\n                  <p>\n                    <label>\n                      <span>List</span>\n                      <select\n                        name=\"id\"\n                        required={!notRequired}\n                        disabled={disabled || uiState === 'loading'}\n                        defaultValue={editMode ? shortcut.id : undefined}\n                      >\n                        {lists.map((list) => (\n                          <option value={list.id}>{list.title}</option>\n                        ))}\n                      </select>\n                    </label>\n                  </p>\n                );\n              }\n\n              return (\n                <p>\n                  <label>\n                    <span>{text}</span>{' '}\n                    <input\n                      type={type}\n                      name={name}\n                      placeholder={placeholder}\n                      required={type === 'text' && !notRequired}\n                      disabled={disabled}\n                      list={\n                        currentType === 'hashtag'\n                          ? 'followed-hashtags-datalist'\n                          : null\n                      }\n                      autocorrect=\"off\"\n                      autocapitalize=\"off\"\n                      spellcheck={false}\n                      pattern={pattern}\n                    />\n                    {currentType === 'hashtag' &&\n                      followedHashtags.length > 0 && (\n                        <datalist id=\"followed-hashtags-datalist\">\n                          {followedHashtags.map((tag) => (\n                            <option value={tag.name} />\n                          ))}\n                        </datalist>\n                      )}\n                  </label>\n                </p>\n              );\n            },\n          )}\n          <footer>\n            <button\n              type=\"submit\"\n              class=\"block\"\n              disabled={disabled || uiState === 'loading'}\n            >\n              {editMode ? 'Save' : 'Add'}\n            </button>\n            {editMode && (\n              <button\n                type=\"button\"\n                class=\"light danger\"\n                onClick={() => {\n                  states.shortcuts.splice(shortcutIndex, 1);\n                  onClose?.();\n                }}\n              >\n                Remove\n              </button>\n            )}\n          </footer>\n        </form>\n      </main>\n    </div>\n  );\n}\n\nfunction ImportExport({ shortcuts, onClose }) {\n  const shortcutsStr = useMemo(() => {\n    if (!shortcuts) return '';\n    if (!shortcuts.filter(Boolean).length) return '';\n    return compressToEncodedURIComponent(\n      JSON.stringify(shortcuts.filter(Boolean)),\n    );\n  }, [shortcuts]);\n  const [importShortcutStr, setImportShortcutStr] = useState('');\n  const [importUIState, setImportUIState] = useState('default');\n  const parsedImportShortcutStr = useMemo(() => {\n    if (!importShortcutStr) {\n      setImportUIState('default');\n      return null;\n    }\n    try {\n      const parsed = JSON.parse(\n        decompressFromEncodedURIComponent(importShortcutStr),\n      );\n      // Very basic validation, I know\n      if (!Array.isArray(parsed)) throw new Error('Not an array');\n      setImportUIState('default');\n      return parsed;\n    } catch (err) {\n      // Fallback to JSON string parsing\n      // There's a chance that someone might want to import a JSON string instead of the compressed version\n      try {\n        const parsed = JSON.parse(importShortcutStr);\n        if (!Array.isArray(parsed)) throw new Error('Not an array');\n        setImportUIState('default');\n        return parsed;\n      } catch (err) {\n        setImportUIState('error');\n        return null;\n      }\n    }\n  }, [importShortcutStr]);\n  const hasCurrentSettings = states.shortcuts.length > 0;\n\n  return (\n    <div id=\"import-export-container\" class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>\n          Import/Export <small class=\"ib insignificant\">Shortcuts</small>\n        </h2>\n      </header>\n      <main tabindex=\"-1\">\n        <section>\n          <h3>\n            <Icon icon=\"arrow-down-circle\" size=\"l\" class=\"insignificant\" />{' '}\n            <span>Import</span>\n          </h3>\n          <p>\n            <input\n              type=\"text\"\n              name=\"import\"\n              placeholder=\"Paste shortcuts here\"\n              class=\"block\"\n              onInput={(e) => {\n                setImportShortcutStr(e.target.value);\n              }}\n            />\n          </p>\n          {!!parsedImportShortcutStr &&\n            Array.isArray(parsedImportShortcutStr) && (\n              <>\n                <p>\n                  <b>{parsedImportShortcutStr.length}</b> shortcut\n                  {parsedImportShortcutStr.length > 1 ? 's' : ''}{' '}\n                  <small class=\"insignificant\">\n                    ({importShortcutStr.length} characters)\n                  </small>\n                </p>\n                <ol class=\"import-settings-list\">\n                  {parsedImportShortcutStr.map((shortcut) => (\n                    <li>\n                      <span\n                        style={{\n                          opacity: shortcuts.some((s) =>\n                            // Compare all properties\n                            Object.keys(s).every(\n                              (key) => s[key] === shortcut[key],\n                            ),\n                          )\n                            ? 1\n                            : 0,\n                        }}\n                      >\n                        *\n                      </span>\n                      <span>\n                        {TYPE_TEXT[shortcut.type]}\n                        {shortcut.type === 'list' && ' ⚠️'}{' '}\n                        {TYPE_PARAMS[shortcut.type]?.map?.(\n                          ({ text, name, type }) =>\n                            shortcut[name] ? (\n                              <>\n                                <span class=\"tag collapsed insignificant\">\n                                  {text}:{' '}\n                                  {type === 'checkbox'\n                                    ? shortcut[name] === 'on'\n                                      ? '✅'\n                                      : '❌'\n                                    : shortcut[name]}\n                                </span>{' '}\n                              </>\n                            ) : null,\n                        )}\n                      </span>\n                    </li>\n                  ))}\n                </ol>\n                <p>\n                  <small>* Exists in current shortcuts</small>\n                  <br />\n                  <small>\n                    ⚠️ List may not work if it's from a different account.\n                  </small>\n                </p>\n              </>\n            )}\n          {importUIState === 'error' && (\n            <p class=\"error\">\n              <small>⚠️ Invalid settings format</small>\n            </p>\n          )}\n          <p>\n            {hasCurrentSettings && (\n              <>\n                <MenuConfirm\n                  confirmLabel=\"Append to current shortcuts?\"\n                  menuFooter={\n                    <div class=\"footer\">\n                      Only shortcuts that don’t exist in current shortcuts will\n                      be appended.\n                    </div>\n                  }\n                  onClick={() => {\n                    // states.shortcuts = [\n                    //   ...states.shortcuts,\n                    //   ...parsedImportShortcutStr,\n                    // ];\n                    // Append non-unique shortcuts only\n                    const nonUniqueShortcuts = parsedImportShortcutStr.filter(\n                      (shortcut) =>\n                        !states.shortcuts.some((s) =>\n                          // Compare all properties\n                          Object.keys(s).every(\n                            (key) => s[key] === shortcut[key],\n                          ),\n                        ),\n                    );\n                    if (!nonUniqueShortcuts.length) {\n                      showToast('No new shortcuts to import');\n                      return;\n                    }\n                    let newShortcuts = [\n                      ...states.shortcuts,\n                      ...nonUniqueShortcuts,\n                    ];\n                    const exceededLimit = newShortcuts.length > SHORTCUTS_LIMIT;\n                    if (exceededLimit) {\n                      // If exceeded, trim it\n                      newShortcuts = newShortcuts.slice(0, SHORTCUTS_LIMIT);\n                    }\n                    states.shortcuts = newShortcuts;\n                    showToast(\n                      exceededLimit\n                        ? `Shortcuts imported. Exceeded max ${SHORTCUTS_LIMIT}, so the rest are not imported.`\n                        : 'Shortcuts imported',\n                    );\n                    onClose?.();\n                  }}\n                >\n                  <button\n                    type=\"button\"\n                    class=\"plain2\"\n                    disabled={!parsedImportShortcutStr}\n                  >\n                    Import & append…\n                  </button>\n                </MenuConfirm>{' '}\n              </>\n            )}\n            <MenuConfirm\n              confirmLabel={\n                hasCurrentSettings\n                  ? 'Override current shortcuts?'\n                  : 'Import shortcuts?'\n              }\n              menuItemClassName={hasCurrentSettings ? 'danger' : undefined}\n              onClick={() => {\n                states.shortcuts = parsedImportShortcutStr;\n                showToast('Shortcuts imported');\n                onClose?.();\n              }}\n            >\n              <button\n                type=\"button\"\n                class=\"plain2\"\n                disabled={!parsedImportShortcutStr}\n              >\n                {hasCurrentSettings ? 'or override…' : 'Import…'}\n              </button>\n            </MenuConfirm>\n          </p>\n        </section>\n        <section>\n          <h3>\n            <Icon icon=\"arrow-up-circle\" size=\"l\" class=\"insignificant\" />{' '}\n            <span>Export</span>\n          </h3>\n          <p>\n            <input\n              style={{ width: '100%' }}\n              type=\"text\"\n              value={shortcutsStr}\n              readOnly\n              onClick={(e) => {\n                if (!e.target.value) return;\n                e.target.select();\n                // Copy url to clipboard\n                try {\n                  navigator.clipboard.writeText(e.target.value);\n                  showToast('Shortcuts copied');\n                } catch (e) {\n                  console.error(e);\n                  showToast('Unable to copy shortcuts');\n                }\n              }}\n            />\n          </p>\n          <p>\n            <button\n              type=\"button\"\n              class=\"plain2\"\n              disabled={!shortcutsStr}\n              onClick={() => {\n                try {\n                  navigator.clipboard.writeText(shortcutsStr);\n                  showToast('Shortcut settings copied');\n                } catch (e) {\n                  console.error(e);\n                  showToast('Unable to copy shortcut settings');\n                }\n              }}\n            >\n              <Icon icon=\"clipboard\" /> <span>Copy</span>\n            </button>{' '}\n            {navigator?.share &&\n              navigator?.canShare?.({\n                text: shortcutsStr,\n              }) && (\n                <button\n                  type=\"button\"\n                  class=\"plain2\"\n                  disabled={!shortcutsStr}\n                  onClick={() => {\n                    try {\n                      navigator.share({\n                        text: shortcutsStr,\n                      });\n                    } catch (e) {\n                      console.error(e);\n                      alert(\"Sharing doesn't seem to work.\");\n                    }\n                  }}\n                >\n                  <Icon icon=\"share\" /> <span>Share</span>\n                </button>\n              )}{' '}\n            {shortcutsStr.length > 0 && (\n              <small class=\"insignificant\">\n                {shortcutsStr.length} characters\n              </small>\n            )}\n          </p>\n          {!!shortcutsStr && (\n            <details>\n              <summary class=\"insignificant\">\n                <small>Raw Shortcuts JSON</small>\n              </summary>\n              <textarea style={{ width: '100%' }} rows={10} readOnly>\n                {JSON.stringify(shortcuts.filter(Boolean), null, 2)}\n              </textarea>\n            </details>\n          )}\n        </section>\n      </main>\n    </div>\n  );\n}\n\nexport default ShortcutsSettings;\n","import { useLocation, useNavigate } from 'react-router-dom';\nimport { subscribe, useSnapshot } from 'valtio';\n\nimport Accounts from '../pages/accounts';\nimport Settings from '../pages/settings';\nimport focusDeck from '../utils/focus-deck';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\n\nimport AccountSheet from './account-sheet';\nimport Compose from './compose';\nimport Drafts from './drafts';\nimport GenericAccounts from './generic-accounts';\nimport MediaAltModal from './media-alt-modal';\nimport MediaModal from './media-modal';\nimport Modal from './modal';\nimport ShortcutsSettings from './shortcuts-settings';\n\nsubscribe(states, (changes) => {\n  for (const [action, path, value, prevValue] of changes) {\n    // When closing modal, focus on deck\n    if (/^show/i.test(path) && !value) {\n      focusDeck();\n    }\n  }\n});\n\nexport default function Modals() {\n  const snapStates = useSnapshot(states);\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  return (\n    <>\n      {!!snapStates.showCompose && (\n        <Modal>\n          <Compose\n            replyToStatus={\n              typeof snapStates.showCompose !== 'boolean'\n                ? snapStates.showCompose.replyToStatus\n                : window.__COMPOSE__?.replyToStatus || null\n            }\n            editStatus={\n              states.showCompose?.editStatus ||\n              window.__COMPOSE__?.editStatus ||\n              null\n            }\n            draftStatus={\n              states.showCompose?.draftStatus ||\n              window.__COMPOSE__?.draftStatus ||\n              null\n            }\n            onClose={(results) => {\n              const { newStatus, instance, type } = results || {};\n              states.showCompose = false;\n              window.__COMPOSE__ = null;\n              if (newStatus) {\n                states.reloadStatusPage++;\n                showToast({\n                  text: {\n                    post: 'Post published. Check it out.',\n                    reply: 'Reply posted. Check it out.',\n                    edit: 'Post updated. Check it out.',\n                  }[type || 'post'],\n                  delay: 1000,\n                  duration: 10_000, // 10 seconds\n                  onClick: (toast) => {\n                    toast.hideToast();\n                    states.prevLocation = location;\n                    navigate(\n                      instance\n                        ? `/${instance}/s/${newStatus.id}`\n                        : `/s/${newStatus.id}`,\n                    );\n                  },\n                });\n              }\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showSettings && (\n        <Modal\n          onClose={() => {\n            states.showSettings = false;\n          }}\n        >\n          <Settings\n            onClose={() => {\n              states.showSettings = false;\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showAccounts && (\n        <Modal\n          onClose={() => {\n            states.showAccounts = false;\n          }}\n        >\n          <Accounts\n            onClose={() => {\n              states.showAccounts = false;\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showAccount && (\n        <Modal\n          class=\"light\"\n          onClose={() => {\n            states.showAccount = false;\n          }}\n        >\n          <AccountSheet\n            account={snapStates.showAccount?.account || snapStates.showAccount}\n            instance={snapStates.showAccount?.instance}\n            onClose={({ destination } = {}) => {\n              states.showAccount = false;\n              // states.showGenericAccounts = false;\n              // if (destination) {\n              //   states.showAccounts = false;\n              // }\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showDrafts && (\n        <Modal\n          onClose={() => {\n            states.showDrafts = false;\n          }}\n        >\n          <Drafts onClose={() => (states.showDrafts = false)} />\n        </Modal>\n      )}\n      {!!snapStates.showMediaModal && (\n        <Modal\n          onClick={(e) => {\n            if (\n              e.target === e.currentTarget ||\n              e.target.classList.contains('media')\n            ) {\n              states.showMediaModal = false;\n            }\n          }}\n        >\n          <MediaModal\n            mediaAttachments={snapStates.showMediaModal.mediaAttachments}\n            instance={snapStates.showMediaModal.instance}\n            index={snapStates.showMediaModal.index}\n            statusID={snapStates.showMediaModal.statusID}\n            onClose={() => {\n              states.showMediaModal = false;\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showShortcutsSettings && (\n        <Modal\n          class=\"light\"\n          onClose={() => {\n            states.showShortcutsSettings = false;\n          }}\n        >\n          <ShortcutsSettings\n            onClose={() => (states.showShortcutsSettings = false)}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showGenericAccounts && (\n        <Modal\n          class=\"light\"\n          onClose={() => {\n            states.showGenericAccounts = false;\n          }}\n        >\n          <GenericAccounts\n            onClose={() => (states.showGenericAccounts = false)}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showMediaAlt && (\n        <Modal\n          class=\"light\"\n          onClose={(e) => {\n            states.showMediaAlt = false;\n          }}\n        >\n          <MediaAltModal\n            alt={snapStates.showMediaAlt.alt || snapStates.showMediaAlt}\n            lang={snapStates.showMediaAlt?.lang}\n            onClose={() => {\n              states.showMediaAlt = false;\n            }}\n          />\n        </Modal>\n      )}\n    </>\n  );\n}\n","import { useState } from 'preact/hooks';\n\nimport { api } from '../utils/api';\n\nimport Icon from './icon';\nimport Loader from './loader';\n\nfunction FollowRequestButtons({ accountID, onChange }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [requestState, setRequestState] = useState(null); // accept, reject\n  const [relationship, setRelationship] = useState(null);\n\n  const hasRelationship = relationship !== null;\n\n  return (\n    <p class=\"follow-request-buttons\">\n      <button\n        type=\"button\"\n        disabled={uiState === 'loading' || hasRelationship}\n        onClick={() => {\n          setUIState('loading');\n          setRequestState('accept');\n          (async () => {\n            try {\n              const rel = await masto.v1.followRequests\n                .$select(accountID)\n                .authorize();\n              if (!rel?.followedBy) {\n                throw new Error('Follow request not accepted');\n              }\n              setRelationship(rel);\n              onChange();\n            } catch (e) {\n              console.error(e);\n            }\n            setUIState('default');\n          })();\n        }}\n      >\n        Accept\n      </button>{' '}\n      <button\n        type=\"button\"\n        disabled={uiState === 'loading' || hasRelationship}\n        class=\"light danger\"\n        onClick={() => {\n          setUIState('loading');\n          setRequestState('reject');\n          (async () => {\n            try {\n              const rel = await masto.v1.followRequests\n                .$select(accountID)\n                .reject();\n              if (rel?.followedBy) {\n                throw new Error('Follow request not rejected');\n              }\n              setRelationship(rel);\n              onChange();\n            } catch (e) {\n              console.error(e);\n              setUIState('default');\n            }\n          })();\n        }}\n      >\n        Reject\n      </button>\n      <span class=\"follow-request-states\">\n        {hasRelationship && requestState ? (\n          requestState === 'accept' ? (\n            <Icon icon=\"check-circle\" alt=\"Accepted\" class=\"follow-accepted\" />\n          ) : (\n            <Icon icon=\"x-circle\" alt=\"Rejected\" class=\"follow-rejected\" />\n          )\n        ) : (\n          <Loader hidden={uiState !== 'loading'} />\n        )}\n      </span>\n    </p>\n  );\n}\n\nexport default FollowRequestButtons;\n","import { Fragment } from 'preact';\nimport { memo } from 'preact/compat';\n\nimport shortenNumber from '../utils/shorten-number';\nimport states from '../utils/states';\nimport store from '../utils/store';\nimport useTruncated from '../utils/useTruncated';\n\nimport Avatar from './avatar';\nimport FollowRequestButtons from './follow-request-buttons';\nimport Icon from './icon';\nimport Link from './link';\nimport NameText from './name-text';\nimport RelativeTime from './relative-time';\nimport Status from './status';\n\nconst NOTIFICATION_ICONS = {\n  mention: 'comment',\n  status: 'notification',\n  reblog: 'rocket',\n  follow: 'follow',\n  follow_request: 'follow-add',\n  favourite: 'heart',\n  poll: 'poll',\n  update: 'pencil',\n  'admin.signup': 'account-edit',\n  'admin.report': 'account-warning',\n};\n\n/*\nNotification types\n==================\nmention = Someone mentioned you in their status\nstatus = Someone you enabled notifications for has posted a status\nreblog = Someone boosted one of your statuses\nfollow = Someone followed you\nfollow_request = Someone requested to follow you\nfavourite = Someone favourited one of your statuses\npoll = A poll you have voted in or created has ended\nupdate = A status you interacted with has been edited\nadmin.sign_up = Someone signed up (optionally sent to admins)\nadmin.report = A new report has been filed\n*/\n\nconst contentText = {\n  mention: 'mentioned you in their post.',\n  status: 'published a post.',\n  reblog: 'boosted your post.',\n  'reblog+account': (count) => `boosted ${count} of your posts.`,\n  reblog_reply: 'boosted your reply.',\n  follow: 'followed you.',\n  follow_request: 'requested to follow you.',\n  favourite: 'liked your post.',\n  'favourite+account': (count) => `liked ${count} of your posts.`,\n  favourite_reply: 'liked your reply.',\n  poll: 'A poll you have voted in or created has ended.',\n  'poll-self': 'A poll you have created has ended.',\n  'poll-voted': 'A poll you have voted in has ended.',\n  update: 'A post you interacted with has been edited.',\n  'favourite+reblog': 'boosted & liked your post.',\n  'favourite+reblog+account': (count) =>\n    `boosted & liked ${count} of your posts.`,\n  'favourite+reblog_reply': 'boosted & liked your reply.',\n  'admin.sign_up': 'signed up.',\n  'admin.report': (targetAccount) => <>reported {targetAccount}</>,\n};\n\nconst AVATARS_LIMIT = 50;\n\nfunction Notification({ notification, instance, isStatic }) {\n  const { id, status, account, report, _accounts, _statuses } = notification;\n  let { type } = notification;\n\n  // status = Attached when type of the notification is favourite, reblog, status, mention, poll, or update\n  const actualStatus = status?.reblog || status;\n  const actualStatusID = actualStatus?.id;\n\n  const currentAccount = store.session.get('currentAccount');\n  const isSelf = currentAccount === account?.id;\n  const isVoted = status?.poll?.voted;\n  const isReplyToOthers =\n    !!status?.inReplyToAccountId &&\n    status?.inReplyToAccountId !== currentAccount &&\n    status?.account?.id === currentAccount;\n\n  let favsCount = 0;\n  let reblogsCount = 0;\n  if (type === 'favourite+reblog') {\n    for (const account of _accounts) {\n      if (account._types?.includes('favourite')) {\n        favsCount++;\n      }\n      if (account._types?.includes('reblog')) {\n        reblogsCount++;\n      }\n    }\n    if (!reblogsCount && favsCount) type = 'favourite';\n    if (!favsCount && reblogsCount) type = 'reblog';\n  }\n\n  let text;\n  if (type === 'poll') {\n    text = contentText[isSelf ? 'poll-self' : isVoted ? 'poll-voted' : 'poll'];\n  } else if (\n    type === 'reblog' ||\n    type === 'favourite' ||\n    type === 'favourite+reblog'\n  ) {\n    if (_statuses?.length > 1) {\n      text = contentText[`${type}+account`];\n    } else if (isReplyToOthers) {\n      text = contentText[`${type}_reply`];\n    } else {\n      text = contentText[type];\n    }\n  } else if (contentText[type]) {\n    text = contentText[type];\n  } else {\n    // Anticipate unhandled notification types, possibly from Mastodon forks or non-Mastodon instances\n    // This surfaces the error to the user, hoping that users will report it\n    text = `[Unknown notification type: ${type}]`;\n  }\n\n  if (typeof text === 'function') {\n    const count = _statuses?.length || _accounts?.length;\n    if (count) {\n      text = text(count);\n    } else if (type === 'admin.report') {\n      const targetAccount = report?.targetAccount;\n      if (targetAccount) {\n        text = text(<NameText account={targetAccount} showAvatar />);\n      }\n    }\n  }\n\n  if (type === 'mention' && !status) {\n    // Could be deleted\n    return null;\n  }\n\n  const formattedCreatedAt =\n    notification.createdAt && new Date(notification.createdAt).toLocaleString();\n\n  const genericAccountsHeading =\n    {\n      'favourite+reblog': 'Boosted/Liked by…',\n      favourite: 'Liked by…',\n      reblog: 'Boosted by…',\n      follow: 'Followed by…',\n    }[type] || 'Accounts';\n  const handleOpenGenericAccounts = () => {\n    states.showGenericAccounts = {\n      heading: genericAccountsHeading,\n      accounts: _accounts,\n      showReactions: type === 'favourite+reblog',\n    };\n  };\n\n  console.debug('RENDER Notification', notification.id);\n\n  return (\n    <div\n      class={`notification notification-${type}`}\n      data-notification-id={id}\n      tabIndex=\"0\"\n    >\n      <div\n        class={`notification-type notification-${type}`}\n        title={formattedCreatedAt}\n      >\n        {type === 'favourite+reblog' ? (\n          <>\n            <Icon icon=\"rocket\" size=\"xl\" alt={type} class=\"reblog-icon\" />\n            <Icon icon=\"heart\" size=\"xl\" alt={type} class=\"favourite-icon\" />\n          </>\n        ) : (\n          <Icon\n            icon={NOTIFICATION_ICONS[type] || 'notification'}\n            size=\"xl\"\n            alt={type}\n          />\n        )}\n      </div>\n      <div class=\"notification-content\">\n        {type !== 'mention' && (\n          <>\n            <p>\n              {!/poll|update/i.test(type) && (\n                <>\n                  {_accounts?.length > 1 ? (\n                    <>\n                      <b tabIndex=\"0\" onClick={handleOpenGenericAccounts}>\n                        <span title={_accounts.length}>\n                          {shortenNumber(_accounts.length)}\n                        </span>{' '}\n                        people\n                      </b>{' '}\n                    </>\n                  ) : (\n                    <>\n                      <NameText account={account} showAvatar />{' '}\n                    </>\n                  )}\n                </>\n              )}\n              {text}\n              {type === 'mention' && (\n                <span class=\"insignificant\">\n                  {' '}\n                  •{' '}\n                  <RelativeTime\n                    datetime={notification.createdAt}\n                    format=\"micro\"\n                  />\n                </span>\n              )}\n            </p>\n            {type === 'follow_request' && (\n              <FollowRequestButtons accountID={account.id} />\n            )}\n          </>\n        )}\n        {_accounts?.length > 1 && (\n          <p class=\"avatars-stack\">\n            {_accounts.slice(0, AVATARS_LIMIT).map((account) => (\n              <Fragment key={account.id}>\n                <a\n                  key={account.id}\n                  href={account.url}\n                  rel=\"noopener noreferrer\"\n                  class=\"account-avatar-stack\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    states.showAccount = account;\n                  }}\n                >\n                  <Avatar\n                    url={account.avatarStatic}\n                    size={\n                      _accounts.length <= 10\n                        ? 'xxl'\n                        : _accounts.length < 20\n                        ? 'xl'\n                        : _accounts.length < 30\n                        ? 'l'\n                        : _accounts.length < 40\n                        ? 'm'\n                        : 's' // My god, this person is popular!\n                    }\n                    key={account.id}\n                    alt={`${account.displayName} @${account.acct}`}\n                    squircle={account?.bot}\n                  />\n                  {type === 'favourite+reblog' && (\n                    <div class=\"account-sub-icons\">\n                      {account._types.map((type) => (\n                        <Icon\n                          icon={NOTIFICATION_ICONS[type]}\n                          size=\"s\"\n                          class={`${type}-icon`}\n                        />\n                      ))}\n                    </div>\n                  )}\n                </a>{' '}\n              </Fragment>\n            ))}\n            <button\n              type=\"button\"\n              class=\"small plain\"\n              onClick={handleOpenGenericAccounts}\n            >\n              {_accounts.length > AVATARS_LIMIT &&\n                `+${_accounts.length - AVATARS_LIMIT}`}\n              <Icon icon=\"chevron-down\" />\n            </button>\n          </p>\n        )}\n        {_statuses?.length > 1 && (\n          <ul class=\"notification-group-statuses\">\n            {_statuses.map((status) => (\n              <li key={status.id}>\n                <TruncatedLink\n                  class={`status-link status-type-${type}`}\n                  to={\n                    instance ? `/${instance}/s/${status.id}` : `/s/${status.id}`\n                  }\n                >\n                  <Status status={status} size=\"s\" />\n                </TruncatedLink>\n              </li>\n            ))}\n          </ul>\n        )}\n        {status && (!_statuses?.length || _statuses?.length <= 1) && (\n          <TruncatedLink\n            class={`status-link status-type-${type}`}\n            to={\n              instance\n                ? `/${instance}/s/${actualStatusID}`\n                : `/s/${actualStatusID}`\n            }\n            onContextMenu={(e) => {\n              const post = e.target.querySelector('.status');\n              if (post) {\n                // Fire a custom event to open the context menu\n                if (e.metaKey) return;\n                e.preventDefault();\n                post.dispatchEvent(\n                  new MouseEvent('contextmenu', {\n                    clientX: e.clientX,\n                    clientY: e.clientY,\n                  }),\n                );\n              }\n            }}\n          >\n            {isStatic ? (\n              <Status status={actualStatus} size=\"s\" />\n            ) : (\n              <Status statusID={actualStatusID} size=\"s\" />\n            )}\n          </TruncatedLink>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction TruncatedLink(props) {\n  const ref = useTruncated();\n  return <Link {...props} data-read-more=\"Read more →\" ref={ref} />;\n}\n\nexport default memo(Notification);\n","import { memo } from 'preact/compat';\nimport { useLayoutEffect, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport { api } from '../utils/api';\nimport states from '../utils/states';\nimport {\n  getAccountByAccessToken,\n  getCurrentAccount,\n} from '../utils/store-utils';\nimport usePageVisibility from '../utils/usePageVisibility';\n\nimport Icon from './icon';\nimport Link from './link';\nimport Modal from './modal';\nimport Notification from './notification';\n\nexport default memo(function NotificationService() {\n  if (!('serviceWorker' in navigator)) return null;\n\n  const snapStates = useSnapshot(states);\n  const { routeNotification } = snapStates;\n\n  console.log('🛎️ Notification service', routeNotification);\n\n  const { id, accessToken } = routeNotification || {};\n  const [showNotificationSheet, setShowNotificationSheet] = useState(false);\n\n  useLayoutEffect(() => {\n    if (!id || !accessToken) return;\n    const { instance: currentInstance } = api();\n    const { masto, instance } = api({\n      accessToken,\n    });\n    console.log('API', { accessToken, currentInstance, instance });\n    const sameInstance = currentInstance === instance;\n    const account = accessToken\n      ? getAccountByAccessToken(accessToken)\n      : getCurrentAccount();\n    (async () => {\n      const notification = await masto.v1.notifications.$select(id).fetch();\n      if (notification && account) {\n        console.log('🛎️ Notification', { id, notification, account });\n        const accountInstance = account.instanceURL;\n        const { type, status, account: notificationAccount } = notification;\n        const hasModal = !!document.querySelector('#modal-container > *');\n        const isFollow = type === 'follow' && !!notificationAccount?.id;\n        const hasAccount = !!notificationAccount?.id;\n        const hasStatus = !!status?.id;\n        if (isFollow && sameInstance) {\n          // Show account sheet, can handle different instances\n          states.showAccount = {\n            account: notificationAccount,\n            instance: accountInstance,\n          };\n        } else if (hasModal || !sameInstance || (hasAccount && hasStatus)) {\n          // Show sheet of notification, if\n          // - there is a modal open\n          // - the notification is from another instance\n          // - the notification has both account and status, gives choice for users to go to account or status\n          setShowNotificationSheet({\n            id,\n            account,\n            notification,\n            sameInstance,\n          });\n        } else {\n          if (hasStatus) {\n            // Go to status page\n            location.hash = `/${currentInstance}/s/${status.id}`;\n          } else if (isFollow) {\n            // Go to profile page\n            location.hash = `/${currentInstance}/a/${notificationAccount.id}`;\n          } else {\n            // Go to notifications page\n            location.hash = '/notifications';\n          }\n        }\n      } else {\n        console.warn('🛎️ Notification not found', id);\n      }\n    })();\n  }, [id, accessToken]);\n\n  useLayoutEffect(() => {\n    // Listen to message from service worker\n    const handleMessage = (event) => {\n      console.log('💥💥💥 Message event', event);\n      const { type, id, accessToken } = event?.data || {};\n      if (type === 'notification') {\n        states.routeNotification = {\n          id,\n          accessToken,\n        };\n      }\n    };\n    console.log('👂👂👂 Listen to message');\n    navigator.serviceWorker.addEventListener('message', handleMessage);\n    return () => {\n      console.log('👂👂👂 Remove listen to message');\n      navigator.serviceWorker.removeEventListener('message', handleMessage);\n    };\n  }, []);\n\n  useLayoutEffect(() => {\n    if (navigator?.clearAppBadge) {\n      navigator.clearAppBadge();\n    }\n  }, []);\n  usePageVisibility((visible) => {\n    if (visible && navigator?.clearAppBadge) {\n      console.log('🔰 Clear app badge');\n      navigator.clearAppBadge();\n    }\n  });\n\n  const onClose = () => {\n    setShowNotificationSheet(false);\n    states.routeNotification = null;\n\n    // If url is #/notifications?id=123, go to #/notifications\n    if (/\\/notifications\\?id=/i.test(location.hash)) {\n      location.hash = '/notifications';\n    }\n  };\n\n  if (showNotificationSheet) {\n    const { id, account, notification, sameInstance } = showNotificationSheet;\n    return (\n      <Modal\n        class=\"light\"\n        onClick={(e) => {\n          if (e.target === e.currentTarget) {\n            onClose();\n          }\n        }}\n      >\n        <div class=\"sheet\" tabIndex=\"-1\">\n          <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n            <Icon icon=\"x\" />\n          </button>\n          <header>\n            <b>Notification</b>\n          </header>\n          <main>\n            {!sameInstance && (\n              <p>This notification is from your other account.</p>\n            )}\n            <div\n              class=\"notification-peek\"\n              // style={{\n              //   pointerEvents: sameInstance ? '' : 'none',\n              // }}\n              onClick={(e) => {\n                const { target } = e;\n                // If button or links\n                if (e.target.tagName === 'BUTTON' || e.target.tagName === 'A') {\n                  onClose();\n                }\n              }}\n            >\n              <Notification\n                instance={account.instanceURL}\n                notification={notification}\n                isStatic\n              />\n            </div>\n            <div\n              style={{\n                textAlign: 'end',\n              }}\n            >\n              <Link to=\"/notifications\" class=\"button light\" onClick={onClose}>\n                <span>View all notifications</span> <Icon icon=\"arrow-right\" />\n              </Link>\n            </div>\n          </main>\n        </div>\n      </Modal>\n    );\n  }\n\n  return null;\n});\n","import { forwardRef } from 'preact/compat';\nimport { useImperativeHandle, useRef, useState } from 'preact/hooks';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { api } from '../utils/api';\n\nimport Icon from './icon';\nimport Link from './link';\n\nconst SearchForm = forwardRef((props, ref) => {\n  const { instance } = api();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [searchMenuOpen, setSearchMenuOpen] = useState(false);\n  const [query, setQuery] = useState(searchParams.get('q') || '');\n  const type = searchParams.get('type');\n  const formRef = useRef(null);\n\n  const searchFieldRef = useRef(null);\n  useImperativeHandle(ref, () => ({\n    setValue: (value) => {\n      setQuery(value);\n    },\n    focus: () => {\n      searchFieldRef.current.focus();\n    },\n    select: () => {\n      searchFieldRef.current.select();\n    },\n    blur: () => {\n      searchFieldRef.current.blur();\n    },\n  }));\n\n  return (\n    <form\n      ref={formRef}\n      class=\"search-popover-container\"\n      onSubmit={(e) => {\n        e.preventDefault();\n\n        const isSearchPage = /\\/search/.test(location.hash);\n        if (isSearchPage) {\n          if (query) {\n            const params = {\n              q: query,\n            };\n            if (type) params.type = type; // Preserve type\n            setSearchParams(params);\n          } else {\n            setSearchParams({});\n          }\n        } else {\n          if (query) {\n            location.hash = `/search?q=${encodeURIComponent(query)}${\n              type ? `&type=${type}` : ''\n            }`;\n          } else {\n            location.hash = `/search`;\n          }\n        }\n\n        props?.onSubmit?.(e);\n      }}\n    >\n      <input\n        ref={searchFieldRef}\n        value={query}\n        name=\"q\"\n        type=\"search\"\n        // autofocus\n        placeholder=\"Search\"\n        dir=\"auto\"\n        autocomplete=\"off\"\n        autocorrect=\"off\"\n        autocapitalize=\"off\"\n        onSearch={(e) => {\n          if (!e.target.value) {\n            setSearchParams({});\n          }\n        }}\n        onInput={(e) => {\n          setQuery(e.target.value);\n          setSearchMenuOpen(true);\n        }}\n        onFocus={() => {\n          setSearchMenuOpen(true);\n        }}\n        onBlur={() => {\n          setTimeout(() => {\n            setSearchMenuOpen(false);\n          }, 100);\n          formRef.current\n            ?.querySelector('.search-popover-item.focus')\n            ?.classList.remove('focus');\n        }}\n        onKeyDown={(e) => {\n          const { key } = e;\n          switch (key) {\n            case 'Escape':\n              setSearchMenuOpen(false);\n              break;\n            case 'Down':\n            case 'ArrowDown':\n              e.preventDefault();\n              if (searchMenuOpen) {\n                const focusItem = formRef.current.querySelector(\n                  '.search-popover-item.focus',\n                );\n                if (focusItem) {\n                  let nextItem = focusItem.nextElementSibling;\n                  while (nextItem && nextItem.hidden) {\n                    nextItem = nextItem.nextElementSibling;\n                  }\n                  if (nextItem) {\n                    nextItem.classList.add('focus');\n                    const siblings = Array.from(\n                      nextItem.parentElement.children,\n                    ).filter((el) => el !== nextItem);\n                    siblings.forEach((el) => {\n                      el.classList.remove('focus');\n                    });\n                  }\n                } else {\n                  const firstItem = formRef.current.querySelector(\n                    '.search-popover-item',\n                  );\n                  if (firstItem) {\n                    firstItem.classList.add('focus');\n                  }\n                }\n              }\n              break;\n            case 'Up':\n            case 'ArrowUp':\n              e.preventDefault();\n              if (searchMenuOpen) {\n                const focusItem = document.querySelector(\n                  '.search-popover-item.focus',\n                );\n                if (focusItem) {\n                  let prevItem = focusItem.previousElementSibling;\n                  while (prevItem && prevItem.hidden) {\n                    prevItem = prevItem.previousElementSibling;\n                  }\n                  if (prevItem) {\n                    prevItem.classList.add('focus');\n                    const siblings = Array.from(\n                      prevItem.parentElement.children,\n                    ).filter((el) => el !== prevItem);\n                    siblings.forEach((el) => {\n                      el.classList.remove('focus');\n                    });\n                  }\n                } else {\n                  const lastItem = document.querySelector(\n                    '.search-popover-item:last-child',\n                  );\n                  if (lastItem) {\n                    lastItem.classList.add('focus');\n                  }\n                }\n              }\n              break;\n            case 'Enter':\n              if (searchMenuOpen) {\n                const focusItem = document.querySelector(\n                  '.search-popover-item.focus',\n                );\n                if (focusItem) {\n                  e.preventDefault();\n                  focusItem.click();\n                }\n                setSearchMenuOpen(false);\n                props?.onSubmit?.(e);\n              }\n              break;\n          }\n        }}\n      />\n      <div class=\"search-popover\" hidden={!searchMenuOpen || !query}>\n        {!!query &&\n          [\n            {\n              label: (\n                <>\n                  Posts with <q>{query}</q>\n                </>\n              ),\n              to: `/search?q=${encodeURIComponent(query)}&type=statuses`,\n              hidden: /^https?:/.test(query),\n            },\n            {\n              label: (\n                <>\n                  Posts tagged with <mark>#{query.replace(/^#/, '')}</mark>\n                </>\n              ),\n              to: `/${instance}/t/${query.replace(/^#/, '')}`,\n              hidden:\n                /^@/.test(query) || /^https?:/.test(query) || /\\s/.test(query),\n              top: /^#/.test(query),\n              type: 'link',\n            },\n            {\n              label: (\n                <>\n                  Look up <mark>{query}</mark>\n                </>\n              ),\n              to: `/${query}`,\n              hidden: !/^https?:/.test(query),\n              top: /^https?:/.test(query),\n              type: 'link',\n            },\n            {\n              label: (\n                <>\n                  Accounts with <q>{query}</q>\n                </>\n              ),\n              to: `/search?q=${encodeURIComponent(query)}&type=accounts`,\n            },\n          ]\n            .sort((a, b) => {\n              if (a.top && !b.top) return -1;\n              if (!a.top && b.top) return 1;\n              return 0;\n            })\n            .map(({ label, to, hidden, type }) => (\n              <Link\n                to={to}\n                class=\"search-popover-item\"\n                hidden={hidden}\n                onClick={(e) => {\n                  props?.onSubmit?.(e);\n                }}\n              >\n                <Icon\n                  icon={type === 'link' ? 'arrow-right' : 'search'}\n                  class=\"more-insignificant\"\n                />\n                <span>{label}</span>{' '}\n              </Link>\n            ))}\n      </div>\n    </form>\n  );\n});\n\nexport default SearchForm;\n","import './search-command.css';\n\nimport { memo } from 'preact/compat';\nimport { useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\n\nimport SearchForm from './search-form';\n\nexport default memo(function SearchCommand({ onClose = () => {} }) {\n  const [showSearch, setShowSearch] = useState(false);\n  const searchFormRef = useRef(null);\n\n  useHotkeys(\n    '/',\n    (e) => {\n      setShowSearch(true);\n      setTimeout(() => {\n        searchFormRef.current?.focus?.();\n        searchFormRef.current?.select?.();\n      }, 0);\n    },\n    {\n      preventDefault: true,\n      ignoreEventWhen: (e) => {\n        const isSearchPage = /\\/search/.test(location.hash);\n        const hasModal = !!document.querySelector('#modal-container > *');\n        return isSearchPage || hasModal;\n      },\n    },\n  );\n\n  const closeSearch = () => {\n    setShowSearch(false);\n    onClose();\n  };\n\n  useHotkeys(\n    'esc',\n    (e) => {\n      searchFormRef.current?.blur?.();\n      closeSearch();\n    },\n    {\n      enabled: showSearch,\n      enableOnFormTags: true,\n      preventDefault: true,\n    },\n  );\n\n  return (\n    <div\n      id=\"search-command-container\"\n      hidden={!showSearch}\n      onClick={(e) => {\n        console.log(e);\n        if (e.target === e.currentTarget) {\n          closeSearch();\n        }\n      }}\n    >\n      <SearchForm\n        ref={searchFormRef}\n        onSubmit={() => {\n          closeSearch();\n        }}\n      />\n    </div>\n  );\n});\n","import './shortcuts.css';\n\nimport { Menu, MenuItem } from '@szhsin/react-menu';\nimport { memo } from 'preact/compat';\nimport { useMemo, useRef } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { useNavigate } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport { SHORTCUTS_META } from '../components/shortcuts-settings';\nimport { api } from '../utils/api';\nimport states from '../utils/states';\n\nimport AsyncText from './AsyncText';\nimport Icon from './icon';\nimport Link from './link';\nimport MenuLink from './menu-link';\n\nfunction Shortcuts() {\n  const { instance } = api();\n  const snapStates = useSnapshot(states);\n  const { shortcuts, settings } = snapStates;\n\n  if (!shortcuts.length) {\n    return null;\n  }\n  if (\n    settings.shortcutsViewMode === 'multi-column' ||\n    (!settings.shortcutsViewMode && settings.shortcutsColumnsMode)\n  ) {\n    return null;\n  }\n\n  const menuRef = useRef();\n\n  const formattedShortcuts = useMemo(\n    () =>\n      shortcuts\n        .map((pin, i) => {\n          const { type, ...data } = pin;\n          if (!SHORTCUTS_META[type]) return null;\n          let { id, path, title, subtitle, icon } = SHORTCUTS_META[type];\n\n          if (typeof id === 'function') {\n            id = id(data, i);\n          }\n          if (typeof path === 'function') {\n            path = path(\n              {\n                ...data,\n                instance: data.instance || instance,\n              },\n              i,\n            );\n          }\n          if (typeof title === 'function') {\n            title = title(data, i);\n          }\n          if (typeof subtitle === 'function') {\n            subtitle = subtitle(data, i);\n          }\n          if (typeof icon === 'function') {\n            icon = icon(data, i);\n          }\n\n          return {\n            id,\n            path,\n            title,\n            subtitle,\n            icon,\n          };\n        })\n        .filter(Boolean),\n    [shortcuts],\n  );\n\n  const navigate = useNavigate();\n  useHotkeys(['1', '2', '3', '4', '5', '6', '7', '8', '9'], (e, handler) => {\n    const index = parseInt(handler.keys[0], 10) - 1;\n    if (index < formattedShortcuts.length) {\n      const { path } = formattedShortcuts[index];\n      if (path) {\n        navigate(path);\n        menuRef.current?.closeMenu?.();\n      }\n    }\n  });\n\n  return (\n    <div id=\"shortcuts\">\n      {snapStates.settings.shortcutsViewMode === 'tab-menu-bar' ? (\n        <nav\n          class=\"tab-bar\"\n          onContextMenu={(e) => {\n            e.preventDefault();\n            states.showShortcutsSettings = true;\n          }}\n        >\n          <ul>\n            {formattedShortcuts.map(\n              ({ id, path, title, subtitle, icon }, i) => {\n                return (\n                  <li key={`${i}-${id}-${title}-${subtitle}-${path}`}>\n                    <Link\n                      class={subtitle ? 'has-subtitle' : ''}\n                      to={path}\n                      onClick={(e) => {\n                        if (e.target.classList.contains('is-active')) {\n                          e.preventDefault();\n                          const page = document.getElementById(`${id}-page`);\n                          console.log(id, page);\n                          if (page) {\n                            page.scrollTop = 0;\n                            const updatesButton =\n                              page.querySelector('.updates-button');\n                            if (updatesButton) {\n                              updatesButton.click();\n                            }\n                          }\n                        }\n                      }}\n                    >\n                      <Icon icon={icon} size=\"xl\" alt={title} />\n                      <span>\n                        <AsyncText>{title}</AsyncText>\n                        {subtitle && (\n                          <>\n                            <br />\n                            <small>{subtitle}</small>\n                          </>\n                        )}\n                      </span>\n                    </Link>\n                  </li>\n                );\n              },\n            )}\n          </ul>\n        </nav>\n      ) : (\n        <Menu\n          instanceRef={menuRef}\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          boundingBoxPadding=\"8 8 8 8\"\n          menuClassName=\"glass-menu shortcuts-menu\"\n          gap={8}\n          position=\"anchor\"\n          menuButton={\n            <button\n              type=\"button\"\n              id=\"shortcuts-button\"\n              class=\"plain\"\n              onContextMenu={(e) => {\n                e.preventDefault();\n                states.showShortcutsSettings = true;\n              }}\n              onTransitionStart={(e) => {\n                // Close menu if the button disappears\n                try {\n                  const { target } = e;\n                  if (getComputedStyle(target).pointerEvents === 'none') {\n                    menuRef.current?.closeMenu?.();\n                  }\n                } catch (e) {}\n              }}\n            >\n              <Icon icon=\"shortcut\" size=\"xl\" alt=\"Shortcuts\" />\n            </button>\n          }\n        >\n          {formattedShortcuts.map(({ id, path, title, subtitle, icon }, i) => {\n            return (\n              <MenuLink\n                to={path}\n                key={`${i}-${id}-${title}-${subtitle}-${path}`}\n                class=\"glass-menu-item\"\n              >\n                <Icon icon={icon} size=\"l\" />{' '}\n                <span class=\"menu-grow\">\n                  <span>\n                    <AsyncText>{title}</AsyncText>\n                  </span>\n                  {subtitle && (\n                    <>\n                      {' '}\n                      <small class=\"more-insignificant\">{subtitle}</small>\n                    </>\n                  )}\n                </span>\n                <span class=\"menu-shortcut hide-until-focus-visible\">\n                  {i + 1}\n                </span>\n              </MenuLink>\n            );\n          })}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(Shortcuts);\n","import { Menu } from '@szhsin/react-menu';\nimport { useWindowSize } from '@uidotdev/usehooks';\nimport { useRef } from 'preact/hooks';\n\nimport safeBoundingBoxPadding from '../utils/safe-bounding-box-padding';\n\n// It's like Menu but with sensible defaults, bug fixes and improvements.\nfunction Menu2(props) {\n  const { containerProps } = props;\n  const size = useWindowSize();\n  const instanceRef = useRef();\n  return (\n    <Menu\n      boundingBoxPadding={safeBoundingBoxPadding()}\n      repositionFlag={`${size.width}x${size.height}`}\n      {...props}\n      instanceRef={instanceRef}\n      containerProps={{\n        onClick: (e) => {\n          if (e.target === e.currentTarget) {\n            instanceRef.current?.closeMenu?.();\n          }\n          containerProps?.onClick?.(e);\n        },\n        ...containerProps,\n      }}\n    />\n  );\n}\n\nexport default Menu2;\n","import store from './store';\n\nexport function groupBoosts(values) {\n  let newValues = [];\n  let boostStash = [];\n  let serialBoosts = 0;\n  for (let i = 0; i < values.length; i++) {\n    const item = values[i];\n    if (item.reblog && !item.account?.group) {\n      boostStash.push(item);\n      serialBoosts++;\n    } else {\n      newValues.push(item);\n      if (serialBoosts < 3) {\n        serialBoosts = 0;\n      }\n    }\n  }\n  // if boostStash is more than quarter of values\n  // or if there are 3 or more boosts in a row\n  if (\n    values.length > 10 &&\n    (boostStash.length > values.length / 4 || serialBoosts >= 3)\n  ) {\n    // if boostStash is more than 3 quarter of values\n    const boostStashID = boostStash.map((status) => status.id);\n    if (boostStash.length > (values.length * 3) / 4) {\n      // insert boost array at the end of specialHome list\n      newValues = [\n        ...newValues,\n        { id: boostStashID, items: boostStash, type: 'boosts' },\n      ];\n    } else {\n      // insert boosts array in the middle of specialHome list\n      const half = Math.floor(newValues.length / 2);\n      newValues = [\n        ...newValues.slice(0, half),\n        {\n          id: boostStashID,\n          items: boostStash,\n          type: 'boosts',\n        },\n        ...newValues.slice(half),\n      ];\n    }\n    return newValues;\n  } else {\n    return values;\n  }\n}\n\nexport function dedupeBoosts(items, instance) {\n  const boostedStatusIDs = store.account.get('boostedStatusIDs') || {};\n  const filteredItems = items.filter((item) => {\n    if (!item.reblog) return true;\n    const statusKey = `${instance}-${item.reblog.id}`;\n    const boosterID = boostedStatusIDs[statusKey];\n    if (boosterID && boosterID !== item.id) {\n      console.warn(\n        `🚫 Duplicate boost by ${item.account.displayName}`,\n        item,\n        item.reblog,\n      );\n      return false;\n    } else {\n      boostedStatusIDs[statusKey] = item.id;\n    }\n    return true;\n  });\n  // Limit to 50\n  const keys = Object.keys(boostedStatusIDs);\n  if (keys.length > 50) {\n    keys.slice(0, keys.length - 50).forEach((key) => {\n      delete boostedStatusIDs[key];\n    });\n  }\n  store.account.set('boostedStatusIDs', boostedStatusIDs);\n  return filteredItems;\n}\n\nexport function groupContext(items) {\n  const contexts = [];\n  let contextIndex = 0;\n  items.forEach((item) => {\n    for (let i = 0; i < contexts.length; i++) {\n      if (contexts[i].find((t) => t.id === item.id)) return;\n      if (\n        contexts[i].find((t) => t.id === item.inReplyToId) ||\n        contexts[i].find((t) => t.inReplyToId === item.id)\n      ) {\n        contexts[i].push(item);\n        return;\n      }\n    }\n    const repliedItem = items.find((i) => i.id === item.inReplyToId);\n    if (repliedItem) {\n      contexts[contextIndex++] = [item, repliedItem];\n    }\n  });\n\n  // Check for cross-item contexts\n  // Merge contexts into one if they have a common item (same id)\n  for (let i = 0; i < contexts.length; i++) {\n    for (let j = i + 1; j < contexts.length; j++) {\n      const commonItem = contexts[i].find((t) => contexts[j].includes(t));\n      if (commonItem) {\n        contexts[i] = [...contexts[i], ...contexts[j]];\n        // Remove duplicate items\n        contexts[i] = contexts[i].filter(\n          (item, index, self) =>\n            self.findIndex((t) => t.id === item.id) === index,\n        );\n        contexts.splice(j, 1);\n        j--;\n      }\n    }\n  }\n\n  // Sort items by checking inReplyToId\n  contexts.forEach((context) => {\n    context.sort((a, b) => {\n      if (!a.inReplyToId && !b.inReplyToId) {\n        return new Date(a.createdAt) - new Date(b.createdAt);\n      }\n      if (a.inReplyToId === b.id) return 1;\n      if (b.inReplyToId === a.id) return -1;\n      if (!a.inReplyToId) return -1;\n      if (!b.inReplyToId) return 1;\n      return new Date(a.createdAt) - new Date(b.createdAt);\n    });\n  });\n\n  // Tag items that has different author than first post's author\n  contexts.forEach((context) => {\n    const firstItemAccountID = context[0].account.id;\n    context.forEach((item) => {\n      if (item.account.id !== firstItemAccountID) {\n        item._differentAuthor = true;\n      }\n    });\n  });\n\n  if (contexts.length) console.log('🧵 Contexts', contexts);\n\n  const newItems = [];\n  const appliedContextIndices = [];\n  items.forEach((item) => {\n    if (item.reblog) {\n      newItems.push(item);\n      return;\n    }\n    for (let i = 0; i < contexts.length; i++) {\n      if (contexts[i].find((t) => t.id === item.id)) {\n        if (appliedContextIndices.includes(i)) return;\n        const contextItems = contexts[i];\n        contextItems.sort((a, b) => {\n          const aDate = new Date(a.createdAt);\n          const bDate = new Date(b.createdAt);\n          return aDate - bDate;\n        });\n        const firstItemAccountID = contextItems[0].account.id;\n        newItems.push({\n          id: contextItems.map((i) => i.id),\n          items: contextItems,\n          type: contextItems.every((it) => it.account.id === firstItemAccountID)\n            ? 'thread'\n            : 'conversation',\n        });\n        appliedContextIndices.push(i);\n        return;\n      }\n    }\n    newItems.push(item);\n  });\n\n  return newItems;\n}\n","import { useLayoutEffect, useState } from 'preact/hooks';\n\nexport default function useScroll({\n  scrollableRef,\n  distanceFromStart = 1, // ratio of clientHeight/clientWidth\n  distanceFromEnd = 1, // ratio of clientHeight/clientWidth\n  scrollThresholdStart = 10,\n  scrollThresholdEnd = 10,\n  direction = 'vertical',\n  distanceFromStartPx: _distanceFromStartPx,\n  distanceFromEndPx: _distanceFromEndPx,\n} = {}) {\n  const [scrollDirection, setScrollDirection] = useState(null);\n  const [reachStart, setReachStart] = useState(false);\n  const [reachEnd, setReachEnd] = useState(false);\n  const [nearReachStart, setNearReachStart] = useState(false);\n  const [nearReachEnd, setNearReachEnd] = useState(false);\n  const isVertical = direction === 'vertical';\n\n  useLayoutEffect(() => {\n    const scrollableElement = scrollableRef.current;\n    if (!scrollableElement) return {};\n    let previousScrollStart = isVertical\n      ? scrollableElement.scrollTop\n      : scrollableElement.scrollLeft;\n\n    function onScroll() {\n      const {\n        scrollTop,\n        scrollLeft,\n        scrollHeight,\n        scrollWidth,\n        clientHeight,\n        clientWidth,\n      } = scrollableElement;\n      const scrollStart = isVertical ? scrollTop : scrollLeft;\n      const scrollDimension = isVertical ? scrollHeight : scrollWidth;\n      const clientDimension = isVertical ? clientHeight : clientWidth;\n      const scrollDistance = Math.abs(scrollStart - previousScrollStart);\n      const distanceFromStartPx =\n        _distanceFromStartPx ||\n        Math.min(\n          clientDimension * distanceFromStart,\n          scrollDimension,\n          scrollStart,\n        );\n      const distanceFromEndPx =\n        _distanceFromEndPx ||\n        Math.min(\n          clientDimension * distanceFromEnd,\n          scrollDimension,\n          scrollDimension - scrollStart - clientDimension,\n        );\n\n      if (\n        scrollDistance >=\n        (previousScrollStart < scrollStart\n          ? scrollThresholdEnd\n          : scrollThresholdStart)\n      ) {\n        setScrollDirection(previousScrollStart < scrollStart ? 'end' : 'start');\n        previousScrollStart = scrollStart;\n      }\n\n      setReachStart(scrollStart <= 0);\n      setReachEnd(scrollStart + clientDimension >= scrollDimension);\n      setNearReachStart(scrollStart <= distanceFromStartPx);\n      setNearReachEnd(\n        scrollStart + clientDimension >= scrollDimension - distanceFromEndPx,\n      );\n    }\n\n    scrollableElement.addEventListener('scroll', onScroll, { passive: true });\n\n    return () => scrollableElement.removeEventListener('scroll', onScroll);\n  }, [\n    distanceFromStart,\n    distanceFromEnd,\n    scrollThresholdStart,\n    scrollThresholdEnd,\n  ]);\n\n  return {\n    scrollDirection,\n    reachStart,\n    reachEnd,\n    nearReachStart,\n    nearReachEnd,\n    init: () => {\n      if (scrollableRef.current) {\n        scrollableRef.current.dispatchEvent(new Event('scroll'));\n      }\n    },\n  };\n}\n","import './media-post.css';\n\nimport { memo } from 'preact/compat';\nimport { useContext, useMemo } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport FilterContext from '../utils/filter-context';\nimport { isFiltered } from '../utils/filters';\nimport states, { statusKey } from '../utils/states';\nimport store from '../utils/store';\n\nimport Media from './media';\n\nfunction MediaPost({\n  class: className,\n  statusID,\n  status,\n  instance,\n  parent,\n  // allowFilters,\n  onMediaClick,\n}) {\n  let sKey = statusKey(statusID, instance);\n  const snapStates = useSnapshot(states);\n  if (!status) {\n    status = snapStates.statuses[sKey] || snapStates.statuses[statusID];\n    sKey = statusKey(status?.id, instance);\n  }\n  if (!status) {\n    return null;\n  }\n\n  const {\n    account: {\n      acct,\n      avatar,\n      avatarStatic,\n      id: accountId,\n      url: accountURL,\n      displayName,\n      username,\n      emojis: accountEmojis,\n      bot,\n      group,\n    },\n    id,\n    repliesCount,\n    reblogged,\n    reblogsCount,\n    favourited,\n    favouritesCount,\n    bookmarked,\n    poll,\n    muted,\n    sensitive,\n    spoilerText,\n    visibility, // public, unlisted, private, direct\n    language,\n    editedAt,\n    filtered,\n    card,\n    createdAt,\n    inReplyToId,\n    inReplyToAccountId,\n    content,\n    mentions,\n    mediaAttachments,\n    reblog,\n    uri,\n    url,\n    emojis,\n    // Non-API props\n    _deleted,\n    _pinned,\n    // _filtered,\n  } = status;\n\n  if (!mediaAttachments?.length) {\n    return null;\n  }\n\n  const debugHover = (e) => {\n    if (e.shiftKey) {\n      console.log({\n        ...status,\n      });\n    }\n  };\n\n  const currentAccount = useMemo(() => {\n    return store.session.get('currentAccount');\n  }, []);\n  const isSelf = useMemo(() => {\n    return currentAccount && currentAccount === accountId;\n  }, [accountId, currentAccount]);\n\n  const filterContext = useContext(FilterContext);\n  const filterInfo = !isSelf && isFiltered(filtered, filterContext);\n\n  if (filterInfo?.action === 'hide') {\n    return null;\n  }\n\n  console.debug('RENDER Media post', id, status?.account.displayName);\n\n  // const readingExpandSpoilers = useMemo(() => {\n  //   const prefs = store.account.get('preferences') || {};\n  //   return !!prefs['reading:expand:spoilers'];\n  // }, []);\n  const hasSpoiler = spoilerText || sensitive;\n\n  const Parent = parent || 'div';\n\n  return mediaAttachments.map((media, i) => {\n    const mediaKey = `${sKey}-${media.id}`;\n    const filterTitleStr = filterInfo?.titlesStr;\n    return (\n      <Parent\n        data-state-post-id={sKey}\n        onMouseEnter={debugHover}\n        key={mediaKey}\n        data-spoiler-text={\n          spoilerText || (sensitive ? 'Sensitive media' : undefined)\n        }\n        data-filtered-text={\n          filterInfo\n            ? `Filtered${filterTitleStr ? `: ${filterTitleStr}` : ''}`\n            : undefined\n        }\n        class={`\n          media-post\n          ${filterInfo ? 'filtered' : ''}\n          ${hasSpoiler ? 'has-spoiler' : ''}\n        `}\n      >\n        <Media\n          class={className}\n          media={media}\n          lang={language}\n          to={`/${instance}/s/${id}?media-only=${i + 1}`}\n          onClick={\n            onMediaClick ? (e) => onMediaClick(e, i, media, status) : undefined\n          }\n        />\n      </Parent>\n    );\n  });\n}\n\nexport default memo(MediaPost);\n","import './nav-menu.css';\n\nimport { ControlledMenu, MenuDivider, MenuItem } from '@szhsin/react-menu';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useLongPress } from 'use-long-press';\nimport { useSnapshot } from 'valtio';\n\nimport { api } from '../utils/api';\nimport safeBoundingBoxPadding from '../utils/safe-bounding-box-padding';\nimport states from '../utils/states';\nimport store from '../utils/store';\n\nimport Avatar from './avatar';\nimport Icon from './icon';\nimport MenuLink from './menu-link';\n\nfunction NavMenu(props) {\n  const snapStates = useSnapshot(states);\n  const { masto, instance, authenticated } = api();\n\n  const [currentAccount, setCurrentAccount] = useState();\n  const [moreThanOneAccount, setMoreThanOneAccount] = useState(false);\n\n  useEffect(() => {\n    const accounts = store.local.getJSON('accounts') || [];\n    const acc = accounts.find(\n      (account) => account.info.id === store.session.get('currentAccount'),\n    );\n    if (acc) setCurrentAccount(acc);\n    setMoreThanOneAccount(accounts.length > 1);\n  }, []);\n\n  // Home = Following\n  // But when in multi-column mode, Home becomes columns of anything\n  // User may choose pin or not to pin Following\n  // If user doesn't pin Following, we show it in the menu\n  const showFollowing =\n    (snapStates.settings.shortcutsViewMode === 'multi-column' ||\n      (!snapStates.settings.shortcutsViewMode &&\n        snapStates.settings.shortcutsColumnsMode)) &&\n    !snapStates.shortcuts.find((pin) => pin.type === 'following');\n\n  const bindLongPress = useLongPress(\n    () => {\n      states.showAccounts = true;\n    },\n    {\n      threshold: 600,\n      detect: 'touch',\n      cancelOnMovement: true,\n    },\n  );\n\n  const buttonRef = useRef();\n  const [menuState, setMenuState] = useState(undefined);\n\n  const boundingBoxPadding = safeBoundingBoxPadding([\n    0,\n    0,\n    snapStates.settings.shortcutsViewMode === 'tab-menu-bar' ? 50 : 0,\n    0,\n  ]);\n\n  const mutesIterator = useRef();\n  async function fetchMutes(firstLoad) {\n    if (firstLoad || !mutesIterator.current) {\n      mutesIterator.current = masto.v1.mutes.list({\n        limit: 80,\n      });\n    }\n    const results = await mutesIterator.current.next();\n    return results;\n  }\n\n  const blocksIterator = useRef();\n  async function fetchBlocks(firstLoad) {\n    if (firstLoad || !blocksIterator.current) {\n      blocksIterator.current = masto.v1.blocks.list({\n        limit: 80,\n      });\n    }\n    const results = await blocksIterator.current.next();\n    return results;\n  }\n\n  return (\n    <>\n      <button\n        ref={buttonRef}\n        type=\"button\"\n        class={`button plain nav-menu-button ${\n          moreThanOneAccount ? 'with-avatar' : ''\n        } ${open ? 'active' : ''}`}\n        style={{ position: 'relative' }}\n        onClick={() => {\n          setMenuState((state) => (!state ? 'open' : undefined));\n        }}\n        onContextMenu={(e) => {\n          e.preventDefault();\n          states.showAccounts = true;\n        }}\n        {...bindLongPress()}\n      >\n        {moreThanOneAccount && (\n          <Avatar\n            url={\n              currentAccount?.info?.avatar || currentAccount?.info?.avatarStatic\n            }\n            size=\"l\"\n            squircle={currentAccount?.info?.bot}\n          />\n        )}\n        <Icon icon=\"menu\" size={moreThanOneAccount ? 's' : 'l'} />\n      </button>\n      <ControlledMenu\n        menuClassName=\"nav-menu\"\n        state={menuState}\n        anchorRef={buttonRef}\n        onClose={() => {\n          setMenuState(undefined);\n        }}\n        containerProps={{\n          style: {\n            zIndex: 10,\n          },\n          onClick: () => {\n            setMenuState(undefined);\n          },\n        }}\n        portal={{\n          target: document.body,\n        }}\n        {...props}\n        overflow=\"auto\"\n        viewScroll=\"close\"\n        position=\"anchor\"\n        align=\"center\"\n        boundingBoxPadding={boundingBoxPadding}\n        unmountOnClose\n      >\n        {!!snapStates.appVersion?.commitHash &&\n          __COMMIT_HASH__ !== snapStates.appVersion.commitHash && (\n            <div class=\"top-menu\">\n              <MenuItem\n                onClick={() => {\n                  const yes = confirm('Reload page now to update?');\n                  if (yes) {\n                    (async () => {\n                      try {\n                        location.reload();\n                      } catch (e) {}\n                    })();\n                  }\n                }}\n              >\n                <Icon icon=\"sparkles\" class=\"sparkle-icon\" size=\"l\" />{' '}\n                <span>New update available…</span>\n              </MenuItem>\n              <MenuDivider />\n            </div>\n          )}\n        <section>\n          <MenuLink to=\"/\">\n            <Icon icon=\"home\" size=\"l\" /> <span>Home</span>\n          </MenuLink>\n          {authenticated && (\n            <>\n              {showFollowing && (\n                <MenuLink to=\"/following\">\n                  <Icon icon=\"following\" size=\"l\" /> <span>Following</span>\n                </MenuLink>\n              )}\n              <MenuLink to=\"/mentions\">\n                <Icon icon=\"at\" size=\"l\" /> <span>Mentions</span>\n              </MenuLink>\n              <MenuLink to=\"/notifications\">\n                <Icon icon=\"notification\" size=\"l\" /> <span>Notifications</span>\n                {snapStates.notificationsShowNew && (\n                  <sup title=\"New\" style={{ opacity: 0.5 }}>\n                    {' '}\n                    &bull;\n                  </sup>\n                )}\n              </MenuLink>\n              <MenuDivider />\n              <MenuLink to=\"/l\">\n                <Icon icon=\"list\" size=\"l\" /> <span>Lists</span>\n              </MenuLink>\n              <MenuLink to=\"/ft\">\n                <Icon icon=\"hashtag\" size=\"l\" /> <span>Followed Hashtags</span>\n              </MenuLink>\n              <MenuLink to=\"/b\">\n                <Icon icon=\"bookmark\" size=\"l\" /> <span>Bookmarks</span>\n              </MenuLink>\n              <MenuLink to=\"/f\">\n                <Icon icon=\"heart\" size=\"l\" /> <span>Likes</span>\n              </MenuLink>\n            </>\n          )}\n          <MenuDivider />\n          <MenuLink to={`/search`}>\n            <Icon icon=\"search\" size=\"l\" /> <span>Search</span>\n          </MenuLink>\n          <MenuLink to={`/${instance}/p/l`}>\n            <Icon icon=\"group\" size=\"l\" /> <span>Local</span>\n          </MenuLink>\n          <MenuLink to={`/${instance}/p`}>\n            <Icon icon=\"earth\" size=\"l\" /> <span>Federated</span>\n          </MenuLink>\n          <MenuLink to={`/${instance}/trending`}>\n            <Icon icon=\"chart\" size=\"l\" /> <span>Trending</span>\n          </MenuLink>\n        </section>\n        <section>\n          {authenticated ? (\n            <>\n              <MenuDivider />\n              {currentAccount?.info?.id && (\n                <MenuLink to={`/${instance}/a/${currentAccount.info.id}`}>\n                  <Icon icon=\"user\" size=\"l\" /> <span>Profile</span>\n                </MenuLink>\n              )}\n              <MenuItem\n                onClick={() => {\n                  states.showAccounts = true;\n                }}\n              >\n                <Icon icon=\"group\" size=\"l\" /> <span>Accounts&hellip;</span>\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  states.showGenericAccounts = {\n                    id: 'mute',\n                    heading: 'Muted users',\n                    fetchAccounts: fetchMutes,\n                  };\n                }}\n              >\n                <Icon icon=\"mute\" size=\"l\" /> Muted users&hellip;\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  states.showGenericAccounts = {\n                    id: 'block',\n                    heading: 'Blocked users',\n                    fetchAccounts: fetchBlocks,\n                  };\n                }}\n              >\n                <Icon icon=\"block\" size=\"l\" />\n                Blocked users&hellip;\n              </MenuItem>\n              <MenuDivider className=\"divider-grow\" />\n              <MenuItem\n                onClick={() => {\n                  states.showKeyboardShortcutsHelp = true;\n                }}\n              >\n                <Icon icon=\"keyboard\" size=\"l\" />{' '}\n                <span>Keyboard shortcuts</span>\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  states.showShortcutsSettings = true;\n                }}\n              >\n                <Icon icon=\"shortcut\" size=\"l\" />{' '}\n                <span>Shortcuts / Columns&hellip;</span>\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  states.showSettings = true;\n                }}\n              >\n                <Icon icon=\"gear\" size=\"l\" /> <span>Settings&hellip;</span>\n              </MenuItem>\n            </>\n          ) : (\n            <>\n              <MenuDivider />\n              <MenuLink to=\"/login\">\n                <Icon icon=\"user\" size=\"l\" /> <span>Log in</span>\n              </MenuLink>\n              <MenuItem\n                onClick={() => {\n                  states.showSettings = true;\n                }}\n              >\n                <Icon icon=\"gear\" size=\"l\" /> <span>Settings&hellip;</span>\n              </MenuItem>\n            </>\n          )}\n        </section>\n      </ControlledMenu>\n    </>\n  );\n}\n\nexport default NavMenu;\n","import { useCallback, useEffect, useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { InView } from 'react-intersection-observer';\nimport { useDebouncedCallback } from 'use-debounce';\nimport { useSnapshot } from 'valtio';\n\nimport FilterContext from '../utils/filter-context';\nimport { isFiltered } from '../utils/filters';\nimport states, { statusKey } from '../utils/states';\nimport statusPeek from '../utils/status-peek';\nimport { groupBoosts, groupContext } from '../utils/timeline-utils';\nimport useInterval from '../utils/useInterval';\nimport usePageVisibility from '../utils/usePageVisibility';\nimport useScroll from '../utils/useScroll';\n\nimport Icon from './icon';\nimport Link from './link';\nimport MediaPost from './media-post';\nimport NavMenu from './nav-menu';\nimport Status from './status';\n\nconst scrollIntoViewOptions = {\n  block: 'nearest',\n  inline: 'center',\n  behavior: 'smooth',\n};\n\nfunction Timeline({\n  title,\n  titleComponent,\n  id,\n  instance,\n  emptyText,\n  errorText,\n  useItemID, // use statusID instead of status object, assuming it's already in states\n  boostsCarousel,\n  fetchItems = () => {},\n  checkForUpdates = () => {},\n  checkForUpdatesInterval = 15_000, // 15 seconds\n  headerStart,\n  headerEnd,\n  timelineStart,\n  // allowFilters,\n  refresh,\n  view,\n  filterContext,\n}) {\n  const snapStates = useSnapshot(states);\n  const [items, setItems] = useState([]);\n  const [uiState, setUIState] = useState('default');\n  const [showMore, setShowMore] = useState(false);\n  const [showNew, setShowNew] = useState(false);\n  const [visible, setVisible] = useState(true);\n  const scrollableRef = useRef();\n\n  console.debug('RENDER Timeline', id, refresh);\n\n  const allowGrouping = view !== 'media';\n  const loadItems = useDebouncedCallback(\n    (firstLoad) => {\n      setShowNew(false);\n      if (uiState === 'loading') return;\n      setUIState('loading');\n      (async () => {\n        try {\n          let { done, value } = await fetchItems(firstLoad);\n          if (Array.isArray(value)) {\n            if (allowGrouping) {\n              if (boostsCarousel) {\n                value = groupBoosts(value);\n              }\n              value = groupContext(value);\n            }\n            console.log(value);\n            if (firstLoad) {\n              setItems(value);\n            } else {\n              setItems((items) => [...items, ...value]);\n            }\n            if (!value.length) done = true;\n            setShowMore(!done);\n          } else {\n            setShowMore(false);\n          }\n          setUIState('default');\n        } catch (e) {\n          console.error(e);\n          setUIState('error');\n        } finally {\n          loadItems.cancel();\n        }\n      })();\n    },\n    1500,\n    {\n      leading: true,\n      trailing: false,\n    },\n  );\n\n  const itemsSelector = '.timeline-item, .timeline-item-alt';\n\n  const jRef = useHotkeys('j, shift+j', (_, handler) => {\n    // focus on next status after active item\n    const activeItem = document.activeElement.closest(itemsSelector);\n    const activeItemRect = activeItem?.getBoundingClientRect();\n    const allItems = Array.from(\n      scrollableRef.current.querySelectorAll(itemsSelector),\n    );\n    if (\n      activeItem &&\n      activeItemRect.top < scrollableRef.current.clientHeight &&\n      activeItemRect.bottom > 0\n    ) {\n      const activeItemIndex = allItems.indexOf(activeItem);\n      let nextItem = allItems[activeItemIndex + 1];\n      if (handler.shift) {\n        // get next status that's not .timeline-item-alt\n        nextItem = allItems.find(\n          (item, index) =>\n            index > activeItemIndex &&\n            !item.classList.contains('timeline-item-alt'),\n        );\n      }\n      if (nextItem) {\n        nextItem.focus();\n        nextItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostItem = allItems.find((item) => {\n        const itemRect = item.getBoundingClientRect();\n        return itemRect.top >= 44 && itemRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostItem) {\n        topmostItem.focus();\n        topmostItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    }\n  });\n\n  const kRef = useHotkeys('k, shift+k', (_, handler) => {\n    // focus on previous status after active item\n    const activeItem = document.activeElement.closest(itemsSelector);\n    const activeItemRect = activeItem?.getBoundingClientRect();\n    const allItems = Array.from(\n      scrollableRef.current.querySelectorAll(itemsSelector),\n    );\n    if (\n      activeItem &&\n      activeItemRect.top < scrollableRef.current.clientHeight &&\n      activeItemRect.bottom > 0\n    ) {\n      const activeItemIndex = allItems.indexOf(activeItem);\n      let prevItem = allItems[activeItemIndex - 1];\n      if (handler.shift) {\n        // get prev status that's not .timeline-item-alt\n        prevItem = allItems.findLast(\n          (item, index) =>\n            index < activeItemIndex &&\n            !item.classList.contains('timeline-item-alt'),\n        );\n      }\n      if (prevItem) {\n        prevItem.focus();\n        prevItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostItem = allItems.find((item) => {\n        const itemRect = item.getBoundingClientRect();\n        return itemRect.top >= 44 && itemRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostItem) {\n        topmostItem.focus();\n        topmostItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    }\n  });\n\n  const oRef = useHotkeys(['enter', 'o'], () => {\n    // open active status\n    const activeItem = document.activeElement.closest(itemsSelector);\n    if (activeItem) {\n      activeItem.click();\n    }\n  });\n\n  const {\n    scrollDirection,\n    nearReachStart,\n    nearReachEnd,\n    reachStart,\n    reachEnd,\n  } = useScroll({\n    scrollableRef,\n    distanceFromEnd: 2,\n    scrollThresholdStart: 44,\n  });\n\n  useEffect(() => {\n    scrollableRef.current?.scrollTo({ top: 0 });\n    loadItems(true);\n  }, []);\n  useEffect(() => {\n    loadItems(true);\n  }, [refresh]);\n\n  useEffect(() => {\n    if (reachStart) {\n      loadItems(true);\n    }\n  }, [reachStart]);\n\n  useEffect(() => {\n    if (nearReachEnd || (reachEnd && showMore)) {\n      loadItems();\n    }\n  }, [nearReachEnd, showMore]);\n\n  const prevView = useRef(view);\n  useEffect(() => {\n    if (prevView.current !== view) {\n      prevView.current = view;\n      setItems([]);\n    }\n  }, [view]);\n\n  const loadOrCheckUpdates = useCallback(\n    async ({ disableIdleCheck = false } = {}) => {\n      const noPointers = scrollableRef.current\n        ? getComputedStyle(scrollableRef.current).pointerEvents === 'none'\n        : false;\n      console.log('✨ Load or check updates', id, {\n        autoRefresh: snapStates.settings.autoRefresh,\n        scrollTop: scrollableRef.current.scrollTop,\n        disableIdleCheck,\n        idle: window.__IDLE__,\n        inBackground: inBackground(),\n        noPointers,\n      });\n      if (\n        snapStates.settings.autoRefresh &&\n        scrollableRef.current.scrollTop < 16 &&\n        (disableIdleCheck || window.__IDLE__) &&\n        !inBackground() &&\n        !noPointers\n      ) {\n        console.log('✨ Load updates', id, snapStates.settings.autoRefresh);\n        loadItems(true);\n      } else {\n        console.log('✨ Check updates', id, snapStates.settings.autoRefresh);\n        const hasUpdate = await checkForUpdates();\n        if (hasUpdate) {\n          console.log('✨ Has new updates', id);\n          setShowNew(true);\n        }\n      }\n    },\n    [id, loadItems, checkForUpdates, snapStates.settings.autoRefresh],\n  );\n\n  const lastHiddenTime = useRef();\n  usePageVisibility(\n    (visible) => {\n      if (visible) {\n        const timeDiff = Date.now() - lastHiddenTime.current;\n        if (!lastHiddenTime.current || timeDiff > 1000 * 3) {\n          // 3 seconds\n          loadOrCheckUpdates({\n            disableIdleCheck: true,\n          });\n        }\n      } else {\n        lastHiddenTime.current = Date.now();\n      }\n      setVisible(visible);\n    },\n    [checkForUpdates, loadOrCheckUpdates, snapStates.settings.autoRefresh],\n  );\n\n  // checkForUpdates interval\n  useInterval(\n    loadOrCheckUpdates,\n    visible && !showNew\n      ? checkForUpdatesInterval * (nearReachStart ? 1 : 2)\n      : null,\n  );\n\n  const hiddenUI = scrollDirection === 'end' && !nearReachStart;\n\n  return (\n    <FilterContext.Provider value={filterContext}>\n      <div\n        id={`${id}-page`}\n        class=\"deck-container\"\n        ref={(node) => {\n          scrollableRef.current = node;\n          jRef.current = node;\n          kRef.current = node;\n          oRef.current = node;\n        }}\n        tabIndex=\"-1\"\n      >\n        <div class=\"timeline-deck deck\">\n          <header\n            hidden={hiddenUI}\n            onClick={(e) => {\n              if (!e.target.closest('a, button')) {\n                scrollableRef.current?.scrollTo({\n                  top: 0,\n                  behavior: 'smooth',\n                });\n              }\n            }}\n            onDblClick={(e) => {\n              if (!e.target.closest('a, button')) {\n                loadItems(true);\n              }\n            }}\n            class={uiState === 'loading' ? 'loading' : ''}\n          >\n            <div class=\"header-grid\">\n              <div class=\"header-side\">\n                <NavMenu />\n                {headerStart !== null && headerStart !== undefined ? (\n                  headerStart\n                ) : (\n                  <Link to=\"/\" class=\"button plain home-button\">\n                    <Icon icon=\"home\" size=\"l\" />\n                  </Link>\n                )}\n              </div>\n              {title && (titleComponent ? titleComponent : <h1>{title}</h1>)}\n              <div class=\"header-side\">\n                {/* <Loader hidden={uiState !== 'loading'} /> */}\n                {!!headerEnd && headerEnd}\n              </div>\n            </div>\n            {items.length > 0 &&\n              uiState !== 'loading' &&\n              !hiddenUI &&\n              showNew && (\n                <button\n                  class=\"updates-button shiny-pill\"\n                  type=\"button\"\n                  onClick={() => {\n                    loadItems(true);\n                    scrollableRef.current?.scrollTo({\n                      top: 0,\n                      behavior: 'smooth',\n                    });\n                  }}\n                >\n                  <Icon icon=\"arrow-up\" /> New posts\n                </button>\n              )}\n          </header>\n          {!!timelineStart && (\n            <div\n              class={`timeline-start ${uiState === 'loading' ? 'loading' : ''}`}\n            >\n              {timelineStart}\n            </div>\n          )}\n          {!!items.length ? (\n            <>\n              <ul class={`timeline ${view ? `timeline-${view}` : ''}`}>\n                {items.map((status) => (\n                  <TimelineItem\n                    status={status}\n                    instance={instance}\n                    useItemID={useItemID}\n                    // allowFilters={allowFilters}\n                    filterContext={filterContext}\n                    key={status.id + status?._pinned + view}\n                    view={view}\n                  />\n                ))}\n                {showMore &&\n                  uiState === 'loading' &&\n                  (view === 'media' ? null : (\n                    <>\n                      <li\n                        style={{\n                          height: '20vh',\n                        }}\n                      >\n                        <Status skeleton />\n                      </li>\n                      <li\n                        style={{\n                          height: '25vh',\n                        }}\n                      >\n                        <Status skeleton />\n                      </li>\n                    </>\n                  ))}\n              </ul>\n              {uiState === 'default' &&\n                (showMore ? (\n                  <InView\n                    onChange={(inView) => {\n                      if (inView) {\n                        loadItems();\n                      }\n                    }}\n                  >\n                    <button\n                      type=\"button\"\n                      class=\"plain block\"\n                      onClick={() => loadItems()}\n                      style={{ marginBlockEnd: '6em' }}\n                    >\n                      Show more&hellip;\n                    </button>\n                  </InView>\n                ) : (\n                  <p class=\"ui-state insignificant\">The end.</p>\n                ))}\n            </>\n          ) : uiState === 'loading' ? (\n            <ul class=\"timeline\">\n              {Array.from({ length: 5 }).map((_, i) =>\n                view === 'media' ? (\n                  <div\n                    style={{\n                      height: '50vh',\n                    }}\n                  />\n                ) : (\n                  <li key={i}>\n                    <Status skeleton />\n                  </li>\n                ),\n              )}\n            </ul>\n          ) : (\n            uiState !== 'error' && <p class=\"ui-state\">{emptyText}</p>\n          )}\n          {uiState === 'error' && (\n            <p class=\"ui-state\">\n              {errorText}\n              <br />\n              <br />\n              <button type=\"button\" onClick={() => loadItems(!items.length)}>\n                Try again\n              </button>\n            </p>\n          )}\n        </div>\n      </div>\n    </FilterContext.Provider>\n  );\n}\n\nfunction TimelineItem({\n  status,\n  instance,\n  useItemID,\n  // allowFilters,\n  filterContext,\n  view,\n}) {\n  const { id: statusID, reblog, items, type, _pinned } = status;\n  if (_pinned) useItemID = false;\n  const actualStatusID = reblog?.id || statusID;\n  const url = instance\n    ? `/${instance}/s/${actualStatusID}`\n    : `/s/${actualStatusID}`;\n  let title = '';\n  if (type === 'boosts') {\n    title = `${items.length} Boosts`;\n  } else if (type === 'pinned') {\n    title = 'Pinned posts';\n  }\n  const isCarousel = type === 'boosts' || type === 'pinned';\n  if (items) {\n    if (isCarousel) {\n      // Here, we don't hide filtered posts, but we sort them last\n      items.sort((a, b) => {\n        // if (a._filtered && !b._filtered) {\n        //   return 1;\n        // }\n        // if (!a._filtered && b._filtered) {\n        //   return -1;\n        // }\n        const aFiltered = isFiltered(a.filtered, filterContext);\n        const bFiltered = isFiltered(b.filtered, filterContext);\n        if (aFiltered && !bFiltered) {\n          return 1;\n        }\n        if (!aFiltered && bFiltered) {\n          return -1;\n        }\n        return 0;\n      });\n      return (\n        <li key={`timeline-${statusID}`} class=\"timeline-item-carousel\">\n          <StatusCarousel title={title} class={`${type}-carousel`}>\n            {items.map((item) => {\n              const { id: statusID, reblog, _pinned } = item;\n              const actualStatusID = reblog?.id || statusID;\n              const url = instance\n                ? `/${instance}/s/${actualStatusID}`\n                : `/s/${actualStatusID}`;\n              if (_pinned) useItemID = false;\n              return (\n                <li key={statusID}>\n                  <Link class=\"status-carousel-link timeline-item-alt\" to={url}>\n                    {useItemID ? (\n                      <Status\n                        statusID={statusID}\n                        instance={instance}\n                        size=\"s\"\n                        contentTextWeight\n                        // allowFilters={allowFilters}\n                      />\n                    ) : (\n                      <Status\n                        status={item}\n                        instance={instance}\n                        size=\"s\"\n                        contentTextWeight\n                        // allowFilters={allowFilters}\n                      />\n                    )}\n                  </Link>\n                </li>\n              );\n            })}\n          </StatusCarousel>\n        </li>\n      );\n    }\n    const manyItems = items.length > 3;\n    return items.map((item, i) => {\n      const { id: statusID, _differentAuthor } = item;\n      const url = instance ? `/${instance}/s/${statusID}` : `/s/${statusID}`;\n      const isMiddle = i > 0 && i < items.length - 1;\n      const isSpoiler = item.sensitive && !!item.spoilerText;\n      const showCompact =\n        (!_differentAuthor && isSpoiler && i > 0) ||\n        (manyItems &&\n          isMiddle &&\n          (type === 'thread' ||\n            (type === 'conversation' &&\n              !_differentAuthor &&\n              !items[i - 1]._differentAuthor &&\n              !items[i + 1]._differentAuthor)));\n      return (\n        <li\n          key={`timeline-${statusID}`}\n          class={`timeline-item-container timeline-item-container-type-${type} timeline-item-container-${\n            i === 0 ? 'start' : i === items.length - 1 ? 'end' : 'middle'\n          } ${_differentAuthor ? 'timeline-item-diff-author' : ''}`}\n        >\n          <Link class=\"status-link timeline-item\" to={url}>\n            {showCompact ? (\n              <TimelineStatusCompact status={item} instance={instance} />\n            ) : useItemID ? (\n              <Status\n                statusID={statusID}\n                instance={instance}\n                // allowFilters={allowFilters}\n              />\n            ) : (\n              <Status\n                status={item}\n                instance={instance}\n                // allowFilters={allowFilters}\n              />\n            )}\n          </Link>\n        </li>\n      );\n    });\n  }\n\n  const itemKey = `timeline-${statusID + _pinned}`;\n\n  if (view === 'media') {\n    return useItemID ? (\n      <MediaPost\n        class=\"timeline-item\"\n        parent=\"li\"\n        key={itemKey}\n        statusID={statusID}\n        instance={instance}\n        // allowFilters={allowFilters}\n      />\n    ) : (\n      <MediaPost\n        class=\"timeline-item\"\n        parent=\"li\"\n        key={itemKey}\n        status={status}\n        instance={instance}\n        // allowFilters={allowFilters}\n      />\n    );\n  }\n\n  return (\n    <li key={itemKey}>\n      <Link class=\"status-link timeline-item\" to={url}>\n        {useItemID ? (\n          <Status\n            statusID={statusID}\n            instance={instance}\n            // allowFilters={allowFilters}\n          />\n        ) : (\n          <Status\n            status={status}\n            instance={instance}\n            // allowFilters={allowFilters}\n          />\n        )}\n      </Link>\n    </li>\n  );\n}\n\nfunction StatusCarousel({ title, class: className, children }) {\n  const carouselRef = useRef();\n  const { reachStart, reachEnd, init } = useScroll({\n    scrollableRef: carouselRef,\n    direction: 'horizontal',\n  });\n  useEffect(() => {\n    init?.();\n  }, []);\n\n  return (\n    <div class={`status-carousel ${className}`}>\n      <header>\n        <h3>{title}</h3>\n        <span>\n          <button\n            type=\"button\"\n            class=\"small plain2\"\n            disabled={reachStart}\n            onClick={() => {\n              carouselRef.current?.scrollBy({\n                left: -Math.min(320, carouselRef.current?.offsetWidth),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"chevron-left\" />\n          </button>{' '}\n          <button\n            type=\"button\"\n            class=\"small plain2\"\n            disabled={reachEnd}\n            onClick={() => {\n              carouselRef.current?.scrollBy({\n                left: Math.min(320, carouselRef.current?.offsetWidth),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"chevron-right\" />\n          </button>\n        </span>\n      </header>\n      <ul ref={carouselRef}>{children}</ul>\n    </div>\n  );\n}\n\nfunction TimelineStatusCompact({ status, instance }) {\n  const snapStates = useSnapshot(states);\n  const { id, visibility } = status;\n  const statusPeekText = statusPeek(status);\n  const sKey = statusKey(id, instance);\n  return (\n    <article\n      class={`status compact-thread ${\n        visibility === 'direct' ? 'visibility-direct' : ''\n      }`}\n      tabindex=\"-1\"\n    >\n      {!!snapStates.statusThreadNumber[sKey] ? (\n        <div class=\"status-thread-badge\">\n          <Icon icon=\"thread\" size=\"s\" />\n          {snapStates.statusThreadNumber[sKey]\n            ? ` ${snapStates.statusThreadNumber[sKey]}/X`\n            : ''}\n        </div>\n      ) : (\n        <div class=\"status-thread-badge\">\n          <Icon icon=\"thread\" size=\"s\" />\n        </div>\n      )}\n      <div class=\"content-compact\" title={statusPeekText}>\n        {statusPeekText}\n        {status.sensitive && status.spoilerText && (\n          <>\n            {' '}\n            <span class=\"spoiler-badge\">\n              <Icon icon=\"eye-close\" size=\"s\" />\n            </span>\n          </>\n        )}\n      </div>\n    </article>\n  );\n}\n\nfunction inBackground() {\n  return !!document.querySelector('.deck-backdrop, #modal-container > *');\n}\n\nexport default Timeline;\n","import { MenuItem } from '@szhsin/react-menu';\nimport {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'preact/hooks';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport AccountInfo from '../components/account-info';\nimport EmojiText from '../components/emoji-text';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Menu2 from '../components/menu2';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport pmem from '../utils/pmem';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\nconst MIN_YEAR = 1983;\nconst MIN_YEAR_MONTH = `${MIN_YEAR}-01`; // Birth of the Internet\n\nconst supportsInputMonth = (() => {\n  try {\n    const input = document.createElement('input');\n    input.setAttribute('type', 'month');\n    return input.type === 'month';\n  } catch (e) {\n    return false;\n  }\n})();\n\nasync function _isSearchEnabled(instance) {\n  const { masto } = api({ instance });\n  const results = await masto.v2.search.fetch({\n    q: 'from:me',\n    type: 'statuses',\n    limit: 1,\n  });\n  return !!results?.statuses?.length;\n}\nconst isSearchEnabled = pmem(_isSearchEnabled);\n\nfunction AccountStatuses() {\n  const snapStates = useSnapshot(states);\n  const { id, ...params } = useParams();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const month = searchParams.get('month');\n  const excludeReplies = !searchParams.get('replies');\n  const excludeBoosts = !!searchParams.get('boosts');\n  const tagged = searchParams.get('tagged');\n  const media = !!searchParams.get('media');\n  const { masto, instance, authenticated } = api({ instance: params.instance });\n  const { masto: currentMasto, instance: currentInstance } = api();\n  const accountStatusesIterator = useRef();\n\n  const allSearchParams = [month, excludeReplies, excludeBoosts, tagged, media];\n  const [account, setAccount] = useState();\n  const searchOffsetRef = useRef(0);\n  useEffect(() => {\n    searchOffsetRef.current = 0;\n  }, allSearchParams);\n\n  const sameCurrentInstance = useMemo(\n    () => instance === currentInstance,\n    [instance, currentInstance],\n  );\n  const [searchEnabled, setSearchEnabled] = useState(false);\n  useEffect(() => {\n    // Only enable for current logged-in instance\n    // Most remote instances don't allow unauthenticated searches\n    if (!sameCurrentInstance) return;\n    if (!account?.acct) return;\n    (async () => {\n      const enabled = await isSearchEnabled(instance);\n      console.log({ enabled });\n      setSearchEnabled(enabled);\n    })();\n  }, [instance, sameCurrentInstance, account?.acct]);\n\n  async function fetchAccountStatuses(firstLoad) {\n    const isValidMonth = /^\\d{4}-[01]\\d$/.test(month);\n    const isValidYear = month?.split?.('-')?.[0] >= MIN_YEAR;\n    if (isValidMonth && isValidYear) {\n      if (!account) {\n        return {\n          value: [],\n          done: true,\n        };\n      }\n      const [_year, _month] = month.split('-');\n      const monthIndex = parseInt(_month, 10) - 1;\n      // YYYY-MM (no day)\n      // Search options:\n      // - from:account\n      // - after:YYYY-MM-DD (non-inclusive)\n      // - before:YYYY-MM-DD (non-inclusive)\n\n      // Last day of previous month\n      const after = new Date(_year, monthIndex, 0);\n      const afterStr = `${after.getFullYear()}-${(after.getMonth() + 1)\n        .toString()\n        .padStart(2, '0')}-${after.getDate().toString().padStart(2, '0')}`;\n      // First day of next month\n      const before = new Date(_year, monthIndex + 1, 1);\n      const beforeStr = `${before.getFullYear()}-${(before.getMonth() + 1)\n        .toString()\n        .padStart(2, '0')}-${before.getDate().toString().padStart(2, '0')}`;\n      console.log({\n        month,\n        _year,\n        _month,\n        monthIndex,\n        after,\n        before,\n        afterStr,\n        beforeStr,\n      });\n\n      let limit;\n      if (firstLoad) {\n        limit = LIMIT + 1;\n        searchOffsetRef.current = 0;\n      } else {\n        limit = LIMIT + searchOffsetRef.current + 1;\n        searchOffsetRef.current += LIMIT;\n      }\n\n      const searchResults = await masto.v2.search.fetch({\n        q: `from:${account.acct} after:${afterStr} before:${beforeStr}`,\n        type: 'statuses',\n        limit,\n        offset: searchOffsetRef.current,\n      });\n      if (searchResults?.statuses?.length) {\n        const value = searchResults.statuses.slice(0, LIMIT);\n        value.forEach((item) => {\n          saveStatus(item, instance);\n        });\n        const done = searchResults.statuses.length <= LIMIT;\n        return { value, done };\n      } else {\n        return { value: [], done: true };\n      }\n    }\n\n    const results = [];\n    if (firstLoad) {\n      const { value } = await masto.v1.accounts\n        .$select(id)\n        .statuses.list({\n          pinned: true,\n        })\n        .next();\n      if (value?.length && !tagged && !media) {\n        const pinnedStatuses = value.map((status) => {\n          saveStatus(status, instance);\n          return {\n            ...status,\n            _pinned: true,\n          };\n        });\n        if (pinnedStatuses.length >= 3) {\n          const pinnedStatusesIds = pinnedStatuses.map((status) => status.id);\n          results.push({\n            id: pinnedStatusesIds,\n            items: pinnedStatuses,\n            type: 'pinned',\n          });\n        } else {\n          results.push(...pinnedStatuses);\n        }\n      }\n    }\n    if (firstLoad || !accountStatusesIterator.current) {\n      accountStatusesIterator.current = masto.v1.accounts\n        .$select(id)\n        .statuses.list({\n          limit: LIMIT,\n          exclude_replies: excludeReplies,\n          exclude_reblogs: excludeBoosts,\n          only_media: media,\n          tagged,\n        });\n    }\n    const { value, done } = await accountStatusesIterator.current.next();\n    if (value?.length) {\n      results.push(...value);\n\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      value: results,\n      done,\n    };\n  }\n\n  const [featuredTags, setFeaturedTags] = useState([]);\n  useTitle(\n    account?.acct\n      ? `${account?.displayName ? account.displayName + ' ' : ''}@${\n          account.acct\n        }${\n          !excludeReplies\n            ? ' (+ Replies)'\n            : excludeBoosts\n            ? ' (- Boosts)'\n            : tagged\n            ? ` (#${tagged})`\n            : media\n            ? ' (Media)'\n            : month\n            ? ` (${new Date(month).toLocaleString('default', {\n                month: 'long',\n                year: 'numeric',\n              })})`\n            : ''\n        }`\n      : 'Account posts',\n    '/:instance?/a/:id',\n  );\n\n  const fetchAccountPromiseRef = useRef();\n  const fetchAccount = useCallback(() => {\n    const fetchPromise =\n      fetchAccountPromiseRef.current || masto.v1.accounts.$select(id).fetch();\n    fetchAccountPromiseRef.current = fetchPromise;\n    return fetchPromise;\n  }, [id, masto]);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const acc = await fetchAccount();\n        console.log(acc);\n        setAccount(acc);\n      } catch (e) {\n        console.error(e);\n      }\n      try {\n        const featuredTags = await masto.v1.accounts\n          .$select(id)\n          .featuredTags.list();\n        console.log({ featuredTags });\n        setFeaturedTags(featuredTags);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [id]);\n\n  const { displayName, acct, emojis } = account || {};\n\n  const accountInfoMemo = useMemo(() => {\n    const cachedAccount = snapStates.accounts[`${id}@${instance}`];\n    return (\n      <AccountInfo\n        instance={instance}\n        account={cachedAccount || id}\n        fetchAccount={fetchAccount}\n        authenticated={authenticated}\n        standalone\n      />\n    );\n  }, [id, instance, authenticated, fetchAccount]);\n\n  const filterBarRef = useRef();\n  const TimelineStart = useMemo(() => {\n    const filtered =\n      !excludeReplies || excludeBoosts || tagged || media || !!month;\n\n    return (\n      <>\n        {accountInfoMemo}\n        <div\n          class=\"filter-bar\"\n          ref={filterBarRef}\n          style={{\n            position: 'relative',\n          }}\n        >\n          {filtered ? (\n            <Link\n              to={`/${instance}/a/${id}`}\n              class=\"insignificant filter-clear\"\n              title=\"Clear filters\"\n              key=\"clear-filters\"\n            >\n              <Icon icon=\"x\" size=\"l\" />\n            </Link>\n          ) : (\n            <Icon icon=\"filter\" class=\"insignificant\" size=\"l\" />\n          )}\n          <Link\n            to={`/${instance}/a/${id}${excludeReplies ? '?replies=1' : ''}`}\n            onClick={() => {\n              if (excludeReplies) {\n                showToast('Showing post with replies');\n              }\n            }}\n            class={excludeReplies ? '' : 'is-active'}\n          >\n            + Replies\n          </Link>\n          <Link\n            to={`/${instance}/a/${id}${excludeBoosts ? '' : '?boosts=0'}`}\n            onClick={() => {\n              if (!excludeBoosts) {\n                showToast('Showing posts without boosts');\n              }\n            }}\n            class={!excludeBoosts ? '' : 'is-active'}\n          >\n            - Boosts\n          </Link>\n          <Link\n            to={`/${instance}/a/${id}${media ? '' : '?media=1'}`}\n            onClick={() => {\n              if (!media) {\n                showToast('Showing posts with media');\n              }\n            }}\n            class={media ? 'is-active' : ''}\n          >\n            Media\n          </Link>\n          {featuredTags.map((tag) => (\n            <Link\n              key={tag.id}\n              to={`/${instance}/a/${id}${\n                tagged === tag.name\n                  ? ''\n                  : `?tagged=${encodeURIComponent(tag.name)}`\n              }`}\n              onClick={() => {\n                if (tagged !== tag.name) {\n                  showToast(`Showing posts tagged with #${tag.name}`);\n                }\n              }}\n              class={tagged === tag.name ? 'is-active' : ''}\n            >\n              <span>\n                <span class=\"more-insignificant\">#</span>\n                {tag.name}\n              </span>\n              {\n                // The count differs based on instance 😅\n              }\n              {/* <span class=\"filter-count\">{tag.statusesCount}</span> */}\n            </Link>\n          ))}\n          {searchEnabled &&\n            (supportsInputMonth ? (\n              <label class={`filter-field ${month ? 'is-active' : ''}`}>\n                <Icon icon=\"month\" size=\"l\" />\n                <input\n                  type=\"month\"\n                  disabled={!account?.acct}\n                  value={month || ''}\n                  min={MIN_YEAR_MONTH}\n                  max={new Date().toISOString().slice(0, 7)}\n                  onInput={(e) => {\n                    const { value, validity } = e.currentTarget;\n                    if (!validity.valid) return;\n                    setSearchParams(\n                      value\n                        ? {\n                            month: value,\n                          }\n                        : {},\n                    );\n                    showToast(\n                      `Showing posts in ${new Date(value).toLocaleString(\n                        'default',\n                        {\n                          month: 'long',\n                          year: 'numeric',\n                        },\n                      )}`,\n                    );\n                  }}\n                />\n              </label>\n            ) : (\n              // Fallback to <select> for month and <input type=\"number\"> for year\n              <MonthPicker\n                class={`filter-field ${month ? 'is-active' : ''}`}\n                disabled={!account?.acct}\n                value={month || ''}\n                min={MIN_YEAR_MONTH}\n                max={new Date().toISOString().slice(0, 7)}\n                onInput={(e) => {\n                  const { value, validity } = e;\n                  if (!validity.valid) return;\n                  setSearchParams(\n                    value\n                      ? {\n                          month: value,\n                        }\n                      : {},\n                  );\n                }}\n              />\n            ))}\n        </div>\n      </>\n    );\n  }, [\n    id,\n    instance,\n    authenticated,\n    featuredTags,\n    searchEnabled,\n    ...allSearchParams,\n  ]);\n\n  useEffect(() => {\n    // Focus on .is-active\n    const active = filterBarRef.current?.querySelector('.is-active');\n    if (active) {\n      console.log('active', active, active.offsetLeft);\n      filterBarRef.current.scrollTo({\n        behavior: 'smooth',\n        left:\n          active.offsetLeft -\n          (filterBarRef.current.offsetWidth - active.offsetWidth) / 2,\n      });\n    }\n  }, [featuredTags, searchEnabled, ...allSearchParams]);\n\n  const accountInstance = useMemo(() => {\n    if (!account?.url) return null;\n    const domain = new URL(account.url).hostname;\n    return domain;\n  }, [account]);\n  const sameInstance = instance === accountInstance;\n  const allowSwitch = !!account && !sameInstance;\n\n  return (\n    <Timeline\n      key={id}\n      title={`${account?.acct ? '@' + account.acct : 'Posts'}`}\n      titleComponent={\n        <h1\n          class=\"header-double-lines header-account\"\n          // onClick={() => {\n          //   states.showAccount = {\n          //     account,\n          //     instance,\n          //   };\n          // }}\n        >\n          <b>\n            <EmojiText text={displayName} emojis={emojis} />\n          </b>\n          <div>\n            <span>@{acct}</span>\n          </div>\n        </h1>\n      }\n      id=\"account-statuses\"\n      instance={instance}\n      emptyText=\"Nothing to see here yet.\"\n      errorText=\"Unable to load posts\"\n      fetchItems={fetchAccountStatuses}\n      useItemID\n      view={media ? 'media' : undefined}\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      timelineStart={TimelineStart}\n      refresh={[\n        excludeReplies,\n        excludeBoosts,\n        tagged,\n        media,\n        month + account?.acct,\n      ].toString()}\n      headerEnd={\n        <Menu2\n          portal\n          // setDownOverflow\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          <MenuItem\n            disabled={!allowSwitch}\n            onClick={() => {\n              (async () => {\n                try {\n                  const { masto } = api({\n                    instance: accountInstance,\n                  });\n                  const acc = await masto.v1.accounts.lookup({\n                    acct: account.acct,\n                  });\n                  const { id } = acc;\n                  location.hash = `/${accountInstance}/a/${id}`;\n                } catch (e) {\n                  console.error(e);\n                  alert('Unable to fetch account info');\n                }\n              })();\n            }}\n          >\n            <Icon icon=\"transfer\" />{' '}\n            <small class=\"menu-double-lines\">\n              Switch to account's instance (<b>{accountInstance}</b>)\n            </small>\n          </MenuItem>\n          {!sameCurrentInstance && (\n            <MenuItem\n              onClick={() => {\n                (async () => {\n                  try {\n                    const acc = await currentMasto.v1.accounts.lookup({\n                      acct: account.acct + '@' + instance,\n                    });\n                    const { id } = acc;\n                    location.hash = `/${currentInstance}/a/${id}`;\n                  } catch (e) {\n                    console.error(e);\n                    alert('Unable to fetch account info');\n                  }\n                })();\n              }}\n            >\n              <Icon icon=\"transfer\" />{' '}\n              <small class=\"menu-double-lines\">\n                Switch to my instance (<b>{currentInstance}</b>)\n              </small>\n            </MenuItem>\n          )}\n        </Menu2>\n      }\n    />\n  );\n}\n\nfunction MonthPicker(props) {\n  const {\n    class: className,\n    disabled,\n    value,\n    min,\n    max,\n    onInput = () => {},\n  } = props;\n  const [_year, _month] = value?.split('-') || [];\n  const monthFieldRef = useRef();\n  const yearFieldRef = useRef();\n\n  const checkValidity = (month, year) => {\n    const [minYear, minMonth] = min?.split('-') || [];\n    const [maxYear, maxMonth] = max?.split('-') || [];\n    if (year < minYear) return false;\n    if (year > maxYear) return false;\n    if (year === minYear && month < minMonth) return false;\n    if (year === maxYear && month > maxMonth) return false;\n    return true;\n  };\n\n  return (\n    <div class={className}>\n      <Icon icon=\"month\" size=\"l\" />\n      <select\n        ref={monthFieldRef}\n        disabled={disabled}\n        value={_month || ''}\n        onInput={(e) => {\n          const { value: month } = e.currentTarget;\n          const year = yearFieldRef.current.value;\n          if (!checkValidity(month, year))\n            return {\n              value: '',\n              validity: {\n                valid: false,\n              },\n            };\n          onInput({\n            value: month ? `${year}-${month}` : '',\n            validity: {\n              valid: true,\n            },\n          });\n        }}\n      >\n        <option value=\"\">Month</option>\n        <option disabled>-----</option>\n        {Array.from({ length: 12 }, (_, i) => (\n          <option\n            value={\n              // Month is 1-indexed\n              (i + 1).toString().padStart(2, '0')\n            }\n            key={i}\n          >\n            {new Date(0, i).toLocaleString('default', {\n              month: 'long',\n            })}\n          </option>\n        ))}\n      </select>{' '}\n      <input\n        ref={yearFieldRef}\n        type=\"number\"\n        disabled={disabled}\n        value={_year || new Date().getFullYear()}\n        min={min?.slice(0, 4) || MIN_YEAR}\n        max={max?.slice(0, 4) || new Date().getFullYear()}\n        onInput={(e) => {\n          const { value: year, validity } = e.currentTarget;\n          const month = monthFieldRef.current.value;\n          if (!validity.valid || !checkValidity(month, year))\n            return {\n              value: '',\n              validity: {\n                valid: false,\n              },\n            };\n          onInput({\n            value: year ? `${year}-${month}` : '',\n            validity: {\n              valid: true,\n            },\n          });\n        }}\n        style={{\n          width: '4.5em',\n        }}\n      />\n    </div>\n  );\n}\n\nexport default AccountStatuses;\n","import { useRef } from 'preact/hooks';\n\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Bookmarks() {\n  useTitle('Bookmarks', '/b');\n  const { masto, instance } = api();\n  const bookmarksIterator = useRef();\n  async function fetchBookmarks(firstLoad) {\n    if (firstLoad || !bookmarksIterator.current) {\n      bookmarksIterator.current = masto.v1.bookmarks.list({ limit: LIMIT });\n    }\n    return await bookmarksIterator.current.next();\n  }\n\n  return (\n    <Timeline\n      title=\"Bookmarks\"\n      id=\"bookmarks\"\n      emptyText=\"No bookmarks yet. Go bookmark something!\"\n      errorText=\"Unable to load bookmarks\"\n      instance={instance}\n      fetchItems={fetchBookmarks}\n    />\n  );\n}\n\nexport default Bookmarks;\n","import { useRef } from 'preact/hooks';\n\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Favourites() {\n  useTitle('Likes', '/f');\n  const { masto, instance } = api();\n  const favouritesIterator = useRef();\n  async function fetchFavourites(firstLoad) {\n    if (firstLoad || !favouritesIterator.current) {\n      favouritesIterator.current = masto.v1.favourites.list({ limit: LIMIT });\n    }\n    return await favouritesIterator.current.next();\n  }\n\n  return (\n    <Timeline\n      title=\"Likes\"\n      id=\"favourites\"\n      emptyText=\"No likes yet. Go like something!\"\n      errorText=\"Unable to load likes\"\n      instance={instance}\n      fetchItems={fetchFavourites}\n    />\n  );\n}\n\nexport default Favourites;\n","import { useEffect, useState } from 'preact/hooks';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport NavMenu from '../components/nav-menu';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 200;\n\nfunction FollowedHashtags() {\n  const { masto, instance } = api();\n  useTitle(`Followed Hashtags`, `/ft`);\n  const [uiState, setUIState] = useState('default');\n\n  const [followedHashtags, setFollowedHashtags] = useState([]);\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const iterator = masto.v1.followedTags.list({\n          limit: LIMIT,\n        });\n        const tags = [];\n        do {\n          const { value, done } = await iterator.next();\n          if (done || value?.length === 0) break;\n          tags.push(...value);\n        } while (true);\n        tags.sort((a, b) => a.name.localeCompare(b.name));\n        console.log(tags);\n        setFollowedHashtags(tags);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, []);\n\n  return (\n    <div id=\"followed-hashtags-page\" class=\"deck-container\" tabIndex=\"-1\">\n      <div class=\"timeline-deck deck\">\n        <header>\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n              <Link to=\"/\" class=\"button plain\">\n                <Icon icon=\"home\" size=\"l\" />\n              </Link>\n            </div>\n            <h1>Followed Hashtags</h1>\n            <div class=\"header-side\" />\n          </div>\n        </header>\n        <main>\n          {followedHashtags.length > 0 ? (\n            <ul class=\"link-list\">\n              {followedHashtags.map((tag) => (\n                <li>\n                  <Link\n                    to={\n                      instance ? `/${instance}/t/${tag.name}` : `/t/${tag.name}`\n                    }\n                  >\n                    <Icon icon=\"hashtag\" /> <span>{tag.name}</span>\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          ) : uiState === 'loading' ? (\n            <p class=\"ui-state\">\n              <Loader abrupt />\n            </p>\n          ) : uiState === 'error' ? (\n            <p class=\"ui-state\">Unable to load followed hashtags.</p>\n          ) : (\n            <p class=\"ui-state\">No hashtags followed yet.</p>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default FollowedHashtags;\n","import { useEffect, useRef } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { filteredItems } from '../utils/filters';\nimport states from '../utils/states';\nimport { getStatus, saveStatus } from '../utils/states';\nimport { dedupeBoosts } from '../utils/timeline-utils';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Following({ title, path, id, ...props }) {\n  useTitle(title || 'Following', path || '/following');\n  const { masto, streaming, instance } = api();\n  const snapStates = useSnapshot(states);\n  const homeIterator = useRef();\n  const latestItem = useRef();\n\n  console.debug('RENDER Following', title, id);\n\n  async function fetchHome(firstLoad) {\n    if (firstLoad || !homeIterator.current) {\n      homeIterator.current = masto.v1.timelines.home.list({ limit: LIMIT });\n    }\n    const results = await homeIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n        console.log('First load', latestItem.current);\n      }\n\n      // value = filteredItems(value, 'home');\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n      value = dedupeBoosts(value, instance);\n\n      // ENFORCE sort by datetime (Latest first)\n      value.sort((a, b) => {\n        const aDate = new Date(a.createdAt);\n        const bDate = new Date(b.createdAt);\n        return bDate - aDate;\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines.home\n        .list({\n          limit: 5,\n          since_id: latestItem.current,\n        })\n        .next();\n      let { value } = results;\n      console.log('checkForUpdates', latestItem.current, value);\n      if (value?.length) {\n        latestItem.current = value[0].id;\n        value = dedupeBoosts(value, instance);\n        value = filteredItems(value, 'home');\n        if (value.some((item) => !item.reblog)) {\n          return true;\n        }\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  useEffect(() => {\n    let sub;\n    (async () => {\n      if (streaming) {\n        sub = streaming.user.subscribe();\n        console.log('🎏 Streaming user', sub);\n        for await (const entry of sub) {\n          if (!sub) break;\n          if (entry.event === 'status.update') {\n            const status = entry.payload;\n            console.log(`🔄 Status ${status.id} updated`);\n            saveStatus(status, instance);\n          } else if (entry.event === 'delete') {\n            const statusID = entry.payload;\n            console.log(`❌ Status ${statusID} deleted`);\n            // delete states.statuses[statusID];\n            const s = getStatus(statusID, instance);\n            if (s) s._deleted = true;\n          }\n        }\n      }\n    })();\n    return () => {\n      sub?.unsubscribe?.();\n      sub = null;\n    };\n  }, [streaming]);\n\n  return (\n    <Timeline\n      title={title || 'Following'}\n      id={id || 'following'}\n      emptyText=\"Nothing to see here.\"\n      errorText=\"Unable to load posts.\"\n      instance={instance}\n      fetchItems={fetchHome}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      {...props}\n      // allowFilters\n      filterContext=\"home\"\n    />\n  );\n}\n\nexport default Following;\n","import {\n  FocusableItem,\n  MenuDivider,\n  MenuGroup,\n  MenuHeader,\n  MenuItem,\n} from '@szhsin/react-menu';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useNavigate, useParams, useSearchParams } from 'react-router-dom';\n\nimport Icon from '../components/icon';\nimport Menu2 from '../components/menu2';\nimport MenuConfirm from '../components/menu-confirm';\nimport { SHORTCUTS_LIMIT } from '../components/shortcuts-settings';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { filteredItems } from '../utils/filters';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\n// Limit is 4 per \"mode\"\n// https://github.com/mastodon/mastodon/issues/15194\n// Hard-coded https://github.com/mastodon/mastodon/blob/19614ba2477f3d12468f5ec251ce1cc5f8c6210c/app/models/tag_feed.rb#L4\nconst TAGS_LIMIT_PER_MODE = 4;\nconst TOTAL_TAGS_LIMIT = TAGS_LIMIT_PER_MODE + 1;\n\nfunction Hashtags({ media: mediaView, columnMode, ...props }) {\n  // const navigate = useNavigate();\n  let { hashtag, ...params } = columnMode ? {} : useParams();\n  if (props.hashtag) hashtag = props.hashtag;\n  let hashtags = hashtag.trim().split(/[\\s+]+/);\n  hashtags.sort();\n  hashtag = hashtags[0];\n  const [searchParams, setSearchParams] = useSearchParams();\n  const media = mediaView || !!searchParams.get('media');\n  const linkParams = media ? '?media=1' : '';\n\n  const { masto, instance, authenticated } = api({\n    instance: props?.instance || params.instance,\n  });\n  const {\n    masto: currentMasto,\n    instance: currentInstance,\n    authenticated: currentAuthenticated,\n  } = api();\n  const hashtagTitle = hashtags.map((t) => `#${t}`).join(' ');\n  const hashtagPostTitle = media ? ` (Media only)` : '';\n  const title = instance\n    ? `${hashtagTitle}${hashtagPostTitle} on ${instance}`\n    : `${hashtagTitle}${hashtagPostTitle}`;\n  useTitle(title, `/:instance?/t/:hashtag`);\n  const latestItem = useRef();\n\n  // const hashtagsIterator = useRef();\n  const maxID = useRef(undefined);\n  async function fetchHashtags(firstLoad) {\n    // if (firstLoad || !hashtagsIterator.current) {\n    //   hashtagsIterator.current = masto.v1.timelines.tag.$select(hashtag).list({\n    //     limit: LIMIT,\n    //     any: hashtags.slice(1),\n    //   });\n    // }\n    // const results = await hashtagsIterator.current.next();\n\n    // NOTE: Temporary fix for listHashtag not persisting `any` in subsequent calls.\n    const results = await masto.v1.timelines.tag\n      .$select(hashtag)\n      .list({\n        limit: LIMIT,\n        any: hashtags.slice(1),\n        maxId: firstLoad ? undefined : maxID.current,\n        onlyMedia: media,\n      })\n      .next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      // value = filteredItems(value, 'public');\n      value.forEach((item) => {\n        saveStatus(item, instance, {\n          skipThreading: media, // If media view, no need to form threads\n        });\n      });\n\n      maxID.current = value[value.length - 1].id;\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines.tag\n        .$select(hashtag)\n        .list({\n          limit: 1,\n          any: hashtags.slice(1),\n          since_id: latestItem.current,\n          onlyMedia: media,\n        })\n        .next();\n      let { value } = results;\n      value = filteredItems(value, 'public');\n      if (value?.length) {\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  const [followUIState, setFollowUIState] = useState('default');\n  const [info, setInfo] = useState();\n  // Get hashtag info\n  useEffect(() => {\n    (async () => {\n      try {\n        const info = await masto.v1.tags.$select(hashtag).fetch();\n        console.log(info);\n        setInfo(info);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [hashtag]);\n\n  const reachLimit = hashtags.length >= TOTAL_TAGS_LIMIT;\n\n  return (\n    <Timeline\n      key={instance + hashtagTitle}\n      title={title}\n      titleComponent={\n        !!instance && (\n          <h1 class=\"header-double-lines\">\n            <b>{hashtagTitle}</b>\n            <div>{instance}</div>\n          </h1>\n        )\n      }\n      id=\"hashtag\"\n      instance={instance}\n      emptyText=\"No one has posted anything with this tag yet.\"\n      errorText=\"Unable to load posts with this tag\"\n      fetchItems={fetchHashtags}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      view={media ? 'media' : undefined}\n      refresh={media}\n      // allowFilters\n      filterContext=\"public\"\n      headerEnd={\n        <Menu2\n          portal\n          setDownOverflow\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          {!!info && hashtags.length === 1 && (\n            <>\n              <MenuConfirm\n                subMenu\n                confirm={info.following}\n                confirmLabel={`Unfollow #${hashtag}?`}\n                disabled={followUIState === 'loading' || !authenticated}\n                onClick={() => {\n                  setFollowUIState('loading');\n                  if (info.following) {\n                    // const yes = confirm(`Unfollow #${hashtag}?`);\n                    // if (!yes) {\n                    //   setFollowUIState('default');\n                    //   return;\n                    // }\n                    masto.v1.tags\n                      .$select(hashtag)\n                      .unfollow()\n                      .then(() => {\n                        setInfo({ ...info, following: false });\n                        showToast(`Unfollowed #${hashtag}`);\n                      })\n                      .catch((e) => {\n                        alert(e);\n                        console.error(e);\n                      })\n                      .finally(() => {\n                        setFollowUIState('default');\n                      });\n                  } else {\n                    masto.v1.tags\n                      .$select(hashtag)\n                      .follow()\n                      .then(() => {\n                        setInfo({ ...info, following: true });\n                        showToast(`Followed #${hashtag}`);\n                      })\n                      .catch((e) => {\n                        alert(e);\n                        console.error(e);\n                      })\n                      .finally(() => {\n                        setFollowUIState('default');\n                      });\n                  }\n                }}\n              >\n                {info.following ? (\n                  <>\n                    <Icon icon=\"check-circle\" /> <span>Following…</span>\n                  </>\n                ) : (\n                  <>\n                    <Icon icon=\"plus\" /> <span>Follow</span>\n                  </>\n                )}\n              </MenuConfirm>\n              <MenuDivider />\n            </>\n          )}\n          <MenuHeader className=\"plain\">Filters</MenuHeader>\n          <MenuItem\n            type=\"checkbox\"\n            checked={!!media}\n            onClick={() => {\n              if (media) {\n                searchParams.delete('media');\n              } else {\n                searchParams.set('media', '1');\n              }\n              setSearchParams(searchParams);\n            }}\n          >\n            <Icon icon=\"check-circle\" />{' '}\n            <span class=\"menu-grow\">Media only</span>\n          </MenuItem>\n          <MenuDivider />\n          <FocusableItem className=\"menu-field\" disabled={reachLimit}>\n            {({ ref }) => (\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  const newHashtag = e.target[0].value?.trim?.();\n                  // Use includes but need to be case insensitive\n                  if (\n                    newHashtag &&\n                    !hashtags.some(\n                      (t) => t.toLowerCase() === newHashtag.toLowerCase(),\n                    )\n                  ) {\n                    hashtags.push(newHashtag);\n                    hashtags.sort();\n                    // navigate(\n                    //   instance\n                    //     ? `/${instance}/t/${hashtags.join('+')}`\n                    //     : `/t/${hashtags.join('+')}`,\n                    // );\n                    location.hash = instance\n                      ? `/${instance}/t/${hashtags.join('+')}`\n                      : `/t/${hashtags.join('+')}${linkParams}`;\n                  }\n                }}\n              >\n                <Icon icon=\"hashtag\" />\n                <input\n                  ref={ref}\n                  type=\"text\"\n                  placeholder={\n                    reachLimit ? `Max ${TOTAL_TAGS_LIMIT} tags` : 'Add hashtag'\n                  }\n                  required\n                  autocorrect=\"off\"\n                  autocapitalize=\"off\"\n                  spellcheck={false}\n                  // no spaces, no hashtags\n                  pattern=\"[^#][^\\s#]+[^#]\"\n                  disabled={reachLimit}\n                />\n              </form>\n            )}\n          </FocusableItem>\n          <MenuGroup takeOverflow>\n            {hashtags.map((t, i) => (\n              <MenuItem\n                key={t}\n                disabled={hashtags.length === 1}\n                onClick={(e) => {\n                  hashtags.splice(i, 1);\n                  hashtags.sort();\n                  // navigate(\n                  //   instance\n                  //     ? `/${instance}/t/${hashtags.join('+')}`\n                  //     : `/t/${hashtags.join('+')}`,\n                  // );\n                  location.hash = instance\n                    ? `/${instance}/t/${hashtags.join('+')}${linkParams}`\n                    : `/t/${hashtags.join('+')}${linkParams}`;\n                }}\n              >\n                <Icon icon=\"x\" alt=\"Remove hashtag\" class=\"danger-icon\" />\n                <span>\n                  <span class=\"more-insignificant\">#</span>\n                  {t}\n                </span>\n              </MenuItem>\n            ))}\n          </MenuGroup>\n          <MenuDivider />\n          <MenuItem\n            disabled={!currentAuthenticated}\n            onClick={() => {\n              if (states.shortcuts.length >= SHORTCUTS_LIMIT) {\n                alert(\n                  `Max ${SHORTCUTS_LIMIT} shortcuts reached. Unable to add shortcut.`,\n                );\n                return;\n              }\n              const shortcut = {\n                type: 'hashtag',\n                hashtag: hashtags.join(' '),\n                instance,\n                media: media ? 'on' : undefined,\n              };\n              // Check if already exists\n              const exists = states.shortcuts.some(\n                (s) =>\n                  s.type === shortcut.type &&\n                  s.hashtag\n                    .split(/[\\s+]+/)\n                    .sort()\n                    .join(' ') ===\n                    shortcut.hashtag\n                      .split(/[\\s+]+/)\n                      .sort()\n                      .join(' ') &&\n                  (s.instance ? s.instance === shortcut.instance : true) &&\n                  (s.media ? !!s.media === !!shortcut.media : true),\n              );\n              if (exists) {\n                alert('This shortcut already exists');\n              } else {\n                states.shortcuts.push(shortcut);\n                showToast(`Hashtag shortcut added`);\n              }\n            }}\n          >\n            <Icon icon=\"shortcut\" /> <span>Add to Shorcuts</span>\n          </MenuItem>\n          <MenuItem\n            onClick={() => {\n              let newInstance = prompt(\n                'Enter a new instance e.g. \"mastodon.social\"',\n              );\n              if (!/\\./.test(newInstance)) {\n                if (newInstance) alert('Invalid instance');\n                return;\n              }\n              if (newInstance) {\n                newInstance = newInstance.toLowerCase().trim();\n                // navigate(`/${newInstance}/t/${hashtags.join('+')}`);\n                location.hash = `/${newInstance}/t/${hashtags.join(\n                  '+',\n                )}${linkParams}`;\n              }\n            }}\n          >\n            <Icon icon=\"bus\" /> <span>Go to another instance…</span>\n          </MenuItem>\n          {currentInstance !== instance && (\n            <MenuItem\n              onClick={() => {\n                location.hash = `/${currentInstance}/t/${hashtags.join(\n                  '+',\n                )}${linkParams}`;\n              }}\n            >\n              <Icon icon=\"bus\" />{' '}\n              <small class=\"menu-double-lines\">\n                Go to my instance (<b>{currentInstance}</b>)\n              </small>\n            </MenuItem>\n          )}\n        </Menu2>\n      }\n    />\n  );\n}\n\nexport default Hashtags;\n","import './lists.css';\n\nimport { Menu, MenuItem } from '@szhsin/react-menu';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { InView } from 'react-intersection-observer';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport AccountBlock from '../components/account-block';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport ListAddEdit from '../components/list-add-edit';\nimport Menu2 from '../components/menu2';\nimport MenuConfirm from '../components/menu-confirm';\nimport Modal from '../components/modal';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { filteredItems } from '../utils/filters';\nimport states, { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction List(props) {\n  const snapStates = useSnapshot(states);\n  const { masto, instance } = api();\n  const id = props?.id || useParams()?.id;\n  // const navigate = useNavigate();\n  const latestItem = useRef();\n  // const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n\n  const listIterator = useRef();\n  async function fetchList(firstLoad) {\n    if (firstLoad || !listIterator.current) {\n      listIterator.current = masto.v1.timelines.list.$select(id).list({\n        limit: LIMIT,\n      });\n    }\n    const results = await listIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      // value = filteredItems(value, 'home');\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines.list.$select(id).list({\n        limit: 1,\n        since_id: latestItem.current,\n      });\n      let { value } = results;\n      value = filteredItems(value, 'home');\n      if (value?.length) {\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  const [list, setList] = useState({ title: 'List' });\n  // const [title, setTitle] = useState(`List`);\n  useTitle(list.title, `/l/:id`);\n  useEffect(() => {\n    (async () => {\n      try {\n        const list = await masto.v1.lists.$select(id).fetch();\n        setList(list);\n        // setTitle(list.title);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [id]);\n\n  const [showListAddEditModal, setShowListAddEditModal] = useState(false);\n  const [showManageMembersModal, setShowManageMembersModal] = useState(false);\n\n  return (\n    <>\n      <Timeline\n        key={id}\n        title={list.title}\n        id=\"list\"\n        emptyText=\"Nothing yet.\"\n        errorText=\"Unable to load posts.\"\n        instance={instance}\n        fetchItems={fetchList}\n        checkForUpdates={checkForUpdates}\n        useItemID\n        boostsCarousel={snapStates.settings.boostsCarousel}\n        // allowFilters\n        filterContext=\"home\"\n        // refresh={reloadCount}\n        headerStart={\n          <Link to=\"/l\" class=\"button plain\">\n            <Icon icon=\"list\" size=\"l\" />\n          </Link>\n        }\n        headerEnd={\n          <Menu2\n            portal\n            setDownOverflow\n            overflow=\"auto\"\n            viewScroll=\"close\"\n            position=\"anchor\"\n            menuButton={\n              <button type=\"button\" class=\"plain\">\n                <Icon icon=\"more\" size=\"l\" />\n              </button>\n            }\n          >\n            <MenuItem\n              onClick={() =>\n                setShowListAddEditModal({\n                  list,\n                })\n              }\n            >\n              <Icon icon=\"pencil\" size=\"l\" />\n              <span>Edit</span>\n            </MenuItem>\n            <MenuItem onClick={() => setShowManageMembersModal(true)}>\n              <Icon icon=\"group\" size=\"l\" />\n              <span>Manage members</span>\n            </MenuItem>\n          </Menu2>\n        }\n      />\n      {showListAddEditModal && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowListAddEditModal(false);\n            }\n          }}\n        >\n          <ListAddEdit\n            list={showListAddEditModal?.list}\n            onClose={(result) => {\n              if (result.state === 'success' && result.list) {\n                setList(result.list);\n                // reload();\n              } else if (result.state === 'deleted') {\n                // navigate('/l');\n                location.hash = '/l';\n              }\n              setShowListAddEditModal(false);\n            }}\n          />\n        </Modal>\n      )}\n      {showManageMembersModal && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowManageMembersModal(false);\n            }\n          }}\n        >\n          <ListManageMembers\n            listID={id}\n            onClose={() => setShowManageMembersModal(false)}\n          />\n        </Modal>\n      )}\n    </>\n  );\n}\n\nconst MEMBERS_LIMIT = 40;\nfunction ListManageMembers({ listID, onClose }) {\n  // Show list of members with [Remove] button\n  // API only returns 40 members at a time, so this need to be paginated with infinite scroll\n  // Show [Add] button after removing a member\n  const { masto, instance } = api();\n  const [members, setMembers] = useState([]);\n  const [uiState, setUIState] = useState('default');\n  const [showMore, setShowMore] = useState(false);\n\n  const membersIterator = useRef();\n\n  async function fetchMembers(firstLoad) {\n    setShowMore(false);\n    setUIState('loading');\n    (async () => {\n      try {\n        if (firstLoad || !membersIterator.current) {\n          membersIterator.current = masto.v1.lists\n            .$select(listID)\n            .accounts.list({\n              limit: MEMBERS_LIMIT,\n            });\n        }\n        const results = await membersIterator.current.next();\n        let { done, value } = results;\n        if (value?.length) {\n          if (firstLoad) {\n            setMembers(value);\n          } else {\n            setMembers(members.concat(value));\n          }\n          setShowMore(!done);\n        } else {\n          setShowMore(false);\n        }\n        setUIState('default');\n      } catch (e) {\n        setUIState('error');\n      }\n    })();\n  }\n\n  useEffect(() => {\n    fetchMembers(true);\n  }, []);\n\n  return (\n    <div class=\"sheet\" id=\"list-manage-members-container\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Manage members</h2>\n      </header>\n      <main>\n        <ul>\n          {members.map((member) => (\n            <li key={member.id}>\n              <AccountBlock account={member} instance={instance} />\n              <RemoveAddButton account={member} listID={listID} />\n            </li>\n          ))}\n          {showMore && uiState === 'default' && (\n            <InView as=\"li\" onChange={(inView) => inView && fetchMembers()}>\n              <button type=\"button\" class=\"light block\" onClick={fetchMembers}>\n                Show more&hellip;\n              </button>\n            </InView>\n          )}\n        </ul>\n      </main>\n    </div>\n  );\n}\n\nfunction RemoveAddButton({ account, listID }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [removed, setRemoved] = useState(false);\n\n  return (\n    <MenuConfirm\n      confirm={!removed}\n      confirmLabel={<span>Remove @{account.username} from list?</span>}\n      align=\"end\"\n      menuItemClassName=\"danger\"\n      onClick={() => {\n        if (removed) {\n          setUIState('loading');\n          (async () => {\n            try {\n              await masto.v1.lists.$select(listID).accounts.create({\n                accountIds: [account.id],\n              });\n              setUIState('default');\n              setRemoved(false);\n            } catch (e) {\n              setUIState('error');\n            }\n          })();\n        } else {\n          // const yes = confirm(`Remove ${account.username} from this list?`);\n          // if (!yes) return;\n          setUIState('loading');\n\n          (async () => {\n            try {\n              await masto.v1.lists.$select(listID).accounts.remove({\n                accountIds: [account.id],\n              });\n              setUIState('default');\n              setRemoved(true);\n            } catch (e) {\n              setUIState('error');\n            }\n          })();\n        }\n      }}\n    >\n      <button\n        type=\"button\"\n        class={`light ${removed ? '' : 'danger'}`}\n        disabled={uiState === 'loading'}\n      >\n        {removed ? 'Add' : 'Remove…'}\n      </button>\n    </MenuConfirm>\n  );\n}\n\nexport default List;\n","import { useMemo, useRef, useState } from 'preact/hooks';\nimport { useSearchParams } from 'react-router-dom';\n\nimport Link from '../components/link';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\nconst emptySearchParams = new URLSearchParams();\n\nfunction Mentions({ columnMode, ...props }) {\n  const { masto, instance } = api();\n  const [searchParams] = columnMode ? [emptySearchParams] : useSearchParams();\n  const [stateType, setStateType] = useState(null);\n  const type = props?.type || searchParams.get('type') || stateType;\n  useTitle(`Mentions${type === 'private' ? ' (Private)' : ''}`, '/mentions');\n\n  const mentionsIterator = useRef();\n  const latestItem = useRef();\n\n  async function fetchMentions(firstLoad) {\n    if (firstLoad || !mentionsIterator.current) {\n      mentionsIterator.current = masto.v1.notifications.list({\n        limit: LIMIT,\n        types: ['mention'],\n      });\n    }\n    const results = await mentionsIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n        console.log('First load', latestItem.current);\n      }\n\n      value.forEach(({ status: item }) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value: value?.map((item) => item.status),\n    };\n  }\n\n  const conversationsIterator = useRef();\n  const latestConversationItem = useRef();\n  async function fetchConversations(firstLoad) {\n    if (firstLoad || !conversationsIterator.current) {\n      conversationsIterator.current = masto.v1.conversations.list({\n        limit: LIMIT,\n      });\n    }\n    const results = await conversationsIterator.current.next();\n    let { value } = results;\n    value = value?.filter((item) => item.lastStatus);\n    if (value?.length) {\n      if (firstLoad) {\n        latestConversationItem.current = value[0].lastStatus.id;\n        console.log('First load', latestConversationItem.current);\n      }\n\n      value.forEach(({ lastStatus: item }) => {\n        saveStatus(item, instance);\n      });\n    }\n    console.log('results', results);\n    return {\n      ...results,\n      value: value?.map((item) => item.lastStatus),\n    };\n  }\n\n  function fetchItems(...args) {\n    if (type === 'private') {\n      return fetchConversations(...args);\n    }\n    return fetchMentions(...args);\n  }\n\n  async function checkForUpdates() {\n    if (type === 'private') {\n      try {\n        const results = await masto.v1.conversations\n          .list({\n            limit: 1,\n            since_id: latestConversationItem.current,\n          })\n          .next();\n        let { value } = results;\n        console.log(\n          'checkForUpdates PRIVATE',\n          latestConversationItem.current,\n          value,\n        );\n        if (value?.length) {\n          latestConversationItem.current = value[0].lastStatus.id;\n          return true;\n        }\n        return false;\n      } catch (e) {\n        return false;\n      }\n    } else {\n      try {\n        const results = await masto.v1.notifications\n          .list({\n            limit: 1,\n            types: ['mention'],\n            since_id: latestItem.current,\n          })\n          .next();\n        let { value } = results;\n        console.log('checkForUpdates ALL', latestItem.current, value);\n        if (value?.length) {\n          latestItem.current = value[0].id;\n          return true;\n        }\n        return false;\n      } catch (e) {\n        return false;\n      }\n    }\n  }\n\n  const TimelineStart = useMemo(() => {\n    return (\n      <div class=\"filter-bar centered\">\n        <Link\n          to=\"/mentions\"\n          class={!type ? 'is-active' : ''}\n          onClick={(e) => {\n            if (columnMode) {\n              e.preventDefault();\n              setStateType(null);\n            }\n          }}\n        >\n          All\n        </Link>\n        <Link\n          to=\"/mentions?type=private\"\n          class={type === 'private' ? 'is-active' : ''}\n          onClick={(e) => {\n            if (columnMode) {\n              e.preventDefault();\n              setStateType('private');\n            }\n          }}\n        >\n          Private\n        </Link>\n      </div>\n    );\n  }, [type]);\n\n  return (\n    <Timeline\n      title=\"Mentions\"\n      id=\"mentions\"\n      emptyText=\"No one mentioned you :(\"\n      errorText=\"Unable to load mentions.\"\n      instance={instance}\n      fetchItems={fetchItems}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      timelineStart={TimelineStart}\n      refresh={type}\n    />\n  );\n}\n\nexport default Mentions;\n","// This is like very lame \"type-checking\" lol\nconst notificationTypeKeys = {\n  mention: ['account', 'status'],\n  status: ['account', 'status'],\n  reblog: ['account', 'status'],\n  follow: ['account'],\n  follow_request: ['account'],\n  favourite: ['account', 'status'],\n  poll: ['status'],\n  update: ['status'],\n};\nfunction fixNotifications(notifications) {\n  return notifications.filter((notification) => {\n    const { type, id, createdAt } = notification;\n    if (!type) {\n      console.warn('Notification missing type', notification);\n      return false;\n    }\n    if (!id || !createdAt) {\n      console.warn('Notification missing id or createdAt', notification);\n      // Continue processing this despite missing id or createdAt\n    }\n    const keys = notificationTypeKeys[type];\n    if (keys?.length) {\n      return keys.every((key) => !!notification[key]);\n    }\n    return true; // skip other types\n  });\n}\n\nfunction groupNotifications(notifications) {\n  // Filter out invalid notifications\n  notifications = fixNotifications(notifications);\n\n  // Create new flat list of notifications\n  // Combine sibling notifications based on type and status id\n  // Concat all notification.account into an array of _accounts\n  const notificationsMap = {};\n  const cleanNotifications = [];\n  for (let i = 0, j = 0; i < notifications.length; i++) {\n    const notification = notifications[i];\n    const { id, status, account, type, createdAt } = notification;\n    const date = createdAt ? new Date(createdAt).toLocaleDateString() : '';\n    let virtualType = type;\n    if (type === 'favourite' || type === 'reblog') {\n      virtualType = 'favourite+reblog';\n    }\n    const key = `${status?.id}-${virtualType}-${date}`;\n    const mappedNotification = notificationsMap[key];\n    if (virtualType === 'follow_request') {\n      cleanNotifications[j++] = notification;\n    } else if (mappedNotification?.account) {\n      const mappedAccount = mappedNotification._accounts.find(\n        (a) => a.id === account.id,\n      );\n      if (mappedAccount) {\n        mappedAccount._types.push(type);\n        mappedAccount._types.sort().reverse();\n        mappedNotification.id += `-${id}`;\n      } else {\n        account._types = [type];\n        mappedNotification._accounts.push(account);\n        mappedNotification.id += `-${id}`;\n      }\n    } else {\n      account._types = [type];\n      let n = (notificationsMap[key] = {\n        ...notification,\n        type: virtualType,\n        _accounts: [account],\n      });\n      cleanNotifications[j++] = n;\n    }\n  }\n\n  // 2nd pass to group \"favourite+reblog\"-type notifications by account if _accounts.length <= 1\n  // This means one acount has favourited and reblogged the multiple statuses\n  // The grouped notification\n  // - type: \"favourite+reblog+account\"\n  // - _statuses: [status, status, ...]\n  const notificationsMap2 = {};\n  const cleanNotifications2 = [];\n  for (let i = 0, j = 0; i < cleanNotifications.length; i++) {\n    const notification = cleanNotifications[i];\n    const { id, account, _accounts, type, createdAt } = notification;\n    const date = createdAt ? new Date(createdAt).toLocaleDateString() : '';\n    if (type === 'favourite+reblog' && account && _accounts.length === 1) {\n      const key = `${account?.id}-${type}-${date}`;\n      const mappedNotification = notificationsMap2[key];\n      if (mappedNotification) {\n        mappedNotification._statuses.push(notification.status);\n        mappedNotification.id += `-${id}`;\n      } else {\n        let n = (notificationsMap2[key] = {\n          ...notification,\n          type,\n          _statuses: [notification.status],\n        });\n        cleanNotifications2[j++] = n;\n      }\n    } else {\n      cleanNotifications2[j++] = notification;\n    }\n  }\n\n  console.log({ notifications, cleanNotifications, cleanNotifications2 });\n\n  // return cleanNotifications;\n  return cleanNotifications2;\n}\n\nexport default groupNotifications;\n","import './notifications.css';\n\nimport { Fragment } from 'preact';\nimport { memo } from 'preact/compat';\nimport { useCallback, useEffect, useRef, useState } from 'preact/hooks';\nimport { InView } from 'react-intersection-observer';\nimport { useSearchParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\nimport { subscribeKey } from 'valtio/utils';\n\nimport AccountBlock from '../components/account-block';\nimport FollowRequestButtons from '../components/follow-request-buttons';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport NavMenu from '../components/nav-menu';\nimport Notification from '../components/notification';\nimport { api } from '../utils/api';\nimport enhanceContent from '../utils/enhance-content';\nimport groupNotifications from '../utils/group-notifications';\nimport handleContentLinks from '../utils/handle-content-links';\nimport niceDateTime from '../utils/nice-date-time';\nimport { getRegistration } from '../utils/push-notifications';\nimport shortenNumber from '../utils/shorten-number';\nimport states, { saveStatus } from '../utils/states';\nimport { getCurrentInstance } from '../utils/store-utils';\nimport usePageVisibility from '../utils/usePageVisibility';\nimport useScroll from '../utils/useScroll';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 30; // 30 is the maximum limit :(\nconst emptySearchParams = new URLSearchParams();\n\nfunction Notifications({ columnMode }) {\n  useTitle('Notifications', '/notifications');\n  const { masto, instance } = api();\n  const snapStates = useSnapshot(states);\n  const [uiState, setUIState] = useState('default');\n  const [searchParams] = columnMode ? [emptySearchParams] : useSearchParams();\n  const notificationID = searchParams.get('id');\n  const notificationAccessToken = searchParams.get('access_token');\n  const [showMore, setShowMore] = useState(false);\n  const [onlyMentions, setOnlyMentions] = useState(false);\n  const scrollableRef = useRef();\n  const { nearReachEnd, scrollDirection, reachStart, nearReachStart } =\n    useScroll({\n      scrollableRef,\n    });\n  const hiddenUI = scrollDirection === 'end' && !nearReachStart;\n  const [followRequests, setFollowRequests] = useState([]);\n  const [announcements, setAnnouncements] = useState([]);\n\n  console.debug('RENDER Notifications');\n\n  const notificationsIterator = useRef();\n  async function fetchNotifications(firstLoad) {\n    if (firstLoad || !notificationsIterator.current) {\n      // Reset iterator\n      notificationsIterator.current = masto.v1.notifications.list({\n        limit: LIMIT,\n        excludeTypes: ['follow_request'],\n      });\n    }\n    const allNotifications = await notificationsIterator.current.next();\n    const notifications = allNotifications.value;\n\n    if (notifications?.length) {\n      notifications.forEach((notification) => {\n        saveStatus(notification.status, instance, {\n          skipThreading: true,\n        });\n      });\n\n      const groupedNotifications = groupNotifications(notifications);\n\n      if (firstLoad) {\n        states.notificationsLast = notifications[0];\n        states.notifications = groupedNotifications;\n\n        // Update last read marker\n        masto.v1.markers\n          .create({\n            notifications: {\n              lastReadId: notifications[0].id,\n            },\n          })\n          .catch(() => {});\n      } else {\n        states.notifications.push(...groupedNotifications);\n      }\n    }\n\n    states.notificationsShowNew = false;\n    states.notificationsLastFetchTime = Date.now();\n    return allNotifications;\n  }\n\n  async function fetchFollowRequests() {\n    // Note: no pagination here yet because this better be on a separate page. Should be rare use-case???\n    try {\n      return await masto.v1.followRequests.list({\n        limit: 80,\n      });\n    } catch (e) {\n      // Silently fail\n      return [];\n    }\n  }\n\n  const loadFollowRequests = () => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const requests = await fetchFollowRequests();\n        setFollowRequests(requests);\n        setUIState('default');\n      } catch (e) {\n        setUIState('error');\n      }\n    })();\n  };\n\n  async function fetchAnnouncements() {\n    try {\n      return await masto.v1.announcements.list();\n    } catch (e) {\n      // Silently fail\n      return [];\n    }\n  }\n\n  const loadNotifications = (firstLoad) => {\n    setShowNew(false);\n    setUIState('loading');\n    (async () => {\n      try {\n        const fetchNotificationsPromise = fetchNotifications(firstLoad);\n\n        if (firstLoad) {\n          fetchAnnouncements()\n            .then((announcements) => {\n              announcements.sort((a, b) => {\n                // Sort by updatedAt first, then createdAt\n                const aDate = new Date(a.updatedAt || a.createdAt);\n                const bDate = new Date(b.updatedAt || b.createdAt);\n                return bDate - aDate;\n              });\n              setAnnouncements(announcements);\n            })\n            .catch(() => {});\n\n          fetchFollowRequests()\n            .then((requests) => {\n              setFollowRequests(requests);\n            })\n            .catch(() => {});\n        }\n\n        const { done } = await fetchNotificationsPromise;\n        setShowMore(!done);\n\n        setUIState('default');\n      } catch (e) {\n        setUIState('error');\n      }\n    })();\n  };\n\n  useEffect(() => {\n    loadNotifications(true);\n  }, []);\n  useEffect(() => {\n    if (reachStart) {\n      loadNotifications(true);\n    }\n  }, [reachStart]);\n\n  // useEffect(() => {\n  //   if (nearReachEnd && showMore) {\n  //     loadNotifications();\n  //   }\n  // }, [nearReachEnd, showMore]);\n\n  const [showNew, setShowNew] = useState(false);\n\n  const loadUpdates = useCallback(\n    ({ disableIdleCheck = false } = {}) => {\n      if (uiState === 'loading') {\n        return;\n      }\n      console.log('✨ Load updates', {\n        autoRefresh: snapStates.settings.autoRefresh,\n        scrollTop: scrollableRef.current?.scrollTop,\n        inBackground: inBackground(),\n        disableIdleCheck,\n      });\n      if (\n        snapStates.settings.autoRefresh &&\n        scrollableRef.current?.scrollTop < 16 &&\n        (disableIdleCheck || window.__IDLE__) &&\n        !inBackground()\n      ) {\n        loadNotifications(true);\n      }\n    },\n    [snapStates.notificationsShowNew, snapStates.settings.autoRefresh, uiState],\n  );\n  // useEffect(loadUpdates, [snapStates.notificationsShowNew]);\n\n  const lastHiddenTime = useRef();\n  usePageVisibility((visible) => {\n    let unsub;\n    if (visible) {\n      const timeDiff = Date.now() - lastHiddenTime.current;\n      if (!lastHiddenTime.current || timeDiff > 1000 * 3) {\n        // 3 seconds\n        loadUpdates({\n          disableIdleCheck: true,\n        });\n      } else {\n        lastHiddenTime.current = Date.now();\n      }\n      unsub = subscribeKey(states, 'notificationsShowNew', (v) => {\n        if (v) {\n          loadUpdates();\n        }\n        setShowNew(v);\n      });\n    }\n    return () => {\n      unsub?.();\n    };\n  });\n\n  const todayDate = new Date();\n  const yesterdayDate = new Date(todayDate - 24 * 60 * 60 * 1000);\n  let currentDay = new Date();\n  const showTodayEmpty = !snapStates.notifications.some(\n    (notification) =>\n      new Date(notification.createdAt).toDateString() ===\n      todayDate.toDateString(),\n  );\n\n  const announcementsListRef = useRef();\n\n  useEffect(() => {\n    if (notificationID) {\n      states.routeNotification = {\n        id: notificationID,\n        accessToken: atob(notificationAccessToken),\n      };\n    }\n  }, [notificationID, notificationAccessToken]);\n\n  // useEffect(() => {\n  //   if (uiState === 'default') {\n  //     (async () => {\n  //       try {\n  //         const registration = await getRegistration();\n  //         if (registration?.getNotifications) {\n  //           const notifications = await registration.getNotifications();\n  //           console.log('🔔 Push notifications', notifications);\n  //           // Close all notifications?\n  //           // notifications.forEach((notification) => {\n  //           //   notification.close();\n  //           // });\n  //         }\n  //       } catch (e) {}\n  //     })();\n  //   }\n  // }, [uiState]);\n\n  return (\n    <div\n      id=\"notifications-page\"\n      class=\"deck-container\"\n      ref={scrollableRef}\n      tabIndex=\"-1\"\n    >\n      <div class={`timeline-deck deck ${onlyMentions ? 'only-mentions' : ''}`}>\n        <header\n          hidden={hiddenUI}\n          onClick={(e) => {\n            if (!e.target.closest('a, button')) {\n              scrollableRef.current?.scrollTo({ top: 0, behavior: 'smooth' });\n            }\n          }}\n          class={uiState === 'loading' ? 'loading' : ''}\n        >\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n              <Link to=\"/\" class=\"button plain\">\n                <Icon icon=\"home\" size=\"l\" alt=\"Home\" />\n              </Link>\n            </div>\n            <h1>Notifications</h1>\n            <div class=\"header-side\">\n              {/* <Loader hidden={uiState !== 'loading'} /> */}\n            </div>\n          </div>\n          {showNew && uiState !== 'loading' && (\n            <button\n              class=\"updates-button shiny-pill\"\n              type=\"button\"\n              onClick={() => {\n                loadNotifications(true);\n                scrollableRef.current?.scrollTo({\n                  top: 0,\n                  behavior: 'smooth',\n                });\n              }}\n            >\n              <Icon icon=\"arrow-up\" /> New notifications\n            </button>\n          )}\n        </header>\n        {announcements.length > 0 && (\n          <div class=\"shazam-container\">\n            <div class=\"shazam-container-inner\">\n              <details class=\"announcements\">\n                <summary>\n                  <span>\n                    <Icon icon=\"announce\" class=\"announcement-icon\" size=\"l\" />{' '}\n                    <b>Announcement{announcements.length > 1 ? 's' : ''}</b>{' '}\n                    <small class=\"insignificant\">{instance}</small>\n                  </span>\n                  {announcements.length > 1 && (\n                    <span class=\"announcements-nav-buttons\">\n                      {announcements.map((announcement, index) => (\n                        <button\n                          type=\"button\"\n                          class=\"plain2 small\"\n                          onClick={() => {\n                            announcementsListRef.current?.children[\n                              index\n                            ].scrollIntoView({\n                              behavior: 'smooth',\n                              block: 'nearest',\n                            });\n                          }}\n                        >\n                          {index + 1}\n                        </button>\n                      ))}\n                    </span>\n                  )}\n                </summary>\n                <ul\n                  class={`announcements-list-${\n                    announcements.length > 1 ? 'multiple' : 'single'\n                  }`}\n                  ref={announcementsListRef}\n                >\n                  {announcements.map((announcement) => (\n                    <li>\n                      <AnnouncementBlock announcement={announcement} />\n                    </li>\n                  ))}\n                </ul>\n              </details>\n            </div>\n          </div>\n        )}\n        {followRequests.length > 0 && (\n          <div class=\"follow-requests\">\n            <h2 class=\"timeline-header\">Follow requests</h2>\n            {followRequests.length > 5 ? (\n              <details>\n                <summary>{followRequests.length} follow requests</summary>\n                <ul>\n                  {followRequests.map((account) => (\n                    <li key={account.id}>\n                      <AccountBlock account={account} />\n                      <FollowRequestButtons\n                        accountID={account.id}\n                        onChange={() => {\n                          // loadFollowRequests();\n                          // loadNotifications(true);\n                        }}\n                      />\n                    </li>\n                  ))}\n                </ul>\n              </details>\n            ) : (\n              <ul>\n                {followRequests.map((account) => (\n                  <li key={account.id}>\n                    <AccountBlock account={account} />\n                    <FollowRequestButtons\n                      accountID={account.id}\n                      onChange={() => {\n                        // loadFollowRequests();\n                        // loadNotifications(true);\n                      }}\n                    />\n                  </li>\n                ))}\n              </ul>\n            )}\n          </div>\n        )}\n        <div id=\"mentions-option\">\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={onlyMentions}\n              onChange={(e) => {\n                setOnlyMentions(e.target.checked);\n              }}\n            />{' '}\n            Only mentions\n          </label>\n        </div>\n        <h2 class=\"timeline-header\">Today</h2>\n        {showTodayEmpty && !!snapStates.notifications.length && (\n          <p class=\"ui-state insignificant\">\n            {uiState === 'default' ? \"You're all caught up.\" : <>&hellip;</>}\n          </p>\n        )}\n        {snapStates.notifications.length ? (\n          <>\n            {snapStates.notifications\n              // This is leaked from Notifications popover\n              .filter((n) => n.type !== 'follow_request')\n              .map((notification) => {\n                if (onlyMentions && notification.type !== 'mention') {\n                  return null;\n                }\n                const notificationDay = new Date(notification.createdAt);\n                const differentDay =\n                  notificationDay.toDateString() !== currentDay.toDateString();\n                if (differentDay) {\n                  currentDay = notificationDay;\n                }\n                // if notificationDay is yesterday, show \"Yesterday\"\n                // if notificationDay is before yesterday, show date\n                const heading =\n                  notificationDay.toDateString() ===\n                  yesterdayDate.toDateString()\n                    ? 'Yesterday'\n                    : niceDateTime(currentDay, {\n                        hideTime: true,\n                      });\n                return (\n                  <Fragment key={notification.id}>\n                    {differentDay && <h2 class=\"timeline-header\">{heading}</h2>}\n                    <Notification\n                      instance={instance}\n                      notification={notification}\n                      key={notification.id}\n                    />\n                  </Fragment>\n                );\n              })}\n          </>\n        ) : (\n          <>\n            {uiState === 'loading' && (\n              <>\n                <ul class=\"timeline flat\">\n                  {Array.from({ length: 5 }).map((_, i) => (\n                    <li class=\"notification skeleton\">\n                      <div class=\"notification-type\">\n                        <Icon icon=\"notification\" size=\"xl\" />\n                      </div>\n                      <div class=\"notification-content\">\n                        <p>███████████ ████</p>\n                      </div>\n                    </li>\n                  ))}\n                </ul>\n              </>\n            )}\n            {uiState === 'error' && (\n              <p class=\"ui-state\">\n                Unable to load notifications\n                <br />\n                <br />\n                <button type=\"button\" onClick={() => loadNotifications(true)}>\n                  Try again\n                </button>\n              </p>\n            )}\n          </>\n        )}\n        {showMore && (\n          <InView\n            onChange={(inView) => {\n              if (inView) {\n                loadNotifications();\n              }\n            }}\n          >\n            <button\n              type=\"button\"\n              class=\"plain block\"\n              disabled={uiState === 'loading'}\n              onClick={() => loadNotifications()}\n              style={{ marginBlockEnd: '6em' }}\n            >\n              {uiState === 'loading' ? (\n                <Loader abrupt />\n              ) : (\n                <>Show more&hellip;</>\n              )}\n            </button>\n          </InView>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction inBackground() {\n  return !!document.querySelector('.deck-backdrop, #modal-container > *');\n}\n\nfunction AnnouncementBlock({ announcement }) {\n  const { instance } = api();\n  const { contact } = getCurrentInstance();\n  const contactAccount = contact?.account;\n  const {\n    id,\n    content,\n    startsAt,\n    endsAt,\n    published,\n    allDay,\n    publishedAt,\n    updatedAt,\n    read,\n    mentions,\n    statuses,\n    tags,\n    emojis,\n    reactions,\n  } = announcement;\n\n  const publishedAtDate = new Date(publishedAt);\n  const publishedDateText = niceDateTime(publishedAtDate);\n  const updatedAtDate = new Date(updatedAt);\n  const updatedAtText = niceDateTime(updatedAtDate);\n\n  return (\n    <div class=\"announcement-block\">\n      <AccountBlock account={contactAccount} />\n      <div\n        class=\"announcement-content\"\n        onClick={handleContentLinks({ mentions, instance })}\n        dangerouslySetInnerHTML={{\n          __html: enhanceContent(content, {\n            emojis,\n          }),\n        }}\n      />\n      <p class=\"insignificant\">\n        <time datetime={publishedAtDate.toISOString()}>\n          {niceDateTime(publishedAtDate)}\n        </time>\n        {updatedAt && updatedAtText !== publishedDateText && (\n          <>\n            {' '}\n            &bull;{' '}\n            <span class=\"ib\">\n              Updated{' '}\n              <time datetime={updatedAtDate.toISOString()}>\n                {niceDateTime(updatedAtDate)}\n              </time>\n            </span>\n          </>\n        )}\n      </p>\n      <div class=\"announcement-reactions\" hidden>\n        {reactions.map((reaction) => {\n          const { name, count, me, staticUrl, url } = reaction;\n          return (\n            <button type=\"button\" class={`plain4 small ${me ? 'reacted' : ''}`}>\n              {url || staticUrl ? (\n                <img src={url || staticUrl} alt={name} width=\"16\" height=\"16\" />\n              ) : (\n                <span>{name}</span>\n              )}{' '}\n              <span class=\"count\">{shortenNumber(count)}</span>\n            </button>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(Notifications);\n","import { Menu, MenuDivider, MenuItem } from '@szhsin/react-menu';\nimport { useRef } from 'preact/hooks';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport Icon from '../components/icon';\nimport Menu2 from '../components/menu2';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { filteredItems } from '../utils/filters';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Public({ local, columnMode, ...props }) {\n  const snapStates = useSnapshot(states);\n  const isLocal = !!local;\n  const params = columnMode ? {} : useParams();\n  const { masto, instance } = api({\n    instance: props?.instance || params.instance,\n  });\n  const { masto: currentMasto, instance: currentInstance } = api();\n  const title = `${isLocal ? 'Local' : 'Federated'} timeline (${instance})`;\n  useTitle(title, isLocal ? `/:instance?/p/l` : `/:instance?/p`);\n  // const navigate = useNavigate();\n  const latestItem = useRef();\n\n  const publicIterator = useRef();\n  async function fetchPublic(firstLoad) {\n    if (firstLoad || !publicIterator.current) {\n      publicIterator.current = masto.v1.timelines.public.list({\n        limit: LIMIT,\n        local: isLocal,\n      });\n    }\n    const results = await publicIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      // value = filteredItems(value, 'public');\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines.public\n        .list({\n          limit: 1,\n          local: isLocal,\n          since_id: latestItem.current,\n        })\n        .next();\n      let { value } = results;\n      value = filteredItems(value, 'public');\n      if (value?.length) {\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  return (\n    <Timeline\n      key={instance + isLocal}\n      title={title}\n      titleComponent={\n        <h1 class=\"header-double-lines\">\n          <b>{isLocal ? 'Local timeline' : 'Federated timeline'}</b>\n          <div>{instance}</div>\n        </h1>\n      }\n      id=\"public\"\n      instance={instance}\n      emptyText=\"No one has posted anything yet.\"\n      errorText=\"Unable to load posts\"\n      fetchItems={fetchPublic}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      headerStart={<></>}\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      // allowFilters\n      filterContext=\"public\"\n      headerEnd={\n        <Menu2\n          portal\n          // setDownOverflow\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          <MenuItem href={isLocal ? `/#/${instance}/p` : `/#/${instance}/p/l`}>\n            {isLocal ? (\n              <>\n                <Icon icon=\"transfer\" /> <span>Switch to Federated</span>\n              </>\n            ) : (\n              <>\n                <Icon icon=\"transfer\" /> <span>Switch to Local</span>\n              </>\n            )}\n          </MenuItem>\n          <MenuDivider />\n          <MenuItem\n            onClick={() => {\n              let newInstance = prompt(\n                'Enter a new instance e.g. \"mastodon.social\"',\n              );\n              if (!/\\./.test(newInstance)) {\n                if (newInstance) alert('Invalid instance');\n                return;\n              }\n              if (newInstance) {\n                newInstance = newInstance.toLowerCase().trim();\n                // navigate(isLocal ? `/${newInstance}/p/l` : `/${newInstance}/p`);\n                location.hash = isLocal\n                  ? `/${newInstance}/p/l`\n                  : `/${newInstance}/p`;\n              }\n            }}\n          >\n            <Icon icon=\"bus\" /> <span>Go to another instance…</span>\n          </MenuItem>\n          {currentInstance !== instance && (\n            <MenuItem\n              onClick={() => {\n                location.hash = isLocal\n                  ? `/${currentInstance}/p/l`\n                  : `/${currentInstance}/p`;\n              }}\n            >\n              <Icon icon=\"bus\" />{' '}\n              <small class=\"menu-double-lines\">\n                Go to my instance (<b>{currentInstance}</b>)\n              </small>\n            </MenuItem>\n          )}\n        </Menu2>\n      }\n    />\n  );\n}\n\nexport default Public;\n","import './trending.css';\n\nimport { MenuItem } from '@szhsin/react-menu';\nimport { getBlurHashAverageColor } from 'fast-blurhash';\nimport { useMemo, useRef, useState } from 'preact/hooks';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Menu2 from '../components/menu2';\nimport RelativeTime from '../components/relative-time';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { oklab2rgb, rgb2oklab } from '../utils/color-utils';\nimport { filteredItems } from '../utils/filters';\nimport pmem from '../utils/pmem';\nimport shortenNumber from '../utils/shorten-number';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nconst fetchLinks = pmem(\n  (masto) => {\n    return masto.v1.trends.links.list().next();\n  },\n  {\n    // News last much longer\n    maxAge: 10 * 60 * 1000, // 10 minutes\n  },\n);\n\nfunction Trending({ columnMode, ...props }) {\n  const snapStates = useSnapshot(states);\n  const params = columnMode ? {} : useParams();\n  const { masto, instance } = api({\n    instance: props?.instance || params.instance,\n  });\n  const { masto: currentMasto, instance: currentInstance } = api();\n  const title = `Trending (${instance})`;\n  useTitle(title, `/:instance?/trending`);\n  // const navigate = useNavigate();\n  const latestItem = useRef();\n\n  const [hashtags, setHashtags] = useState([]);\n  const [links, setLinks] = useState([]);\n  const trendIterator = useRef();\n  async function fetchTrend(firstLoad) {\n    if (firstLoad || !trendIterator.current) {\n      trendIterator.current = masto.v1.trends.statuses.list({\n        limit: LIMIT,\n      });\n\n      // Get hashtags\n      try {\n        const iterator = masto.v1.trends.tags.list();\n        const { value: tags } = await iterator.next();\n        console.log('tags', tags);\n        if (tags?.length) {\n          setHashtags(tags);\n        }\n      } catch (e) {\n        console.error(e);\n      }\n\n      // Get links\n      try {\n        const { value } = await fetchLinks(masto);\n        // 4 types available: link, photo, video, rich\n        // Only want links for now\n        const links = value?.filter?.((link) => link.type === 'link');\n        console.log('links', links);\n        if (links?.length) {\n          setLinks(links);\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    }\n    const results = await trendIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      // value = filteredItems(value, 'public'); // Might not work here\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.trends.statuses\n        .list({\n          limit: 1,\n          // NOT SUPPORTED\n          // since_id: latestItem.current,\n        })\n        .next();\n      let { value } = results;\n      value = filteredItems(value, 'public');\n      if (value?.length && value[0].id !== latestItem.current) {\n        latestItem.current = value[0].id;\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  const TimelineStart = useMemo(() => {\n    return (\n      <>\n        {!!hashtags.length && (\n          <div class=\"filter-bar expandable\">\n            <Icon icon=\"chart\" class=\"insignificant\" size=\"l\" />\n            {hashtags.map((tag, i) => {\n              const { name, history } = tag;\n              const total = history.reduce((acc, cur) => acc + +cur.uses, 0);\n              return (\n                <Link to={`/${instance}/t/${name}`} key={name}>\n                  <span>\n                    <span class=\"more-insignificant\">#</span>\n                    {name}\n                  </span>\n                  <span class=\"filter-count\">{shortenNumber(total)}</span>\n                </Link>\n              );\n            })}\n          </div>\n        )}\n        {!!links.length && (\n          <div class=\"links-bar\">\n            <header>\n              <h3>Trending News</h3>\n            </header>\n            {links.map((link) => {\n              const {\n                authorName,\n                authorUrl,\n                blurhash,\n                description,\n                height,\n                image,\n                imageDescription,\n                language,\n                providerName,\n                providerUrl,\n                publishedAt,\n                title,\n                url,\n                width,\n              } = link;\n              const domain = new URL(url).hostname\n                .replace(/^www\\./, '')\n                .replace(/\\/$/, '');\n              let accentColor;\n              if (blurhash) {\n                const averageColor = getBlurHashAverageColor(blurhash);\n                const labAverageColor = rgb2oklab(averageColor);\n                accentColor = oklab2rgb([\n                  0.6,\n                  labAverageColor[1],\n                  labAverageColor[2],\n                ]);\n              }\n\n              return (\n                <a\n                  key={url}\n                  href={url}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  style={\n                    accentColor\n                      ? {\n                          '--accent-color': `rgb(${accentColor.join(',')})`,\n                          '--accent-alpha-color': `rgba(${accentColor.join(\n                            ',',\n                          )}, 0.4)`,\n                        }\n                      : {}\n                  }\n                >\n                  <article>\n                    <figure>\n                      <img\n                        src={image}\n                        alt={imageDescription}\n                        width={width}\n                        height={height}\n                        loading=\"lazy\"\n                      />\n                    </figure>\n                    <div class=\"article-body\">\n                      <header>\n                        <div class=\"article-meta\">\n                          <span class=\"domain\">{domain}</span>{' '}\n                          {!!publishedAt && <>&middot; </>}\n                          {!!publishedAt && (\n                            <>\n                              <RelativeTime\n                                datetime={publishedAt}\n                                format=\"micro\"\n                              />\n                            </>\n                          )}\n                        </div>\n                        {!!title && (\n                          <h1 class=\"title\" lang={language} dir=\"auto\">\n                            {title}\n                          </h1>\n                        )}\n                      </header>\n                      {!!description && (\n                        <p class=\"description\" lang={language} dir=\"auto\">\n                          {description}\n                        </p>\n                      )}\n                    </div>\n                  </article>\n                </a>\n              );\n            })}\n          </div>\n        )}\n      </>\n    );\n  }, [hashtags, links]);\n\n  return (\n    <Timeline\n      key={instance}\n      title={title}\n      titleComponent={\n        <h1 class=\"header-double-lines\">\n          <b>Trending</b>\n          <div>{instance}</div>\n        </h1>\n      }\n      id=\"trending\"\n      instance={instance}\n      emptyText=\"No trending posts.\"\n      errorText=\"Unable to load posts\"\n      fetchItems={fetchTrend}\n      checkForUpdates={checkForUpdates}\n      checkForUpdatesInterval={5 * 60 * 1000} // 5 minutes\n      useItemID\n      headerStart={<></>}\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      // allowFilters\n      filterContext=\"public\"\n      timelineStart={TimelineStart}\n      headerEnd={\n        <Menu2\n          portal\n          // setDownOverflow\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          <MenuItem\n            onClick={() => {\n              let newInstance = prompt(\n                'Enter a new instance e.g. \"mastodon.social\"',\n              );\n              if (!/\\./.test(newInstance)) {\n                if (newInstance) alert('Invalid instance');\n                return;\n              }\n              if (newInstance) {\n                newInstance = newInstance.toLowerCase().trim();\n                // navigate(`/${newInstance}/trending`);\n                location.hash = `/${newInstance}/trending`;\n              }\n            }}\n          >\n            <Icon icon=\"bus\" /> <span>Go to another instance…</span>\n          </MenuItem>\n          {currentInstance !== instance && (\n            <MenuItem\n              onClick={() => {\n                location.hash = `/${currentInstance}/trending`;\n              }}\n            >\n              <Icon icon=\"bus\" />{' '}\n              <small class=\"menu-double-lines\">\n                Go to my instance (<b>{currentInstance}</b>)\n              </small>\n            </MenuItem>\n          )}\n        </Menu2>\n      }\n    />\n  );\n}\n\nexport default Trending;\n","import { useHotkeys } from 'react-hotkeys-hook';\nimport { useSnapshot } from 'valtio';\n\nimport Bookmarks from '../pages/bookmarks';\nimport Favourites from '../pages/favourites';\nimport Following from '../pages/following';\nimport Hashtag from '../pages/hashtag';\nimport List from '../pages/list';\nimport Mentions from '../pages/mentions';\nimport Notifications from '../pages/notifications';\nimport Public from '../pages/public';\nimport Trending from '../pages/trending';\nimport states from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nfunction Columns() {\n  useTitle('Home', '/');\n  const snapStates = useSnapshot(states);\n  const { shortcuts } = snapStates;\n\n  console.debug('RENDER Columns', shortcuts);\n\n  const components = shortcuts.map((shortcut) => {\n    if (!shortcut) return null;\n    const { type, ...params } = shortcut;\n    const Component = {\n      following: Following,\n      notifications: Notifications,\n      list: List,\n      public: Public,\n      bookmarks: Bookmarks,\n      favourites: Favourites,\n      hashtag: Hashtag,\n      mentions: Mentions,\n      trending: Trending,\n    }[type];\n    if (!Component) return null;\n    return (\n      <Component key={type + JSON.stringify(params)} {...params} columnMode />\n    );\n  });\n\n  useHotkeys(['1', '2', '3', '4', '5', '6', '7', '8', '9'], (e, handler) => {\n    try {\n      const index = parseInt(handler.keys[0], 10) - 1;\n      document.querySelectorAll('#columns > *')[index].focus();\n    } catch (e) {\n      console.error(e);\n    }\n  });\n\n  return (\n    <div\n      id=\"columns\"\n      onContextMenu={(e) => {\n        // If right-click on header, but not links or buttons\n        if (\n          e.target.closest('.deck > header') &&\n          !e.target.closest('a') &&\n          !e.target.closest('button')\n        ) {\n          e.preventDefault();\n          states.showShortcutsSettings = true;\n        }\n      }}\n    >\n      {components}\n    </div>\n  );\n}\n\nexport default Columns;\n","import './notifications-menu.css';\n\nimport { ControlledMenu } from '@szhsin/react-menu';\nimport { memo } from 'preact/compat';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport Columns from '../components/columns';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport Notification from '../components/notification';\nimport { api } from '../utils/api';\nimport db from '../utils/db';\nimport groupNotifications from '../utils/group-notifications';\nimport states, { saveStatus } from '../utils/states';\nimport { getCurrentAccountNS } from '../utils/store-utils';\n\nimport Following from './following';\n\nfunction Home() {\n  const snapStates = useSnapshot(states);\n  useEffect(() => {\n    (async () => {\n      const keys = await db.drafts.keys();\n      if (keys.length) {\n        const ns = getCurrentAccountNS();\n        const ownKeys = keys.filter((key) => key.startsWith(ns));\n        if (ownKeys.length) {\n          states.showDrafts = true;\n        }\n      }\n    })();\n  }, []);\n\n  return (\n    <>\n      {(snapStates.settings.shortcutsViewMode === 'multi-column' ||\n        (!snapStates.settings.shortcutsViewMode &&\n          snapStates.settings.shortcutsColumnsMode)) &&\n      !!snapStates.shortcuts?.length ? (\n        <Columns />\n      ) : (\n        <Following\n          title=\"Home\"\n          path=\"/\"\n          id=\"home\"\n          headerStart={false}\n          headerEnd={<NotificationsLink />}\n        />\n      )}\n    </>\n  );\n}\n\nfunction NotificationsLink() {\n  const snapStates = useSnapshot(states);\n  const notificationLinkRef = useRef();\n  const [menuState, setMenuState] = useState(undefined);\n  return (\n    <>\n      <Link\n        ref={notificationLinkRef}\n        to=\"/notifications\"\n        class={`button plain notifications-button ${\n          snapStates.notificationsShowNew ? 'has-badge' : ''\n        } ${menuState || ''}`}\n        onClick={(e) => {\n          e.stopPropagation();\n          if (window.matchMedia('(min-width: calc(40em))').matches) {\n            e.preventDefault();\n            setMenuState((state) => (!state ? 'open' : undefined));\n          }\n        }}\n      >\n        <Icon icon=\"notification\" size=\"l\" alt=\"Notifications\" />\n      </Link>\n      <NotificationsMenu\n        state={menuState}\n        anchorRef={notificationLinkRef}\n        onClose={() => setMenuState(undefined)}\n      />\n    </>\n  );\n}\n\nconst NOTIFICATIONS_LIMIT = 30;\nconst NOTIFICATIONS_DISPLAY_LIMIT = 5;\nfunction NotificationsMenu({ anchorRef, state, onClose }) {\n  const { masto, instance } = api();\n  const snapStates = useSnapshot(states);\n  const [uiState, setUIState] = useState('default');\n\n  const notificationsIterator = masto.v1.notifications.list({\n    limit: NOTIFICATIONS_LIMIT,\n  });\n\n  async function fetchNotifications() {\n    const allNotifications = await notificationsIterator.next();\n    const notifications = allNotifications.value;\n\n    if (notifications?.length) {\n      notifications.forEach((notification) => {\n        saveStatus(notification.status, instance, {\n          skipThreading: true,\n        });\n      });\n\n      const groupedNotifications = groupNotifications(notifications);\n\n      states.notificationsLast = notifications[0];\n      states.notifications = groupedNotifications;\n\n      // Update last read marker\n      masto.v1.markers\n        .create({\n          notifications: {\n            lastReadId: notifications[0].id,\n          },\n        })\n        .catch(() => {});\n    }\n\n    states.notificationsShowNew = false;\n    states.notificationsLastFetchTime = Date.now();\n    return allNotifications;\n  }\n\n  const [hasFollowRequests, setHasFollowRequests] = useState(false);\n  function fetchFollowRequests() {\n    return masto.v1.followRequests.list({\n      limit: 1,\n    });\n  }\n\n  function loadNotifications() {\n    setUIState('loading');\n    (async () => {\n      try {\n        await fetchNotifications();\n        const followRequests = await fetchFollowRequests();\n        setHasFollowRequests(!!followRequests?.length);\n        setUIState('default');\n      } catch (e) {\n        setUIState('error');\n      }\n    })();\n  }\n\n  useEffect(() => {\n    if (state === 'open') loadNotifications();\n  }, [state]);\n\n  return (\n    <ControlledMenu\n      menuClassName=\"notifications-menu\"\n      state={state}\n      anchorRef={anchorRef}\n      onClose={onClose}\n      portal={{\n        target: document.body,\n      }}\n      overflow=\"auto\"\n      viewScroll=\"close\"\n      position=\"anchor\"\n      align=\"center\"\n      boundingBoxPadding=\"8 8 8 8\"\n    >\n      <header>\n        <h2>Notifications</h2>\n      </header>\n      <main>\n        {snapStates.notifications.length ? (\n          <>\n            {snapStates.notifications\n              .slice(0, NOTIFICATIONS_DISPLAY_LIMIT)\n              .map((notification) => (\n                <Notification\n                  key={notification.id}\n                  instance={instance}\n                  notification={notification}\n                />\n              ))}\n          </>\n        ) : uiState === 'loading' ? (\n          <div class=\"ui-state\">\n            <Loader abrupt />\n          </div>\n        ) : (\n          uiState === 'error' && (\n            <div class=\"ui-state\">\n              <p>Unable to fetch notifications.</p>\n              <p>\n                <button type=\"button\" onClick={loadNotifications}>\n                  Try again\n                </button>\n              </p>\n            </div>\n          )\n        )}\n      </main>\n      <footer>\n        <Link to=\"/mentions\" class=\"button plain\">\n          <Icon icon=\"at\" /> <span>Mentions</span>\n        </Link>\n        <Link to=\"/notifications\" class=\"button plain2\">\n          {hasFollowRequests ? (\n            <>\n              <span class=\"tag collapsed\">New</span>{' '}\n              <span>Follow Requests</span>\n            </>\n          ) : (\n            <b>See all</b>\n          )}{' '}\n          <Icon icon=\"arrow-right\" />\n        </Link>\n      </footer>\n    </ControlledMenu>\n  );\n}\n\nexport default memo(Home);\n","export const statusRegex = /\\/@([^@\\/]+)@?([^\\/]+)?\\/([^\\/]+)\\/?$/i;\nexport const statusNoteRegex = /\\/notes\\/([^\\/]+)\\/?$/i;\nfunction getInstanceStatusURL(url) {\n  // Regex /:username/:id, where username = @username or @username@domain, id = anything\n  const { hostname, pathname } = new URL(url);\n  const [, username, domain, id] = pathname.match(statusRegex) || [];\n\n  if (id) {\n    return `/${hostname}/s/${id}`;\n  }\n\n  const [, noteId] = pathname.match(statusNoteRegex) || [];\n\n  if (noteId) {\n    return `/${hostname}/s/${noteId}`;\n  }\n}\n\nexport default getInstanceStatusURL;\n","import { useLayoutEffect } from 'preact/hooks';\nimport { useLocation } from 'react-router-dom';\n\nimport Link from '../components/link';\nimport getInstanceStatusURL from '../utils/get-instance-status-url';\n\nexport default function HttpRoute() {\n  const location = useLocation();\n  const url = location.pathname.replace(/^\\//, '');\n  const statusURL = getInstanceStatusURL(url);\n\n  useLayoutEffect(() => {\n    if (statusURL) {\n      setTimeout(() => {\n        window.location.hash = statusURL + '?view=full';\n      }, 300);\n    }\n  }, [statusURL]);\n\n  return (\n    <div class=\"ui-state\" tabIndex=\"-1\">\n      {statusURL ? (\n        <>\n          <h2>Redirecting…</h2>\n          <p>\n            <a href={`#${statusURL}?view=full`}>{statusURL}</a>\n          </p>\n        </>\n      ) : (\n        <>\n          <h2>Unable to process URL</h2>\n          <p>\n            <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n              {url}\n            </a>\n          </p>\n        </>\n      )}\n      <hr />\n      <p>\n        <Link to=\"/\">Go home</Link>\n      </p>\n    </div>\n  );\n}\n","import './lists.css';\n\nimport { useEffect, useReducer, useRef, useState } from 'preact/hooks';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport ListAddEdit from '../components/list-add-edit';\nimport Loader from '../components/loader';\nimport Modal from '../components/modal';\nimport NavMenu from '../components/nav-menu';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nfunction Lists() {\n  const { masto } = api();\n  useTitle(`Lists`, `/l`);\n  const [uiState, setUIState] = useState('default');\n\n  const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n  const [lists, setLists] = useState([]);\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const lists = await masto.v1.lists.list();\n        lists.sort((a, b) => a.title.localeCompare(b.title));\n        console.log(lists);\n        setLists(lists);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, [reloadCount]);\n\n  const [showListAddEditModal, setShowListAddEditModal] = useState(false);\n\n  return (\n    <div id=\"lists-page\" class=\"deck-container\" tabIndex=\"-1\">\n      <div class=\"timeline-deck deck\">\n        <header>\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n              <Link to=\"/\" class=\"button plain\">\n                <Icon icon=\"home\" size=\"l\" />\n              </Link>\n            </div>\n            <h1>Lists</h1>\n            <div class=\"header-side\">\n              <button\n                type=\"button\"\n                class=\"plain\"\n                onClick={() => setShowListAddEditModal(true)}\n              >\n                <Icon icon=\"plus\" size=\"l\" alt=\"New list\" />\n              </button>\n            </div>\n          </div>\n        </header>\n        <main>\n          {lists.length > 0 ? (\n            <ul class=\"link-list\">\n              {lists.map((list) => (\n                <li>\n                  <Link to={`/l/${list.id}`}>\n                    <span>\n                      <Icon icon=\"list\" /> <span>{list.title}</span>\n                    </span>\n                    {/* <button\n                      type=\"button\"\n                      class=\"plain\"\n                      onClick={(e) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        setShowListAddEditModal({\n                          list,\n                        });\n                      }}\n                    >\n                      <Icon icon=\"pencil\" />\n                    </button> */}\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          ) : uiState === 'loading' ? (\n            <p class=\"ui-state\">\n              <Loader />\n            </p>\n          ) : uiState === 'error' ? (\n            <p class=\"ui-state\">Unable to load lists.</p>\n          ) : (\n            <p class=\"ui-state\">No lists yet.</p>\n          )}\n        </main>\n      </div>\n      {showListAddEditModal && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowListAddEditModal(false);\n            }\n          }}\n        >\n          <ListAddEdit\n            list={showListAddEditModal?.list}\n            onClose={(result) => {\n              if (result.state === 'success') {\n                reload();\n              }\n              setShowListAddEditModal(false);\n            }}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nexport default Lists;\n","export default \"__VITE_ASSET__cc8865ad__\"","const { VITE_CLIENT_NAME: CLIENT_NAME, VITE_WEBSITE: WEBSITE } = import.meta\n  .env;\n\nconst SCOPES = 'read write follow push';\n\nexport async function registerApplication({ instanceURL }) {\n  const registrationParams = new URLSearchParams({\n    client_name: CLIENT_NAME,\n    redirect_uris: location.origin + location.pathname,\n    scopes: SCOPES,\n    website: WEBSITE,\n  });\n  const registrationResponse = await fetch(\n    `https://${instanceURL}/api/v1/apps`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: registrationParams.toString(),\n    },\n  );\n  const registrationJSON = await registrationResponse.json();\n  console.log({ registrationJSON });\n  return registrationJSON;\n}\n\nexport async function getAuthorizationURL({ instanceURL, client_id }) {\n  const authorizationParams = new URLSearchParams({\n    client_id,\n    scope: SCOPES,\n    redirect_uri: location.origin + location.pathname,\n    // redirect_uri: 'urn:ietf:wg:oauth:2.0:oob',\n    response_type: 'code',\n  });\n  const authorizationURL = `https://${instanceURL}/oauth/authorize?${authorizationParams.toString()}`;\n  return authorizationURL;\n}\n\nexport async function getAccessToken({\n  instanceURL,\n  client_id,\n  client_secret,\n  code,\n}) {\n  const params = new URLSearchParams({\n    client_id,\n    client_secret,\n    redirect_uri: location.origin + location.pathname,\n    grant_type: 'authorization_code',\n    code,\n    scope: SCOPES,\n  });\n  const tokenResponse = await fetch(`https://${instanceURL}/oauth/token`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: params.toString(),\n  });\n  const tokenJSON = await tokenResponse.json();\n  console.log({ tokenJSON });\n  return tokenJSON;\n}\n","import './login.css';\n\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useSearchParams } from 'react-router-dom';\n\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport instancesListURL from '../data/instances.json?url';\nimport { getAuthorizationURL, registerApplication } from '../utils/auth';\nimport store from '../utils/store';\nimport useTitle from '../utils/useTitle';\n\nfunction Login() {\n  useTitle('Log in');\n  const instanceURLRef = useRef();\n  const cachedInstanceURL = store.local.get('instanceURL');\n  const [uiState, setUIState] = useState('default');\n  const [searchParams] = useSearchParams();\n  const instance = searchParams.get('instance');\n  const [instanceText, setInstanceText] = useState(\n    instance || cachedInstanceURL?.toLowerCase() || '',\n  );\n\n  const [instancesList, setInstancesList] = useState([]);\n  useEffect(() => {\n    (async () => {\n      try {\n        const res = await fetch(instancesListURL);\n        const data = await res.json();\n        setInstancesList(data);\n      } catch (e) {\n        // Silently fail\n        console.error(e);\n      }\n    })();\n  }, []);\n\n  // useEffect(() => {\n  //   if (cachedInstanceURL) {\n  //     instanceURLRef.current.value = cachedInstanceURL.toLowerCase();\n  //   }\n  // }, []);\n\n  const submitInstance = (instanceURL) => {\n    store.local.set('instanceURL', instanceURL);\n\n    (async () => {\n      setUIState('loading');\n      try {\n        const { client_id, client_secret, vapid_key } =\n          await registerApplication({\n            instanceURL,\n          });\n\n        if (client_id && client_secret) {\n          store.session.set('clientID', client_id);\n          store.session.set('clientSecret', client_secret);\n          store.session.set('vapidKey', vapid_key);\n\n          location.href = await getAuthorizationURL({\n            instanceURL,\n            client_id,\n          });\n        } else {\n          alert('Failed to register application');\n        }\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  };\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    const { elements } = e.target;\n    let instanceURL = elements.instanceURL.value.toLowerCase();\n    // Remove protocol from instance URL\n    instanceURL = instanceURL.replace(/^https?:\\/\\//, '').replace(/\\/+$/, '');\n    // Remove @acct@ or acct@ from instance URL\n    instanceURL = instanceURL.replace(/^@?[^@]+@/, '');\n    if (!/\\./.test(instanceURL)) {\n      instanceURL = instancesList.find((instance) =>\n        instance.includes(instanceURL),\n      );\n    }\n    submitInstance(instanceURL);\n  };\n\n  const instancesSuggestions = instanceText\n    ? instancesList\n        .filter((instance) => instance.includes(instanceText))\n        .sort((a, b) => {\n          // Move text that starts with instanceText to the start\n          const aStartsWith = a\n            .toLowerCase()\n            .startsWith(instanceText.toLowerCase());\n          const bStartsWith = b\n            .toLowerCase()\n            .startsWith(instanceText.toLowerCase());\n          if (aStartsWith && !bStartsWith) return -1;\n          if (!aStartsWith && bStartsWith) return 1;\n          return 0;\n        })\n        .slice(0, 10)\n    : [];\n\n  return (\n    <main id=\"login\" style={{ textAlign: 'center' }}>\n      <form onSubmit={onSubmit}>\n        <h1>Log in</h1>\n        <label>\n          <p>Instance</p>\n          <input\n            value={instanceText}\n            required\n            type=\"text\"\n            class=\"large\"\n            id=\"instanceURL\"\n            ref={instanceURLRef}\n            disabled={uiState === 'loading'}\n            // list=\"instances-list\"\n            autocorrect=\"off\"\n            autocapitalize=\"off\"\n            autocomplete=\"off\"\n            spellcheck={false}\n            placeholder=\"instance domain\"\n            onInput={(e) => {\n              setInstanceText(e.target.value);\n            }}\n          />\n          {instancesSuggestions?.length > 0 ? (\n            <ul id=\"instances-suggestions\">\n              {instancesSuggestions.map((instance) => (\n                <li>\n                  <button\n                    type=\"button\"\n                    class=\"plain4\"\n                    onClick={() => {\n                      submitInstance(instance);\n                    }}\n                  >\n                    {instance}\n                  </button>\n                </li>\n              ))}\n            </ul>\n          ) : (\n            <div id=\"instances-eg\">e.g. &ldquo;mastodon.social&rsquo;</div>\n          )}\n          {/* <datalist id=\"instances-list\">\n            {instancesList.map((instance) => (\n              <option value={instance} />\n            ))}\n          </datalist> */}\n        </label>\n        {uiState === 'error' && (\n          <p class=\"error\">\n            Failed to log in. Please try again or another instance.\n          </p>\n        )}\n        <div>\n          <button class=\"large\" disabled={uiState === 'loading'}>\n            Log in\n          </button>{' '}\n        </div>\n        <Loader hidden={uiState !== 'loading'} />\n        <hr />\n        <p>\n          <a href=\"https://joinmastodon.org/servers\" target=\"_blank\">\n            Don't have an account? Create one!\n          </a>\n        </p>\n        <p>\n          <Link to=\"/\">Go home</Link>\n        </p>\n      </form>\n    </main>\n  );\n}\n\nexport default Login;\n","import './search.css';\n\nimport { useAutoAnimate } from '@formkit/auto-animate/preact';\nimport { useEffect, useLayoutEffect, useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { InView } from 'react-intersection-observer';\nimport { useParams, useSearchParams } from 'react-router-dom';\n\nimport AccountBlock from '../components/account-block';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport NavMenu from '../components/nav-menu';\nimport SearchForm from '../components/search-form';\nimport Status from '../components/status';\nimport { api } from '../utils/api';\nimport shortenNumber from '../utils/shorten-number';\nimport useTitle from '../utils/useTitle';\n\nconst SHORT_LIMIT = 5;\nconst LIMIT = 40;\n\nfunction Search(props) {\n  const params = useParams();\n  const { masto, instance, authenticated } = api({\n    instance: params.instance,\n  });\n  const [uiState, setUIState] = useState('default');\n  const [searchParams] = useSearchParams();\n  const searchFormRef = useRef();\n  const q = props?.query || searchParams.get('q');\n  const type = props?.type || searchParams.get('type');\n  useTitle(\n    q\n      ? `Search: ${q}${\n          type\n            ? ` (${\n                {\n                  statuses: 'Posts',\n                  accounts: 'Accounts',\n                  hashtags: 'Hashtags',\n                }[type]\n              })`\n            : ''\n        }`\n      : 'Search',\n    `/search`,\n  );\n\n  const [showMore, setShowMore] = useState(false);\n  const offsetRef = useRef(0);\n  useEffect(() => {\n    offsetRef.current = 0;\n  }, [q, type]);\n\n  const scrollableRef = useRef();\n  useLayoutEffect(() => {\n    scrollableRef.current?.scrollTo?.(0, 0);\n  }, [q, type]);\n\n  const [statusResults, setStatusResults] = useState([]);\n  const [accountResults, setAccountResults] = useState([]);\n  const [hashtagResults, setHashtagResults] = useState([]);\n  useEffect(() => {\n    setStatusResults([]);\n    setAccountResults([]);\n    setHashtagResults([]);\n  }, [q]);\n  const setTypeResultsFunc = {\n    statuses: setStatusResults,\n    accounts: setAccountResults,\n    hashtags: setHashtagResults,\n  };\n\n  function loadResults(firstLoad) {\n    if (!firstLoad && !authenticated) {\n      // Search results pagination is only available to authenticated users\n      return;\n    }\n\n    setUIState('loading');\n    if (firstLoad && !type) {\n      setStatusResults(statusResults.slice(0, SHORT_LIMIT));\n      setAccountResults(accountResults.slice(0, SHORT_LIMIT));\n      setHashtagResults(hashtagResults.slice(0, SHORT_LIMIT));\n    }\n\n    (async () => {\n      const params = {\n        q,\n        resolve: authenticated,\n        limit: SHORT_LIMIT,\n      };\n      if (type) {\n        params.limit = LIMIT;\n        params.type = type;\n        if (authenticated) params.offset = offsetRef.current;\n      }\n\n      try {\n        const results = await masto.v2.search.fetch(params);\n        console.log(results);\n        if (type) {\n          if (firstLoad) {\n            setTypeResultsFunc[type](results[type]);\n            const length = results[type]?.length;\n            offsetRef.current = LIMIT;\n            setShowMore(!!length);\n          } else {\n            setTypeResultsFunc[type]((prev) => [...prev, ...results[type]]);\n            const length = results[type]?.length;\n            offsetRef.current = offsetRef.current + LIMIT;\n            setShowMore(!!length);\n          }\n        } else {\n          setStatusResults(results.statuses);\n          setAccountResults(results.accounts);\n          setHashtagResults(results.hashtags);\n          offsetRef.current = 0;\n          setShowMore(false);\n        }\n        setUIState('default');\n      } catch (err) {\n        console.error(err);\n        setUIState('error');\n      }\n    })();\n  }\n\n  useEffect(() => {\n    if (q) {\n      searchFormRef.current?.setValue?.(q);\n      loadResults(true);\n    } else {\n      searchFormRef.current?.focus?.();\n    }\n  }, [q, type, instance]);\n\n  useHotkeys(\n    '/',\n    (e) => {\n      searchFormRef.current?.focus?.();\n    },\n    {\n      preventDefault: true,\n    },\n  );\n\n  const [filterBarParent] = useAutoAnimate();\n\n  return (\n    <div id=\"search-page\" class=\"deck-container\" ref={scrollableRef}>\n      <div class=\"timeline-deck deck\">\n        <header class={uiState === 'loading' ? 'loading' : ''}>\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n            </div>\n            <SearchForm ref={searchFormRef} />\n            <div class=\"header-side\">&nbsp;</div>\n          </div>\n        </header>\n        <main>\n          {!!q && (\n            <div\n              ref={filterBarParent}\n              class={`filter-bar ${uiState === 'loading' ? 'loading' : ''}`}\n            >\n              {!!type && (\n                <Link to={`/search${q ? `?q=${encodeURIComponent(q)}` : ''}`}>\n                  ‹ All\n                </Link>\n              )}\n              {[\n                {\n                  label: 'Accounts',\n                  type: 'accounts',\n                  to: `/search?q=${encodeURIComponent(q)}&type=accounts`,\n                },\n                {\n                  label: 'Hashtags',\n                  type: 'hashtags',\n                  to: `/search?q=${encodeURIComponent(q)}&type=hashtags`,\n                },\n                {\n                  label: 'Posts',\n                  type: 'statuses',\n                  to: `/search?q=${encodeURIComponent(q)}&type=statuses`,\n                },\n              ]\n                .sort((a, b) => {\n                  if (a.type === type) return -1;\n                  if (b.type === type) return 1;\n                  return 0;\n                })\n                .map((link) => (\n                  <Link to={link.to} key={link.type}>\n                    {link.label}\n                  </Link>\n                ))}\n            </div>\n          )}\n          {!!q ? (\n            <>\n              {(!type || type === 'accounts') && (\n                <>\n                  {type !== 'accounts' && (\n                    <h2 class=\"timeline-header\">Accounts</h2>\n                  )}\n                  {accountResults.length > 0 ? (\n                    <>\n                      <ul class=\"timeline flat accounts-list\">\n                        {accountResults.map((account) => (\n                          <li key={account.id}>\n                            <AccountBlock\n                              account={account}\n                              instance={instance}\n                              showStats\n                            />\n                          </li>\n                        ))}\n                      </ul>\n                      {type !== 'accounts' && (\n                        <div class=\"ui-state\">\n                          <Link\n                            class=\"plain button\"\n                            to={`/search?q=${q}&type=accounts`}\n                          >\n                            See more accounts <Icon icon=\"arrow-right\" />\n                          </Link>\n                        </div>\n                      )}\n                    </>\n                  ) : (\n                    !type &&\n                    (uiState === 'loading' ? (\n                      <p class=\"ui-state\">\n                        <Loader abrupt />\n                      </p>\n                    ) : (\n                      <p class=\"ui-state\">No accounts found.</p>\n                    ))\n                  )}\n                </>\n              )}\n              {(!type || type === 'hashtags') && (\n                <>\n                  {type !== 'hashtags' && (\n                    <h2 class=\"timeline-header\">Hashtags</h2>\n                  )}\n                  {hashtagResults.length > 0 ? (\n                    <>\n                      <ul class=\"link-list hashtag-list\">\n                        {hashtagResults.map((hashtag) => {\n                          const { name, history } = hashtag;\n                          const total = history.reduce(\n                            (acc, cur) => acc + +cur.uses,\n                            0,\n                          );\n                          return (\n                            <li key={hashtag.name}>\n                              <Link\n                                to={\n                                  instance\n                                    ? `/${instance}/t/${hashtag.name}`\n                                    : `/t/${hashtag.name}`\n                                }\n                              >\n                                <Icon icon=\"hashtag\" />\n                                <span>{hashtag.name}</span>\n                                {!!total && (\n                                  <span class=\"count\">\n                                    {shortenNumber(total)}\n                                  </span>\n                                )}\n                              </Link>\n                            </li>\n                          );\n                        })}\n                      </ul>\n                      {type !== 'hashtags' && (\n                        <div class=\"ui-state\">\n                          <Link\n                            class=\"plain button\"\n                            to={`/search?q=${q}&type=hashtags`}\n                          >\n                            See more hashtags <Icon icon=\"arrow-right\" />\n                          </Link>\n                        </div>\n                      )}\n                    </>\n                  ) : (\n                    !type &&\n                    (uiState === 'loading' ? (\n                      <p class=\"ui-state\">\n                        <Loader abrupt />\n                      </p>\n                    ) : (\n                      <p class=\"ui-state\">No hashtags found.</p>\n                    ))\n                  )}\n                </>\n              )}\n              {(!type || type === 'statuses') && (\n                <>\n                  {type !== 'statuses' && (\n                    <h2 class=\"timeline-header\">Posts</h2>\n                  )}\n                  {statusResults.length > 0 ? (\n                    <>\n                      <ul class=\"timeline\">\n                        {statusResults.map((status) => (\n                          <li key={status.id}>\n                            <Link\n                              class=\"status-link\"\n                              to={\n                                instance\n                                  ? `/${instance}/s/${status.id}`\n                                  : `/s/${status.id}`\n                              }\n                            >\n                              <Status status={status} />\n                            </Link>\n                          </li>\n                        ))}\n                      </ul>\n                      {type !== 'statuses' && (\n                        <div class=\"ui-state\">\n                          <Link\n                            class=\"plain button\"\n                            to={`/search?q=${q}&type=statuses`}\n                          >\n                            See more posts <Icon icon=\"arrow-right\" />\n                          </Link>\n                        </div>\n                      )}\n                    </>\n                  ) : (\n                    !type &&\n                    (uiState === 'loading' ? (\n                      <p class=\"ui-state\">\n                        <Loader abrupt />\n                      </p>\n                    ) : (\n                      <p class=\"ui-state\">No posts found.</p>\n                    ))\n                  )}\n                </>\n              )}\n              {!!type &&\n                (uiState === 'default' ? (\n                  showMore ? (\n                    <InView\n                      onChange={(inView) => {\n                        if (inView) {\n                          loadResults();\n                        }\n                      }}\n                    >\n                      <button\n                        type=\"button\"\n                        class=\"plain block\"\n                        onClick={() => loadResults()}\n                        style={{ marginBlockEnd: '6em' }}\n                      >\n                        Show more&hellip;\n                      </button>\n                    </InView>\n                  ) : (\n                    <p class=\"ui-state insignificant\">The end.</p>\n                  )\n                ) : (\n                  uiState === 'loading' && (\n                    <p class=\"ui-state\">\n                      <Loader abrupt />\n                    </p>\n                  )\n                ))}\n            </>\n          ) : uiState === 'loading' ? (\n            <p class=\"ui-state\">\n              <Loader abrupt />\n            </p>\n          ) : (\n            <p class=\"ui-state\">\n              Enter your search term or paste a URL above to get started.\n            </p>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default Search;\n","import './status.css';\n\nimport { Menu, MenuDivider, MenuHeader, MenuItem } from '@szhsin/react-menu';\nimport debounce from 'just-debounce-it';\nimport pRetry from 'p-retry';\nimport { memo } from 'preact/compat';\nimport {\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { InView } from 'react-intersection-observer';\nimport { matchPath, useSearchParams } from 'react-router-dom';\nimport { useDebouncedCallback } from 'use-debounce';\nimport { useSnapshot } from 'valtio';\n\nimport Avatar from '../components/avatar';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport MediaModal from '../components/media-modal';\nimport NameText from '../components/name-text';\nimport RelativeTime from '../components/relative-time';\nimport Status from '../components/status';\nimport { api } from '../utils/api';\nimport htmlContentLength from '../utils/html-content-length';\nimport shortenNumber from '../utils/shorten-number';\nimport states, {\n  getStatus,\n  saveStatus,\n  statusKey,\n  threadifyStatus,\n} from '../utils/states';\nimport statusPeek from '../utils/status-peek';\nimport { getCurrentAccount } from '../utils/store-utils';\nimport useScroll from '../utils/useScroll';\nimport useTitle from '../utils/useTitle';\n\nimport getInstanceStatusURL from './../utils/get-instance-status-url';\n\nconst LIMIT = 40;\nconst SUBCOMMENTS_OPEN_ALL_LIMIT = 10;\nconst MAX_WEIGHT = 5;\n\nlet cachedRepliesToggle = {};\nlet cachedStatusesMap = {};\nlet scrollPositions = {};\nfunction resetScrollPosition(id) {\n  delete cachedStatusesMap[id];\n  delete scrollPositions[id];\n}\n\nconst scrollIntoViewOptions = {\n  block: 'nearest',\n  inline: 'center',\n  behavior: 'smooth',\n};\n\n// Select all statuses except those inside collapsed details/summary\n// Hat-tip to @AmeliaBR@front-end.social\n// https://front-end.social/@AmeliaBR/109784776146144471\nconst STATUSES_SELECTOR =\n  '.status-link:not(details:not([open]) > summary ~ *, details:not([open]) > summary ~ * *), .status-focus:not(details:not([open]) > summary ~ *, details:not([open]) > summary ~ * *)';\n\nconst STATUS_URL_REGEX = /\\/s\\//i;\n\nfunction StatusPage(params) {\n  const { id } = params;\n  const { masto, instance } = api({ instance: params.instance });\n  const snapStates = useSnapshot(states);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const mediaParam = searchParams.get('media');\n  const mediaOnlyParam = searchParams.get('media-only');\n  const mediaIndex = parseInt(mediaParam || mediaOnlyParam, 10);\n  let showMedia = mediaIndex > 0;\n  const mediaStatusID = searchParams.get('mediaStatusID');\n  const mediaStatus = getStatus(mediaStatusID, instance);\n  if (mediaStatusID && !mediaStatus) {\n    showMedia = false;\n  }\n  const showMediaOnly = showMedia && !!mediaOnlyParam;\n\n  const sKey = statusKey(id, instance);\n  const [heroStatus, setHeroStatus] = useState(states.statuses[sKey]);\n  useEffect(() => {\n    if (states.statuses[sKey]) {\n      setHeroStatus(states.statuses[sKey]);\n    }\n  }, [sKey]);\n\n  const closeLink = useMemo(() => {\n    const { prevLocation } = states;\n    const pathname =\n      (prevLocation?.pathname || '') + (prevLocation?.search || '');\n    const matchStatusPath =\n      matchPath('/:instance/s/:id', pathname) || matchPath('/s/:id', pathname);\n    if (!pathname || matchStatusPath) {\n      return '/';\n    }\n    return pathname;\n  }, []);\n\n  useEffect(() => {\n    if (!heroStatus && showMedia) {\n      (async () => {\n        try {\n          const status = await masto.v1.statuses.$select(id).fetch();\n          saveStatus(status, instance);\n          setHeroStatus(status);\n        } catch (err) {\n          console.error(err);\n          alert('Unable to load post.');\n          location.hash = closeLink;\n        }\n      })();\n    }\n  }, [showMedia]);\n\n  const mediaAttachments = mediaStatusID\n    ? mediaStatus?.mediaAttachments\n    : heroStatus?.mediaAttachments;\n\n  const handleMediaClose = useCallback(() => {\n    if (\n      !window.matchMedia('(min-width: calc(40em + 350px))').matches &&\n      snapStates.prevLocation\n    ) {\n      history.back();\n    } else {\n      if (showMediaOnly) {\n        location.hash = closeLink;\n      } else {\n        searchParams.delete('media');\n        searchParams.delete('mediaStatusID');\n        setSearchParams(searchParams);\n      }\n    }\n  }, [showMediaOnly, closeLink, snapStates.prevLocation]);\n\n  return (\n    <div class=\"deck-backdrop\">\n      {showMedia ? (\n        mediaAttachments?.length ? (\n          <MediaModal\n            mediaAttachments={mediaAttachments}\n            statusID={mediaStatusID || id}\n            instance={instance}\n            lang={heroStatus?.language}\n            index={mediaIndex - 1}\n            onClose={handleMediaClose}\n          />\n        ) : (\n          <div class=\"media-modal-container loading\">\n            <Loader abrupt />\n          </div>\n        )\n      ) : (\n        <Link to={closeLink} />\n      )}\n      {!showMediaOnly && (\n        <StatusThread\n          id={id}\n          instance={params.instance}\n          closeLink={closeLink}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction StatusThread({ id, closeLink = '/', instance: propInstance }) {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const mediaParam = searchParams.get('media');\n  const mediaStatusID = searchParams.get('mediaStatusID');\n  const showMedia = parseInt(mediaParam, 10) > 0;\n  const firstLoad = useRef(\n    !states.prevLocation &&\n      (history.length === 1 ||\n        ('navigation' in window && navigation?.entries?.()?.length === 1)),\n  );\n  const [viewMode, setViewMode] = useState(\n    searchParams.get('view') || firstLoad.current ? 'full' : null,\n  );\n  const translate = !!parseInt(searchParams.get('translate'));\n  const { masto, instance } = api({ instance: propInstance });\n  const {\n    masto: currentMasto,\n    instance: currentInstance,\n    authenticated,\n  } = api();\n  const sameInstance = instance === currentInstance;\n  const snapStates = useSnapshot(states);\n  const [statuses, setStatuses] = useState([]);\n  const [uiState, setUIState] = useState('default');\n  const heroStatusRef = useRef();\n  const sKey = statusKey(id, instance);\n  const totalDescendants = useRef(0);\n\n  const scrollableRef = useRef();\n  useEffect(() => {\n    scrollableRef.current?.focus();\n  }, []);\n  useEffect(() => {\n    const onScroll = debounce(() => {\n      // console.log('onScroll');\n      if (!scrollableRef.current) return;\n      const { scrollTop } = scrollableRef.current;\n      if (uiState !== 'loading') {\n        scrollPositions[id] = scrollTop;\n      }\n    }, 50);\n    scrollableRef.current?.addEventListener('scroll', onScroll, {\n      passive: true,\n    });\n    onScroll();\n    return () => {\n      onScroll.cancel();\n      scrollableRef.current?.removeEventListener('scroll', onScroll);\n    };\n  }, [id, uiState !== 'loading']);\n\n  const scrollOffsets = useRef();\n  const initContext = ({ reloadHero } = {}) => {\n    console.debug('initContext', id);\n    setUIState('loading');\n    let heroTimer;\n\n    const cachedStatuses = cachedStatusesMap[id];\n    if (cachedStatuses) {\n      // Case 1: It's cached, let's restore them to make it snappy\n      const reallyCachedStatuses = cachedStatuses.filter(\n        (s) => states.statuses[sKey],\n        // Some are not cached in the global state, so we need to filter them out\n      );\n      setStatuses(reallyCachedStatuses);\n    } else {\n      // const heroIndex = statuses.findIndex((s) => s.id === id);\n      // if (heroIndex !== -1) {\n      //   // Case 2: It's in current statuses. Slice off all descendant statuses after the hero status to be safe\n      //   const slicedStatuses = statuses.slice(0, heroIndex + 1);\n      //   setStatuses(slicedStatuses);\n      // } else {\n      // Case 3: Not cached and not in statuses, let's start from scratch\n      setStatuses([{ id }]);\n      // }\n    }\n\n    (async () => {\n      const heroFetch = () =>\n        pRetry(() => masto.v1.statuses.$select(id).fetch(), {\n          retries: 4,\n        });\n      const contextFetch = pRetry(\n        () => masto.v1.statuses.$select(id).context.fetch(),\n        {\n          retries: 8,\n        },\n      );\n\n      const hasStatus = !!snapStates.statuses[sKey];\n      let heroStatus = snapStates.statuses[sKey];\n      if (hasStatus && !reloadHero) {\n        console.debug('Hero status is cached');\n      } else {\n        try {\n          heroStatus = await heroFetch();\n          saveStatus(heroStatus, instance);\n          // Give time for context to appear\n          await new Promise((resolve) => {\n            setTimeout(resolve, 100);\n          });\n        } catch (e) {\n          console.error(e);\n          setUIState('error');\n          return;\n        }\n      }\n\n      try {\n        const context = await contextFetch;\n        const { ancestors, descendants } = context;\n\n        totalDescendants.current = descendants?.length || 0;\n\n        const missingStatuses = new Set();\n        ancestors.forEach((status) => {\n          saveStatus(status, instance, {\n            skipThreading: true,\n          });\n          if (\n            status.inReplyToId &&\n            !ancestors.find((s) => s.id === status.inReplyToId)\n          ) {\n            missingStatuses.add(status.inReplyToId);\n          }\n        });\n        const ancestorsIsThread = ancestors.every(\n          (s) => s.account.id === heroStatus.account.id,\n        );\n        const nestedDescendants = [];\n        descendants.forEach((status) => {\n          saveStatus(status, instance, {\n            skipThreading: true,\n          });\n\n          if (\n            status.inReplyToId &&\n            !descendants.find((s) => s.id === status.inReplyToId) &&\n            status.inReplyToId !== heroStatus.id\n          ) {\n            missingStatuses.add(status.inReplyToId);\n          }\n\n          if (status.inReplyToAccountId === status.account.id) {\n            // If replying to self, it's part of the thread, level 1\n            nestedDescendants.push(status);\n          } else if (status.inReplyToId === heroStatus.id) {\n            // If replying to the hero status, it's a reply, level 1\n            nestedDescendants.push(status);\n          } else if (\n            !status.inReplyToAccountId &&\n            nestedDescendants.find((s) => s.id === status.inReplyToId) &&\n            status.account.id === heroStatus.account.id\n          ) {\n            // If replying to hero's own statuses, it's part of the thread, level 1\n            nestedDescendants.push(status);\n          } else {\n            // If replying to someone else, it's a reply to a reply, level 2\n            const parent = descendants.find((s) => s.id === status.inReplyToId);\n            if (parent) {\n              if (!parent.__replies) {\n                parent.__replies = [];\n              }\n              parent.__replies.push(status);\n            } else {\n              // If no parent, something is wrong\n              console.warn('No parent found for', status);\n            }\n          }\n        });\n\n        console.log({ ancestors, descendants, nestedDescendants });\n        if (missingStatuses.size) {\n          console.error('Missing statuses', [...missingStatuses]);\n        }\n\n        function expandReplies(_replies) {\n          return _replies?.map((_r) => ({\n            id: _r.id,\n            account: _r.account,\n            repliesCount: _r.repliesCount,\n            content: _r.content,\n            weight: calcStatusWeight(_r),\n            replies: expandReplies(_r.__replies),\n          }));\n        }\n\n        const allStatuses = [\n          ...ancestors.map((s) => ({\n            id: s.id,\n            ancestor: true,\n            isThread: ancestorsIsThread,\n            accountID: s.account.id,\n            account: s.account,\n            repliesCount: s.repliesCount,\n            weight: calcStatusWeight(s),\n          })),\n          {\n            id,\n            accountID: heroStatus.account.id,\n            weight: calcStatusWeight(heroStatus),\n          },\n          ...nestedDescendants.map((s) => ({\n            id: s.id,\n            account: s.account,\n            accountID: s.account.id,\n            descendant: true,\n            thread: s.account.id === heroStatus.account.id,\n            weight: calcStatusWeight(s),\n            replies: expandReplies(s.__replies),\n          })),\n        ];\n\n        setUIState('default');\n        scrollOffsets.current = {\n          offsetTop: heroStatusRef.current?.offsetTop,\n          scrollTop: scrollableRef.current?.scrollTop,\n        };\n\n        // Set limit to hero's index\n        const heroLimit = allStatuses.findIndex((s) => s.id === id);\n        if (heroLimit >= limit) {\n          setLimit(heroLimit + 1);\n        }\n\n        console.log({ allStatuses });\n        setStatuses(allStatuses);\n        cachedStatusesMap[id] = allStatuses;\n\n        // Let's threadify this one\n        // Note that all non-hero statuses will trigger saveStatus which will threadify them too\n        // By right, at this point, all descendant statuses should be cached\n        threadifyStatus(heroStatus, instance);\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n\n    return () => {\n      clearTimeout(heroTimer);\n    };\n  };\n\n  useEffect(initContext, [id, masto]);\n  useEffect(() => {\n    if (!statuses.length) return;\n    console.debug('STATUSES', statuses);\n    const scrollPosition = scrollPositions[id];\n    console.debug('scrollPosition', scrollPosition);\n    if (!!scrollPosition) {\n      console.debug('Case 1', {\n        id,\n        scrollPosition,\n      });\n      scrollableRef.current.scrollTop = scrollPosition;\n    } else if (scrollOffsets.current) {\n      const newScrollOffsets = {\n        offsetTop: heroStatusRef.current?.offsetTop,\n        scrollTop: scrollableRef.current?.scrollTop,\n      };\n      const newScrollTop =\n        newScrollOffsets.offsetTop -\n        scrollOffsets.current.offsetTop +\n        newScrollOffsets.scrollTop;\n      console.debug('Case 2', {\n        scrollOffsets: scrollOffsets.current,\n        newScrollOffsets,\n        newScrollTop,\n        statuses: [...statuses],\n      });\n      scrollableRef.current.scrollTop = newScrollTop;\n    } else if (statuses.length === 1) {\n      console.debug('Case 3', {\n        id,\n      });\n      scrollableRef.current.scrollTop = 0;\n    }\n\n    // RESET\n    scrollOffsets.current = null;\n  }, [statuses]);\n\n  useEffect(() => {\n    if (snapStates.reloadStatusPage <= 0) return;\n    // Delete the cache for the context\n    (async () => {\n      try {\n        const { instanceURL } = getCurrentAccount();\n        const contextURL = `https://${instanceURL}/api/v1/statuses/${id}/context`;\n        console.log('Clear cache', contextURL);\n        const apiCache = await caches.open('api');\n        await apiCache.delete(contextURL, { ignoreVary: true });\n\n        return initContext({\n          reloadHero: true,\n        });\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [snapStates.reloadStatusPage]);\n\n  useEffect(() => {\n    return () => {\n      // RESET\n      scrollPositions = {};\n      states.reloadStatusPage = 0;\n      cachedStatusesMap = {};\n      cachedRepliesToggle = {};\n      statusWeightCache.clear();\n    };\n  }, []);\n\n  const heroStatus = snapStates.statuses[sKey] || snapStates.statuses[id];\n  const heroDisplayName = useMemo(() => {\n    // Remove shortcodes from display name\n    if (!heroStatus) return '';\n    const { account } = heroStatus;\n    const div = document.createElement('div');\n    div.innerHTML = account.displayName;\n    return div.innerText.trim();\n  }, [heroStatus]);\n  const heroContentText = useMemo(() => {\n    if (!heroStatus) return '';\n    let text = statusPeek(heroStatus);\n    if (text.length > 64) {\n      // \"The title should ideally be less than 64 characters in length\"\n      // https://www.w3.org/Provider/Style/TITLE.html\n      text = text.slice(0, 64) + '…';\n    }\n    return text;\n  }, [heroStatus]);\n  useTitle(\n    heroDisplayName && heroContentText\n      ? `${heroDisplayName}: \"${heroContentText}\"`\n      : 'Status',\n    '/:instance?/s/:id',\n  );\n\n  const postInstance = useMemo(() => {\n    if (!heroStatus) return;\n    const { url } = heroStatus;\n    if (!url) return;\n    return new URL(url).hostname;\n  }, [heroStatus]);\n  const postSameInstance = useMemo(() => {\n    if (!postInstance) return;\n    return postInstance === instance;\n  }, [postInstance, instance]);\n\n  const [limit, setLimit] = useState(LIMIT);\n  const showMore = useMemo(() => {\n    // return number of statuses to show\n    return statuses.length - limit;\n  }, [statuses.length, limit]);\n\n  const hasDescendants = statuses.some((s) => s.descendant);\n  const ancestors = statuses.filter((s) => s.ancestor);\n\n  const [heroInView, setHeroInView] = useState(true);\n  const onView = useDebouncedCallback(setHeroInView, 100);\n  const heroPointer = useMemo(() => {\n    // get top offset of heroStatus\n    if (!heroStatusRef.current || heroInView) return null;\n    const { top } = heroStatusRef.current.getBoundingClientRect();\n    return top > 0 ? 'down' : 'up';\n  }, [heroInView]);\n\n  useHotkeys(\n    'esc',\n    () => {\n      location.hash = closeLink;\n    },\n    {\n      // If media is open, esc to close media first\n      // Else close the status page\n      enabled: !showMedia,\n      ignoreEventWhen: (e) => {\n        const hasModal = !!document.querySelector('#modal-container > *');\n        return hasModal;\n      },\n    },\n  );\n  // For backspace, will always close both media and status page\n  useHotkeys('backspace', () => {\n    location.hash = closeLink;\n  });\n\n  useHotkeys('j', () => {\n    const activeStatus = document.activeElement.closest(\n      '.status-link, .status-focus',\n    );\n    const activeStatusRect = activeStatus?.getBoundingClientRect();\n    const allStatusLinks = Array.from(\n      scrollableRef.current.querySelectorAll(STATUSES_SELECTOR),\n    );\n    console.log({ allStatusLinks });\n    if (\n      activeStatus &&\n      activeStatusRect.top < scrollableRef.current.clientHeight &&\n      activeStatusRect.bottom > 0\n    ) {\n      const activeStatusIndex = allStatusLinks.indexOf(activeStatus);\n      let nextStatus = allStatusLinks[activeStatusIndex + 1];\n      if (nextStatus) {\n        nextStatus.focus();\n        nextStatus.scrollIntoView(scrollIntoViewOptions);\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostStatusLink = allStatusLinks.find((statusLink) => {\n        const statusLinkRect = statusLink.getBoundingClientRect();\n        return statusLinkRect.top >= 44 && statusLinkRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostStatusLink) {\n        topmostStatusLink.focus();\n        topmostStatusLink.scrollIntoView(scrollIntoViewOptions);\n      }\n    }\n  });\n\n  useHotkeys('k', () => {\n    const activeStatus = document.activeElement.closest(\n      '.status-link, .status-focus',\n    );\n    const activeStatusRect = activeStatus?.getBoundingClientRect();\n    const allStatusLinks = Array.from(\n      scrollableRef.current.querySelectorAll(STATUSES_SELECTOR),\n    );\n    if (\n      activeStatus &&\n      activeStatusRect.top < scrollableRef.current.clientHeight &&\n      activeStatusRect.bottom > 0\n    ) {\n      const activeStatusIndex = allStatusLinks.indexOf(activeStatus);\n      let prevStatus = allStatusLinks[activeStatusIndex - 1];\n      if (prevStatus) {\n        prevStatus.focus();\n        prevStatus.scrollIntoView(scrollIntoViewOptions);\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostStatusLink = allStatusLinks.find((statusLink) => {\n        const statusLinkRect = statusLink.getBoundingClientRect();\n        return statusLinkRect.top >= 44 && statusLinkRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostStatusLink) {\n        topmostStatusLink.focus();\n        topmostStatusLink.scrollIntoView(scrollIntoViewOptions);\n      }\n    }\n  });\n\n  // NOTE: I'm not sure if 'x' is the best shortcut for this, might change it later\n  // IDEA: x is for expand\n  useHotkeys('x', () => {\n    const activeStatus = document.activeElement.closest(\n      '.status-link, .status-focus',\n    );\n    if (activeStatus) {\n      const details = activeStatus.nextElementSibling;\n      if (details && details.tagName.toLowerCase() === 'details') {\n        details.open = !details.open;\n      }\n    }\n  });\n\n  const { nearReachStart } = useScroll({\n    scrollableRef,\n    distanceFromStartPx: 16,\n  });\n\n  const initialPageState = useRef(showMedia ? 'media+status' : 'status');\n\n  const handleMediaClick = useCallback(\n    (e, i, media, status) => {\n      e.preventDefault();\n      e.stopPropagation();\n      setSearchParams({\n        media: i + 1,\n        mediaStatusID: status.id,\n      });\n    },\n    [id],\n  );\n\n  const handleStatusLinkClick = useCallback((e, status) => {\n    resetScrollPosition(status.id);\n  }, []);\n\n  useEffect(() => {\n    let timer;\n    if (mediaStatusID && showMedia) {\n      timer = setTimeout(() => {\n        const status = scrollableRef.current?.querySelector(\n          `.status-link[href*=\"/${mediaStatusID}\"]`,\n        );\n        if (status) {\n          status.scrollIntoView(scrollIntoViewOptions);\n        }\n      }, 400); // After CSS transition\n    }\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [mediaStatusID, showMedia]);\n\n  const renderStatus = useCallback(\n    (status) => {\n      const {\n        id: statusID,\n        ancestor,\n        isThread,\n        descendant,\n        thread,\n        replies,\n        repliesCount,\n        weight,\n      } = status;\n      const isHero = statusID === id;\n      // const StatusParent = useCallback(\n      //   (props) =>\n      //     isThread || thread || ancestor ? (\n      //       <Link\n      //         class=\"status-link\"\n      //         to={\n      //           instance ? `/${instance}/s/${statusID}` : `/s/${statusID}`\n      //         }\n      //         onClick={() => {\n      //           resetScrollPosition(statusID);\n      //         }}\n      //         {...props}\n      //       />\n      //     ) : (\n      //       <div class=\"status-focus\" tabIndex={0} {...props} />\n      //     ),\n      //   [isThread, thread],\n      // );\n      return (\n        <li\n          key={statusID}\n          ref={isHero ? heroStatusRef : null}\n          class={`${ancestor ? 'ancestor' : ''} ${\n            descendant ? 'descendant' : ''\n          } ${thread ? 'thread' : ''} ${isHero ? 'hero' : ''}`}\n        >\n          {isHero ? (\n            <>\n              <InView\n                threshold={0.1}\n                onChange={onView}\n                class=\"status-focus\"\n                tabIndex={0}\n              >\n                <Status\n                  statusID={statusID}\n                  instance={instance}\n                  withinContext\n                  size=\"l\"\n                  enableTranslate\n                  forceTranslate={translate}\n                />\n              </InView>\n              {uiState !== 'loading' && !authenticated ? (\n                <div class=\"post-status-banner\">\n                  <p>\n                    You're not logged in. Interactions (reply, boost, etc) are\n                    not possible.\n                  </p>\n                  <Link to=\"/login\" class=\"button\">\n                    Log in\n                  </Link>\n                </div>\n              ) : (\n                !sameInstance && (\n                  <div class=\"post-status-banner\">\n                    <p>\n                      This post is from another instance (<b>{instance}</b>).\n                      Interactions (reply, boost, etc) are not possible.\n                    </p>\n                    <button\n                      type=\"button\"\n                      disabled={uiState === 'loading'}\n                      onClick={() => {\n                        setUIState('loading');\n                        (async () => {\n                          try {\n                            const results = await currentMasto.v2.search.fetch({\n                              q: heroStatus.url,\n                              type: 'statuses',\n                              resolve: true,\n                              limit: 1,\n                            });\n                            if (results.statuses.length) {\n                              const status = results.statuses[0];\n                              location.hash = currentInstance\n                                ? `/${currentInstance}/s/${status.id}`\n                                : `/s/${status.id}`;\n                            } else {\n                              throw new Error('No results');\n                            }\n                          } catch (e) {\n                            setUIState('default');\n                            alert('Error: ' + e);\n                            console.error(e);\n                          }\n                        })();\n                      }}\n                    >\n                      <Icon icon=\"transfer\" /> Switch to my instance to enable\n                      interactions\n                    </button>\n                  </div>\n                )\n              )}\n            </>\n          ) : (\n            // <StatusParent>\n            <Link\n              class=\"status-link\"\n              to={instance ? `/${instance}/s/${statusID}` : `/s/${statusID}`}\n              onClick={() => {\n                resetScrollPosition(statusID);\n              }}\n            >\n              <Status\n                statusID={statusID}\n                instance={instance}\n                withinContext\n                size={thread || ancestor ? 'm' : 's'}\n                enableTranslate\n                onMediaClick={handleMediaClick}\n                onStatusLinkClick={handleStatusLinkClick}\n              />\n              {ancestor && isThread && repliesCount > 1 && (\n                <div class=\"replies-link\">\n                  <Icon icon=\"comment\" />{' '}\n                  <span title={repliesCount}>\n                    {shortenNumber(repliesCount)}\n                  </span>\n                </div>\n              )}{' '}\n              {/* {replies?.length > LIMIT && (\n                        <div class=\"replies-link\">\n                          <Icon icon=\"comment\" />{' '}\n                          <span title={replies.length}>\n                            {shortenNumber(replies.length)}\n                          </span>\n                        </div>\n                      )} */}\n              {/* </StatusParent> */}\n            </Link>\n          )}\n          {descendant && replies?.length > 0 && (\n            <SubComments\n              instance={instance}\n              replies={replies}\n              hasParentThread={thread}\n              level={1}\n              accWeight={weight}\n              openAll={totalDescendants.current < SUBCOMMENTS_OPEN_ALL_LIMIT}\n            />\n          )}\n          {uiState === 'loading' &&\n            isHero &&\n            !!heroStatus?.repliesCount &&\n            !hasDescendants && (\n              <div class=\"status-loading\">\n                <Loader />\n              </div>\n            )}\n          {uiState === 'error' &&\n            isHero &&\n            !!heroStatus?.repliesCount &&\n            !hasDescendants && (\n              <div class=\"status-error\">\n                Unable to load replies.\n                <br />\n                <button\n                  type=\"button\"\n                  class=\"plain\"\n                  onClick={() => {\n                    states.reloadStatusPage++;\n                  }}\n                >\n                  Try again\n                </button>\n              </div>\n            )}\n        </li>\n      );\n    },\n    [\n      id,\n      instance,\n      uiState,\n      authenticated,\n      sameInstance,\n      translate,\n      handleMediaClick,\n      handleStatusLinkClick,\n      hasDescendants,\n    ],\n  );\n\n  const prevLocationIsStatusPage = useMemo(() => {\n    // Navigation API\n    if ('navigation' in window && navigation?.entries) {\n      const prevEntry = navigation.entries()[navigation.currentEntry.index - 1];\n      if (prevEntry?.url) {\n        return STATUS_URL_REGEX.test(prevEntry.url);\n      }\n    }\n    return STATUS_URL_REGEX.test(states.prevLocation?.pathname);\n  }, [sKey]);\n\n  return (\n    <div\n      tabIndex=\"-1\"\n      ref={scrollableRef}\n      class={`status-deck deck contained ${\n        statuses.length > 1 ? 'padded-bottom' : ''\n      } ${\n        initialPageState.current === 'status' && !firstLoad.current\n          ? 'slide-in'\n          : ''\n      } ${viewMode ? `deck-view-${viewMode}` : ''}`}\n      onAnimationEnd={(e) => {\n        // Fix the bounce effect when switching viewMode\n        // `slide-in` animation kicks in when switching viewMode\n        if (initialPageState.current === 'status') {\n          // e.target.classList.remove('slide-in');\n          initialPageState.current = null;\n        }\n      }}\n    >\n      <header\n        class={`${heroInView ? 'inview' : ''} ${\n          uiState === 'loading' ? 'loading' : ''\n        }`}\n        onDblClick={(e) => {\n          // reload statuses\n          states.reloadStatusPage++;\n        }}\n      >\n        {/* <div>\n            <Link class=\"button plain deck-close\" href={closeLink}>\n              <Icon icon=\"chevron-left\" size=\"xl\" />\n            </Link>\n          </div> */}\n        <div class=\"header-grid header-grid-2\">\n          <h1>\n            {prevLocationIsStatusPage && (\n              <button\n                type=\"button\"\n                class=\"plain deck-back\"\n                onClick={() => {\n                  history.back();\n                }}\n              >\n                <Icon icon=\"chevron-left\" size=\"xl\" />\n              </button>\n            )}\n            {!heroInView && heroStatus && uiState !== 'loading' ? (\n              <>\n                <span class=\"hero-heading\">\n                  <NameText\n                    account={heroStatus.account}\n                    instance={instance}\n                    showAvatar\n                    short\n                  />{' '}\n                  <span class=\"insignificant\">\n                    &bull;{' '}\n                    <RelativeTime\n                      datetime={heroStatus.createdAt}\n                      format=\"micro\"\n                    />\n                  </span>\n                </span>{' '}\n                <button\n                  type=\"button\"\n                  class=\"ancestors-indicator light small\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    heroStatusRef.current.scrollIntoView({\n                      behavior: 'smooth',\n                      block: 'start',\n                    });\n                  }}\n                  title=\"Go to main post\"\n                >\n                  <Icon\n                    icon={heroPointer === 'down' ? 'arrow-down' : 'arrow-up'}\n                  />\n                </button>\n              </>\n            ) : (\n              <>\n                Post{' '}\n                <button\n                  type=\"button\"\n                  class=\"ancestors-indicator light small\"\n                  onClick={(e) => {\n                    // Scroll to top\n                    e.preventDefault();\n                    e.stopPropagation();\n                    scrollableRef.current.scrollTo({\n                      top: 0,\n                      behavior: 'smooth',\n                    });\n                  }}\n                  hidden={!ancestors.length || nearReachStart}\n                  title={`${ancestors.length} posts above ‒ Go to top`}\n                >\n                  <Icon icon=\"arrow-up\" />\n                  {ancestors\n                    .filter(\n                      (a, i, arr) =>\n                        arr.findIndex((b) => b.accountID === a.accountID) === i,\n                    )\n                    .slice(0, 3)\n                    .map((ancestor) => (\n                      <Avatar\n                        key={ancestor.account.id}\n                        url={ancestor.account.avatar}\n                        alt={ancestor.account.displayName}\n                      />\n                    ))}\n                  {/* <Icon icon=\"comment\" />{' '} */}\n                  {ancestors.length > 3 && (\n                    <>\n                      {' '}\n                      <span class=\"insignificant\">\n                        {shortenNumber(ancestors.length)}\n                      </span>\n                    </>\n                  )}\n                </button>\n              </>\n            )}\n          </h1>\n          <div class=\"header-side\">\n            <button\n              type=\"button\"\n              class=\"plain4 button-switch-view\"\n              style={{\n                display: viewMode === 'full' ? '' : 'none',\n              }}\n              onClick={() => {\n                setViewMode(null);\n                searchParams.delete('media');\n                searchParams.delete('media-only');\n                searchParams.delete('view');\n                setSearchParams(searchParams);\n              }}\n              title=\"Switch to Side Peek view\"\n            >\n              <Icon icon=\"layout4\" size=\"l\" />\n            </button>\n            <Menu\n              align=\"end\"\n              portal={{\n                // Need this, else the menu click will cause scroll jump\n                target: scrollableRef.current,\n              }}\n              menuButton={\n                <button type=\"button\" class=\"button plain4\">\n                  <Icon icon=\"more\" alt=\"Actions\" size=\"xl\" />\n                </button>\n              }\n            >\n              <MenuItem\n                disabled={uiState === 'loading'}\n                onClick={() => {\n                  states.reloadStatusPage++;\n                }}\n              >\n                <Icon icon=\"refresh\" />\n                <span>Refresh</span>\n              </MenuItem>\n              <MenuItem\n                className=\"menu-switch-view\"\n                onClick={() => {\n                  setViewMode(viewMode === 'full' ? null : 'full');\n                  searchParams.delete('media');\n                  searchParams.delete('media-only');\n                  if (viewMode === 'full') {\n                    searchParams.delete('view');\n                  } else {\n                    searchParams.set('view', 'full');\n                  }\n                  setSearchParams(searchParams);\n                }}\n              >\n                <Icon\n                  icon={\n                    {\n                      '': 'layout5',\n                      full: 'layout4',\n                    }[viewMode || '']\n                  }\n                />\n                <span>\n                  Switch to {viewMode === 'full' ? 'Side Peek' : 'Full'} view\n                </span>\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  // Click all buttons with class .spoiler but not .spoiling\n                  const buttons = Array.from(\n                    scrollableRef.current.querySelectorAll(\n                      'button.spoiler:not(.spoiling)',\n                    ),\n                  );\n                  buttons.forEach((button) => {\n                    button.click();\n                  });\n                }}\n              >\n                <Icon icon=\"eye-open\" /> <span>Show all sensitive content</span>\n              </MenuItem>\n              <MenuDivider />\n              <MenuHeader className=\"plain\">Experimental</MenuHeader>\n              <MenuItem\n                disabled={postSameInstance}\n                onClick={() => {\n                  const statusURL = getInstanceStatusURL(heroStatus.url);\n                  if (statusURL) {\n                    location.hash = statusURL;\n                  } else {\n                    alert('Unable to switch');\n                  }\n                }}\n              >\n                <Icon icon=\"transfer\" />\n                <small class=\"menu-double-lines\">\n                  Switch to post's instance (<b>{postInstance}</b>)\n                </small>\n              </MenuItem>\n            </Menu>\n            <Link class=\"button plain deck-close\" to={closeLink}>\n              <Icon icon=\"x\" size=\"xl\" />\n            </Link>\n          </div>\n        </div>\n      </header>\n      {!!statuses.length && heroStatus ? (\n        <ul\n          class={`timeline flat contextual grow ${\n            uiState === 'loading' ? 'loading' : ''\n          }`}\n        >\n          {statuses.slice(0, limit).map(renderStatus)}\n          {showMore > 0 && (\n            <li>\n              <button\n                type=\"button\"\n                class=\"plain block show-more\"\n                disabled={uiState === 'loading'}\n                onClick={() => setLimit((l) => l + LIMIT)}\n                style={{ marginBlockEnd: '6em' }}\n              >\n                <div class=\"ib avatars-bunch\">\n                  {/* show avatars for first 5 statuses */}\n                  {statuses.slice(limit, limit + 5).map((status) => (\n                    <Avatar\n                      key={status.id}\n                      url={status.account.avatarStatic}\n                      // title={`${status.avatar.displayName} (@${status.avatar.acct})`}\n                    />\n                  ))}\n                </div>{' '}\n                <div class=\"ib\">\n                  Show more&hellip;{' '}\n                  <span class=\"tag\">\n                    {showMore > LIMIT ? `${LIMIT}+` : showMore}\n                  </span>\n                </div>\n              </button>\n            </li>\n          )}\n        </ul>\n      ) : (\n        <>\n          {uiState === 'loading' && (\n            <ul class=\"timeline flat contextual grow loading\">\n              <li>\n                <Status skeleton size=\"l\" />\n              </li>\n            </ul>\n          )}\n          {uiState === 'error' && (\n            <p class=\"ui-state\">\n              Unable to load post\n              <br />\n              <br />\n              <button\n                type=\"button\"\n                onClick={() => {\n                  states.reloadStatusPage++;\n                }}\n              >\n                Try again\n              </button>\n            </p>\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n\nfunction SubComments({\n  replies,\n  instance,\n  hasParentThread,\n  level,\n  accWeight,\n  openAll,\n}) {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  // Total comments count, including sub-replies\n  const diveDeep = (replies) => {\n    return replies.reduce((acc, reply) => {\n      const { repliesCount, replies } = reply;\n      const count = replies?.length || repliesCount;\n      return acc + count + diveDeep(replies || []);\n    }, 0);\n  };\n  const totalComments = replies.length + diveDeep(replies);\n  const sameCount = replies.length === totalComments;\n\n  // Get the first 3 accounts, unique by id\n  const accounts = replies\n    .map((r) => r.account)\n    .filter((a, i, arr) => arr.findIndex((b) => b.id === a.id) === i)\n    .slice(0, 3);\n\n  const totalWeight = useMemo(() => {\n    return replies?.reduce((acc, reply) => {\n      return acc + reply?.weight;\n    }, accWeight);\n  }, [accWeight, replies?.length]);\n\n  let open = false;\n  if (openAll) {\n    open = true;\n  } else if (totalWeight <= MAX_WEIGHT) {\n    open = true;\n  } else if (!hasParentThread && totalComments === 1) {\n    const shortReply = calcStatusWeight(replies[0]) < 2;\n    if (shortReply) open = true;\n  }\n  const openBefore = cachedRepliesToggle[replies[0].id];\n\n  const handleMediaClick = useCallback((e, i, media, status) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setSearchParams({\n      media: i + 1,\n      mediaStatusID: status.id,\n    });\n  }, []);\n\n  const detailsRef = useRef();\n  useLayoutEffect(() => {\n    function handleScroll(e) {\n      e.target.dataset.scrollLeft = e.target.scrollLeft;\n    }\n    detailsRef.current?.addEventListener('scroll', handleScroll, {\n      passive: true,\n    });\n    return () => {\n      detailsRef.current?.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n\n  return (\n    <details\n      ref={detailsRef}\n      class=\"replies\"\n      open={openBefore || open}\n      onToggle={(e) => {\n        const { open } = e.target;\n        // use first reply as ID\n        cachedRepliesToggle[replies[0].id] = open;\n      }}\n      style={{\n        '--comments-level': level,\n      }}\n      data-comments-level={level}\n      data-comments-level-overflow={level > 4}\n    >\n      <summary class=\"replies-summary\" hidden={open}>\n        <span class=\"avatars\">\n          {accounts.map((a) => (\n            <Avatar\n              key={a.id}\n              url={a.avatarStatic}\n              title={`${a.displayName} @${a.username}`}\n              squircle={a?.bot}\n            />\n          ))}\n        </span>\n        <b>\n          <span title={replies.length}>{shortenNumber(replies.length)}</span>{' '}\n          repl\n          {replies.length === 1 ? 'y' : 'ies'}\n        </b>\n        {!sameCount && totalComments > 1 && (\n          <>\n            {' '}\n            &middot;{' '}\n            <span>\n              <span title={totalComments}>{shortenNumber(totalComments)}</span>{' '}\n              comment\n              {totalComments === 1 ? '' : 's'}\n            </span>\n          </>\n        )}\n      </summary>\n      <ul>\n        {replies.map((r) => (\n          <li key={r.id}>\n            <Link\n              class=\"status-link\"\n              to={instance ? `/${instance}/s/${r.id}` : `/s/${r.id}`}\n              onClick={() => {\n                resetScrollPosition(r.id);\n              }}\n            >\n              {/* <div class=\"status-focus\" tabIndex={0}> */}\n              <Status\n                statusID={r.id}\n                instance={instance}\n                withinContext\n                size=\"s\"\n                enableTranslate\n                onMediaClick={handleMediaClick}\n              />\n              {!r.replies?.length && r.repliesCount > 0 && (\n                <div class=\"replies-link\">\n                  <Icon icon=\"comment\" />{' '}\n                  <span title={r.repliesCount}>\n                    {shortenNumber(r.repliesCount)}\n                  </span>\n                </div>\n              )}\n              {/* </div> */}\n            </Link>\n            {r.replies?.length && (\n              <SubComments\n                instance={instance}\n                replies={r.replies}\n                level={level + 1}\n                accWeight={!open ? r.weight : totalWeight}\n                openAll={openAll}\n              />\n            )}\n          </li>\n        ))}\n      </ul>\n    </details>\n  );\n}\n\nconst MEDIA_VIRTUAL_LENGTH = 140;\nconst POLL_VIRTUAL_LENGTH = 35;\nconst CARD_VIRTUAL_LENGTH = 70;\nconst WEIGHT_SEGMENT = 140;\nconst statusWeightCache = new Map();\nfunction calcStatusWeight(status) {\n  const cachedWeight = statusWeightCache.get(status.id);\n  if (cachedWeight) return cachedWeight;\n  const { spoilerText, content, mediaAttachments, poll, card } = status;\n  const length = htmlContentLength(spoilerText + content);\n  const mediaLength = mediaAttachments?.length ? MEDIA_VIRTUAL_LENGTH : 0;\n  const pollLength = (poll?.options?.length || 0) * POLL_VIRTUAL_LENGTH;\n  const cardLength =\n    card && (mediaAttachments?.length || poll?.options?.length)\n      ? 0\n      : CARD_VIRTUAL_LENGTH;\n  const totalLength = length + mediaLength + pollLength + cardLength;\n  const weight = totalLength / WEIGHT_SEGMENT;\n  statusWeightCache.set(status.id, weight);\n  return weight;\n}\n\nexport default memo(StatusPage);\n","import { useParams } from 'react-router-dom';\n\nimport Status from './status';\n\nexport default function StatusRoute() {\n  const params = useParams();\n  const { id, instance } = params;\n  return <Status id={id} instance={instance} />;\n}\n","export default \"__VITE_ASSET__9f719d7a__\"","export default \"__VITE_ASSET__dbb57588__\"","export default \"__VITE_ASSET__61903085__\"","export default \"__VITE_ASSET__f411f03b__\"","export default \"__VITE_ASSET__57516dc0__\"","export default \"__VITE_ASSET__0bd95074__\"","import './welcome.css';\n\nimport boostsCarouselUrl from '../assets/features/boosts-carousel.jpg';\nimport groupedNotificationsUrl from '../assets/features/grouped-notifications.jpg';\nimport multiColumnUrl from '../assets/features/multi-column.jpg';\nimport multiHashtagTimelineUrl from '../assets/features/multi-hashtag-timeline.jpg';\nimport nestedCommentsThreadUrl from '../assets/features/nested-comments-thread.jpg';\nimport logoText from '../assets/logo-text.svg';\nimport logo from '../assets/logo.svg';\n\nimport Link from '../components/link';\nimport states from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nfunction Welcome() {\n  useTitle(null, ['/', '/welcome']);\n  return (\n    <main id=\"welcome\">\n      <div class=\"hero-container\">\n        <h1>\n          <img\n            src={logo}\n            alt=\"\"\n            width=\"200\"\n            height=\"200\"\n            style={{\n              aspectRatio: '1/1',\n              marginBlockEnd: -16,\n            }}\n          />\n          <img src={logoText} alt=\"Phanpy\" width=\"250\" />\n        </h1>\n        <p>\n          <big>\n            <b>\n              <Link to=\"/login\" class=\"button\">\n                Log in\n              </Link>\n            </b>\n          </big>\n        </p>\n        <p class=\"desc\">A minimalistic opinionated Mastodon web client.</p>\n      </div>\n      <div id=\"why-container\">\n        <div class=\"sections\">\n          <section>\n            <img\n              src={boostsCarouselUrl}\n              alt=\"Screenshot of Boosts Carousel\"\n              loading=\"lazy\"\n            />\n            <h4>Boosts Carousel</h4>\n            <p>\n              Visually separate original posts and re-shared posts (boosted\n              posts).\n            </p>\n          </section>\n          <section>\n            <img\n              src={nestedCommentsThreadUrl}\n              alt=\"Screenshot of nested comments thread\"\n              loading=\"lazy\"\n            />\n            <h4>Nested comments thread</h4>\n            <p>Effortlessly follow conversations. Semi-collapsible replies.</p>\n          </section>\n          <section>\n            <img\n              src={groupedNotificationsUrl}\n              alt=\"Screenshot of grouped notifications\"\n              loading=\"lazy\"\n            />\n            <h4>Grouped notifications</h4>\n            <p>\n              Similar notifications are grouped and collapsed to reduce clutter.\n            </p>\n          </section>\n          <section>\n            <img\n              src={multiColumnUrl}\n              alt=\"Screenshot of multi-column UI\"\n              loading=\"lazy\"\n            />\n            <h4>Single or multi-column</h4>\n            <p>\n              By default, single column for zen-mode seekers. Configurable\n              multi-column for power users.\n            </p>\n          </section>\n          <section>\n            <img\n              src={multiHashtagTimelineUrl}\n              alt=\"Screenshot of multi-hashtag timeline with a form to add more hashtags\"\n              loading=\"lazy\"\n            />\n            <h4>Multi-hashtag timeline</h4>\n            <p>Up to 5 hashtags combined into a single timeline.</p>\n          </section>\n        </div>\n      </div>\n      <footer>\n        <hr />\n        <p>\n          <a href=\"https://github.com/cheeaun/phanpy\" target=\"_blank\">\n            Built\n          </a>{' '}\n          by{' '}\n          <a\n            href=\"https://mastodon.social/@cheeaun\"\n            target=\"_blank\"\n            onClick={(e) => {\n              e.preventDefault();\n              states.showAccount = 'cheeaun@mastodon.social';\n            }}\n          >\n            @cheeaun\n          </a>\n          .{' '}\n          <a\n            href=\"https://github.com/cheeaun/phanpy/blob/main/PRIVACY.MD\"\n            target=\"_blank\"\n          >\n            Privacy Policy\n          </a>\n          .\n        </p>\n      </footer>\n    </main>\n  );\n}\n\nexport default Welcome;\n","// Replace alert() with toastify-js\nimport Toastify from 'toastify-js';\n\nconst nativeAlert = window.alert;\nif (!window.__nativeAlert) window.__nativeAlert = nativeAlert;\n\nwindow.alert = function (message) {\n  console.debug(\n    'ALERT: This is a custom alert() function. Native alert() is still available as window.__nativeAlert()',\n  );\n  // If Error object, show the message\n  if (message instanceof Error && message?.message) {\n    message = message.message;\n  }\n  // If not string, stringify it\n  if (typeof message !== 'string') {\n    message = JSON.stringify(message);\n  }\n\n  const toast = Toastify({\n    text: message,\n    className: 'alert',\n    gravity: 'top',\n    position: 'center',\n    duration: 10_000,\n    offset: {\n      y: 48,\n    },\n    onClick: () => {\n      toast.hideToast();\n    },\n  });\n  toast.showToast();\n};\n","import './app.css';\n\nimport debounce from 'just-debounce-it';\nimport {\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'preact/hooks';\nimport { matchPath, Route, Routes, useLocation } from 'react-router-dom';\nimport 'swiped-events';\nimport { subscribe } from 'valtio';\n\nimport BackgroundService from './components/background-service';\nimport ComposeButton from './components/compose-button';\nimport { ICONS } from './components/icon';\nimport KeyboardShortcutsHelp from './components/keyboard-shortcuts-help';\nimport Loader from './components/loader';\nimport Modals from './components/modals';\nimport NotificationService from './components/notification-service';\nimport SearchCommand from './components/search-command';\nimport Shortcuts from './components/shortcuts';\nimport NotFound from './pages/404';\nimport AccountStatuses from './pages/account-statuses';\nimport Bookmarks from './pages/bookmarks';\nimport Favourites from './pages/favourites';\nimport FollowedHashtags from './pages/followed-hashtags';\nimport Following from './pages/following';\nimport Hashtag from './pages/hashtag';\nimport Home from './pages/home';\nimport HttpRoute from './pages/http-route';\nimport List from './pages/list';\nimport Lists from './pages/lists';\nimport Login from './pages/login';\nimport Mentions from './pages/mentions';\nimport Notifications from './pages/notifications';\nimport Public from './pages/public';\nimport Search from './pages/search';\nimport StatusRoute from './pages/status-route';\nimport Trending from './pages/trending';\nimport Welcome from './pages/welcome';\nimport {\n  api,\n  initAccount,\n  initClient,\n  initInstance,\n  initPreferences,\n} from './utils/api';\nimport { getAccessToken } from './utils/auth';\nimport focusDeck from './utils/focus-deck';\nimport states, { initStates, statusKey } from './utils/states';\nimport store from './utils/store';\nimport { getCurrentAccount } from './utils/store-utils';\nimport './utils/toast-alert';\n\nwindow.__STATES__ = states;\nwindow.__STATES_STATS__ = () => {\n  const keys = [\n    'statuses',\n    'accounts',\n    'spoilers',\n    'unfurledLinks',\n    'statusQuotes',\n  ];\n  const counts = {};\n  keys.forEach((key) => {\n    counts[key] = Object.keys(states[key]).length;\n  });\n  console.warn('STATE stats', counts);\n\n  const { statuses } = states;\n  const unmountedPosts = [];\n  for (const key in statuses) {\n    const $post = document.querySelector(`[data-state-post-id=\"${key}\"]`);\n    if (!$post) {\n      unmountedPosts.push(key);\n    }\n  }\n  console.warn('Unmounted posts', unmountedPosts.length, unmountedPosts);\n};\n\n// Experimental \"garbage collection\" for states\n// Every 15 minutes\n// Only posts for now\nsetInterval(() => {\n  if (!window.__IDLE__) return;\n  const { statuses, unfurledLinks, notifications } = states;\n  let keysCount = 0;\n  const { instance } = api();\n  for (const key in statuses) {\n    try {\n      const $post = document.querySelector(`[data-state-post-id~=\"${key}\"]`);\n      const postInNotifications = notifications.some(\n        (n) => key === statusKey(n.status?.id, instance),\n      );\n      if (!$post && !postInNotifications) {\n        delete states.statuses[key];\n        delete states.statusQuotes[key];\n        for (const link in unfurledLinks) {\n          const unfurled = unfurledLinks[link];\n          const sKey = statusKey(unfurled.id, unfurled.instance);\n          if (sKey === key) {\n            delete states.unfurledLinks[link];\n            break;\n          }\n        }\n        keysCount++;\n      }\n    } catch (e) {}\n  }\n  if (keysCount) {\n    console.info(`GC: Removed ${keysCount} keys`);\n  }\n}, 15 * 60 * 1000);\n\n// Preload icons\n// There's probably a better way to do this\n// Related: https://github.com/vitejs/vite/issues/10600\nsetTimeout(() => {\n  for (const icon in ICONS) {\n    if (Array.isArray(ICONS[icon])) {\n      ICONS[icon][0]?.();\n    } else {\n      ICONS[icon]?.();\n    }\n  }\n}, 5000);\n\n(() => {\n  window.__IDLE__ = true;\n  const nonIdleEvents = [\n    'mousemove',\n    'mousedown',\n    'resize',\n    'keydown',\n    'touchstart',\n    'pointerdown',\n    'pointermove',\n    'wheel',\n  ];\n  const setIdle = () => {\n    window.__IDLE__ = true;\n  };\n  const IDLE_TIME = 3_000; // 3 seconds\n  const debouncedSetIdle = debounce(setIdle, IDLE_TIME);\n  const onNonIdle = () => {\n    window.__IDLE__ = false;\n    debouncedSetIdle();\n  };\n  nonIdleEvents.forEach((event) => {\n    window.addEventListener(event, onNonIdle, {\n      passive: true,\n      capture: true,\n    });\n  });\n  window.addEventListener('blur', setIdle, {\n    passive: true,\n  });\n  // When cursor leaves the window, set idle\n  document.documentElement.addEventListener(\n    'mouseleave',\n    (e) => {\n      if (!e.relatedTarget && !e.toElement) {\n        setIdle();\n      }\n    },\n    {\n      passive: true,\n    },\n  );\n  // document.addEventListener(\n  //   'visibilitychange',\n  //   () => {\n  //     if (document.visibilityState === 'visible') {\n  //       onNonIdle();\n  //     }\n  //   },\n  //   {\n  //     passive: true,\n  //   },\n  // );\n})();\n\nsubscribe(states, (changes) => {\n  for (const [action, path, value, prevValue] of changes) {\n    // Change #app dataset based on settings.shortcutsViewMode\n    if (path.join('.') === 'settings.shortcutsViewMode') {\n      const $app = document.getElementById('app');\n      if ($app) {\n        $app.dataset.shortcutsViewMode = states.shortcuts?.length ? value : '';\n      }\n    }\n\n    // Add/Remove cloak class to body\n    if (path.join('.') === 'settings.cloakMode') {\n      const $body = document.body;\n      $body.classList.toggle('cloak', value);\n    }\n  }\n});\n\nfunction App() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [uiState, setUIState] = useState('loading');\n\n  useLayoutEffect(() => {\n    const theme = store.local.get('theme');\n    if (theme) {\n      document.documentElement.classList.add(`is-${theme}`);\n      document\n        .querySelector('meta[name=\"color-scheme\"]')\n        .setAttribute('content', theme === 'auto' ? 'dark light' : theme);\n    }\n    const textSize = store.local.get('textSize');\n    if (textSize) {\n      document.documentElement.style.setProperty(\n        '--text-size',\n        `${textSize}px`,\n      );\n    }\n  }, []);\n\n  useEffect(() => {\n    const instanceURL = store.local.get('instanceURL');\n    const code = decodeURIComponent(\n      (window.location.search.match(/code=([^&]+)/) || [, ''])[1],\n    );\n\n    if (code) {\n      console.log({ code });\n      // Clear the code from the URL\n      window.history.replaceState({}, document.title, location.pathname || '/');\n\n      const clientID = store.session.get('clientID');\n      const clientSecret = store.session.get('clientSecret');\n      const vapidKey = store.session.get('vapidKey');\n\n      (async () => {\n        setUIState('loading');\n        const { access_token: accessToken } = await getAccessToken({\n          instanceURL,\n          client_id: clientID,\n          client_secret: clientSecret,\n          code,\n        });\n\n        const client = initClient({ instance: instanceURL, accessToken });\n        await Promise.allSettled([\n          initInstance(client, instanceURL),\n          initAccount(client, instanceURL, accessToken, vapidKey),\n        ]);\n        initStates();\n        initPreferences(client);\n\n        setIsLoggedIn(true);\n        setUIState('default');\n      })();\n    } else {\n      window.__IGNORE_GET_ACCOUNT_ERROR__ = true;\n      const account = getCurrentAccount();\n      if (account) {\n        store.session.set('currentAccount', account.info.id);\n        const { client } = api({ account });\n        const { instance } = client;\n        // console.log('masto', masto);\n        initStates();\n        initPreferences(client);\n        setUIState('loading');\n        (async () => {\n          try {\n            await initInstance(client, instance);\n          } catch (e) {\n          } finally {\n            setIsLoggedIn(true);\n            setUIState('default');\n          }\n        })();\n      } else {\n        setUIState('default');\n      }\n    }\n  }, []);\n\n  let location = useLocation();\n  states.currentLocation = location.pathname;\n  // useLayoutEffect(() => {\n  //   states.currentLocation = location.pathname;\n  // }, [location.pathname]);\n\n  useEffect(focusDeck, [location, isLoggedIn]);\n\n  if (/\\/https?:/.test(location.pathname)) {\n    return <HttpRoute />;\n  }\n\n  return (\n    <>\n      <PrimaryRoutes isLoggedIn={isLoggedIn} loading={uiState === 'loading'} />\n      <SecondaryRoutes isLoggedIn={isLoggedIn} />\n      {uiState === 'default' && (\n        <Routes>\n          <Route path=\"/:instance?/s/:id\" element={<StatusRoute />} />\n        </Routes>\n      )}\n      {isLoggedIn && <ComposeButton />}\n      {isLoggedIn && <Shortcuts />}\n      <Modals />\n      {isLoggedIn && <NotificationService />}\n      <BackgroundService isLoggedIn={isLoggedIn} />\n      {uiState !== 'loading' && <SearchCommand onClose={focusDeck} />}\n      <KeyboardShortcutsHelp />\n    </>\n  );\n}\n\nfunction PrimaryRoutes({ isLoggedIn, loading }) {\n  const location = useLocation();\n  const nonRootLocation = useMemo(() => {\n    const { pathname } = location;\n    return !/^\\/(login|welcome)/.test(pathname);\n  }, [location]);\n\n  return (\n    <Routes location={nonRootLocation || location}>\n      <Route\n        path=\"/\"\n        element={\n          isLoggedIn ? (\n            <Home />\n          ) : loading ? (\n            <Loader id=\"loader-root\" />\n          ) : (\n            <Welcome />\n          )\n        }\n      />\n      <Route path=\"/login\" element={<Login />} />\n      <Route path=\"/welcome\" element={<Welcome />} />\n    </Routes>\n  );\n}\n\nfunction getPrevLocation() {\n  return states.prevLocation || null;\n}\nfunction SecondaryRoutes({ isLoggedIn }) {\n  // const snapStates = useSnapshot(states);\n  const location = useLocation();\n  // const prevLocation = snapStates.prevLocation;\n  const backgroundLocation = useRef(getPrevLocation());\n\n  const isModalPage = useMemo(() => {\n    return (\n      matchPath('/:instance/s/:id', location.pathname) ||\n      matchPath('/s/:id', location.pathname)\n    );\n  }, [location.pathname, matchPath]);\n  if (isModalPage) {\n    if (!backgroundLocation.current)\n      backgroundLocation.current = getPrevLocation();\n  } else {\n    backgroundLocation.current = null;\n  }\n  console.debug({\n    backgroundLocation: backgroundLocation.current,\n    location,\n  });\n\n  return (\n    <Routes location={backgroundLocation.current || location}>\n      {isLoggedIn && (\n        <>\n          <Route path=\"/notifications\" element={<Notifications />} />\n          <Route path=\"/mentions\" element={<Mentions />} />\n          <Route path=\"/following\" element={<Following />} />\n          <Route path=\"/b\" element={<Bookmarks />} />\n          <Route path=\"/f\" element={<Favourites />} />\n          <Route path=\"/l\">\n            <Route index element={<Lists />} />\n            <Route path=\":id\" element={<List />} />\n          </Route>\n          <Route path=\"/ft\" element={<FollowedHashtags />} />\n        </>\n      )}\n      <Route path=\"/:instance?/t/:hashtag\" element={<Hashtag />} />\n      <Route path=\"/:instance?/a/:id\" element={<AccountStatuses />} />\n      <Route path=\"/:instance?/p\">\n        <Route index element={<Public />} />\n        <Route path=\"l\" element={<Public local />} />\n      </Route>\n      <Route path=\"/:instance?/trending\" element={<Trending />} />\n      <Route path=\"/:instance?/search\" element={<Search />} />\n      {/* <Route path=\"/:anything\" element={<NotFound />} /> */}\n    </Routes>\n  );\n}\n\nexport { App };\n","import './index.css';\n\nimport './cloak-mode.css';\n\nimport { render } from 'preact';\nimport { HashRouter } from 'react-router-dom';\n\nimport { App } from './app';\n\nif (import.meta.env.DEV) {\n  import('preact/debug');\n}\n\n// AbortSignal.timeout polyfill\n// Temporary fix from https://github.com/mo/abortcontroller-polyfill/issues/73#issuecomment-1541180943\n// Incorrect implementation, but should be good enough for now\nif ('AbortSignal' in window) {\n  AbortSignal.timeout =\n    AbortSignal.timeout ||\n    ((duration) => {\n      const controller = new AbortController();\n      setTimeout(() => controller.abort(), duration);\n      return controller.signal;\n    });\n}\n\nrender(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('app'),\n);\n\n// Storage cleanup\nsetTimeout(() => {\n  try {\n    // Clean up iconify localStorage\n    Object.keys(localStorage).forEach((key) => {\n      if (key.startsWith('iconify')) {\n        localStorage.removeItem(key);\n      }\n    });\n    Object.keys(sessionStorage).forEach((key) => {\n      if (key.startsWith('iconify')) {\n        sessionStorage.removeItem(key);\n      }\n    });\n\n    // Clean up old settings key\n    localStorage.removeItem('settings:boostsCarousel');\n  } catch (e) {}\n}, 5000);\n\nwindow.__CLOAK__ = () => {\n  document.body.classList.toggle('cloak');\n};\n"],"names":["usePageVisibility","fn","deps","savedCallback","useRef","useEffect","current","handleVisibilityChange","hidden","document","visibilityState","console","STREAMING_TIMEOUT","POLL_INTERVAL","BackgroundService","memo","isLoggedIn","visible","setVisible","useState","checkLatestNotification","masto","instance","skipCheckMarkers","states","notificationsLast","notificationsIterator","v1","notifications","list","limit","sinceId","id","value","next","length","notificationsShowNew","lastReadId","markers","fetch","timeline","sub","pollNotifications","streaming","api","hasStreaming","setTimeout","user","notification","subscribe","log","entry","_a","lastCheckDate","clearTimeout","clearInterval","r","info","visible2","useInterval","catch","checkForUpdates","useHotkeys","currentCloakMode","diff","showToast","ComposeButton","handleButton","e","shiftKey","openCompose","showCompose","ignoreEventWhen","querySelector","_jsx","type","onClick","children","Icon","icon","size","alt","KeyboardShortcutsHelp","snapStates","useSnapshot","onClose","showKeyboardShortcutsHelp","hasModal","escRef","Modal","class","_jsxs","tabindex","ref","action","keys","_Fragment","className","map","Accounts","accounts","store","local","getJSON","currentAccount","session","get","moreThanOneAccount","_","reload","useReducer","x","accountsListParent","useAutoAnimate","tabIndex","account","i","isCurrent","isDefault","Avatar","url","avatarStatic","onDblClick","$select","NameText","test","showAcct","set","Menu","align","menuButton","title","MenuItem","MenuDivider","disabled","splice","MenuConfirm","subMenu","confirmLabel","menuItemClassName","href","Link","to","logo","createBackendPushSubscription","subscription","push","create","fetchBackendPushSubscription","updateBackendPushSubscription","update","removeBackendPushSubscription","remove","isPushSupported","navigator","window","getRegistration","serviceWorker","getSubscription","registration","pushManager","undefined","urlBase64ToUint8Array","base64String","padding","repeat","base64","replace","rawData","atob","outputArray","Uint8Array","charCodeAt","initSubscription","backendSubscription","err","message","sameEndpoint","vapidKey","sameKey","getCurrentAccount","applicationServerKey","vapidKeyStr","applicationServerKeyStr","updateSubscription","data","policy","removeSubscription","userVisibleOnly","DEFAULT_TEXT_SIZE","TEXT_SIZES","Settings","currentTheme","themeFormRef","targetLanguage","settings","contentTranslationTargetLanguage","systemTargetLanguage","getTranslateTargetLanguage","systemTargetLanguageText","localeCode2Text","currentTextSize","prefs","setPrefs","authenticated","onInput","formData","FormData","theme","html","classList","toggle","name","defaultChecked","fontSize","min","max","step","parseInt","documentElement","setProperty","for","target","source","alert","rel","checked","autoRefresh","boostsCarousel","contentTranslation","onChange","targetLanguages","lang","code","contentTranslationHideLanguages","contentTranslationAutoInline","cloakMode","PushNotificationsSection","style","display","gap","lineHeight","src","width","aspectRatio","verticalAlign","borderRadius","showAccount","__BUILD_TIME__","readOnly","writeText","datetime","uiState","setUIState","allowNofitications","setAllowNotifications","setNeedRelogin","pushFormRef","needRelogin","alerts","previousPolicyRef","policyEl","elements","namedItem","Object","el","warn","values","params","mention","favourite","reblog","follow","follow_request","poll","status","key","policyChanged","alertsCount","permission","isLoading","Notification","label","alert2","focusDeck","timer","columns","getElementById","modals","querySelectorAll","modal","modalFocusElement","focus","backDrop","pages","page","useLocationChange","location","useLocation","currentLocationRef","pathname","ListAddEdit","editMode","nameFieldRef","repliesPolicyFieldRef","exclusiveFieldRef","repliesPolicy","exclusive","supportsExclusive","supports","onSubmit","preventDefault","listResult","replies_policy","MUTE_DURATIONS","MUTE_DURATIONS_LABELS","LIMIT","ACCOUNT_INFO_MAX_AGE","fetchFamiliarFollowers","currentID","familiarFollowers","memFetchFamiliarFollowers","pmem","maxAge","fetchPostingStats","accountID","fetchStatuses","statuses","total","originals","replies","stats","boosts","memFetchPostingStats","fetchAccount","standalone","currentMasto","currentInstance","isString","useMemo","setInfo","sameCurrentInstance","info2","acct","avatar","bot","createdAt","displayName","emojis","fields","group","lastStatusAt","locked","note","statusesCount","username","memorial","moved","roles","header","headerStatic","headerIsAvatar","isSelf","infoHasEssentials","account2","updated","forEach","headerCornerColors","setHeaderCornerColors","followersIterator","domain","fetchFollowers","firstLoad","familiarFollowersCache","results","familiarFollowers2","newValue","familiar","followingIterator","LinkOrDiv","accountLink","postingStats","setPostingStats","renderFamiliarFollowers","setFamiliarFollowers","postingStatsUIState","setPostingStatsUIState","hasPostingStats","followers","renderPostingStats","onRelationshipChange","AccountBlock","canvas","add","pixelDimension","createElement","ctx","g","b","height","drawImage","colors","getImageData","a","dataLength","color","lightenRGB","rgbColors","avatarSize","external","role","accountInstance","handleContentLinks","enhanceContent","verifiedAt","__html","EmojiText","follower","heading","fetchAccounts","shortenNumber","followersCount","fetchFollowing","followingCount","niceDateTime","FAMILIAR_FOLLOWERS_LIMIT","currentAuthenticated","relationship","privateNote","following","showingReblogs","notifying","followedBy","blocking","blockedBy","muting","mutingNotifications","requested","domainBlocking","endorsed","currentInfo","setIsSelf","q","fetchRelationships","relationships","setRelationshipUIState","relationship2","updateAccount","setRelationship","loading","relationshipUIState","menuInstanceRef","setShowAddRemoveLists","showPrivateNoteModal","setShowPrivateNoteModal","showTranslatedBio","showAddRemoveLists","_b","instanceRef","portal","body","setShowTranslatedBio","clipboard","share","newRelationship","openTrigger","duration","counter","Loader","confirm","AddRemoveListsSheet","PrivateNoteSheet","luminence","alpha","urlObj","host","path","TranslatedBioSheet","fieldsText","Math","getHTMLText","text","lists","setLists","listsContainingAccount","setListsContainingAccount","c","listsContainingAccount2","lists2","reloadCount","showListAddEditModal","setShowListAddEditModal","sort","l","inList","accountIds","result","abrupt","textareaRef","initialNote","e2","trim","AccountSheet","propInstance","AccountInfo","lookup","skip_webfinger","v2","search","resolve","URL","Drafts","drafts","setDrafts","db","ns","getCurrentAccountNS","ownKeys","filter","startsWith","getMany","Date","updatedAt","getTime","hasDrafts","draft","draftStatus","replyTo","updatedAtDate","replyToStatus","MiniDraft","spoilerText","mediaAttachments","hasPoll","options","hasMedia","firstImageMedia","media","image","file","objectURL","createObjectURL","hasPollOrMedia","GenericAccounts","setAccounts","showMore","setShowMore","showGenericAccounts","staticAccounts","showReactions","loadAccounts","done","Array","isArray","prev","reloadGenericAccounts","_types","InView","MediaAltModal","forceTranslate","setForceTranslate","differentLanguage","localeMatch","find","dir","whiteSpace","textWrap","TranslationBlock","sourceLanguage","clamp","gammaToLinear","pow","linearToGamma","rgb2oklab","m","s","cbrt","oklab2rgb","L","round","MediaModal","statusID","index","carouselRef","currentIndex","setCurrentIndex","carouselFocusItem","useLayoutEffect","scrollIntoView","prevStatusID","scrollLeft","clientWidth","differentStatusID","scrollTo","left","behavior","showControls","setShowControls","handleSwipe","addEventListener","removeEventListener","handleScroll","passive","contains","blurhash","accentColor","averageColor","getBlurHashAverageColor","labAverageColor","join","description","showMediaAlt","Media","showOriginal","stopPropagation","overflow","position","boundingBoxPadding","menuClassName","MenuLink","remoteUrl","matchMedia","matches","floatingButtonUrl","multiColumnUrl$1","tabMenuBarUrl","AsyncText","setText","Promise","then","SHORTCUTS_LIMIT","TYPES","TYPE_TEXT","public","bookmarks","favourites","hashtag","trending","mentions","TYPE_PARAMS","placeholder","notRequired","pattern","fetchListTitle","fetchAccountTitle","SHORTCUTS_META","subtitle","query","split","ShortcutsSettings","shortcuts","showForm","setShowForm","showImportExport","setShowImportExport","shortcutsListParent","opacity","textTransform","imgURL","multiColumnUrl","shortcutsViewMode","Boolean","shortcut","shortcutsArr","from","temp","shortcutIndex","justifyContent","alignItems","currentTarget","ShortcutForm","mode","ImportExport","FETCH_MAX_AGE","fetchLists","setFollowedHashtags","currentType","iterator","tags","form","formRef","input","setCurrentType","required","defaultValue","autocorrect","followedHashtags","tag","shortcutsStr","compressToEncodedURIComponent","importUIState","setImportUIState","parsedImportShortcutStr","importShortcutStr","parsed","parse","hasCurrentSettings","nonUniqueShortcuts","every","exceededLimit","newShortcuts","changes","prevValue","Modals","navigate","useNavigate","Compose","__COMPOSE__","editStatus","newStatus","reloadStatusPage","post","reply","edit","delay","toast","hideToast","prevLocation","showSettings","showAccounts","destination","showDrafts","showMediaModal","showShortcutsSettings","FollowRequestButtons","requestState","setRequestState","hasRelationship","followRequests","authorize","Error","NOTIFICATION_ICONS","contentText","count","reblog_reply","favourite_reply","targetAccount","AVATARS_LIMIT","isStatic","report","_accounts","_statuses","actualStatus","actualStatusID","isVoted","voted","isReplyToOthers","inReplyToAccountId","favsCount","reblogsCount","includes","showAvatar","formattedCreatedAt","toLocaleString","genericAccountsHeading","handleOpenGenericAccounts","debug","RelativeTime","format","Fragment","type2","status2","Status","TruncatedLink","dispatchEvent","clientX","clientY","props","useTruncated","NotificationService","routeNotification","accessToken","setShowNotificationSheet","showNotificationSheet","sameInstance","getAccountByAccessToken","isFollow","notificationAccount","hasAccount","hasStatus","event","id2","hash","accessToken2","handleMessage","clearAppBadge","tagName","instanceURL","SearchForm","forwardRef","searchParams","setSearchParams","useSearchParams","searchMenuOpen","setSearchMenuOpen","setQuery","searchFieldRef","useImperativeHandle","setValue","select","blur","encodeURIComponent","autocomplete","autocapitalize","onSearch","onFocus","onBlur","onKeyDown","focusItem","nextItem","nextElementSibling","parentElement","firstItem","prevItem","previousElementSibling","lastItem","click","top","SearchCommand","showSearch","setShowSearch","searchFormRef","isSearchPage","closeSearch","enabled","enableOnFormTags","Shortcuts","shortcutsColumnsMode","menuRef","formattedShortcuts","pin","handler","closeMenu","onContextMenu","updatesButton","viewScroll","Menu2","containerProps","useWindowSize","safeBoundingBoxPadding","repositionFlag","groupBoosts","newValues","boostStash","serialBoosts","item","boostStashID","items","half","floor","slice","dedupeBoosts","boostedStatusIDs","filteredItems","statusKey","boosterID","groupContext","contexts","contextIndex","t","repliedItem","j","self","context","inReplyToId","firstItemAccountID","newItems","appliedContextIndices","contextItems","aDate","bDate","i2","useScroll","scrollableRef","distanceFromStart","distanceFromEnd","scrollThresholdStart","scrollThresholdEnd","direction","distanceFromStartPx","_distanceFromStartPx","distanceFromEndPx","_distanceFromEndPx","scrollDirection","setScrollDirection","reachStart","setReachStart","reachEnd","setReachEnd","nearReachStart","setNearReachStart","nearReachEnd","setNearReachEnd","isVertical","scrollableElement","previousScrollStart","scrollTop","onScroll","scrollHeight","scrollWidth","clientHeight","scrollStart","scrollDimension","clientDimension","scrollDistance","abs","init","Event","MediaPost","parent","onMediaClick","sKey","accountId","accountURL","accountEmojis","repliesCount","reblogged","favourited","favouritesCount","bookmarked","muted","sensitive","visibility","language","editedAt","filtered","card","content","uri","_deleted","_pinned","debugHover","filterContext","useContext","FilterContext","isFiltered","filterInfo","mediaKey","titlesStr","hasSpoiler","NavMenu","setCurrentAccount","setMoreThanOneAccount","acc","showFollowing","bindLongPress","useLongPress","threshold","detect","cancelOnMovement","buttonRef","menuState","setMenuState","mutesIterator","fetchMutes","mutes","blocksIterator","fetchBlocks","blocks","open","state","squircle","ControlledMenu","anchorRef","zIndex","unmountOnClose","appVersion","commitHash","__COMMIT_HASH__","scrollIntoViewOptions","block","inline","Timeline","titleComponent","emptyText","errorText","useItemID","fetchItems","checkForUpdatesInterval","headerStart","headerEnd","timelineStart","refresh","view","setItems","showNew","setShowNew","allowGrouping","loadItems","useDebouncedCallback","items2","itemsSelector","jRef","activeItem","activeItemRect","closest","getBoundingClientRect","allItems","activeItemIndex","indexOf","itemRect","topmostItem","kRef","findLast","oRef","prevView","useCallback","disableIdleCheck","loadOrCheckUpdates","inBackground","noPointers","__IDLE__","timeDiff","hasUpdate","lastHiddenTime","node","hiddenUI","TimelineItem","inView","bFiltered","isCarousel","StatusCarousel","aFiltered","statusID2","reblog2","actualStatusID2","url2","_pinned2","manyItems","isMiddle","isSpoiler","showCompact","_differentAuthor","TimelineStatusCompact","itemKey","statusPeekText","statusThreadNumber","MIN_YEAR","MIN_YEAR_MONTH","supportsInputMonth","setAttribute","_isSearchEnabled","isSearchEnabled","AccountStatuses","useParams","month","excludeReplies","excludeBoosts","tagged","accountStatusesIterator","allSearchParams","setAccount","searchOffsetRef","searchEnabled","setSearchEnabled","isValidMonth","_year","_month","monthIndex","after","afterStr","before","beforeStr","searchResults","saveStatus","value2","offset","pinnedStatuses","pinnedStatusesIds","exclude_replies","fetchPromise","fetchAccountPromiseRef","setFeaturedTags","useTitle","cachedAccount","featuredTags","accountInfoMemo","filterBarRef","TimelineStart","validity","active","allowSwitch","offsetLeft","fetchAccountStatuses","masto2","monthFieldRef","checkValidity","year","minYear","maxYear","maxMonth","minMonth","yearFieldRef","Bookmarks","bookmarksIterator","fetchBookmarks","Favourites","favouritesIterator","fetchFavourites","FollowedHashtags","followedTags","localeCompare","Following","homeIterator","latestItem","payload","fetchHome","TAGS_LIMIT_PER_MODE","TOTAL_TAGS_LIMIT","Hashtags","mediaView","columnMode","hashtags","linkParams","hashtagTitle","hashtagPostTitle","maxID","fetchHashtags","timelines","any","maxId","onlyMedia","skipThreading","since_id","followUIState","setFollowUIState","reachLimit","setDownOverflow","finally","MenuHeader","FocusableItem","newHashtag","MenuGroup","exists","some","newInstance","List","listIterator","fetchList","setList","showManageMembersModal","setShowManageMembersModal","ListManageMembers","MEMBERS_LIMIT","listID","members","setMembers","membersIterator","fetchMembers","member","as","RemoveAddButton","removed","setRemoved","emptySearchParams","URLSearchParams","Mentions","stateType","setStateType","mentionsIterator","fetchMentions","types","conversationsIterator","latestConversationItem","lastStatus","fetchConversations","args","notificationTypeKeys","fixNotifications","groupNotifications","notificationsMap","cleanNotifications","virtualType","date","mappedNotification","mappedAccount","n","cleanNotifications2","notificationsMap2","Notifications","notificationID","notificationAccessToken","onlyMentions","setOnlyMentions","setFollowRequests","announcements","setAnnouncements","excludeTypes","allNotifications","groupedNotifications","notificationsLastFetchTime","fetchFollowRequests","loadFollowRequests","requests","fetchAnnouncements","loadNotifications","fetchNotificationsPromise","fetchNotifications","announcements2","loadUpdates","unsub","v","subscribeKey","yesterdayDate","todayDate","currentDay","showTodayEmpty","announcementsListRef","announcement","AnnouncementBlock","notificationDay","differentDay","contact","contactAccount","startsAt","allDay","publishedAt","endsAt","published","read","reactions","publishedAtDate","publishedDateText","updatedAtText","dangerouslySetInnerHTML","staticUrl","me","reaction","Public","isLocal","publicIterator","fetchPublic","prompt","toLowerCase","fetchLinks","trends","links","Trending","setHashtags","setLinks","trendIterator","fetchTrend","links2","link","history","cur","reduce","authorName","authorUrl","imageDescription","providerName","providerUrl","title2","Columns","components","Hashtag","Component","error","Home","NotificationsLink","notificationLinkRef","NotificationsMenu","NOTIFICATIONS_LIMIT","NOTIFICATIONS_DISPLAY_LIMIT","now","hasFollowRequests","setHasFollowRequests","statusRegex","statusNoteRegex","getInstanceStatusURL","hostname","match","noteId","HttpRoute","statusURL","Lists","instancesListURL","VITE_CLIENT_NAME","CLIENT_NAME","VITE_WEBSITE","WEBSITE","import","SCOPES","registerApplication","registrationParams","client_name","redirect_uris","origin","scopes","website","method","headers","toString","json","registrationJSON","getAuthorizationURL","client_id","scope","redirect_uri","response_type","authorizationParams","authorizationURL","client_secret","grant_type","tokenResponse","Login","instanceURLRef","cachedInstanceURL","instanceText","setInstanceText","instancesList","setInstancesList","submitInstance","vapid_key","instance2","instancesSuggestions","bStartsWith","aStartsWith","textAlign","SHORT_LIMIT","Search","offsetRef","statusResults","setStatusResults","accountResults","setAccountResults","hashtagResults","setHashtagResults","setTypeResultsFunc","loadResults","filterBarParent","SUBCOMMENTS_OPEN_ALL_LIMIT","MAX_WEIGHT","cachedRepliesToggle","cachedStatusesMap","scrollPositions","resetScrollPosition","STATUSES_SELECTOR","STATUS_URL_REGEX","StatusPage","mediaParam","mediaOnlyParam","mediaIndex","showMedia","mediaStatusID","mediaStatus","getStatus","showMediaOnly","heroStatus","setHeroStatus","closeLink","matchStatusPath","matchPath","handleMediaClose","delete","StatusThread","navigation","translate","setStatuses","heroStatusRef","totalDescendants","debounce","scrollOffsets","reloadHero","heroTimer","cachedStatuses","reallyCachedStatuses","heroFetch","pRetry","contextFetch","heroStatus2","_replies","_r","expandReplies","weight","descendants","missingStatuses","ancestors2","ancestors","ancestorsIsThread","nestedDescendants","__replies","ancestor","isThread","allStatuses","offsetTop","heroLimit","setLimit","scrollPosition","threadifyStatus","newScrollTop","newScrollOffsets","contextURL","initContext","statusWeightCache","div","apiCache","heroDisplayName","heroContentText","postInstance","hasDescendants","innerHTML","heroInView","postSameInstance","allStatusLinks","activeStatus","activeStatusIndex","nextStatus","statusLink","onView","setHeroInView","heroPointer","statusLinkRect","topmostStatusLink","activeStatusRect","prevStatus","details","initialPageState","handleMediaClick","handleStatusLinkClick","descendant","thread","isHero","renderStatus","SubComments","withinContext","prevEntry","level","openAll","prevLocationIsStatusPage","entries","arr","viewMode","setViewMode","button","buttons","diveDeep","replies2","replies3","totalComments","accWeight","totalWeight","calcStatusWeight","openBefore","hasParentThread","detailsRef","sameCount","open2","shortReply","dataset","MEDIA_VIRTUAL_LENGTH","CARD_VIRTUAL_LENGTH","WEIGHT_SEGMENT","cachedWeight","htmlContentLength","mediaLength","pollLength","POLL_VIRTUAL_LENGTH","cardLength","StatusRoute","boostsCarouselUrl","groupedNotificationsUrl","multiHashtagTimelineUrl","nestedCommentsThreadUrl","logoText","Welcome","marginBlockEnd","nativeAlert","__nativeAlert","Toastify","gravity","y","__STATES__","__STATES_STATS__","counts","unmountedPosts","setInterval","unfurledLinks","$post","postInNotifications","unfurled","keysCount","ICONS","_d","_c","nonIdleEvents","setIdle","debouncedSetIdle","onNonIdle","$app","$body","setIsLoggedIn","textSize","decodeURIComponent","clientID","clientSecret","initPreferences","client","initInstance","initStates","PrimaryRoutes","Routes","Route","nonRootLocation","element","backgroundLocation","getPrevLocation","isModalPage","timeout","AbortSignal","controller","AbortController","abort","signal","render","HashRouter","App","localStorage","removeItem","sessionStorage","__CLOAK__"],"mappings":"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"}