{"version":3,"mappings":"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","names":["usePageVisibility","fn","deps","savedCallback","useRef","useEffect","current","handleVisibilityChange","hidden","document","visibilityState","console","STREAMING_TIMEOUT","POLL_INTERVAL","BackgroundService","memo","isLoggedIn","visible","setVisible","useState","checkLatestNotification","masto","instance","skipCheckMarkers","states","notificationsLast","notificationsIterator","v1","notifications","list","limit","sinceId","id","value","next","length","notificationsShowNew","lastReadId","markers","fetch","timeline","sub","pollNotifications","streaming","api","hasStreaming","setTimeout","user","notification","subscribe","log","entry","_a","checkForUpdates","clearTimeout","clearInterval","r","info","visible2","lastCheckDate","useHotkeys","currentCloakMode","Date","diff","isSafari","test","navigator","userAgent","openOSK","fauxEl","createElement","style","position","top","left","opacity","body","appendChild","focus","removeChild","ComposeButton","handleButton","e","shiftKey","openCompose","showCompose","ignoreEventWhen","querySelector","_jsx","type","onClick","children","Icon","icon","size","alt","KeyboardShortcutsHelp","snapStates","useSnapshot","onClose","showKeyboardShortcutsHelp","hasModal","Modal","class","tabindex","action","keys","_jsxs","_Fragment","className","map","Accounts","accounts","store","local","getJSON","currentAccount","session","get","moreThanOneAccount","_","reload","useReducer","x","accountsListParent","useAutoAnimate","tabIndex","ref","account","i","isCurrent","isDefault","Avatar","url","avatarStatic","onDblClick","$select","NameText","showAcct","set","Menu2","align","menuButton","title","MenuItem","MenuDivider","disabled","splice","MenuConfirm","subMenu","confirmLabel","menuItemClassName","href","Link","to","logo","createBackendPushSubscription","subscription","push","create","fetchBackendPushSubscription","updateBackendPushSubscription","update","removeBackendPushSubscription","remove","isPushSupported","window","getRegistration","serviceWorker","getSubscription","registration","pushManager","undefined","urlBase64ToUint8Array","base64String","padding","repeat","base64","replace","rawData","atob","outputArray","Uint8Array","charCodeAt","initSubscription","backendSubscription","err","message","sameEndpoint","vapidKey","sameKey","getCurrentAccount","applicationServerKey","vapidKeyStr","applicationServerKeyStr","updateSubscription","data","policy","removeSubscription","userVisibleOnly","define_import_meta_env_default","focusDeck","timer","columns","getElementById","modals","querySelectorAll","modal","modalFocusElement","backDrop","pages","page","useLocationChange","location","useLocation","currentLocationRef","pathname","FETCH_MAX_AGE","MAX_AGE","fetchLists","pmem","lists","sort","a","b","localeCompare","updatedAt","now","maxAge","getLists","fetchList","getList","theList","getListTitle","addListStore","updateListStore","index","deleteListStore","listID","findIndex","ListAddEdit","uiState","setUIState","editMode","nameFieldRef","repliesPolicyFieldRef","exclusiveFieldRef","repliesPolicy","checked","exclusive","supportsExclusive","supports","onSubmit","preventDefault","formData","FormData","target","listResult","replies_policy","alert","MUTE_DURATIONS","MUTE_DURATIONS_LABELS","LIMIT","ACCOUNT_INFO_MAX_AGE","fetchFamiliarFollowers","currentID","familiarFollowers","memFetchFamiliarFollowers","fetchPostingStats","accountID","fetchStatuses","statuses","total","originals","replies","status","forEach","stats","boosts","memFetchPostingStats","fetchAccount","standalone","authenticated","currentMasto","currentInstance","isString","useMemo","setInfo","sameCurrentInstance","info2","acct","avatar","bot","createdAt","displayName","emojis","fields","group","lastStatusAt","locked","note","statusesCount","username","memorial","moved","roles","header","headerStatic","headerIsAvatar","isSelf","infoHasEssentials","account2","updated","headerCornerColors","setHeaderCornerColors","followersIterator","toUnicode","domain","fetchFollowers","firstLoad","familiarFollowersCache","results","familiarFollowers2","newValue","familiar","followingIterator","LinkOrDiv","accountLink","postingStats","setPostingStats","renderFamiliarFollowers","setFamiliarFollowers","postingStatsUIState","setPostingStatsUIState","hasPostingStats","followers","renderPostingStats","onRelationshipChange","onProfileUpdate","useCallback","newAccount","AccountBlock","rel","stopPropagation","onError","src","ctx","canvas","onLoad","add","pixelDimension","rgbColors","OffscreenCanvas","g","width","height","imageSmoothingEnabled","drawImage","colors","getImageData","dataLength","lightenRGB","color","avatarSize","handle","showToast","clipboard","MenuLink","role","accountInstance","enhanceContent","name","verifiedAt","__html","EmojiText","follower","showGenericAccounts","heading","fetchAccounts","followersCount","shortenNumber","squircle","fetchFollowing","followingCount","Math","RelatedActions","FAMILIAR_FOLLOWERS_LIMIT","sameInstance","following","showingReblogs","currentInfo","setCurrentInfo","notifying","followedBy","blocking","blockedBy","muting","mutingNotifications","requested","domainBlocking","endorsed","privateNote","v2","q","setRelationshipUIState","relationships","fetchRelationships","relationship2","setRelationship","setIsSelf","relationship","showAddRemoveLists","setShowAddRemoveLists","showPrivateNoteModal","setLists","updateAccount","niceDateTime","showTranslatedBio","showEditProfile","setShowPrivateNoteModal","lists2","currentAuthenticated","loading","onMenuChange","setShowTranslatedBio","reblogs","niceAccountURL","error","share","SubMenu","newRelationship","duration","counter","setShowEditProfile","relationshipUIState","Loader","TranslatedBioSheet","EditProfileSheet","AddRemoveListsSheet","luminence","alpha","urlObj","state","host","getHTMLText","text","fieldsText","path","punycode","TranslationBlock","setListsContainingAccount","reloadCount","c","listsContainingAccount2","showListAddEditModal","setShowListAddEditModal","inList","listsContainingAccount","accountIds","result","PrivateNoteSheet","initialNote","_b","textareaRef","e2","acc","setAccount","source","fieldsAttributesRef","displayName2","note2","fieldsAttributesFields","field","key","fieldsAttributes","FieldsAttributesRow","hasValue","server","setHasValue","defaultValue","required","AccountSheet","propInstance","AccountInfo","lookup","skip_webfinger","search","resolve","accountURL","URL","hostname","Drafts","drafts","setDrafts","db","ns","getCurrentAccountNS","ownKeys","filter","startsWith","getMany","getTime","hasDrafts","abrupt","draft","draftStatus","replyTo","updatedAtDate","replyToStatus","MiniDraft","poll","spoilerText","mediaAttachments","hasPoll","options","hasMedia","firstImageMedia","media","image","file","objectURL","createObjectURL","hasPollOrMedia","EmbedModal","html","dangerouslySetInnerHTML","relationshipsMap","uniqueAccountIds","reduce","includes","GenericAccounts","excludeRelationshipAttrs","postID","isCurrentInstance","setAccounts","showMore","setShowMore","staticAccounts","showReactions","setRelationshipsMap","loadRelationships","loadAccounts","done","Array","isArray","theAccount","find","j","_types","prev","newAccounts","reloadGenericAccounts","post","Status","reblog","favourite","showStats","InView","MediaAltModal","lang","forceTranslate","setForceTranslate","targetLanguage","getTranslateTargetLanguage","contentTranslationHideLanguages","settings","differentLanguage","localeMatch","l","supportsTTS","speak","dir","whiteSpace","textWrap","sourceLanguage","clamp","min","max","gammaToLinear","pow","linearToGamma","rgb2oklab","m","s","cbrt","oklab2rgb","L","round","CATEGORIES","CATEGORIES_INFO","spam","label","description","legal","violation","stampLabel","other","excludeStamp","ReportModal","split","rules","currentDomain","getCurrentInstance","selectedCategory","setSelectedCategory","showRules","setShowRules","rulesRef","hasRules","setHasRules","previewMode","useAvatarStatic","showActivity","entries","Object","fromEntries","category","comment","forward","ruleIds","reports","accountId","statusIds","Fragment","rule","for","maxlength","rows","floatingButtonUrl","multiColumnUrl$1","tabMenuBarUrl","MAX_FETCH","fetchFollowedTags","iterator","followedTags","tags","fetchCount","getFollowedTags","fauxDiv","extractTagsFromStatus","content","hashtagLinks","AsyncText","setText","Promise","then","SHORTCUTS_LIMIT","TYPES","TYPE_TEXT","public","bookmarks","favourites","hashtag","trending","mentions","TYPE_PARAMS","notRequired","placeholder","pattern","fetchAccountTitle","SHORTCUTS_META","excludeViewMode","subtitle","query","encodeURIComponent","join","ShortcutsSettings","shortcuts","showForm","setShowForm","showImportExport","setShowImportExport","shortcutsListParent","fontSize","textTransform","imgURL","multiColumnUrl","shortcutsViewMode","onChange","Boolean","shortcut","values","excludedViewMode","shortcutsArr","from","temp","shortcutIndex","display","justifyContent","alignItems","currentTarget","ShortcutForm","mode","ImportExport","FORM_NOTES","setFollowedHashtags","currentType","form","formRef","input","setCurrentType","switch","autocorrect","followedHashtags","tag","compressToEncodedURIComponent","shortcutsStr","importUIState","setImportUIState","parsedImportShortcutStr","importShortcutStr","parsed","parse","hasCurrentSettings","shortcutsImportFieldRef","onInput","shortcutSettingsCloudImportExport","v","dt","dispatchEvent","some","nonUniqueShortcuts","menuFooter","every","exceededLimit","newShortcuts","newNote","settingsJSON2","settingsJSON","Compose","lazy","__vitePreload","changes","prevValue","Modals","navigate","useNavigate","IntlSegmenterSuspense","__COMPOSE__","editStatus","newStatus","reloadStatusPage","reply","edit","delay","toast","hideToast","prevLocation","showSettings","Settings","showAccounts","showAccount","destination","showDrafts","showMediaModal","classList","contains","MediaModal","statusID","showShortcutsSettings","showMediaAlt","showEmbedModal","showReportModal","FollowRequestButtons","requestState","setRequestState","hasRelationship","followRequests","authorize","Error","NOTIFICATION_ICONS","mention","follow","follow_request","severed_relationships","emoji_reaction","emojiText","emoji","emoji_url","staticUrl","CustomEmoji","contentText","count","reblog_reply","favourite_reply","targetAccount","SEVERED_RELATIONSHIPS_TEXT","account_suspension","targetName","domain_block","user_domain_block","AVATARS_LIMIT","Notification","isStatic","disableContextMenu","report","event","_accounts","_statuses","actualStatus","actualStatusID","isVoted","voted","isReplyToOthers","inReplyToAccountId","favsCount","reblogsCount","showAvatar","emojiURL","shortcode","formattedCreatedAt","toLocaleString","genericAccountsHeading","handleOpenGenericAccounts","statusKey","debug","RelativeTime","datetime","format","type2","status2","TruncatedLink","onContextMenu","clientX","clientY","readOnly","props","useTruncated","oldProps","newProps","accessToken","NotificationService","routeNotification","useLayoutEffect","notificationAccount","hasAccount","hash","warn","id2","setShowNotificationSheet","showNotificationSheet","tagName","instanceURL","SearchForm","forwardRef","searchParams","setSearchParams","useSearchParams","searchMenuOpen","setSearchMenuOpen","setQuery","searchFieldRef","useImperativeHandle","setValue","select","blur","params","autocomplete","autocapitalize","spellCheck","onSearch","onFocus","onBlur","onKeyDown","focusItem","nextItem","nextElementSibling","parentElement","el","firstItem","prevItem","previousElementSibling","lastItem","click","queryType","SearchCommand","showSearch","setShowSearch","searchFormRef","isSearchPage","closeSearch","enabled","enableOnFormTags","Shortcuts","shortcutsColumnsMode","menuRef","hasLists","formattedShortcuts","pin","handler","parseInt","closeMenu","updatesButton","instanceRef","overflow","viewScroll","menuClassName","gap","groupBoosts","newValues","boostStash","serialBoosts","item","boostStashID","items","half","floor","slice","dedupeBoosts","boostedStatusIDs","filteredItems","boosterID","statusKey2","groupContext","contextIndex","contexts","t","repliedItem","self","context","inReplyToId","firstItemAccountID","newItems","appliedContextIndices","contextItems","aDate","bDate","i2","sKey","queueMicrotask","fetchStatus","saveStatus","skipThreading","statusReply","assignFollowedTags","statusFollowedTags","statusWithFollowedTags","itemFollowedTags","extractedTags","clearFollowedTagsState","useScroll","scrollableRef","distanceFromStart","distanceFromEnd","scrollThresholdStart","scrollThresholdEnd","direction","distanceFromStartPx","_distanceFromStartPx","distanceFromEndPx","_distanceFromEndPx","scrollDirection","setScrollDirection","reachStart","setReachStart","reachEnd","setReachEnd","nearReachStart","setNearReachStart","nearReachEnd","setNearReachEnd","isVertical","scrollableElement","previousScrollStart","scrollTop","scrollLeft","onScroll","scrollHeight","scrollWidth","clientHeight","clientWidth","scrollStart","scrollDimension","clientDimension","scrollDistance","abs","addEventListener","passive","removeEventListener","init","Event","useScrollFn","callback","useThrottledCallback","MediaPost","parent","onMediaClick","accountEmojis","repliesCount","reblogged","favourited","favouritesCount","bookmarked","muted","sensitive","visibility","language","editedAt","filtered","card","uri","_deleted","_pinned","debugHover","filterContext","useContext","FilterContext","isFiltered","filterInfo","hasSpoiler","readingExpandMedia","prefs","filterTitleStr","titlesStr","showSpoilerMedia","Media","supportsTouch","NavMenu","showFollowing","bindLongPress","useLongPress","threshold","detect","cancelOnMovement","buttonRef","menuState","setMenuState","boundingBoxPadding","safeBoundingBoxPadding","mutesIterator","fetchMutes","mutes","blocksIterator","fetchBlocks","blocks","buttonClickTS","ControlledMenu","anchorRef","containerProps","zIndex","portal","unmountOnClose","appVersion","commitHash","__COMMIT_HASH__","confirm","openTrigger","scrollIntoViewOptions","block","inline","behavior","Timeline","titleComponent","emptyText","errorText","useItemID","boostsCarousel","fetchItems","checkForUpdatesInterval","headerStart","headerEnd","timelineStart","refresh","view","showFollowedTags","showReplyParent","setItems","showNew","setShowNew","allowGrouping","loadItems","useDebouncedCallback","otherPosts","pinnedPosts","items2","itemsSelector","jRef","activeItem","activeItemRect","closest","getBoundingClientRect","allItems","activeItemIndex","indexOf","itemRect","topmostItem","kRef","findLast","oRef","handleLoadNewPosts","showNewPostsIndicator","dotRef","headerRef","nearReachStart2","hiddenUI","prevView","disableIdleCheck","loadOrCheckUpdates","inBackground","noPointers","__IDLE__","timeDiff","hasUpdate","useInterval","lastHiddenTime","node","TimelineItem","inView","fItems","bFiltered","isCarousel","aFiltered","reblog2","_pinned2","actualStatusID2","statusID2","url2","StatusCarousel","manyItems","isMiddle","isSpoiler","showCompact","_differentAuthor","isStart","isEnd","TimelineStatusCompact","itemKey","enableCommentHint","endButtonRef","render","setRender","newID","oldID","carouselRef","startButtonRef","statusPeekText","statusPeek","statusThreadNumber","MIN_YEAR","MIN_YEAR_MONTH","supportsInputMonth","setAttribute","_isSearchEnabled","isSearchEnabled","AccountStatuses","useParams","month","excludeReplies","excludeBoosts","tagged","accountStatusesIterator","allSearchParams","searchOffsetRef","searchEnabled","setSearchEnabled","isValidMonth","_year","_month","monthIndex","after","afterStr","before","beforeStr","searchResults","value2","offset","pinnedStatuses","pinnedStatusesIds","exclude_replies","fetchPromise","fetchAccountPromiseRef","setFeaturedTags","featuredTags","cachedAccount","filterBarRef","TimelineStart","month2","date","year","validity","valid","active","allowSwitch","offsetLeft","fetchAccountStatuses","masto2","monthFieldRef","checkValidity","minYear","maxYear","maxMonth","minMonth","yearFieldRef","Bookmarks","useTitle","bookmarksIterator","fetchBookmarks","catchupUrl","FILTER_CONTEXT","RANGES","FILTER_LABELS","FILTER_SORTS","FILTER_GROUPS","FILTER_VALUES","Filtered","Groups","Boosts","Replies","Original","FILTER_CATEGORY_TEXT","SORT_BY_TEXT","density","Catchup","showTopLinks","setShowTopLinks","fetchHome","maxCreatedAt","maxCreatedAtDate","allResults","mainloop","homeIterator","createdAtDate","selfPost","addedResults","catchupRangeRef","catchupLastRef","handleCatchupClick","catchupID","catchup","posts","setPosts","reloadCatchups","setLastCatchupEndAt","prevCatchups","setPrevCatchups","lastCatchupEndAt","catchups","ownCatchups","trimmedCatchups","lastCatchups","restCatchups","endAt","startAt","reloadCatchupsCount","filtereds","groups","_followedTags","_e","thePost","__FILTER","links","sharers","links2","link","topLinks","shared","linksLoop","likes","filteredPosts","authors","authorCounts","selectedFilterCategory","filteredPosts2","setSelectedAuthor","range","sortBy","authorsHash","setSortOrder","authorCountsMap","postFilterMatches","boostedPosts","__BOOSTERS","selectedAuthor","filteredPostsMap","authorID","authorCountsList","sortedFilteredPosts","aAccountID","authorIndices","order","bAccountID","aIndex","bIndex","postDensity","bDensity","aDensity","sortOrder","groupBy","prevGroup","authorsListParent","autoAnimated","postsBarType","autoAnimate","postsBar","postsBins","binByTime","posts2","isFiltered2","lastCatchupRange","groupByText","authorUsername","sortOrderIndex","authorElement","scrollableRect","authorRect","right","showHelp","setShowHelp","scrollIntoView","hlRef","escRef","ignoreModifiers","setRange","dtf","pc","yes","setSelectedFilterCategory","setSortBy","setGroupBy","transform","blurhash","imageDescription","publishedAt","accentColor","averageColor","labAverageColor","filterCounts","toLowerCase","author","paddingInline","showSeparator","IntersectionPostLineItem","isFollowedTags","PostLine","isReplyTo","root","show","setShow","observer","IntersectionObserver","isIntersecting","unobserve","rootMargin","observe","MEDIA_DENSITY","pollContent","cur","htmlContentLength","CARD_DENSITY","PostPeek","isThread","_thread","showMedia","postText","emojifyText","o","multiple","remoteMediaURL","mediaURL","MEDIA_SIZE","gifv","video","audio","PostStats","locale","numBins","dates","bins","Intl","minDate","binIndex","DateTimeFormat","Favourites","favouritesIterator","fetchFavourites","FILTER_CONTEXT_UNIMPLEMENTED","FILTER_CONTEXT_LABELS","home","thread","EXPIRY_DURATIONS","EXPIRY_DURATIONS_LABELS","Filters","showFiltersAddEditModal","setShowFiltersAddEditModal","filters","setFilters","keywords","expiresAt","k","keyword","ExpiryStatus","_id","incID","FiltersAddEdit","filterAction","hasExpiry","expiresAtDate","editKeywords","setEditKeywords","keywordsRef","setRemovedKeyword_IDs","filteredEditKeywords","setRemovedKeywordIDs","removedKeyword_IDs","title2","keywordIDs","getAll","keywordKeywords","keywordWholeWords","wholeWord","removedKeywordIDs","keywordsAttributes","context2","expiresIn","filterResult","_id2","defaultChecked","showNeverExpires","expired","rerender","FollowedHashtags","Following","latestItem","latestItemChanged","payload","TAGS_LIMIT_PER_MODE","TOTAL_TAGS_LIMIT","Hashtags","mediaView","columnMode","hashtags","trim","linkParams","hashtagTitle","hashtagPostTitle","maxID","fetchHashtags","timelines","any","maxId","onlyMedia","since_id","followUIState","setFollowUIState","reachLimit","setDownOverflow","catch","finally","MenuHeader","FocusableItem","newHashtag","MenuGroup","exists","newInstance","List","listIterator","setList","showManageMembersModal","setShowManageMembersModal","list2","ListManageMembers","MEMBERS_LIMIT","members","setMembers","membersIterator","fetchMembers","member","as","RemoveAddButton","removed","setRemoved","emptySearchParams","URLSearchParams","Mentions","stateType","setStateType","mentionsIterator","fetchMentions","types","conversationsIterator","latestConversationItem","lastStatus","fetchConversations","args","notificationTypeKeys","fixNotifications","groupNotifications","notificationsMap","cleanNotifications","virtualType","mappedNotification","mappedAccount","n","cleanNotifications2","notificationsMap2","Notifications","notificationID","notificationAccessToken","onlyMentions","setOnlyMentions","setFollowRequests","announcements","setAnnouncements","excludeTypes","allNotifications","groupedNotifications","notificationsLastFetchTime","fetchFollowRequests","loadFollowRequests","requests","fetchAnnouncements","supportsFilteredNotifications","showNotificationsSettings","setNotificationsPolicy","fetchNotificationsPolicy","loadNotificationsPolicy","notificationsRequests","setNotificationsRequests","fetchNotificationsRequest","loadNotifications","fetchNotificationsPromise","fetchNotifications","loadUpdates","autoRefresh","unsub","subscribeKey","todayDate","yesterdayDate","showTodayEmpty","announcementsListRef","statusLink","setShowNotificationsSettings","announcement","AnnouncementBlock","notificationsPolicy","onToggle","open","request","NotificationRequestModalButton","NotificationRequestButtons","notificationDay","differentDay","currentDay","filterNewAccounts","filterPrivateMentions","filterNotFollowing","filterNotFollowers","allFilters","contact","contactAccount","startsAt","endsAt","published","reactions","allDay","read","publishedAtDate","publishedDateText","updatedAtText","reaction","me","fetchNotficationsByAccount","setShowModal","showModal","setNotifications","notifs","hasRequestState","Public","isLocal","publicIterator","fetchPublic","prompt","SHORT_LIMIT","Search","offsetRef","scrollTo","statusResults","setStatusResults","accountResults","setAccountResults","hashtagResults","setHashtagResults","setTypeResultsFunc","loadResults","filterBarParent","history","fetchLinks","trends","Trending","setHashtags","setLinks","trendIterator","fetchTrend","authorName","authorUrl","providerName","providerUrl","Columns","components","Hashtag","Component","Home","NotificationsLink","notificationLinkRef","matchMedia","matches","NotificationsMenu","NOTIFICATIONS_LIMIT","NOTIFICATIONS_DISPLAY_LIMIT","hasFollowRequests","setHasFollowRequests","statusPostRegexes","getInstanceStatusObject","regex","match","getInstanceStatusURL","HttpRoute","statusObject","statusURL","Lists","instancesListURL","SUBCOMMENTS_OPEN_ALL_LIMIT","MAX_WEIGHT","cachedRepliesToggle","cachedStatusesMap","scrollPositions","resetScrollPosition","STATUSES_SELECTOR","STATUS_URL_REGEX","StatusPage","mediaParam","mediaOnlyParam","mediaIndex","mediaStatusID","mediaStatus","getStatus","showMediaOnly","heroStatus","setHeroStatus","closeLink","matchStatusPath","matchPath","handleMediaClose","delete","$carousel","StatusParent","linkable","restProps","StatusThread","navigation","translate","setStatuses","heroStatusRef","totalDescendants","debounce","scrollOffsets","lastInitContextTS","reloadHero","heroTimer","cachedStatuses","reallyCachedStatuses","heroFetch","pRetry","contextFetch","hasStatus","heroStatus2","_replies","_r","expandReplies","weight","descendants","missingStatuses","ancestors2","ancestors","ancestorsIsThread","nestedDescendants","__replies","ancestor","allStatuses","offsetTop","setLimit","showRefresh","setShowRefresh","interval","scrollPosition","newScrollOffsets","setInterval","newScrollTop","contextURL","initContext","statusWeightCache","div","apiCache","heroDisplayName","heroContentText","postInstance","hasDescendants","innerHTML","postSameInstance","activeStatus","activeStatusRect","activeStatusIndex","nextStatus","heroInView","heroPointer","statusLinkRect","topmostStatusLink","allStatusLinks","prevStatus","details","reachTopPost","initialPageState","handleMediaClick","renderStatus","descendant","isHero","requestAnimationFrame","setHeroInView","setReachTopPost","isLinkable","SubComments","handleStatusLinkClick","enableTranslate","showActionsBar","prevEntry","level","openAll","parentLink","getIDs","viewMode","prevLocationIsStatusPage","moreStatusesKeys","arr","setViewMode","button","buttons","statusesList","diveDeep","replies2","replies3","totalComments","totalWeight","accWeight","hasParentThread","calcStatusWeight","openBefore","detailsRef","handleScroll","sameCount","open2","shortReply","dataset","MEDIA_VIRTUAL_LENGTH","cachedWeight","mediaLength","pollLength","POLL_VIRTUAL_LENGTH","cardLength","WEIGHT_SEGMENT","StatusRoute","boostsCarouselUrl","groupedNotificationsUrl","multiHashtagTimelineUrl","nestedCommentsThreadUrl","logoText","nativeAlert","__nativeAlert","Toastify","gravity","y","__STATES__","__STATES_STATS__","counts","unmountedPosts","unfurledLinks","$post","postInNotifications","unfurled","keysCount","ICONS","nonIdleEvents","setIdle","debouncedSetIdle","onNonIdle","documentElement","isIOS","theme","$meta","tempColor","colorScheme","$manualMeta","themeDarkColor","$autoMetas","textSize","setProperty","$app","$body","setIsLoggedIn","code","decodeURIComponent","clientID","clientSecret","initPreferences","client","initInstance","initStates","PrimaryRoutes","Routes","Route","nonRootLocation","Welcome","element","backgroundLocation","getPrevLocation","isModalPage","timeout","AbortSignal","controller","AbortController","abort","signal","HashRouter","App","localStorage","removeItem","sessionStorage","__CLOAK__","toggle"],"ignoreList":[],"sources":["../../src/utils/usePageVisibility.js","../../src/components/background-service.jsx","../../src/utils/open-osk.jsx","../../src/components/compose-button.jsx","../../src/components/keyboard-shortcuts-help.jsx","../../src/pages/accounts.jsx","../../src/assets/logo.svg","../../src/utils/push-notifications.js","../../src/pages/settings.jsx","../../src/utils/focus-deck.jsx","../../src/utils/useLocationChange.js","../../src/utils/lists.js","../../src/components/list-add-edit.jsx","../../src/components/account-info.jsx","../../src/components/account-sheet.jsx","../../src/components/drafts.jsx","../../src/components/embed-modal.jsx","../../src/utils/relationships.js","../../src/components/generic-accounts.jsx","../../src/components/media-alt-modal.jsx","../../src/utils/color-utils.js","../../src/components/media-modal.jsx","../../src/components/report-modal.jsx","../../src/assets/floating-button.svg","../../src/assets/multi-column.svg","../../src/assets/tab-menu-bar.svg","../../src/utils/followed-tags.js","../../src/components/AsyncText.jsx","../../src/components/shortcuts-settings.jsx","../../src/components/modals.jsx","../../src/components/follow-request-buttons.jsx","../../src/components/notification.jsx","../../src/components/notification-service.jsx","../../src/components/search-form.jsx","../../src/components/search-command.jsx","../../src/components/shortcuts.jsx","../../src/utils/timeline-utils.jsx","../../src/utils/useScroll.js","../../src/utils/useScrollFn.js","../../src/components/media-post.jsx","../../src/components/nav-menu.jsx","../../src/components/timeline.jsx","../../src/pages/account-statuses.jsx","../../src/pages/bookmarks.jsx","../../src/assets/features/catch-up.png","../../src/pages/catchup.jsx","../../src/pages/favourites.jsx","../../src/pages/filters.jsx","../../src/pages/followed-hashtags.jsx","../../src/pages/following.jsx","../../src/pages/hashtag.jsx","../../src/pages/list.jsx","../../src/pages/mentions.jsx","../../src/utils/group-notifications.jsx","../../src/pages/notifications.jsx","../../src/pages/public.jsx","../../src/pages/search.jsx","../../src/pages/trending.jsx","../../src/components/columns.jsx","../../src/pages/home.jsx","../../src/utils/get-instance-status-url.js","../../src/pages/http-route.jsx","../../src/pages/lists.jsx","../../src/data/instances.json?url","../../src/utils/auth.js","../../src/pages/login.jsx","../../src/pages/status.jsx","../../src/pages/status-route.jsx","../../src/assets/features/boosts-carousel.jpg","../../src/assets/features/grouped-notifications.jpg","../../src/assets/features/multi-column.jpg","../../src/assets/features/multi-hashtag-timeline.jpg","../../src/assets/features/nested-comments-thread.jpg","../../src/assets/logo-text.svg","../../src/pages/welcome.jsx","../../src/utils/toast-alert.js","../../src/app.jsx","../../src/main.jsx"],"sourcesContent":["import { useEffect, useRef } from 'preact/hooks';\n\nexport default function usePageVisibility(fn = () => {}, deps = []) {\n  const savedCallback = useRef(fn);\n  useEffect(() => {\n    savedCallback.current = fn;\n  }, [deps]);\n\n  useEffect(() => {\n    const handleVisibilityChange = () => {\n      const hidden = document.hidden || document.visibilityState === 'hidden';\n      console.log('👀 Page visibility changed', hidden ? 'hidden' : 'visible');\n      savedCallback.current(!hidden);\n    };\n\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    return () =>\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n  }, []);\n}\n","import { memo } from 'preact/compat';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\n\nimport { api } from '../utils/api';\nimport showToast from '../utils/show-toast';\nimport states, { saveStatus } from '../utils/states';\nimport useInterval from '../utils/useInterval';\nimport usePageVisibility from '../utils/usePageVisibility';\n\nconst STREAMING_TIMEOUT = 1000 * 3; // 3 seconds\nconst POLL_INTERVAL = 15_000; // 15 seconds\n\nexport default memo(function BackgroundService({ isLoggedIn }) {\n  // Notifications service\n  // - WebSocket to receive notifications when page is visible\n  const [visible, setVisible] = useState(true);\n  usePageVisibility(setVisible);\n  const checkLatestNotification = async (masto, instance, skipCheckMarkers) => {\n    if (states.notificationsLast) {\n      const notificationsIterator = masto.v1.notifications.list({\n        limit: 1,\n        sinceId: states.notificationsLast.id,\n      });\n      const { value: notifications } = await notificationsIterator.next();\n      if (notifications?.length) {\n        if (skipCheckMarkers) {\n          states.notificationsShowNew = true;\n        } else {\n          let lastReadId;\n          try {\n            const markers = await masto.v1.markers.fetch({\n              timeline: 'notifications',\n            });\n            lastReadId = markers?.notifications?.lastReadId;\n          } catch (e) {}\n          if (lastReadId) {\n            states.notificationsShowNew = notifications[0].id !== lastReadId;\n          } else {\n            states.notificationsShowNew = true;\n          }\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    let sub;\n    let pollNotifications;\n    if (isLoggedIn && visible) {\n      const { masto, streaming, instance } = api();\n      (async () => {\n        // 1. Get the latest notification\n        await checkLatestNotification(masto, instance);\n\n        let hasStreaming = false;\n        // 2. Start streaming\n        if (streaming) {\n          pollNotifications = setTimeout(() => {\n            (async () => {\n              try {\n                hasStreaming = true;\n                sub = streaming.user.notification.subscribe();\n                console.log('🎏 Streaming notification', sub);\n                for await (const entry of sub) {\n                  if (!sub) break;\n                  if (!visible) break;\n                  console.log('🔔🔔 Notification entry', entry);\n                  if (entry.event === 'notification') {\n                    console.log('🔔🔔 Notification', entry);\n                    saveStatus(entry.payload, instance, {\n                      skipThreading: true,\n                    });\n                  }\n                  states.notificationsShowNew = true;\n                }\n                console.log('💥 Streaming notification loop STOPPED');\n              } catch (e) {\n                hasStreaming = false;\n                console.error(e);\n              }\n\n              if (!hasStreaming) {\n                console.log('🎏 Streaming failed, fallback to polling');\n                pollNotifications = setInterval(() => {\n                  checkLatestNotification(masto, instance, true);\n                }, POLL_INTERVAL);\n              }\n            })();\n          }, STREAMING_TIMEOUT);\n        }\n      })();\n    }\n    return () => {\n      sub?.unsubscribe?.();\n      sub = null;\n      clearTimeout(pollNotifications);\n      clearInterval(pollNotifications);\n    };\n  }, [visible, isLoggedIn]);\n\n  // Check for updates service\n  const lastCheckDate = useRef();\n  const checkForUpdates = () => {\n    lastCheckDate.current = Date.now();\n    console.log('✨ Check app update');\n    fetch('./version.json')\n      .then((r) => r.json())\n      .then((info) => {\n        if (info) states.appVersion = info;\n      })\n      .catch((e) => {\n        console.error(e);\n      });\n  };\n  useInterval(checkForUpdates, visible && 1000 * 60 * 30); // 30 minutes\n  usePageVisibility((visible) => {\n    if (visible) {\n      if (!lastCheckDate.current) {\n        checkForUpdates();\n      } else {\n        const diff = Date.now() - lastCheckDate.current;\n        if (diff > 1000 * 60 * 60) {\n          // 1 hour\n          checkForUpdates();\n        }\n      }\n    }\n  });\n\n  // Global keyboard shortcuts \"service\"\n  useHotkeys('shift+alt+k', () => {\n    const currentCloakMode = states.settings.cloakMode;\n    states.settings.cloakMode = !currentCloakMode;\n    showToast({\n      text: `Cloak mode ${currentCloakMode ? 'disabled' : 'enabled'}`,\n    });\n  });\n\n  return null;\n});\n","const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent); // https://stackoverflow.com/a/23522755\n\nexport default function openOSK() {\n  if (isSafari) {\n    const fauxEl = document.createElement('input');\n    fauxEl.style.position = 'absolute';\n    fauxEl.style.top = '0';\n    fauxEl.style.left = '0';\n    fauxEl.style.opacity = '0';\n    document.body.appendChild(fauxEl);\n    fauxEl.focus();\n    setTimeout(() => {\n      document.body.removeChild(fauxEl);\n    }, 500);\n  }\n}\n","import { useHotkeys } from 'react-hotkeys-hook';\n\nimport openCompose from '../utils/open-compose';\nimport openOSK from '../utils/open-osk';\nimport states from '../utils/states';\n\nimport Icon from './icon';\n\nexport default function ComposeButton() {\n  function handleButton(e) {\n    if (e.shiftKey) {\n      const newWin = openCompose();\n\n      if (!newWin) {\n        states.showCompose = true;\n      }\n    } else {\n      openOSK();\n      states.showCompose = true;\n    }\n  }\n\n  useHotkeys('c, shift+c', handleButton, {\n    ignoreEventWhen: (e) => {\n      const hasModal = !!document.querySelector('#modal-container > *');\n      return hasModal;\n    },\n  });\n\n  return (\n    <button type=\"button\" id=\"compose-button\" onClick={handleButton}>\n      <Icon icon=\"quill\" size=\"xl\" alt=\"Compose\" />\n    </button>\n  );\n}\n","import './keyboard-shortcuts-help.css';\n\nimport { memo } from 'preact/compat';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { useSnapshot } from 'valtio';\n\nimport states from '../utils/states';\n\nimport Icon from './icon';\nimport Modal from './modal';\n\nexport default memo(function KeyboardShortcutsHelp() {\n  const snapStates = useSnapshot(states);\n\n  function onClose() {\n    states.showKeyboardShortcutsHelp = false;\n  }\n\n  useHotkeys(\n    '?, shift+?, shift+slash',\n    (e) => {\n      console.log('help');\n      states.showKeyboardShortcutsHelp = true;\n    },\n    {\n      ignoreEventWhen: (e) => {\n        const hasModal = !!document.querySelector('#modal-container > *');\n        return hasModal;\n      },\n    },\n  );\n\n  return (\n    !!snapStates.showKeyboardShortcutsHelp && (\n      <Modal onClose={onClose}>\n        <div id=\"keyboard-shortcuts-help-container\" class=\"sheet\" tabindex=\"-1\">\n          <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n            <Icon icon=\"x\" />\n          </button>\n          <header>\n            <h2>Keyboard shortcuts</h2>\n          </header>\n          <main>\n            <table>\n              {[\n                {\n                  action: 'Keyboard shortcuts help',\n                  keys: <kbd>?</kbd>,\n                },\n                {\n                  action: 'Next post',\n                  keys: <kbd>j</kbd>,\n                },\n                {\n                  action: 'Previous post',\n                  keys: <kbd>k</kbd>,\n                },\n                {\n                  action: 'Skip carousel to next post',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>j</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Skip carousel to previous post',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>k</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Load new posts',\n                  keys: <kbd>.</kbd>,\n                },\n                {\n                  action: 'Open post details',\n                  keys: (\n                    <>\n                      <kbd>Enter</kbd> or <kbd>o</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: (\n                    <>\n                      Expand content warning or\n                      <br />\n                      toggle expanded/collapsed thread\n                    </>\n                  ),\n                  keys: <kbd>x</kbd>,\n                },\n                {\n                  action: 'Close post or dialogs',\n                  keys: (\n                    <>\n                      <kbd>Esc</kbd> or <kbd>Backspace</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Focus column in multi-column mode',\n                  keys: (\n                    <>\n                      <kbd>1</kbd> to <kbd>9</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Compose new post',\n                  keys: <kbd>c</kbd>,\n                },\n                {\n                  action: 'Compose new post (new window)',\n                  className: 'insignificant',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>c</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Send post',\n                  keys: (\n                    <>\n                      <kbd>Ctrl</kbd> + <kbd>Enter</kbd> or <kbd>⌘</kbd> +{' '}\n                      <kbd>Enter</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Search',\n                  keys: <kbd>/</kbd>,\n                },\n                {\n                  action: 'Reply',\n                  keys: <kbd>r</kbd>,\n                },\n                {\n                  action: 'Reply (new window)',\n                  className: 'insignificant',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>r</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Like (favourite)',\n                  keys: (\n                    <>\n                      <kbd>l</kbd> or <kbd>f</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Boost',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>b</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Bookmark',\n                  keys: <kbd>d</kbd>,\n                },\n                {\n                  action: 'Toggle Cloak mode',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>Alt</kbd> + <kbd>k</kbd>\n                    </>\n                  ),\n                },\n              ].map(({ action, className, keys }) => (\n                <tr key={action}>\n                  <th class={className}>{action}</th>\n                  <td>{keys}</td>\n                </tr>\n              ))}\n            </table>\n          </main>\n        </div>\n      </Modal>\n    )\n  );\n});\n","import './accounts.css';\n\nimport { useAutoAnimate } from '@formkit/auto-animate/preact';\nimport { Menu, MenuDivider, MenuItem } from '@szhsin/react-menu';\nimport { useReducer } from 'preact/hooks';\n\nimport Avatar from '../components/avatar';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Menu2 from '../components/menu2';\nimport MenuConfirm from '../components/menu-confirm';\nimport NameText from '../components/name-text';\nimport { api } from '../utils/api';\nimport states from '../utils/states';\nimport store from '../utils/store';\n\nfunction Accounts({ onClose }) {\n  const { masto } = api();\n  // Accounts\n  const accounts = store.local.getJSON('accounts');\n  const currentAccount = store.session.get('currentAccount');\n  const moreThanOneAccount = accounts.length > 1;\n\n  const [_, reload] = useReducer((x) => x + 1, 0);\n  const [accountsListParent] = useAutoAnimate();\n\n  return (\n    <div id=\"accounts-container\" class=\"sheet\" tabIndex=\"-1\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header class=\"header-grid\">\n        <h2>Accounts</h2>\n      </header>\n      <main>\n        <section>\n          <ul class=\"accounts-list\" ref={accountsListParent}>\n            {accounts.map((account, i) => {\n              const isCurrent = account.info.id === currentAccount;\n              const isDefault = i === 0; // first account is always default\n              return (\n                <li key={account.info.id}>\n                  <div>\n                    {moreThanOneAccount && (\n                      <span class={`current ${isCurrent ? 'is-current' : ''}`}>\n                        <Icon icon=\"check-circle\" alt=\"Current\" />\n                      </span>\n                    )}\n                    <Avatar\n                      url={account.info.avatarStatic}\n                      size=\"xxl\"\n                      onDblClick={async () => {\n                        if (isCurrent) {\n                          try {\n                            const info = await masto.v1.accounts\n                              .$select(account.info.id)\n                              .fetch();\n                            console.log('fetched account info', info);\n                            account.info = info;\n                            store.local.setJSON('accounts', accounts);\n                            reload();\n                          } catch (e) {}\n                        }\n                      }}\n                    />\n                    <NameText\n                      account={\n                        moreThanOneAccount\n                          ? {\n                              ...account.info,\n                              acct: /@/.test(account.info.acct)\n                                ? account.info.acct\n                                : `${account.info.acct}@${account.instanceURL}`,\n                            }\n                          : account.info\n                      }\n                      showAcct\n                      onClick={() => {\n                        if (isCurrent) {\n                          states.showAccount = `${account.info.username}@${account.instanceURL}`;\n                        } else {\n                          store.session.set('currentAccount', account.info.id);\n                          location.reload();\n                        }\n                      }}\n                    />\n                  </div>\n                  <div class=\"actions\">\n                    {isDefault && moreThanOneAccount && (\n                      <>\n                        <span class=\"tag\">Default</span>{' '}\n                      </>\n                    )}\n                    <Menu2\n                      align=\"end\"\n                      menuButton={\n                        <button\n                          type=\"button\"\n                          title=\"More\"\n                          class=\"plain more-button\"\n                        >\n                          <Icon icon=\"more\" size=\"l\" alt=\"More\" />\n                        </button>\n                      }\n                    >\n                      <MenuItem\n                        onClick={() => {\n                          states.showAccount = `${account.info.username}@${account.instanceURL}`;\n                        }}\n                      >\n                        <Icon icon=\"user\" />\n                        <span>View profile…</span>\n                      </MenuItem>\n                      <MenuDivider />\n                      {moreThanOneAccount && (\n                        <MenuItem\n                          disabled={isDefault}\n                          onClick={() => {\n                            // Move account to the top of the list\n                            accounts.splice(i, 1);\n                            accounts.unshift(account);\n                            store.local.setJSON('accounts', accounts);\n                            reload();\n                          }}\n                        >\n                          <Icon icon=\"check-circle\" />\n                          <span>Set as default</span>\n                        </MenuItem>\n                      )}\n                      <MenuConfirm\n                        subMenu\n                        confirmLabel={\n                          <>\n                            <Icon icon=\"exit\" />\n                            <span>Log out @{account.info.acct}?</span>\n                          </>\n                        }\n                        disabled={!isCurrent}\n                        menuItemClassName=\"danger\"\n                        onClick={() => {\n                          // const yes = confirm('Log out?');\n                          // if (!yes) return;\n                          accounts.splice(i, 1);\n                          store.local.setJSON('accounts', accounts);\n                          // location.reload();\n                          location.href = location.pathname || '/';\n                        }}\n                      >\n                        <Icon icon=\"exit\" />\n                        <span>Log out…</span>\n                      </MenuConfirm>\n                    </Menu2>\n                  </div>\n                </li>\n              );\n            })}\n          </ul>\n          <p>\n            <Link to=\"/login\" class=\"button plain2\" onClick={onClose}>\n              <Icon icon=\"plus\" /> <span>Add an existing account</span>\n            </Link>\n          </p>\n          {moreThanOneAccount && (\n            <p>\n              <small>\n                Note: <i>Default</i> account will always be used for first load.\n                Switched accounts will persist during the session.\n              </small>\n            </p>\n          )}\n        </section>\n      </main>\n    </div>\n  );\n}\n\nexport default Accounts;\n","export default \"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20xml:space='preserve'%20fill-rule='evenodd'%20stroke-linejoin='round'%20stroke-miterlimit='2'%20clip-rule='evenodd'%20viewBox='0%200%2064%2064'%3e%3cpath%20fill='none'%20d='M0%200h63.994v63.994H0z'/%3e%3cpath%20fill='%23a4bff7'%20d='M37.774%2011.471c14.639%203.752%2019.034%2016.557%2015.889%2031.304-.696%203.261-2.563%206.661-6.356%208.693-3.204%201.717-8.07%202.537-15.338.55l-9.634-2.404C11.651%2046.992%208.378%2038.733%2010.027%2031.823c3.627-15.201%2015.543-23.48%2027.747-20.352Z'/%3e%3cpath%20fill='%23d8e7fe'%20d='M36.76%2015.429c12.289%203.15%2015.547%2014.114%2012.907%2026.493-.947%204.44-4.937%209.365-16.664%206.143l-9.684-2.417c-7.854-1.923-10.53-7.8-9.318-12.877%203.016-12.639%2012.611-19.943%2022.759-17.342Z'/%3e%3cpath%20fill='%236081e6'%20d='M27.471%2024.991c-1.457-.698-7.229%203.213-7.663%208.926-.182%202.39%204.55%203.237%205.071-.169.725-4.743%203.715-8.218%202.592-8.757Zm10.746%202.005c-2.083.327-.382%205.901-.595%2010.727-.123%202.8%204.388%203.464%204.703%202.011%201.098-5.073-2.066-13.058-4.108-12.738Z'/%3e%3c/svg%3e\"","// Utils for push notifications\nimport { api } from './api';\nimport { getCurrentAccount } from './store-utils';\n\n// Subscription is an object with the following structure:\n// {\n//   data: {\n//     alerts: {\n//       admin: {\n//         report: boolean,\n//         signUp: boolean,\n//       },\n//       favourite: boolean,\n//       follow: boolean,\n//       mention: boolean,\n//       poll: boolean,\n//       reblog: boolean,\n//       status: boolean,\n//       update: boolean,\n//     }\n//   },\n//   policy: \"all\" | \"followed\" | \"follower\" | \"none\",\n//   subscription: {\n//     endpoint: string,\n//     keys: {\n//       auth: string,\n//       p256dh: string,\n//     },\n//   },\n// }\n\n// Back-end CRUD\n// =============\n\nfunction createBackendPushSubscription(subscription) {\n  const { masto } = api();\n  return masto.v1.push.subscription.create(subscription);\n}\n\nfunction fetchBackendPushSubscription() {\n  const { masto } = api();\n  return masto.v1.push.subscription.fetch();\n}\n\nfunction updateBackendPushSubscription(subscription) {\n  const { masto } = api();\n  return masto.v1.push.subscription.update(subscription);\n}\n\nfunction removeBackendPushSubscription() {\n  const { masto } = api();\n  return masto.v1.push.subscription.remove();\n}\n\n// Front-end\n// =========\n\nexport function isPushSupported() {\n  return 'serviceWorker' in navigator && 'PushManager' in window;\n}\n\nexport function getRegistration() {\n  // return navigator.serviceWorker.ready;\n  return navigator.serviceWorker.getRegistration();\n}\n\nasync function getSubscription() {\n  const registration = await getRegistration();\n  const subscription = registration\n    ? await registration.pushManager.getSubscription()\n    : undefined;\n  return { registration, subscription };\n}\n\nfunction urlBase64ToUint8Array(base64String) {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = `${base64String}${padding}`\n    .replace(/-/g, '+')\n    .replace(/_/g, '/');\n\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n\n  return outputArray;\n}\n\n// Front-end <-> back-end\n// ======================\n\nexport async function initSubscription() {\n  if (!isPushSupported()) return;\n  const { subscription } = await getSubscription();\n  let backendSubscription = null;\n  try {\n    backendSubscription = await fetchBackendPushSubscription();\n  } catch (err) {\n    if (/(not found|unknown)/i.test(err.message)) {\n      // No subscription found\n    } else {\n      // Other error\n      throw err;\n    }\n  }\n  console.log('INIT subscription', {\n    subscription,\n    backendSubscription,\n  });\n\n  // Check if the subscription changed\n  if (backendSubscription && subscription) {\n    const sameEndpoint = backendSubscription.endpoint === subscription.endpoint;\n    const { vapidKey } = getCurrentAccount();\n    const sameKey = backendSubscription.serverKey === vapidKey;\n    if (!sameEndpoint) {\n      throw new Error('Backend subscription endpoint changed');\n    }\n    if (sameKey) {\n      // Subscription didn't change\n    } else {\n      // Subscription changed\n      console.error('🔔 Subscription changed', {\n        sameEndpoint,\n        serverKey: backendSubscription.serverKey,\n        vapIdKey: vapidKey,\n        endpoint1: backendSubscription.endpoint,\n        endpoint2: subscription.endpoint,\n        sameKey,\n        key1: backendSubscription.serverKey,\n        key2: vapidKey,\n      });\n      throw new Error('Backend subscription key and vapid key changed');\n      // Only unsubscribe from backend, not from browser\n      // await removeBackendPushSubscription();\n      // // Now let's resubscribe\n      // // NOTE: I have no idea if this works\n      // return await updateSubscription({\n      //   data: backendSubscription.data,\n      //   policy: backendSubscription.policy,\n      // });\n    }\n  }\n\n  if (subscription && !backendSubscription) {\n    // check if account's vapidKey is same as subscription's applicationServerKey\n    const { vapidKey } = getCurrentAccount();\n    const { applicationServerKey } = subscription.options;\n    const vapidKeyStr = urlBase64ToUint8Array(vapidKey).toString();\n    const applicationServerKeyStr = new Uint8Array(\n      applicationServerKey,\n    ).toString();\n    const sameKey = vapidKeyStr === applicationServerKeyStr;\n    if (sameKey) {\n      // Subscription didn't change\n    } else {\n      // Subscription changed\n      console.error('🔔 Subscription changed', {\n        vapidKeyStr,\n        applicationServerKeyStr,\n        sameKey,\n      });\n      // Unsubscribe since backend doesn't have a subscription\n      await subscription.unsubscribe();\n      throw new Error('Subscription key and vapid key changed');\n    }\n  }\n\n  // Check if backend subscription returns 404\n  // if (subscription && !backendSubscription) {\n  //   // Re-subscribe to backend\n  //   backendSubscription = await createBackendPushSubscription({\n  //     subscription,\n  //     data: {},\n  //     policy: 'all',\n  //   });\n  // }\n\n  return { subscription, backendSubscription };\n}\n\nexport async function updateSubscription({ data, policy }) {\n  console.log('🔔 Updating subscription', { data, policy });\n  if (!isPushSupported()) return;\n  let { registration, subscription } = await getSubscription();\n  let backendSubscription = null;\n\n  if (subscription) {\n    try {\n      backendSubscription = await updateBackendPushSubscription({\n        data,\n        policy,\n      });\n      // TODO: save subscription in user settings\n    } catch (error) {\n      // Backend doesn't have a subscription for this user\n      // Create a new one\n      backendSubscription = await createBackendPushSubscription({\n        subscription,\n        data,\n        policy,\n      });\n      // TODO: save subscription in user settings\n    }\n  } else {\n    // User is not subscribed\n    const { vapidKey } = getCurrentAccount();\n    if (!vapidKey) throw new Error('No server key found');\n    subscription = await registration.pushManager.subscribe({\n      userVisibleOnly: true,\n      applicationServerKey: urlBase64ToUint8Array(vapidKey),\n    });\n    backendSubscription = await createBackendPushSubscription({\n      subscription,\n      data,\n      policy,\n    });\n    // TODO: save subscription in user settings\n  }\n\n  return { subscription, backendSubscription };\n}\n\nexport async function removeSubscription() {\n  if (!isPushSupported()) return;\n  const { subscription } = await getSubscription();\n  if (subscription) {\n    await removeBackendPushSubscription();\n    await subscription.unsubscribe();\n  }\n}\n","import './settings.css';\n\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport logo from '../assets/logo.svg';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport RelativeTime from '../components/relative-time';\nimport targetLanguages from '../data/lingva-target-languages';\nimport { api } from '../utils/api';\nimport getTranslateTargetLanguage from '../utils/get-translate-target-language';\nimport localeCode2Text from '../utils/localeCode2Text';\nimport {\n  initSubscription,\n  isPushSupported,\n  removeSubscription,\n  updateSubscription,\n} from '../utils/push-notifications';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\nimport store from '../utils/store';\n\nconst DEFAULT_TEXT_SIZE = 16;\nconst TEXT_SIZES = [14, 15, 16, 17, 18, 19, 20];\nconst {\n  PHANPY_WEBSITE: WEBSITE,\n  PHANPY_PRIVACY_POLICY_URL: PRIVACY_POLICY_URL,\n  PHANPY_IMG_ALT_API_URL: IMG_ALT_API_URL,\n  PHANPY_GIPHY_API_KEY: GIPHY_API_KEY,\n} = import.meta.env;\n\nfunction Settings({ onClose }) {\n  const snapStates = useSnapshot(states);\n  const currentTheme = store.local.get('theme') || 'auto';\n  const themeFormRef = useRef();\n  const targetLanguage =\n    snapStates.settings.contentTranslationTargetLanguage || null;\n  const systemTargetLanguage = getTranslateTargetLanguage();\n  const systemTargetLanguageText = localeCode2Text(systemTargetLanguage);\n  const currentTextSize = store.local.get('textSize') || DEFAULT_TEXT_SIZE;\n\n  const [prefs, setPrefs] = useState(store.account.get('preferences') || {});\n  const { masto, authenticated, instance } = api();\n  // Get preferences every time Settings is opened\n  // NOTE: Disabled for now because I don't expect this to change often. Also for some reason, the /api/v1/preferences endpoint is cached for a while and return old prefs if refresh immediately after changing them.\n  // useEffect(() => {\n  //   const { masto } = api();\n  //   (async () => {\n  //     try {\n  //       const preferences = await masto.v1.preferences.fetch();\n  //       setPrefs(preferences);\n  //       store.account.set('preferences', preferences);\n  //     } catch (e) {\n  //       // Silently fail\n  //       console.error(e);\n  //     }\n  //   })();\n  // }, []);\n\n  return (\n    <div id=\"settings-container\" class=\"sheet\" tabIndex=\"-1\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Settings</h2>\n      </header>\n      <main>\n        <section>\n          <ul>\n            <li>\n              <div>\n                <label>Appearance</label>\n              </div>\n              <div>\n                <form\n                  ref={themeFormRef}\n                  onInput={(e) => {\n                    console.log(e);\n                    e.preventDefault();\n                    const formData = new FormData(themeFormRef.current);\n                    const theme = formData.get('theme');\n                    const html = document.documentElement;\n\n                    if (theme === 'auto') {\n                      html.classList.remove('is-light', 'is-dark');\n\n                      // Disable manual theme <meta>\n                      const $manualMeta = document.querySelector(\n                        'meta[data-theme-setting=\"manual\"]',\n                      );\n                      if ($manualMeta) {\n                        $manualMeta.name = '';\n                      }\n                      // Enable auto theme <meta>s\n                      const $autoMetas = document.querySelectorAll(\n                        'meta[data-theme-setting=\"auto\"]',\n                      );\n                      $autoMetas.forEach((m) => {\n                        m.name = 'theme-color';\n                      });\n                    } else {\n                      html.classList.toggle('is-light', theme === 'light');\n                      html.classList.toggle('is-dark', theme === 'dark');\n\n                      // Enable manual theme <meta>\n                      const $manualMeta = document.querySelector(\n                        'meta[data-theme-setting=\"manual\"]',\n                      );\n                      if ($manualMeta) {\n                        $manualMeta.name = 'theme-color';\n                        $manualMeta.content =\n                          theme === 'light'\n                            ? $manualMeta.dataset.themeLightColor\n                            : $manualMeta.dataset.themeDarkColor;\n                      }\n                      // Disable auto theme <meta>s\n                      const $autoMetas = document.querySelectorAll(\n                        'meta[data-theme-setting=\"auto\"]',\n                      );\n                      $autoMetas.forEach((m) => {\n                        m.name = '';\n                      });\n                    }\n                    document\n                      .querySelector('meta[name=\"color-scheme\"]')\n                      .setAttribute(\n                        'content',\n                        theme === 'auto' ? 'dark light' : theme,\n                      );\n\n                    if (theme === 'auto') {\n                      store.local.del('theme');\n                    } else {\n                      store.local.set('theme', theme);\n                    }\n                  }}\n                >\n                  <div class=\"radio-group\">\n                    <label>\n                      <input\n                        type=\"radio\"\n                        name=\"theme\"\n                        value=\"light\"\n                        defaultChecked={currentTheme === 'light'}\n                      />\n                      <span>Light</span>\n                    </label>\n                    <label>\n                      <input\n                        type=\"radio\"\n                        name=\"theme\"\n                        value=\"dark\"\n                        defaultChecked={currentTheme === 'dark'}\n                      />\n                      <span>Dark</span>\n                    </label>\n                    <label>\n                      <input\n                        type=\"radio\"\n                        name=\"theme\"\n                        value=\"auto\"\n                        defaultChecked={\n                          currentTheme !== 'light' && currentTheme !== 'dark'\n                        }\n                      />\n                      <span>Auto</span>\n                    </label>\n                  </div>\n                </form>\n              </div>\n            </li>\n            <li>\n              <div>\n                <label>Text size</label>\n              </div>\n              <div class=\"range-group\">\n                <span style={{ fontSize: TEXT_SIZES[0] }}>A</span>{' '}\n                <input\n                  type=\"range\"\n                  min={TEXT_SIZES[0]}\n                  max={TEXT_SIZES[TEXT_SIZES.length - 1]}\n                  step=\"1\"\n                  value={currentTextSize}\n                  list=\"sizes\"\n                  onChange={(e) => {\n                    const value = parseInt(e.target.value, 10);\n                    const html = document.documentElement;\n                    // set CSS variable\n                    html.style.setProperty('--text-size', `${value}px`);\n                    // save to local storage\n                    if (value === DEFAULT_TEXT_SIZE) {\n                      store.local.del('textSize');\n                    } else {\n                      store.local.set('textSize', e.target.value);\n                    }\n                  }}\n                />{' '}\n                <span style={{ fontSize: TEXT_SIZES[TEXT_SIZES.length - 1] }}>\n                  A\n                </span>\n                <datalist id=\"sizes\">\n                  {TEXT_SIZES.map((size) => (\n                    <option value={size} />\n                  ))}\n                </datalist>\n              </div>\n            </li>\n          </ul>\n        </section>\n        {authenticated && (\n          <>\n            <h3>Posting</h3>\n            <section>\n              <ul>\n                <li>\n                  <div>\n                    <label for=\"posting-privacy-field\">\n                      Default visibility{' '}\n                      <Icon icon=\"cloud\" alt=\"Synced\" class=\"synced-icon\" />\n                    </label>\n                  </div>\n                  <div>\n                    <select\n                      id=\"posting-privacy-field\"\n                      value={prefs['posting:default:visibility'] || 'public'}\n                      onChange={(e) => {\n                        const { value } = e.target;\n                        (async () => {\n                          try {\n                            await masto.v1.accounts.updateCredentials({\n                              source: {\n                                privacy: value,\n                              },\n                            });\n                            setPrefs({\n                              ...prefs,\n                              'posting:default:visibility': value,\n                            });\n                            store.account.set('preferences', {\n                              ...prefs,\n                              'posting:default:visibility': value,\n                            });\n                          } catch (e) {\n                            alert('Failed to update posting privacy');\n                            console.error(e);\n                          }\n                        })();\n                      }}\n                    >\n                      <option value=\"public\">Public</option>\n                      <option value=\"unlisted\">Unlisted</option>\n                      <option value=\"private\">Followers only</option>\n                    </select>\n                  </div>\n                </li>\n              </ul>\n            </section>\n            <p class=\"section-postnote\">\n              <Icon icon=\"cloud\" alt=\"Synced\" class=\"synced-icon\" />{' '}\n              <small>\n                Synced to your instance server's settings.{' '}\n                <a\n                  href={`https://${instance}/`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  Go to your instance ({instance}) for more settings.\n                </a>\n              </small>\n            </p>\n          </>\n        )}\n        <h3>Experiments</h3>\n        <section>\n          <ul>\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.autoRefresh}\n                  onChange={(e) => {\n                    states.settings.autoRefresh = e.target.checked;\n                  }}\n                />{' '}\n                Auto refresh timeline posts\n              </label>\n            </li>\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.boostsCarousel}\n                  onChange={(e) => {\n                    states.settings.boostsCarousel = e.target.checked;\n                  }}\n                />{' '}\n                Boosts carousel\n              </label>\n            </li>\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.contentTranslation}\n                  onChange={(e) => {\n                    const { checked } = e.target;\n                    states.settings.contentTranslation = checked;\n                    if (!checked) {\n                      states.settings.contentTranslationTargetLanguage = null;\n                    }\n                  }}\n                />{' '}\n                Post translation\n              </label>\n              <div\n                class={`sub-section ${\n                  !snapStates.settings.contentTranslation\n                    ? 'more-insignificant'\n                    : ''\n                }`}\n              >\n                <div>\n                  <label>\n                    Translate to{' '}\n                    <select\n                      value={targetLanguage || ''}\n                      disabled={!snapStates.settings.contentTranslation}\n                      onChange={(e) => {\n                        states.settings.contentTranslationTargetLanguage =\n                          e.target.value || null;\n                      }}\n                    >\n                      <option value=\"\">\n                        System language ({systemTargetLanguageText})\n                      </option>\n                      <option disabled>──────────</option>\n                      {targetLanguages.map((lang) => (\n                        <option value={lang.code}>{lang.name}</option>\n                      ))}\n                    </select>\n                  </label>\n                </div>\n                <hr />\n                <p class=\"checkbox-fieldset\">\n                  Hide \"Translate\" button for\n                  {snapStates.settings.contentTranslationHideLanguages.length >\n                    0 && (\n                    <>\n                      {' '}\n                      (\n                      {\n                        snapStates.settings.contentTranslationHideLanguages\n                          .length\n                      }\n                      )\n                    </>\n                  )}\n                  :\n                  <div class=\"checkbox-fields\">\n                    {targetLanguages.map((lang) => (\n                      <label>\n                        <input\n                          type=\"checkbox\"\n                          checked={snapStates.settings.contentTranslationHideLanguages.includes(\n                            lang.code,\n                          )}\n                          onChange={(e) => {\n                            const { checked } = e.target;\n                            if (checked) {\n                              states.settings.contentTranslationHideLanguages.push(\n                                lang.code,\n                              );\n                            } else {\n                              states.settings.contentTranslationHideLanguages =\n                                snapStates.settings.contentTranslationHideLanguages.filter(\n                                  (code) => code !== lang.code,\n                                );\n                            }\n                          }}\n                        />{' '}\n                        {lang.name}\n                      </label>\n                    ))}\n                  </div>\n                </p>\n                <p class=\"insignificant\">\n                  <small>\n                    Note: This feature uses external translation services,\n                    powered by{' '}\n                    <a\n                      href=\"https://github.com/cheeaun/lingva-api\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      Lingva API\n                    </a>{' '}\n                    &amp;{' '}\n                    <a\n                      href=\"https://github.com/thedaviddelta/lingva-translate\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      Lingva Translate\n                    </a>\n                    .\n                  </small>\n                </p>\n                <hr />\n                <div>\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      checked={snapStates.settings.contentTranslationAutoInline}\n                      disabled={!snapStates.settings.contentTranslation}\n                      onChange={(e) => {\n                        states.settings.contentTranslationAutoInline =\n                          e.target.checked;\n                      }}\n                    />{' '}\n                    Auto inline translation\n                  </label>\n                  <p class=\"insignificant\">\n                    <small>\n                      Automatically show translation for posts in timeline. Only\n                      works for <b>short</b> posts without content warning,\n                      media and poll.\n                    </small>\n                  </p>\n                </div>\n              </div>\n            </li>\n            {!!GIPHY_API_KEY && authenticated && (\n              <li>\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={snapStates.settings.composerGIFPicker}\n                    onChange={(e) => {\n                      states.settings.composerGIFPicker = e.target.checked;\n                    }}\n                  />{' '}\n                  GIF Picker for composer\n                </label>\n                <div class=\"sub-section insignificant\">\n                  <small>\n                    Note: This feature uses external GIF search service, powered\n                    by{' '}\n                    <a\n                      href=\"https://developers.giphy.com/\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      GIPHY\n                    </a>\n                    . G-rated (suitable for viewing by all ages), tracking\n                    parameters are stripped, referrer information is omitted\n                    from requests, but search queries and IP address information\n                    will still reach their servers.\n                  </small>\n                </div>\n              </li>\n            )}\n            {!!IMG_ALT_API_URL && authenticated && (\n              <li>\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={snapStates.settings.mediaAltGenerator}\n                    onChange={(e) => {\n                      states.settings.mediaAltGenerator = e.target.checked;\n                    }}\n                  />{' '}\n                  Image description generator{' '}\n                  <Icon icon=\"sparkles2\" class=\"more-insignificant\" />\n                </label>\n                <div class=\"sub-section insignificant\">\n                  <small>Only for new images while composing new posts.</small>\n                </div>\n                <div class=\"sub-section insignificant\">\n                  <small>\n                    Note: This feature uses external AI service, powered by{' '}\n                    <a\n                      href=\"https://github.com/cheeaun/img-alt-api\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      img-alt-api\n                    </a>\n                    . May not work well. Only for images and in English.\n                  </small>\n                </div>\n              </li>\n            )}\n            {authenticated && (\n              <li>\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={\n                      snapStates.settings.shortcutSettingsCloudImportExport\n                    }\n                    onChange={(e) => {\n                      states.settings.shortcutSettingsCloudImportExport =\n                        e.target.checked;\n                    }}\n                  />{' '}\n                  \"Cloud\" import/export for shortcuts settings{' '}\n                  <Icon icon=\"cloud\" class=\"more-insignificant\" />\n                </label>\n                <div class=\"sub-section insignificant\">\n                  <small>\n                    ⚠️⚠️⚠️ Very experimental.\n                    <br />\n                    Stored in your own profile’s notes. Profile (private) notes\n                    are mainly used for other profiles, and hidden for own\n                    profile.\n                  </small>\n                </div>\n                <div class=\"sub-section insignificant\">\n                  <small>\n                    Note: This feature uses currently-logged-in instance server\n                    API.\n                  </small>\n                </div>\n              </li>\n            )}\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.cloakMode}\n                  onChange={(e) => {\n                    states.settings.cloakMode = e.target.checked;\n                  }}\n                />{' '}\n                Cloak mode{' '}\n                <span class=\"insignificant\">\n                  (<samp>Text</samp> → <samp>████</samp>)\n                </span>\n              </label>\n              <div class=\"sub-section insignificant\">\n                <small>\n                  Replace text as blocks, useful when taking screenshots, for\n                  privacy reasons.\n                </small>\n              </div>\n            </li>\n            {authenticated && (\n              <li>\n                <button\n                  type=\"button\"\n                  class=\"light\"\n                  onClick={() => {\n                    states.showDrafts = true;\n                    states.showSettings = false;\n                  }}\n                >\n                  Unsent drafts\n                </button>\n              </li>\n            )}\n          </ul>\n        </section>\n        {authenticated && <PushNotificationsSection onClose={onClose} />}\n        <h3>About</h3>\n        <section>\n          <div\n            style={{\n              display: 'flex',\n              flexWrap: 'wrap',\n              gap: 8,\n              lineHeight: 1.25,\n              alignItems: 'center',\n              marginTop: 8,\n            }}\n          >\n            <img\n              src={logo}\n              alt=\"\"\n              width=\"64\"\n              height=\"64\"\n              style={{\n                aspectRatio: '1/1',\n                verticalAlign: 'middle',\n                background: '#b7cdf9',\n                borderRadius: 12,\n              }}\n            />\n            <div>\n              <b>Phanpy</b>{' '}\n              <a\n                href=\"https://hachyderm.io/@phanpy\"\n                // target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  states.showAccount = 'phanpy@hachyderm.io';\n                }}\n              >\n                @phanpy\n              </a>\n              <br />\n              <a\n                href=\"https://github.com/cheeaun/phanpy\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                Built\n              </a>{' '}\n              by{' '}\n              <a\n                href=\"https://mastodon.social/@cheeaun\"\n                // target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  states.showAccount = 'cheeaun@mastodon.social';\n                }}\n              >\n                @cheeaun\n              </a>\n            </div>\n          </div>\n          <p>\n            <a\n              href=\"https://github.com/sponsors/cheeaun\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Sponsor\n            </a>{' '}\n            &middot;{' '}\n            <a\n              href=\"https://www.buymeacoffee.com/cheeaun\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Donate\n            </a>{' '}\n            &middot;{' '}\n            <a\n              href={PRIVACY_POLICY_URL}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Privacy Policy\n            </a>\n          </p>\n          {__BUILD_TIME__ && (\n            <p>\n              {WEBSITE && (\n                <>\n                  <span class=\"insignificant\">Site:</span>{' '}\n                  {WEBSITE.replace(/https?:\\/\\//g, '').replace(/\\/$/, '')}\n                  <br />\n                </>\n              )}\n              <span class=\"insignificant\">Version:</span>{' '}\n              <input\n                type=\"text\"\n                class=\"version-string\"\n                readOnly\n                size=\"18\" // Manually calculated here\n                value={`${__BUILD_TIME__.slice(0, 10).replace(/-/g, '.')}${\n                  __COMMIT_HASH__ ? `.${__COMMIT_HASH__}` : ''\n                }`}\n                onClick={(e) => {\n                  e.target.select();\n                  // Copy to clipboard\n                  try {\n                    navigator.clipboard.writeText(e.target.value);\n                    showToast('Version string copied');\n                  } catch (e) {\n                    console.warn(e);\n                    showToast('Unable to copy version string');\n                  }\n                }}\n              />{' '}\n              {!__FAKE_COMMIT_HASH__ && (\n                <span class=\"ib insignificant\">\n                  (\n                  <a\n                    href={`https://github.com/cheeaun/phanpy/commit/${__COMMIT_HASH__}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    <RelativeTime datetime={new Date(__BUILD_TIME__)} />\n                  </a>\n                  )\n                </span>\n              )}\n            </p>\n          )}\n        </section>\n      </main>\n    </div>\n  );\n}\n\nfunction PushNotificationsSection({ onClose }) {\n  if (!isPushSupported()) return null;\n\n  const { instance } = api();\n  const [uiState, setUIState] = useState('default');\n  const pushFormRef = useRef();\n  const [allowNotifications, setAllowNotifications] = useState(false);\n  const [needRelogin, setNeedRelogin] = useState(false);\n  const previousPolicyRef = useRef();\n  useEffect(() => {\n    (async () => {\n      setUIState('loading');\n      try {\n        const { subscription, backendSubscription } = await initSubscription();\n        if (\n          backendSubscription?.policy &&\n          backendSubscription.policy !== 'none'\n        ) {\n          setAllowNotifications(true);\n          const { alerts, policy } = backendSubscription;\n          console.log('backendSubscription', backendSubscription);\n          previousPolicyRef.current = policy;\n          const { elements } = pushFormRef.current;\n          const policyEl = elements.namedItem('policy');\n          if (policyEl) policyEl.value = policy;\n          // alerts is {}, iterate it\n          Object.keys(alerts).forEach((alert) => {\n            const el = elements.namedItem(alert);\n            if (el?.type === 'checkbox') {\n              el.checked = true;\n            }\n          });\n        }\n        setUIState('default');\n      } catch (err) {\n        console.warn(err);\n        if (/outside.*authorized/i.test(err.message)) {\n          setNeedRelogin(true);\n        } else {\n          alert(err?.message || err);\n        }\n        setUIState('error');\n      }\n    })();\n  }, []);\n\n  const isLoading = uiState === 'loading';\n\n  return (\n    <form\n      ref={pushFormRef}\n      onChange={() => {\n        setTimeout(() => {\n          const values = Object.fromEntries(new FormData(pushFormRef.current));\n          const allowNotifications = !!values['policy-allow'];\n          const params = {\n            data: {\n              policy: values.policy,\n              alerts: {\n                mention: !!values.mention,\n                favourite: !!values.favourite,\n                reblog: !!values.reblog,\n                follow: !!values.follow,\n                follow_request: !!values.followRequest,\n                poll: !!values.poll,\n                update: !!values.update,\n                status: !!values.status,\n              },\n            },\n          };\n\n          let alertsCount = 0;\n          // Remove false values from data.alerts\n          // API defaults to false anyway\n          Object.keys(params.data.alerts).forEach((key) => {\n            if (!params.data.alerts[key]) {\n              delete params.data.alerts[key];\n            } else {\n              alertsCount++;\n            }\n          });\n          const policyChanged =\n            previousPolicyRef.current !== params.data.policy;\n\n          console.log('PN Form', {\n            values,\n            allowNotifications: allowNotifications,\n            params,\n          });\n\n          if (allowNotifications && alertsCount > 0) {\n            if (policyChanged) {\n              console.debug('Policy changed.');\n              removeSubscription()\n                .then(() => {\n                  updateSubscription(params);\n                })\n                .catch((err) => {\n                  console.warn(err);\n                  alert('Failed to update subscription. Please try again.');\n                });\n            } else {\n              updateSubscription(params).catch((err) => {\n                console.warn(err);\n                alert('Failed to update subscription. Please try again.');\n              });\n            }\n          } else {\n            removeSubscription().catch((err) => {\n              console.warn(err);\n              alert('Failed to remove subscription. Please try again.');\n            });\n          }\n        }, 100);\n      }}\n    >\n      <h3>Push Notifications (beta)</h3>\n      <section>\n        <ul>\n          <li>\n            <label>\n              <input\n                type=\"checkbox\"\n                disabled={isLoading || needRelogin}\n                name=\"policy-allow\"\n                checked={allowNotifications}\n                onChange={async (e) => {\n                  const { checked } = e.target;\n                  if (checked) {\n                    // Request permission\n                    const permission = await Notification.requestPermission();\n                    if (permission === 'granted') {\n                      setAllowNotifications(true);\n                    } else {\n                      setAllowNotifications(false);\n                      if (permission === 'denied') {\n                        alert(\n                          'Push notifications are blocked. Please enable them in your browser settings.',\n                        );\n                      }\n                    }\n                  } else {\n                    setAllowNotifications(false);\n                  }\n                }}\n              />{' '}\n              Allow from{' '}\n              <select\n                name=\"policy\"\n                disabled={isLoading || needRelogin || !allowNotifications}\n              >\n                {[\n                  {\n                    value: 'all',\n                    label: 'anyone',\n                  },\n                  {\n                    value: 'followed',\n                    label: 'people I follow',\n                  },\n                  {\n                    value: 'follower',\n                    label: 'followers',\n                  },\n                ].map((type) => (\n                  <option value={type.value}>{type.label}</option>\n                ))}\n              </select>\n            </label>\n            <div\n              class=\"shazam-container no-animation\"\n              style={{\n                width: '100%',\n              }}\n              hidden={!allowNotifications}\n            >\n              <div class=\"shazam-container-inner\">\n                <div class=\"sub-section\">\n                  <ul>\n                    {[\n                      {\n                        value: 'mention',\n                        label: 'Mentions',\n                      },\n                      {\n                        value: 'favourite',\n                        label: 'Likes',\n                      },\n                      {\n                        value: 'reblog',\n                        label: 'Boosts',\n                      },\n                      {\n                        value: 'follow',\n                        label: 'Follows',\n                      },\n                      {\n                        value: 'followRequest',\n                        label: 'Follow requests',\n                      },\n                      {\n                        value: 'poll',\n                        label: 'Polls',\n                      },\n                      {\n                        value: 'update',\n                        label: 'Post edits',\n                      },\n                      {\n                        value: 'status',\n                        label: 'New posts',\n                      },\n                    ].map((alert) => (\n                      <li>\n                        <label>\n                          <input type=\"checkbox\" name={alert.value} />{' '}\n                          {alert.label}\n                        </label>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              </div>\n            </div>\n            {needRelogin && (\n              <div class=\"sub-section\">\n                <p>\n                  Push permission was not granted since your last login. You'll\n                  need to{' '}\n                  <Link to={`/login?instance=${instance}`} onClick={onClose}>\n                    <b>log in</b> again to grant push permission\n                  </Link>\n                  .\n                </p>\n              </div>\n            )}\n          </li>\n        </ul>\n      </section>\n      <p class=\"section-postnote\">\n        <small>\n          NOTE: Push notifications only work for <b>one account</b>.\n        </small>\n      </p>\n    </form>\n  );\n}\n\nexport default Settings;\n","const focusDeck = () => {\n  let timer = setTimeout(() => {\n    const columns = document.getElementById('columns');\n    if (columns) {\n      // Focus first column\n      // columns.querySelector('.deck-container')?.focus?.();\n    } else {\n      const modals = document.querySelectorAll('#modal-container > *');\n      if (modals?.length) {\n        // Focus last modal\n        const modal = modals[modals.length - 1]; // last one\n        const modalFocusElement =\n          modal.querySelector('[tabindex=\"-1\"]') || modal;\n        if (modalFocusElement) {\n          modalFocusElement.focus();\n          return;\n        }\n      }\n      const backDrop = document.querySelector('.deck-backdrop');\n      if (backDrop) return;\n      // Focus last deck\n      const pages = document.querySelectorAll('.deck-container');\n      const page = pages[pages.length - 1]; // last one\n      if (page && page.tabIndex === -1) {\n        console.log('FOCUS', page);\n        page.focus();\n      }\n    }\n  }, 100);\n  return () => clearTimeout(timer);\n};\n\nexport default focusDeck;\n","import { useEffect, useRef } from 'preact/hooks';\nimport { useLocation } from 'react-router-dom';\n\n// Hook that runs a callback when the location changes\n// Won't run on the first render\n\nexport default function useLocationChange(fn) {\n  if (!fn) return;\n  const location = useLocation();\n  const currentLocationRef = useRef(location.pathname);\n  useEffect(() => {\n    // console.log('location', {\n    //   current: currentLocationRef.current,\n    //   next: location.pathname,\n    // });\n    if (\n      currentLocationRef.current &&\n      location.pathname !== currentLocationRef.current\n    ) {\n      fn?.();\n    }\n  }, [location.pathname, fn]);\n}\n","import { api } from './api';\nimport pmem from './pmem';\nimport store from './store';\n\nconst FETCH_MAX_AGE = 1000 * 60; // 1 minute\nconst MAX_AGE = 24 * 60 * 60 * 1000; // 1 day\n\nexport const fetchLists = pmem(\n  async () => {\n    const { masto } = api();\n    const lists = await masto.v1.lists.list();\n    lists.sort((a, b) => a.title.localeCompare(b.title));\n\n    if (lists.length) {\n      setTimeout(() => {\n        // Save to local storage, with saved timestamp\n        store.account.set('lists', {\n          lists,\n          updatedAt: Date.now(),\n        });\n      }, 1);\n    }\n\n    return lists;\n  },\n  {\n    maxAge: FETCH_MAX_AGE,\n  },\n);\n\nexport async function getLists() {\n  try {\n    const { lists, updatedAt } = store.account.get('lists') || {};\n    if (!lists?.length) return await fetchLists();\n    if (Date.now() - updatedAt > MAX_AGE) {\n      // Stale-while-revalidate\n      fetchLists();\n      return lists;\n    }\n    return lists;\n  } catch (e) {\n    return [];\n  }\n}\n\nexport const fetchList = pmem(\n  (id) => {\n    const { masto } = api();\n    return masto.v1.lists.$select(id).fetch();\n  },\n  {\n    maxAge: FETCH_MAX_AGE,\n  },\n);\n\nexport async function getList(id) {\n  const { lists } = store.account.get('lists') || {};\n  console.log({ lists });\n  if (lists?.length) {\n    const theList = lists.find((l) => l.id === id);\n    if (theList) return theList;\n  }\n  try {\n    return fetchList(id);\n  } catch (e) {\n    return null;\n  }\n}\n\nexport async function getListTitle(id) {\n  const list = await getList(id);\n  return list?.title || '';\n}\n\nexport function addListStore(list) {\n  const { lists } = store.account.get('lists') || {};\n  if (lists?.length) {\n    lists.push(list);\n    lists.sort((a, b) => a.title.localeCompare(b.title));\n    store.account.set('lists', {\n      lists,\n      updatedAt: Date.now(),\n    });\n  }\n}\n\nexport function updateListStore(list) {\n  const { lists } = store.account.get('lists') || {};\n  if (lists?.length) {\n    const index = lists.findIndex((l) => l.id === list.id);\n    if (index !== -1) {\n      lists[index] = list;\n      lists.sort((a, b) => a.title.localeCompare(b.title));\n      store.account.set('lists', {\n        lists,\n        updatedAt: Date.now(),\n      });\n    }\n  }\n}\n\nexport function deleteListStore(listID) {\n  const { lists } = store.account.get('lists') || {};\n  if (lists?.length) {\n    const index = lists.findIndex((l) => l.id === listID);\n    if (index !== -1) {\n      lists.splice(index, 1);\n      store.account.set('lists', {\n        lists,\n        updatedAt: Date.now(),\n      });\n    }\n  }\n}\n","import { useEffect, useRef, useState } from 'preact/hooks';\n\nimport { api } from '../utils/api';\nimport { addListStore, deleteListStore, updateListStore } from '../utils/lists';\nimport supports from '../utils/supports';\n\nimport Icon from './icon';\nimport MenuConfirm from './menu-confirm';\n\nfunction ListAddEdit({ list, onClose }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const editMode = !!list;\n  const nameFieldRef = useRef();\n  const repliesPolicyFieldRef = useRef();\n  const exclusiveFieldRef = useRef();\n  useEffect(() => {\n    if (editMode) {\n      nameFieldRef.current.value = list.title;\n      repliesPolicyFieldRef.current.value = list.repliesPolicy;\n      if (exclusiveFieldRef.current) {\n        exclusiveFieldRef.current.checked = list.exclusive;\n      }\n    }\n  }, [editMode]);\n  const supportsExclusive = supports('@mastodon/list-exclusive');\n\n  return (\n    <div class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}{' '}\n      <header>\n        <h2>{editMode ? 'Edit list' : 'New list'}</h2>\n      </header>\n      <main>\n        <form\n          class=\"list-form\"\n          onSubmit={(e) => {\n            e.preventDefault(); // Get form values\n\n            const formData = new FormData(e.target);\n            const title = formData.get('title');\n            const repliesPolicy = formData.get('replies_policy');\n            const exclusive = formData.get('exclusive') === 'on';\n            console.log({\n              title,\n              repliesPolicy,\n              exclusive,\n            });\n            setUIState('loading');\n\n            (async () => {\n              try {\n                let listResult;\n\n                if (editMode) {\n                  listResult = await masto.v1.lists.$select(list.id).update({\n                    title,\n                    replies_policy: repliesPolicy,\n                    exclusive,\n                  });\n                } else {\n                  listResult = await masto.v1.lists.create({\n                    title,\n                    replies_policy: repliesPolicy,\n                    exclusive,\n                  });\n                }\n\n                console.log(listResult);\n                setUIState('default');\n                onClose?.({\n                  state: 'success',\n                  list: listResult,\n                });\n\n                setTimeout(() => {\n                  if (editMode) {\n                    updateListStore(listResult);\n                  } else {\n                    addListStore(listResult);\n                  }\n                }, 1);\n              } catch (e) {\n                console.error(e);\n                setUIState('error');\n                alert(\n                  editMode ? 'Unable to edit list.' : 'Unable to create list.',\n                );\n              }\n            })();\n          }}\n        >\n          <div class=\"list-form-row\">\n            <label for=\"list-title\">\n              Name{' '}\n              <input\n                ref={nameFieldRef}\n                type=\"text\"\n                id=\"list-title\"\n                name=\"title\"\n                required\n                disabled={uiState === 'loading'}\n                dir=\"auto\"\n              />\n            </label>\n          </div>\n          <div class=\"list-form-row\">\n            <select\n              ref={repliesPolicyFieldRef}\n              name=\"replies_policy\"\n              required\n              disabled={uiState === 'loading'}\n            >\n              <option value=\"list\">Show replies to list members</option>\n              <option value=\"followed\">Show replies to people I follow</option>\n              <option value=\"none\">Don't show replies</option>\n            </select>\n          </div>\n          {supportsExclusive && (\n            <div class=\"list-form-row\">\n              <label class=\"label-block\">\n                <input\n                  ref={exclusiveFieldRef}\n                  type=\"checkbox\"\n                  name=\"exclusive\"\n                  disabled={uiState === 'loading'}\n                />{' '}\n                Hide posts on this list from Home/Following\n              </label>\n            </div>\n          )}\n          <div class=\"list-form-footer\">\n            <button type=\"submit\" disabled={uiState === 'loading'}>\n              {editMode ? 'Save' : 'Create'}\n            </button>\n            {editMode && (\n              <MenuConfirm\n                disabled={uiState === 'loading'}\n                align=\"end\"\n                menuItemClassName=\"danger\"\n                confirmLabel=\"Delete this list?\"\n                onClick={() => {\n                  // const yes = confirm('Delete this list?');\n                  // if (!yes) return;\n                  setUIState('loading');\n\n                  (async () => {\n                    try {\n                      await masto.v1.lists.$select(list.id).remove();\n                      setUIState('default');\n                      onClose?.({\n                        state: 'deleted',\n                      });\n                      setTimeout(() => {\n                        deleteListStore(list.id);\n                      }, 1);\n                    } catch (e) {\n                      console.error(e);\n                      setUIState('error');\n                      alert('Unable to delete list.');\n                    }\n                  })();\n                }}\n              >\n                <button\n                  type=\"button\"\n                  class=\"light danger\"\n                  disabled={uiState === 'loading'}\n                >\n                  Delete…\n                </button>\n              </MenuConfirm>\n            )}\n          </div>\n        </form>\n      </main>\n    </div>\n  );\n}\n\nexport default ListAddEdit;\n","import './account-info.css';\n\nimport { Menu, MenuDivider, MenuItem, SubMenu } from '@szhsin/react-menu';\nimport {\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n} from 'preact/hooks';\nimport punycode from 'punycode';\n\nimport MenuLink from '../components/menu-link';\nimport { api } from '../utils/api';\nimport enhanceContent from '../utils/enhance-content';\nimport getHTMLText from '../utils/getHTMLText';\nimport handleContentLinks from '../utils/handle-content-links';\nimport { getLists } from '../utils/lists';\nimport niceDateTime from '../utils/nice-date-time';\nimport pmem from '../utils/pmem';\nimport shortenNumber from '../utils/shorten-number';\nimport showToast from '../utils/show-toast';\nimport states, { hideAllModals } from '../utils/states';\nimport store from '../utils/store';\nimport { updateAccount } from '../utils/store-utils';\n\nimport AccountBlock from './account-block';\nimport Avatar from './avatar';\nimport EmojiText from './emoji-text';\nimport Icon from './icon';\nimport Link from './link';\nimport ListAddEdit from './list-add-edit';\nimport Loader from './loader';\nimport Menu2 from './menu2';\nimport MenuConfirm from './menu-confirm';\nimport Modal from './modal';\nimport TranslationBlock from './translation-block';\n\nconst MUTE_DURATIONS = [\n  60 * 5, // 5 minutes\n  60 * 30, // 30 minutes\n  60 * 60, // 1 hour\n  60 * 60 * 6, // 6 hours\n  60 * 60 * 24, // 1 day\n  60 * 60 * 24 * 3, // 3 days\n  60 * 60 * 24 * 7, // 1 week\n  0, // forever\n];\nconst MUTE_DURATIONS_LABELS = {\n  0: 'Forever',\n  300: '5 minutes',\n  1_800: '30 minutes',\n  3_600: '1 hour',\n  21_600: '6 hours',\n  86_400: '1 day',\n  259_200: '3 days',\n  604_800: '1 week',\n};\n\nconst LIMIT = 80;\n\nconst ACCOUNT_INFO_MAX_AGE = 1000 * 60 * 10; // 10 mins\n\nfunction fetchFamiliarFollowers(currentID, masto) {\n  return masto.v1.accounts.familiarFollowers.fetch({\n    id: [currentID],\n  });\n}\nconst memFetchFamiliarFollowers = pmem(fetchFamiliarFollowers, {\n  maxAge: ACCOUNT_INFO_MAX_AGE,\n});\n\nasync function fetchPostingStats(accountID, masto) {\n  const fetchStatuses = masto.v1.accounts\n    .$select(accountID)\n    .statuses.list({\n      limit: 20,\n    })\n    .next();\n\n  const { value: statuses } = await fetchStatuses;\n  console.log('fetched statuses', statuses);\n  const stats = {\n    total: statuses.length,\n    originals: 0,\n    replies: 0,\n    boosts: 0,\n  };\n  // Categories statuses by type\n  // - Original posts (not replies to others)\n  // - Threads (self-replies + 1st original post)\n  // - Boosts (reblogs)\n  // - Replies (not-self replies)\n  statuses.forEach((status) => {\n    if (status.reblog) {\n      stats.boosts++;\n    } else if (\n      !!status.inReplyToId &&\n      status.inReplyToAccountId !== status.account.id // Not self-reply\n    ) {\n      stats.replies++;\n    } else {\n      stats.originals++;\n    }\n  });\n\n  // Count days since last post\n  if (statuses.length) {\n    stats.daysSinceLastPost = Math.ceil(\n      (Date.now() - new Date(statuses[statuses.length - 1].createdAt)) /\n        86400000,\n    );\n  }\n\n  console.log('posting stats', stats);\n  return stats;\n}\nconst memFetchPostingStats = pmem(fetchPostingStats, {\n  maxAge: ACCOUNT_INFO_MAX_AGE,\n});\n\nfunction AccountInfo({\n  account,\n  fetchAccount = () => {},\n  standalone,\n  instance,\n  authenticated,\n}) {\n  const { masto } = api({\n    instance,\n  });\n  const { masto: currentMasto, instance: currentInstance } = api();\n  const [uiState, setUIState] = useState('default');\n  const isString = typeof account === 'string';\n  const [info, setInfo] = useState(isString ? null : account);\n\n  const sameCurrentInstance = useMemo(\n    () => instance === currentInstance,\n    [instance, currentInstance],\n  );\n\n  useEffect(() => {\n    if (!isString) {\n      setInfo(account);\n      return;\n    }\n    setUIState('loading');\n    (async () => {\n      try {\n        const info = await fetchAccount();\n        states.accounts[`${info.id}@${instance}`] = info;\n        setInfo(info);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setInfo(null);\n        setUIState('error');\n      }\n    })();\n  }, [isString, account, fetchAccount]);\n\n  const {\n    acct,\n    avatar,\n    avatarStatic,\n    bot,\n    createdAt,\n    displayName,\n    emojis,\n    fields,\n    followersCount,\n    followingCount,\n    group,\n    // header,\n    // headerStatic,\n    id,\n    lastStatusAt,\n    locked,\n    note,\n    statusesCount,\n    url,\n    username,\n    memorial,\n    moved,\n    roles,\n  } = info || {};\n  let headerIsAvatar = false;\n  let { header, headerStatic } = info || {};\n  if (!header || /missing\\.png$/.test(header)) {\n    if (avatar && !/missing\\.png$/.test(avatar)) {\n      header = avatar;\n      headerIsAvatar = true;\n      if (avatarStatic && !/missing\\.png$/.test(avatarStatic)) {\n        headerStatic = avatarStatic;\n      }\n    }\n  }\n\n  const isSelf = useMemo(\n    () => id === store.session.get('currentAccount'),\n    [id],\n  );\n\n  useEffect(() => {\n    const infoHasEssentials = !!(\n      info?.id &&\n      info?.username &&\n      info?.acct &&\n      info?.avatar &&\n      info?.avatarStatic &&\n      info?.displayName &&\n      info?.url\n    );\n    if (isSelf && instance && infoHasEssentials) {\n      const accounts = store.local.getJSON('accounts');\n      let updated = false;\n      accounts.forEach((account) => {\n        if (account.info.id === info.id && account.instanceURL === instance) {\n          account.info = info;\n          updated = true;\n        }\n      });\n      if (updated) {\n        console.log('Updated account info', info);\n        store.local.setJSON('accounts', accounts);\n      }\n    }\n  }, [isSelf, info, instance]);\n\n  const accountInstance = useMemo(() => {\n    if (!url) return null;\n    const domain = punycode.toUnicode(new URL(url).hostname);\n    return domain;\n  }, [url]);\n\n  const [headerCornerColors, setHeaderCornerColors] = useState([]);\n\n  const followersIterator = useRef();\n  const familiarFollowersCache = useRef([]);\n  async function fetchFollowers(firstLoad) {\n    if (firstLoad || !followersIterator.current) {\n      followersIterator.current = masto.v1.accounts.$select(id).followers.list({\n        limit: LIMIT,\n      });\n    }\n    const results = await followersIterator.current.next();\n    if (isSelf) return results;\n    if (!sameCurrentInstance) return results;\n\n    const { value } = results;\n    let newValue = [];\n    // On first load, fetch familiar followers, merge to top of results' `value`\n    // Remove dups on every fetch\n    if (firstLoad) {\n      const familiarFollowers = await masto.v1.accounts.familiarFollowers.fetch(\n        {\n          id: [id],\n        },\n      );\n      familiarFollowersCache.current = familiarFollowers[0].accounts;\n      newValue = [\n        ...familiarFollowersCache.current,\n        ...value.filter(\n          (account) =>\n            !familiarFollowersCache.current.some(\n              (familiar) => familiar.id === account.id,\n            ),\n        ),\n      ];\n    } else if (value?.length) {\n      newValue = value.filter(\n        (account) =>\n          !familiarFollowersCache.current.some(\n            (familiar) => familiar.id === account.id,\n          ),\n      );\n    }\n\n    return {\n      ...results,\n      value: newValue,\n    };\n  }\n\n  const followingIterator = useRef();\n  async function fetchFollowing(firstLoad) {\n    if (firstLoad || !followingIterator.current) {\n      followingIterator.current = masto.v1.accounts.$select(id).following.list({\n        limit: LIMIT,\n      });\n    }\n    const results = await followingIterator.current.next();\n    return results;\n  }\n\n  const LinkOrDiv = standalone ? 'div' : Link;\n  const accountLink = instance ? `/${instance}/a/${id}` : `/a/${id}`;\n\n  const [familiarFollowers, setFamiliarFollowers] = useState([]);\n  const [postingStats, setPostingStats] = useState();\n  const [postingStatsUIState, setPostingStatsUIState] = useState('default');\n  const hasPostingStats = !!postingStats?.total;\n\n  const renderFamiliarFollowers = async (currentID) => {\n    try {\n      const followers = await memFetchFamiliarFollowers(\n        currentID,\n        currentMasto,\n      );\n      console.log('fetched familiar followers', followers);\n      setFamiliarFollowers(\n        followers[0].accounts.slice(0, FAMILIAR_FOLLOWERS_LIMIT),\n      );\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const renderPostingStats = async () => {\n    if (!id) return;\n    setPostingStatsUIState('loading');\n    try {\n      const stats = await memFetchPostingStats(id, masto);\n      setPostingStats(stats);\n      setPostingStatsUIState('default');\n    } catch (e) {\n      console.error(e);\n      setPostingStatsUIState('error');\n    }\n  };\n\n  const onRelationshipChange = useCallback(\n    ({ relationship, currentID }) => {\n      if (!relationship.following) {\n        renderFamiliarFollowers(currentID);\n        if (!standalone && statusesCount > 0) {\n          // Only render posting stats if not standalone and has posts\n          renderPostingStats();\n        }\n      }\n    },\n    [standalone, id, statusesCount],\n  );\n\n  const onProfileUpdate = useCallback(\n    (newAccount) => {\n      if (newAccount.id === id) {\n        console.log('Updated account info', newAccount);\n        setInfo(newAccount);\n        states.accounts[`${newAccount.id}@${instance}`] = newAccount;\n      }\n    },\n    [id, instance],\n  );\n\n  return (\n    <div\n      tabIndex=\"-1\"\n      class={`account-container ${uiState === 'loading' ? 'skeleton' : ''}`}\n      style={{\n        '--header-color-1': headerCornerColors[0],\n        '--header-color-2': headerCornerColors[1],\n        '--header-color-3': headerCornerColors[2],\n        '--header-color-4': headerCornerColors[3],\n      }}\n    >\n      {uiState === 'error' && (\n        <div class=\"ui-state\">\n          <p>Unable to load account.</p>\n          <p>\n            <a\n              href={isString ? account : url}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Go to account page <Icon icon=\"external\" />\n            </a>\n          </p>\n        </div>\n      )}\n      {uiState === 'loading' ? (\n        <>\n          <header>\n            <AccountBlock avatarSize=\"xxxl\" skeleton />\n          </header>\n          <main>\n            <div class=\"note\">\n              <p>███████ ████ ████</p>\n              <p>████ ████████ ██████ █████████ ████ ██</p>\n            </div>\n            <div class=\"account-metadata-box\">\n              <div class=\"profile-metadata\">\n                <div class=\"profile-field\">\n                  <b class=\"more-insignificant\">███</b>\n                  <p>██████</p>\n                </div>\n                <div class=\"profile-field\">\n                  <b class=\"more-insignificant\">████</b>\n                  <p>███████████</p>\n                </div>\n              </div>\n              <div class=\"stats\">\n                <div>\n                  <span>██</span> Followers\n                </div>\n                <div>\n                  <span>██</span> Following\n                </div>\n                <div>\n                  <span>██</span> Posts\n                </div>\n              </div>\n            </div>\n            <div class=\"actions\">\n              <span />\n              <span class=\"buttons\">\n                <button type=\"button\" title=\"More\" class=\"plain\" disabled>\n                  <Icon icon=\"more\" size=\"l\" alt=\"More\" />\n                </button>\n              </span>\n            </div>\n          </main>\n        </>\n      ) : (\n        info && (\n          <>\n            {!!moved && (\n              <div class=\"account-moved\">\n                <p>\n                  <b>{displayName}</b> has indicated that their new account is\n                  now:\n                </p>\n                <AccountBlock\n                  account={moved}\n                  instance={instance}\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    states.showAccount = moved;\n                  }}\n                />\n              </div>\n            )}\n            {!!header && !/missing\\.png$/.test(header) && (\n              <img\n                src={header}\n                alt=\"\"\n                class={`header-banner ${\n                  headerIsAvatar ? 'header-is-avatar' : ''\n                }`}\n                onError={(e) => {\n                  if (e.target.crossOrigin) {\n                    if (e.target.src !== headerStatic) {\n                      e.target.src = headerStatic;\n                    } else {\n                      e.target.removeAttribute('crossorigin');\n                      e.target.src = header;\n                    }\n                  } else if (e.target.src !== headerStatic) {\n                    e.target.src = headerStatic;\n                  } else {\n                    e.target.remove();\n                  }\n                }}\n                crossOrigin=\"anonymous\"\n                onLoad={(e) => {\n                  e.target.classList.add('loaded');\n                  try {\n                    // Get color from four corners of image\n                    const canvas = window.OffscreenCanvas\n                      ? new OffscreenCanvas(1, 1)\n                      : document.createElement('canvas');\n                    const ctx = canvas.getContext('2d', {\n                      willReadFrequently: true,\n                    });\n                    canvas.width = e.target.width;\n                    canvas.height = e.target.height;\n                    ctx.imageSmoothingEnabled = false;\n                    ctx.drawImage(e.target, 0, 0);\n                    // const colors = [\n                    //   ctx.getImageData(0, 0, 1, 1).data,\n                    //   ctx.getImageData(e.target.width - 1, 0, 1, 1).data,\n                    //   ctx.getImageData(0, e.target.height - 1, 1, 1).data,\n                    //   ctx.getImageData(\n                    //     e.target.width - 1,\n                    //     e.target.height - 1,\n                    //     1,\n                    //     1,\n                    //   ).data,\n                    // ];\n                    // Get 10x10 pixels from corners, get average color from each\n                    const pixelDimension = 10;\n                    const colors = [\n                      ctx.getImageData(0, 0, pixelDimension, pixelDimension)\n                        .data,\n                      ctx.getImageData(\n                        e.target.width - pixelDimension,\n                        0,\n                        pixelDimension,\n                        pixelDimension,\n                      ).data,\n                      ctx.getImageData(\n                        0,\n                        e.target.height - pixelDimension,\n                        pixelDimension,\n                        pixelDimension,\n                      ).data,\n                      ctx.getImageData(\n                        e.target.width - pixelDimension,\n                        e.target.height - pixelDimension,\n                        pixelDimension,\n                        pixelDimension,\n                      ).data,\n                    ].map((data) => {\n                      let r = 0;\n                      let g = 0;\n                      let b = 0;\n                      let a = 0;\n                      for (let i = 0; i < data.length; i += 4) {\n                        r += data[i];\n                        g += data[i + 1];\n                        b += data[i + 2];\n                        a += data[i + 3];\n                      }\n                      const dataLength = data.length / 4;\n                      return [\n                        r / dataLength,\n                        g / dataLength,\n                        b / dataLength,\n                        a / dataLength,\n                      ];\n                    });\n                    const rgbColors = colors.map((color) => {\n                      const [r, g, b, a] = lightenRGB(color);\n                      return `rgba(${r}, ${g}, ${b}, ${a})`;\n                    });\n                    setHeaderCornerColors(rgbColors);\n                    console.log({ colors, rgbColors });\n                  } catch (e) {\n                    // Silently fail\n                  }\n                }}\n              />\n            )}\n            <header>\n              {standalone ? (\n                <Menu2\n                  shift={\n                    window.matchMedia('(min-width: calc(40em))').matches\n                      ? 114\n                      : 64\n                  }\n                  menuButton={\n                    <div>\n                      <AccountBlock\n                        account={info}\n                        instance={instance}\n                        avatarSize=\"xxxl\"\n                        onClick={() => {}}\n                      />\n                    </div>\n                  }\n                >\n                  <div class=\"szh-menu__header\">\n                    <AccountHandleInfo acct={acct} instance={instance} />\n                  </div>\n                  <MenuItem\n                    onClick={() => {\n                      const handle = `@${acct}`;\n                      try {\n                        navigator.clipboard.writeText(handle);\n                        showToast('Handle copied');\n                      } catch (e) {\n                        console.error(e);\n                        showToast('Unable to copy handle');\n                      }\n                    }}\n                  >\n                    <Icon icon=\"link\" />\n                    <span>Copy handle</span>\n                  </MenuItem>\n                  <MenuItem href={url} target=\"_blank\">\n                    <Icon icon=\"external\" />\n                    <span>Go to original profile page</span>\n                  </MenuItem>\n                  <MenuDivider />\n                  <MenuLink href={info.avatar} target=\"_blank\">\n                    <Icon icon=\"user\" />\n                    <span>View profile image</span>\n                  </MenuLink>\n                  <MenuLink href={info.header} target=\"_blank\">\n                    <Icon icon=\"media\" />\n                    <span>View profile header</span>\n                  </MenuLink>\n                </Menu2>\n              ) : (\n                <AccountBlock\n                  account={info}\n                  instance={instance}\n                  avatarSize=\"xxxl\"\n                  internal\n                />\n              )}\n            </header>\n            <div class=\"faux-header-bg\" aria-hidden=\"true\" />\n            <main>\n              {!!memorial && <span class=\"tag\">In Memoriam</span>}\n              {!!bot && (\n                <span class=\"tag\">\n                  <Icon icon=\"bot\" /> Automated\n                </span>\n              )}\n              {!!group && (\n                <span class=\"tag\">\n                  <Icon icon=\"group\" /> Group\n                </span>\n              )}\n              {roles?.map((role) => (\n                <span class=\"tag\">\n                  {role.name}\n                  {!!accountInstance && (\n                    <>\n                      {' '}\n                      <span class=\"more-insignificant\">{accountInstance}</span>\n                    </>\n                  )}\n                </span>\n              ))}\n              <div\n                class=\"note\"\n                dir=\"auto\"\n                onClick={handleContentLinks({\n                  instance: currentInstance,\n                })}\n                dangerouslySetInnerHTML={{\n                  __html: enhanceContent(note, { emojis }),\n                }}\n              />\n              <div class=\"account-metadata-box\">\n                {fields?.length > 0 && (\n                  <div class=\"profile-metadata\">\n                    {fields.map(({ name, value, verifiedAt }, i) => (\n                      <div\n                        class={`profile-field ${\n                          verifiedAt ? 'profile-verified' : ''\n                        }`}\n                        key={name + i}\n                        dir=\"auto\"\n                      >\n                        <b>\n                          <EmojiText text={name} emojis={emojis} />{' '}\n                          {!!verifiedAt && (\n                            <Icon icon=\"check-circle\" size=\"s\" />\n                          )}\n                        </b>\n                        <p\n                          dangerouslySetInnerHTML={{\n                            __html: enhanceContent(value, { emojis }),\n                          }}\n                        />\n                      </div>\n                    ))}\n                  </div>\n                )}\n                <div class=\"stats\">\n                  <LinkOrDiv\n                    tabIndex={0}\n                    to={accountLink}\n                    onClick={() => {\n                      // states.showAccount = false;\n                      setTimeout(() => {\n                        states.showGenericAccounts = {\n                          id: 'followers',\n                          heading: 'Followers',\n                          fetchAccounts: fetchFollowers,\n                          instance,\n                          excludeRelationshipAttrs: isSelf\n                            ? ['followedBy']\n                            : [],\n                        };\n                      }, 0);\n                    }}\n                  >\n                    {!!familiarFollowers.length && (\n                      <span class=\"shazam-container-horizontal\">\n                        <span class=\"shazam-container-inner stats-avatars-bunch\">\n                          {familiarFollowers.map((follower) => (\n                            <Avatar\n                              url={follower.avatarStatic}\n                              size=\"s\"\n                              alt={`${follower.displayName} @${follower.acct}`}\n                              squircle={follower?.bot}\n                            />\n                          ))}\n                        </span>\n                      </span>\n                    )}\n                    <span title={followersCount}>\n                      {shortenNumber(followersCount)}\n                    </span>{' '}\n                    Followers\n                  </LinkOrDiv>\n                  <LinkOrDiv\n                    class=\"insignificant\"\n                    tabIndex={0}\n                    to={accountLink}\n                    onClick={() => {\n                      // states.showAccount = false;\n                      setTimeout(() => {\n                        states.showGenericAccounts = {\n                          heading: 'Following',\n                          fetchAccounts: fetchFollowing,\n                          instance,\n                          excludeRelationshipAttrs: isSelf ? ['following'] : [],\n                        };\n                      }, 0);\n                    }}\n                  >\n                    <span title={followingCount}>\n                      {shortenNumber(followingCount)}\n                    </span>{' '}\n                    Following\n                    <br />\n                  </LinkOrDiv>\n                  <LinkOrDiv\n                    class=\"insignificant\"\n                    to={accountLink}\n                    // onClick={\n                    //   standalone\n                    //     ? undefined\n                    //     : () => {\n                    //         hideAllModals();\n                    //       }\n                    // }\n                  >\n                    <span title={statusesCount}>\n                      {shortenNumber(statusesCount)}\n                    </span>{' '}\n                    Posts\n                  </LinkOrDiv>\n                  {!!createdAt && (\n                    <div class=\"insignificant\">\n                      Joined{' '}\n                      <time datetime={createdAt}>\n                        {niceDateTime(createdAt, {\n                          hideTime: true,\n                        })}\n                      </time>\n                    </div>\n                  )}\n                </div>\n              </div>\n              {!!postingStats && (\n                <LinkOrDiv\n                  to={accountLink}\n                  class=\"account-metadata-box\"\n                  // onClick={() => {\n                  //   states.showAccount = false;\n                  // }}\n                >\n                  <div class=\"shazam-container\">\n                    <div class=\"shazam-container-inner\">\n                      {hasPostingStats ? (\n                        <div\n                          class=\"posting-stats\"\n                          title={`${Math.round(\n                            (postingStats.originals / postingStats.total) * 100,\n                          )}% original posts, ${Math.round(\n                            (postingStats.replies / postingStats.total) * 100,\n                          )}% replies, ${Math.round(\n                            (postingStats.boosts / postingStats.total) * 100,\n                          )}% boosts`}\n                        >\n                          <div>\n                            {postingStats.daysSinceLastPost < 365\n                              ? `Last ${postingStats.total} post${\n                                  postingStats.total > 1 ? 's' : ''\n                                } in the past \n                      ${postingStats.daysSinceLastPost} day${\n                                  postingStats.daysSinceLastPost > 1 ? 's' : ''\n                                }`\n                              : `\n                      Last ${postingStats.total} posts in the past year(s)\n                      `}\n                          </div>\n                          <div\n                            class=\"posting-stats-bar\"\n                            style={{\n                              // [originals | replies | boosts]\n                              '--originals-percentage': `${\n                                (postingStats.originals / postingStats.total) *\n                                100\n                              }%`,\n                              '--replies-percentage': `${\n                                ((postingStats.originals +\n                                  postingStats.replies) /\n                                  postingStats.total) *\n                                100\n                              }%`,\n                            }}\n                          />\n                          <div class=\"posting-stats-legends\">\n                            <span class=\"ib\">\n                              <span class=\"posting-stats-legend-item posting-stats-legend-item-originals\" />{' '}\n                              Original\n                            </span>{' '}\n                            <span class=\"ib\">\n                              <span class=\"posting-stats-legend-item posting-stats-legend-item-replies\" />{' '}\n                              Replies\n                            </span>{' '}\n                            <span class=\"ib\">\n                              <span class=\"posting-stats-legend-item posting-stats-legend-item-boosts\" />{' '}\n                              Boosts\n                            </span>\n                          </div>\n                        </div>\n                      ) : (\n                        <div class=\"posting-stats\">Post stats unavailable.</div>\n                      )}\n                    </div>\n                  </div>\n                </LinkOrDiv>\n              )}\n              {!moved && (\n                <div class=\"account-metadata-box\">\n                  <div\n                    class=\"shazam-container no-animation\"\n                    hidden={!!postingStats}\n                  >\n                    <div class=\"shazam-container-inner\">\n                      <button\n                        type=\"button\"\n                        class=\"posting-stats-button\"\n                        disabled={postingStatsUIState === 'loading'}\n                        onClick={() => {\n                          renderPostingStats();\n                        }}\n                      >\n                        <div\n                          class={`posting-stats-bar posting-stats-icon ${\n                            postingStatsUIState === 'loading' ? 'loading' : ''\n                          }`}\n                          style={{\n                            '--originals-percentage': '33%',\n                            '--replies-percentage': '66%',\n                          }}\n                        />\n                        View post stats{' '}\n                        {/* <Loader\n                        abrupt\n                        hidden={postingStatsUIState !== 'loading'}\n                      /> */}\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </main>\n            <footer>\n              <RelatedActions\n                info={info}\n                instance={instance}\n                standalone={standalone}\n                authenticated={authenticated}\n                onRelationshipChange={onRelationshipChange}\n                onProfileUpdate={onProfileUpdate}\n              />\n            </footer>\n          </>\n        )\n      )}\n    </div>\n  );\n}\n\nconst FAMILIAR_FOLLOWERS_LIMIT = 3;\n\nfunction RelatedActions({\n  info,\n  instance,\n  standalone,\n  authenticated,\n  onRelationshipChange = () => {},\n  onProfileUpdate = () => {},\n}) {\n  if (!info) return null;\n  const {\n    masto: currentMasto,\n    instance: currentInstance,\n    authenticated: currentAuthenticated,\n  } = api();\n  const sameInstance = instance === currentInstance;\n\n  const [relationshipUIState, setRelationshipUIState] = useState('default');\n  const [relationship, setRelationship] = useState(null);\n\n  const { id, acct, url, username, locked, lastStatusAt, note, fields, moved } =\n    info;\n  const accountID = useRef(id);\n\n  const {\n    following,\n    showingReblogs,\n    notifying,\n    followedBy,\n    blocking,\n    blockedBy,\n    muting,\n    mutingNotifications,\n    requested,\n    domainBlocking,\n    endorsed,\n    note: privateNote,\n  } = relationship || {};\n\n  const [currentInfo, setCurrentInfo] = useState(null);\n  const [isSelf, setIsSelf] = useState(false);\n\n  useEffect(() => {\n    if (info) {\n      const currentAccount = store.session.get('currentAccount');\n      let currentID;\n      (async () => {\n        if (sameInstance && authenticated) {\n          currentID = id;\n        } else if (!sameInstance && currentAuthenticated) {\n          // Grab this account from my logged-in instance\n          const acctHasInstance = info.acct.includes('@');\n          try {\n            const results = await currentMasto.v2.search.fetch({\n              q: acctHasInstance ? info.acct : `${info.username}@${instance}`,\n              type: 'accounts',\n              limit: 1,\n              resolve: true,\n            });\n            console.log('🥏 Fetched account from logged-in instance', results);\n            if (results.accounts.length) {\n              currentID = results.accounts[0].id;\n              setCurrentInfo(results.accounts[0]);\n            }\n          } catch (e) {\n            console.error(e);\n          }\n        }\n\n        if (!currentID) return;\n\n        if (currentAccount === currentID) {\n          // It's myself!\n          setIsSelf(true);\n          return;\n        }\n\n        accountID.current = currentID;\n\n        // if (moved) return;\n\n        setRelationshipUIState('loading');\n\n        const fetchRelationships = currentMasto.v1.accounts.relationships.fetch(\n          {\n            id: [currentID],\n          },\n        );\n\n        try {\n          const relationships = await fetchRelationships;\n          console.log('fetched relationship', relationships);\n          setRelationshipUIState('default');\n\n          if (relationships.length) {\n            const relationship = relationships[0];\n            setRelationship(relationship);\n            onRelationshipChange({ relationship, currentID });\n          }\n        } catch (e) {\n          console.error(e);\n          setRelationshipUIState('error');\n        }\n      })();\n    }\n  }, [info, authenticated]);\n\n  useEffect(() => {\n    if (info && isSelf) {\n      updateAccount(info);\n    }\n  }, [info, isSelf]);\n\n  const loading = relationshipUIState === 'loading';\n\n  const [showTranslatedBio, setShowTranslatedBio] = useState(false);\n  const [showAddRemoveLists, setShowAddRemoveLists] = useState(false);\n  const [showPrivateNoteModal, setShowPrivateNoteModal] = useState(false);\n  const [showEditProfile, setShowEditProfile] = useState(false);\n  const [lists, setLists] = useState([]);\n\n  return (\n    <>\n      <div class=\"actions\">\n        <span>\n          {followedBy ? (\n            <span class=\"tag\">Follows you</span>\n          ) : !!lastStatusAt ? (\n            <small class=\"insignificant\">\n              Last post:{' '}\n              <span class=\"ib\">\n                {niceDateTime(lastStatusAt, {\n                  hideTime: true,\n                })}\n              </span>\n            </small>\n          ) : (\n            <span />\n          )}\n          {muting && <span class=\"tag danger\">Muted</span>}\n          {blocking && <span class=\"tag danger\">Blocked</span>}\n        </span>{' '}\n        <span class=\"buttons\">\n          {!!privateNote && (\n            <button\n              type=\"button\"\n              class=\"private-note-tag\"\n              title=\"Private note\"\n              onClick={() => {\n                setShowPrivateNoteModal(true);\n              }}\n              dir=\"auto\"\n            >\n              <span>{privateNote}</span>\n            </button>\n          )}\n          <Menu2\n            portal={{\n              target: document.body,\n            }}\n            containerProps={{\n              style: {\n                // Higher than the backdrop\n                zIndex: 1001,\n              },\n            }}\n            align=\"center\"\n            position=\"anchor\"\n            overflow=\"auto\"\n            menuButton={\n              <button\n                type=\"button\"\n                title=\"More\"\n                class=\"plain\"\n                disabled={loading}\n              >\n                <Icon icon=\"more\" size=\"l\" alt=\"More\" />\n              </button>\n            }\n            onMenuChange={(e) => {\n              if (following && e.open) {\n                // Fetch lists that have this account\n                (async () => {\n                  try {\n                    const lists = await currentMasto.v1.accounts\n                      .$select(accountID.current)\n                      .lists.list();\n                    console.log('fetched account lists', lists);\n                    setLists(lists);\n                  } catch (e) {\n                    console.error(e);\n                  }\n                })();\n              }\n            }}\n          >\n            {currentAuthenticated && !isSelf && (\n              <>\n                <MenuItem\n                  onClick={() => {\n                    states.showCompose = {\n                      draftStatus: {\n                        status: `@${currentInfo?.acct || acct} `,\n                      },\n                    };\n                  }}\n                >\n                  <Icon icon=\"at\" />\n                  <span>Mention @{username}</span>\n                </MenuItem>\n                <MenuItem\n                  onClick={() => {\n                    setShowTranslatedBio(true);\n                  }}\n                >\n                  <Icon icon=\"translate\" />\n                  <span>Translate bio</span>\n                </MenuItem>\n                <MenuItem\n                  onClick={() => {\n                    setShowPrivateNoteModal(true);\n                  }}\n                >\n                  <Icon icon=\"pencil\" />\n                  <span>\n                    {privateNote ? 'Edit private note' : 'Add private note'}\n                  </span>\n                </MenuItem>\n                {following && !!relationship && (\n                  <>\n                    <MenuItem\n                      onClick={() => {\n                        setRelationshipUIState('loading');\n                        (async () => {\n                          try {\n                            const rel = await currentMasto.v1.accounts\n                              .$select(accountID.current)\n                              .follow({\n                                notify: !notifying,\n                              });\n                            if (rel) setRelationship(rel);\n                            setRelationshipUIState('default');\n                            showToast(\n                              rel.notifying\n                                ? `Notifications enabled for @${username}'s posts.`\n                                : ` Notifications disabled for @${username}'s posts.`,\n                            );\n                          } catch (e) {\n                            alert(e);\n                            setRelationshipUIState('error');\n                          }\n                        })();\n                      }}\n                    >\n                      <Icon icon=\"notification\" />\n                      <span>\n                        {notifying\n                          ? 'Disable notifications'\n                          : 'Enable notifications'}\n                      </span>\n                    </MenuItem>\n                    <MenuItem\n                      onClick={() => {\n                        setRelationshipUIState('loading');\n                        (async () => {\n                          try {\n                            const rel = await currentMasto.v1.accounts\n                              .$select(accountID.current)\n                              .follow({\n                                reblogs: !showingReblogs,\n                              });\n                            if (rel) setRelationship(rel);\n                            setRelationshipUIState('default');\n                            showToast(\n                              rel.showingReblogs\n                                ? `Boosts from @${username} disabled.`\n                                : `Boosts from @${username} enabled.`,\n                            );\n                          } catch (e) {\n                            alert(e);\n                            setRelationshipUIState('error');\n                          }\n                        })();\n                      }}\n                    >\n                      <Icon icon=\"rocket\" />\n                      <span>\n                        {showingReblogs ? 'Disable boosts' : 'Enable boosts'}\n                      </span>\n                    </MenuItem>\n                  </>\n                )}\n                {/* Add/remove from lists is only possible if following the account */}\n                {following && (\n                  <MenuItem\n                    onClick={() => {\n                      setShowAddRemoveLists(true);\n                    }}\n                  >\n                    <Icon icon=\"list\" />\n                    {lists.length ? (\n                      <>\n                        <small class=\"menu-grow\">\n                          Add/Remove from Lists\n                          <br />\n                          <span class=\"more-insignificant\">\n                            {lists.map((list) => list.title).join(', ')}\n                          </span>\n                        </small>\n                        <small class=\"more-insignificant\">{lists.length}</small>\n                      </>\n                    ) : (\n                      <span>Add/Remove from Lists</span>\n                    )}\n                  </MenuItem>\n                )}\n                <MenuDivider />\n              </>\n            )}\n            <MenuItem\n              onClick={() => {\n                const handle = `@${currentInfo?.acct || acct}`;\n                try {\n                  navigator.clipboard.writeText(handle);\n                  showToast('Handle copied');\n                } catch (e) {\n                  console.error(e);\n                  showToast('Unable to copy handle');\n                }\n              }}\n            >\n              <Icon icon=\"copy\" />\n              <small>\n                Copy handle\n                <br />\n                <span class=\"more-insignificant\">\n                  @{currentInfo?.acct || acct}\n                </span>\n              </small>\n            </MenuItem>\n            <MenuItem href={url} target=\"_blank\">\n              <Icon icon=\"external\" />\n              <small class=\"menu-double-lines\">{niceAccountURL(url)}</small>\n            </MenuItem>\n            <div class=\"menu-horizontal\">\n              <MenuItem\n                onClick={() => {\n                  // Copy url to clipboard\n                  try {\n                    navigator.clipboard.writeText(url);\n                    showToast('Link copied');\n                  } catch (e) {\n                    console.error(e);\n                    showToast('Unable to copy link');\n                  }\n                }}\n              >\n                <Icon icon=\"link\" />\n                <span>Copy</span>\n              </MenuItem>\n              {navigator?.share &&\n                navigator?.canShare?.({\n                  url,\n                }) && (\n                  <MenuItem\n                    onClick={() => {\n                      try {\n                        navigator.share({\n                          url,\n                        });\n                      } catch (e) {\n                        console.error(e);\n                        alert(\"Sharing doesn't seem to work.\");\n                      }\n                    }}\n                  >\n                    <Icon icon=\"share\" />\n                    <span>Share…</span>\n                  </MenuItem>\n                )}\n            </div>\n            {!!relationship && (\n              <>\n                <MenuDivider />\n                {muting ? (\n                  <MenuItem\n                    onClick={() => {\n                      setRelationshipUIState('loading');\n                      (async () => {\n                        try {\n                          const newRelationship = await currentMasto.v1.accounts\n                            .$select(currentInfo?.id || id)\n                            .unmute();\n                          console.log('unmuting', newRelationship);\n                          setRelationship(newRelationship);\n                          setRelationshipUIState('default');\n                          showToast(`Unmuted @${username}`);\n                          states.reloadGenericAccounts.id = 'mute';\n                          states.reloadGenericAccounts.counter++;\n                        } catch (e) {\n                          console.error(e);\n                          setRelationshipUIState('error');\n                        }\n                      })();\n                    }}\n                  >\n                    <Icon icon=\"unmute\" />\n                    <span>Unmute @{username}</span>\n                  </MenuItem>\n                ) : (\n                  <SubMenu\n                    menuClassName=\"menu-blur\"\n                    openTrigger=\"clickOnly\"\n                    direction=\"bottom\"\n                    overflow=\"auto\"\n                    shift={16}\n                    label={\n                      <>\n                        <Icon icon=\"mute\" />\n                        <span class=\"menu-grow\">Mute @{username}…</span>\n                        <span\n                          style={{\n                            textOverflow: 'clip',\n                          }}\n                        >\n                          <Icon icon=\"time\" />\n                          <Icon icon=\"chevron-right\" />\n                        </span>\n                      </>\n                    }\n                  >\n                    <div class=\"menu-wrap\">\n                      {MUTE_DURATIONS.map((duration) => (\n                        <MenuItem\n                          onClick={() => {\n                            setRelationshipUIState('loading');\n                            (async () => {\n                              try {\n                                const newRelationship =\n                                  await currentMasto.v1.accounts\n                                    .$select(currentInfo?.id || id)\n                                    .mute({\n                                      duration,\n                                    });\n                                console.log('muting', newRelationship);\n                                setRelationship(newRelationship);\n                                setRelationshipUIState('default');\n                                showToast(\n                                  `Muted @${username} for ${MUTE_DURATIONS_LABELS[duration]}`,\n                                );\n                                states.reloadGenericAccounts.id = 'mute';\n                                states.reloadGenericAccounts.counter++;\n                              } catch (e) {\n                                console.error(e);\n                                setRelationshipUIState('error');\n                                showToast(`Unable to mute @${username}`);\n                              }\n                            })();\n                          }}\n                        >\n                          {MUTE_DURATIONS_LABELS[duration]}\n                        </MenuItem>\n                      ))}\n                    </div>\n                  </SubMenu>\n                )}\n                {followedBy && (\n                  <MenuConfirm\n                    subMenu\n                    menuItemClassName=\"danger\"\n                    confirmLabel={\n                      <>\n                        <Icon icon=\"user-x\" />\n                        <span>Remove @{username} from followers?</span>\n                      </>\n                    }\n                    onClick={() => {\n                      setRelationshipUIState('loading');\n                      (async () => {\n                        try {\n                          const newRelationship = await currentMasto.v1.accounts\n                            .$select(currentInfo?.id || id)\n                            .removeFromFollowers();\n                          console.log(\n                            'removing from followers',\n                            newRelationship,\n                          );\n                          setRelationship(newRelationship);\n                          setRelationshipUIState('default');\n                          showToast(`@${username} removed from followers`);\n                          states.reloadGenericAccounts.id = 'followers';\n                          states.reloadGenericAccounts.counter++;\n                        } catch (e) {\n                          console.error(e);\n                          setRelationshipUIState('error');\n                        }\n                      })();\n                    }}\n                  >\n                    <Icon icon=\"user-x\" />\n                    <span>Remove follower…</span>\n                  </MenuConfirm>\n                )}\n                <MenuConfirm\n                  subMenu\n                  confirm={!blocking}\n                  confirmLabel={\n                    <>\n                      <Icon icon=\"block\" />\n                      <span>Block @{username}?</span>\n                    </>\n                  }\n                  menuItemClassName=\"danger\"\n                  onClick={() => {\n                    // if (!blocking && !confirm(`Block @${username}?`)) {\n                    //   return;\n                    // }\n                    setRelationshipUIState('loading');\n                    (async () => {\n                      try {\n                        if (blocking) {\n                          const newRelationship = await currentMasto.v1.accounts\n                            .$select(currentInfo?.id || id)\n                            .unblock();\n                          console.log('unblocking', newRelationship);\n                          setRelationship(newRelationship);\n                          setRelationshipUIState('default');\n                          showToast(`Unblocked @${username}`);\n                        } else {\n                          const newRelationship = await currentMasto.v1.accounts\n                            .$select(currentInfo?.id || id)\n                            .block();\n                          console.log('blocking', newRelationship);\n                          setRelationship(newRelationship);\n                          setRelationshipUIState('default');\n                          showToast(`Blocked @${username}`);\n                        }\n                        states.reloadGenericAccounts.id = 'block';\n                        states.reloadGenericAccounts.counter++;\n                      } catch (e) {\n                        console.error(e);\n                        setRelationshipUIState('error');\n                        if (blocking) {\n                          showToast(`Unable to unblock @${username}`);\n                        } else {\n                          showToast(`Unable to block @${username}`);\n                        }\n                      }\n                    })();\n                  }}\n                >\n                  {blocking ? (\n                    <>\n                      <Icon icon=\"unblock\" />\n                      <span>Unblock @{username}</span>\n                    </>\n                  ) : (\n                    <>\n                      <Icon icon=\"block\" />\n                      <span>Block @{username}…</span>\n                    </>\n                  )}\n                </MenuConfirm>\n                <MenuItem\n                  className=\"danger\"\n                  onClick={() => {\n                    states.showReportModal = {\n                      account: currentInfo || info,\n                    };\n                  }}\n                >\n                  <Icon icon=\"flag\" />\n                  <span>Report @{username}…</span>\n                </MenuItem>\n              </>\n            )}\n            {currentAuthenticated && isSelf && standalone && (\n              <>\n                <MenuDivider />\n                <MenuItem\n                  onClick={() => {\n                    setShowEditProfile(true);\n                  }}\n                >\n                  <Icon icon=\"pencil\" />\n                  <span>Edit profile</span>\n                </MenuItem>\n              </>\n            )}\n            {import.meta.env.DEV && currentAuthenticated && isSelf && (\n              <>\n                <MenuDivider />\n                <MenuItem\n                  onClick={async () => {\n                    const relationships =\n                      await currentMasto.v1.accounts.relationships.fetch({\n                        id: [accountID.current],\n                      });\n                    const { note } = relationships[0] || {};\n                    if (note) {\n                      alert(note);\n                      console.log(note);\n                    }\n                  }}\n                >\n                  <Icon icon=\"pencil\" />\n                  <span>See note</span>\n                </MenuItem>\n              </>\n            )}\n          </Menu2>\n          {!relationship && relationshipUIState === 'loading' && (\n            <Loader abrupt />\n          )}\n          {!!relationship && !moved && (\n            <MenuConfirm\n              confirm={following || requested}\n              confirmLabel={\n                <span>\n                  {requested\n                    ? 'Withdraw follow request?'\n                    : `Unfollow @${info.acct || info.username}?`}\n                </span>\n              }\n              menuItemClassName=\"danger\"\n              align=\"end\"\n              disabled={loading}\n              onClick={() => {\n                setRelationshipUIState('loading');\n                (async () => {\n                  try {\n                    let newRelationship;\n\n                    if (following || requested) {\n                      // const yes = confirm(\n                      //   requested\n                      //     ? 'Withdraw follow request?'\n                      //     : `Unfollow @${info.acct || info.username}?`,\n                      // );\n\n                      // if (yes) {\n                      newRelationship = await currentMasto.v1.accounts\n                        .$select(accountID.current)\n                        .unfollow();\n                      // }\n                    } else {\n                      newRelationship = await currentMasto.v1.accounts\n                        .$select(accountID.current)\n                        .follow();\n                    }\n\n                    if (newRelationship) setRelationship(newRelationship);\n                    setRelationshipUIState('default');\n                  } catch (e) {\n                    alert(e);\n                    setRelationshipUIState('error');\n                  }\n                })();\n              }}\n            >\n              <button\n                type=\"button\"\n                class={`${following || requested ? 'light swap' : ''}`}\n                data-swap-state={following || requested ? 'danger' : ''}\n                disabled={loading}\n              >\n                {following ? (\n                  <>\n                    <span>Following</span>\n                    <span>Unfollow…</span>\n                  </>\n                ) : requested ? (\n                  <>\n                    <span>Requested</span>\n                    <span>Withdraw…</span>\n                  </>\n                ) : locked ? (\n                  <>\n                    <Icon icon=\"lock\" /> <span>Follow</span>\n                  </>\n                ) : (\n                  'Follow'\n                )}\n              </button>\n            </MenuConfirm>\n          )}\n        </span>\n      </div>\n      {!!showTranslatedBio && (\n        <Modal\n          onClose={() => {\n            setShowTranslatedBio(false);\n          }}\n        >\n          <TranslatedBioSheet\n            note={note}\n            fields={fields}\n            onClose={() => setShowTranslatedBio(false)}\n          />\n        </Modal>\n      )}\n      {!!showAddRemoveLists && (\n        <Modal\n          onClose={() => {\n            setShowAddRemoveLists(false);\n          }}\n        >\n          <AddRemoveListsSheet\n            accountID={accountID.current}\n            onClose={() => setShowAddRemoveLists(false)}\n          />\n        </Modal>\n      )}\n      {!!showPrivateNoteModal && (\n        <Modal\n          onClose={() => {\n            setShowPrivateNoteModal(false);\n          }}\n        >\n          <PrivateNoteSheet\n            account={info}\n            note={privateNote}\n            onRelationshipChange={(relationship) => {\n              setRelationship(relationship);\n              // onRelationshipChange({ relationship, currentID: accountID.current });\n            }}\n            onClose={() => setShowPrivateNoteModal(false)}\n          />\n        </Modal>\n      )}\n      {!!showEditProfile && (\n        <Modal\n          onClose={() => {\n            setShowEditProfile(false);\n          }}\n        >\n          <EditProfileSheet\n            onClose={({ state, account } = {}) => {\n              setShowEditProfile(false);\n              if (state === 'success' && account) {\n                onProfileUpdate(account);\n              }\n            }}\n          />\n        </Modal>\n      )}\n    </>\n  );\n}\n\n// Apply more alpha if high luminence\nfunction lightenRGB([r, g, b]) {\n  const luminence = 0.2126 * r + 0.7152 * g + 0.0722 * b;\n  console.log('luminence', luminence);\n  let alpha;\n  if (luminence >= 220) {\n    alpha = 1;\n  } else if (luminence <= 50) {\n    alpha = 0.1;\n  } else {\n    alpha = luminence / 255;\n  }\n  alpha = Math.min(1, alpha);\n  return [r, g, b, alpha];\n}\n\nfunction niceAccountURL(url) {\n  if (!url) return;\n  const urlObj = new URL(url);\n  const { host, pathname } = urlObj;\n  const path = pathname.replace(/\\/$/, '').replace(/^\\//, '');\n  return (\n    <>\n      <span class=\"more-insignificant\">{punycode.toUnicode(host)}/</span>\n      <wbr />\n      <span>{path}</span>\n    </>\n  );\n}\n\nfunction TranslatedBioSheet({ note, fields, onClose }) {\n  const fieldsText =\n    fields\n      ?.map(({ name, value }) => `${name}\\n${getHTMLText(value)}`)\n      .join('\\n\\n') || '';\n\n  const text = getHTMLText(note) + (fieldsText ? `\\n\\n${fieldsText}` : '');\n\n  return (\n    <div class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Translated Bio</h2>\n      </header>\n      <main>\n        <p\n          style={{\n            whiteSpace: 'pre-wrap',\n          }}\n        >\n          {text}\n        </p>\n        <TranslationBlock forceTranslate text={text} />\n      </main>\n    </div>\n  );\n}\n\nfunction AddRemoveListsSheet({ accountID, onClose }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [lists, setLists] = useState([]);\n  const [listsContainingAccount, setListsContainingAccount] = useState([]);\n  const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const lists = await getLists();\n        setLists(lists);\n        const listsContainingAccount = await masto.v1.accounts\n          .$select(accountID)\n          .lists.list();\n        console.log({ lists, listsContainingAccount });\n        setListsContainingAccount(listsContainingAccount);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, [reloadCount]);\n\n  const [showListAddEditModal, setShowListAddEditModal] = useState(false);\n\n  return (\n    <div class=\"sheet\" id=\"list-add-remove-container\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Add/Remove from Lists</h2>\n      </header>\n      <main>\n        {lists.length > 0 ? (\n          <ul class=\"list-add-remove\">\n            {lists.map((list) => {\n              const inList = listsContainingAccount.some(\n                (l) => l.id === list.id,\n              );\n              return (\n                <li>\n                  <button\n                    type=\"button\"\n                    class={`light ${inList ? 'checked' : ''}`}\n                    disabled={uiState === 'loading'}\n                    onClick={() => {\n                      setUIState('loading');\n                      (async () => {\n                        try {\n                          if (inList) {\n                            await masto.v1.lists\n                              .$select(list.id)\n                              .accounts.remove({\n                                accountIds: [accountID],\n                              });\n                          } else {\n                            await masto.v1.lists\n                              .$select(list.id)\n                              .accounts.create({\n                                accountIds: [accountID],\n                              });\n                          }\n                          // setUIState('default');\n                          reload();\n                        } catch (e) {\n                          console.error(e);\n                          setUIState('error');\n                          alert(\n                            inList\n                              ? 'Unable to remove from list.'\n                              : 'Unable to add to list.',\n                          );\n                        }\n                      })();\n                    }}\n                  >\n                    <Icon icon=\"check-circle\" />\n                    <span>{list.title}</span>\n                  </button>\n                </li>\n              );\n            })}\n          </ul>\n        ) : uiState === 'loading' ? (\n          <p class=\"ui-state\">\n            <Loader abrupt />\n          </p>\n        ) : uiState === 'error' ? (\n          <p class=\"ui-state\">Unable to load lists.</p>\n        ) : (\n          <p class=\"ui-state\">No lists.</p>\n        )}\n        <button\n          type=\"button\"\n          class=\"plain2\"\n          onClick={() => setShowListAddEditModal(true)}\n          disabled={uiState !== 'default'}\n        >\n          <Icon icon=\"plus\" size=\"l\" /> <span>New list</span>\n        </button>\n      </main>\n      {showListAddEditModal && (\n        <Modal\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowListAddEditModal(false);\n            }\n          }}\n        >\n          <ListAddEdit\n            list={showListAddEditModal?.list}\n            onClose={(result) => {\n              if (result.state === 'success') {\n                reload();\n              }\n              setShowListAddEditModal(false);\n            }}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nfunction PrivateNoteSheet({\n  account,\n  note: initialNote,\n  onRelationshipChange = () => {},\n  onClose = () => {},\n}) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const textareaRef = useRef(null);\n\n  useEffect(() => {\n    let timer;\n    if (textareaRef.current && !initialNote) {\n      timer = setTimeout(() => {\n        textareaRef.current.focus?.();\n      }, 100);\n    }\n    return () => {\n      clearTimeout(timer);\n    };\n  }, []);\n\n  return (\n    <div class=\"sheet\" id=\"private-note-container\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <b>Private note about @{account?.username || account?.acct}</b>\n      </header>\n      <main>\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const note = formData.get('note');\n            if (note?.trim() !== initialNote?.trim()) {\n              setUIState('loading');\n              (async () => {\n                try {\n                  const newRelationship = await masto.v1.accounts\n                    .$select(account?.id)\n                    .note.create({\n                      comment: note,\n                    });\n                  console.log('updated relationship', newRelationship);\n                  setUIState('default');\n                  onRelationshipChange(newRelationship);\n                  onClose();\n                } catch (e) {\n                  console.error(e);\n                  setUIState('error');\n                  alert(e?.message || 'Unable to update private note.');\n                }\n              })();\n            }\n          }}\n        >\n          <textarea\n            ref={textareaRef}\n            name=\"note\"\n            disabled={uiState === 'loading'}\n          >\n            {initialNote}\n          </textarea>\n          <footer>\n            <button\n              type=\"button\"\n              class=\"light\"\n              disabled={uiState === 'loading'}\n              onClick={() => {\n                onClose?.();\n              }}\n            >\n              Cancel\n            </button>\n            <span>\n              <Loader abrupt hidden={uiState !== 'loading'} />\n              <button disabled={uiState === 'loading'} type=\"submit\">\n                Save &amp; close\n              </button>\n            </span>\n          </footer>\n        </form>\n      </main>\n    </div>\n  );\n}\n\nfunction EditProfileSheet({ onClose = () => {} }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('loading');\n  const [account, setAccount] = useState(null);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const acc = await masto.v1.accounts.verifyCredentials();\n        setAccount(acc);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, []);\n\n  console.log('EditProfileSheet', account);\n  const { displayName, source } = account || {};\n  const { note, fields } = source || {};\n  const fieldsAttributesRef = useRef(null);\n\n  return (\n    <div class=\"sheet\" id=\"edit-profile-container\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <b>Edit profile</b>\n      </header>\n      <main>\n        {uiState === 'loading' ? (\n          <p class=\"ui-state\">\n            <Loader abrupt />\n          </p>\n        ) : (\n          <form\n            onSubmit={(e) => {\n              e.preventDefault();\n              const formData = new FormData(e.target);\n              const displayName = formData.get('display_name');\n              const note = formData.get('note');\n              const fieldsAttributesFields =\n                fieldsAttributesRef.current.querySelectorAll(\n                  'input[name^=\"fields_attributes\"]',\n                );\n              const fieldsAttributes = [];\n              fieldsAttributesFields.forEach((field) => {\n                const name = field.name;\n                const [_, index, key] =\n                  name.match(/fields_attributes\\[(\\d+)\\]\\[(.+)\\]/) || [];\n                const value = field.value ? field.value.trim() : '';\n                if (index && key && value) {\n                  if (!fieldsAttributes[index]) fieldsAttributes[index] = {};\n                  fieldsAttributes[index][key] = value;\n                }\n              });\n              // Fill in the blanks\n              fieldsAttributes.forEach((field) => {\n                if (field.name && !field.value) {\n                  field.value = '';\n                }\n              });\n\n              (async () => {\n                try {\n                  const newAccount = await masto.v1.accounts.updateCredentials({\n                    displayName,\n                    note,\n                    fieldsAttributes,\n                  });\n                  console.log('updated account', newAccount);\n                  onClose?.({\n                    state: 'success',\n                    account: newAccount,\n                  });\n                } catch (e) {\n                  console.error(e);\n                  alert(e?.message || 'Unable to update profile.');\n                }\n              })();\n            }}\n          >\n            <p>\n              <label>\n                Name{' '}\n                <input\n                  type=\"text\"\n                  name=\"display_name\"\n                  defaultValue={displayName}\n                  maxLength={30}\n                  disabled={uiState === 'loading'}\n                />\n              </label>\n            </p>\n            <p>\n              <label>\n                Bio\n                <textarea\n                  defaultValue={note}\n                  name=\"note\"\n                  maxLength={500}\n                  rows=\"5\"\n                  disabled={uiState === 'loading'}\n                />\n              </label>\n            </p>\n            {/* Table for fields; name and values are in fields, min 4 rows */}\n            <p>Extra fields</p>\n            <table ref={fieldsAttributesRef}>\n              <thead>\n                <tr>\n                  <th>Label</th>\n                  <th>Content</th>\n                </tr>\n              </thead>\n              <tbody>\n                {Array.from({ length: Math.max(4, fields.length) }).map(\n                  (_, i) => {\n                    const { name = '', value = '' } = fields[i] || {};\n                    return (\n                      <FieldsAttributesRow\n                        key={i}\n                        name={name}\n                        value={value}\n                        index={i}\n                        disabled={uiState === 'loading'}\n                      />\n                    );\n                  },\n                )}\n              </tbody>\n            </table>\n            <footer>\n              <button\n                type=\"button\"\n                class=\"light\"\n                disabled={uiState === 'loading'}\n                onClick={() => {\n                  onClose?.();\n                }}\n              >\n                Cancel\n              </button>\n              <button type=\"submit\" disabled={uiState === 'loading'}>\n                Save\n              </button>\n            </footer>\n          </form>\n        )}\n      </main>\n    </div>\n  );\n}\n\nfunction FieldsAttributesRow({ name, value, disabled, index: i }) {\n  const [hasValue, setHasValue] = useState(!!value);\n  return (\n    <tr>\n      <td>\n        <input\n          type=\"text\"\n          name={`fields_attributes[${i}][name]`}\n          defaultValue={name}\n          disabled={disabled}\n          maxLength={255}\n          required={hasValue}\n        />\n      </td>\n      <td>\n        <input\n          type=\"text\"\n          name={`fields_attributes[${i}][value]`}\n          defaultValue={value}\n          disabled={disabled}\n          maxLength={255}\n          onChange={(e) => setHasValue(!!e.currentTarget.value)}\n        />\n      </td>\n    </tr>\n  );\n}\n\nfunction AccountHandleInfo({ acct, instance }) {\n  // acct = username or username@server\n  let [username, server] = acct.split('@');\n  if (!server) server = instance;\n  return (\n    <div class=\"handle-info\">\n      <span class=\"handle-handle\">\n        <b class=\"handle-username\">{username}</b>\n        <span class=\"handle-at\">@</span>\n        <b class=\"handle-server\">{server}</b>\n      </span>\n      <div class=\"handle-legend\">\n        <span class=\"ib\">\n          <span class=\"handle-legend-icon username\" /> username\n        </span>{' '}\n        <span class=\"ib\">\n          <span class=\"handle-legend-icon server\" /> server domain name\n        </span>\n      </div>\n    </div>\n  );\n}\n\nexport default AccountInfo;\n","import { useEffect } from 'preact/hooks';\n\nimport { api } from '../utils/api';\nimport states from '../utils/states';\nimport useLocationChange from '../utils/useLocationChange';\n\nimport AccountInfo from './account-info';\nimport Icon from './icon';\n\nfunction AccountSheet({ account, instance: propInstance, onClose }) {\n  const { masto, instance, authenticated } = api({ instance: propInstance });\n  const isString = typeof account === 'string';\n\n  useEffect(() => {\n    if (!isString) {\n      states.accounts[`${account.id}@${instance}`] = account;\n    }\n  }, [account]);\n\n  useLocationChange(onClose);\n\n  return (\n    <div\n      class=\"sheet\"\n      // onClick={(e) => {\n      //   const accountBlock = e.target.closest('.account-block');\n      //   if (accountBlock) {\n      //     onClose({\n      //       destination: 'account-statuses',\n      //     });\n      //   }\n      // }}\n    >\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close outer\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <AccountInfo\n        instance={instance}\n        authenticated={authenticated}\n        account={account}\n        fetchAccount={async () => {\n          if (isString) {\n            try {\n              const info = await masto.v1.accounts.lookup({\n                acct: account,\n                skip_webfinger: false,\n              });\n              return info;\n            } catch (e) {\n              const result = await masto.v2.search.fetch({\n                q: account,\n                type: 'accounts',\n                limit: 1,\n                resolve: authenticated,\n              });\n              if (result.accounts.length) {\n                return result.accounts[0];\n              } else if (/https?:\\/\\/[^/]+\\/@/.test(account)) {\n                const accountURL = new URL(account);\n                const { hostname, pathname } = accountURL;\n                const acct =\n                  pathname.replace(/^\\//, '').replace(/\\/$/, '') +\n                  '@' +\n                  hostname;\n                const result = await masto.v2.search.fetch({\n                  q: acct,\n                  type: 'accounts',\n                  limit: 1,\n                  resolve: authenticated,\n                });\n                if (result.accounts.length) {\n                  return result.accounts[0];\n                }\n              }\n            }\n          } else {\n            return account;\n          }\n        }}\n      />\n    </div>\n  );\n}\n\nexport default AccountSheet;\n","import './drafts.css';\n\nimport { useEffect, useMemo, useReducer, useState } from 'react';\n\nimport { api } from '../utils/api';\nimport db from '../utils/db';\nimport niceDateTime from '../utils/nice-date-time';\nimport states from '../utils/states';\nimport { getCurrentAccountNS } from '../utils/store-utils';\n\nimport Icon from './icon';\nimport Loader from './loader';\nimport MenuConfirm from './menu-confirm';\n\nfunction Drafts({ onClose }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [drafts, setDrafts] = useState([]);\n  const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const keys = await db.drafts.keys();\n        if (keys.length) {\n          const ns = getCurrentAccountNS();\n          const ownKeys = keys.filter((key) => key.startsWith(ns));\n          if (ownKeys.length) {\n            const drafts = await db.drafts.getMany(ownKeys);\n            drafts.sort(\n              (a, b) =>\n                new Date(b.updatedAt).getTime() -\n                new Date(a.updatedAt).getTime(),\n            );\n            setDrafts(drafts);\n          } else {\n            setDrafts([]);\n          }\n        } else {\n          setDrafts([]);\n        }\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, [reloadCount]);\n\n  const hasDrafts = drafts?.length > 0;\n\n  return (\n    <div class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>\n          Unsent drafts <Loader abrupt hidden={uiState !== 'loading'} />\n        </h2>\n        {hasDrafts && (\n          <div class=\"insignificant\">\n            Looks like you have unsent drafts. Let's continue where you left\n            off.\n          </div>\n        )}\n      </header>\n      <main>\n        {hasDrafts ? (\n          <>\n            <ul class=\"drafts-list\">\n              {drafts.map((draft) => {\n                const { updatedAt, key, draftStatus, replyTo } = draft;\n                const updatedAtDate = new Date(updatedAt);\n                return (\n                  <li key={updatedAt}>\n                    <div class=\"mini-draft-meta\">\n                      <b>\n                        <Icon icon={replyTo ? 'reply' : 'quill'} size=\"s\" />{' '}\n                        <time>\n                          {!!replyTo && (\n                            <>\n                              @{replyTo.account.acct}\n                              <br />\n                            </>\n                          )}\n                          {niceDateTime(updatedAtDate)}\n                        </time>\n                      </b>\n                      <MenuConfirm\n                        confirmLabel={<span>Delete this draft?</span>}\n                        menuItemClassName=\"danger\"\n                        align=\"end\"\n                        disabled={uiState === 'loading'}\n                        onClick={() => {\n                          (async () => {\n                            try {\n                              // const yes = confirm('Delete this draft?');\n                              // if (yes) {\n                              await db.drafts.del(key);\n                              reload();\n                              // }\n                            } catch (e) {\n                              alert('Error deleting draft! Please try again.');\n                            }\n                          })();\n                        }}\n                      >\n                        <button\n                          type=\"button\"\n                          class=\"small light\"\n                          disabled={uiState === 'loading'}\n                        >\n                          Delete&hellip;\n                        </button>\n                      </MenuConfirm>\n                    </div>\n                    <button\n                      type=\"button\"\n                      disabled={uiState === 'loading'}\n                      class=\"draft-item\"\n                      onClick={async () => {\n                        // console.log({ draftStatus });\n                        let replyToStatus;\n                        if (replyTo) {\n                          setUIState('loading');\n                          try {\n                            replyToStatus = await masto.v1.statuses\n                              .$select(replyTo.id)\n                              .fetch();\n                          } catch (e) {\n                            console.error(e);\n                            alert('Error fetching reply-to status!');\n                            setUIState('default');\n                            return;\n                          }\n                          setUIState('default');\n                        }\n                        window.__COMPOSE__ = {\n                          draftStatus,\n                          replyToStatus,\n                        };\n                        states.showCompose = true;\n                        states.showDrafts = false;\n                      }}\n                    >\n                      <MiniDraft draft={draft} />\n                    </button>\n                  </li>\n                );\n              })}\n            </ul>\n            {drafts.length > 1 && (\n              <p>\n                <MenuConfirm\n                  confirmLabel={<span>Delete all drafts?</span>}\n                  menuItemClassName=\"danger\"\n                  disabled={uiState === 'loading'}\n                  onClick={() => {\n                    (async () => {\n                      // const yes = confirm('Delete all drafts?');\n                      // if (yes) {\n                      setUIState('loading');\n                      try {\n                        await db.drafts.delMany(\n                          drafts.map((draft) => draft.key),\n                        );\n                        setUIState('default');\n                        reload();\n                      } catch (e) {\n                        console.error(e);\n                        alert('Error deleting drafts! Please try again.');\n                        setUIState('error');\n                      }\n                      // }\n                    })();\n                  }}\n                >\n                  <button\n                    type=\"button\"\n                    class=\"light danger\"\n                    disabled={uiState === 'loading'}\n                  >\n                    Delete all&hellip;\n                  </button>\n                </MenuConfirm>\n              </p>\n            )}\n          </>\n        ) : (\n          <p>No drafts found.</p>\n        )}\n      </main>\n    </div>\n  );\n}\n\nfunction MiniDraft({ draft }) {\n  const { draftStatus, replyTo } = draft;\n  const { status, spoilerText, poll, mediaAttachments } = draftStatus;\n  const hasPoll = poll?.options?.length > 0;\n  const hasMedia = mediaAttachments?.length > 0;\n  const hasPollOrMedia = hasPoll || hasMedia;\n  const firstImageMedia = useMemo(() => {\n    if (!hasMedia) return;\n    const image = mediaAttachments.find((media) => /image/.test(media.type));\n    if (!image) return;\n    const { file } = image;\n    const objectURL = URL.createObjectURL(file);\n    return objectURL;\n  }, [hasMedia, mediaAttachments]);\n  return (\n    <>\n      <div class=\"mini-draft\">\n        {hasPollOrMedia && (\n          <div\n            class={`mini-draft-aside ${firstImageMedia ? 'has-image' : ''}`}\n            style={\n              firstImageMedia\n                ? {\n                    '--bg-image': `url(${firstImageMedia})`,\n                  }\n                : {}\n            }\n          >\n            {hasPoll && <Icon icon=\"poll\" />}\n            {hasMedia && (\n              <span>\n                <Icon icon=\"attachment\" />{' '}\n                <small>{mediaAttachments?.length}</small>\n              </span>\n            )}\n          </div>\n        )}\n        <div class=\"mini-draft-main\">\n          {!!spoilerText && <div class=\"mini-draft-spoiler\">{spoilerText}</div>}\n          {!!status && <div class=\"mini-draft-status\">{status}</div>}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Drafts;\n","import './embed-modal.css';\n\nimport Icon from './icon';\n\nfunction EmbedModal({ html, url, width, height, onClose = () => {} }) {\n  return (\n    <div class=\"embed-modal-container\">\n      <div class=\"top-controls\">\n        <button type=\"button\" class=\"light\" onClick={() => onClose()}>\n          <Icon icon=\"x\" />\n        </button>\n        {url && (\n          <a\n            href={url}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            class=\"button plain\"\n          >\n            <span>Open link</span> <Icon icon=\"external\" />\n          </a>\n        )}\n      </div>\n      <div\n        class=\"embed-content\"\n        dangerouslySetInnerHTML={{ __html: html }}\n        style={{\n          '--width': width + 'px',\n          '--height': height + 'px',\n          '--aspect-ratio': `${width}/${height}`,\n        }}\n      />\n    </div>\n  );\n}\n\nexport default EmbedModal;\n","import { api } from './api';\nimport store from './store';\n\nexport async function fetchRelationships(accounts, relationshipsMap = {}) {\n  if (!accounts?.length) return;\n  const { masto } = api();\n\n  const currentAccount = store.session.get('currentAccount');\n  const uniqueAccountIds = accounts.reduce((acc, a) => {\n    // 1. Ignore duplicate accounts\n    // 2. Ignore accounts that are already inside relationshipsMap\n    // 3. Ignore currently logged in account\n    if (\n      !acc.includes(a.id) &&\n      !relationshipsMap[a.id] &&\n      a.id !== currentAccount\n    ) {\n      acc.push(a.id);\n    }\n    return acc;\n  }, []);\n  if (!uniqueAccountIds.length) return null;\n\n  try {\n    const relationships = await masto.v1.accounts.relationships.fetch({\n      id: uniqueAccountIds,\n    });\n    const newRelationshipsMap = relationships.reduce((acc, r) => {\n      acc[r.id] = r;\n      return acc;\n    }, {});\n    return newRelationshipsMap;\n  } catch (e) {\n    console.error(e);\n    // It's okay to fail\n    return null;\n  }\n}\n","import './generic-accounts.css';\n\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { InView } from 'react-intersection-observer';\nimport { useSnapshot } from 'valtio';\n\nimport { api } from '../utils/api';\nimport { fetchRelationships } from '../utils/relationships';\nimport states from '../utils/states';\nimport useLocationChange from '../utils/useLocationChange';\n\nimport AccountBlock from './account-block';\nimport Icon from './icon';\nimport Loader from './loader';\nimport Status from './status';\n\nexport default function GenericAccounts({\n  instance,\n  excludeRelationshipAttrs = [],\n  postID,\n  onClose = () => {},\n}) {\n  const { masto, instance: currentInstance } = api();\n  const isCurrentInstance = instance ? instance === currentInstance : true;\n  const snapStates = useSnapshot(states);\n  ``;\n  const [uiState, setUIState] = useState('default');\n  const [accounts, setAccounts] = useState([]);\n  const [showMore, setShowMore] = useState(false);\n\n  useLocationChange(onClose);\n\n  if (!snapStates.showGenericAccounts) {\n    return null;\n  }\n\n  const {\n    id,\n    heading,\n    fetchAccounts,\n    accounts: staticAccounts,\n    showReactions,\n  } = snapStates.showGenericAccounts;\n\n  const [relationshipsMap, setRelationshipsMap] = useState({});\n\n  const loadRelationships = async (accounts) => {\n    if (!accounts?.length) return;\n    if (!isCurrentInstance) return;\n    const relationships = await fetchRelationships(accounts, relationshipsMap);\n    if (relationships) {\n      setRelationshipsMap({\n        ...relationshipsMap,\n        ...relationships,\n      });\n    }\n  };\n\n  const loadAccounts = (firstLoad) => {\n    if (!fetchAccounts) return;\n    if (firstLoad) setAccounts([]);\n    setUIState('loading');\n    (async () => {\n      try {\n        const { done, value } = await fetchAccounts(firstLoad);\n        if (Array.isArray(value)) {\n          if (firstLoad) {\n            const accounts = [];\n            for (let i = 0; i < value.length; i++) {\n              const account = value[i];\n              const theAccount = accounts.find(\n                (a, j) => a.id === account.id && i !== j,\n              );\n              if (!theAccount) {\n                accounts.push({\n                  _types: [],\n                  ...account,\n                });\n              } else {\n                theAccount._types.push(...account._types);\n              }\n            }\n            setAccounts(accounts);\n          } else {\n            // setAccounts((prev) => [...prev, ...value]);\n            // Merge accounts by id and _types\n            setAccounts((prev) => {\n              const newAccounts = prev;\n              for (const account of value) {\n                const theAccount = newAccounts.find((a) => a.id === account.id);\n                if (!theAccount) {\n                  newAccounts.push(account);\n                } else {\n                  theAccount._types.push(...account._types);\n                }\n              }\n              return newAccounts;\n            });\n          }\n          setShowMore(!done);\n\n          loadRelationships(value);\n        } else {\n          setShowMore(false);\n        }\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  };\n\n  const firstLoad = useRef(true);\n  useEffect(() => {\n    if (staticAccounts?.length > 0) {\n      setAccounts(staticAccounts);\n      loadRelationships(staticAccounts);\n    } else {\n      loadAccounts(true);\n      firstLoad.current = false;\n    }\n  }, [staticAccounts, fetchAccounts]);\n\n  useEffect(() => {\n    if (firstLoad.current) return;\n    // reloadGenericAccounts contains value like {id: 'mute', counter: 1}\n    // We only need to reload if the id matches\n    if (snapStates.reloadGenericAccounts?.id === id) {\n      loadAccounts(true);\n    }\n  }, [snapStates.reloadGenericAccounts.counter]);\n\n  const post = states.statuses[postID];\n\n  return (\n    <div id=\"generic-accounts-container\" class=\"sheet\" tabindex=\"-1\">\n      <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n        <Icon icon=\"x\" />\n      </button>\n      <header>\n        <h2>{heading || 'Accounts'}</h2>\n      </header>\n      <main>\n        {post && (\n          <div class=\"post-preview\">\n            <Status status={post} size=\"s\" readOnly />\n          </div>\n        )}\n        {accounts.length > 0 ? (\n          <>\n            <ul class=\"accounts-list\">\n              {accounts.map((account) => {\n                const relationship = relationshipsMap[account.id];\n                const key = `${account.id}-${account._types?.length || ''}`;\n                return (\n                  <li key={key}>\n                    {showReactions && account._types?.length > 0 && (\n                      <div class=\"reactions-block\">\n                        {account._types.map((type) => (\n                          <Icon\n                            icon={\n                              {\n                                reblog: 'rocket',\n                                favourite: 'heart',\n                              }[type]\n                            }\n                            class={`${type}-icon`}\n                          />\n                        ))}\n                      </div>\n                    )}\n                    <div class=\"account-relationships\">\n                      <AccountBlock\n                        account={account}\n                        showStats\n                        relationship={relationship}\n                        excludeRelationshipAttrs={excludeRelationshipAttrs}\n                      />\n                    </div>\n                  </li>\n                );\n              })}\n            </ul>\n            {uiState === 'default' ? (\n              showMore ? (\n                <InView\n                  onChange={(inView) => {\n                    if (inView) {\n                      loadAccounts();\n                    }\n                  }}\n                >\n                  <button\n                    type=\"button\"\n                    class=\"plain block\"\n                    onClick={() => loadAccounts()}\n                  >\n                    Show more&hellip;\n                  </button>\n                </InView>\n              ) : (\n                <p class=\"ui-state insignificant\">The end.</p>\n              )\n            ) : (\n              uiState === 'loading' && (\n                <p class=\"ui-state\">\n                  <Loader abrupt />\n                </p>\n              )\n            )}\n          </>\n        ) : uiState === 'loading' ? (\n          <p class=\"ui-state\">\n            <Loader abrupt />\n          </p>\n        ) : uiState === 'error' ? (\n          <p class=\"ui-state\">Error loading accounts</p>\n        ) : (\n          <p class=\"ui-state insignificant\">Nothing to show</p>\n        )}\n      </main>\n    </div>\n  );\n}\n","import { Menu, MenuItem } from '@szhsin/react-menu';\nimport { useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport getTranslateTargetLanguage from '../utils/get-translate-target-language';\nimport localeMatch from '../utils/locale-match';\nimport { speak, supportsTTS } from '../utils/speech';\nimport states from '../utils/states';\n\nimport Icon from './icon';\nimport Menu2 from './menu2';\nimport TranslationBlock from './translation-block';\n\nexport default function MediaAltModal({ alt, lang, onClose }) {\n  const snapStates = useSnapshot(states);\n  const [forceTranslate, setForceTranslate] = useState(false);\n  const targetLanguage = getTranslateTargetLanguage(true);\n  const contentTranslationHideLanguages =\n    snapStates.settings.contentTranslationHideLanguages || [];\n  const differentLanguage =\n    !!lang &&\n    lang !== targetLanguage &&\n    !localeMatch([lang], [targetLanguage]) &&\n    !contentTranslationHideLanguages.find(\n      (l) => lang === l || localeMatch([lang], [l]),\n    );\n\n  return (\n    <div class=\"sheet\" tabindex=\"-1\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close outer\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header class=\"header-grid\">\n        <h2>Media description</h2>\n        <div class=\"header-side\">\n          <Menu2\n            align=\"end\"\n            menuButton={\n              <button type=\"button\" class=\"plain4\">\n                <Icon icon=\"more\" alt=\"More\" size=\"xl\" />\n              </button>\n            }\n          >\n            <MenuItem\n              disabled={forceTranslate}\n              onClick={() => {\n                setForceTranslate(true);\n              }}\n            >\n              <Icon icon=\"translate\" />\n              <span>Translate</span>\n            </MenuItem>\n            {supportsTTS && (\n              <MenuItem\n                onClick={() => {\n                  speak(alt, lang);\n                }}\n              >\n                <Icon icon=\"speak\" />\n                <span>Speak</span>\n              </MenuItem>\n            )}\n          </Menu2>\n        </div>\n      </header>\n      <main lang={lang} dir=\"auto\">\n        <p\n          style={{\n            whiteSpace: 'pre-wrap',\n            textWrap: 'pretty',\n          }}\n        >\n          {alt}\n        </p>\n        {(differentLanguage || forceTranslate) && (\n          <TranslationBlock\n            forceTranslate={forceTranslate}\n            sourceLanguage={lang}\n            text={alt}\n          />\n        )}\n      </main>\n    </div>\n  );\n}\n","// https://gist.github.com/earthbound19/e7fe15fdf8ca3ef814750a61bc75b5ce\nfunction clamp(value, min, max) {\n  return Math.max(Math.min(value, max), min);\n}\n\nconst gammaToLinear = (c) =>\n  c >= 0.04045 ? Math.pow((c + 0.055) / 1.055, 2.4) : c / 12.92;\nconst linearToGamma = (c) =>\n  c >= 0.0031308 ? 1.055 * Math.pow(c, 1 / 2.4) - 0.055 : 12.92 * c;\n\nexport function rgb2oklab([r, g, b]) {\n  r = gammaToLinear(r / 255);\n  g = gammaToLinear(g / 255);\n  b = gammaToLinear(b / 255);\n  var l = 0.4122214708 * r + 0.5363325363 * g + 0.0514459929 * b;\n  var m = 0.2119034982 * r + 0.6806995451 * g + 0.1073969566 * b;\n  var s = 0.0883024619 * r + 0.2817188376 * g + 0.6299787005 * b;\n  l = Math.cbrt(l);\n  m = Math.cbrt(m);\n  s = Math.cbrt(s);\n  return [\n    l * +0.2104542553 + m * +0.793617785 + s * -0.0040720468,\n    l * +1.9779984951 + m * -2.428592205 + s * +0.4505937099,\n    l * +0.0259040371 + m * +0.7827717662 + s * -0.808675766,\n  ];\n}\n\nexport function oklab2rgb([L, a, b]) {\n  var l = L + a * +0.3963377774 + b * +0.2158037573;\n  var m = L + a * -0.1055613458 + b * -0.0638541728;\n  var s = L + a * -0.0894841775 + b * -1.291485548;\n  // The ** operator here cubes; same as l_*l_*l_ in the C++ example:\n  l = l ** 3;\n  m = m ** 3;\n  s = s ** 3;\n  var r = l * +4.0767416621 + m * -3.3077115913 + s * +0.2309699292;\n  var g = l * -1.2684380046 + m * +2.6097574011 + s * -0.3413193965;\n  var b = l * -0.0041960863 + m * -0.7034186147 + s * +1.707614701;\n  // Convert linear RGB values returned from oklab math to sRGB for our use before returning them:\n  r = 255 * linearToGamma(r);\n  g = 255 * linearToGamma(g);\n  b = 255 * linearToGamma(b);\n  // OPTION: clamp r g and b values to the range 0-255; but if you use the values immediately to draw, JavaScript clamps them on use:\n  r = clamp(r, 0, 255);\n  g = clamp(g, 0, 255);\n  b = clamp(b, 0, 255);\n  // OPTION: round the values. May not be necessary if you use them immediately for rendering in JavaScript, as JavaScript (also) discards decimals on render:\n  r = Math.round(r);\n  g = Math.round(g);\n  b = Math.round(b);\n  return [r, g, b];\n}\n","import { MenuDivider, MenuItem } from '@szhsin/react-menu';\nimport { getBlurHashAverageColor } from 'fast-blurhash';\nimport {\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\n\nimport { oklab2rgb, rgb2oklab } from '../utils/color-utils';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\n\nimport Icon from './icon';\nimport Link from './link';\nimport Media from './media';\nimport Menu2 from './menu2';\nimport MenuLink from './menu-link';\n\nconst { PHANPY_IMG_ALT_API_URL: IMG_ALT_API_URL } = import.meta.env;\n\nfunction MediaModal({\n  mediaAttachments,\n  statusID,\n  instance,\n  lang,\n  index = 0,\n  onClose = () => {},\n}) {\n  const [uiState, setUIState] = useState('default');\n  const carouselRef = useRef(null);\n\n  const [currentIndex, setCurrentIndex] = useState(index);\n  const carouselFocusItem = useRef(null);\n  useLayoutEffect(() => {\n    carouselFocusItem.current?.scrollIntoView();\n\n    // history.pushState({ mediaModal: true }, '');\n    // const handlePopState = (e) => {\n    //   if (e.state?.mediaModal) {\n    //     onClose();\n    //   }\n    // };\n    // window.addEventListener('popstate', handlePopState);\n    // return () => {\n    //   window.removeEventListener('popstate', handlePopState);\n    // };\n  }, []);\n  const prevStatusID = useRef(statusID);\n  useEffect(() => {\n    const scrollLeft = index * carouselRef.current.clientWidth;\n    const differentStatusID = prevStatusID.current !== statusID;\n    if (differentStatusID) prevStatusID.current = statusID;\n    carouselRef.current.scrollTo({\n      left: scrollLeft,\n      behavior: differentStatusID ? 'auto' : 'smooth',\n    });\n    carouselRef.current.focus();\n  }, [index, statusID]);\n\n  const [showControls, setShowControls] = useState(true);\n\n  useEffect(() => {\n    let handleSwipe = () => {\n      onClose();\n    };\n    if (carouselRef.current) {\n      carouselRef.current.addEventListener('swiped-down', handleSwipe);\n    }\n    return () => {\n      if (carouselRef.current) {\n        carouselRef.current.removeEventListener('swiped-down', handleSwipe);\n      }\n    };\n  }, []);\n\n  useHotkeys(\n    'esc',\n    onClose,\n    {\n      ignoreEventWhen: (e) => {\n        const hasModal = !!document.querySelector('#modal-container > *');\n        return hasModal;\n      },\n    },\n    [onClose],\n  );\n\n  useEffect(() => {\n    let handleScroll = () => {\n      const { clientWidth, scrollLeft } = carouselRef.current;\n      const index = Math.round(scrollLeft / clientWidth);\n      setCurrentIndex(index);\n    };\n    if (carouselRef.current) {\n      carouselRef.current.addEventListener('scroll', handleScroll, {\n        passive: true,\n      });\n    }\n    return () => {\n      if (carouselRef.current) {\n        carouselRef.current.removeEventListener('scroll', handleScroll);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    let timer = setTimeout(() => {\n      carouselRef.current?.focus?.();\n    }, 100);\n    return () => clearTimeout(timer);\n  }, []);\n\n  const mediaAccentColors = useMemo(() => {\n    return mediaAttachments?.map((media) => {\n      const { blurhash } = media;\n      if (blurhash) {\n        const averageColor = getBlurHashAverageColor(blurhash);\n        const labAverageColor = rgb2oklab(averageColor);\n        return oklab2rgb([0.6, labAverageColor[1], labAverageColor[2]]);\n      }\n      return null;\n    });\n  }, [mediaAttachments]);\n  const mediaAccentGradient = useMemo(() => {\n    const gap = 5;\n    const range = 100 / mediaAccentColors.length;\n    return (\n      mediaAccentColors\n        ?.map((color, i) => {\n          const start = i * range + gap;\n          const end = (i + 1) * range - gap;\n          if (color) {\n            return `\n            rgba(${color?.join(',')}, 0.4) ${start}%,\n            rgba(${color?.join(',')}, 0.4) ${end}%\n          `;\n          }\n\n          return `\n            transparent ${start}%,\n            transparent ${end}%\n          `;\n        })\n        ?.join(', ') || 'transparent'\n    );\n  }, [mediaAccentColors]);\n\n  let toastRef = useRef(null);\n  useEffect(() => {\n    return () => {\n      toastRef.current?.hideToast?.();\n    };\n  }, []);\n\n  return (\n    <div\n      class={`media-modal-container media-modal-count-${mediaAttachments?.length}`}\n    >\n      <div\n        ref={carouselRef}\n        tabIndex=\"0\"\n        data-swipe-threshold=\"44\"\n        class=\"carousel\"\n        onClick={(e) => {\n          if (\n            e.target.classList.contains('carousel-item') ||\n            e.target.classList.contains('media') ||\n            e.target.classList.contains('media-zoom')\n          ) {\n            onClose();\n          }\n        }}\n        style={\n          mediaAttachments.length > 1\n            ? {\n                backgroundAttachment: 'local',\n                backgroundImage: `linear-gradient(\n            to right, ${mediaAccentGradient})`,\n              }\n            : {}\n        }\n      >\n        {mediaAttachments?.map((media, i) => {\n          const accentColor =\n            mediaAttachments.length === 1 ? mediaAccentColors[i] : null;\n          return (\n            <div\n              class=\"carousel-item\"\n              style={\n                accentColor\n                  ? {\n                      '--accent-color': `rgb(${accentColor?.join(',')})`,\n                      '--accent-alpha-color': `rgba(${accentColor?.join(\n                        ',',\n                      )}, 0.4)`,\n                    }\n                  : {}\n              }\n              tabindex=\"0\"\n              key={media.id}\n              ref={i === currentIndex ? carouselFocusItem : null}\n              onClick={(e) => {\n                // console.log(e);\n                // if (e.target !== e.currentTarget) {\n                //   setShowControls(!showControls);\n                // }\n                if (!e.target.classList.contains('media')) {\n                  setShowControls(!showControls);\n                }\n              }}\n            >\n              {!!media.description && (\n                <button\n                  type=\"button\"\n                  class=\"media-alt\"\n                  hidden={!showControls}\n                  onClick={() => {\n                    states.showMediaAlt = {\n                      alt: media.description,\n                      lang,\n                    };\n                  }}\n                >\n                  <span class=\"alt-badge\">ALT</span>\n                  <span class=\"media-alt-desc\" lang={lang} dir=\"auto\">\n                    {media.description}\n                  </span>\n                </button>\n              )}\n              <Media media={media} showOriginal lang={lang} />\n            </div>\n          );\n        })}\n      </div>\n      <div class=\"carousel-top-controls\" hidden={!showControls}>\n        <span>\n          <button\n            type=\"button\"\n            class=\"carousel-button\"\n            onClick={() => onClose()}\n          >\n            <Icon icon=\"x\" />\n          </button>\n        </span>\n        {mediaAttachments?.length > 1 ? (\n          <span class=\"carousel-dots\">\n            {mediaAttachments?.map((media, i) => (\n              <button\n                key={media.id}\n                type=\"button\"\n                disabled={i === currentIndex}\n                class={`carousel-dot ${i === currentIndex ? 'active' : ''}`}\n                onClick={(e) => {\n                  e.preventDefault();\n                  e.stopPropagation();\n                  carouselRef.current.scrollTo({\n                    left: carouselRef.current.clientWidth * i,\n                    behavior: 'smooth',\n                  });\n                  carouselRef.current.focus();\n                }}\n              >\n                <Icon icon=\"round\" size=\"s\" />\n              </button>\n            ))}\n          </span>\n        ) : (\n          <span />\n        )}\n        <span>\n          <Menu2\n            overflow=\"auto\"\n            align=\"end\"\n            position=\"anchor\"\n            gap={4}\n            menuClassName=\"glass-menu\"\n            menuButton={\n              <button type=\"button\" class=\"carousel-button\">\n                <Icon icon=\"more\" alt=\"More\" />\n              </button>\n            }\n          >\n            <MenuLink\n              href={\n                mediaAttachments[currentIndex]?.remoteUrl ||\n                mediaAttachments[currentIndex]?.url\n              }\n              class=\"carousel-button\"\n              target=\"_blank\"\n              title=\"Open original media in new window\"\n            >\n              <Icon icon=\"popout\" />\n              <span>Open original media</span>\n            </MenuLink>\n            {import.meta.env.DEV && // Only dev for now\n              !!states.settings.mediaAltGenerator &&\n              !!IMG_ALT_API_URL &&\n              !!mediaAttachments[currentIndex]?.url &&\n              !mediaAttachments[currentIndex]?.description &&\n              mediaAttachments[currentIndex]?.type === 'image' && (\n                <>\n                  <MenuDivider />\n                  <MenuItem\n                    disabled={uiState === 'loading'}\n                    onClick={() => {\n                      setUIState('loading');\n                      toastRef.current = showToast({\n                        text: 'Attempting to describe image. Please wait...',\n                        duration: -1,\n                      });\n                      (async function () {\n                        try {\n                          const response = await fetch(\n                            `${IMG_ALT_API_URL}?image=${encodeURIComponent(\n                              mediaAttachments[currentIndex]?.url,\n                            )}`,\n                          ).then((r) => r.json());\n                          states.showMediaAlt = {\n                            alt: response.description,\n                          };\n                        } catch (e) {\n                          console.error(e);\n                          showToast('Failed to describe image');\n                        } finally {\n                          setUIState('default');\n                          toastRef.current?.hideToast?.();\n                        }\n                      })();\n                    }}\n                  >\n                    <Icon icon=\"sparkles2\" />\n                    <span>Describe image…</span>\n                  </MenuItem>\n                </>\n              )}\n          </Menu2>{' '}\n          <Link\n            to={`${instance ? `/${instance}` : ''}/s/${statusID}${\n              window.matchMedia('(min-width: calc(40em + 350px))').matches\n                ? `?media=${currentIndex + 1}`\n                : ''\n            }`}\n            class=\"button carousel-button media-post-link\"\n            // onClick={() => {\n            //   // if small screen (not media query min-width 40em + 350px), run onClose\n            //   if (\n            //     !window.matchMedia('(min-width: calc(40em + 350px))').matches\n            //   ) {\n            //     onClose();\n            //   }\n            // }}\n          >\n            <span class=\"button-label\">View post </span>&raquo;\n          </Link>\n        </span>\n      </div>\n      {mediaAttachments?.length > 1 && (\n        <div class=\"carousel-controls\" hidden={!showControls}>\n          <button\n            type=\"button\"\n            class=\"carousel-button\"\n            hidden={currentIndex === 0}\n            onClick={(e) => {\n              e.preventDefault();\n              e.stopPropagation();\n              carouselRef.current.focus();\n              carouselRef.current.scrollTo({\n                left: carouselRef.current.clientWidth * (currentIndex - 1),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"arrow-left\" />\n          </button>\n          <button\n            type=\"button\"\n            class=\"carousel-button\"\n            hidden={currentIndex === mediaAttachments.length - 1}\n            onClick={(e) => {\n              e.preventDefault();\n              e.stopPropagation();\n              carouselRef.current.focus();\n              carouselRef.current.scrollTo({\n                left: carouselRef.current.clientWidth * (currentIndex + 1),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"arrow-right\" />\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default MediaModal;\n","import './report-modal.css';\n\nimport { Fragment } from 'preact';\nimport { useMemo, useRef, useState } from 'preact/hooks';\n\nimport { api } from '../utils/api';\nimport showToast from '../utils/show-toast';\nimport { getCurrentInstance } from '../utils/store-utils';\n\nimport AccountBlock from './account-block';\nimport Icon from './icon';\nimport Loader from './loader';\nimport Status from './status';\n\n// NOTE: `dislike` hidden for now, it's actually not used for reporting\n// Mastodon shows another screen for unfollowing, muting or blocking instead of reporting\n\nconst CATEGORIES = [, /*'dislike'*/ 'spam', 'legal', 'violation', 'other'];\n// `violation` will be set if there are `rule_ids[]`\n\nconst CATEGORIES_INFO = {\n  // dislike: {\n  //   label: 'Dislike',\n  //   description: 'Not something you want to see',\n  // },\n  spam: {\n    label: 'Spam',\n    description: 'Malicious links, fake engagement, or repetitive replies',\n  },\n  legal: {\n    label: 'Illegal',\n    description: \"Violates the law of your or the server's country\",\n  },\n  violation: {\n    label: 'Server rule violation',\n    description: 'Breaks specific server rules',\n    stampLabel: 'Violation',\n  },\n  other: {\n    label: 'Other',\n    description: \"Issue doesn't fit other categories\",\n    excludeStamp: true,\n  },\n};\n\nfunction ReportModal({ account, post, onClose }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [username, domain] = account.acct.split('@');\n\n  const [rules, currentDomain] = useMemo(() => {\n    const { rules, domain } = getCurrentInstance();\n    return [rules || [], domain];\n  });\n\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [showRules, setShowRules] = useState(false);\n\n  const rulesRef = useRef(null);\n  const [hasRules, setHasRules] = useState(false);\n\n  return (\n    <div class=\"report-modal-container\">\n      <div class=\"top-controls\">\n        <h1>{post ? 'Report Post' : `Report @${username}`}</h1>\n        <button\n          type=\"button\"\n          class=\"plain4 small\"\n          disabled={uiState === 'loading'}\n          onClick={() => onClose()}\n        >\n          <Icon icon=\"x\" size=\"xl\" />\n        </button>\n      </div>\n      <main>\n        <div class=\"report-preview\">\n          {post ? (\n            <Status status={post} size=\"s\" previewMode />\n          ) : (\n            <AccountBlock\n              account={account}\n              avatarSize=\"xxl\"\n              useAvatarStatic\n              showStats\n              showActivity\n            />\n          )}\n        </div>\n        {!!selectedCategory &&\n          !CATEGORIES_INFO[selectedCategory].excludeStamp && (\n            <span\n              class=\"rubber-stamp\"\n              key={selectedCategory}\n              aria-hidden=\"true\"\n            >\n              {CATEGORIES_INFO[selectedCategory].stampLabel ||\n                CATEGORIES_INFO[selectedCategory].label}\n              <small>Pending review</small>\n            </span>\n          )}\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n\n            const formData = new FormData(e.target);\n            const entries = Object.fromEntries(formData.entries());\n            console.log('ENTRIES', entries);\n\n            let { category, comment, forward } = entries;\n            if (!comment) comment = undefined;\n            if (forward === 'on') forward = true;\n            const ruleIds =\n              category === 'violation'\n                ? Object.entries(entries)\n                    .filter(([key]) => key.startsWith('rule_ids'))\n                    .map(([key, value]) => value)\n                : undefined;\n\n            const params = {\n              category,\n              comment,\n              forward,\n              ruleIds,\n            };\n            console.log('PARAMS', params);\n\n            setUIState('loading');\n            (async () => {\n              try {\n                await masto.v1.reports.create({\n                  accountId: account.id,\n                  statusIds: post?.id ? [post.id] : undefined,\n                  category,\n                  comment,\n                  ruleIds,\n                  forward,\n                });\n                setUIState('success');\n                showToast(post ? 'Post reported' : 'Profile reported');\n                onClose();\n              } catch (error) {\n                console.error(error);\n                setUIState('error');\n                showToast(\n                  error?.message ||\n                    (post\n                      ? 'Unable to report post'\n                      : 'Unable to report profile'),\n                );\n              }\n            })();\n          }}\n        >\n          <p>\n            {post\n              ? `What's the issue with this post?`\n              : `What's the issue with this profile?`}\n          </p>\n          <section class=\"report-categories\">\n            {CATEGORIES.map((category) =>\n              category === 'violation' && !rules?.length ? null : (\n                <Fragment key={category}>\n                  <label class=\"report-category\">\n                    <input\n                      type=\"radio\"\n                      name=\"category\"\n                      value={category}\n                      required\n                      disabled={uiState === 'loading'}\n                      onChange={(e) => {\n                        setSelectedCategory(e.target.value);\n                        setShowRules(e.target.value === 'violation');\n                      }}\n                    />\n                    <span>\n                      {CATEGORIES_INFO[category].label} &nbsp;\n                      <small class=\"ib insignificant\">\n                        {CATEGORIES_INFO[category].description}\n                      </small>\n                    </span>\n                  </label>\n                  {category === 'violation' && !!rules?.length && (\n                    <div\n                      class=\"shazam-container no-animation\"\n                      hidden={!showRules}\n                    >\n                      <div class=\"shazam-container-inner\">\n                        <div class=\"report-rules\" ref={rulesRef}>\n                          {rules.map((rule, i) => (\n                            <label class=\"report-rule\" key={rule.id}>\n                              <input\n                                type=\"checkbox\"\n                                name={`rule_ids[${i}]`}\n                                value={rule.id}\n                                required={showRules && !hasRules}\n                                disabled={uiState === 'loading'}\n                                onChange={(e) => {\n                                  const { checked } = e.target;\n                                  if (checked) {\n                                    setHasRules(true);\n                                  } else {\n                                    const checkedInputs =\n                                      rulesRef.current.querySelectorAll(\n                                        'input:checked',\n                                      );\n                                    if (!checkedInputs.length) {\n                                      setHasRules(false);\n                                    }\n                                  }\n                                }}\n                              />\n                              <span>{rule.text}</span>\n                            </label>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </Fragment>\n              ),\n            )}\n          </section>\n          <section class=\"report-comment\">\n            <p>\n              <label for=\"report-comment\">Additional info</label>\n            </p>\n            <textarea\n              maxlength=\"1000\"\n              rows=\"1\"\n              name=\"comment\"\n              id=\"report-comment\"\n              disabled={uiState === 'loading'}\n            />\n          </section>\n          {!!domain && domain !== currentDomain && (\n            <section>\n              <p>\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    switch\n                    name=\"forward\"\n                    disabled={uiState === 'loading'}\n                  />{' '}\n                  <span>\n                    Forward to <i>{domain}</i>\n                  </span>\n                </label>\n              </p>\n            </section>\n          )}\n          <footer>\n            <button type=\"submit\" disabled={uiState === 'loading'}>\n              Send Report\n            </button>{' '}\n            <button\n              type=\"submit\"\n              class=\"plain2\"\n              disabled={uiState === 'loading'}\n              onClick={async () => {\n                try {\n                  await masto.v1.accounts.$select(account.id).mute(); // Infinite duration\n                  showToast(`Muted ${username}`);\n                } catch (e) {\n                  console.error(e);\n                  showToast(`Unable to mute ${username}`);\n                }\n                // onSubmit will still run\n              }}\n            >\n              Send Report <small class=\"ib\">+ Mute profile</small>\n            </button>{' '}\n            <button\n              type=\"submit\"\n              class=\"plain2\"\n              disabled={uiState === 'loading'}\n              onClick={async () => {\n                try {\n                  await masto.v1.accounts.$select(account.id).block();\n                  showToast(`Blocked ${username}`);\n                } catch (e) {\n                  console.error(e);\n                  showToast(`Unable to block ${username}`);\n                }\n                // onSubmit will still run\n              }}\n            >\n              Send Report <small class=\"ib\">+ Block profile</small>\n            </button>\n            <Loader hidden={uiState !== 'loading'} />\n          </footer>\n        </form>\n      </main>\n    </div>\n  );\n}\n\nexport default ReportModal;\n","export default \"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20fill='none'%20viewBox='0%200%2084%2062'%3e%3crect%20width='64'%20height='48'%20x='18'%20y='2'%20fill='%23fff'%20stroke='%23999'%20stroke-width='3'%20rx='4'/%3e%3crect%20width='32'%20height='48'%20x='2'%20y='12'%20fill='%23fff'%20stroke='%23999'%20stroke-width='3'%20rx='4'/%3e%3cpath%20fill='%234169E1'%20d='M14%2052a4%204%200%201%201-8%200%204%204%200%200%201%208%200Zm64-42a4%204%200%201%201-8%200%204%204%200%200%201%208%200Z'/%3e%3c/svg%3e\"","export default \"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20fill='none'%20viewBox='0%200%2082%2062'%3e%3crect%20width='78'%20height='58'%20x='2'%20y='2'%20fill='%23999'%20fill-opacity='.3'%20stroke='%23999'%20stroke-width='3'%20rx='4'/%3e%3crect%20width='18'%20height='46'%20x='8'%20y='8'%20fill='%23fff'%20stroke='%23999'%20stroke-width='2'%20rx='1'/%3e%3crect%20width='18'%20height='46'%20x='32'%20y='8'%20fill='%23fff'%20stroke='%23999'%20stroke-width='2'%20rx='1'/%3e%3crect%20width='18'%20height='46'%20x='56'%20y='8'%20fill='%23fff'%20stroke='%23999'%20stroke-width='2'%20rx='1'/%3e%3c/svg%3e\"","export default \"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20fill='none'%20viewBox='0%200%2084%2062'%3e%3crect%20width='64'%20height='48'%20x='18'%20y='2'%20fill='%23fff'%20stroke='%23999'%20stroke-width='3'%20rx='4'/%3e%3cpath%20fill='%23999'%20fill-opacity='.3'%20d='M19%203h62v10H19z'/%3e%3cpath%20stroke='%234169E1'%20stroke-width='2'%20d='M43%208a2%202%200%201%201-4%200%202%202%200%200%201%204%200Z'/%3e%3cpath%20stroke='%23999'%20stroke-width='2'%20d='M52%208a2%202%200%201%201-4%200%202%202%200%200%201%204%200Zm9%200a2%202%200%201%201-4%200%202%202%200%200%201%204%200Z'/%3e%3crect%20width='32'%20height='48'%20x='2'%20y='12'%20fill='%23fff'%20stroke='%23999'%20stroke-width='3'%20rx='4'/%3e%3cpath%20fill='%23999'%20fill-opacity='.3'%20d='M3%2049h30v10H3z'/%3e%3cpath%20stroke='%234169E1'%20stroke-width='2'%20d='M11%2054a2%202%200%201%201-4%200%202%202%200%200%201%204%200Z'/%3e%3cpath%20stroke='%23999'%20stroke-width='2'%20d='M20%2054a2%202%200%201%201-4%200%202%202%200%200%201%204%200Zm9%200a2%202%200%201%201-4%200%202%202%200%200%201%204%200Z'/%3e%3c/svg%3e\"","import { api } from '../utils/api';\nimport store from '../utils/store';\n\nconst LIMIT = 200;\nconst MAX_FETCH = 10;\n\nexport async function fetchFollowedTags() {\n  const { masto } = api();\n  const iterator = masto.v1.followedTags.list({\n    limit: LIMIT,\n  });\n  const tags = [];\n  let fetchCount = 0;\n  do {\n    const { value, done } = await iterator.next();\n    if (done || value?.length === 0) break;\n    tags.push(...value);\n    fetchCount++;\n  } while (fetchCount < MAX_FETCH);\n  tags.sort((a, b) => a.name.localeCompare(b.name));\n  console.log(tags);\n\n  if (tags.length) {\n    setTimeout(() => {\n      // Save to local storage, with saved timestamp\n      store.account.set('followedTags', {\n        tags,\n        updatedAt: Date.now(),\n      });\n    }, 1);\n  }\n\n  return tags;\n}\n\nconst MAX_AGE = 24 * 60 * 60 * 1000; // 1 day\nexport async function getFollowedTags() {\n  try {\n    const { tags, updatedAt } = store.account.get('followedTags') || {};\n    if (!tags?.length) return await fetchFollowedTags();\n    if (Date.now() - updatedAt > MAX_AGE) {\n      // Stale-while-revalidate\n      fetchFollowedTags();\n      return tags;\n    }\n    return tags;\n  } catch (e) {\n    return [];\n  }\n}\n\nconst fauxDiv = document.createElement('div');\nexport const extractTagsFromStatus = (content) => {\n  if (!content) return [];\n  if (content.indexOf('#') === -1) return [];\n  fauxDiv.innerHTML = content;\n  const hashtagLinks = fauxDiv.querySelectorAll('a.hashtag');\n  if (!hashtagLinks.length) return [];\n  return Array.from(hashtagLinks).map((a) =>\n    a.innerText.trim().replace(/^[^#]*#+/, ''),\n  );\n};\n","import { useEffect, useState } from 'preact/hooks';\n\nfunction AsyncText({ children }) {\n  if (typeof children === 'string') return children;\n  const [text, setText] = useState('');\n  useEffect(() => {\n    Promise.resolve(children).then(setText);\n  }, [children]);\n  return text;\n}\n\nexport default AsyncText;\n","import './shortcuts-settings.css';\n\nimport { useAutoAnimate } from '@formkit/auto-animate/preact';\nimport {\n  compressToEncodedURIComponent,\n  decompressFromEncodedURIComponent,\n} from 'lz-string';\nimport { useEffect, useMemo, useRef, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport floatingButtonUrl from '../assets/floating-button.svg';\nimport multiColumnUrl from '../assets/multi-column.svg';\nimport tabMenuBarUrl from '../assets/tab-menu-bar.svg';\n\nimport { api } from '../utils/api';\nimport { fetchFollowedTags } from '../utils/followed-tags';\nimport { getLists, getListTitle } from '../utils/lists';\nimport pmem from '../utils/pmem';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\nimport store from '../utils/store';\n\nimport AsyncText from './AsyncText';\nimport Icon from './icon';\nimport MenuConfirm from './menu-confirm';\nimport Modal from './modal';\n\nexport const SHORTCUTS_LIMIT = 9;\n\nconst TYPES = [\n  'following',\n  'mentions',\n  'notifications',\n  'list',\n  'public',\n  'trending',\n  'search',\n  'hashtag',\n  'bookmarks',\n  'favourites',\n  // NOTE: Hide for now\n  // 'account-statuses', // Need @acct search first\n];\nconst TYPE_TEXT = {\n  following: 'Home / Following',\n  notifications: 'Notifications',\n  list: 'Lists',\n  public: 'Public (Local / Federated)',\n  search: 'Search',\n  'account-statuses': 'Account',\n  bookmarks: 'Bookmarks',\n  favourites: 'Likes',\n  hashtag: 'Hashtag',\n  trending: 'Trending',\n  mentions: 'Mentions',\n};\nconst TYPE_PARAMS = {\n  list: [\n    {\n      text: 'List ID',\n      name: 'id',\n      notRequired: true,\n    },\n  ],\n  public: [\n    {\n      text: 'Local only',\n      name: 'local',\n      type: 'checkbox',\n    },\n    {\n      text: 'Instance',\n      name: 'instance',\n      type: 'text',\n      placeholder: 'Optional, e.g. mastodon.social',\n      notRequired: true,\n    },\n  ],\n  trending: [\n    {\n      text: 'Instance',\n      name: 'instance',\n      type: 'text',\n      placeholder: 'Optional, e.g. mastodon.social',\n      notRequired: true,\n    },\n  ],\n  search: [\n    {\n      text: 'Search term',\n      name: 'query',\n      type: 'text',\n      placeholder: 'Optional, unless for multi-column mode',\n      notRequired: true,\n    },\n  ],\n  'account-statuses': [\n    {\n      text: '@',\n      name: 'id',\n      type: 'text',\n      placeholder: 'cheeaun@mastodon.social',\n    },\n  ],\n  hashtag: [\n    {\n      text: '#',\n      name: 'hashtag',\n      type: 'text',\n      placeholder: 'e.g. PixelArt (Max 5, space-separated)',\n      pattern: '[^#]+',\n    },\n    {\n      text: 'Media only',\n      name: 'media',\n      type: 'checkbox',\n    },\n    {\n      text: 'Instance',\n      name: 'instance',\n      type: 'text',\n      placeholder: 'Optional, e.g. mastodon.social',\n      notRequired: true,\n    },\n  ],\n};\nconst fetchAccountTitle = pmem(async ({ id }) => {\n  const account = await api().masto.v1.accounts.$select(id).fetch();\n  return account.username || account.acct || account.displayName;\n});\nexport const SHORTCUTS_META = {\n  following: {\n    id: 'home',\n    title: (_, index) => (index === 0 ? 'Home' : 'Following'),\n    path: '/',\n    icon: 'home',\n  },\n  mentions: {\n    id: 'mentions',\n    title: 'Mentions',\n    path: '/mentions',\n    icon: 'at',\n  },\n  notifications: {\n    id: 'notifications',\n    title: 'Notifications',\n    path: '/notifications',\n    icon: 'notification',\n  },\n  list: {\n    id: ({ id }) => (id ? 'list' : 'lists'),\n    title: ({ id }) => (id ? getListTitle(id) : 'Lists'),\n    path: ({ id }) => (id ? `/l/${id}` : '/l'),\n    icon: 'list',\n    excludeViewMode: ({ id }) => (!id ? ['multi-column'] : []),\n  },\n  public: {\n    id: 'public',\n    title: ({ local }) => (local ? 'Local' : 'Federated'),\n    subtitle: ({ instance }) => instance || api().instance,\n    path: ({ local, instance }) => `/${instance}/p${local ? '/l' : ''}`,\n    icon: ({ local }) => (local ? 'building' : 'earth'),\n  },\n  trending: {\n    id: 'trending',\n    title: 'Trending',\n    subtitle: ({ instance }) => instance || api().instance,\n    path: ({ instance }) => `/${instance}/trending`,\n    icon: 'chart',\n  },\n  search: {\n    id: 'search',\n    title: ({ query }) => (query ? `“${query}”` : 'Search'),\n    path: ({ query }) =>\n      query\n        ? `/search?q=${encodeURIComponent(query)}&type=statuses`\n        : '/search',\n    icon: 'search',\n    excludeViewMode: ({ query }) => (!query ? ['multi-column'] : []),\n  },\n  'account-statuses': {\n    id: 'account-statuses',\n    title: fetchAccountTitle,\n    path: ({ id }) => `/a/${id}`,\n    icon: 'user',\n  },\n  bookmarks: {\n    id: 'bookmarks',\n    title: 'Bookmarks',\n    path: '/b',\n    icon: 'bookmark',\n  },\n  favourites: {\n    id: 'favourites',\n    title: 'Likes',\n    path: '/f',\n    icon: 'heart',\n  },\n  hashtag: {\n    id: 'hashtag',\n    title: ({ hashtag }) => hashtag,\n    subtitle: ({ instance }) => instance || api().instance,\n    path: ({ hashtag, instance, media }) =>\n      `${instance ? `/${instance}` : ''}/t/${hashtag.split(/\\s+/).join('+')}${\n        media ? '?media=1' : ''\n      }`,\n    icon: 'hashtag',\n  },\n};\n\nfunction ShortcutsSettings({ onClose }) {\n  const snapStates = useSnapshot(states);\n  const { shortcuts } = snapStates;\n  const [showForm, setShowForm] = useState(false);\n  const [showImportExport, setShowImportExport] = useState(false);\n\n  const [shortcutsListParent] = useAutoAnimate();\n\n  return (\n    <div id=\"shortcuts-settings-container\" class=\"sheet\" tabindex=\"-1\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>\n          <Icon icon=\"shortcut\" /> Shortcuts{' '}\n          <sup\n            style={{\n              fontSize: 12,\n              opacity: 0.5,\n              textTransform: 'uppercase',\n            }}\n          >\n            beta\n          </sup>\n        </h2>\n      </header>\n      <main>\n        <p>Specify a list of shortcuts that'll appear&nbsp;as:</p>\n        <div class=\"shortcuts-view-mode\">\n          {[\n            {\n              value: 'float-button',\n              label: 'Floating button',\n              imgURL: floatingButtonUrl,\n            },\n            {\n              value: 'tab-menu-bar',\n              label: 'Tab/Menu bar',\n              imgURL: tabMenuBarUrl,\n            },\n            {\n              value: 'multi-column',\n              label: 'Multi-column',\n              imgURL: multiColumnUrl,\n            },\n          ].map(({ value, label, imgURL }) => {\n            const checked =\n              snapStates.settings.shortcutsViewMode === value ||\n              (value === 'float-button' &&\n                !snapStates.settings.shortcutsViewMode);\n            return (\n              <label key={value} class={checked ? 'checked' : ''}>\n                <input\n                  type=\"radio\"\n                  name=\"shortcuts-view-mode\"\n                  value={value}\n                  checked={checked}\n                  onChange={(e) => {\n                    states.settings.shortcutsViewMode = e.target.value;\n                  }}\n                />{' '}\n                <img src={imgURL} alt=\"\" width=\"80\" height=\"58\" />{' '}\n                <span>{label}</span>\n              </label>\n            );\n          })}\n        </div>\n        {shortcuts.length > 0 ? (\n          <>\n            <ol class=\"shortcuts-list\" ref={shortcutsListParent}>\n              {shortcuts.filter(Boolean).map((shortcut, i) => {\n                // const key = i + Object.values(shortcut);\n                const key = Object.values(shortcut).join('-');\n                const { type } = shortcut;\n                if (!SHORTCUTS_META[type]) return null;\n                let { icon, title, subtitle, excludeViewMode } =\n                  SHORTCUTS_META[type];\n                if (typeof title === 'function') {\n                  title = title(shortcut, i);\n                }\n                if (typeof subtitle === 'function') {\n                  subtitle = subtitle(shortcut, i);\n                }\n                if (typeof icon === 'function') {\n                  icon = icon(shortcut, i);\n                }\n                if (typeof excludeViewMode === 'function') {\n                  excludeViewMode = excludeViewMode(shortcut, i);\n                }\n                const excludedViewMode = excludeViewMode?.includes(\n                  snapStates.settings.shortcutsViewMode,\n                );\n                return (\n                  <li key={key}>\n                    <Icon icon={icon} />\n                    <span class=\"shortcut-text\">\n                      <AsyncText>{title}</AsyncText>\n                      {subtitle && (\n                        <>\n                          {' '}\n                          <small class=\"ib insignificant\">{subtitle}</small>\n                        </>\n                      )}\n                      {excludedViewMode && (\n                        <span class=\"tag\">\n                          Not available in current view mode\n                        </span>\n                      )}\n                    </span>\n                    <span class=\"shortcut-actions\">\n                      <button\n                        type=\"button\"\n                        class=\"plain small\"\n                        disabled={i === 0}\n                        onClick={() => {\n                          const shortcutsArr = Array.from(states.shortcuts);\n                          if (i > 0) {\n                            const temp = states.shortcuts[i - 1];\n                            shortcutsArr[i - 1] = shortcut;\n                            shortcutsArr[i] = temp;\n                            states.shortcuts = shortcutsArr;\n                          }\n                        }}\n                      >\n                        <Icon icon=\"arrow-up\" alt=\"Move up\" />\n                      </button>\n                      <button\n                        type=\"button\"\n                        class=\"plain small\"\n                        disabled={i === shortcuts.length - 1}\n                        onClick={() => {\n                          const shortcutsArr = Array.from(states.shortcuts);\n                          if (i < states.shortcuts.length - 1) {\n                            const temp = states.shortcuts[i + 1];\n                            shortcutsArr[i + 1] = shortcut;\n                            shortcutsArr[i] = temp;\n                            states.shortcuts = shortcutsArr;\n                          }\n                        }}\n                      >\n                        <Icon icon=\"arrow-down\" alt=\"Move down\" />\n                      </button>\n                      <button\n                        type=\"button\"\n                        class=\"plain small\"\n                        onClick={() => {\n                          setShowForm({\n                            shortcut,\n                            shortcutIndex: i,\n                          });\n                        }}\n                      >\n                        <Icon icon=\"pencil\" alt=\"Edit\" />\n                      </button>\n                      {/* <button\n                      type=\"button\"\n                      class=\"plain small\"\n                      onClick={() => {\n                        states.shortcuts.splice(i, 1);\n                      }}\n                    >\n                      <Icon icon=\"x\" alt=\"Remove\" />\n                    </button> */}\n                    </span>\n                  </li>\n                );\n              })}\n            </ol>\n            {shortcuts.length === 1 &&\n              snapStates.settings.shortcutsViewMode !== 'float-button' && (\n                <div class=\"ui-state insignificant\">\n                  <Icon icon=\"info\" />{' '}\n                  <small>\n                    Add more than one shortcut/column to make this work.\n                  </small>\n                </div>\n              )}\n          </>\n        ) : (\n          <div class=\"ui-state insignificant\">\n            <p>\n              {snapStates.settings.shortcutsViewMode === 'multi-column'\n                ? 'No columns yet. Tap on the Add column button.'\n                : 'No shortcuts yet. Tap on the Add shortcut button.'}\n            </p>\n            <p>\n              Not sure what to add?\n              <br />\n              Try adding{' '}\n              <a\n                href=\"#\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  states.shortcuts = [\n                    {\n                      type: 'following',\n                    },\n                    {\n                      type: 'notifications',\n                    },\n                  ];\n                }}\n              >\n                Home / Following and Notifications\n              </a>{' '}\n              first.\n            </p>\n          </div>\n        )}\n        <p class=\"insignificant\">\n          {shortcuts.length >= SHORTCUTS_LIMIT &&\n            (snapStates.settings.shortcutsViewMode === 'multi-column'\n              ? `Max ${SHORTCUTS_LIMIT} columns`\n              : `Max ${SHORTCUTS_LIMIT} shortcuts`)}\n        </p>\n        <p\n          style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n          }}\n        >\n          <button\n            type=\"button\"\n            class=\"light\"\n            onClick={() => setShowImportExport(true)}\n          >\n            Import/export\n          </button>\n          <button\n            type=\"button\"\n            disabled={shortcuts.length >= SHORTCUTS_LIMIT}\n            onClick={() => setShowForm(true)}\n          >\n            <Icon icon=\"plus\" />{' '}\n            <span>\n              {snapStates.settings.shortcutsViewMode === 'multi-column'\n                ? 'Add column…'\n                : 'Add shortcut…'}\n            </span>\n          </button>\n        </p>\n      </main>\n      {showForm && (\n        <Modal\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowForm(false);\n            }\n          }}\n        >\n          <ShortcutForm\n            shortcut={showForm.shortcut}\n            shortcutIndex={showForm.shortcutIndex}\n            onSubmit={({ result, mode }) => {\n              console.log('onSubmit', result);\n              if (mode === 'edit') {\n                states.shortcuts[showForm.shortcutIndex] = result;\n              } else {\n                states.shortcuts.push(result);\n              }\n            }}\n            onClose={() => setShowForm(false)}\n          />\n        </Modal>\n      )}\n      {showImportExport && (\n        <Modal\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowImportExport(false);\n            }\n          }}\n        >\n          <ImportExport\n            shortcuts={shortcuts}\n            onClose={() => setShowImportExport(false)}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nconst FORM_NOTES = {\n  list: `Specific list is optional. For multi-column mode, list is required, else the column will not be shown.`,\n  search: `For multi-column mode, search term is required, else the column will not be shown.`,\n  hashtag: 'Multiple hashtags are supported. Space-separated.',\n};\n\nfunction ShortcutForm({\n  onSubmit,\n  disabled,\n  shortcut,\n  shortcutIndex,\n  onClose,\n}) {\n  console.log('shortcut', shortcut);\n  const editMode = !!shortcut;\n  const [currentType, setCurrentType] = useState(shortcut?.type || null);\n  const { masto } = api();\n\n  const [uiState, setUIState] = useState('default');\n  const [lists, setLists] = useState([]);\n  const [followedHashtags, setFollowedHashtags] = useState([]);\n  useEffect(() => {\n    (async () => {\n      if (currentType !== 'list') return;\n      try {\n        setUIState('loading');\n        const lists = await getLists();\n        setLists(lists);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n\n    (async () => {\n      if (currentType !== 'hashtag') return;\n      try {\n        const tags = await fetchFollowedTags();\n        setFollowedHashtags(tags);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [currentType]);\n\n  const formRef = useRef();\n  useEffect(() => {\n    if (editMode && currentType && TYPE_PARAMS[currentType]) {\n      // Populate form\n      const form = formRef.current;\n      TYPE_PARAMS[currentType].forEach(({ name, type }) => {\n        const input = form.querySelector(`[name=\"${name}\"]`);\n        if (input && shortcut[name]) {\n          if (type === 'checkbox') {\n            input.checked = shortcut[name] === 'on' ? true : false;\n          } else {\n            input.value = shortcut[name];\n          }\n        }\n      });\n    }\n  }, [editMode, currentType]);\n\n  return (\n    <div id=\"shortcut-settings-form\" class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>{editMode ? 'Edit' : 'Add'} shortcut</h2>\n      </header>\n      <main tabindex=\"-1\">\n        <form\n          ref={formRef}\n          onSubmit={(e) => {\n            // Construct a nice object from form\n            e.preventDefault();\n            const data = new FormData(e.target);\n            const result = {};\n            data.forEach((value, key) => {\n              result[key] = value?.trim();\n              if (key === 'instance') {\n                // Remove protocol and trailing slash\n                result[key] = result[key]\n                  .replace(/^https?:\\/\\//, '')\n                  .replace(/\\/+$/, '');\n                // Remove @acct@ or acct@ from instance URL\n                result[key] = result[key].replace(/^@?[^@]+@/, '');\n              }\n            });\n            console.log('result', result);\n            if (!result.type) return;\n            onSubmit({\n              result,\n              mode: editMode ? 'edit' : 'add',\n            });\n            // Reset\n            e.target.reset();\n            setCurrentType(null);\n            onClose?.();\n          }}\n        >\n          <p>\n            <label>\n              <span>Timeline</span>\n              <select\n                required\n                disabled={disabled}\n                onChange={(e) => {\n                  setCurrentType(e.target.value);\n                }}\n                defaultValue={editMode ? shortcut.type : undefined}\n                name=\"type\"\n              >\n                <option></option>\n                {TYPES.map((type) => (\n                  <option value={type}>{TYPE_TEXT[type]}</option>\n                ))}\n              </select>\n            </label>\n          </p>\n          {TYPE_PARAMS[currentType]?.map?.(\n            ({ text, name, type, placeholder, pattern, notRequired }) => {\n              if (currentType === 'list') {\n                return (\n                  <p>\n                    <label>\n                      <span>List</span>\n                      <select\n                        name=\"id\"\n                        required={!notRequired}\n                        disabled={disabled || uiState === 'loading'}\n                        defaultValue={editMode ? shortcut.id : undefined}\n                      >\n                        <option value=\"\"></option>\n                        {lists.map((list) => (\n                          <option value={list.id}>{list.title}</option>\n                        ))}\n                      </select>\n                    </label>\n                  </p>\n                );\n              }\n\n              return (\n                <p>\n                  <label>\n                    <span>{text}</span>{' '}\n                    <input\n                      type={type}\n                      switch={type === 'checkbox' || undefined}\n                      name={name}\n                      placeholder={placeholder}\n                      required={type === 'text' && !notRequired}\n                      disabled={disabled}\n                      list={\n                        currentType === 'hashtag'\n                          ? 'followed-hashtags-datalist'\n                          : null\n                      }\n                      autocorrect=\"off\"\n                      autocapitalize=\"off\"\n                      spellCheck={false}\n                      pattern={pattern}\n                    />\n                    {currentType === 'hashtag' &&\n                      followedHashtags.length > 0 && (\n                        <datalist id=\"followed-hashtags-datalist\">\n                          {followedHashtags.map((tag) => (\n                            <option value={tag.name} />\n                          ))}\n                        </datalist>\n                      )}\n                  </label>\n                </p>\n              );\n            },\n          )}\n          {!!FORM_NOTES[currentType] && (\n            <p class=\"form-note insignificant\">\n              <Icon icon=\"info\" />\n              {FORM_NOTES[currentType]}\n            </p>\n          )}\n          <footer>\n            <button\n              type=\"submit\"\n              class=\"block\"\n              disabled={disabled || uiState === 'loading'}\n            >\n              {editMode ? 'Save' : 'Add'}\n            </button>\n            {editMode && (\n              <button\n                type=\"button\"\n                class=\"light danger\"\n                onClick={() => {\n                  states.shortcuts.splice(shortcutIndex, 1);\n                  onClose?.();\n                }}\n              >\n                Remove\n              </button>\n            )}\n          </footer>\n        </form>\n      </main>\n    </div>\n  );\n}\n\nfunction ImportExport({ shortcuts, onClose }) {\n  const { masto } = api();\n  const shortcutsStr = useMemo(() => {\n    if (!shortcuts) return '';\n    if (!shortcuts.filter(Boolean).length) return '';\n    return compressToEncodedURIComponent(\n      JSON.stringify(shortcuts.filter(Boolean)),\n    );\n  }, [shortcuts]);\n  const [importShortcutStr, setImportShortcutStr] = useState('');\n  const [importUIState, setImportUIState] = useState('default');\n  const parsedImportShortcutStr = useMemo(() => {\n    if (!importShortcutStr) {\n      setImportUIState('default');\n      return null;\n    }\n    try {\n      const parsed = JSON.parse(\n        decompressFromEncodedURIComponent(importShortcutStr),\n      );\n      // Very basic validation, I know\n      if (!Array.isArray(parsed)) throw new Error('Not an array');\n      setImportUIState('default');\n      return parsed;\n    } catch (err) {\n      // Fallback to JSON string parsing\n      // There's a chance that someone might want to import a JSON string instead of the compressed version\n      try {\n        const parsed = JSON.parse(importShortcutStr);\n        if (!Array.isArray(parsed)) throw new Error('Not an array');\n        setImportUIState('default');\n        return parsed;\n      } catch (err) {\n        setImportUIState('error');\n        return null;\n      }\n    }\n  }, [importShortcutStr]);\n  const hasCurrentSettings = states.shortcuts.length > 0;\n\n  const shortcutsImportFieldRef = useRef();\n\n  return (\n    <div id=\"import-export-container\" class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>\n          Import/Export <small class=\"ib insignificant\">Shortcuts</small>\n        </h2>\n      </header>\n      <main tabindex=\"-1\">\n        <section>\n          <h3>\n            <Icon icon=\"arrow-down-circle\" size=\"l\" class=\"insignificant\" />{' '}\n            <span>Import</span>\n          </h3>\n          <p class=\"field-button\">\n            <input\n              ref={shortcutsImportFieldRef}\n              type=\"text\"\n              name=\"import\"\n              placeholder=\"Paste shortcuts here\"\n              class=\"block\"\n              onInput={(e) => {\n                setImportShortcutStr(e.target.value);\n              }}\n            />\n            {states.settings.shortcutSettingsCloudImportExport && (\n              <button\n                type=\"button\"\n                class=\"plain2 small\"\n                disabled={importUIState === 'cloud-downloading'}\n                onClick={async () => {\n                  setImportUIState('cloud-downloading');\n                  const currentAccount = store.session.get('currentAccount');\n                  showToast(\n                    'Downloading saved shortcuts from instance server…',\n                  );\n                  try {\n                    const relationships =\n                      await masto.v1.accounts.relationships.fetch({\n                        id: [currentAccount],\n                      });\n                    const relationship = relationships[0];\n                    if (relationship) {\n                      const { note = '' } = relationship;\n                      if (\n                        /<phanpy-shortcuts-settings>(.*)<\\/phanpy-shortcuts-settings>/.test(\n                          note,\n                        )\n                      ) {\n                        const settings = note.match(\n                          /<phanpy-shortcuts-settings>(.*)<\\/phanpy-shortcuts-settings>/,\n                        )[1];\n                        const { v, dt, data } = JSON.parse(settings);\n                        shortcutsImportFieldRef.current.value = data;\n                        shortcutsImportFieldRef.current.dispatchEvent(\n                          new Event('input'),\n                        );\n                      }\n                    }\n                    setImportUIState('default');\n                  } catch (e) {\n                    console.error(e);\n                    setImportUIState('error');\n                    showToast('Unable to download shortcuts');\n                  }\n                }}\n                title=\"Download shortcuts from instance server\"\n              >\n                <Icon icon=\"cloud\" />\n                <Icon icon=\"arrow-down\" />\n              </button>\n            )}\n          </p>\n          {!!parsedImportShortcutStr &&\n            Array.isArray(parsedImportShortcutStr) && (\n              <>\n                <p>\n                  <b>{parsedImportShortcutStr.length}</b> shortcut\n                  {parsedImportShortcutStr.length > 1 ? 's' : ''}{' '}\n                  <small class=\"insignificant\">\n                    ({importShortcutStr.length} characters)\n                  </small>\n                </p>\n                <ol class=\"import-settings-list\">\n                  {parsedImportShortcutStr.map((shortcut) => (\n                    <li>\n                      <span\n                        style={{\n                          opacity: shortcuts.some((s) =>\n                            // Compare all properties\n                            Object.keys(s).every(\n                              (key) => s[key] === shortcut[key],\n                            ),\n                          )\n                            ? 1\n                            : 0,\n                        }}\n                      >\n                        *\n                      </span>\n                      <span>\n                        {TYPE_TEXT[shortcut.type]}\n                        {shortcut.type === 'list' && ' ⚠️'}{' '}\n                        {TYPE_PARAMS[shortcut.type]?.map?.(\n                          ({ text, name, type }) =>\n                            shortcut[name] ? (\n                              <>\n                                <span class=\"tag collapsed insignificant\">\n                                  {text}:{' '}\n                                  {type === 'checkbox'\n                                    ? shortcut[name] === 'on'\n                                      ? '✅'\n                                      : '❌'\n                                    : shortcut[name]}\n                                </span>{' '}\n                              </>\n                            ) : null,\n                        )}\n                      </span>\n                    </li>\n                  ))}\n                </ol>\n                <p>\n                  <small>* Exists in current shortcuts</small>\n                  <br />\n                  <small>\n                    ⚠️ List may not work if it's from a different account.\n                  </small>\n                </p>\n              </>\n            )}\n          {importUIState === 'error' && (\n            <p class=\"error\">\n              <small>⚠️ Invalid settings format</small>\n            </p>\n          )}\n          <p>\n            {hasCurrentSettings && (\n              <>\n                <MenuConfirm\n                  confirmLabel=\"Append to current shortcuts?\"\n                  menuFooter={\n                    <div class=\"footer\">\n                      Only shortcuts that don’t exist in current shortcuts will\n                      be appended.\n                    </div>\n                  }\n                  onClick={() => {\n                    // states.shortcuts = [\n                    //   ...states.shortcuts,\n                    //   ...parsedImportShortcutStr,\n                    // ];\n                    // Append non-unique shortcuts only\n                    const nonUniqueShortcuts = parsedImportShortcutStr.filter(\n                      (shortcut) =>\n                        !states.shortcuts.some((s) =>\n                          // Compare all properties\n                          Object.keys(s).every(\n                            (key) => s[key] === shortcut[key],\n                          ),\n                        ),\n                    );\n                    if (!nonUniqueShortcuts.length) {\n                      showToast('No new shortcuts to import');\n                      return;\n                    }\n                    let newShortcuts = [\n                      ...states.shortcuts,\n                      ...nonUniqueShortcuts,\n                    ];\n                    const exceededLimit = newShortcuts.length > SHORTCUTS_LIMIT;\n                    if (exceededLimit) {\n                      // If exceeded, trim it\n                      newShortcuts = newShortcuts.slice(0, SHORTCUTS_LIMIT);\n                    }\n                    states.shortcuts = newShortcuts;\n                    showToast(\n                      exceededLimit\n                        ? `Shortcuts imported. Exceeded max ${SHORTCUTS_LIMIT}, so the rest are not imported.`\n                        : 'Shortcuts imported',\n                    );\n                    onClose?.();\n                  }}\n                >\n                  <button\n                    type=\"button\"\n                    class=\"plain2\"\n                    disabled={!parsedImportShortcutStr}\n                  >\n                    Import & append…\n                  </button>\n                </MenuConfirm>{' '}\n              </>\n            )}\n            <MenuConfirm\n              confirmLabel={\n                hasCurrentSettings\n                  ? 'Override current shortcuts?'\n                  : 'Import shortcuts?'\n              }\n              menuItemClassName={hasCurrentSettings ? 'danger' : undefined}\n              onClick={() => {\n                states.shortcuts = parsedImportShortcutStr;\n                showToast('Shortcuts imported');\n                onClose?.();\n              }}\n            >\n              <button\n                type=\"button\"\n                class=\"plain2\"\n                disabled={!parsedImportShortcutStr}\n              >\n                {hasCurrentSettings ? 'or override…' : 'Import…'}\n              </button>\n            </MenuConfirm>\n          </p>\n        </section>\n        <section>\n          <h3>\n            <Icon icon=\"arrow-up-circle\" size=\"l\" class=\"insignificant\" />{' '}\n            <span>Export</span>\n          </h3>\n          <p>\n            <input\n              style={{ width: '100%' }}\n              type=\"text\"\n              value={shortcutsStr}\n              readOnly\n              onClick={(e) => {\n                if (!e.target.value) return;\n                e.target.select();\n                // Copy url to clipboard\n                try {\n                  navigator.clipboard.writeText(e.target.value);\n                  showToast('Shortcuts copied');\n                } catch (e) {\n                  console.error(e);\n                  showToast('Unable to copy shortcuts');\n                }\n              }}\n            />\n          </p>\n          <p>\n            <button\n              type=\"button\"\n              class=\"plain2\"\n              disabled={!shortcutsStr}\n              onClick={() => {\n                try {\n                  navigator.clipboard.writeText(shortcutsStr);\n                  showToast('Shortcut settings copied');\n                } catch (e) {\n                  console.error(e);\n                  showToast('Unable to copy shortcut settings');\n                }\n              }}\n            >\n              <Icon icon=\"clipboard\" /> <span>Copy</span>\n            </button>{' '}\n            {navigator?.share &&\n              navigator?.canShare?.({\n                text: shortcutsStr,\n              }) && (\n                <button\n                  type=\"button\"\n                  class=\"plain2\"\n                  disabled={!shortcutsStr}\n                  onClick={() => {\n                    try {\n                      navigator.share({\n                        text: shortcutsStr,\n                      });\n                    } catch (e) {\n                      console.error(e);\n                      alert(\"Sharing doesn't seem to work.\");\n                    }\n                  }}\n                >\n                  <Icon icon=\"share\" /> <span>Share</span>\n                </button>\n              )}{' '}\n            {states.settings.shortcutSettingsCloudImportExport && (\n              <button\n                type=\"button\"\n                class=\"plain2\"\n                disabled={importUIState === 'cloud-uploading'}\n                onClick={async () => {\n                  setImportUIState('cloud-uploading');\n                  const currentAccount = store.session.get('currentAccount');\n                  try {\n                    const relationships =\n                      await masto.v1.accounts.relationships.fetch({\n                        id: [currentAccount],\n                      });\n                    const relationship = relationships[0];\n                    if (relationship) {\n                      const { note = '' } = relationship;\n                      // const newNote = `${note}\\n\\n\\n$<phanpy-shortcuts-settings>{shortcutsStr}</phanpy-shortcuts-settings>`;\n                      let newNote = '';\n                      if (\n                        /<phanpy-shortcuts-settings>(.*)<\\/phanpy-shortcuts-settings>/.test(\n                          note,\n                        )\n                      ) {\n                        const settingsJSON = JSON.stringify({\n                          v: '1', // version\n                          dt: Date.now(), // datetime stamp\n                          data: shortcutsStr, // shortcuts settings string\n                        });\n                        newNote = note.replace(\n                          /<phanpy-shortcuts-settings>(.*)<\\/phanpy-shortcuts-settings>/,\n                          `<phanpy-shortcuts-settings>${settingsJSON}</phanpy-shortcuts-settings>`,\n                        );\n                      } else {\n                        newNote = `${note}\\n\\n\\n<phanpy-shortcuts-settings>${settingsJSON}</phanpy-shortcuts-settings>`;\n                      }\n                      showToast('Saving shortcuts to instance server…');\n                      await masto.v1.accounts\n                        .$select(currentAccount)\n                        .note.create({\n                          comment: newNote,\n                        });\n                      setImportUIState('default');\n                      showToast('Shortcuts saved');\n                    }\n                  } catch (e) {\n                    console.error(e);\n                    setImportUIState('error');\n                    showToast('Unable to save shortcuts');\n                  }\n                }}\n                title=\"Sync to instance server\"\n              >\n                <Icon icon=\"cloud\" />\n                <Icon icon=\"arrow-up\" />\n              </button>\n            )}{' '}\n            {shortcutsStr.length > 0 && (\n              <small class=\"insignificant ib\">\n                {shortcutsStr.length} characters\n              </small>\n            )}\n          </p>\n          {!!shortcutsStr && (\n            <details>\n              <summary class=\"insignificant\">\n                <small>Raw Shortcuts JSON</small>\n              </summary>\n              <textarea style={{ width: '100%' }} rows={10} readOnly>\n                {JSON.stringify(shortcuts.filter(Boolean), null, 2)}\n              </textarea>\n            </details>\n          )}\n        </section>\n        {states.settings.shortcutSettingsCloudImportExport && (\n          <footer>\n            <p>\n              <Icon icon=\"cloud\" /> Import/export settings from/to instance\n              server (Very experimental)\n            </p>\n          </footer>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default ShortcutsSettings;\n","import { lazy } from 'preact/compat';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { subscribe, useSnapshot } from 'valtio';\n\nimport Accounts from '../pages/accounts';\nimport Settings from '../pages/settings';\nimport focusDeck from '../utils/focus-deck';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\n\nimport AccountSheet from './account-sheet';\n// import Compose from './compose';\nimport Drafts from './drafts';\nimport EmbedModal from './embed-modal';\nimport GenericAccounts from './generic-accounts';\nimport IntlSegmenterSuspense from './intl-segmenter-suspense';\nimport MediaAltModal from './media-alt-modal';\nimport MediaModal from './media-modal';\nimport Modal from './modal';\nimport ReportModal from './report-modal';\nimport ShortcutsSettings from './shortcuts-settings';\n\nconst Compose = lazy(() => import('./compose'));\n\nsubscribe(states, (changes) => {\n  for (const [action, path, value, prevValue] of changes) {\n    // When closing modal, focus on deck\n    if (/^show/i.test(path) && !value) {\n      focusDeck();\n    }\n  }\n});\n\nexport default function Modals() {\n  const snapStates = useSnapshot(states);\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  return (\n    <>\n      {!!snapStates.showCompose && (\n        <Modal class=\"solid\">\n          <IntlSegmenterSuspense>\n            <Compose\n              replyToStatus={\n                typeof snapStates.showCompose !== 'boolean'\n                  ? snapStates.showCompose.replyToStatus\n                  : window.__COMPOSE__?.replyToStatus || null\n              }\n              editStatus={\n                states.showCompose?.editStatus ||\n                window.__COMPOSE__?.editStatus ||\n                null\n              }\n              draftStatus={\n                states.showCompose?.draftStatus ||\n                window.__COMPOSE__?.draftStatus ||\n                null\n              }\n              onClose={(results) => {\n                const { newStatus, instance, type } = results || {};\n                states.showCompose = false;\n                window.__COMPOSE__ = null;\n                if (newStatus) {\n                  states.reloadStatusPage++;\n                  showToast({\n                    text: {\n                      post: 'Post published. Check it out.',\n                      reply: 'Reply posted. Check it out.',\n                      edit: 'Post updated. Check it out.',\n                    }[type || 'post'],\n                    delay: 1000,\n                    duration: 10_000, // 10 seconds\n                    onClick: (toast) => {\n                      toast.hideToast();\n                      states.prevLocation = location;\n                      navigate(\n                        instance\n                          ? `/${instance}/s/${newStatus.id}`\n                          : `/s/${newStatus.id}`,\n                      );\n                    },\n                  });\n                }\n              }}\n            />\n          </IntlSegmenterSuspense>\n        </Modal>\n      )}\n      {!!snapStates.showSettings && (\n        <Modal\n          onClose={() => {\n            states.showSettings = false;\n          }}\n        >\n          <Settings\n            onClose={() => {\n              states.showSettings = false;\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showAccounts && (\n        <Modal\n          onClose={() => {\n            states.showAccounts = false;\n          }}\n        >\n          <Accounts\n            onClose={() => {\n              states.showAccounts = false;\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showAccount && (\n        <Modal\n          onClose={() => {\n            states.showAccount = false;\n          }}\n        >\n          <AccountSheet\n            account={snapStates.showAccount?.account || snapStates.showAccount}\n            instance={snapStates.showAccount?.instance}\n            onClose={({ destination } = {}) => {\n              states.showAccount = false;\n              // states.showGenericAccounts = false;\n              // if (destination) {\n              //   states.showAccounts = false;\n              // }\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showDrafts && (\n        <Modal\n          onClose={() => {\n            states.showDrafts = false;\n          }}\n        >\n          <Drafts onClose={() => (states.showDrafts = false)} />\n        </Modal>\n      )}\n      {!!snapStates.showMediaModal && (\n        <Modal\n          onClick={(e) => {\n            if (\n              e.target === e.currentTarget ||\n              e.target.classList.contains('media')\n            ) {\n              states.showMediaModal = false;\n            }\n          }}\n        >\n          <MediaModal\n            mediaAttachments={snapStates.showMediaModal.mediaAttachments}\n            instance={snapStates.showMediaModal.instance}\n            index={snapStates.showMediaModal.index}\n            statusID={snapStates.showMediaModal.statusID}\n            onClose={() => {\n              states.showMediaModal = false;\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showShortcutsSettings && (\n        <Modal\n          onClose={() => {\n            states.showShortcutsSettings = false;\n          }}\n        >\n          <ShortcutsSettings\n            onClose={() => (states.showShortcutsSettings = false)}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showGenericAccounts && (\n        <Modal\n          onClose={() => {\n            states.showGenericAccounts = false;\n          }}\n        >\n          <GenericAccounts\n            instance={snapStates.showGenericAccounts.instance}\n            excludeRelationshipAttrs={\n              snapStates.showGenericAccounts.excludeRelationshipAttrs\n            }\n            postID={snapStates.showGenericAccounts.postID}\n            onClose={() => (states.showGenericAccounts = false)}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showMediaAlt && (\n        <Modal\n          onClose={(e) => {\n            states.showMediaAlt = false;\n          }}\n        >\n          <MediaAltModal\n            alt={snapStates.showMediaAlt.alt || snapStates.showMediaAlt}\n            lang={snapStates.showMediaAlt?.lang}\n            onClose={() => {\n              states.showMediaAlt = false;\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showEmbedModal && (\n        <Modal\n          class=\"solid\"\n          onClose={() => {\n            states.showEmbedModal = false;\n          }}\n        >\n          <EmbedModal\n            html={snapStates.showEmbedModal.html}\n            url={snapStates.showEmbedModal.url}\n            width={snapStates.showEmbedModal.width}\n            height={snapStates.showEmbedModal.height}\n            onClose={() => {\n              states.showEmbedModal = false;\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showReportModal && (\n        <Modal\n          onClose={() => {\n            states.showReportModal = false;\n          }}\n        >\n          <ReportModal\n            account={snapStates.showReportModal.account}\n            post={snapStates.showReportModal.post}\n            onClose={() => {\n              states.showReportModal = false;\n            }}\n          />\n        </Modal>\n      )}\n    </>\n  );\n}\n","import { useState } from 'preact/hooks';\n\nimport { api } from '../utils/api';\n\nimport Icon from './icon';\nimport Loader from './loader';\n\nfunction FollowRequestButtons({ accountID, onChange }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [requestState, setRequestState] = useState(null); // accept, reject\n  const [relationship, setRelationship] = useState(null);\n\n  const hasRelationship = relationship !== null;\n\n  return (\n    <p class=\"follow-request-buttons\">\n      <button\n        type=\"button\"\n        disabled={uiState === 'loading' || hasRelationship}\n        onClick={() => {\n          setUIState('loading');\n          setRequestState('accept');\n          (async () => {\n            try {\n              const rel = await masto.v1.followRequests\n                .$select(accountID)\n                .authorize();\n              if (!rel?.followedBy) {\n                throw new Error('Follow request not accepted');\n              }\n              setRelationship(rel);\n              onChange();\n            } catch (e) {\n              console.error(e);\n            }\n            setUIState('default');\n          })();\n        }}\n      >\n        Accept\n      </button>{' '}\n      <button\n        type=\"button\"\n        disabled={uiState === 'loading' || hasRelationship}\n        class=\"light danger\"\n        onClick={() => {\n          setUIState('loading');\n          setRequestState('reject');\n          (async () => {\n            try {\n              const rel = await masto.v1.followRequests\n                .$select(accountID)\n                .reject();\n              if (rel?.followedBy) {\n                throw new Error('Follow request not rejected');\n              }\n              setRelationship(rel);\n              onChange();\n            } catch (e) {\n              console.error(e);\n              setUIState('default');\n            }\n          })();\n        }}\n      >\n        Reject\n      </button>\n      <span class=\"follow-request-states\">\n        {hasRelationship && requestState ? (\n          requestState === 'accept' ? (\n            <Icon icon=\"check-circle\" alt=\"Accepted\" class=\"follow-accepted\" />\n          ) : (\n            <Icon icon=\"x-circle\" alt=\"Rejected\" class=\"follow-rejected\" />\n          )\n        ) : (\n          <Loader hidden={uiState !== 'loading'} />\n        )}\n      </span>\n    </p>\n  );\n}\n\nexport default FollowRequestButtons;\n","import { Fragment } from 'preact';\nimport { memo } from 'preact/compat';\n\nimport shortenNumber from '../utils/shorten-number';\nimport states, { statusKey } from '../utils/states';\nimport store from '../utils/store';\nimport useTruncated from '../utils/useTruncated';\n\nimport Avatar from './avatar';\nimport CustomEmoji from './custom-emoji';\nimport FollowRequestButtons from './follow-request-buttons';\nimport Icon from './icon';\nimport Link from './link';\nimport NameText from './name-text';\nimport RelativeTime from './relative-time';\nimport Status from './status';\n\nconst NOTIFICATION_ICONS = {\n  mention: 'comment',\n  status: 'notification',\n  reblog: 'rocket',\n  follow: 'follow',\n  follow_request: 'follow-add',\n  favourite: 'heart',\n  poll: 'poll',\n  update: 'pencil',\n  'admin.signup': 'account-edit',\n  'admin.report': 'account-warning',\n  severed_relationships: 'heart-break',\n  emoji_reaction: 'emoji2',\n  'pleroma:emoji_reaction': 'emoji2',\n};\n\n/*\nNotification types\n==================\nmention = Someone mentioned you in their status\nstatus = Someone you enabled notifications for has posted a status\nreblog = Someone boosted one of your statuses\nfollow = Someone followed you\nfollow_request = Someone requested to follow you\nfavourite = Someone favourited one of your statuses\npoll = A poll you have voted in or created has ended\nupdate = A status you interacted with has been edited\nadmin.sign_up = Someone signed up (optionally sent to admins)\nadmin.report = A new report has been filed\n*/\n\nfunction emojiText(emoji, emoji_url) {\n  let url;\n  let staticUrl;\n  if (typeof emoji_url === 'string') {\n    url = emoji_url;\n  } else {\n    url = emoji_url?.url;\n    staticUrl = emoji_url?.staticUrl;\n  }\n  return url ? (\n    <>\n      reacted to your post with{' '}\n      <CustomEmoji url={url} staticUrl={staticUrl} alt={emoji} />\n    </>\n  ) : (\n    `reacted to your post with ${emoji}.`\n  );\n}\nconst contentText = {\n  mention: 'mentioned you in their post.',\n  status: 'published a post.',\n  reblog: 'boosted your post.',\n  'reblog+account': (count) => `boosted ${count} of your posts.`,\n  reblog_reply: 'boosted your reply.',\n  follow: 'followed you.',\n  follow_request: 'requested to follow you.',\n  favourite: 'liked your post.',\n  'favourite+account': (count) => `liked ${count} of your posts.`,\n  favourite_reply: 'liked your reply.',\n  poll: 'A poll you have voted in or created has ended.',\n  'poll-self': 'A poll you have created has ended.',\n  'poll-voted': 'A poll you have voted in has ended.',\n  update: 'A post you interacted with has been edited.',\n  'favourite+reblog': 'boosted & liked your post.',\n  'favourite+reblog+account': (count) =>\n    `boosted & liked ${count} of your posts.`,\n  'favourite+reblog_reply': 'boosted & liked your reply.',\n  'admin.sign_up': 'signed up.',\n  'admin.report': (targetAccount) => <>reported {targetAccount}</>,\n  severed_relationships: (name) => (\n    <>\n      Lost connections with <i>{name}</i>.\n    </>\n  ),\n  emoji_reaction: emojiText,\n  'pleroma:emoji_reaction': emojiText,\n};\n\n// account_suspension, domain_block, user_domain_block\nconst SEVERED_RELATIONSHIPS_TEXT = {\n  account_suspension: ({ from, targetName }) => (\n    <>\n      An admin from <i>{from}</i> has suspended <i>{targetName}</i>, which means\n      you can no longer receive updates from them or interact with them.\n    </>\n  ),\n  domain_block: ({ from, targetName, followersCount, followingCount }) => (\n    <>\n      An admin from <i>{from}</i> has blocked <i>{targetName}</i>. Affected\n      followers: {followersCount}, followings: {followingCount}.\n    </>\n  ),\n  user_domain_block: ({ targetName, followersCount, followingCount }) => (\n    <>\n      You have blocked <i>{targetName}</i>. Removed followers: {followersCount},\n      followings: {followingCount}.\n    </>\n  ),\n};\n\nconst AVATARS_LIMIT = 50;\n\nfunction Notification({\n  notification,\n  instance,\n  isStatic,\n  disableContextMenu,\n}) {\n  const { id, status, account, report, event, _accounts, _statuses } =\n    notification;\n  let { type } = notification;\n\n  // status = Attached when type of the notification is favourite, reblog, status, mention, poll, or update\n  const actualStatus = status?.reblog || status;\n  const actualStatusID = actualStatus?.id;\n\n  const currentAccount = store.session.get('currentAccount');\n  const isSelf = currentAccount === account?.id;\n  const isVoted = status?.poll?.voted;\n  const isReplyToOthers =\n    !!status?.inReplyToAccountId &&\n    status?.inReplyToAccountId !== currentAccount &&\n    status?.account?.id === currentAccount;\n\n  let favsCount = 0;\n  let reblogsCount = 0;\n  if (type === 'favourite+reblog') {\n    for (const account of _accounts) {\n      if (account._types?.includes('favourite')) {\n        favsCount++;\n      }\n      if (account._types?.includes('reblog')) {\n        reblogsCount++;\n      }\n    }\n    if (!reblogsCount && favsCount) type = 'favourite';\n    if (!favsCount && reblogsCount) type = 'reblog';\n  }\n\n  let text;\n  if (type === 'poll') {\n    text = contentText[isSelf ? 'poll-self' : isVoted ? 'poll-voted' : 'poll'];\n  } else if (\n    type === 'reblog' ||\n    type === 'favourite' ||\n    type === 'favourite+reblog'\n  ) {\n    if (_statuses?.length > 1) {\n      text = contentText[`${type}+account`];\n    } else if (isReplyToOthers) {\n      text = contentText[`${type}_reply`];\n    } else {\n      text = contentText[type];\n    }\n  } else if (contentText[type]) {\n    text = contentText[type];\n  } else {\n    // Anticipate unhandled notification types, possibly from Mastodon forks or non-Mastodon instances\n    // This surfaces the error to the user, hoping that users will report it\n    text = `[Unknown notification type: ${type}]`;\n  }\n\n  if (typeof text === 'function') {\n    const count = _statuses?.length || _accounts?.length;\n    if (type === 'admin.report') {\n      const targetAccount = report?.targetAccount;\n      if (targetAccount) {\n        text = text(<NameText account={targetAccount} showAvatar />);\n      }\n    } else if (type === 'severed_relationships') {\n      const targetName = event?.targetName;\n      if (targetName) {\n        text = text(targetName);\n      }\n    } else if (\n      (type === 'emoji_reaction' || type === 'pleroma:emoji_reaction') &&\n      notification.emoji\n    ) {\n      const emojiURL =\n        notification.emoji_url || // This is string\n        status?.emojis?.find?.(\n          (emoji) =>\n            emoji?.shortcode ===\n            notification.emoji.replace(/^:/, '').replace(/:$/, ''),\n        ); // Emoji object instead of string\n      text = text(notification.emoji, emojiURL);\n    } else if (count) {\n      text = text(count);\n    }\n  }\n\n  if (type === 'mention' && !status) {\n    // Could be deleted\n    return null;\n  }\n\n  const formattedCreatedAt =\n    notification.createdAt && new Date(notification.createdAt).toLocaleString();\n\n  const genericAccountsHeading =\n    {\n      'favourite+reblog': 'Boosted/Liked by…',\n      favourite: 'Liked by…',\n      reblog: 'Boosted by…',\n      follow: 'Followed by…',\n    }[type] || 'Accounts';\n  const handleOpenGenericAccounts = () => {\n    states.showGenericAccounts = {\n      heading: genericAccountsHeading,\n      accounts: _accounts,\n      showReactions: type === 'favourite+reblog',\n      excludeRelationshipAttrs: type === 'follow' ? ['followedBy'] : [],\n      postID: statusKey(actualStatusID, instance),\n    };\n  };\n\n  console.debug('RENDER Notification', notification.id);\n\n  return (\n    <div\n      class={`notification notification-${type}`}\n      data-notification-id={id}\n      tabIndex=\"0\"\n    >\n      <div\n        class={`notification-type notification-${type}`}\n        title={formattedCreatedAt}\n      >\n        {type === 'favourite+reblog' ? (\n          <>\n            <Icon icon=\"rocket\" size=\"xl\" alt={type} class=\"reblog-icon\" />\n            <Icon icon=\"heart\" size=\"xl\" alt={type} class=\"favourite-icon\" />\n          </>\n        ) : (\n          <Icon\n            icon={NOTIFICATION_ICONS[type] || 'notification'}\n            size=\"xl\"\n            alt={type}\n          />\n        )}\n      </div>\n      <div class=\"notification-content\">\n        {type !== 'mention' && (\n          <>\n            <p>\n              {!/poll|update/i.test(type) && (\n                <>\n                  {_accounts?.length > 1 ? (\n                    <>\n                      <b tabIndex=\"0\" onClick={handleOpenGenericAccounts}>\n                        <span title={_accounts.length}>\n                          {shortenNumber(_accounts.length)}\n                        </span>{' '}\n                        people\n                      </b>{' '}\n                    </>\n                  ) : (\n                    account && (\n                      <>\n                        <NameText account={account} showAvatar />{' '}\n                      </>\n                    )\n                  )}\n                </>\n              )}\n              {text}\n              {type === 'mention' && (\n                <span class=\"insignificant\">\n                  {' '}\n                  •{' '}\n                  <RelativeTime\n                    datetime={notification.createdAt}\n                    format=\"micro\"\n                  />\n                </span>\n              )}\n            </p>\n            {type === 'follow_request' && (\n              <FollowRequestButtons accountID={account.id} />\n            )}\n            {type === 'severed_relationships' && (\n              <div>\n                {SEVERED_RELATIONSHIPS_TEXT[event.type]({\n                  from: instance,\n                  ...event,\n                })}\n                <br />\n                <a\n                  href={`https://${instance}/severed_relationships`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  Learn more <Icon icon=\"external\" size=\"s\" />\n                </a>\n                .\n              </div>\n            )}\n          </>\n        )}\n        {_accounts?.length > 1 && (\n          <p class=\"avatars-stack\">\n            {_accounts.slice(0, AVATARS_LIMIT).map((account) => (\n              <Fragment key={account.id}>\n                <a\n                  key={account.id}\n                  href={account.url}\n                  rel=\"noopener noreferrer\"\n                  class=\"account-avatar-stack\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    states.showAccount = account;\n                  }}\n                >\n                  <Avatar\n                    url={account.avatarStatic}\n                    size={\n                      _accounts.length <= 10\n                        ? 'xxl'\n                        : _accounts.length < 20\n                        ? 'xl'\n                        : _accounts.length < 30\n                        ? 'l'\n                        : _accounts.length < 40\n                        ? 'm'\n                        : 's' // My god, this person is popular!\n                    }\n                    key={account.id}\n                    alt={`${account.displayName} @${account.acct}`}\n                    squircle={account?.bot}\n                  />\n                  {type === 'favourite+reblog' && (\n                    <div class=\"account-sub-icons\">\n                      {account._types.map((type) => (\n                        <Icon\n                          icon={NOTIFICATION_ICONS[type]}\n                          size=\"s\"\n                          class={`${type}-icon`}\n                        />\n                      ))}\n                    </div>\n                  )}\n                </a>{' '}\n              </Fragment>\n            ))}\n            <button\n              type=\"button\"\n              class=\"small plain\"\n              onClick={handleOpenGenericAccounts}\n            >\n              {_accounts.length > AVATARS_LIMIT &&\n                `+${_accounts.length - AVATARS_LIMIT}`}\n              <Icon icon=\"chevron-down\" />\n            </button>\n          </p>\n        )}\n        {_statuses?.length > 1 && (\n          <ul class=\"notification-group-statuses\">\n            {_statuses.map((status) => (\n              <li key={status.id}>\n                <TruncatedLink\n                  class={`status-link status-type-${type}`}\n                  to={\n                    instance ? `/${instance}/s/${status.id}` : `/s/${status.id}`\n                  }\n                >\n                  <Status\n                    status={status}\n                    size=\"s\"\n                    previewMode\n                    allowContextMenu\n                  />\n                </TruncatedLink>\n              </li>\n            ))}\n          </ul>\n        )}\n        {status && (!_statuses?.length || _statuses?.length <= 1) && (\n          <TruncatedLink\n            class={`status-link status-type-${type}`}\n            to={\n              instance\n                ? `/${instance}/s/${actualStatusID}`\n                : `/s/${actualStatusID}`\n            }\n            onContextMenu={\n              !disableContextMenu\n                ? (e) => {\n                    const post = e.target.querySelector('.status');\n                    if (post) {\n                      // Fire a custom event to open the context menu\n                      if (e.metaKey) return;\n                      e.preventDefault();\n                      post.dispatchEvent(\n                        new MouseEvent('contextmenu', {\n                          clientX: e.clientX,\n                          clientY: e.clientY,\n                        }),\n                      );\n                    }\n                  }\n                : undefined\n            }\n          >\n            {isStatic ? (\n              <Status\n                status={actualStatus}\n                size=\"s\"\n                readOnly\n                allowContextMenu\n              />\n            ) : (\n              <Status\n                statusID={actualStatusID}\n                size=\"s\"\n                readOnly\n                allowContextMenu\n              />\n            )}\n          </TruncatedLink>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction TruncatedLink(props) {\n  const ref = useTruncated();\n  return <Link {...props} data-read-more=\"Read more →\" ref={ref} />;\n}\n\nexport default memo(Notification, (oldProps, newProps) => {\n  return oldProps.notification?.id === newProps.notification?.id;\n});\n","import { memo } from 'preact/compat';\nimport { useLayoutEffect, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport { api } from '../utils/api';\nimport states from '../utils/states';\nimport {\n  getAccountByAccessToken,\n  getCurrentAccount,\n} from '../utils/store-utils';\nimport usePageVisibility from '../utils/usePageVisibility';\n\nimport Icon from './icon';\nimport Link from './link';\nimport Modal from './modal';\nimport Notification from './notification';\n\n{\n  if ('serviceWorker' in navigator) {\n    console.log('👂👂👂 Listen to message');\n    navigator.serviceWorker.addEventListener('message', (event) => {\n      console.log('💥💥💥 Message event', event);\n      const { type, id, accessToken } = event?.data || {};\n      if (type === 'notification') {\n        states.routeNotification = {\n          id,\n          accessToken,\n        };\n      }\n    });\n  }\n}\n\nexport default memo(function NotificationService() {\n  if (!('serviceWorker' in navigator)) return null;\n\n  const snapStates = useSnapshot(states);\n  const { routeNotification } = snapStates;\n\n  console.log('🛎️ Notification service', routeNotification);\n\n  const { id, accessToken } = routeNotification || {};\n  const [showNotificationSheet, setShowNotificationSheet] = useState(false);\n\n  useLayoutEffect(() => {\n    if (!id || !accessToken) return;\n    const { instance: currentInstance } = api();\n    const { masto, instance } = api({\n      accessToken,\n    });\n    console.log('API', { accessToken, currentInstance, instance });\n    const sameInstance = currentInstance === instance;\n    const account = accessToken\n      ? getAccountByAccessToken(accessToken)\n      : getCurrentAccount();\n    (async () => {\n      const notification = await masto.v1.notifications.$select(id).fetch();\n      if (notification && account) {\n        console.log('🛎️ Notification', { id, notification, account });\n        const accountInstance = account.instanceURL;\n        const { type, status, account: notificationAccount } = notification;\n        const hasModal = !!document.querySelector('#modal-container > *');\n        const isFollow = type === 'follow' && !!notificationAccount?.id;\n        const hasAccount = !!notificationAccount?.id;\n        const hasStatus = !!status?.id;\n        if (isFollow && sameInstance) {\n          // Show account sheet, can handle different instances\n          states.showAccount = {\n            account: notificationAccount,\n            instance: accountInstance,\n          };\n        } else if (hasModal || !sameInstance || (hasAccount && hasStatus)) {\n          // Show sheet of notification, if\n          // - there is a modal open\n          // - the notification is from another instance\n          // - the notification has both account and status, gives choice for users to go to account or status\n          setShowNotificationSheet({\n            id,\n            account,\n            notification,\n            sameInstance,\n          });\n        } else {\n          if (hasStatus) {\n            // Go to status page\n            location.hash = `/${currentInstance}/s/${status.id}`;\n          } else if (isFollow) {\n            // Go to profile page\n            location.hash = `/${currentInstance}/a/${notificationAccount.id}`;\n          } else {\n            // Go to notifications page\n            location.hash = '/notifications';\n          }\n        }\n      } else {\n        console.warn('🛎️ Notification not found', id);\n      }\n    })();\n  }, [id, accessToken]);\n\n  // useLayoutEffect(() => {\n  //   // Listen to message from service worker\n  //   const handleMessage = (event) => {\n  //     console.log('💥💥💥 Message event', event);\n  //     const { type, id, accessToken } = event?.data || {};\n  //     if (type === 'notification') {\n  //       states.routeNotification = {\n  //         id,\n  //         accessToken,\n  //       };\n  //     }\n  //   };\n  //   console.log('👂👂👂 Listen to message');\n  //   navigator.serviceWorker.addEventListener('message', handleMessage);\n  //   return () => {\n  //     console.log('👂👂👂 Remove listen to message');\n  //     navigator.serviceWorker.removeEventListener('message', handleMessage);\n  //   };\n  // }, []);\n\n  useLayoutEffect(() => {\n    if (navigator?.clearAppBadge) {\n      navigator.clearAppBadge();\n    }\n  }, []);\n  usePageVisibility((visible) => {\n    if (visible && navigator?.clearAppBadge) {\n      console.log('🔰 Clear app badge');\n      navigator.clearAppBadge();\n    }\n  });\n\n  const onClose = () => {\n    setShowNotificationSheet(false);\n    states.routeNotification = null;\n\n    // If url is #/notifications?id=123, go to #/notifications\n    if (/\\/notifications\\?id=/i.test(location.hash)) {\n      location.hash = '/notifications';\n    }\n  };\n\n  if (showNotificationSheet) {\n    const { id, account, notification, sameInstance } = showNotificationSheet;\n    return (\n      <Modal\n        onClick={(e) => {\n          if (e.target === e.currentTarget) {\n            onClose();\n          }\n        }}\n      >\n        <div class=\"sheet\" tabIndex=\"-1\">\n          <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n            <Icon icon=\"x\" />\n          </button>\n          <header>\n            <b>Notification</b>\n          </header>\n          <main>\n            {!sameInstance && (\n              <p>This notification is from your other account.</p>\n            )}\n            <div\n              class=\"notification-peek\"\n              // style={{\n              //   pointerEvents: sameInstance ? '' : 'none',\n              // }}\n              onClick={(e) => {\n                const { target } = e;\n                // If button or links\n                if (e.target.tagName === 'BUTTON' || e.target.tagName === 'A') {\n                  onClose();\n                }\n              }}\n            >\n              <Notification\n                instance={account.instanceURL}\n                notification={notification}\n                isStatic\n              />\n            </div>\n            <div\n              style={{\n                textAlign: 'end',\n              }}\n            >\n              <Link to=\"/notifications\" class=\"button light\" onClick={onClose}>\n                <span>View all notifications</span> <Icon icon=\"arrow-right\" />\n              </Link>\n            </div>\n          </main>\n        </div>\n      </Modal>\n    );\n  }\n\n  return null;\n});\n","import { forwardRef } from 'preact/compat';\nimport { useImperativeHandle, useRef, useState } from 'preact/hooks';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { api } from '../utils/api';\n\nimport Icon from './icon';\nimport Link from './link';\n\nconst SearchForm = forwardRef((props, ref) => {\n  const { instance } = api();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [searchMenuOpen, setSearchMenuOpen] = useState(false);\n  const [query, setQuery] = useState(searchParams.get('q') || '');\n  const type = searchParams.get('type');\n  const formRef = useRef(null);\n\n  const searchFieldRef = useRef(null);\n  useImperativeHandle(ref, () => ({\n    setValue: (value) => {\n      setQuery(value);\n    },\n    focus: () => {\n      searchFieldRef.current.focus();\n    },\n    select: () => {\n      searchFieldRef.current.select();\n    },\n    blur: () => {\n      searchFieldRef.current.blur();\n    },\n  }));\n\n  return (\n    <form\n      ref={formRef}\n      class=\"search-popover-container\"\n      onSubmit={(e) => {\n        e.preventDefault();\n\n        const isSearchPage = /\\/search/.test(location.hash);\n        if (isSearchPage) {\n          if (query) {\n            const params = {\n              q: query,\n            };\n            if (type) params.type = type; // Preserve type\n            setSearchParams(params);\n          } else {\n            setSearchParams({});\n          }\n        } else {\n          if (query) {\n            location.hash = `/search?q=${encodeURIComponent(query)}${\n              type ? `&type=${type}` : ''\n            }`;\n          } else {\n            location.hash = `/search`;\n          }\n        }\n\n        props?.onSubmit?.(e);\n      }}\n    >\n      <input\n        ref={searchFieldRef}\n        value={query}\n        name=\"q\"\n        type=\"search\"\n        // autofocus\n        placeholder=\"Search\"\n        dir=\"auto\"\n        autocomplete=\"off\"\n        autocorrect=\"off\"\n        autocapitalize=\"off\"\n        spellCheck=\"false\"\n        onSearch={(e) => {\n          if (!e.target.value) {\n            setSearchParams({});\n          }\n        }}\n        onInput={(e) => {\n          setQuery(e.target.value);\n          setSearchMenuOpen(true);\n        }}\n        onFocus={() => {\n          setSearchMenuOpen(true);\n          formRef.current\n            ?.querySelector('.search-popover-item')\n            ?.classList.add('focus');\n        }}\n        onBlur={() => {\n          setTimeout(() => {\n            setSearchMenuOpen(false);\n          }, 100);\n          formRef.current\n            ?.querySelector('.search-popover-item.focus')\n            ?.classList.remove('focus');\n        }}\n        onKeyDown={(e) => {\n          const { key } = e;\n          switch (key) {\n            case 'Escape':\n              setSearchMenuOpen(false);\n              break;\n            case 'Down':\n            case 'ArrowDown':\n              e.preventDefault();\n              if (searchMenuOpen) {\n                const focusItem = formRef.current.querySelector(\n                  '.search-popover-item.focus',\n                );\n                if (focusItem) {\n                  let nextItem = focusItem.nextElementSibling;\n                  while (nextItem && nextItem.hidden) {\n                    nextItem = nextItem.nextElementSibling;\n                  }\n                  if (nextItem) {\n                    nextItem.classList.add('focus');\n                    const siblings = Array.from(\n                      nextItem.parentElement.children,\n                    ).filter((el) => el !== nextItem);\n                    siblings.forEach((el) => {\n                      el.classList.remove('focus');\n                    });\n                  }\n                } else {\n                  const firstItem = formRef.current.querySelector(\n                    '.search-popover-item',\n                  );\n                  if (firstItem) {\n                    firstItem.classList.add('focus');\n                  }\n                }\n              }\n              break;\n            case 'Up':\n            case 'ArrowUp':\n              e.preventDefault();\n              if (searchMenuOpen) {\n                const focusItem = document.querySelector(\n                  '.search-popover-item.focus',\n                );\n                if (focusItem) {\n                  let prevItem = focusItem.previousElementSibling;\n                  while (prevItem && prevItem.hidden) {\n                    prevItem = prevItem.previousElementSibling;\n                  }\n                  if (prevItem) {\n                    prevItem.classList.add('focus');\n                    const siblings = Array.from(\n                      prevItem.parentElement.children,\n                    ).filter((el) => el !== prevItem);\n                    siblings.forEach((el) => {\n                      el.classList.remove('focus');\n                    });\n                  }\n                } else {\n                  const lastItem = document.querySelector(\n                    '.search-popover-item:last-child',\n                  );\n                  if (lastItem) {\n                    lastItem.classList.add('focus');\n                  }\n                }\n              }\n              break;\n            case 'Enter':\n              if (searchMenuOpen) {\n                const focusItem = document.querySelector(\n                  '.search-popover-item.focus',\n                );\n                if (focusItem) {\n                  e.preventDefault();\n                  focusItem.click();\n                }\n                setSearchMenuOpen(false);\n                props?.onSubmit?.(e);\n              }\n              break;\n          }\n        }}\n      />\n      <div class=\"search-popover\" hidden={!searchMenuOpen || !query}>\n        {/* {!!query && (\n          <Link\n            to={`/search?q=${encodeURIComponent(query)}`}\n            class=\"search-popover-item focus\"\n            onClick={(e) => {\n              props?.onSubmit?.(e);\n            }}\n          >\n            <Icon icon=\"search\" />\n            <span>{query}</span>\n          </Link>\n        )} */}\n        {!!query &&\n          [\n            {\n              label: (\n                <>\n                  {query}{' '}\n                  <small class=\"insignificant\">\n                    ‒ accounts, hashtags &amp; posts\n                  </small>\n                </>\n              ),\n              to: `/search?q=${encodeURIComponent(query)}`,\n              top: !type && !/\\s/.test(query),\n              hidden: !!type,\n            },\n            {\n              label: (\n                <>\n                  Posts with <q>{query}</q>\n                </>\n              ),\n              to: `/search?q=${encodeURIComponent(query)}&type=statuses`,\n              hidden: /^https?:/.test(query),\n              top: /\\s/.test(query),\n              icon: 'document',\n              queryType: 'statuses',\n            },\n            {\n              label: (\n                <>\n                  Posts tagged with <mark>#{query.replace(/^#/, '')}</mark>\n                </>\n              ),\n              to: `/${instance}/t/${query.replace(/^#/, '')}`,\n              hidden:\n                /^@/.test(query) || /^https?:/.test(query) || /\\s/.test(query),\n              top: /^#/.test(query),\n              type: 'link',\n              icon: 'hashtag',\n              queryType: 'hashtags',\n            },\n            {\n              label: (\n                <>\n                  Look up <mark>{query}</mark>\n                </>\n              ),\n              to: `/${query}`,\n              hidden: !/^https?:/.test(query),\n              top: /^https?:/.test(query),\n              type: 'link',\n            },\n            {\n              label: (\n                <>\n                  Accounts with <q>{query}</q>\n                </>\n              ),\n              to: `/search?q=${encodeURIComponent(query)}&type=accounts`,\n              icon: 'group',\n              queryType: 'accounts',\n            },\n          ]\n            .sort((a, b) => {\n              if (type) {\n                if (a.queryType === type) return -1;\n                if (b.queryType === type) return 1;\n              }\n              if (a.top && !b.top) return -1;\n              if (!a.top && b.top) return 1;\n              return 0;\n            })\n            .filter(({ hidden }) => !hidden)\n            .map(({ label, to, icon, type }, i) => (\n              <Link\n                to={to}\n                class={`search-popover-item ${i === 0 ? 'focus' : ''}`}\n                // hidden={hidden}\n                onClick={(e) => {\n                  props?.onSubmit?.(e);\n                }}\n              >\n                <Icon\n                  icon={icon || (type === 'link' ? 'arrow-right' : 'search')}\n                  class=\"more-insignificant\"\n                />\n                <span>{label}</span>{' '}\n              </Link>\n            ))}\n      </div>\n    </form>\n  );\n});\n\nexport default SearchForm;\n","import './search-command.css';\n\nimport { memo } from 'preact/compat';\nimport { useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\n\nimport SearchForm from './search-form';\n\nexport default memo(function SearchCommand({ onClose = () => {} }) {\n  const [showSearch, setShowSearch] = useState(false);\n  const searchFormRef = useRef(null);\n\n  useHotkeys(\n    ['Slash', '/'],\n    (e) => {\n      setShowSearch(true);\n      setTimeout(() => {\n        searchFormRef.current?.focus?.();\n        searchFormRef.current?.select?.();\n      }, 0);\n    },\n    {\n      preventDefault: true,\n      ignoreEventWhen: (e) => {\n        const isSearchPage = /\\/search/.test(location.hash);\n        const hasModal = !!document.querySelector('#modal-container > *');\n        return isSearchPage || hasModal;\n      },\n    },\n  );\n\n  const closeSearch = () => {\n    setShowSearch(false);\n    onClose();\n  };\n\n  useHotkeys(\n    'esc',\n    (e) => {\n      searchFormRef.current?.blur?.();\n      closeSearch();\n    },\n    {\n      enabled: showSearch,\n      enableOnFormTags: true,\n      preventDefault: true,\n    },\n  );\n\n  return (\n    <div\n      id=\"search-command-container\"\n      hidden={!showSearch}\n      onClick={(e) => {\n        console.log(e);\n        if (e.target === e.currentTarget) {\n          closeSearch();\n        }\n      }}\n    >\n      <SearchForm\n        ref={searchFormRef}\n        onSubmit={() => {\n          closeSearch();\n        }}\n      />\n    </div>\n  );\n});\n","import './shortcuts.css';\n\nimport { MenuDivider, SubMenu } from '@szhsin/react-menu';\nimport { memo } from 'preact/compat';\nimport { useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { useNavigate } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport { SHORTCUTS_META } from '../components/shortcuts-settings';\nimport { api } from '../utils/api';\nimport { getLists } from '../utils/lists';\nimport states from '../utils/states';\n\nimport AsyncText from './AsyncText';\nimport Icon from './icon';\nimport Link from './link';\nimport Menu2 from './menu2';\nimport MenuLink from './menu-link';\n\nfunction Shortcuts() {\n  const { instance } = api();\n  const snapStates = useSnapshot(states);\n  const { shortcuts, settings } = snapStates;\n\n  if (!shortcuts.length) {\n    return null;\n  }\n  if (\n    settings.shortcutsViewMode === 'multi-column' ||\n    (!settings.shortcutsViewMode && settings.shortcutsColumnsMode)\n  ) {\n    return null;\n  }\n\n  const menuRef = useRef();\n\n  const hasLists = useRef(false);\n  const formattedShortcuts = shortcuts\n    .map((pin, i) => {\n      const { type, ...data } = pin;\n      if (!SHORTCUTS_META[type]) return null;\n      let { id, path, title, subtitle, icon } = SHORTCUTS_META[type];\n\n      if (typeof id === 'function') {\n        id = id(data, i);\n      }\n      if (typeof path === 'function') {\n        path = path(\n          {\n            ...data,\n            instance: data.instance || instance,\n          },\n          i,\n        );\n      }\n      if (typeof title === 'function') {\n        title = title(data, i);\n      }\n      if (typeof subtitle === 'function') {\n        subtitle = subtitle(data, i);\n      }\n      if (typeof icon === 'function') {\n        icon = icon(data, i);\n      }\n\n      if (id === 'lists') {\n        hasLists.current = true;\n      }\n\n      return {\n        id,\n        path,\n        title,\n        subtitle,\n        icon,\n      };\n    })\n    .filter(Boolean);\n\n  const navigate = useNavigate();\n  useHotkeys(['1', '2', '3', '4', '5', '6', '7', '8', '9'], (e, handler) => {\n    const index = parseInt(handler.keys[0], 10) - 1;\n    if (index < formattedShortcuts.length) {\n      const { path } = formattedShortcuts[index];\n      if (path) {\n        navigate(path);\n        menuRef.current?.closeMenu?.();\n      }\n    }\n  });\n\n  const [lists, setLists] = useState([]);\n\n  return (\n    <div id=\"shortcuts\">\n      {snapStates.settings.shortcutsViewMode === 'tab-menu-bar' ? (\n        <nav\n          class=\"tab-bar\"\n          onContextMenu={(e) => {\n            e.preventDefault();\n            states.showShortcutsSettings = true;\n          }}\n        >\n          <ul>\n            {formattedShortcuts.map(\n              ({ id, path, title, subtitle, icon }, i) => {\n                return (\n                  <li key={`${i}-${id}-${title}-${subtitle}-${path}`}>\n                    <Link\n                      class={subtitle ? 'has-subtitle' : ''}\n                      to={path}\n                      onClick={(e) => {\n                        if (e.target.classList.contains('is-active')) {\n                          e.preventDefault();\n                          const page = document.getElementById(`${id}-page`);\n                          console.log(id, page);\n                          if (page) {\n                            page.scrollTop = 0;\n                            const updatesButton =\n                              page.querySelector('.updates-button');\n                            if (updatesButton) {\n                              updatesButton.click();\n                            }\n                          }\n                        }\n                      }}\n                    >\n                      <Icon icon={icon} size=\"xl\" alt={title} />\n                      <span>\n                        <AsyncText>{title}</AsyncText>\n                        {subtitle && (\n                          <>\n                            <br />\n                            <small>{subtitle}</small>\n                          </>\n                        )}\n                      </span>\n                    </Link>\n                  </li>\n                );\n              },\n            )}\n          </ul>\n        </nav>\n      ) : (\n        <Menu2\n          instanceRef={menuRef}\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          menuClassName=\"glass-menu shortcuts-menu\"\n          gap={8}\n          position=\"anchor\"\n          onMenuChange={(e) => {\n            if (e.open && hasLists.current) {\n              getLists().then(setLists);\n            }\n          }}\n          menuButton={\n            <button\n              type=\"button\"\n              id=\"shortcuts-button\"\n              class=\"plain\"\n              onContextMenu={(e) => {\n                e.preventDefault();\n                states.showShortcutsSettings = true;\n              }}\n              onTransitionStart={(e) => {\n                // Close menu if the button disappears\n                try {\n                  const { target } = e;\n                  if (getComputedStyle(target).pointerEvents === 'none') {\n                    menuRef.current?.closeMenu?.();\n                  }\n                } catch (e) {}\n              }}\n            >\n              <Icon icon=\"shortcut\" size=\"xl\" alt=\"Shortcuts\" />\n            </button>\n          }\n        >\n          {formattedShortcuts.map(({ id, path, title, subtitle, icon }, i) => {\n            if (id === 'lists') {\n              return (\n                <SubMenu\n                  menuClassName=\"glass-menu\"\n                  overflow=\"auto\"\n                  gap={-8}\n                  label={\n                    <>\n                      <Icon icon={icon} size=\"l\" />\n                      <span class=\"menu-grow\">\n                        <AsyncText>{title}</AsyncText>\n                      </span>\n                      <Icon icon=\"chevron-right\" />\n                    </>\n                  }\n                >\n                  <MenuLink to=\"/l\">\n                    <span>All Lists</span>\n                  </MenuLink>\n                  <MenuDivider />\n                  {lists?.map((list) => (\n                    <MenuLink key={list.id} to={`/l/${list.id}`}>\n                      <span>{list.title}</span>\n                    </MenuLink>\n                  ))}\n                </SubMenu>\n              );\n            }\n\n            return (\n              <MenuLink\n                to={path}\n                key={`${i}-${id}-${title}-${subtitle}-${path}`}\n                class=\"glass-menu-item\"\n              >\n                <Icon icon={icon} size=\"l\" />{' '}\n                <span class=\"menu-grow\">\n                  <span>\n                    <AsyncText>{title}</AsyncText>\n                  </span>\n                  {subtitle && (\n                    <>\n                      {' '}\n                      <small class=\"more-insignificant\">{subtitle}</small>\n                    </>\n                  )}\n                </span>\n                <span class=\"menu-shortcut hide-until-focus-visible\">\n                  {i + 1}\n                </span>\n              </MenuLink>\n            );\n          })}\n        </Menu2>\n      )}\n    </div>\n  );\n}\n\nexport default memo(Shortcuts);\n","import { api } from './api';\nimport { extractTagsFromStatus, getFollowedTags } from './followed-tags';\nimport pmem from './pmem';\nimport { fetchRelationships } from './relationships';\nimport states, { saveStatus, statusKey } from './states';\nimport store from './store';\n\nexport function groupBoosts(values) {\n  let newValues = [];\n  let boostStash = [];\n  let serialBoosts = 0;\n  for (let i = 0; i < values.length; i++) {\n    const item = values[i];\n    if (item.reblog && !item.account?.group) {\n      boostStash.push(item);\n      serialBoosts++;\n    } else {\n      newValues.push(item);\n      if (serialBoosts < 3) {\n        serialBoosts = 0;\n      }\n    }\n  }\n  // if boostStash is more than quarter of values\n  // or if there are 3 or more boosts in a row\n  if (\n    values.length > 10 &&\n    (boostStash.length > values.length / 4 || serialBoosts >= 3)\n  ) {\n    // if boostStash is more than 3 quarter of values\n    const boostStashID = boostStash.map((status) => status.id);\n    if (boostStash.length > (values.length * 3) / 4) {\n      // insert boost array at the end of specialHome list\n      newValues = [\n        ...newValues,\n        { id: boostStashID, items: boostStash, type: 'boosts' },\n      ];\n    } else {\n      // insert boosts array in the middle of specialHome list\n      const half = Math.floor(newValues.length / 2);\n      newValues = [\n        ...newValues.slice(0, half),\n        {\n          id: boostStashID,\n          items: boostStash,\n          type: 'boosts',\n        },\n        ...newValues.slice(half),\n      ];\n    }\n    return newValues;\n  } else {\n    return values;\n  }\n}\n\nexport function dedupeBoosts(items, instance) {\n  const boostedStatusIDs = store.account.get('boostedStatusIDs') || {};\n  const filteredItems = items.filter((item) => {\n    if (!item.reblog) return true;\n    const statusKey = `${instance}-${item.reblog.id}`;\n    const boosterID = boostedStatusIDs[statusKey];\n    if (boosterID && boosterID !== item.id) {\n      console.warn(\n        `🚫 Duplicate boost by ${item.account.displayName}`,\n        item,\n        item.reblog,\n      );\n      return false;\n    } else {\n      boostedStatusIDs[statusKey] = item.id;\n    }\n    return true;\n  });\n  // Limit to 50\n  const keys = Object.keys(boostedStatusIDs);\n  if (keys.length > 50) {\n    keys.slice(0, keys.length - 50).forEach((key) => {\n      delete boostedStatusIDs[key];\n    });\n  }\n  store.account.set('boostedStatusIDs', boostedStatusIDs);\n  return filteredItems;\n}\n\nexport function groupContext(items, instance) {\n  const contexts = [];\n  let contextIndex = 0;\n  items.forEach((item) => {\n    for (let i = 0; i < contexts.length; i++) {\n      if (contexts[i].find((t) => t.id === item.id)) return;\n      if (\n        contexts[i].find((t) => t.id === item.inReplyToId) ||\n        contexts[i].find((t) => t.inReplyToId === item.id)\n      ) {\n        contexts[i].push(item);\n        return;\n      }\n    }\n    const repliedItem = items.find((i) => i.id === item.inReplyToId);\n    if (repliedItem) {\n      contexts[contextIndex++] = [item, repliedItem];\n    }\n  });\n\n  // Check for cross-item contexts\n  // Merge contexts into one if they have a common item (same id)\n  for (let i = 0; i < contexts.length; i++) {\n    for (let j = i + 1; j < contexts.length; j++) {\n      const commonItem = contexts[i].find((t) => contexts[j].includes(t));\n      if (commonItem) {\n        contexts[i] = [...contexts[i], ...contexts[j]];\n        // Remove duplicate items\n        contexts[i] = contexts[i].filter(\n          (item, index, self) =>\n            self.findIndex((t) => t.id === item.id) === index,\n        );\n        contexts.splice(j, 1);\n        j--;\n      }\n    }\n  }\n\n  // Sort items by checking inReplyToId\n  contexts.forEach((context) => {\n    context.sort((a, b) => {\n      if (!a.inReplyToId && !b.inReplyToId) {\n        return new Date(a.createdAt) - new Date(b.createdAt);\n      }\n      if (a.inReplyToId === b.id) return 1;\n      if (b.inReplyToId === a.id) return -1;\n      if (!a.inReplyToId) return -1;\n      if (!b.inReplyToId) return 1;\n      return new Date(a.createdAt) - new Date(b.createdAt);\n    });\n  });\n\n  // Tag items that has different author than first post's author\n  contexts.forEach((context) => {\n    const firstItemAccountID = context[0].account.id;\n    context.forEach((item) => {\n      if (item.account.id !== firstItemAccountID) {\n        item._differentAuthor = true;\n      }\n    });\n  });\n\n  if (contexts.length) console.log('🧵 Contexts', contexts);\n\n  const newItems = [];\n  const appliedContextIndices = [];\n  items.forEach((item) => {\n    if (item.reblog) {\n      newItems.push(item);\n      return;\n    }\n    for (let i = 0; i < contexts.length; i++) {\n      if (contexts[i].find((t) => t.id === item.id)) {\n        if (appliedContextIndices.includes(i)) return;\n        const contextItems = contexts[i];\n        contextItems.sort((a, b) => {\n          const aDate = new Date(a.createdAt);\n          const bDate = new Date(b.createdAt);\n          return aDate - bDate;\n        });\n        const firstItemAccountID = contextItems[0].account.id;\n        newItems.push({\n          id: contextItems.map((i) => i.id),\n          items: contextItems,\n          type: contextItems.every((it) => it.account.id === firstItemAccountID)\n            ? 'thread'\n            : 'conversation',\n        });\n        appliedContextIndices.push(i);\n        return;\n      }\n    }\n\n    if (item.inReplyToId && item.inReplyToAccountId !== item.account.id) {\n      const sKey = statusKey(item.id, instance);\n      if (!states.statusReply[sKey]) {\n        // If it's a reply and not a thread\n        queueMicrotask(async () => {\n          try {\n            const { masto } = api({ instance });\n            // const replyToStatus = await masto.v1.statuses\n            //   .$select(item.inReplyToId)\n            //   .fetch();\n            const replyToStatus = await fetchStatus(item.inReplyToId, masto);\n            saveStatus(replyToStatus, instance, {\n              skipThreading: true,\n              skipUnfurling: true,\n            });\n            states.statusReply[sKey] = {\n              id: replyToStatus.id,\n              instance,\n            };\n          } catch (e) {\n            // Silently fail\n            console.error(e);\n          }\n        });\n      }\n    }\n\n    newItems.push(item);\n  });\n\n  return newItems;\n}\n\nconst fetchStatus = pmem((statusID, masto) => {\n  return masto.v1.statuses.$select(statusID).fetch();\n});\n\nexport async function assignFollowedTags(items, instance) {\n  const followedTags = await getFollowedTags(); // [{name: 'tag'}, {...}]\n  if (!followedTags.length) return;\n  const { statusFollowedTags } = states;\n  console.log('statusFollowedTags', statusFollowedTags);\n  const statusWithFollowedTags = [];\n  items.forEach((item) => {\n    if (item.reblog) return;\n    const { id, content, tags = [] } = item;\n    const sKey = statusKey(id, instance);\n    if (statusFollowedTags[sKey]?.length) return;\n    const extractedTags = extractTagsFromStatus(content);\n    if (!extractedTags.length && !tags.length) return;\n    const itemFollowedTags = followedTags.reduce((acc, tag) => {\n      if (\n        extractedTags.some((t) => t.toLowerCase() === tag.name.toLowerCase()) ||\n        tags.some((t) => t.name.toLowerCase() === tag.name.toLowerCase())\n      ) {\n        acc.push(tag.name);\n      }\n      return acc;\n    }, []);\n    if (itemFollowedTags.length) {\n      // statusFollowedTags[sKey] = itemFollowedTags;\n      statusWithFollowedTags.push({\n        item,\n        sKey,\n        followedTags: itemFollowedTags,\n      });\n    }\n  });\n\n  if (statusWithFollowedTags.length) {\n    const accounts = statusWithFollowedTags.map((s) => s.item.account);\n    const relationships = await fetchRelationships(accounts);\n    if (!relationships) return;\n\n    statusWithFollowedTags.forEach((s) => {\n      const { item, sKey, followedTags } = s;\n      const r = relationships[item.account.id];\n      if (r && !r.following) {\n        statusFollowedTags[sKey] = followedTags;\n      }\n    });\n  }\n}\n\nexport function clearFollowedTagsState() {\n  states.statusFollowedTags = {};\n}\n","import { useLayoutEffect, useState } from 'preact/hooks';\n\nexport default function useScroll({\n  scrollableRef,\n  distanceFromStart = 1, // ratio of clientHeight/clientWidth\n  distanceFromEnd = 1, // ratio of clientHeight/clientWidth\n  scrollThresholdStart = 10,\n  scrollThresholdEnd = 10,\n  direction = 'vertical',\n  distanceFromStartPx: _distanceFromStartPx,\n  distanceFromEndPx: _distanceFromEndPx,\n} = {}) {\n  const [scrollDirection, setScrollDirection] = useState(null);\n  const [reachStart, setReachStart] = useState(false);\n  const [reachEnd, setReachEnd] = useState(false);\n  const [nearReachStart, setNearReachStart] = useState(false);\n  const [nearReachEnd, setNearReachEnd] = useState(false);\n  const isVertical = direction === 'vertical';\n\n  useLayoutEffect(() => {\n    const scrollableElement = scrollableRef.current;\n    if (!scrollableElement) return {};\n    let previousScrollStart = isVertical\n      ? scrollableElement.scrollTop\n      : scrollableElement.scrollLeft;\n\n    function onScroll() {\n      const {\n        scrollTop,\n        scrollLeft,\n        scrollHeight,\n        scrollWidth,\n        clientHeight,\n        clientWidth,\n      } = scrollableElement;\n      const scrollStart = isVertical ? scrollTop : scrollLeft;\n      const scrollDimension = isVertical ? scrollHeight : scrollWidth;\n      const clientDimension = isVertical ? clientHeight : clientWidth;\n      const scrollDistance = Math.abs(scrollStart - previousScrollStart);\n      const distanceFromStartPx =\n        _distanceFromStartPx ||\n        Math.min(\n          clientDimension * distanceFromStart,\n          scrollDimension,\n          scrollStart,\n        );\n      const distanceFromEndPx =\n        _distanceFromEndPx ||\n        Math.min(\n          clientDimension * distanceFromEnd,\n          scrollDimension,\n          scrollDimension - scrollStart - clientDimension,\n        );\n\n      if (\n        scrollDistance >=\n        (previousScrollStart < scrollStart\n          ? scrollThresholdEnd\n          : scrollThresholdStart)\n      ) {\n        setScrollDirection(previousScrollStart < scrollStart ? 'end' : 'start');\n        previousScrollStart = scrollStart;\n      }\n\n      setReachStart(scrollStart <= 0);\n      setReachEnd(scrollStart + clientDimension >= scrollDimension);\n      setNearReachStart(scrollStart <= distanceFromStartPx);\n      setNearReachEnd(\n        scrollStart + clientDimension >= scrollDimension - distanceFromEndPx,\n      );\n    }\n\n    scrollableElement.addEventListener('scroll', onScroll, { passive: true });\n\n    return () => scrollableElement.removeEventListener('scroll', onScroll);\n  }, [\n    distanceFromStart,\n    distanceFromEnd,\n    scrollThresholdStart,\n    scrollThresholdEnd,\n  ]);\n\n  return {\n    scrollDirection,\n    reachStart,\n    reachEnd,\n    nearReachStart,\n    nearReachEnd,\n    init: () => {\n      if (scrollableRef.current) {\n        scrollableRef.current.dispatchEvent(new Event('scroll'));\n      }\n    },\n  };\n}\n","import { useEffect, useLayoutEffect, useRef, useState } from 'preact/hooks';\nimport { useThrottledCallback } from 'use-debounce';\n\nexport default function useScrollFn(\n  {\n    scrollableRef,\n    distanceFromStart = 1, // ratio of clientHeight/clientWidth\n    distanceFromEnd = 1, // ratio of clientHeight/clientWidth\n    scrollThresholdStart = 10,\n    scrollThresholdEnd = 10,\n    direction = 'vertical',\n    distanceFromStartPx: _distanceFromStartPx,\n    distanceFromEndPx: _distanceFromEndPx,\n    init,\n  } = {},\n  callback,\n  deps,\n) {\n  if (!callback) return;\n  // const [scrollDirection, setScrollDirection] = useState(null);\n  // const [reachStart, setReachStart] = useState(false);\n  // const [reachEnd, setReachEnd] = useState(false);\n  // const [nearReachStart, setNearReachStart] = useState(false);\n  // const [nearReachEnd, setNearReachEnd] = useState(false);\n  const isVertical = direction === 'vertical';\n  const previousScrollStart = useRef(null);\n  const scrollDirection = useRef(null);\n\n  const onScroll = useThrottledCallback(() => {\n    // let scrollDirection = null;\n    let reachStart = false;\n    let reachEnd = false;\n    let nearReachStart = false;\n    let nearReachEnd = false;\n\n    const scrollableElement = scrollableRef.current;\n    const {\n      scrollTop,\n      scrollLeft,\n      scrollHeight,\n      scrollWidth,\n      clientHeight,\n      clientWidth,\n    } = scrollableElement;\n    const scrollStart = isVertical ? scrollTop : scrollLeft;\n    const scrollDimension = isVertical ? scrollHeight : scrollWidth;\n    const clientDimension = isVertical ? clientHeight : clientWidth;\n    const scrollDistance = Math.abs(scrollStart - previousScrollStart.current);\n    const distanceFromStartPx =\n      _distanceFromStartPx ||\n      Math.min(\n        clientDimension * distanceFromStart,\n        scrollDimension,\n        scrollStart,\n      );\n    const distanceFromEndPx =\n      _distanceFromEndPx ||\n      Math.min(\n        clientDimension * distanceFromEnd,\n        scrollDimension,\n        scrollDimension - scrollStart - clientDimension,\n      );\n\n    if (\n      scrollDistance >=\n      (previousScrollStart.current < scrollStart\n        ? scrollThresholdEnd\n        : scrollThresholdStart)\n    ) {\n      // setScrollDirection(\n      //   previousScrollStart.current < scrollStart ? 'end' : 'start',\n      // );\n      scrollDirection.current =\n        previousScrollStart.current < scrollStart ? 'end' : 'start';\n      previousScrollStart.current = scrollStart;\n    }\n\n    // setReachStart(scrollStart <= 0);\n    // setReachEnd(scrollStart + clientDimension >= scrollDimension);\n    // setNearReachStart(scrollStart <= distanceFromStartPx);\n    // setNearReachEnd(\n    //   scrollStart + clientDimension >= scrollDimension - distanceFromEndPx,\n    // );\n    reachStart = scrollStart <= 0;\n    reachEnd = scrollStart + clientDimension >= scrollDimension;\n    nearReachStart = scrollStart <= distanceFromStartPx;\n    nearReachEnd =\n      scrollStart + clientDimension >= scrollDimension - distanceFromEndPx;\n\n    callback({\n      scrollDirection: scrollDirection.current,\n      reachStart,\n      reachEnd,\n      nearReachStart,\n      nearReachEnd,\n    });\n  }, 500);\n\n  useLayoutEffect(() => {\n    const scrollableElement = scrollableRef.current;\n    if (!scrollableElement) return {};\n    previousScrollStart.current =\n      scrollableElement[isVertical ? 'scrollTop' : 'scrollLeft'];\n\n    scrollableElement.addEventListener('scroll', onScroll, { passive: true });\n\n    return () => scrollableElement.removeEventListener('scroll', onScroll);\n  }, [\n    distanceFromStart,\n    distanceFromEnd,\n    scrollThresholdStart,\n    scrollThresholdEnd,\n    ...deps,\n  ]);\n\n  // useEffect(() => {\n  //   callback({\n  //     scrollDirection,\n  //     reachStart,\n  //     reachEnd,\n  //     nearReachStart,\n  //     nearReachEnd,\n  //   });\n  // }, [\n  //   scrollDirection,\n  //   reachStart,\n  //   reachEnd,\n  //   nearReachStart,\n  //   nearReachEnd,\n  //   ...deps,\n  // ]);\n\n  useEffect(() => {\n    if (init && scrollableRef.current) {\n      queueMicrotask(() => {\n        scrollableRef.current.dispatchEvent(new Event('scroll'));\n      });\n    }\n  }, [init]);\n\n  // return {\n  //   scrollDirection,\n  //   reachStart,\n  //   reachEnd,\n  //   nearReachStart,\n  //   nearReachEnd,\n  //   init: () => {\n  //     if (scrollableRef.current) {\n  //       scrollableRef.current.dispatchEvent(new Event('scroll'));\n  //     }\n  //   },\n  // };\n}\n","import './media-post.css';\n\nimport { memo } from 'preact/compat';\nimport { useContext, useMemo } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport FilterContext from '../utils/filter-context';\nimport { isFiltered } from '../utils/filters';\nimport states, { statusKey } from '../utils/states';\nimport store from '../utils/store';\n\nimport Media from './media';\n\nfunction MediaPost({\n  class: className,\n  statusID,\n  status,\n  instance,\n  parent,\n  // allowFilters,\n  onMediaClick,\n}) {\n  let sKey = statusKey(statusID, instance);\n  const snapStates = useSnapshot(states);\n  if (!status) {\n    status = snapStates.statuses[sKey] || snapStates.statuses[statusID];\n    sKey = statusKey(status?.id, instance);\n  }\n  if (!status) {\n    return null;\n  }\n\n  const {\n    account: {\n      acct,\n      avatar,\n      avatarStatic,\n      id: accountId,\n      url: accountURL,\n      displayName,\n      username,\n      emojis: accountEmojis,\n      bot,\n      group,\n    },\n    id,\n    repliesCount,\n    reblogged,\n    reblogsCount,\n    favourited,\n    favouritesCount,\n    bookmarked,\n    poll,\n    muted,\n    sensitive,\n    spoilerText,\n    visibility, // public, unlisted, private, direct\n    language,\n    editedAt,\n    filtered,\n    card,\n    createdAt,\n    inReplyToId,\n    inReplyToAccountId,\n    content,\n    mentions,\n    mediaAttachments,\n    reblog,\n    uri,\n    url,\n    emojis,\n    // Non-API props\n    _deleted,\n    _pinned,\n    // _filtered,\n  } = status;\n\n  if (!mediaAttachments?.length) {\n    return null;\n  }\n\n  const debugHover = (e) => {\n    if (e.shiftKey) {\n      console.log({\n        ...status,\n      });\n    }\n  };\n\n  const currentAccount = useMemo(() => {\n    return store.session.get('currentAccount');\n  }, []);\n  const isSelf = useMemo(() => {\n    return currentAccount && currentAccount === accountId;\n  }, [accountId, currentAccount]);\n\n  const filterContext = useContext(FilterContext);\n  const filterInfo = !isSelf && isFiltered(filtered, filterContext);\n\n  if (filterInfo?.action === 'hide') {\n    return null;\n  }\n\n  console.debug('RENDER Media post', id, status?.account.displayName);\n\n  const hasSpoiler = sensitive;\n  const readingExpandMedia = useMemo(() => {\n    // default | show_all | hide_all\n    const prefs = store.account.get('preferences') || {};\n    return prefs['reading:expand:media'] || 'default';\n  }, []);\n  const showSpoilerMedia = readingExpandMedia === 'show_all';\n\n  const Parent = parent || 'div';\n\n  return mediaAttachments.map((media, i) => {\n    const mediaKey = `${sKey}-${media.id}`;\n    const filterTitleStr = filterInfo?.titlesStr;\n    return (\n      <Parent\n        data-state-post-id={sKey}\n        onMouseEnter={debugHover}\n        key={mediaKey}\n        data-spoiler-text={\n          spoilerText || (sensitive ? 'Sensitive media' : undefined)\n        }\n        data-filtered-text={\n          filterInfo\n            ? `Filtered${filterTitleStr ? `: ${filterTitleStr}` : ''}`\n            : undefined\n        }\n        class={`\n          media-post\n          ${filterInfo ? 'filtered' : ''}\n          ${hasSpoiler ? 'has-spoiler' : ''}\n          ${showSpoilerMedia ? 'show-media' : ''}\n        `}\n      >\n        <Media\n          class={className}\n          media={media}\n          lang={language}\n          to={`/${instance}/s/${id}?media-only=${i + 1}`}\n          onClick={\n            onMediaClick ? (e) => onMediaClick(e, i, media, status) : undefined\n          }\n        />\n      </Parent>\n    );\n  });\n}\n\nexport default memo(MediaPost);\n","import './nav-menu.css';\n\nimport {\n  ControlledMenu,\n  MenuDivider,\n  MenuItem,\n  SubMenu,\n} from '@szhsin/react-menu';\nimport { memo } from 'preact/compat';\nimport { useEffect, useMemo, useRef, useState } from 'preact/hooks';\nimport { useLongPress } from 'use-long-press';\nimport { useSnapshot } from 'valtio';\n\nimport { api } from '../utils/api';\nimport { getLists } from '../utils/lists';\nimport safeBoundingBoxPadding from '../utils/safe-bounding-box-padding';\nimport states from '../utils/states';\nimport store from '../utils/store';\n\nimport Avatar from './avatar';\nimport Icon from './icon';\nimport MenuLink from './menu-link';\n\nconst supportsTouch = 'ontouchstart' in window;\n\nfunction NavMenu(props) {\n  const snapStates = useSnapshot(states);\n  const { masto, instance, authenticated } = api();\n\n  const [currentAccount, moreThanOneAccount] = useMemo(() => {\n    const accounts = store.local.getJSON('accounts') || [];\n    const acc =\n      accounts.find(\n        (account) => account.info.id === store.session.get('currentAccount'),\n      ) || accounts[0];\n    return [acc, accounts.length > 1];\n  }, []);\n\n  // Home = Following\n  // But when in multi-column mode, Home becomes columns of anything\n  // User may choose pin or not to pin Following\n  // If user doesn't pin Following, we show it in the menu\n  const showFollowing =\n    (snapStates.settings.shortcutsViewMode === 'multi-column' ||\n      (!snapStates.settings.shortcutsViewMode &&\n        snapStates.settings.shortcutsColumnsMode)) &&\n    !snapStates.shortcuts.find((pin) => pin.type === 'following');\n\n  const bindLongPress = useLongPress(\n    () => {\n      states.showAccounts = true;\n    },\n    {\n      threshold: 600,\n      detect: 'touch',\n      cancelOnMovement: true,\n    },\n  );\n\n  const buttonRef = useRef();\n  const [menuState, setMenuState] = useState(undefined);\n\n  const boundingBoxPadding = safeBoundingBoxPadding([\n    0,\n    0,\n    snapStates.settings.shortcutsViewMode === 'tab-menu-bar' ? 50 : 0,\n    0,\n  ]);\n\n  const mutesIterator = useRef();\n  async function fetchMutes(firstLoad) {\n    if (firstLoad || !mutesIterator.current) {\n      mutesIterator.current = masto.v1.mutes.list({\n        limit: 80,\n      });\n    }\n    const results = await mutesIterator.current.next();\n    return results;\n  }\n\n  const blocksIterator = useRef();\n  async function fetchBlocks(firstLoad) {\n    if (firstLoad || !blocksIterator.current) {\n      blocksIterator.current = masto.v1.blocks.list({\n        limit: 80,\n      });\n    }\n    const results = await blocksIterator.current.next();\n    return results;\n  }\n\n  const [lists, setLists] = useState([]);\n  useEffect(() => {\n    if (menuState === 'open') {\n      getLists().then(setLists);\n    }\n  }, [menuState === 'open']);\n\n  const buttonClickTS = useRef();\n  return (\n    <>\n      <button\n        ref={buttonRef}\n        type=\"button\"\n        class={`button plain nav-menu-button ${\n          moreThanOneAccount ? 'with-avatar' : ''\n        } ${menuState === 'open' ? 'active' : ''}`}\n        style={{ position: 'relative' }}\n        onClick={() => {\n          buttonClickTS.current = Date.now();\n          setMenuState((state) => (!state ? 'open' : undefined));\n        }}\n        onContextMenu={(e) => {\n          e.preventDefault();\n          states.showAccounts = true;\n        }}\n        {...bindLongPress()}\n      >\n        {moreThanOneAccount && (\n          <Avatar\n            url={\n              currentAccount?.info?.avatar || currentAccount?.info?.avatarStatic\n            }\n            size=\"l\"\n            squircle={currentAccount?.info?.bot}\n          />\n        )}\n        <Icon icon=\"menu\" size={moreThanOneAccount ? 's' : 'l'} />\n      </button>\n      <ControlledMenu\n        menuClassName=\"nav-menu\"\n        state={menuState}\n        anchorRef={buttonRef}\n        onClose={() => {\n          setMenuState(undefined);\n        }}\n        containerProps={{\n          style: {\n            zIndex: 10,\n          },\n          onClick: () => {\n            if (Date.now() - buttonClickTS.current < 300) {\n              return;\n            }\n            // setMenuState(undefined);\n          },\n        }}\n        portal={{\n          target: document.body,\n        }}\n        {...props}\n        overflow=\"auto\"\n        // viewScroll=\"close\"\n        position=\"anchor\"\n        align=\"center\"\n        boundingBoxPadding={boundingBoxPadding}\n        unmountOnClose\n      >\n        {!!snapStates.appVersion?.commitHash &&\n          __COMMIT_HASH__ !== snapStates.appVersion.commitHash && (\n            <div class=\"top-menu\">\n              <MenuItem\n                onClick={() => {\n                  const yes = confirm('Reload page now to update?');\n                  if (yes) {\n                    (async () => {\n                      try {\n                        location.reload();\n                      } catch (e) {}\n                    })();\n                  }\n                }}\n              >\n                <Icon icon=\"sparkles\" class=\"sparkle-icon\" size=\"l\" />{' '}\n                <span>New update available…</span>\n              </MenuItem>\n              <MenuDivider />\n            </div>\n          )}\n        <section>\n          <MenuLink to=\"/\">\n            <Icon icon=\"home\" size=\"l\" /> <span>Home</span>\n          </MenuLink>\n          {authenticated ? (\n            <>\n              {showFollowing && (\n                <MenuLink to=\"/following\">\n                  <Icon icon=\"following\" size=\"l\" /> <span>Following</span>\n                </MenuLink>\n              )}\n              <MenuLink to=\"/catchup\">\n                <Icon icon=\"history2\" size=\"l\" />\n                <span>Catch-up</span>\n              </MenuLink>\n              <MenuLink to=\"/mentions\">\n                <Icon icon=\"at\" size=\"l\" /> <span>Mentions</span>\n              </MenuLink>\n              <MenuLink to=\"/notifications\">\n                <Icon icon=\"notification\" size=\"l\" /> <span>Notifications</span>\n                {snapStates.notificationsShowNew && (\n                  <sup title=\"New\" style={{ opacity: 0.5 }}>\n                    {' '}\n                    &bull;\n                  </sup>\n                )}\n              </MenuLink>\n              <MenuDivider />\n              {currentAccount?.info?.id && (\n                <MenuLink to={`/${instance}/a/${currentAccount.info.id}`}>\n                  <Icon icon=\"user\" size=\"l\" /> <span>Profile</span>\n                </MenuLink>\n              )}\n              {lists?.length > 0 ? (\n                <SubMenu\n                  openTrigger={supportsTouch ? 'clickOnly' : undefined}\n                  menuClassName=\"nav-submenu\"\n                  overflow=\"auto\"\n                  gap={-8}\n                  label={\n                    <>\n                      <Icon icon=\"list\" size=\"l\" />\n                      <span class=\"menu-grow\">Lists</span>\n                      <Icon icon=\"chevron-right\" />\n                    </>\n                  }\n                >\n                  <MenuLink to=\"/l\">\n                    <span>All Lists</span>\n                  </MenuLink>\n                  {lists?.length > 0 && (\n                    <>\n                      <MenuDivider />\n                      {lists.map((list) => (\n                        <MenuLink key={list.id} to={`/l/${list.id}`}>\n                          <span>{list.title}</span>\n                        </MenuLink>\n                      ))}\n                    </>\n                  )}\n                </SubMenu>\n              ) : (\n                <MenuLink to=\"/l\">\n                  <Icon icon=\"list\" size=\"l\" />\n                  <span>Lists</span>\n                </MenuLink>\n              )}\n              <MenuLink to=\"/b\">\n                <Icon icon=\"bookmark\" size=\"l\" /> <span>Bookmarks</span>\n              </MenuLink>\n              <SubMenu\n                openTrigger={supportsTouch ? 'clickOnly' : undefined}\n                menuClassName=\"nav-submenu\"\n                overflow=\"auto\"\n                gap={-8}\n                label={\n                  <>\n                    <Icon icon=\"more\" size=\"l\" />\n                    <span class=\"menu-grow\">More…</span>\n                    <Icon icon=\"chevron-right\" />\n                  </>\n                }\n              >\n                <MenuLink to=\"/f\">\n                  <Icon icon=\"heart\" size=\"l\" /> <span>Likes</span>\n                </MenuLink>\n                <MenuLink to=\"/fh\">\n                  <Icon icon=\"hashtag\" size=\"l\" />{' '}\n                  <span>Followed Hashtags</span>\n                </MenuLink>\n                <MenuDivider />\n                <MenuLink to=\"/ft\">\n                  <Icon icon=\"filters\" size=\"l\" />\n                  Filters\n                </MenuLink>\n                <MenuItem\n                  onClick={() => {\n                    states.showGenericAccounts = {\n                      id: 'mute',\n                      heading: 'Muted users',\n                      fetchAccounts: fetchMutes,\n                      excludeRelationshipAttrs: ['muting'],\n                    };\n                  }}\n                >\n                  <Icon icon=\"mute\" size=\"l\" /> Muted users&hellip;\n                </MenuItem>\n                <MenuItem\n                  onClick={() => {\n                    states.showGenericAccounts = {\n                      id: 'block',\n                      heading: 'Blocked users',\n                      fetchAccounts: fetchBlocks,\n                      excludeRelationshipAttrs: ['blocking'],\n                    };\n                  }}\n                >\n                  <Icon icon=\"block\" size=\"l\" />\n                  Blocked users&hellip;\n                </MenuItem>{' '}\n              </SubMenu>\n              <MenuDivider />\n              <MenuItem\n                onClick={() => {\n                  states.showAccounts = true;\n                }}\n              >\n                <Icon icon=\"group\" size=\"l\" /> <span>Accounts&hellip;</span>\n              </MenuItem>\n            </>\n          ) : (\n            <>\n              <MenuDivider />\n              <MenuLink to=\"/login\">\n                <Icon icon=\"user\" size=\"l\" /> <span>Log in</span>\n              </MenuLink>\n            </>\n          )}\n        </section>\n        <section>\n          <MenuDivider />\n          <MenuLink to={`/search`}>\n            <Icon icon=\"search\" size=\"l\" /> <span>Search</span>\n          </MenuLink>\n          <MenuLink to={`/${instance}/trending`}>\n            <Icon icon=\"chart\" size=\"l\" /> <span>Trending</span>\n          </MenuLink>\n          <MenuLink to={`/${instance}/p/l`}>\n            <Icon icon=\"building\" size=\"l\" /> <span>Local</span>\n          </MenuLink>\n          <MenuLink to={`/${instance}/p`}>\n            <Icon icon=\"earth\" size=\"l\" /> <span>Federated</span>\n          </MenuLink>\n          {authenticated ? (\n            <>\n              <MenuDivider className=\"divider-grow\" />\n              <MenuItem\n                onClick={() => {\n                  states.showKeyboardShortcutsHelp = true;\n                }}\n              >\n                <Icon icon=\"keyboard\" size=\"l\" />{' '}\n                <span>Keyboard shortcuts</span>\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  states.showShortcutsSettings = true;\n                }}\n              >\n                <Icon icon=\"shortcut\" size=\"l\" />{' '}\n                <span>Shortcuts / Columns&hellip;</span>\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  states.showSettings = true;\n                }}\n              >\n                <Icon icon=\"gear\" size=\"l\" /> <span>Settings&hellip;</span>\n              </MenuItem>\n            </>\n          ) : (\n            <>\n              <MenuDivider />\n              <MenuItem\n                onClick={() => {\n                  states.showSettings = true;\n                }}\n              >\n                <Icon icon=\"gear\" size=\"l\" /> <span>Settings&hellip;</span>\n              </MenuItem>\n            </>\n          )}\n        </section>\n      </ControlledMenu>\n    </>\n  );\n}\n\nexport default memo(NavMenu);\n","import { memo } from 'preact/compat';\nimport { useCallback, useEffect, useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { InView } from 'react-intersection-observer';\nimport { useDebouncedCallback } from 'use-debounce';\nimport { useSnapshot } from 'valtio';\n\nimport FilterContext from '../utils/filter-context';\nimport { filteredItems, isFiltered } from '../utils/filters';\nimport states, { statusKey } from '../utils/states';\nimport statusPeek from '../utils/status-peek';\nimport { groupBoosts, groupContext } from '../utils/timeline-utils';\nimport useInterval from '../utils/useInterval';\nimport usePageVisibility from '../utils/usePageVisibility';\nimport useScroll from '../utils/useScroll';\nimport useScrollFn from '../utils/useScrollFn';\n\nimport Icon from './icon';\nimport Link from './link';\nimport MediaPost from './media-post';\nimport NavMenu from './nav-menu';\nimport Status from './status';\n\nconst scrollIntoViewOptions = {\n  block: 'nearest',\n  inline: 'center',\n  behavior: 'smooth',\n};\n\nfunction Timeline({\n  title,\n  titleComponent,\n  id,\n  instance,\n  emptyText,\n  errorText,\n  useItemID, // use statusID instead of status object, assuming it's already in states\n  boostsCarousel,\n  fetchItems = () => {},\n  checkForUpdates = () => {},\n  checkForUpdatesInterval = 15_000, // 15 seconds\n  headerStart,\n  headerEnd,\n  timelineStart,\n  // allowFilters,\n  refresh,\n  view,\n  filterContext,\n  showFollowedTags,\n  showReplyParent,\n}) {\n  const snapStates = useSnapshot(states);\n  const [items, setItems] = useState([]);\n  const [uiState, setUIState] = useState('start');\n  const [showMore, setShowMore] = useState(false);\n  const [showNew, setShowNew] = useState(false);\n  const [visible, setVisible] = useState(true);\n  const scrollableRef = useRef();\n\n  console.debug('RENDER Timeline', id, refresh);\n\n  const allowGrouping = view !== 'media';\n  const loadItems = useDebouncedCallback(\n    (firstLoad) => {\n      setShowNew(false);\n      if (uiState === 'loading') return;\n      setUIState('loading');\n      (async () => {\n        try {\n          let { done, value } = await fetchItems(firstLoad);\n          if (Array.isArray(value)) {\n            // Avoid grouping for pinned posts\n            const [pinnedPosts, otherPosts] = value.reduce(\n              (acc, item) => {\n                if (item._pinned) {\n                  acc[0].push(item);\n                } else {\n                  acc[1].push(item);\n                }\n                return acc;\n              },\n              [[], []],\n            );\n            value = otherPosts;\n            if (allowGrouping) {\n              if (boostsCarousel) {\n                value = groupBoosts(value);\n              }\n              value = groupContext(value, instance);\n            }\n            if (pinnedPosts.length) {\n              value = pinnedPosts.concat(value);\n            }\n            console.log(value);\n            if (firstLoad) {\n              setItems(value);\n            } else {\n              setItems((items) => [...items, ...value]);\n            }\n            if (!value.length) done = true;\n            setShowMore(!done);\n          } else {\n            setShowMore(false);\n          }\n          setUIState('default');\n        } catch (e) {\n          console.error(e);\n          setUIState('error');\n        } finally {\n          loadItems.cancel();\n        }\n      })();\n    },\n    1500,\n    {\n      leading: true,\n      trailing: false,\n    },\n  );\n\n  const itemsSelector = '.timeline-item, .timeline-item-alt';\n\n  const jRef = useHotkeys('j, shift+j', (_, handler) => {\n    // focus on next status after active item\n    const activeItem = document.activeElement.closest(itemsSelector);\n    const activeItemRect = activeItem?.getBoundingClientRect();\n    const allItems = Array.from(\n      scrollableRef.current.querySelectorAll(itemsSelector),\n    );\n    if (\n      activeItem &&\n      activeItemRect.top < scrollableRef.current.clientHeight &&\n      activeItemRect.bottom > 0\n    ) {\n      const activeItemIndex = allItems.indexOf(activeItem);\n      let nextItem = allItems[activeItemIndex + 1];\n      if (handler.shift) {\n        // get next status that's not .timeline-item-alt\n        nextItem = allItems.find(\n          (item, index) =>\n            index > activeItemIndex &&\n            !item.classList.contains('timeline-item-alt'),\n        );\n      }\n      if (nextItem) {\n        nextItem.focus();\n        nextItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostItem = allItems.find((item) => {\n        const itemRect = item.getBoundingClientRect();\n        return itemRect.top >= 44 && itemRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostItem) {\n        topmostItem.focus();\n        topmostItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    }\n  });\n\n  const kRef = useHotkeys('k, shift+k', (_, handler) => {\n    // focus on previous status after active item\n    const activeItem = document.activeElement.closest(itemsSelector);\n    const activeItemRect = activeItem?.getBoundingClientRect();\n    const allItems = Array.from(\n      scrollableRef.current.querySelectorAll(itemsSelector),\n    );\n    if (\n      activeItem &&\n      activeItemRect.top < scrollableRef.current.clientHeight &&\n      activeItemRect.bottom > 0\n    ) {\n      const activeItemIndex = allItems.indexOf(activeItem);\n      let prevItem = allItems[activeItemIndex - 1];\n      if (handler.shift) {\n        // get prev status that's not .timeline-item-alt\n        prevItem = allItems.findLast(\n          (item, index) =>\n            index < activeItemIndex &&\n            !item.classList.contains('timeline-item-alt'),\n        );\n      }\n      if (prevItem) {\n        prevItem.focus();\n        prevItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostItem = allItems.find((item) => {\n        const itemRect = item.getBoundingClientRect();\n        return itemRect.top >= 44 && itemRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostItem) {\n        topmostItem.focus();\n        topmostItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    }\n  });\n\n  const oRef = useHotkeys(['enter', 'o'], () => {\n    // open active status\n    const activeItem = document.activeElement.closest(itemsSelector);\n    if (activeItem) {\n      activeItem.click();\n    }\n  });\n\n  const showNewPostsIndicator =\n    items.length > 0 && uiState !== 'loading' && showNew;\n  const handleLoadNewPosts = useCallback(() => {\n    if (showNewPostsIndicator) loadItems(true);\n    scrollableRef.current?.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  }, [loadItems, showNewPostsIndicator]);\n  const dotRef = useHotkeys('.', handleLoadNewPosts);\n\n  // const {\n  //   scrollDirection,\n  //   nearReachStart,\n  //   nearReachEnd,\n  //   reachStart,\n  //   reachEnd,\n  // } = useScroll({\n  //   scrollableRef,\n  //   distanceFromEnd: 2,\n  //   scrollThresholdStart: 44,\n  // });\n  const headerRef = useRef();\n  // const [hiddenUI, setHiddenUI] = useState(false);\n  const [nearReachStart, setNearReachStart] = useState(false);\n  useScrollFn(\n    {\n      scrollableRef,\n      distanceFromEnd: 2,\n      scrollThresholdStart: 44,\n    },\n    ({\n      scrollDirection,\n      nearReachStart,\n      // nearReachEnd,\n      reachStart,\n      // reachEnd,\n    }) => {\n      // setHiddenUI(scrollDirection === 'end' && !nearReachEnd);\n      if (headerRef.current) {\n        const hiddenUI = scrollDirection === 'end' && !nearReachStart;\n        headerRef.current.hidden = hiddenUI;\n      }\n      setNearReachStart(nearReachStart);\n      if (reachStart) {\n        loadItems(true);\n      }\n      // else if (nearReachEnd || (reachEnd && showMore)) {\n      //   loadItems();\n      // }\n    },\n    [],\n  );\n\n  useEffect(() => {\n    scrollableRef.current?.scrollTo({ top: 0 });\n    loadItems(true);\n  }, []);\n  useEffect(() => {\n    loadItems(true);\n  }, [refresh]);\n\n  // useEffect(() => {\n  //   if (reachStart) {\n  //     loadItems(true);\n  //   }\n  // }, [reachStart]);\n\n  // useEffect(() => {\n  //   if (nearReachEnd || (reachEnd && showMore)) {\n  //     loadItems();\n  //   }\n  // }, [nearReachEnd, showMore]);\n\n  const prevView = useRef(view);\n  useEffect(() => {\n    if (prevView.current !== view) {\n      prevView.current = view;\n      setItems([]);\n    }\n  }, [view]);\n\n  const loadOrCheckUpdates = useCallback(\n    async ({ disableIdleCheck = false } = {}) => {\n      const noPointers = scrollableRef.current\n        ? getComputedStyle(scrollableRef.current).pointerEvents === 'none'\n        : false;\n      console.log('✨ Load or check updates', id, {\n        autoRefresh: snapStates.settings.autoRefresh,\n        scrollTop: scrollableRef.current.scrollTop,\n        disableIdleCheck,\n        idle: window.__IDLE__,\n        inBackground: inBackground(),\n        noPointers,\n      });\n      if (\n        snapStates.settings.autoRefresh &&\n        scrollableRef.current.scrollTop < 16 &&\n        (disableIdleCheck || window.__IDLE__) &&\n        !inBackground() &&\n        !noPointers\n      ) {\n        console.log('✨ Load updates', id, snapStates.settings.autoRefresh);\n        loadItems(true);\n      } else {\n        console.log('✨ Check updates', id, snapStates.settings.autoRefresh);\n        const hasUpdate = await checkForUpdates();\n        if (hasUpdate) {\n          console.log('✨ Has new updates', id);\n          setShowNew(true);\n        }\n      }\n    },\n    [id, loadItems, checkForUpdates, snapStates.settings.autoRefresh],\n  );\n\n  const lastHiddenTime = useRef();\n  usePageVisibility(\n    (visible) => {\n      if (visible) {\n        const timeDiff = Date.now() - lastHiddenTime.current;\n        if (!lastHiddenTime.current || timeDiff > 1000 * 3) {\n          // 3 seconds\n          loadOrCheckUpdates({\n            disableIdleCheck: true,\n          });\n        }\n      } else {\n        lastHiddenTime.current = Date.now();\n      }\n      setVisible(visible);\n    },\n    [checkForUpdates, loadOrCheckUpdates, snapStates.settings.autoRefresh],\n  );\n\n  // checkForUpdates interval\n  useInterval(\n    loadOrCheckUpdates,\n    visible && !showNew\n      ? checkForUpdatesInterval * (nearReachStart ? 1 : 2)\n      : null,\n  );\n\n  // const hiddenUI = scrollDirection === 'end' && !nearReachStart;\n\n  return (\n    <FilterContext.Provider value={filterContext}>\n      <div\n        id={`${id}-page`}\n        class=\"deck-container\"\n        ref={(node) => {\n          scrollableRef.current = node;\n          jRef.current = node;\n          kRef.current = node;\n          oRef.current = node;\n          dotRef.current = node;\n        }}\n        tabIndex=\"-1\"\n      >\n        <div class=\"timeline-deck deck\">\n          <header\n            ref={headerRef}\n            // hidden={hiddenUI}\n            onClick={(e) => {\n              if (!e.target.closest('a, button')) {\n                scrollableRef.current?.scrollTo({\n                  top: 0,\n                  behavior: 'smooth',\n                });\n              }\n            }}\n            onDblClick={(e) => {\n              if (!e.target.closest('a, button')) {\n                loadItems(true);\n              }\n            }}\n            class={uiState === 'loading' ? 'loading' : ''}\n          >\n            <div class=\"header-grid\">\n              <div class=\"header-side\">\n                <NavMenu />\n                {headerStart !== null && headerStart !== undefined ? (\n                  headerStart\n                ) : (\n                  <Link to=\"/\" class=\"button plain home-button\">\n                    <Icon icon=\"home\" size=\"l\" />\n                  </Link>\n                )}\n              </div>\n              {title && (titleComponent ? titleComponent : <h1>{title}</h1>)}\n              <div class=\"header-side\">\n                {/* <Loader hidden={uiState !== 'loading'} /> */}\n                {!!headerEnd && headerEnd}\n              </div>\n            </div>\n            {showNewPostsIndicator && (\n              <button\n                class=\"updates-button shiny-pill\"\n                type=\"button\"\n                onClick={handleLoadNewPosts}\n              >\n                <Icon icon=\"arrow-up\" /> New posts\n              </button>\n            )}\n          </header>\n          {!!timelineStart && (\n            <div\n              class={`timeline-start ${uiState === 'loading' ? 'loading' : ''}`}\n            >\n              {timelineStart}\n            </div>\n          )}\n          {!!items.length ? (\n            <>\n              <ul class={`timeline ${view ? `timeline-${view}` : ''}`}>\n                {items.map((status) => (\n                  <TimelineItem\n                    status={status}\n                    instance={instance}\n                    useItemID={useItemID}\n                    // allowFilters={allowFilters}\n                    filterContext={filterContext}\n                    key={status.id + status?._pinned + view}\n                    view={view}\n                    showFollowedTags={showFollowedTags}\n                    showReplyParent={showReplyParent}\n                  />\n                ))}\n                {showMore &&\n                  uiState === 'loading' &&\n                  (view === 'media' ? null : (\n                    <>\n                      <li\n                        style={{\n                          height: '20vh',\n                        }}\n                      >\n                        <Status skeleton />\n                      </li>\n                      <li\n                        style={{\n                          height: '25vh',\n                        }}\n                      >\n                        <Status skeleton />\n                      </li>\n                    </>\n                  ))}\n              </ul>\n              {uiState === 'default' &&\n                (showMore ? (\n                  <InView\n                    root={scrollableRef.current}\n                    rootMargin={`0px 0px ${screen.height * 1.5}px 0px`}\n                    onChange={(inView) => {\n                      if (inView) {\n                        loadItems();\n                      }\n                    }}\n                  >\n                    <button\n                      type=\"button\"\n                      class=\"plain block\"\n                      onClick={() => loadItems()}\n                      style={{ marginBlockEnd: '6em' }}\n                    >\n                      Show more&hellip;\n                    </button>\n                  </InView>\n                ) : (\n                  <p class=\"ui-state insignificant\">The end.</p>\n                ))}\n            </>\n          ) : uiState === 'loading' ? (\n            <ul class=\"timeline\">\n              {Array.from({ length: 5 }).map((_, i) =>\n                view === 'media' ? (\n                  <div\n                    style={{\n                      height: '50vh',\n                    }}\n                  />\n                ) : (\n                  <li key={i}>\n                    <Status skeleton />\n                  </li>\n                ),\n              )}\n            </ul>\n          ) : (\n            uiState !== 'error' &&\n            uiState !== 'start' && <p class=\"ui-state\">{emptyText}</p>\n          )}\n          {uiState === 'error' && (\n            <p class=\"ui-state\">\n              {errorText}\n              <br />\n              <br />\n              <button type=\"button\" onClick={() => loadItems(!items.length)}>\n                Try again\n              </button>\n            </p>\n          )}\n        </div>\n      </div>\n    </FilterContext.Provider>\n  );\n}\n\nconst TimelineItem = memo(\n  ({\n    status,\n    instance,\n    useItemID,\n    // allowFilters,\n    filterContext,\n    view,\n    showFollowedTags,\n    showReplyParent,\n  }) => {\n    console.debug('RENDER TimelineItem', status.id);\n    const { id: statusID, reblog, items, type, _pinned } = status;\n    if (_pinned) useItemID = false;\n    const actualStatusID = reblog?.id || statusID;\n    const url = instance\n      ? `/${instance}/s/${actualStatusID}`\n      : `/s/${actualStatusID}`;\n    if (items) {\n      const fItems = filteredItems(items, filterContext);\n      let title = '';\n      if (type === 'boosts') {\n        title = `${fItems.length} Boosts`;\n      } else if (type === 'pinned') {\n        title = 'Pinned posts';\n      }\n      const isCarousel = type === 'boosts' || type === 'pinned';\n      if (isCarousel) {\n        // Here, we don't hide filtered posts, but we sort them last\n        fItems.sort((a, b) => {\n          // if (a._filtered && !b._filtered) {\n          //   return 1;\n          // }\n          // if (!a._filtered && b._filtered) {\n          //   return -1;\n          // }\n          const aFiltered = isFiltered(a.filtered, filterContext);\n          const bFiltered = isFiltered(b.filtered, filterContext);\n          if (aFiltered && !bFiltered) {\n            return 1;\n          }\n          if (!aFiltered && bFiltered) {\n            return -1;\n          }\n          return 0;\n        });\n        return (\n          <li key={`timeline-${statusID}`} class=\"timeline-item-carousel\">\n            <StatusCarousel title={title} class={`${type}-carousel`}>\n              {fItems.map((item) => {\n                const { id: statusID, reblog, _pinned } = item;\n                const actualStatusID = reblog?.id || statusID;\n                const url = instance\n                  ? `/${instance}/s/${actualStatusID}`\n                  : `/s/${actualStatusID}`;\n                if (_pinned) useItemID = false;\n                return (\n                  <li key={statusID}>\n                    <Link\n                      class=\"status-carousel-link timeline-item-alt\"\n                      to={url}\n                    >\n                      {useItemID ? (\n                        <Status\n                          statusID={statusID}\n                          instance={instance}\n                          size=\"s\"\n                          contentTextWeight\n                          enableCommentHint\n                          // allowFilters={allowFilters}\n                        />\n                      ) : (\n                        <Status\n                          status={item}\n                          instance={instance}\n                          size=\"s\"\n                          contentTextWeight\n                          enableCommentHint\n                          // allowFilters={allowFilters}\n                        />\n                      )}\n                    </Link>\n                  </li>\n                );\n              })}\n            </StatusCarousel>\n          </li>\n        );\n      }\n      const manyItems = fItems.length > 3;\n      return fItems.map((item, i) => {\n        const { id: statusID, _differentAuthor } = item;\n        const url = instance ? `/${instance}/s/${statusID}` : `/s/${statusID}`;\n        const isMiddle = i > 0 && i < fItems.length - 1;\n        const isSpoiler = item.sensitive && !!item.spoilerText;\n        const showCompact =\n          (!_differentAuthor && isSpoiler && i > 0) ||\n          (manyItems &&\n            isMiddle &&\n            (type === 'thread' ||\n              (type === 'conversation' &&\n                !_differentAuthor &&\n                !fItems[i - 1]._differentAuthor &&\n                !fItems[i + 1]._differentAuthor)));\n        const isStart = i === 0;\n        const isEnd = i === fItems.length - 1;\n        return (\n          <li\n            key={`timeline-${statusID}`}\n            class={`timeline-item-container timeline-item-container-type-${type} timeline-item-container-${\n              isStart ? 'start' : isEnd ? 'end' : 'middle'\n            } ${_differentAuthor ? 'timeline-item-diff-author' : ''}`}\n          >\n            <Link class=\"status-link timeline-item\" to={url}>\n              {showCompact ? (\n                <TimelineStatusCompact status={item} instance={instance} />\n              ) : useItemID ? (\n                <Status\n                  statusID={statusID}\n                  instance={instance}\n                  enableCommentHint={isEnd}\n                  showFollowedTags={showFollowedTags}\n                  // allowFilters={allowFilters}\n                />\n              ) : (\n                <Status\n                  status={item}\n                  instance={instance}\n                  enableCommentHint={isEnd}\n                  showFollowedTags={showFollowedTags}\n                  // allowFilters={allowFilters}\n                />\n              )}\n            </Link>\n          </li>\n        );\n      });\n    }\n\n    const itemKey = `timeline-${statusID + _pinned}`;\n\n    if (view === 'media') {\n      return useItemID ? (\n        <MediaPost\n          class=\"timeline-item\"\n          parent=\"li\"\n          key={itemKey}\n          statusID={statusID}\n          instance={instance}\n          // allowFilters={allowFilters}\n        />\n      ) : (\n        <MediaPost\n          class=\"timeline-item\"\n          parent=\"li\"\n          key={itemKey}\n          status={status}\n          instance={instance}\n          // allowFilters={allowFilters}\n        />\n      );\n    }\n\n    return (\n      <li key={itemKey}>\n        <Link class=\"status-link timeline-item\" to={url}>\n          {useItemID ? (\n            <Status\n              statusID={statusID}\n              instance={instance}\n              enableCommentHint\n              showFollowedTags={showFollowedTags}\n              showReplyParent={showReplyParent}\n              // allowFilters={allowFilters}\n            />\n          ) : (\n            <Status\n              status={status}\n              instance={instance}\n              enableCommentHint\n              showFollowedTags={showFollowedTags}\n              showReplyParent={showReplyParent}\n              // allowFilters={allowFilters}\n            />\n          )}\n        </Link>\n      </li>\n    );\n  },\n  (oldProps, newProps) => {\n    const oldID = (oldProps.status?.id || '').toString();\n    const newID = (newProps.status?.id || '').toString();\n    return (\n      oldID === newID &&\n      oldProps.instance === newProps.instance &&\n      oldProps.view === newProps.view\n    );\n  },\n);\n\nfunction StatusCarousel({ title, class: className, children }) {\n  const carouselRef = useRef();\n  // const { reachStart, reachEnd, init } = useScroll({\n  //   scrollableRef: carouselRef,\n  //   direction: 'horizontal',\n  // });\n  const startButtonRef = useRef();\n  const endButtonRef = useRef();\n  // useScrollFn(\n  //   {\n  //     scrollableRef: carouselRef,\n  //     direction: 'horizontal',\n  //     init: true,\n  //   },\n  //   ({ reachStart, reachEnd }) => {\n  //     if (startButtonRef.current) startButtonRef.current.disabled = reachStart;\n  //     if (endButtonRef.current) endButtonRef.current.disabled = reachEnd;\n  //   },\n  //   [],\n  // );\n  // useEffect(() => {\n  //   init?.();\n  // }, []);\n\n  const [render, setRender] = useState(false);\n  useEffect(() => {\n    setTimeout(() => {\n      setRender(true);\n    }, 1);\n  }, []);\n\n  return (\n    <div class={`status-carousel ${className}`}>\n      <header>\n        <h3>{title}</h3>\n        <span>\n          <button\n            ref={startButtonRef}\n            type=\"button\"\n            class=\"small plain2\"\n            // disabled={reachStart}\n            onClick={() => {\n              carouselRef.current?.scrollBy({\n                left: -Math.min(320, carouselRef.current?.offsetWidth),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"chevron-left\" />\n          </button>{' '}\n          <button\n            ref={endButtonRef}\n            type=\"button\"\n            class=\"small plain2\"\n            // disabled={reachEnd}\n            onClick={() => {\n              carouselRef.current?.scrollBy({\n                left: Math.min(320, carouselRef.current?.offsetWidth),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"chevron-right\" />\n          </button>\n        </span>\n      </header>\n      <ul ref={carouselRef}>\n        <InView\n          class=\"status-carousel-beacon\"\n          onChange={(inView) => {\n            if (startButtonRef.current)\n              startButtonRef.current.disabled = inView;\n          }}\n        />\n        {children[0]}\n        {render && children.slice(1)}\n        <InView\n          class=\"status-carousel-beacon\"\n          onChange={(inView) => {\n            if (endButtonRef.current) endButtonRef.current.disabled = inView;\n          }}\n        />\n      </ul>\n    </div>\n  );\n}\n\nfunction TimelineStatusCompact({ status, instance }) {\n  const snapStates = useSnapshot(states);\n  const { id, visibility, language } = status;\n  const statusPeekText = statusPeek(status);\n  const sKey = statusKey(id, instance);\n  return (\n    <article\n      class={`status compact-thread ${\n        visibility === 'direct' ? 'visibility-direct' : ''\n      }`}\n      tabindex=\"-1\"\n    >\n      {!!snapStates.statusThreadNumber[sKey] ? (\n        <div class=\"status-thread-badge\">\n          <Icon icon=\"thread\" size=\"s\" />\n          {snapStates.statusThreadNumber[sKey]\n            ? ` ${snapStates.statusThreadNumber[sKey]}/X`\n            : ''}\n        </div>\n      ) : (\n        <div class=\"status-thread-badge\">\n          <Icon icon=\"thread\" size=\"s\" />\n        </div>\n      )}\n      <div\n        class=\"content-compact\"\n        title={statusPeekText}\n        lang={language}\n        dir=\"auto\"\n      >\n        {statusPeekText}\n        {status.sensitive && status.spoilerText && (\n          <>\n            {' '}\n            <span class=\"spoiler-badge\">\n              <Icon icon=\"eye-close\" size=\"s\" />\n            </span>\n          </>\n        )}\n      </div>\n    </article>\n  );\n}\n\nfunction inBackground() {\n  return !!document.querySelector('.deck-backdrop, #modal-container > *');\n}\n\nexport default Timeline;\n","import { MenuItem } from '@szhsin/react-menu';\nimport {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'preact/hooks';\nimport punycode from 'punycode';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport AccountInfo from '../components/account-info';\nimport EmojiText from '../components/emoji-text';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Menu2 from '../components/menu2';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport pmem from '../utils/pmem';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\nconst MIN_YEAR = 1983;\nconst MIN_YEAR_MONTH = `${MIN_YEAR}-01`; // Birth of the Internet\n\nconst supportsInputMonth = (() => {\n  try {\n    const input = document.createElement('input');\n    input.setAttribute('type', 'month');\n    return input.type === 'month';\n  } catch (e) {\n    return false;\n  }\n})();\n\nasync function _isSearchEnabled(instance) {\n  const { masto } = api({ instance });\n  const results = await masto.v2.search.fetch({\n    q: 'from:me',\n    type: 'statuses',\n    limit: 1,\n  });\n  return !!results?.statuses?.length;\n}\nconst isSearchEnabled = pmem(_isSearchEnabled);\n\nfunction AccountStatuses() {\n  const snapStates = useSnapshot(states);\n  const { id, ...params } = useParams();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const month = searchParams.get('month');\n  const excludeReplies = !searchParams.get('replies');\n  const excludeBoosts = !!searchParams.get('boosts');\n  const tagged = searchParams.get('tagged');\n  const media = !!searchParams.get('media');\n  const { masto, instance, authenticated } = api({ instance: params.instance });\n  const { masto: currentMasto, instance: currentInstance } = api();\n  const accountStatusesIterator = useRef();\n\n  const allSearchParams = [month, excludeReplies, excludeBoosts, tagged, media];\n  const [account, setAccount] = useState();\n  const searchOffsetRef = useRef(0);\n  useEffect(() => {\n    searchOffsetRef.current = 0;\n  }, allSearchParams);\n\n  const sameCurrentInstance = useMemo(\n    () => instance === currentInstance,\n    [instance, currentInstance],\n  );\n  const [searchEnabled, setSearchEnabled] = useState(false);\n  useEffect(() => {\n    // Only enable for current logged-in instance\n    // Most remote instances don't allow unauthenticated searches\n    if (!sameCurrentInstance) return;\n    if (!account?.acct) return;\n    (async () => {\n      const enabled = await isSearchEnabled(instance);\n      console.log({ enabled });\n      setSearchEnabled(enabled);\n    })();\n  }, [instance, sameCurrentInstance, account?.acct]);\n\n  async function fetchAccountStatuses(firstLoad) {\n    const isValidMonth = /^\\d{4}-[01]\\d$/.test(month);\n    const isValidYear = month?.split?.('-')?.[0] >= MIN_YEAR;\n    if (isValidMonth && isValidYear) {\n      if (!account) {\n        return {\n          value: [],\n          done: true,\n        };\n      }\n      const [_year, _month] = month.split('-');\n      const monthIndex = parseInt(_month, 10) - 1;\n      // YYYY-MM (no day)\n      // Search options:\n      // - from:account\n      // - after:YYYY-MM-DD (non-inclusive)\n      // - before:YYYY-MM-DD (non-inclusive)\n\n      // Last day of previous month\n      const after = new Date(_year, monthIndex, 0);\n      const afterStr = `${after.getFullYear()}-${(after.getMonth() + 1)\n        .toString()\n        .padStart(2, '0')}-${after.getDate().toString().padStart(2, '0')}`;\n      // First day of next month\n      const before = new Date(_year, monthIndex + 1, 1);\n      const beforeStr = `${before.getFullYear()}-${(before.getMonth() + 1)\n        .toString()\n        .padStart(2, '0')}-${before.getDate().toString().padStart(2, '0')}`;\n      console.log({\n        month,\n        _year,\n        _month,\n        monthIndex,\n        after,\n        before,\n        afterStr,\n        beforeStr,\n      });\n\n      let limit;\n      if (firstLoad) {\n        limit = LIMIT + 1;\n        searchOffsetRef.current = 0;\n      } else {\n        limit = LIMIT + searchOffsetRef.current + 1;\n        searchOffsetRef.current += LIMIT;\n      }\n\n      const searchResults = await masto.v2.search.fetch({\n        q: `from:${account.acct} after:${afterStr} before:${beforeStr}`,\n        type: 'statuses',\n        limit,\n        offset: searchOffsetRef.current,\n      });\n      if (searchResults?.statuses?.length) {\n        const value = searchResults.statuses.slice(0, LIMIT);\n        value.forEach((item) => {\n          saveStatus(item, instance);\n        });\n        const done = searchResults.statuses.length <= LIMIT;\n        return { value, done };\n      } else {\n        return { value: [], done: true };\n      }\n    }\n\n    const results = [];\n    if (firstLoad) {\n      const { value } = await masto.v1.accounts\n        .$select(id)\n        .statuses.list({\n          pinned: true,\n        })\n        .next();\n      if (value?.length && !tagged && !media) {\n        const pinnedStatuses = value.map((status) => {\n          saveStatus(status, instance);\n          return {\n            ...status,\n            _pinned: true,\n          };\n        });\n        if (pinnedStatuses.length >= 3) {\n          const pinnedStatusesIds = pinnedStatuses.map((status) => status.id);\n          results.push({\n            id: pinnedStatusesIds,\n            items: pinnedStatuses,\n            type: 'pinned',\n          });\n        } else {\n          results.push(...pinnedStatuses);\n        }\n      }\n    }\n    if (firstLoad || !accountStatusesIterator.current) {\n      accountStatusesIterator.current = masto.v1.accounts\n        .$select(id)\n        .statuses.list({\n          limit: LIMIT,\n          exclude_replies: excludeReplies,\n          exclude_reblogs: excludeBoosts,\n          only_media: media,\n          tagged,\n        });\n    }\n    const { value, done } = await accountStatusesIterator.current.next();\n    if (value?.length) {\n      results.push(...value);\n\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      value: results,\n      done,\n    };\n  }\n\n  const [featuredTags, setFeaturedTags] = useState([]);\n  useTitle(\n    account?.acct\n      ? `${\n          account?.displayName\n            ? `${account.displayName} (${/@/.test(account.acct) ? '' : '@'}${\n                account.acct\n              })`\n            : `${/@/.test(account.acct) ? '' : '@'}${account.acct}`\n        }${\n          !excludeReplies\n            ? ' (+ Replies)'\n            : excludeBoosts\n            ? ' (- Boosts)'\n            : tagged\n            ? ` (#${tagged})`\n            : media\n            ? ' (Media)'\n            : month\n            ? ` (${new Date(month).toLocaleString('default', {\n                month: 'long',\n                year: 'numeric',\n              })})`\n            : ''\n        }`\n      : 'Account posts',\n    '/:instance?/a/:id',\n  );\n\n  const fetchAccountPromiseRef = useRef();\n  const fetchAccount = useCallback(() => {\n    const fetchPromise =\n      fetchAccountPromiseRef.current || masto.v1.accounts.$select(id).fetch();\n    fetchAccountPromiseRef.current = fetchPromise;\n    return fetchPromise;\n  }, [id, masto]);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const acc = await fetchAccount();\n        console.log(acc);\n        setAccount(acc);\n      } catch (e) {\n        console.error(e);\n      }\n      try {\n        const featuredTags = await masto.v1.accounts\n          .$select(id)\n          .featuredTags.list();\n        console.log({ featuredTags });\n        setFeaturedTags(featuredTags);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [id]);\n\n  const { displayName, acct, emojis } = account || {};\n\n  const filterBarRef = useRef();\n  const TimelineStart = useMemo(() => {\n    const filtered =\n      !excludeReplies || excludeBoosts || tagged || media || !!month;\n    const cachedAccount = snapStates.accounts[`${id}@${instance}`];\n\n    return (\n      <>\n        <AccountInfo\n          instance={instance}\n          account={cachedAccount || id}\n          fetchAccount={fetchAccount}\n          authenticated={authenticated}\n          standalone\n        />\n        <div\n          class=\"filter-bar\"\n          ref={filterBarRef}\n          style={{\n            position: 'relative',\n          }}\n        >\n          {filtered ? (\n            <Link\n              to={`/${instance}/a/${id}`}\n              class=\"insignificant filter-clear\"\n              title=\"Clear filters\"\n              key=\"clear-filters\"\n            >\n              <Icon icon=\"x\" size=\"l\" />\n            </Link>\n          ) : (\n            <Icon icon=\"filter\" class=\"insignificant\" size=\"l\" />\n          )}\n          <Link\n            to={`/${instance}/a/${id}${excludeReplies ? '?replies=1' : ''}`}\n            onClick={() => {\n              if (excludeReplies) {\n                showToast('Showing post with replies');\n              }\n            }}\n            class={excludeReplies ? '' : 'is-active'}\n          >\n            + Replies\n          </Link>\n          <Link\n            to={`/${instance}/a/${id}${excludeBoosts ? '' : '?boosts=0'}`}\n            onClick={() => {\n              if (!excludeBoosts) {\n                showToast('Showing posts without boosts');\n              }\n            }}\n            class={!excludeBoosts ? '' : 'is-active'}\n          >\n            - Boosts\n          </Link>\n          <Link\n            to={`/${instance}/a/${id}${media ? '' : '?media=1'}`}\n            onClick={() => {\n              if (!media) {\n                showToast('Showing posts with media');\n              }\n            }}\n            class={media ? 'is-active' : ''}\n          >\n            Media\n          </Link>\n          {featuredTags.map((tag) => (\n            <Link\n              key={tag.id}\n              to={`/${instance}/a/${id}${\n                tagged === tag.name\n                  ? ''\n                  : `?tagged=${encodeURIComponent(tag.name)}`\n              }`}\n              onClick={() => {\n                if (tagged !== tag.name) {\n                  showToast(`Showing posts tagged with #${tag.name}`);\n                }\n              }}\n              class={tagged === tag.name ? 'is-active' : ''}\n            >\n              <span>\n                <span class=\"more-insignificant\">#</span>\n                {tag.name}\n              </span>\n              {\n                // The count differs based on instance 😅\n              }\n              {/* <span class=\"filter-count\">{tag.statusesCount}</span> */}\n            </Link>\n          ))}\n          {searchEnabled &&\n            (supportsInputMonth ? (\n              <label class={`filter-field ${month ? 'is-active' : ''}`}>\n                <Icon icon=\"month\" size=\"l\" />\n                <input\n                  type=\"month\"\n                  disabled={!account?.acct}\n                  value={month || ''}\n                  min={MIN_YEAR_MONTH}\n                  max={new Date().toISOString().slice(0, 7)}\n                  onInput={(e) => {\n                    const { value, validity } = e.currentTarget;\n                    if (!validity.valid) return;\n                    setSearchParams(\n                      value\n                        ? {\n                            month: value,\n                          }\n                        : {},\n                    );\n                    const [year, month] = value.split('-');\n                    const monthIndex = parseInt(month, 10) - 1;\n                    const date = new Date(year, monthIndex);\n                    showToast(\n                      `Showing posts in ${date.toLocaleString('default', {\n                        month: 'long',\n                        year: 'numeric',\n                      })}`,\n                    );\n                  }}\n                />\n              </label>\n            ) : (\n              // Fallback to <select> for month and <input type=\"number\"> for year\n              <MonthPicker\n                class={`filter-field ${month ? 'is-active' : ''}`}\n                disabled={!account?.acct}\n                value={month || ''}\n                min={MIN_YEAR_MONTH}\n                max={new Date().toISOString().slice(0, 7)}\n                onInput={(e) => {\n                  const { value, validity } = e;\n                  if (!validity.valid) return;\n                  setSearchParams(\n                    value\n                      ? {\n                          month: value,\n                        }\n                      : {},\n                  );\n                }}\n              />\n            ))}\n        </div>\n      </>\n    );\n  }, [\n    id,\n    instance,\n    authenticated,\n    featuredTags,\n    fetchAccount,\n    searchEnabled,\n    ...allSearchParams,\n  ]);\n\n  useEffect(() => {\n    // Focus on .is-active\n    const active = filterBarRef.current?.querySelector('.is-active');\n    if (active) {\n      console.log('active', active, active.offsetLeft);\n      filterBarRef.current.scrollTo({\n        behavior: 'smooth',\n        left:\n          active.offsetLeft -\n          (filterBarRef.current.offsetWidth - active.offsetWidth) / 2,\n      });\n    }\n  }, [featuredTags, searchEnabled, ...allSearchParams]);\n\n  const accountInstance = useMemo(() => {\n    if (!account?.url) return null;\n    const domain = new URL(account.url).hostname;\n    return domain;\n  }, [account]);\n  const sameInstance = instance === accountInstance;\n  const allowSwitch = !!account && !sameInstance;\n\n  return (\n    <Timeline\n      key={id}\n      title={`${account?.acct ? '@' + account.acct : 'Posts'}`}\n      titleComponent={\n        <h1\n          class=\"header-double-lines header-account\"\n          // onClick={() => {\n          //   states.showAccount = {\n          //     account,\n          //     instance,\n          //   };\n          // }}\n        >\n          <b>\n            <EmojiText text={displayName} emojis={emojis} />\n          </b>\n          <div>\n            <span>@{acct}</span>\n          </div>\n        </h1>\n      }\n      id=\"account-statuses\"\n      instance={instance}\n      emptyText=\"Nothing to see here yet.\"\n      errorText=\"Unable to load posts\"\n      fetchItems={fetchAccountStatuses}\n      useItemID\n      view={media ? 'media' : undefined}\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      timelineStart={TimelineStart}\n      refresh={[\n        excludeReplies,\n        excludeBoosts,\n        tagged,\n        media,\n        month + account?.acct,\n      ].toString()}\n      headerEnd={\n        <Menu2\n          portal\n          // setDownOverflow\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          <MenuItem\n            disabled={!allowSwitch}\n            onClick={() => {\n              (async () => {\n                try {\n                  const { masto } = api({\n                    instance: accountInstance,\n                  });\n                  const acc = await masto.v1.accounts.lookup({\n                    acct: account.acct,\n                  });\n                  const { id } = acc;\n                  location.hash = `/${accountInstance}/a/${id}`;\n                } catch (e) {\n                  console.error(e);\n                  alert('Unable to fetch account info');\n                }\n              })();\n            }}\n          >\n            <Icon icon=\"transfer\" />{' '}\n            <small class=\"menu-double-lines\">\n              Switch to account's instance{' '}\n              {accountInstance ? (\n                <>\n                  {' '}\n                  (<b>{punycode.toUnicode(accountInstance)}</b>)\n                </>\n              ) : null}\n            </small>\n          </MenuItem>\n          {!sameCurrentInstance && (\n            <MenuItem\n              onClick={() => {\n                (async () => {\n                  try {\n                    const acc = await currentMasto.v1.accounts.lookup({\n                      acct: account.acct + '@' + instance,\n                    });\n                    const { id } = acc;\n                    location.hash = `/${currentInstance}/a/${id}`;\n                  } catch (e) {\n                    console.error(e);\n                    alert('Unable to fetch account info');\n                  }\n                })();\n              }}\n            >\n              <Icon icon=\"transfer\" />{' '}\n              <small class=\"menu-double-lines\">\n                Switch to my instance (<b>{currentInstance}</b>)\n              </small>\n            </MenuItem>\n          )}\n        </Menu2>\n      }\n    />\n  );\n}\n\nfunction MonthPicker(props) {\n  const {\n    class: className,\n    disabled,\n    value,\n    min,\n    max,\n    onInput = () => {},\n  } = props;\n  const [_year, _month] = value?.split('-') || [];\n  const monthFieldRef = useRef();\n  const yearFieldRef = useRef();\n\n  const checkValidity = (month, year) => {\n    const [minYear, minMonth] = min?.split('-') || [];\n    const [maxYear, maxMonth] = max?.split('-') || [];\n    if (year < minYear) return false;\n    if (year > maxYear) return false;\n    if (year === minYear && month < minMonth) return false;\n    if (year === maxYear && month > maxMonth) return false;\n    return true;\n  };\n\n  return (\n    <div class={className}>\n      <Icon icon=\"month\" size=\"l\" />\n      <select\n        ref={monthFieldRef}\n        disabled={disabled}\n        value={_month || ''}\n        onInput={(e) => {\n          const { value: month } = e.currentTarget;\n          const year = yearFieldRef.current.value;\n          if (!checkValidity(month, year))\n            return {\n              value: '',\n              validity: {\n                valid: false,\n              },\n            };\n          onInput({\n            value: month ? `${year}-${month}` : '',\n            validity: {\n              valid: true,\n            },\n          });\n        }}\n      >\n        <option value=\"\">Month</option>\n        <option disabled>-----</option>\n        {Array.from({ length: 12 }, (_, i) => (\n          <option\n            value={\n              // Month is 1-indexed\n              (i + 1).toString().padStart(2, '0')\n            }\n            key={i}\n          >\n            {new Date(0, i).toLocaleString('default', {\n              month: 'long',\n            })}\n          </option>\n        ))}\n      </select>{' '}\n      <input\n        ref={yearFieldRef}\n        type=\"number\"\n        disabled={disabled}\n        value={_year || new Date().getFullYear()}\n        min={min?.slice(0, 4) || MIN_YEAR}\n        max={max?.slice(0, 4) || new Date().getFullYear()}\n        onInput={(e) => {\n          const { value: year, validity } = e.currentTarget;\n          const month = monthFieldRef.current.value;\n          if (!validity.valid || !checkValidity(month, year))\n            return {\n              value: '',\n              validity: {\n                valid: false,\n              },\n            };\n          onInput({\n            value: year ? `${year}-${month}` : '',\n            validity: {\n              valid: true,\n            },\n          });\n        }}\n        style={{\n          width: '4.5em',\n        }}\n      />\n    </div>\n  );\n}\n\nexport default AccountStatuses;\n","import { useRef } from 'preact/hooks';\n\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Bookmarks() {\n  useTitle('Bookmarks', '/b');\n  const { masto, instance } = api();\n  const bookmarksIterator = useRef();\n  async function fetchBookmarks(firstLoad) {\n    if (firstLoad || !bookmarksIterator.current) {\n      bookmarksIterator.current = masto.v1.bookmarks.list({ limit: LIMIT });\n    }\n    return await bookmarksIterator.current.next();\n  }\n\n  return (\n    <Timeline\n      title=\"Bookmarks\"\n      id=\"bookmarks\"\n      emptyText=\"No bookmarks yet. Go bookmark something!\"\n      errorText=\"Unable to load bookmarks\"\n      instance={instance}\n      fetchItems={fetchBookmarks}\n    />\n  );\n}\n\nexport default Bookmarks;\n","export default \"__VITE_ASSET__S_9SYp01__\"","import '../components/links-bar.css';\nimport './catchup.css';\n\nimport autoAnimate from '@formkit/auto-animate';\nimport { getBlurHashAverageColor } from 'fast-blurhash';\nimport { Fragment } from 'preact';\nimport { memo } from 'preact/compat';\nimport {\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n} from 'preact/hooks';\nimport punycode from 'punycode';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { useSearchParams } from 'react-router-dom';\nimport { uid } from 'uid/single';\n\nimport catchupUrl from '../assets/features/catch-up.png';\n\nimport Avatar from '../components/avatar';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport Modal from '../components/modal';\nimport NameText from '../components/name-text';\nimport NavMenu from '../components/nav-menu';\nimport RelativeTime from '../components/relative-time';\nimport { api } from '../utils/api';\nimport { oklab2rgb, rgb2oklab } from '../utils/color-utils';\nimport db from '../utils/db';\nimport emojifyText from '../utils/emojify-text';\nimport { isFiltered } from '../utils/filters';\nimport htmlContentLength from '../utils/html-content-length';\nimport niceDateTime from '../utils/nice-date-time';\nimport shortenNumber from '../utils/shorten-number';\nimport showToast from '../utils/show-toast';\nimport states, { statusKey } from '../utils/states';\nimport statusPeek from '../utils/status-peek';\nimport store from '../utils/store';\nimport { getCurrentAccountNS } from '../utils/store-utils';\nimport { assignFollowedTags } from '../utils/timeline-utils';\nimport useTitle from '../utils/useTitle';\n\nconst FILTER_CONTEXT = 'home';\n\nconst RANGES = [\n  { label: 'last 1 hour', value: 1 },\n  { label: 'last 2 hours', value: 2 },\n  { label: 'last 3 hours', value: 3 },\n  { label: 'last 4 hours', value: 4 },\n  { label: 'last 5 hours', value: 5 },\n  { label: 'last 6 hours', value: 6 },\n  { label: 'last 7 hours', value: 7 },\n  { label: 'last 8 hours', value: 8 },\n  { label: 'last 9 hours', value: 9 },\n  { label: 'last 10 hours', value: 10 },\n  { label: 'last 11 hours', value: 11 },\n  { label: 'last 12 hours', value: 12 },\n  { label: 'beyond 12 hours', value: 13 },\n];\n\nconst FILTER_LABELS = [\n  'Original',\n  'Replies',\n  'Boosts',\n  'Followed tags',\n  'Groups',\n  'Filtered',\n];\nconst FILTER_SORTS = [\n  'createdAt',\n  'repliesCount',\n  'favouritesCount',\n  'reblogsCount',\n  'density',\n];\nconst FILTER_GROUPS = [null, 'account'];\nconst FILTER_VALUES = {\n  Filtered: 'filtered',\n  Groups: 'group',\n  Boosts: 'boost',\n  Replies: 'reply',\n  'Followed tags': 'followedTags',\n  Original: 'original',\n};\nconst FILTER_CATEGORY_TEXT = {\n  Filtered: 'filtered posts',\n  Groups: 'group posts',\n  Boosts: 'boosts',\n  Replies: 'replies',\n  'Followed tags': 'followed-tag posts',\n  Original: 'original posts',\n};\nconst SORT_BY_TEXT = {\n  // asc, desc\n  createdAt: ['oldest', 'latest'],\n  repliesCount: ['fewest replies', 'most replies'],\n  favouritesCount: ['fewest likes', 'most likes'],\n  reblogsCount: ['fewest boosts', 'most boosts'],\n  density: ['least dense', 'most dense'],\n};\n\nfunction Catchup() {\n  useTitle('Catch-up', '/catchup');\n  const { masto, instance } = api();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const id = searchParams.get('id');\n  const [uiState, setUIState] = useState('start');\n  const [showTopLinks, setShowTopLinks] = useState(false);\n\n  const currentAccount = useMemo(() => {\n    return store.session.get('currentAccount');\n  }, []);\n  const isSelf = (accountID) => accountID === currentAccount;\n\n  async function fetchHome({ maxCreatedAt }) {\n    const maxCreatedAtDate = maxCreatedAt ? new Date(maxCreatedAt) : null;\n    console.debug('fetchHome', maxCreatedAtDate);\n    const allResults = [];\n    const homeIterator = masto.v1.timelines.home.list({ limit: 40 });\n    mainloop: while (true) {\n      try {\n        const results = await homeIterator.next();\n        const { value } = results;\n        if (value?.length) {\n          // This ignores maxCreatedAt filter, but it's ok for now\n          await assignFollowedTags(value, instance);\n          let addedResults = false;\n          for (let i = 0; i < value.length; i++) {\n            const item = value[i];\n            const createdAtDate = new Date(item.createdAt);\n            if (!maxCreatedAtDate || createdAtDate >= maxCreatedAtDate) {\n              // Filtered\n              const selfPost = isSelf(\n                item.reblog?.account?.id || item.account.id,\n              );\n              const filterInfo =\n                !selfPost &&\n                isFiltered(\n                  item.reblog?.filtered || item.filtered,\n                  FILTER_CONTEXT,\n                );\n              if (filterInfo?.action === 'hide') continue;\n              item._filtered = filterInfo;\n\n              // Followed tags\n              const sKey = statusKey(item.id, instance);\n              item._followedTags = states.statusFollowedTags[sKey]\n                ? [...states.statusFollowedTags[sKey]]\n                : [];\n\n              allResults.push(item);\n              addedResults = true;\n            } else {\n              // Don't immediately stop, still add the other items that might still be within range\n              // break mainloop;\n            }\n            // Only stop when ALL items are outside of range\n            if (!addedResults) {\n              break mainloop;\n            }\n          }\n        } else {\n          break mainloop;\n        }\n        // Pause 1s\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      } catch (e) {\n        console.error(e);\n        break mainloop;\n      }\n    }\n\n    // Post-process all results\n    // 1. Threadify - tag 1st-post in a thread\n    allResults.forEach((status) => {\n      if (status?.inReplyToId) {\n        const replyToStatus = allResults.find(\n          (s) => s.id === status.inReplyToId,\n        );\n        if (replyToStatus && !replyToStatus.inReplyToId) {\n          replyToStatus._thread = true;\n        }\n      }\n    });\n\n    return allResults;\n  }\n\n  const [posts, setPosts] = useState([]);\n  const catchupRangeRef = useRef();\n  const catchupLastRef = useRef();\n  const NS = useMemo(() => getCurrentAccountNS(), []);\n  const handleCatchupClick = useCallback(async ({ duration } = {}) => {\n    const now = Date.now();\n    const maxCreatedAt = duration ? now - duration : null;\n    setUIState('loading');\n    const results = await fetchHome({ maxCreatedAt });\n    // Namespaced by account ID\n    // Possible conflict if ID matches between different accounts from different instances\n    const catchupID = `${NS}-${uid()}`;\n    try {\n      await db.catchup.set(catchupID, {\n        id: catchupID,\n        posts: results,\n        count: results.length,\n        startAt: maxCreatedAt,\n        endAt: now,\n      });\n      setSearchParams({ id: catchupID });\n    } catch (e) {\n      console.error(e, results);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (id) {\n      (async () => {\n        const catchup = await db.catchup.get(id);\n        if (catchup) {\n          catchup.posts.sort((a, b) => (a.createdAt > b.createdAt ? 1 : -1));\n          setPosts(catchup.posts);\n          setUIState('results');\n        }\n      })();\n    } else if (uiState === 'results') {\n      setPosts([]);\n      setUIState('start');\n    }\n  }, [id]);\n\n  const [reloadCatchupsCount, reloadCatchups] = useReducer((c) => c + 1, 0);\n  const [lastCatchupEndAt, setLastCatchupEndAt] = useState(null);\n  const [prevCatchups, setPrevCatchups] = useState([]);\n  useEffect(() => {\n    (async () => {\n      try {\n        const catchups = await db.catchup.keys();\n        if (catchups.length) {\n          const ns = getCurrentAccountNS();\n          const ownKeys = catchups.filter((key) => key.startsWith(`${ns}-`));\n          if (ownKeys.length) {\n            let ownCatchups = await db.catchup.getMany(ownKeys);\n            ownCatchups.sort((a, b) => b.endAt - a.endAt);\n\n            // Split to 1st 3 last catchups, and the rest\n            let lastCatchups = ownCatchups.slice(0, 3);\n            let restCatchups = ownCatchups.slice(3);\n\n            const trimmedCatchups = lastCatchups.map((c) => {\n              const { id, count, startAt, endAt } = c;\n              return {\n                id,\n                count,\n                startAt,\n                endAt,\n              };\n            });\n            setPrevCatchups(trimmedCatchups);\n            setLastCatchupEndAt(lastCatchups[0].endAt);\n\n            // GC time\n            ownCatchups = null;\n            lastCatchups = null;\n\n            queueMicrotask(() => {\n              if (restCatchups.length) {\n                // delete them\n                db.catchup\n                  .delMany(restCatchups.map((c) => c.id))\n                  .then(() => {\n                    // GC time\n                    restCatchups = null;\n                  })\n                  .catch((e) => {\n                    console.error(e);\n                  });\n              }\n            });\n\n            return;\n          }\n        }\n      } catch (e) {\n        console.error(e);\n      }\n      setPrevCatchups([]);\n    })();\n  }, [reloadCatchupsCount]);\n  useEffect(() => {\n    if (uiState === 'start') {\n      reloadCatchups();\n    }\n  }, [uiState === 'start']);\n\n  const [filterCounts, links] = useMemo(() => {\n    let filtereds = 0,\n      groups = 0,\n      boosts = 0,\n      replies = 0,\n      followedTags = 0,\n      originals = 0;\n    const links = {};\n    for (const post of posts) {\n      if (post._filtered) {\n        filtereds++;\n        post.__FILTER = 'filtered';\n      } else if (post.group) {\n        groups++;\n        post.__FILTER = 'group';\n      } else if (post.reblog) {\n        boosts++;\n        post.__FILTER = 'boost';\n      } else if (post._followedTags?.length) {\n        followedTags++;\n        post.__FILTER = 'followedTags';\n      } else if (\n        post.inReplyToId &&\n        post.inReplyToAccountId !== post.account?.id\n      ) {\n        replies++;\n        post.__FILTER = 'reply';\n      } else {\n        originals++;\n        post.__FILTER = 'original';\n      }\n\n      const thePost = post.reblog || post;\n      if (\n        post.__FILTER !== 'filtered' &&\n        thePost.card?.url &&\n        thePost.card?.image &&\n        thePost.card?.type === 'link'\n      ) {\n        const { card, favouritesCount, reblogsCount } = thePost;\n        let { url } = card;\n        url = url.replace(/\\/$/, '');\n        if (!links[url]) {\n          links[url] = {\n            postID: thePost.id,\n            card,\n            shared: 1,\n            sharers: [post.account],\n            likes: favouritesCount,\n            boosts: reblogsCount,\n          };\n        } else {\n          if (links[url].sharers.find((a) => a.id === post.account.id)) {\n            continue;\n          }\n          links[url].shared++;\n          links[url].sharers.push(post.account);\n          if (links[url].postID !== thePost.id) {\n            links[url].likes += favouritesCount;\n            links[url].boosts += reblogsCount;\n          }\n        }\n      }\n    }\n\n    let topLinks = [];\n    for (const link in links) {\n      topLinks.push({\n        url: link,\n        ...links[link],\n      });\n    }\n    topLinks.sort((a, b) => {\n      if (a.shared > b.shared) return -1;\n      if (a.shared < b.shared) return 1;\n      if (a.boosts > b.boosts) return -1;\n      if (a.boosts < b.boosts) return 1;\n      if (a.likes > b.likes) return -1;\n      if (a.likes < b.likes) return 1;\n      return 0;\n    });\n\n    // Slice links to shared > 1 but min 10 links\n    if (topLinks.length > 10) {\n      linksLoop: for (let i = 10; i < topLinks.length; i++) {\n        const { shared } = topLinks[i];\n        if (shared <= 1) {\n          topLinks = topLinks.slice(0, i);\n          break linksLoop;\n        }\n      }\n    }\n\n    return [\n      {\n        Filtered: filtereds,\n        Groups: groups,\n        Boosts: boosts,\n        Replies: replies,\n        'Followed tags': followedTags,\n        Original: originals,\n      },\n      topLinks,\n    ];\n  }, [posts]);\n\n  const [selectedFilterCategory, setSelectedFilterCategory] = useState('All');\n  const [selectedAuthor, setSelectedAuthor] = useState(null);\n\n  const [range, setRange] = useState(1);\n\n  const [sortBy, setSortBy] = useState('createdAt');\n  const [sortOrder, setSortOrder] = useState('asc');\n  const [groupBy, setGroupBy] = useState(null);\n\n  const [filteredPosts, authors, authorCounts] = useMemo(() => {\n    const authorsHash = {};\n    const authorCountsMap = new Map();\n\n    let filteredPosts = posts.filter((post) => {\n      const postFilterMatches =\n        selectedFilterCategory === 'All' ||\n        post.__FILTER === FILTER_VALUES[selectedFilterCategory];\n\n      if (postFilterMatches) {\n        authorsHash[post.account.id] = post.account;\n        authorCountsMap.set(\n          post.account.id,\n          (authorCountsMap.get(post.account.id) || 0) + 1,\n        );\n      }\n\n      return postFilterMatches;\n    });\n\n    // Deduplicate boosts\n    const boostedPosts = {};\n    filteredPosts.forEach((post) => {\n      if (post.reblog) {\n        if (boostedPosts[post.reblog.id]) {\n          if (boostedPosts[post.reblog.id].__BOOSTERS) {\n            boostedPosts[post.reblog.id].__BOOSTERS.add(post.account);\n          } else {\n            boostedPosts[post.reblog.id].__BOOSTERS = new Set([post.account]);\n          }\n          post.__HIDDEN = true;\n        } else {\n          boostedPosts[post.reblog.id] = post;\n        }\n      }\n    });\n\n    if (selectedAuthor && authorCountsMap.has(selectedAuthor)) {\n      filteredPosts = filteredPosts.filter(\n        (post) =>\n          post.account.id === selectedAuthor ||\n          [...(post.__BOOSTERS || [])].find((a) => a.id === selectedAuthor),\n      );\n    }\n\n    return [filteredPosts, authorsHash, Object.fromEntries(authorCountsMap)];\n  }, [selectedFilterCategory, selectedAuthor, posts]);\n\n  const filteredPostsMap = useMemo(() => {\n    const map = {};\n    filteredPosts.forEach((post) => {\n      map[post.id] = post;\n    });\n    return map;\n  }, [filteredPosts]);\n\n  const authorCountsList = useMemo(\n    () =>\n      Object.keys(authorCounts).sort(\n        (a, b) => authorCounts[b] - authorCounts[a],\n      ),\n    [authorCounts],\n  );\n\n  const sortedFilteredPosts = useMemo(() => {\n    const authorIndices = {};\n    authorCountsList.forEach((authorID, index) => {\n      authorIndices[authorID] = index;\n    });\n    return filteredPosts\n      .filter((post) => !post.__HIDDEN)\n      .sort((a, b) => {\n        if (groupBy === 'account') {\n          const aAccountID = a.account.id;\n          const bAccountID = b.account.id;\n          const aIndex = authorIndices[aAccountID];\n          const bIndex = authorIndices[bAccountID];\n          const order = aIndex - bIndex;\n          if (order !== 0) {\n            return order;\n          }\n        }\n        if (sortBy !== 'createdAt') {\n          a = a.reblog || a;\n          b = b.reblog || b;\n          if (sortBy !== 'density' && a[sortBy] === b[sortBy]) {\n            return a.createdAt > b.createdAt ? 1 : -1;\n          }\n        }\n        if (sortBy === 'density') {\n          const aDensity = postDensity(a);\n          const bDensity = postDensity(b);\n          if (sortOrder === 'asc') {\n            return aDensity > bDensity ? 1 : -1;\n          } else {\n            return bDensity > aDensity ? 1 : -1;\n          }\n        }\n        if (sortOrder === 'asc') {\n          return a[sortBy] > b[sortBy] ? 1 : -1;\n        } else {\n          return b[sortBy] > a[sortBy] ? 1 : -1;\n        }\n      });\n  }, [filteredPosts, sortBy, sortOrder, groupBy, authorCountsList]);\n\n  const prevGroup = useRef(null);\n\n  const authorsListParent = useRef(null);\n  const autoAnimated = useRef(false);\n  useEffect(() => {\n    if (posts.length > 100 || autoAnimated.current) return;\n    if (authorsListParent.current) {\n      autoAnimate(authorsListParent.current, {\n        duration: 200,\n      });\n      autoAnimated.current = true;\n    }\n  }, [posts, authorsListParent]);\n\n  const postsBarType = posts.length > 160 ? '3d' : '2d';\n\n  const postsBar = useMemo(() => {\n    if (postsBarType !== '2d') return null;\n    return posts.map((post) => {\n      // If part of filteredPosts\n      const isFiltered = filteredPostsMap[post.id];\n      return (\n        <span\n          key={post.id}\n          class={`post-dot ${isFiltered ? 'post-dot-highlight' : ''}`}\n        />\n      );\n    });\n  }, [filteredPostsMap]);\n\n  const postsBins = useMemo(() => {\n    if (postsBarType !== '3d') return null;\n    if (!posts?.length) return null;\n    const bins = binByTime(posts, 'createdAt', 320);\n    return bins.map((posts, i) => {\n      return (\n        <div class=\"posts-bin\" key={i}>\n          {posts.map((post) => {\n            const isFiltered = filteredPostsMap[post.id];\n            return (\n              <span\n                key={post.id}\n                class={`post-dot ${isFiltered ? 'post-dot-highlight' : ''}`}\n              />\n            );\n          })}\n        </div>\n      );\n    });\n  }, [filteredPostsMap]);\n\n  const scrollableRef = useRef(null);\n\n  // if range value exceeded lastCatchupEndAt, show error\n  const lastCatchupRange = useMemo(() => {\n    // return hour, not ms\n    if (!lastCatchupEndAt) return null;\n    return (Date.now() - lastCatchupEndAt) / 1000 / 60 / 60;\n  }, [lastCatchupEndAt, range]);\n\n  useEffect(() => {\n    if (uiState !== 'results') return;\n    const authorUsername =\n      selectedAuthor && authors[selectedAuthor]\n        ? authors[selectedAuthor].username\n        : '';\n    const sortOrderIndex = sortOrder === 'asc' ? 0 : 1;\n    const groupByText = {\n      account: 'authors',\n    };\n    let toast = showToast({\n      duration: 5_000, // 5 seconds\n      text: `Showing ${\n        FILTER_CATEGORY_TEXT[selectedFilterCategory] || 'all posts'\n      }${authorUsername ? ` by @${authorUsername}` : ''}, ${\n        SORT_BY_TEXT[sortBy][sortOrderIndex]\n      } first${\n        !!groupBy\n          ? `, grouped by ${groupBy === 'account' ? groupByText[groupBy] : ''}`\n          : ''\n      }`,\n    });\n    return () => {\n      toast?.hideToast?.();\n    };\n  }, [\n    uiState,\n    selectedFilterCategory,\n    selectedAuthor,\n    sortBy,\n    sortOrder,\n    groupBy,\n    authors,\n  ]);\n\n  useEffect(() => {\n    if (selectedAuthor) {\n      if (authors[selectedAuthor]) {\n        // Check if author is visible and within the scrollable area viewport\n        const authorElement = authorsListParent.current.querySelector(\n          `[data-author=\"${selectedAuthor}\"]`,\n        );\n        const scrollableRect =\n          authorsListParent.current?.getBoundingClientRect();\n        const authorRect = authorElement?.getBoundingClientRect();\n        console.log({\n          sLeft: scrollableRect.left,\n          sRight: scrollableRect.right,\n          aLeft: authorRect.left,\n          aRight: authorRect.right,\n        });\n        if (\n          authorRect.left < scrollableRect.left ||\n          authorRect.right > scrollableRect.right\n        ) {\n          authorElement.scrollIntoView({\n            block: 'nearest',\n            inline: 'center',\n            behavior: 'smooth',\n          });\n        } else if (authorRect.top < 0) {\n          authorElement.scrollIntoView({\n            block: 'nearest',\n            inline: 'nearest',\n            behavior: 'smooth',\n          });\n        }\n      }\n    }\n  }, [selectedAuthor, authors]);\n\n  const [showHelp, setShowHelp] = useState(false);\n\n  const itemsSelector = '.catchup-list > li > a';\n  const jRef = useHotkeys(\n    'j',\n    () => {\n      const activeItem = document.activeElement.closest(itemsSelector);\n      const activeItemRect = activeItem?.getBoundingClientRect();\n      const allItems = Array.from(\n        scrollableRef.current.querySelectorAll(itemsSelector),\n      );\n      if (\n        activeItem &&\n        activeItemRect.top < scrollableRef.current.clientHeight &&\n        activeItemRect.bottom > 0\n      ) {\n        const activeItemIndex = allItems.indexOf(activeItem);\n        const nextItem = allItems[activeItemIndex + 1];\n        if (nextItem) {\n          nextItem.focus();\n          nextItem.scrollIntoView({\n            block: 'center',\n            inline: 'center',\n            behavior: 'smooth',\n          });\n        }\n      } else {\n        const topmostItem = allItems.find((item) => {\n          const itemRect = item.getBoundingClientRect();\n          return itemRect.top >= 0;\n        });\n        if (topmostItem) {\n          topmostItem.focus();\n          topmostItem.scrollIntoView({\n            block: 'nearest',\n            inline: 'center',\n            behavior: 'smooth',\n          });\n        }\n      }\n    },\n    {\n      preventDefault: true,\n      ignoreModifiers: true,\n    },\n  );\n\n  const kRef = useHotkeys(\n    'k',\n    () => {\n      const activeItem = document.activeElement.closest(itemsSelector);\n      const activeItemRect = activeItem?.getBoundingClientRect();\n      const allItems = Array.from(\n        scrollableRef.current.querySelectorAll(itemsSelector),\n      );\n      if (\n        activeItem &&\n        activeItemRect.top < scrollableRef.current.clientHeight &&\n        activeItemRect.bottom > 0\n      ) {\n        const activeItemIndex = allItems.indexOf(activeItem);\n        let prevItem = allItems[activeItemIndex - 1];\n        if (prevItem) {\n          prevItem.focus();\n          prevItem.scrollIntoView({\n            block: 'center',\n            inline: 'center',\n            behavior: 'smooth',\n          });\n        }\n      } else {\n        const topmostItem = allItems.find((item) => {\n          const itemRect = item.getBoundingClientRect();\n          return itemRect.top >= 44 && itemRect.left >= 0;\n        });\n        if (topmostItem) {\n          topmostItem.focus();\n          topmostItem.scrollIntoView({\n            block: 'nearest',\n            inline: 'center',\n            behavior: 'smooth',\n          });\n        }\n      }\n    },\n    {\n      preventDefault: true,\n      ignoreModifiers: true,\n    },\n  );\n\n  const hlRef = useHotkeys(\n    'h, l',\n    (_, handler) => {\n      // Go next/prev selectedAuthor in authorCountsList list\n      const key = handler.keys[0];\n      if (selectedAuthor) {\n        const index = authorCountsList.indexOf(selectedAuthor);\n        if (key === 'h') {\n          if (index > 0 && index < authorCountsList.length) {\n            setSelectedAuthor(authorCountsList[index - 1]);\n            scrollableRef.current?.focus();\n          }\n        } else if (key === 'l') {\n          if (index < authorCountsList.length - 1 && index >= 0) {\n            setSelectedAuthor(authorCountsList[index + 1]);\n            scrollableRef.current?.focus();\n          }\n        }\n      } else if (key === 'l') {\n        setSelectedAuthor(authorCountsList[0]);\n        scrollableRef.current?.focus();\n      }\n    },\n    {\n      preventDefault: true,\n      ignoreModifiers: true,\n      enableOnFormTags: ['input'],\n    },\n  );\n\n  const escRef = useHotkeys(\n    'esc',\n    () => {\n      setSelectedAuthor(null);\n      scrollableRef.current?.focus();\n    },\n    {\n      preventDefault: true,\n      ignoreModifiers: true,\n      enableOnFormTags: ['input'],\n    },\n  );\n\n  const dotRef = useHotkeys(\n    '.',\n    () => {\n      scrollableRef.current?.scrollTo({\n        top: 0,\n        behavior: 'smooth',\n      });\n    },\n    {\n      preventDefault: true,\n      ignoreModifiers: true,\n      enableOnFormTags: ['input'],\n    },\n  );\n\n  return (\n    <div\n      ref={(node) => {\n        scrollableRef.current = node;\n        jRef.current = node;\n        kRef.current = node;\n        hlRef.current = node;\n        escRef.current = node;\n      }}\n      id=\"catchup-page\"\n      class=\"deck-container\"\n      tabIndex=\"-1\"\n    >\n      <div class=\"timeline-deck deck wide\">\n        <header\n          class={`${uiState === 'loading' ? 'loading' : ''}`}\n          onClick={(e) => {\n            if (!e.target.closest('a, button')) {\n              scrollableRef.current?.scrollTo({\n                top: 0,\n                behavior: 'smooth',\n              });\n            }\n          }}\n        >\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n              {uiState === 'results' && (\n                <Link to=\"/catchup\" class=\"button plain\">\n                  <Icon icon=\"history2\" size=\"l\" />\n                </Link>\n              )}\n              {uiState === 'start' && (\n                <Link to=\"/\" class=\"button plain\">\n                  <Icon icon=\"home\" size=\"l\" />\n                </Link>\n              )}\n            </div>\n            <h1>\n              {uiState !== 'start' && (\n                <>\n                  Catch-up <sup>beta</sup>\n                </>\n              )}\n            </h1>\n            <div class=\"header-side\">\n              {uiState !== 'start' && uiState !== 'loading' && (\n                <button\n                  type=\"button\"\n                  class=\"plain\"\n                  onClick={() => {\n                    setShowHelp(true);\n                  }}\n                >\n                  Help\n                </button>\n              )}\n            </div>\n          </div>\n        </header>\n        <main>\n          {uiState === 'start' && (\n            <div class=\"catchup-start\">\n              <h1>\n                Catch-up <sup>beta</sup>\n              </h1>\n              <details>\n                <summary>What is this?</summary>\n                <p>\n                  Catch-up is a separate timeline for your followings, offering\n                  a high-level view at a glance, with a simple, email-inspired\n                  interface to effortlessly sort and filter through posts.\n                </p>\n                <img\n                  src={catchupUrl}\n                  width=\"1200\"\n                  height=\"900\"\n                  alt=\"Preview of Catch-up UI\"\n                />\n                <p>\n                  <button\n                    type=\"button\"\n                    onClick={(e) => {\n                      e.target.closest('details').open = false;\n                    }}\n                  >\n                    Let's catch up\n                  </button>\n                </p>\n              </details>\n              <p>Let's catch up on the posts from your followings.</p>\n              <p>\n                <b>Show me all posts from…</b>\n              </p>\n              <div class=\"catchup-form\">\n                <input\n                  ref={catchupRangeRef}\n                  type=\"range\"\n                  value={range}\n                  min={RANGES[0].value}\n                  max={RANGES[RANGES.length - 1].value}\n                  step=\"1\"\n                  list=\"catchup-ranges\"\n                  onChange={(e) => setRange(+e.target.value)}\n                />{' '}\n                <span\n                  style={{\n                    width: '8em',\n                  }}\n                >\n                  {RANGES[range - 1].label}\n                  <br />\n                  <small class=\"insignificant\">\n                    {range == RANGES[RANGES.length - 1].value\n                      ? 'until the max'\n                      : niceDateTime(\n                          new Date(Date.now() - range * 60 * 60 * 1000),\n                        )}\n                  </small>\n                </span>\n                <datalist id=\"catchup-ranges\">\n                  {RANGES.map(({ label, value }) => (\n                    <option value={value} label={label} />\n                  ))}\n                </datalist>{' '}\n                <button\n                  type=\"button\"\n                  onClick={() => {\n                    if (range < RANGES[RANGES.length - 1].value) {\n                      let duration;\n                      if (\n                        range === RANGES[RANGES.length - 1].value &&\n                        catchupLastRef.current?.checked\n                      ) {\n                        duration = Date.now() - lastCatchupEndAt;\n                      } else {\n                        duration = range * 60 * 60 * 1000;\n                      }\n                      handleCatchupClick({ duration });\n                    } else {\n                      handleCatchupClick();\n                    }\n                  }}\n                >\n                  Catch up\n                </button>\n              </div>\n              {lastCatchupRange && range > lastCatchupRange ? (\n                <p class=\"catchup-info\">\n                  <Icon icon=\"info\" /> Overlaps with your last catch-up\n                </p>\n              ) : range === RANGES[RANGES.length - 1].value &&\n                lastCatchupEndAt ? (\n                <p class=\"catchup-info\">\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      switch\n                      checked\n                      ref={catchupLastRef}\n                    />{' '}\n                    Until the last catch-up (\n                    {dtf.format(new Date(lastCatchupEndAt))})\n                  </label>\n                </p>\n              ) : null}\n              <p class=\"insignificant\">\n                <small>\n                  Note: your instance might only show a maximum of 800 posts in\n                  the Home timeline regardless of the time range. Could be less\n                  or more.\n                </small>\n              </p>\n              {!!prevCatchups?.length && (\n                <div class=\"catchup-prev\">\n                  <p>Previously…</p>\n                  <ul>\n                    {prevCatchups.map((pc) => (\n                      <li key={pc.id}>\n                        <Link to={`/catchup?id=${pc.id}`}>\n                          <Icon icon=\"history2\" />{' '}\n                          <span>\n                            {pc.startAt\n                              ? dtf.formatRange(\n                                  new Date(pc.startAt),\n                                  new Date(pc.endAt),\n                                )\n                              : `… – ${dtf.format(new Date(pc.endAt))}`}\n                          </span>\n                        </Link>{' '}\n                        <span>\n                          <small class=\"ib insignificant\">\n                            {pc.count} posts\n                          </small>{' '}\n                          <button\n                            type=\"button\"\n                            class=\"light danger small\"\n                            onClick={async () => {\n                              const yes = confirm('Remove this catch-up?');\n                              if (yes) {\n                                let t = showToast(`Removing Catch-up ${pc.id}`);\n                                await db.catchup.del(pc.id);\n                                t?.hideToast?.();\n                                showToast(`Catch-up ${pc.id} removed`);\n                                reloadCatchups();\n                              }\n                            }}\n                          >\n                            <Icon icon=\"x\" />\n                          </button>\n                        </span>\n                      </li>\n                    ))}\n                  </ul>\n                  {prevCatchups.length >= 3 && (\n                    <p>\n                      <small>\n                        Note: Only max 3 will be stored. The rest will be\n                        automatically removed.\n                      </small>\n                    </p>\n                  )}\n                </div>\n              )}\n            </div>\n          )}\n          {uiState === 'loading' && (\n            <div class=\"ui-state catchup-start\">\n              <Loader abrupt />\n              <p class=\"insignificant\">Fetching posts…</p>\n              <p class=\"insignificant\">This might take a while.</p>\n            </div>\n          )}\n          {uiState === 'results' && (\n            <>\n              <div class=\"catchup-header\">\n                {posts.length > 0 && (\n                  <p>\n                    <b class=\"ib\">\n                      {dtf.formatRange(\n                        new Date(posts[0].createdAt),\n                        new Date(posts[posts.length - 1].createdAt),\n                      )}\n                    </b>\n                  </p>\n                )}\n                <aside>\n                  <button\n                    hidden={\n                      selectedFilterCategory === 'All' &&\n                      !selectedAuthor &&\n                      sortBy === 'createdAt' &&\n                      sortOrder === 'asc'\n                    }\n                    type=\"button\"\n                    class=\"plain4 small\"\n                    onClick={() => {\n                      setSelectedFilterCategory('All');\n                      setSelectedAuthor(null);\n                      setSortBy('createdAt');\n                      setGroupBy(null);\n                      setSortOrder('asc');\n                    }}\n                  >\n                    Reset filters\n                  </button>\n                  {links?.length > 0 && (\n                    <button\n                      type=\"button\"\n                      class=\"plain small\"\n                      onClick={() => setShowTopLinks(!showTopLinks)}\n                    >\n                      Top links{' '}\n                      <Icon\n                        icon=\"chevron-down\"\n                        style={{\n                          transform: showTopLinks\n                            ? 'rotate(180deg)'\n                            : 'rotate(0deg)',\n                        }}\n                      />\n                    </button>\n                  )}\n                </aside>\n              </div>\n              <div class=\"shazam-container no-animation\" hidden={!showTopLinks}>\n                <div class=\"shazam-container-inner\">\n                  <div class=\"catchup-top-links links-bar\">\n                    {links.map((link) => {\n                      const { card, shared, sharers, likes, boosts } = link;\n                      const {\n                        blurhash,\n                        title,\n                        description,\n                        url,\n                        image,\n                        imageDescription,\n                        language,\n                        width,\n                        height,\n                        publishedAt,\n                      } = card;\n                      const domain = punycode.toUnicode(\n                        new URL(url).hostname\n                          .replace(/^www\\./, '')\n                          .replace(/\\/$/, ''),\n                      );\n                      let accentColor;\n                      if (blurhash) {\n                        const averageColor = getBlurHashAverageColor(blurhash);\n                        const labAverageColor = rgb2oklab(averageColor);\n                        accentColor = oklab2rgb([\n                          0.6,\n                          labAverageColor[1],\n                          labAverageColor[2],\n                        ]);\n                      }\n\n                      return (\n                        <a\n                          key={url}\n                          href={url}\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                          style={\n                            accentColor\n                              ? {\n                                  '--accent-color': `rgb(${accentColor.join(\n                                    ',',\n                                  )})`,\n                                  '--accent-alpha-color': `rgba(${accentColor.join(\n                                    ',',\n                                  )}, 0.4)`,\n                                }\n                              : {}\n                          }\n                        >\n                          <article>\n                            <figure>\n                              <img\n                                src={image}\n                                alt={imageDescription}\n                                width={width}\n                                height={height}\n                                loading=\"lazy\"\n                              />\n                            </figure>\n                            <div class=\"article-body\">\n                              <header>\n                                <div class=\"article-meta\">\n                                  <span class=\"domain\">{domain}</span>{' '}\n                                  {!!publishedAt && <>&middot; </>}\n                                  {!!publishedAt && (\n                                    <>\n                                      <RelativeTime\n                                        datetime={publishedAt}\n                                        format=\"micro\"\n                                      />\n                                    </>\n                                  )}\n                                </div>\n                                {!!title && (\n                                  <h1\n                                    class=\"title\"\n                                    lang={language}\n                                    dir=\"auto\"\n                                    title={title}\n                                  >\n                                    {title}\n                                  </h1>\n                                )}\n                              </header>\n                              {!!description && (\n                                <p\n                                  class=\"description\"\n                                  lang={language}\n                                  dir=\"auto\"\n                                  title={description}\n                                >\n                                  {description}\n                                </p>\n                              )}\n                              <hr />\n                              <p\n                                style={{\n                                  whiteSpace: 'nowrap',\n                                }}\n                              >\n                                Shared by{' '}\n                                {sharers.map((s) => {\n                                  const { avatarStatic, displayName } = s;\n                                  return (\n                                    <Avatar\n                                      url={avatarStatic}\n                                      size=\"s\"\n                                      alt={displayName}\n                                    />\n                                  );\n                                })}\n                              </p>\n                            </div>\n                          </article>\n                        </a>\n                      );\n                    })}\n                  </div>\n                </div>\n              </div>\n              {posts.length >= 5 &&\n                (postsBarType === '3d' ? (\n                  <div class=\"catchup-posts-viz-time-bar\">{postsBins}</div>\n                ) : (\n                  <div class=\"catchup-posts-viz-bar\">{postsBar}</div>\n                ))}\n              {posts.length >= 2 && (\n                <div class=\"catchup-filters\">\n                  <label class=\"filter-cat\">\n                    <input\n                      type=\"radio\"\n                      name=\"filter-cat\"\n                      checked={selectedFilterCategory.toLowerCase() === 'all'}\n                      onChange={() => {\n                        setSelectedFilterCategory('All');\n                      }}\n                    />\n                    All <span class=\"count\">{posts.length}</span>\n                  </label>\n                  {FILTER_LABELS.map(\n                    (label) =>\n                      !!filterCounts[label] && (\n                        <label\n                          class=\"filter-cat\"\n                          key={label}\n                          title={\n                            (\n                              (filterCounts[label] / posts.length) *\n                              100\n                            ).toFixed(2) + '%'\n                          }\n                        >\n                          <input\n                            type=\"radio\"\n                            name=\"filter-cat\"\n                            checked={\n                              selectedFilterCategory.toLowerCase() ===\n                              label.toLowerCase()\n                            }\n                            onChange={() => {\n                              setSelectedFilterCategory(label);\n                              // setSelectedAuthor(null);\n                            }}\n                          />\n                          {label}{' '}\n                          <span class=\"count\">{filterCounts[label]}</span>\n                        </label>\n                      ),\n                  )}\n                </div>\n              )}\n              {posts.length >= 2 && !!authorCounts && (\n                <div\n                  class=\"catchup-filters authors-filters\"\n                  ref={authorsListParent}\n                >\n                  {authorCountsList.map((author) => (\n                    <label\n                      class=\"filter-author\"\n                      data-author={author}\n                      key={`${author}-${authorCounts[author]}`}\n                      // Preact messed up the order sometimes, need additional key besides just `author`\n                      // https://github.com/preactjs/preact/issues/2849\n                    >\n                      <input\n                        type=\"radio\"\n                        name=\"filter-author\"\n                        checked={selectedAuthor === author}\n                        onChange={() => {\n                          setSelectedAuthor(author);\n                          // setGroupBy(null);\n                        }}\n                        onClick={() => {\n                          if (selectedAuthor === author) {\n                            setSelectedAuthor(null);\n                          }\n                        }}\n                      />\n                      <Avatar\n                        url={\n                          authors[author].avatarStatic || authors[author].avatar\n                        }\n                        size=\"xxl\"\n                        alt={`${authors[author].displayName} (@${authors[author].acct})`}\n                      />{' '}\n                      <span class=\"count\">{authorCounts[author]}</span>\n                      <span class=\"username\">{authors[author].username}</span>\n                    </label>\n                  ))}\n                  {authorCountsList.length > 5 && (\n                    <small\n                      key=\"authors-count\"\n                      style={{\n                        whiteSpace: 'nowrap',\n                        paddingInline: '1em',\n                        opacity: 0.33,\n                      }}\n                    >\n                      {authorCountsList.length} authors\n                    </small>\n                  )}\n                </div>\n              )}\n              {posts.length >= 2 && (\n                <div class=\"catchup-filters\">\n                  <span class=\"filter-label\">Sort</span>{' '}\n                  <fieldset class=\"radio-field-group\">\n                    {FILTER_SORTS.map((key) => (\n                      <label\n                        class=\"filter-sort\"\n                        key={key}\n                        onClick={(e) => {\n                          if (sortBy === key) {\n                            e.preventDefault();\n                            e.stopPropagation();\n                            setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');\n                          }\n                        }}\n                      >\n                        <input\n                          type=\"radio\"\n                          name=\"filter-sort-cat\"\n                          checked={sortBy === key}\n                          onChange={() => {\n                            setSortBy(key);\n                            const order = /(replies|favourites|reblogs)/.test(\n                              key,\n                            )\n                              ? 'desc'\n                              : 'asc';\n                            setSortOrder(order);\n                          }}\n                        />\n                        {\n                          {\n                            createdAt: 'Date',\n                            repliesCount: 'Replies',\n                            favouritesCount: 'Likes',\n                            reblogsCount: 'Boosts',\n                            density: 'Density',\n                          }[key]\n                        }\n                        {sortBy === key && (sortOrder === 'asc' ? ' ↑' : ' ↓')}\n                      </label>\n                    ))}\n                  </fieldset>\n                  {/* <fieldset class=\"radio-field-group\">\n                    {['asc', 'desc'].map((key) => (\n                      <label class=\"filter-sort\" key={key}>\n                        <input\n                          type=\"radio\"\n                          name=\"filter-sort-dir\"\n                          checked={sortOrder === key}\n                          onChange={() => {\n                            setSortOrder(key);\n                          }}\n                        />\n                        {key === 'asc' ? '↑' : '↓'}\n                      </label>\n                    ))}\n                  </fieldset> */}\n                  <span class=\"filter-label\">Group</span>{' '}\n                  <fieldset class=\"radio-field-group\">\n                    {FILTER_GROUPS.map((key) => (\n                      <label class=\"filter-group\" key={key || 'none'}>\n                        <input\n                          type=\"radio\"\n                          name=\"filter-group\"\n                          checked={groupBy === key}\n                          onChange={() => {\n                            setGroupBy(key);\n                          }}\n                          disabled={key === 'account' && selectedAuthor}\n                        />\n                        {{\n                          account: 'Authors',\n                        }[key] || 'None'}\n                      </label>\n                    ))}\n                  </fieldset>\n                  {\n                    selectedAuthor && authorCountsList.length > 1 ? (\n                      <button\n                        type=\"button\"\n                        class=\"plain6 small\"\n                        onClick={() => {\n                          setSelectedAuthor(null);\n                        }}\n                        style={{\n                          whiteSpace: 'nowrap',\n                        }}\n                      >\n                        Show all authors\n                      </button>\n                    ) : null\n                    // <button\n                    //   type=\"button\"\n                    //   class=\"plain4 small\"\n                    //   onClick={() => {}}\n                    // >\n                    //   Group by authors\n                    // </button>\n                  }\n                </div>\n              )}\n              <ul\n                class={`catchup-list catchup-filter-${\n                  FILTER_VALUES[selectedFilterCategory] || ''\n                } ${sortBy ? `catchup-sort-${sortBy}` : ''} ${\n                  selectedAuthor && authors[selectedAuthor]\n                    ? `catchup-selected-author`\n                    : ''\n                } ${groupBy ? `catchup-group-${groupBy}` : ''}`}\n              >\n                {sortedFilteredPosts.map((post, i) => {\n                  const id = post.reblog?.id || post.id;\n                  let showSeparator = false;\n                  if (groupBy === 'account') {\n                    if (\n                      prevGroup.current &&\n                      post.account.id !== prevGroup.current &&\n                      i > 0\n                    ) {\n                      showSeparator = true;\n                    }\n                    prevGroup.current = post.account.id;\n                  }\n                  return (\n                    <Fragment key={`${post.id}-${showSeparator}`}>\n                      {showSeparator && <li class=\"separator\" />}\n                      <IntersectionPostLineItem\n                        to={`/${instance}/s/${id}`}\n                        post={post}\n                        root={scrollableRef.current}\n                      />\n                    </Fragment>\n                  );\n                })}\n              </ul>\n              <footer>\n                {filteredPosts.length > 5 && (\n                  <p>\n                    {selectedFilterCategory === 'Boosts'\n                      ? \"You don't have to read everything.\"\n                      : \"That's all.\"}{' '}\n                    <button\n                      type=\"button\"\n                      class=\"textual\"\n                      onClick={() => {\n                        scrollableRef.current.scrollTop = 0;\n                      }}\n                    >\n                      Back to top\n                    </button>\n                    .\n                  </p>\n                )}\n              </footer>\n            </>\n          )}\n        </main>\n      </div>\n      {showHelp && (\n        <Modal onClose={() => setShowHelp(false)}>\n          <div class=\"sheet\" id=\"catchup-help-sheet\">\n            <button\n              type=\"button\"\n              class=\"sheet-close\"\n              onClick={() => setShowHelp(false)}\n            >\n              <Icon icon=\"x\" />\n            </button>\n            <header>\n              <h2>Help</h2>\n            </header>\n            <main>\n              <dl>\n                <dt>Top links</dt>\n                <dd>\n                  Links shared by followings, sorted by shared counts, boosts\n                  and likes.\n                </dd>\n                <dt>Sort: Density</dt>\n                <dd>\n                  Posts are sorted by information density or depth. Shorter\n                  posts are \"lighter\" while longer posts are \"heavier\". Posts\n                  with photos are \"heavier\" than posts without photos.\n                </dd>\n                <dt>Group: Authors</dt>\n                <dd>\n                  Posts are grouped by authors, sorted by posts count per\n                  author.\n                </dd>\n                <dt>Keyboard shortcuts</dt>\n                <dd>\n                  <kbd>j</kbd>: Next post\n                </dd>\n                <dd>\n                  <kbd>k</kbd>: Previous post\n                </dd>\n                <dd>\n                  <kbd>l</kbd>: Next author\n                </dd>\n                <dd>\n                  <kbd>h</kbd>: Previous author\n                </dd>\n                <dd>\n                  <kbd>Enter</kbd>: Open post details\n                </dd>\n                <dd>\n                  <kbd>.</kbd>: Scroll to top\n                </dd>\n              </dl>\n            </main>\n          </div>\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nconst PostLine = memo(\n  function ({ post }) {\n    const {\n      id,\n      account,\n      group,\n      reblog,\n      inReplyToId,\n      inReplyToAccountId,\n      _followedTags: isFollowedTags,\n      _filtered: filterInfo,\n      visibility,\n      __BOOSTERS,\n    } = post;\n    const isReplyTo = inReplyToId && inReplyToAccountId !== account.id;\n    const isFiltered = !!filterInfo;\n\n    const debugHover = (e) => {\n      if (e.shiftKey) {\n        console.log({\n          ...post,\n        });\n      }\n    };\n\n    return (\n      <article\n        class={`post-line ${\n          group\n            ? 'group'\n            : reblog\n            ? 'reblog'\n            : isFollowedTags?.length\n            ? 'followed-tags'\n            : ''\n        } ${isReplyTo ? 'reply-to' : ''} ${\n          isFiltered ? 'filtered' : ''\n        } visibility-${visibility}`}\n        onMouseEnter={debugHover}\n      >\n        <span class=\"post-author\">\n          {reblog ? (\n            <span class=\"post-reblog-avatar\">\n              <Avatar\n                url={account.avatarStatic || account.avatar}\n                squircle={account.bot}\n              />\n              {__BOOSTERS?.size > 0\n                ? [...__BOOSTERS].map((b) => (\n                    <Avatar url={b.avatarStatic || b.avatar} squircle={b.bot} />\n                  ))\n                : ''}{' '}\n              <Icon icon=\"rocket\" />{' '}\n              {/* <Avatar\n              url={reblog.account.avatarStatic || reblog.account.avatar}\n              squircle={reblog.account.bot}\n            /> */}\n              <NameText account={reblog.account} showAvatar />\n            </span>\n          ) : (\n            <NameText account={account} showAvatar />\n          )}\n        </span>\n        <PostPeek post={reblog || post} filterInfo={filterInfo} />\n        <span class=\"post-meta\">\n          <PostStats post={reblog || post} />{' '}\n          <RelativeTime\n            datetime={new Date(reblog?.createdAt || post.createdAt)}\n            format=\"micro\"\n          />\n        </span>\n      </article>\n    );\n  },\n  (oldProps, newProps) => {\n    return oldProps?.post?.id === newProps?.post?.id;\n  },\n);\n\nconst IntersectionPostLineItem = ({ root, to, ...props }) => {\n  const ref = useRef();\n  const [show, setShow] = useState(false);\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      (entries) => {\n        const entry = entries[0];\n        if (entry.isIntersecting) {\n          queueMicrotask(() => setShow(true));\n          observer.unobserve(ref.current);\n        }\n      },\n      {\n        root,\n        rootMargin: `${Math.max(320, screen.height * 0.75)}px`,\n      },\n    );\n    if (ref.current) observer.observe(ref.current);\n    return () => {\n      if (ref.current) observer.unobserve(ref.current);\n    };\n  }, []);\n\n  return show ? (\n    <li>\n      <Link to={to}>\n        <PostLine {...props} />\n      </Link>\n    </li>\n  ) : (\n    <li ref={ref} style={{ height: '4em' }} />\n  );\n};\n\n// A media speak a thousand words\nconst MEDIA_DENSITY = 8;\nconst CARD_DENSITY = 8;\nfunction postDensity(post) {\n  const { spoilerText, content, poll, mediaAttachments, card } = post;\n  const pollContent = poll?.options?.length\n    ? poll.options.reduce((acc, cur) => acc + cur.title, '')\n    : '';\n  const density =\n    (spoilerText.length + htmlContentLength(content) + pollContent.length) /\n      140 +\n    (mediaAttachments?.length\n      ? MEDIA_DENSITY * mediaAttachments.length\n      : card?.image\n      ? CARD_DENSITY\n      : 0);\n  return density;\n}\n\nconst MEDIA_SIZE = 48;\n\nfunction PostPeek({ post, filterInfo }) {\n  const {\n    spoilerText,\n    sensitive,\n    content,\n    emojis,\n    poll,\n    mediaAttachments,\n    card,\n    inReplyToId,\n    inReplyToAccountId,\n    account,\n    _thread,\n  } = post;\n  const isThread =\n    (inReplyToId && inReplyToAccountId === account.id) || !!_thread;\n  const showMedia = !spoilerText && !sensitive;\n  const postText = content ? statusPeek(post) : '';\n\n  return (\n    <div class=\"post-peek\" title={!spoilerText ? postText : ''}>\n      <span class=\"post-peek-content\">\n        {!!filterInfo ? (\n          <>\n            {isThread && (\n              <>\n                <span class=\"post-peek-tag post-peek-thread\">Thread</span>{' '}\n              </>\n            )}\n            <span class=\"post-peek-filtered\">\n              Filtered{filterInfo?.titlesStr ? `: ${filterInfo.titlesStr}` : ''}\n            </span>\n          </>\n        ) : !!spoilerText ? (\n          <>\n            {isThread && (\n              <>\n                <span class=\"post-peek-tag post-peek-thread\">Thread</span>{' '}\n              </>\n            )}\n            <span class=\"post-peek-spoiler\">\n              <Icon icon=\"eye-close\" /> {spoilerText}\n            </span>\n          </>\n        ) : (\n          <div class=\"post-peek-html\">\n            {isThread && (\n              <>\n                <span class=\"post-peek-tag post-peek-thread\">Thread</span>{' '}\n              </>\n            )}\n            {!!content && (\n              <div\n                dangerouslySetInnerHTML={{\n                  __html: emojifyText(content, emojis),\n                }}\n              />\n            )}\n            {!!poll?.options?.length &&\n              poll.options.map((o) => (\n                <div>\n                  {poll.multiple ? '▪️' : '•'} {o.title}\n                </div>\n              ))}\n            {!content &&\n              mediaAttachments?.length === 1 &&\n              mediaAttachments[0].description && (\n                <>\n                  <span class=\"post-peek-tag post-peek-alt\">ALT</span>{' '}\n                  <div>{mediaAttachments[0].description}</div>\n                </>\n              )}\n          </div>\n        )}\n      </span>\n      {!filterInfo && (\n        <span class=\"post-peek-post-content\">\n          {!!poll && (\n            <span class=\"post-peek-tag post-peek-poll\">\n              <Icon icon=\"poll\" size=\"s\" />\n              Poll\n            </span>\n          )}\n          {!!mediaAttachments?.length\n            ? mediaAttachments.map((m) => {\n                const mediaURL = m.previewUrl || m.url;\n                const remoteMediaURL = m.previewRemoteUrl || m.remoteUrl;\n                return (\n                  <span key={m.id} class=\"post-peek-media\">\n                    {{\n                      image:\n                        (mediaURL || remoteMediaURL) && showMedia ? (\n                          <img\n                            src={mediaURL}\n                            width={MEDIA_SIZE}\n                            height={MEDIA_SIZE}\n                            alt={m.description}\n                            loading=\"lazy\"\n                            onError={(e) => {\n                              const { src } = e.target;\n                              if (src === mediaURL) {\n                                e.target.src = remoteMediaURL;\n                              }\n                            }}\n                          />\n                        ) : (\n                          <span class=\"post-peek-faux-media\">🖼</span>\n                        ),\n                      gifv:\n                        (mediaURL || remoteMediaURL) && showMedia ? (\n                          <img\n                            src={mediaURL}\n                            width={MEDIA_SIZE}\n                            height={MEDIA_SIZE}\n                            alt={m.description}\n                            loading=\"lazy\"\n                            onError={(e) => {\n                              const { src } = e.target;\n                              if (src === mediaURL) {\n                                e.target.src = remoteMediaURL;\n                              }\n                            }}\n                          />\n                        ) : (\n                          <span class=\"post-peek-faux-media\">🎞️</span>\n                        ),\n                      video:\n                        (mediaURL || remoteMediaURL) && showMedia ? (\n                          <img\n                            src={mediaURL}\n                            width={MEDIA_SIZE}\n                            height={MEDIA_SIZE}\n                            alt={m.description}\n                            loading=\"lazy\"\n                            onError={(e) => {\n                              const { src } = e.target;\n                              if (src === mediaURL) {\n                                e.target.src = remoteMediaURL;\n                              }\n                            }}\n                          />\n                        ) : (\n                          <span class=\"post-peek-faux-media\">📹</span>\n                        ),\n                      audio: <span class=\"post-peek-faux-media\">🎵</span>,\n                    }[m.type] || null}\n                  </span>\n                );\n              })\n            : !!card &&\n              card.image &&\n              showMedia && (\n                <span\n                  class={`post-peek-media post-peek-card card-${\n                    card.type || ''\n                  }`}\n                >\n                  {card.image ? (\n                    <img\n                      src={card.image}\n                      width={MEDIA_SIZE}\n                      height={MEDIA_SIZE}\n                      alt={\n                        card.title || card.description || card.imageDescription\n                      }\n                      loading=\"lazy\"\n                    />\n                  ) : (\n                    <span class=\"post-peek-faux-media\">🔗</span>\n                  )}\n                </span>\n              )}\n        </span>\n      )}\n    </div>\n  );\n}\n\nfunction PostStats({ post }) {\n  const { reblogsCount, repliesCount, favouritesCount } = post;\n  return (\n    <span class=\"post-stats\">\n      {repliesCount > 0 && (\n        <span class=\"post-stat-replies\">\n          <Icon icon=\"comment2\" size=\"s\" /> {shortenNumber(repliesCount)}\n        </span>\n      )}\n      {favouritesCount > 0 && (\n        <span class=\"post-stat-likes\">\n          <Icon icon=\"heart\" size=\"s\" /> {shortenNumber(favouritesCount)}\n        </span>\n      )}\n      {reblogsCount > 0 && (\n        <span class=\"post-stat-boosts\">\n          <Icon icon=\"rocket\" size=\"s\" /> {shortenNumber(reblogsCount)}\n        </span>\n      )}\n    </span>\n  );\n}\n\nconst { locale } = new Intl.DateTimeFormat().resolvedOptions();\nconst dtf = new Intl.DateTimeFormat(locale, {\n  year: 'numeric',\n  month: 'short',\n  day: 'numeric',\n  hour: 'numeric',\n  minute: 'numeric',\n});\n\nfunction binByTime(data, key, numBins) {\n  // Extract dates from data objects\n  const dates = data.map((item) => new Date(item[key]));\n\n  // Find minimum and maximum dates directly (avoiding Math.min/max)\n  const minDate = dates.reduce(\n    (acc, date) => (date < acc ? date : acc),\n    dates[0],\n  );\n  const maxDate = dates.reduce(\n    (acc, date) => (date > acc ? date : acc),\n    dates[0],\n  );\n\n  // Calculate the time span in milliseconds\n  const range = maxDate.getTime() - minDate.getTime();\n\n  // Create empty bins and loop through data\n  const bins = Array.from({ length: numBins }, () => []);\n  data.forEach((item) => {\n    const date = new Date(item[key]);\n    const normalized = (date.getTime() - minDate.getTime()) / range;\n    const binIndex = Math.floor(normalized * (numBins - 1));\n    bins[binIndex].push(item);\n  });\n\n  return bins;\n}\n\nexport default Catchup;\n","import { useRef } from 'preact/hooks';\n\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Favourites() {\n  useTitle('Likes', '/f');\n  const { masto, instance } = api();\n  const favouritesIterator = useRef();\n  async function fetchFavourites(firstLoad) {\n    if (firstLoad || !favouritesIterator.current) {\n      favouritesIterator.current = masto.v1.favourites.list({ limit: LIMIT });\n    }\n    return await favouritesIterator.current.next();\n  }\n\n  return (\n    <Timeline\n      title=\"Likes\"\n      id=\"favourites\"\n      emptyText=\"No likes yet. Go like something!\"\n      errorText=\"Unable to load likes\"\n      instance={instance}\n      fetchItems={fetchFavourites}\n    />\n  );\n}\n\nexport default Favourites;\n","import './filters.css';\n\nimport { useEffect, useReducer, useRef, useState } from 'preact/hooks';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport MenuConfirm from '../components/menu-confirm';\nimport Modal from '../components/modal';\nimport NavMenu from '../components/nav-menu';\nimport RelativeTime from '../components/relative-time';\nimport { api } from '../utils/api';\nimport useInterval from '../utils/useInterval';\nimport useTitle from '../utils/useTitle';\n\nconst FILTER_CONTEXT = ['home', 'public', 'notifications', 'thread', 'account'];\nconst FILTER_CONTEXT_UNIMPLEMENTED = ['notifications', 'thread', 'account'];\nconst FILTER_CONTEXT_LABELS = {\n  home: 'Home and lists',\n  notifications: 'Notifications',\n  public: 'Public timelines',\n  thread: 'Conversations',\n  account: 'Profiles',\n};\n\nconst EXPIRY_DURATIONS = [\n  0, // forever\n  30 * 60, // 30 minutes\n  60 * 60, // 1 hour\n  6 * 60 * 60, // 6 hours\n  12 * 60 * 60, // 12 hours\n  60 * 60 * 24, // 24 hours\n  60 * 60 * 24 * 7, // 7 days\n  60 * 60 * 24 * 30, // 30 days\n];\nconst EXPIRY_DURATIONS_LABELS = {\n  0: 'Never',\n  1800: '30 minutes',\n  3600: '1 hour',\n  21600: '6 hours',\n  43200: '12 hours',\n  86_400: '24 hours',\n  604_800: '7 days',\n  2_592_000: '30 days',\n};\n\nfunction Filters() {\n  const { masto } = api();\n  useTitle(`Filters`, `/ft`);\n  const [uiState, setUIState] = useState('default');\n  const [showFiltersAddEditModal, setShowFiltersAddEditModal] = useState(false);\n\n  const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n  const [filters, setFilters] = useState([]);\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const filters = await masto.v2.filters.list();\n        filters.sort((a, b) => a.title.localeCompare(b.title));\n        filters.forEach((filter) => {\n          if (filter.keywords?.length) {\n            filter.keywords.sort((a, b) => a.id - b.id);\n          }\n        });\n        console.log(filters);\n        setFilters(filters);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, [reloadCount]);\n\n  return (\n    <div id=\"filters-page\" class=\"deck-container\" tabIndex=\"-1\">\n      <div class=\"timeline-deck deck\">\n        <header>\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n              <Link to=\"/\" class=\"button plain\">\n                <Icon icon=\"home\" size=\"l\" />\n              </Link>\n            </div>\n            <h1>Filters</h1>\n            <div class=\"header-side\">\n              <button\n                type=\"button\"\n                class=\"plain\"\n                onClick={() => {\n                  setShowFiltersAddEditModal(true);\n                }}\n              >\n                <Icon icon=\"plus\" size=\"l\" alt=\"New filter\" />\n              </button>\n            </div>\n          </div>\n        </header>\n        <main>\n          {filters.length > 0 ? (\n            <>\n              <ul class=\"filters-list\">\n                {filters.map((filter) => {\n                  const { id, title, expiresAt, keywords } = filter;\n                  return (\n                    <li key={id}>\n                      <div>\n                        <h2>{title}</h2>\n                        {keywords?.length > 0 && (\n                          <div>\n                            {keywords.map((k) => (\n                              <>\n                                <span class=\"tag collapsed insignificant\">\n                                  {k.wholeWord ? `“${k.keyword}”` : k.keyword}\n                                </span>{' '}\n                              </>\n                            ))}\n                          </div>\n                        )}\n                        <small class=\"insignificant\">\n                          <ExpiryStatus expiresAt={expiresAt} />\n                        </small>\n                      </div>\n                      <button\n                        type=\"button\"\n                        class=\"plain\"\n                        onClick={() => {\n                          setShowFiltersAddEditModal({\n                            filter,\n                          });\n                        }}\n                      >\n                        <Icon icon=\"pencil\" size=\"l\" alt=\"Edit filter\" />\n                      </button>\n                    </li>\n                  );\n                })}\n              </ul>\n              {filters.length > 1 && (\n                <footer class=\"ui-state\">\n                  <small class=\"insignificant\">\n                    {filters.length} filter\n                    {filters.length === 1 ? '' : 's'}\n                  </small>\n                </footer>\n              )}\n            </>\n          ) : uiState === 'loading' ? (\n            <p class=\"ui-state\">\n              <Loader />\n            </p>\n          ) : uiState === 'error' ? (\n            <p class=\"ui-state\">Unable to load filters.</p>\n          ) : (\n            <p class=\"ui-state\">No filters yet.</p>\n          )}\n        </main>\n      </div>\n      {!!showFiltersAddEditModal && (\n        <Modal\n          title=\"Add filter\"\n          onClose={() => {\n            setShowFiltersAddEditModal(false);\n          }}\n        >\n          <FiltersAddEdit\n            filter={showFiltersAddEditModal?.filter}\n            onClose={(result) => {\n              if (result.state === 'success') {\n                reload();\n              }\n              setShowFiltersAddEditModal(false);\n            }}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nlet _id = 1;\nconst incID = () => _id++;\nfunction FiltersAddEdit({ filter, onClose }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const editMode = !!filter;\n  const { context, expiresAt, id, keywords, title, filterAction } =\n    filter || {};\n  const hasExpiry = !!expiresAt;\n  const expiresAtDate = hasExpiry && new Date(expiresAt);\n  const [editKeywords, setEditKeywords] = useState(keywords || []);\n  const keywordsRef = useRef();\n\n  // Hacky way of handling removed keywords for both existing and new ones\n  const [removedKeywordIDs, setRemovedKeywordIDs] = useState([]);\n  const [removedKeyword_IDs, setRemovedKeyword_IDs] = useState([]);\n\n  const filteredEditKeywords = editKeywords.filter(\n    (k) =>\n      !removedKeywordIDs.includes(k.id) && !removedKeyword_IDs.includes(k._id),\n  );\n\n  return (\n    <div class=\"sheet\" id=\"filters-add-edit-modal\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>{editMode ? 'Edit filter' : 'New filter'}</h2>\n      </header>\n      <main>\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const title = formData.get('title');\n            const keywordIDs = formData.getAll('keyword_attributes[][id]');\n            const keywordKeywords = formData.getAll(\n              'keyword_attributes[][keyword]',\n            );\n            // const keywordWholeWords = formData.getAll(\n            //   'keyword_attributes[][whole_word]',\n            // );\n            // Not using getAll because it skips the empty checkboxes\n            const keywordWholeWords = [\n              ...keywordsRef.current.querySelectorAll(\n                'input[name=\"keyword_attributes[][whole_word]\"]',\n              ),\n            ].map((i) => i.checked);\n            const keywordsAttributes = keywordKeywords.map((k, i) => ({\n              id: keywordIDs[i] || undefined,\n              keyword: k,\n              wholeWord: keywordWholeWords[i],\n            }));\n            // if (editMode && keywords?.length) {\n            //   // Find which one got deleted and add to keywordsAttributes\n            //   keywords.forEach((k) => {\n            //     if (!keywordsAttributes.find((ka) => ka.id === k.id)) {\n            //       keywordsAttributes.push({\n            //         ...k,\n            //         _destroy: true,\n            //       });\n            //     }\n            //   });\n            // }\n            if (editMode && removedKeywordIDs?.length) {\n              removedKeywordIDs.forEach((id) => {\n                keywordsAttributes.push({\n                  id,\n                  _destroy: true,\n                });\n              });\n            }\n            const context = formData.getAll('context');\n            let expiresIn = formData.get('expires_in');\n            const filterAction = formData.get('filter_action');\n            console.log({\n              title,\n              keywordIDs,\n              keywords: keywordKeywords,\n              wholeWords: keywordWholeWords,\n              keywordsAttributes,\n              context,\n              expiresIn,\n              filterAction,\n            });\n\n            // Required fields\n            if (!title || !context?.length) {\n              return;\n            }\n\n            setUIState('loading');\n\n            (async () => {\n              try {\n                let filterResult;\n\n                if (editMode) {\n                  if (expiresIn === '' || expiresIn === null) {\n                    // No value\n                    // Preserve existing expiry if not specified\n                    // Seconds from now to expiresAtDate\n                    // Other clients don't do this\n                    expiresIn = Math.floor((expiresAtDate - new Date()) / 1000);\n                  } else if (expiresIn === '0' || expiresIn === 0) {\n                    // 0 = Never\n                    expiresIn = null;\n                  } else {\n                    expiresIn = +expiresIn;\n                  }\n                  filterResult = await masto.v2.filters.$select(id).update({\n                    title,\n                    context,\n                    expiresIn,\n                    keywordsAttributes,\n                    filterAction,\n                  });\n                } else {\n                  expiresIn = +expiresIn || null;\n                  filterResult = await masto.v2.filters.create({\n                    title,\n                    context,\n                    expiresIn,\n                    keywordsAttributes,\n                    filterAction,\n                  });\n                }\n                console.log({ filterResult });\n                setUIState('default');\n                onClose?.({\n                  state: 'success',\n                  filter: filterResult,\n                });\n              } catch (error) {\n                console.error(error);\n                setUIState('error');\n                alert(\n                  editMode\n                    ? 'Unable to edit filter'\n                    : 'Unable to create filter',\n                );\n              }\n            })();\n          }}\n        >\n          <div class=\"filter-form-row\">\n            <label>\n              <b>Title</b>\n              <input\n                type=\"text\"\n                name=\"title\"\n                defaultValue={title}\n                disabled={uiState === 'loading'}\n                dir=\"auto\"\n                required\n              />\n            </label>\n          </div>\n          <div class=\"filter-form-keywords\" ref={keywordsRef}>\n            {filteredEditKeywords.length ? (\n              <ul class=\"filter-keywords\">\n                {filteredEditKeywords.map((k) => {\n                  const { id, keyword, wholeWord, _id } = k;\n                  return (\n                    <li key={`${id}-${_id}`}>\n                      <input\n                        type=\"hidden\"\n                        name=\"keyword_attributes[][id]\"\n                        value={id}\n                      />\n                      <input\n                        name=\"keyword_attributes[][keyword]\"\n                        type=\"text\"\n                        defaultValue={keyword}\n                        disabled={uiState === 'loading'}\n                        required\n                      />\n                      <div class=\"filter-keyword-actions\">\n                        <label>\n                          <input\n                            name=\"keyword_attributes[][whole_word]\"\n                            type=\"checkbox\"\n                            value={id} // Hacky way to map checkbox boolean to the keyword id\n                            defaultChecked={wholeWord}\n                            disabled={uiState === 'loading'}\n                          />{' '}\n                          Whole word\n                        </label>\n                        <button\n                          type=\"button\"\n                          class=\"light danger small\"\n                          disabled={uiState === 'loading'}\n                          onClick={() => {\n                            if (id) {\n                              removedKeywordIDs.push(id);\n                              setRemovedKeywordIDs([...removedKeywordIDs]);\n                            } else if (_id) {\n                              removedKeyword_IDs.push(_id);\n                              setRemovedKeyword_IDs([...removedKeyword_IDs]);\n                            }\n                          }}\n                        >\n                          <Icon icon=\"x\" />\n                        </button>\n                      </div>\n                    </li>\n                  );\n                })}\n              </ul>\n            ) : (\n              <div class=\"filter-keywords\">\n                <div class=\"insignificant\">No keywords. Add one.</div>\n              </div>\n            )}\n            <footer class=\"filter-keywords-footer\">\n              <button\n                type=\"button\"\n                class=\"light\"\n                onClick={() => {\n                  setEditKeywords([\n                    ...editKeywords,\n                    {\n                      _id: incID(),\n                      keyword: '',\n                      wholeWord: true,\n                    },\n                  ]);\n                  setTimeout(() => {\n                    // Focus last input\n                    const fields =\n                      keywordsRef.current.querySelectorAll(\n                        'input[type=\"text\"]',\n                      );\n                    fields[fields.length - 1]?.focus?.();\n                  }, 10);\n                }}\n              >\n                Add keyword\n              </button>{' '}\n              {filteredEditKeywords?.length > 1 && (\n                <small class=\"insignificant\">\n                  {filteredEditKeywords.length} keyword\n                  {filteredEditKeywords.length === 1 ? '' : 's'}\n                </small>\n              )}\n            </footer>\n          </div>\n          <div class=\"filter-form-cols\">\n            <div class=\"filter-form-col\">\n              <div>\n                <b>Filter from…</b>\n              </div>\n              {FILTER_CONTEXT.map((ctx) => (\n                <div>\n                  <label\n                    class={\n                      FILTER_CONTEXT_UNIMPLEMENTED.includes(ctx)\n                        ? 'insignificant'\n                        : ''\n                    }\n                  >\n                    <input\n                      type=\"checkbox\"\n                      name=\"context\"\n                      value={ctx}\n                      defaultChecked={!!context ? context.includes(ctx) : true}\n                      disabled={uiState === 'loading'}\n                    />{' '}\n                    {FILTER_CONTEXT_LABELS[ctx]}\n                    {FILTER_CONTEXT_UNIMPLEMENTED.includes(ctx) ? '*' : ''}\n                  </label>{' '}\n                </div>\n              ))}\n              <p>\n                <small class=\"insignificant\">* Not implemented yet</small>\n              </p>\n            </div>\n            <div class=\"filter-form-col\">\n              {editMode && (\n                <>\n                  Status:{' '}\n                  <b>\n                    <ExpiryStatus expiresAt={expiresAt} showNeverExpires />\n                  </b>\n                </>\n              )}\n              <div>\n                <label for=\"filters-expires_in\">\n                  {editMode ? 'Change expiry' : 'Expiry'}\n                </label>\n                <select\n                  id=\"filters-expires_in\"\n                  name=\"expires_in\"\n                  disabled={uiState === 'loading'}\n                  defaultValue={editMode ? undefined : 0}\n                >\n                  {editMode && <option></option>}\n                  {EXPIRY_DURATIONS.map((v) => (\n                    <option value={v}>{EXPIRY_DURATIONS_LABELS[v]}</option>\n                  ))}\n                </select>\n              </div>\n              <p>\n                Filtered post will be…\n                <br />\n                <label class=\"ib\">\n                  <input\n                    type=\"radio\"\n                    name=\"filter_action\"\n                    value=\"warn\"\n                    defaultChecked={filterAction === 'warn' || !editMode}\n                    disabled={uiState === 'loading'}\n                  />{' '}\n                  minimized\n                </label>{' '}\n                <label class=\"ib\">\n                  <input\n                    type=\"radio\"\n                    name=\"filter_action\"\n                    value=\"hide\"\n                    defaultChecked={filterAction === 'hide'}\n                    disabled={uiState === 'loading'}\n                  />{' '}\n                  hidden\n                </label>\n              </p>\n            </div>\n          </div>\n          <footer class=\"filter-form-footer\">\n            <span>\n              <button type=\"submit\" disabled={uiState === 'loading'}>\n                {editMode ? 'Save' : 'Create'}\n              </button>{' '}\n              <Loader abrupt hidden={uiState !== 'loading'} />\n            </span>\n            {editMode && (\n              <MenuConfirm\n                disabled={uiState === 'loading'}\n                align=\"end\"\n                menuItemClassName=\"danger\"\n                confirmLabel=\"Delete this filter?\"\n                onClick={() => {\n                  setUIState('loading');\n                  (async () => {\n                    try {\n                      await masto.v2.filters.$select(id).remove();\n                      setUIState('default');\n                      onClose?.({\n                        state: 'success',\n                      });\n                    } catch (e) {\n                      console.error(e);\n                      setUIState('error');\n                      alert('Unable to delete filter.');\n                    }\n                  })();\n                }}\n              >\n                <button\n                  type=\"button\"\n                  class=\"light danger\"\n                  onClick={() => {}}\n                  disabled={uiState === 'loading'}\n                >\n                  Delete…\n                </button>\n              </MenuConfirm>\n            )}\n          </footer>\n        </form>\n      </main>\n    </div>\n  );\n}\n\nfunction ExpiryStatus({ expiresAt, showNeverExpires }) {\n  const hasExpiry = !!expiresAt;\n  const expiresAtDate = hasExpiry && new Date(expiresAt);\n  const expired = hasExpiry && expiresAtDate <= new Date();\n\n  // If less than a minute left, re-render interval every second, else every minute\n  const [_, rerender] = useReducer((c) => c + 1, 0);\n  useInterval(rerender, expired || 30_000);\n\n  return expired ? (\n    'Expired'\n  ) : hasExpiry ? (\n    <>\n      Expiring <RelativeTime datetime={expiresAtDate} />\n    </>\n  ) : (\n    showNeverExpires && 'Never expires'\n  );\n}\n\nexport default Filters;\n","import { useEffect, useState } from 'preact/hooks';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport NavMenu from '../components/nav-menu';\nimport { api } from '../utils/api';\nimport { fetchFollowedTags } from '../utils/followed-tags';\nimport useTitle from '../utils/useTitle';\n\nfunction FollowedHashtags() {\n  const { masto, instance } = api();\n  useTitle(`Followed Hashtags`, `/fh`);\n  const [uiState, setUIState] = useState('default');\n\n  const [followedHashtags, setFollowedHashtags] = useState([]);\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const tags = await fetchFollowedTags();\n        setFollowedHashtags(tags);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, []);\n\n  return (\n    <div id=\"followed-hashtags-page\" class=\"deck-container\" tabIndex=\"-1\">\n      <div class=\"timeline-deck deck\">\n        <header>\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n              <Link to=\"/\" class=\"button plain\">\n                <Icon icon=\"home\" size=\"l\" />\n              </Link>\n            </div>\n            <h1>Followed Hashtags</h1>\n            <div class=\"header-side\" />\n          </div>\n        </header>\n        <main>\n          {followedHashtags.length > 0 ? (\n            <>\n              <ul class=\"link-list\">\n                {followedHashtags.map((tag) => (\n                  <li>\n                    <Link\n                      to={\n                        instance\n                          ? `/${instance}/t/${tag.name}`\n                          : `/t/${tag.name}`\n                      }\n                    >\n                      <Icon icon=\"hashtag\" /> <span>{tag.name}</span>\n                    </Link>\n                  </li>\n                ))}\n              </ul>\n              {followedHashtags.length > 1 && (\n                <footer class=\"ui-state\">\n                  <small class=\"insignificant\">\n                    {followedHashtags.length} hashtag\n                    {followedHashtags.length === 1 ? '' : 's'}\n                  </small>\n                </footer>\n              )}\n            </>\n          ) : uiState === 'loading' ? (\n            <p class=\"ui-state\">\n              <Loader abrupt />\n            </p>\n          ) : uiState === 'error' ? (\n            <p class=\"ui-state\">Unable to load followed hashtags.</p>\n          ) : (\n            <p class=\"ui-state\">No hashtags followed yet.</p>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default FollowedHashtags;\n","import { useEffect, useRef } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { filteredItems } from '../utils/filters';\nimport states from '../utils/states';\nimport { getStatus, saveStatus } from '../utils/states';\nimport {\n  assignFollowedTags,\n  clearFollowedTagsState,\n  dedupeBoosts,\n} from '../utils/timeline-utils';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Following({ title, path, id, ...props }) {\n  useTitle(title || 'Following', path || '/following');\n  const { masto, streaming, instance } = api();\n  const snapStates = useSnapshot(states);\n  const homeIterator = useRef();\n  const latestItem = useRef();\n\n  console.debug('RENDER Following', title, id);\n\n  async function fetchHome(firstLoad) {\n    if (firstLoad || !homeIterator.current) {\n      homeIterator.current = masto.v1.timelines.home.list({ limit: LIMIT });\n    }\n    const results = await homeIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      let latestItemChanged = false;\n      if (firstLoad) {\n        if (value[0].id !== latestItem.current) {\n          latestItemChanged = true;\n        }\n        latestItem.current = value[0].id;\n        console.log('First load', latestItem.current);\n      }\n\n      // value = filteredItems(value, 'home');\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n      value = dedupeBoosts(value, instance);\n      if (firstLoad && latestItemChanged) clearFollowedTagsState();\n      assignFollowedTags(value, instance);\n\n      // ENFORCE sort by datetime (Latest first)\n      value.sort((a, b) => {\n        const aDate = new Date(a.createdAt);\n        const bDate = new Date(b.createdAt);\n        return bDate - aDate;\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines.home\n        .list({\n          limit: 5,\n          since_id: latestItem.current,\n        })\n        .next();\n      let { value } = results;\n      console.log('checkForUpdates', latestItem.current, value);\n      if (value?.length) {\n        latestItem.current = value[0].id;\n        value = dedupeBoosts(value, instance);\n        value = filteredItems(value, 'home');\n        if (value.some((item) => !item.reblog)) {\n          return true;\n        }\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  useEffect(() => {\n    let sub;\n    (async () => {\n      if (streaming) {\n        sub = streaming.user.subscribe();\n        console.log('🎏 Streaming user', sub);\n        for await (const entry of sub) {\n          if (!sub) break;\n          if (entry.event === 'status.update') {\n            const status = entry.payload;\n            console.log(`🔄 Status ${status.id} updated`);\n            saveStatus(status, instance);\n          } else if (entry.event === 'delete') {\n            const statusID = entry.payload;\n            console.log(`❌ Status ${statusID} deleted`);\n            // delete states.statuses[statusID];\n            const s = getStatus(statusID, instance);\n            if (s) s._deleted = true;\n          }\n        }\n        console.log('💥 Streaming user loop STOPPED');\n      }\n    })();\n    return () => {\n      sub?.unsubscribe?.();\n      sub = null;\n    };\n  }, [streaming]);\n\n  return (\n    <Timeline\n      title={title || 'Following'}\n      id={id || 'following'}\n      emptyText=\"Nothing to see here.\"\n      errorText=\"Unable to load posts.\"\n      instance={instance}\n      fetchItems={fetchHome}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      {...props}\n      // allowFilters\n      filterContext=\"home\"\n      showFollowedTags\n      showReplyParent\n    />\n  );\n}\n\nexport default Following;\n","import {\n  FocusableItem,\n  MenuDivider,\n  MenuGroup,\n  MenuHeader,\n  MenuItem,\n} from '@szhsin/react-menu';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useNavigate, useParams, useSearchParams } from 'react-router-dom';\n\nimport Icon from '../components/icon';\nimport Menu2 from '../components/menu2';\nimport MenuConfirm from '../components/menu-confirm';\nimport { SHORTCUTS_LIMIT } from '../components/shortcuts-settings';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { filteredItems } from '../utils/filters';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\n// Limit is 4 per \"mode\"\n// https://github.com/mastodon/mastodon/issues/15194\n// Hard-coded https://github.com/mastodon/mastodon/blob/19614ba2477f3d12468f5ec251ce1cc5f8c6210c/app/models/tag_feed.rb#L4\nconst TAGS_LIMIT_PER_MODE = 4;\nconst TOTAL_TAGS_LIMIT = TAGS_LIMIT_PER_MODE + 1;\n\nfunction Hashtags({ media: mediaView, columnMode, ...props }) {\n  // const navigate = useNavigate();\n  let { hashtag, ...params } = columnMode ? {} : useParams();\n  if (props.hashtag) hashtag = props.hashtag;\n  let hashtags = hashtag.trim().split(/[\\s+]+/);\n  hashtags.sort();\n  hashtag = hashtags[0];\n  const [searchParams, setSearchParams] = useSearchParams();\n  const media = mediaView || !!searchParams.get('media');\n  const linkParams = media ? '?media=1' : '';\n\n  const { masto, instance, authenticated } = api({\n    instance: props?.instance || params.instance,\n  });\n  const {\n    masto: currentMasto,\n    instance: currentInstance,\n    authenticated: currentAuthenticated,\n  } = api();\n  const hashtagTitle = hashtags.map((t) => `#${t}`).join(' ');\n  const hashtagPostTitle = media ? ` (Media only)` : '';\n  const title = instance\n    ? `${hashtagTitle}${hashtagPostTitle} on ${instance}`\n    : `${hashtagTitle}${hashtagPostTitle}`;\n  useTitle(title, `/:instance?/t/:hashtag`);\n  const latestItem = useRef();\n\n  // const hashtagsIterator = useRef();\n  const maxID = useRef(undefined);\n  async function fetchHashtags(firstLoad) {\n    // if (firstLoad || !hashtagsIterator.current) {\n    //   hashtagsIterator.current = masto.v1.timelines.tag.$select(hashtag).list({\n    //     limit: LIMIT,\n    //     any: hashtags.slice(1),\n    //   });\n    // }\n    // const results = await hashtagsIterator.current.next();\n\n    // NOTE: Temporary fix for listHashtag not persisting `any` in subsequent calls.\n    const results = await masto.v1.timelines.tag\n      .$select(hashtag)\n      .list({\n        limit: LIMIT,\n        any: hashtags.slice(1),\n        maxId: firstLoad ? undefined : maxID.current,\n        onlyMedia: media,\n      })\n      .next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      // value = filteredItems(value, 'public');\n      value.forEach((item) => {\n        saveStatus(item, instance, {\n          skipThreading: media, // If media view, no need to form threads\n        });\n      });\n\n      maxID.current = value[value.length - 1].id;\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines.tag\n        .$select(hashtag)\n        .list({\n          limit: 1,\n          any: hashtags.slice(1),\n          since_id: latestItem.current,\n          onlyMedia: media,\n        })\n        .next();\n      let { value } = results;\n      value = filteredItems(value, 'public');\n      if (value?.length) {\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  const [followUIState, setFollowUIState] = useState('default');\n  const [info, setInfo] = useState();\n  // Get hashtag info\n  useEffect(() => {\n    (async () => {\n      try {\n        const info = await masto.v1.tags.$select(hashtag).fetch();\n        console.log(info);\n        setInfo(info);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [hashtag]);\n\n  const reachLimit = hashtags.length >= TOTAL_TAGS_LIMIT;\n\n  return (\n    <Timeline\n      key={instance + hashtagTitle}\n      title={title}\n      titleComponent={\n        !!instance && (\n          <h1 class=\"header-double-lines\">\n            <b>{hashtagTitle}</b>\n            <div>{instance}</div>\n          </h1>\n        )\n      }\n      id=\"hashtag\"\n      instance={instance}\n      emptyText=\"No one has posted anything with this tag yet.\"\n      errorText=\"Unable to load posts with this tag\"\n      fetchItems={fetchHashtags}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      view={media ? 'media' : undefined}\n      refresh={media}\n      // allowFilters\n      filterContext=\"public\"\n      headerEnd={\n        <Menu2\n          portal\n          setDownOverflow\n          overflow=\"auto\"\n          // viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          {!!info && hashtags.length === 1 && (\n            <>\n              <MenuConfirm\n                subMenu\n                confirm={info.following}\n                confirmLabel={`Unfollow #${hashtag}?`}\n                disabled={followUIState === 'loading' || !authenticated}\n                onClick={() => {\n                  setFollowUIState('loading');\n                  if (info.following) {\n                    // const yes = confirm(`Unfollow #${hashtag}?`);\n                    // if (!yes) {\n                    //   setFollowUIState('default');\n                    //   return;\n                    // }\n                    masto.v1.tags\n                      .$select(hashtag)\n                      .unfollow()\n                      .then(() => {\n                        setInfo({ ...info, following: false });\n                        showToast(`Unfollowed #${hashtag}`);\n                      })\n                      .catch((e) => {\n                        alert(e);\n                        console.error(e);\n                      })\n                      .finally(() => {\n                        setFollowUIState('default');\n                      });\n                  } else {\n                    masto.v1.tags\n                      .$select(hashtag)\n                      .follow()\n                      .then(() => {\n                        setInfo({ ...info, following: true });\n                        showToast(`Followed #${hashtag}`);\n                      })\n                      .catch((e) => {\n                        alert(e);\n                        console.error(e);\n                      })\n                      .finally(() => {\n                        setFollowUIState('default');\n                      });\n                  }\n                }}\n              >\n                {info.following ? (\n                  <>\n                    <Icon icon=\"check-circle\" /> <span>Following…</span>\n                  </>\n                ) : (\n                  <>\n                    <Icon icon=\"plus\" /> <span>Follow</span>\n                  </>\n                )}\n              </MenuConfirm>\n              <MenuDivider />\n            </>\n          )}\n          <MenuHeader className=\"plain\">Filters</MenuHeader>\n          <MenuItem\n            type=\"checkbox\"\n            checked={!!media}\n            onClick={() => {\n              if (media) {\n                searchParams.delete('media');\n              } else {\n                searchParams.set('media', '1');\n              }\n              setSearchParams(searchParams);\n            }}\n          >\n            <Icon icon=\"check-circle\" />{' '}\n            <span class=\"menu-grow\">Media only</span>\n          </MenuItem>\n          <MenuDivider />\n          <FocusableItem className=\"menu-field\" disabled={reachLimit}>\n            {({ ref }) => (\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  const newHashtag = e.target[0].value?.trim?.();\n                  // Use includes but need to be case insensitive\n                  if (\n                    newHashtag &&\n                    !hashtags.some(\n                      (t) => t.toLowerCase() === newHashtag.toLowerCase(),\n                    )\n                  ) {\n                    hashtags.push(newHashtag);\n                    hashtags.sort();\n                    // navigate(\n                    //   instance\n                    //     ? `/${instance}/t/${hashtags.join('+')}`\n                    //     : `/t/${hashtags.join('+')}`,\n                    // );\n                    location.hash = instance\n                      ? `/${instance}/t/${hashtags.join('+')}`\n                      : `/t/${hashtags.join('+')}${linkParams}`;\n                  }\n                }}\n              >\n                <Icon icon=\"hashtag\" />\n                <input\n                  ref={ref}\n                  type=\"text\"\n                  placeholder={\n                    reachLimit ? `Max ${TOTAL_TAGS_LIMIT} tags` : 'Add hashtag'\n                  }\n                  required\n                  autocorrect=\"off\"\n                  autocapitalize=\"off\"\n                  spellCheck={false}\n                  // no spaces, no hashtags\n                  pattern=\"[^#][^\\s#]+[^#]\"\n                  disabled={reachLimit}\n                />\n              </form>\n            )}\n          </FocusableItem>\n          <MenuGroup takeOverflow>\n            {hashtags.map((t, i) => (\n              <MenuItem\n                key={t}\n                disabled={hashtags.length === 1}\n                onClick={(e) => {\n                  hashtags.splice(i, 1);\n                  hashtags.sort();\n                  // navigate(\n                  //   instance\n                  //     ? `/${instance}/t/${hashtags.join('+')}`\n                  //     : `/t/${hashtags.join('+')}`,\n                  // );\n                  location.hash = instance\n                    ? `/${instance}/t/${hashtags.join('+')}${linkParams}`\n                    : `/t/${hashtags.join('+')}${linkParams}`;\n                }}\n              >\n                <Icon icon=\"x\" alt=\"Remove hashtag\" class=\"danger-icon\" />\n                <span>\n                  <span class=\"more-insignificant\">#</span>\n                  {t}\n                </span>\n              </MenuItem>\n            ))}\n          </MenuGroup>\n          <MenuDivider />\n          <MenuItem\n            disabled={!currentAuthenticated}\n            onClick={() => {\n              if (states.shortcuts.length >= SHORTCUTS_LIMIT) {\n                alert(\n                  `Max ${SHORTCUTS_LIMIT} shortcuts reached. Unable to add shortcut.`,\n                );\n                return;\n              }\n              const shortcut = {\n                type: 'hashtag',\n                hashtag: hashtags.join(' '),\n                instance,\n                media: media ? 'on' : undefined,\n              };\n              // Check if already exists\n              const exists = states.shortcuts.some(\n                (s) =>\n                  s.type === shortcut.type &&\n                  s.hashtag\n                    .split(/[\\s+]+/)\n                    .sort()\n                    .join(' ') ===\n                    shortcut.hashtag\n                      .split(/[\\s+]+/)\n                      .sort()\n                      .join(' ') &&\n                  (s.instance ? s.instance === shortcut.instance : true) &&\n                  (s.media ? !!s.media === !!shortcut.media : true),\n              );\n              if (exists) {\n                alert('This shortcut already exists');\n              } else {\n                states.shortcuts.push(shortcut);\n                showToast(`Hashtag shortcut added`);\n              }\n            }}\n          >\n            <Icon icon=\"shortcut\" /> <span>Add to Shorcuts</span>\n          </MenuItem>\n          <MenuItem\n            onClick={() => {\n              let newInstance = prompt(\n                'Enter a new instance e.g. \"mastodon.social\"',\n              );\n              if (!/\\./.test(newInstance)) {\n                if (newInstance) alert('Invalid instance');\n                return;\n              }\n              if (newInstance) {\n                newInstance = newInstance.toLowerCase().trim();\n                // navigate(`/${newInstance}/t/${hashtags.join('+')}`);\n                location.hash = `/${newInstance}/t/${hashtags.join(\n                  '+',\n                )}${linkParams}`;\n              }\n            }}\n          >\n            <Icon icon=\"bus\" /> <span>Go to another instance…</span>\n          </MenuItem>\n          {currentInstance !== instance && (\n            <MenuItem\n              onClick={() => {\n                location.hash = `/${currentInstance}/t/${hashtags.join(\n                  '+',\n                )}${linkParams}`;\n              }}\n            >\n              <Icon icon=\"bus\" />{' '}\n              <small class=\"menu-double-lines\">\n                Go to my instance (<b>{currentInstance}</b>)\n              </small>\n            </MenuItem>\n          )}\n        </Menu2>\n      }\n    />\n  );\n}\n\nexport default Hashtags;\n","import './lists.css';\n\nimport { Menu, MenuDivider, MenuItem } from '@szhsin/react-menu';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { InView } from 'react-intersection-observer';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport AccountBlock from '../components/account-block';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport ListAddEdit from '../components/list-add-edit';\nimport Menu2 from '../components/menu2';\nimport MenuConfirm from '../components/menu-confirm';\nimport MenuLink from '../components/menu-link';\nimport Modal from '../components/modal';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { filteredItems } from '../utils/filters';\nimport { getList, getLists } from '../utils/lists';\nimport states, { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction List(props) {\n  const snapStates = useSnapshot(states);\n  const { masto, instance } = api();\n  const id = props?.id || useParams()?.id;\n  // const navigate = useNavigate();\n  const latestItem = useRef();\n  // const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n\n  const listIterator = useRef();\n  async function fetchList(firstLoad) {\n    if (firstLoad || !listIterator.current) {\n      listIterator.current = masto.v1.timelines.list.$select(id).list({\n        limit: LIMIT,\n      });\n    }\n    const results = await listIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      // value = filteredItems(value, 'home');\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines.list.$select(id).list({\n        limit: 1,\n        since_id: latestItem.current,\n      });\n      let { value } = results;\n      value = filteredItems(value, 'home');\n      if (value?.length) {\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  const [lists, setLists] = useState([]);\n  useEffect(() => {\n    getLists().then(setLists);\n  }, []);\n\n  const [list, setList] = useState({ title: 'List' });\n  // const [title, setTitle] = useState(`List`);\n  useTitle(list.title, `/l/:id`);\n  useEffect(() => {\n    (async () => {\n      try {\n        const list = await getList(id);\n        setList(list);\n        // setTitle(list.title);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [id]);\n\n  const [showListAddEditModal, setShowListAddEditModal] = useState(false);\n  const [showManageMembersModal, setShowManageMembersModal] = useState(false);\n\n  return (\n    <>\n      <Timeline\n        key={id}\n        title={list.title}\n        id=\"list\"\n        emptyText=\"Nothing yet.\"\n        errorText=\"Unable to load posts.\"\n        instance={instance}\n        fetchItems={fetchList}\n        checkForUpdates={checkForUpdates}\n        useItemID\n        boostsCarousel={snapStates.settings.boostsCarousel}\n        // allowFilters\n        filterContext=\"home\"\n        showReplyParent\n        // refresh={reloadCount}\n        headerStart={\n          // <Link to=\"/l\" class=\"button plain\">\n          //   <Icon icon=\"list\" size=\"l\" />\n          // </Link>\n          <Menu2\n            overflow=\"auto\"\n            menuButton={\n              <button type=\"button\" class=\"plain\">\n                <Icon icon=\"list\" size=\"l\" alt=\"Lists\" />\n                <Icon icon=\"chevron-down\" size=\"s\" />\n              </button>\n            }\n          >\n            <MenuLink to=\"/l\">\n              <span>All Lists</span>\n            </MenuLink>\n            {lists?.length > 0 && (\n              <>\n                <MenuDivider />\n                {lists.map((list) => (\n                  <MenuLink key={list.id} to={`/l/${list.id}`}>\n                    <span>{list.title}</span>\n                  </MenuLink>\n                ))}\n              </>\n            )}\n          </Menu2>\n        }\n        headerEnd={\n          <Menu2\n            portal\n            setDownOverflow\n            overflow=\"auto\"\n            viewScroll=\"close\"\n            position=\"anchor\"\n            menuButton={\n              <button type=\"button\" class=\"plain\">\n                <Icon icon=\"more\" size=\"l\" />\n              </button>\n            }\n          >\n            <MenuItem\n              onClick={() =>\n                setShowListAddEditModal({\n                  list,\n                })\n              }\n            >\n              <Icon icon=\"pencil\" size=\"l\" />\n              <span>Edit</span>\n            </MenuItem>\n            <MenuItem onClick={() => setShowManageMembersModal(true)}>\n              <Icon icon=\"group\" size=\"l\" />\n              <span>Manage members</span>\n            </MenuItem>\n          </Menu2>\n        }\n      />\n      {showListAddEditModal && (\n        <Modal\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowListAddEditModal(false);\n            }\n          }}\n        >\n          <ListAddEdit\n            list={showListAddEditModal?.list}\n            onClose={(result) => {\n              if (result.state === 'success' && result.list) {\n                setList(result.list);\n                // reload();\n              } else if (result.state === 'deleted') {\n                // navigate('/l');\n                location.hash = '/l';\n              }\n              setShowListAddEditModal(false);\n            }}\n          />\n        </Modal>\n      )}\n      {showManageMembersModal && (\n        <Modal\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowManageMembersModal(false);\n            }\n          }}\n        >\n          <ListManageMembers\n            listID={id}\n            onClose={() => setShowManageMembersModal(false)}\n          />\n        </Modal>\n      )}\n    </>\n  );\n}\n\nconst MEMBERS_LIMIT = 40;\nfunction ListManageMembers({ listID, onClose }) {\n  // Show list of members with [Remove] button\n  // API only returns 40 members at a time, so this need to be paginated with infinite scroll\n  // Show [Add] button after removing a member\n  const { masto, instance } = api();\n  const [members, setMembers] = useState([]);\n  const [uiState, setUIState] = useState('default');\n  const [showMore, setShowMore] = useState(false);\n\n  const membersIterator = useRef();\n\n  async function fetchMembers(firstLoad) {\n    setShowMore(false);\n    setUIState('loading');\n    (async () => {\n      try {\n        if (firstLoad || !membersIterator.current) {\n          membersIterator.current = masto.v1.lists\n            .$select(listID)\n            .accounts.list({\n              limit: MEMBERS_LIMIT,\n            });\n        }\n        const results = await membersIterator.current.next();\n        let { done, value } = results;\n        if (value?.length) {\n          if (firstLoad) {\n            setMembers(value);\n          } else {\n            setMembers(members.concat(value));\n          }\n          setShowMore(!done);\n        } else {\n          setShowMore(false);\n        }\n        setUIState('default');\n      } catch (e) {\n        setUIState('error');\n      }\n    })();\n  }\n\n  useEffect(() => {\n    fetchMembers(true);\n  }, []);\n\n  return (\n    <div class=\"sheet\" id=\"list-manage-members-container\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Manage members</h2>\n      </header>\n      <main>\n        <ul>\n          {members.map((member) => (\n            <li key={member.id}>\n              <AccountBlock account={member} instance={instance} />\n              <RemoveAddButton account={member} listID={listID} />\n            </li>\n          ))}\n          {showMore && uiState === 'default' && (\n            <InView as=\"li\" onChange={(inView) => inView && fetchMembers()}>\n              <button type=\"button\" class=\"light block\" onClick={fetchMembers}>\n                Show more&hellip;\n              </button>\n            </InView>\n          )}\n        </ul>\n      </main>\n    </div>\n  );\n}\n\nfunction RemoveAddButton({ account, listID }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [removed, setRemoved] = useState(false);\n\n  return (\n    <MenuConfirm\n      confirm={!removed}\n      confirmLabel={<span>Remove @{account.username} from list?</span>}\n      align=\"end\"\n      menuItemClassName=\"danger\"\n      onClick={() => {\n        if (removed) {\n          setUIState('loading');\n          (async () => {\n            try {\n              await masto.v1.lists.$select(listID).accounts.create({\n                accountIds: [account.id],\n              });\n              setUIState('default');\n              setRemoved(false);\n            } catch (e) {\n              setUIState('error');\n            }\n          })();\n        } else {\n          // const yes = confirm(`Remove ${account.username} from this list?`);\n          // if (!yes) return;\n          setUIState('loading');\n\n          (async () => {\n            try {\n              await masto.v1.lists.$select(listID).accounts.remove({\n                accountIds: [account.id],\n              });\n              setUIState('default');\n              setRemoved(true);\n            } catch (e) {\n              setUIState('error');\n            }\n          })();\n        }\n      }}\n    >\n      <button\n        type=\"button\"\n        class={`light ${removed ? '' : 'danger'}`}\n        disabled={uiState === 'loading'}\n      >\n        {removed ? 'Add' : 'Remove…'}\n      </button>\n    </MenuConfirm>\n  );\n}\n\nexport default List;\n","import { useMemo, useRef, useState } from 'preact/hooks';\nimport { useSearchParams } from 'react-router-dom';\n\nimport Link from '../components/link';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\nconst emptySearchParams = new URLSearchParams();\n\nfunction Mentions({ columnMode, ...props }) {\n  const { masto, instance } = api();\n  const [searchParams] = columnMode ? [emptySearchParams] : useSearchParams();\n  const [stateType, setStateType] = useState(null);\n  const type = props?.type || searchParams.get('type') || stateType;\n  useTitle(`Mentions${type === 'private' ? ' (Private)' : ''}`, '/mentions');\n\n  const mentionsIterator = useRef();\n  const latestItem = useRef();\n\n  async function fetchMentions(firstLoad) {\n    if (firstLoad || !mentionsIterator.current) {\n      mentionsIterator.current = masto.v1.notifications.list({\n        limit: LIMIT,\n        types: ['mention'],\n      });\n    }\n    const results = await mentionsIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n        console.log('First load', latestItem.current);\n      }\n\n      value.forEach(({ status: item }) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value: value?.map((item) => item.status),\n    };\n  }\n\n  const conversationsIterator = useRef();\n  const latestConversationItem = useRef();\n  async function fetchConversations(firstLoad) {\n    if (firstLoad || !conversationsIterator.current) {\n      conversationsIterator.current = masto.v1.conversations.list({\n        limit: LIMIT,\n      });\n    }\n    const results = await conversationsIterator.current.next();\n    let { value } = results;\n    value = value?.filter((item) => item.lastStatus);\n    if (value?.length) {\n      if (firstLoad) {\n        latestConversationItem.current = value[0].lastStatus.id;\n        console.log('First load', latestConversationItem.current);\n      }\n\n      value.forEach(({ lastStatus: item }) => {\n        saveStatus(item, instance);\n      });\n    }\n    console.log('results', results);\n    return {\n      ...results,\n      value: value?.map((item) => item.lastStatus),\n    };\n  }\n\n  function fetchItems(...args) {\n    if (type === 'private') {\n      return fetchConversations(...args);\n    }\n    return fetchMentions(...args);\n  }\n\n  async function checkForUpdates() {\n    if (type === 'private') {\n      try {\n        const results = await masto.v1.conversations\n          .list({\n            limit: 1,\n            since_id: latestConversationItem.current,\n          })\n          .next();\n        let { value } = results;\n        console.log(\n          'checkForUpdates PRIVATE',\n          latestConversationItem.current,\n          value,\n        );\n        if (value?.length) {\n          latestConversationItem.current = value[0].lastStatus.id;\n          return true;\n        }\n        return false;\n      } catch (e) {\n        return false;\n      }\n    } else {\n      try {\n        const results = await masto.v1.notifications\n          .list({\n            limit: 1,\n            types: ['mention'],\n            since_id: latestItem.current,\n          })\n          .next();\n        let { value } = results;\n        console.log('checkForUpdates ALL', latestItem.current, value);\n        if (value?.length) {\n          latestItem.current = value[0].id;\n          return true;\n        }\n        return false;\n      } catch (e) {\n        return false;\n      }\n    }\n  }\n\n  const TimelineStart = useMemo(() => {\n    return (\n      <div class=\"filter-bar centered\">\n        <Link\n          to=\"/mentions\"\n          class={!type ? 'is-active' : ''}\n          onClick={(e) => {\n            if (columnMode) {\n              e.preventDefault();\n              setStateType(null);\n            }\n          }}\n        >\n          All\n        </Link>\n        <Link\n          to=\"/mentions?type=private\"\n          class={type === 'private' ? 'is-active' : ''}\n          onClick={(e) => {\n            if (columnMode) {\n              e.preventDefault();\n              setStateType('private');\n            }\n          }}\n        >\n          Private\n        </Link>\n      </div>\n    );\n  }, [type]);\n\n  return (\n    <Timeline\n      title=\"Mentions\"\n      id=\"mentions\"\n      emptyText=\"No one mentioned you :(\"\n      errorText=\"Unable to load mentions.\"\n      instance={instance}\n      fetchItems={fetchItems}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      timelineStart={TimelineStart}\n      refresh={type}\n    />\n  );\n}\n\nexport default Mentions;\n","// This is like very lame \"type-checking\" lol\nconst notificationTypeKeys = {\n  mention: ['account', 'status'],\n  status: ['account', 'status'],\n  reblog: ['account', 'status'],\n  follow: ['account'],\n  follow_request: ['account'],\n  favourite: ['account', 'status'],\n  poll: ['status'],\n  update: ['status'],\n};\nfunction fixNotifications(notifications) {\n  return notifications.filter((notification) => {\n    const { type, id, createdAt } = notification;\n    if (!type) {\n      console.warn('Notification missing type', notification);\n      return false;\n    }\n    if (!id || !createdAt) {\n      console.warn('Notification missing id or createdAt', notification);\n      // Continue processing this despite missing id or createdAt\n    }\n    const keys = notificationTypeKeys[type];\n    if (keys?.length) {\n      return keys.every((key) => !!notification[key]);\n    }\n    return true; // skip other types\n  });\n}\n\nfunction groupNotifications(notifications) {\n  // Filter out invalid notifications\n  notifications = fixNotifications(notifications);\n\n  // Create new flat list of notifications\n  // Combine sibling notifications based on type and status id\n  // Concat all notification.account into an array of _accounts\n  const notificationsMap = {};\n  const cleanNotifications = [];\n  for (let i = 0, j = 0; i < notifications.length; i++) {\n    const notification = notifications[i];\n    const { id, status, account, type, createdAt } = notification;\n    const date = createdAt ? new Date(createdAt).toLocaleDateString() : '';\n    let virtualType = type;\n    if (type === 'favourite' || type === 'reblog') {\n      virtualType = 'favourite+reblog';\n    }\n    const key = `${status?.id}-${virtualType}-${date}`;\n    const mappedNotification = notificationsMap[key];\n    if (virtualType === 'follow_request') {\n      cleanNotifications[j++] = notification;\n    } else if (mappedNotification?.account) {\n      const mappedAccount = mappedNotification._accounts.find(\n        (a) => a.id === account.id,\n      );\n      if (mappedAccount) {\n        mappedAccount._types.push(type);\n        mappedAccount._types.sort().reverse();\n        mappedNotification.id += `-${id}`;\n      } else {\n        account._types = [type];\n        mappedNotification._accounts.push(account);\n        mappedNotification.id += `-${id}`;\n      }\n    } else {\n      if (account) account._types = [type];\n      let n = (notificationsMap[key] = {\n        ...notification,\n        type: virtualType,\n        _accounts: account ? [account] : [],\n      });\n      cleanNotifications[j++] = n;\n    }\n  }\n\n  // 2nd pass to group \"favourite+reblog\"-type notifications by account if _accounts.length <= 1\n  // This means one acount has favourited and reblogged the multiple statuses\n  // The grouped notification\n  // - type: \"favourite+reblog+account\"\n  // - _statuses: [status, status, ...]\n  const notificationsMap2 = {};\n  const cleanNotifications2 = [];\n  for (let i = 0, j = 0; i < cleanNotifications.length; i++) {\n    const notification = cleanNotifications[i];\n    const { id, account, _accounts, type, createdAt } = notification;\n    const date = createdAt ? new Date(createdAt).toLocaleDateString() : '';\n    if (type === 'favourite+reblog' && account && _accounts.length === 1) {\n      const key = `${account?.id}-${type}-${date}`;\n      const mappedNotification = notificationsMap2[key];\n      if (mappedNotification) {\n        mappedNotification._statuses.push(notification.status);\n        mappedNotification.id += `-${id}`;\n      } else {\n        let n = (notificationsMap2[key] = {\n          ...notification,\n          type,\n          _statuses: [notification.status],\n        });\n        cleanNotifications2[j++] = n;\n      }\n    } else {\n      cleanNotifications2[j++] = notification;\n    }\n  }\n\n  console.log({ notifications, cleanNotifications, cleanNotifications2 });\n\n  // return cleanNotifications;\n  return cleanNotifications2;\n}\n\nexport default groupNotifications;\n","import './notifications.css';\n\nimport { Fragment } from 'preact';\nimport { memo } from 'preact/compat';\nimport { useCallback, useEffect, useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { InView } from 'react-intersection-observer';\nimport { useSearchParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\nimport { subscribeKey } from 'valtio/utils';\n\nimport AccountBlock from '../components/account-block';\nimport FollowRequestButtons from '../components/follow-request-buttons';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport Modal from '../components/modal';\nimport NavMenu from '../components/nav-menu';\nimport Notification from '../components/notification';\nimport Status from '../components/status';\nimport { api } from '../utils/api';\nimport enhanceContent from '../utils/enhance-content';\nimport groupNotifications from '../utils/group-notifications';\nimport handleContentLinks from '../utils/handle-content-links';\nimport niceDateTime from '../utils/nice-date-time';\nimport { getRegistration } from '../utils/push-notifications';\nimport shortenNumber from '../utils/shorten-number';\nimport showToast from '../utils/show-toast';\nimport states, { saveStatus } from '../utils/states';\nimport { getCurrentInstance } from '../utils/store-utils';\nimport supports from '../utils/supports';\nimport usePageVisibility from '../utils/usePageVisibility';\nimport useScroll from '../utils/useScroll';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 30; // 30 is the maximum limit :(\nconst emptySearchParams = new URLSearchParams();\n\nconst scrollIntoViewOptions = {\n  block: 'center',\n  inline: 'center',\n  behavior: 'smooth',\n};\n\nfunction Notifications({ columnMode }) {\n  useTitle('Notifications', '/notifications');\n  const { masto, instance } = api();\n  const snapStates = useSnapshot(states);\n  const [uiState, setUIState] = useState('default');\n  const [searchParams] = columnMode ? [emptySearchParams] : useSearchParams();\n  const notificationID = searchParams.get('id');\n  const notificationAccessToken = searchParams.get('access_token');\n  const [showMore, setShowMore] = useState(false);\n  const [onlyMentions, setOnlyMentions] = useState(false);\n  const scrollableRef = useRef();\n  const { nearReachEnd, scrollDirection, reachStart, nearReachStart } =\n    useScroll({\n      scrollableRef,\n    });\n  const hiddenUI = scrollDirection === 'end' && !nearReachStart;\n  const [followRequests, setFollowRequests] = useState([]);\n  const [announcements, setAnnouncements] = useState([]);\n\n  console.debug('RENDER Notifications');\n\n  const notificationsIterator = useRef();\n  async function fetchNotifications(firstLoad) {\n    if (firstLoad || !notificationsIterator.current) {\n      // Reset iterator\n      notificationsIterator.current = masto.v1.notifications.list({\n        limit: LIMIT,\n        excludeTypes: ['follow_request'],\n      });\n    }\n    const allNotifications = await notificationsIterator.current.next();\n    const notifications = allNotifications.value;\n\n    if (notifications?.length) {\n      notifications.forEach((notification) => {\n        saveStatus(notification.status, instance, {\n          skipThreading: true,\n        });\n      });\n\n      const groupedNotifications = groupNotifications(notifications);\n\n      if (firstLoad) {\n        states.notificationsLast = notifications[0];\n        states.notifications = groupedNotifications;\n\n        // Update last read marker\n        masto.v1.markers\n          .create({\n            notifications: {\n              lastReadId: notifications[0].id,\n            },\n          })\n          .catch(() => {});\n      } else {\n        states.notifications.push(...groupedNotifications);\n      }\n    }\n\n    states.notificationsShowNew = false;\n    states.notificationsLastFetchTime = Date.now();\n    return allNotifications;\n  }\n\n  async function fetchFollowRequests() {\n    // Note: no pagination here yet because this better be on a separate page. Should be rare use-case???\n    try {\n      return await masto.v1.followRequests.list({\n        limit: 80,\n      });\n    } catch (e) {\n      // Silently fail\n      return [];\n    }\n  }\n\n  const loadFollowRequests = () => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const requests = await fetchFollowRequests();\n        setFollowRequests(requests);\n        setUIState('default');\n      } catch (e) {\n        setUIState('error');\n      }\n    })();\n  };\n\n  async function fetchAnnouncements() {\n    try {\n      return await masto.v1.announcements.list();\n    } catch (e) {\n      // Silently fail\n      return [];\n    }\n  }\n\n  const supportsFilteredNotifications = supports(\n    '@mastodon/filtered-notifications',\n  );\n  const [showNotificationsSettings, setShowNotificationsSettings] =\n    useState(false);\n  const [notificationsPolicy, setNotificationsPolicy] = useState({});\n  function fetchNotificationsPolicy() {\n    return masto.v1.notifications.policy.fetch().catch(() => {});\n  }\n  function loadNotificationsPolicy() {\n    fetchNotificationsPolicy()\n      .then((policy) => {\n        console.log('✨ Notifications policy', policy);\n        setNotificationsPolicy(policy);\n      })\n      .catch(() => {});\n  }\n  const [notificationsRequests, setNotificationsRequests] = useState(null);\n  function fetchNotificationsRequest() {\n    return masto.v1.notifications.requests.list();\n  }\n\n  const loadNotifications = (firstLoad) => {\n    setShowNew(false);\n    setUIState('loading');\n    (async () => {\n      try {\n        const fetchNotificationsPromise = fetchNotifications(firstLoad);\n\n        if (firstLoad) {\n          fetchAnnouncements()\n            .then((announcements) => {\n              announcements.sort((a, b) => {\n                // Sort by updatedAt first, then createdAt\n                const aDate = new Date(a.updatedAt || a.createdAt);\n                const bDate = new Date(b.updatedAt || b.createdAt);\n                return bDate - aDate;\n              });\n              setAnnouncements(announcements);\n            })\n            .catch(() => {});\n\n          fetchFollowRequests()\n            .then((requests) => {\n              setFollowRequests(requests);\n            })\n            .catch(() => {});\n\n          if (supportsFilteredNotifications) {\n            loadNotificationsPolicy();\n          }\n        }\n\n        const { done } = await fetchNotificationsPromise;\n        setShowMore(!done);\n\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  };\n\n  useEffect(() => {\n    loadNotifications(true);\n  }, []);\n  useEffect(() => {\n    if (reachStart) {\n      loadNotifications(true);\n    }\n  }, [reachStart]);\n\n  // useEffect(() => {\n  //   if (nearReachEnd && showMore) {\n  //     loadNotifications();\n  //   }\n  // }, [nearReachEnd, showMore]);\n\n  const [showNew, setShowNew] = useState(false);\n\n  const loadUpdates = useCallback(\n    ({ disableIdleCheck = false } = {}) => {\n      if (uiState === 'loading') {\n        return;\n      }\n      console.log('✨ Load updates', {\n        autoRefresh: snapStates.settings.autoRefresh,\n        scrollTop: scrollableRef.current?.scrollTop,\n        inBackground: inBackground(),\n        disableIdleCheck,\n      });\n      if (\n        snapStates.settings.autoRefresh &&\n        scrollableRef.current?.scrollTop < 16 &&\n        (disableIdleCheck || window.__IDLE__) &&\n        !inBackground()\n      ) {\n        loadNotifications(true);\n      }\n    },\n    [snapStates.notificationsShowNew, snapStates.settings.autoRefresh, uiState],\n  );\n  // useEffect(loadUpdates, [snapStates.notificationsShowNew]);\n\n  const lastHiddenTime = useRef();\n  usePageVisibility((visible) => {\n    let unsub;\n    if (visible) {\n      const timeDiff = Date.now() - lastHiddenTime.current;\n      if (!lastHiddenTime.current || timeDiff > 1000 * 3) {\n        // 3 seconds\n        loadUpdates({\n          disableIdleCheck: true,\n        });\n      } else {\n        lastHiddenTime.current = Date.now();\n      }\n      unsub = subscribeKey(states, 'notificationsShowNew', (v) => {\n        if (uiState === 'loading') {\n          return;\n        }\n        if (v) {\n          loadUpdates();\n        }\n        setShowNew(v);\n      });\n    }\n    return () => {\n      unsub?.();\n    };\n  });\n\n  const todayDate = new Date();\n  const yesterdayDate = new Date(todayDate - 24 * 60 * 60 * 1000);\n  let currentDay = new Date();\n  const showTodayEmpty = !snapStates.notifications.some(\n    (notification) =>\n      new Date(notification.createdAt).toDateString() ===\n      todayDate.toDateString(),\n  );\n\n  const announcementsListRef = useRef();\n\n  useEffect(() => {\n    if (notificationID) {\n      states.routeNotification = {\n        id: notificationID,\n        accessToken: atob(notificationAccessToken),\n      };\n    }\n  }, [notificationID, notificationAccessToken]);\n\n  // useEffect(() => {\n  //   if (uiState === 'default') {\n  //     (async () => {\n  //       try {\n  //         const registration = await getRegistration();\n  //         if (registration?.getNotifications) {\n  //           const notifications = await registration.getNotifications();\n  //           console.log('🔔 Push notifications', notifications);\n  //           // Close all notifications?\n  //           // notifications.forEach((notification) => {\n  //           //   notification.close();\n  //           // });\n  //         }\n  //       } catch (e) {}\n  //     })();\n  //   }\n  // }, [uiState]);\n\n  const itemsSelector = '.notification';\n  const jRef = useHotkeys('j', () => {\n    const activeItem = document.activeElement.closest(itemsSelector);\n    const activeItemRect = activeItem?.getBoundingClientRect();\n    const allItems = Array.from(\n      scrollableRef.current.querySelectorAll(itemsSelector),\n    );\n    if (\n      activeItem &&\n      activeItemRect.top < scrollableRef.current.clientHeight &&\n      activeItemRect.bottom > 0\n    ) {\n      const activeItemIndex = allItems.indexOf(activeItem);\n      let nextItem = allItems[activeItemIndex + 1];\n      if (nextItem) {\n        nextItem.focus();\n        nextItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    } else {\n      const topmostItem = allItems.find((item) => {\n        const itemRect = item.getBoundingClientRect();\n        return itemRect.top >= 44 && itemRect.left >= 0;\n      });\n      if (topmostItem) {\n        topmostItem.focus();\n        topmostItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    }\n  });\n\n  const kRef = useHotkeys('k', () => {\n    // focus on previous status after active item\n    const activeItem = document.activeElement.closest(itemsSelector);\n    const activeItemRect = activeItem?.getBoundingClientRect();\n    const allItems = Array.from(\n      scrollableRef.current.querySelectorAll(itemsSelector),\n    );\n    if (\n      activeItem &&\n      activeItemRect.top < scrollableRef.current.clientHeight &&\n      activeItemRect.bottom > 0\n    ) {\n      const activeItemIndex = allItems.indexOf(activeItem);\n      let prevItem = allItems[activeItemIndex - 1];\n      if (prevItem) {\n        prevItem.focus();\n        prevItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    } else {\n      const topmostItem = allItems.find((item) => {\n        const itemRect = item.getBoundingClientRect();\n        return itemRect.top >= 44 && itemRect.left >= 0;\n      });\n      if (topmostItem) {\n        topmostItem.focus();\n        topmostItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    }\n  });\n\n  const oRef = useHotkeys(['enter', 'o'], () => {\n    const activeItem = document.activeElement.closest(itemsSelector);\n    const statusLink = activeItem?.querySelector('.status-link');\n    if (statusLink) {\n      statusLink.click();\n    }\n  });\n\n  return (\n    <div\n      id=\"notifications-page\"\n      class=\"deck-container\"\n      ref={(node) => {\n        scrollableRef.current = node;\n        jRef.current = node;\n        kRef.current = node;\n        oRef.current = node;\n      }}\n      tabIndex=\"-1\"\n    >\n      <div class={`timeline-deck deck ${onlyMentions ? 'only-mentions' : ''}`}>\n        <header\n          hidden={hiddenUI}\n          onClick={(e) => {\n            if (!e.target.closest('a, button')) {\n              scrollableRef.current?.scrollTo({ top: 0, behavior: 'smooth' });\n            }\n          }}\n          onDblClick={(e) => {\n            if (!e.target.closest('a, button')) {\n              loadNotifications(true);\n            }\n          }}\n          class={uiState === 'loading' ? 'loading' : ''}\n        >\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n              <Link to=\"/\" class=\"button plain\">\n                <Icon icon=\"home\" size=\"l\" alt=\"Home\" />\n              </Link>\n            </div>\n            <h1>Notifications</h1>\n            <div class=\"header-side\">\n              {supportsFilteredNotifications && (\n                <button\n                  type=\"button\"\n                  class=\"button plain\"\n                  onClick={() => {\n                    setShowNotificationsSettings(true);\n                  }}\n                >\n                  <Icon icon=\"settings\" size=\"l\" alt=\"Notifications settings\" />\n                </button>\n              )}\n            </div>\n          </div>\n          {showNew && uiState !== 'loading' && (\n            <button\n              class=\"updates-button shiny-pill\"\n              type=\"button\"\n              onClick={() => {\n                loadNotifications(true);\n                scrollableRef.current?.scrollTo({\n                  top: 0,\n                  behavior: 'smooth',\n                });\n              }}\n            >\n              <Icon icon=\"arrow-up\" /> New notifications\n            </button>\n          )}\n        </header>\n        {announcements.length > 0 && (\n          <div class=\"shazam-container\">\n            <div class=\"shazam-container-inner\">\n              <details class=\"announcements\">\n                <summary>\n                  <span>\n                    <Icon icon=\"announce\" class=\"announcement-icon\" size=\"l\" />{' '}\n                    <b>Announcement{announcements.length > 1 ? 's' : ''}</b>{' '}\n                    <small class=\"insignificant\">{instance}</small>\n                  </span>\n                  {announcements.length > 1 && (\n                    <span class=\"announcements-nav-buttons\">\n                      {announcements.map((announcement, index) => (\n                        <button\n                          type=\"button\"\n                          class=\"plain2 small\"\n                          onClick={() => {\n                            announcementsListRef.current?.children[\n                              index\n                            ].scrollIntoView({\n                              behavior: 'smooth',\n                              block: 'nearest',\n                            });\n                          }}\n                        >\n                          {index + 1}\n                        </button>\n                      ))}\n                    </span>\n                  )}\n                </summary>\n                <ul\n                  class={`announcements-list-${\n                    announcements.length > 1 ? 'multiple' : 'single'\n                  }`}\n                  ref={announcementsListRef}\n                >\n                  {announcements.map((announcement) => (\n                    <li>\n                      <AnnouncementBlock announcement={announcement} />\n                    </li>\n                  ))}\n                </ul>\n              </details>\n            </div>\n          </div>\n        )}\n        {followRequests.length > 0 && (\n          <div class=\"follow-requests\">\n            <h2 class=\"timeline-header\">Follow requests</h2>\n            {followRequests.length > 5 ? (\n              <details>\n                <summary>{followRequests.length} follow requests</summary>\n                <ul>\n                  {followRequests.map((account) => (\n                    <li key={account.id}>\n                      <AccountBlock account={account} />\n                      <FollowRequestButtons\n                        accountID={account.id}\n                        onChange={() => {\n                          // loadFollowRequests();\n                          // loadNotifications(true);\n                        }}\n                      />\n                    </li>\n                  ))}\n                </ul>\n              </details>\n            ) : (\n              <ul>\n                {followRequests.map((account) => (\n                  <li key={account.id}>\n                    <AccountBlock account={account} />\n                    <FollowRequestButtons\n                      accountID={account.id}\n                      onChange={() => {\n                        // loadFollowRequests();\n                        // loadNotifications(true);\n                      }}\n                    />\n                  </li>\n                ))}\n              </ul>\n            )}\n          </div>\n        )}\n        {supportsFilteredNotifications &&\n          notificationsPolicy?.summary?.pendingRequestsCount > 0 && (\n            <div class=\"shazam-container\">\n              <div class=\"shazam-container-inner\">\n                <div class=\"filtered-notifications\">\n                  <details\n                    onToggle={async (e) => {\n                      const { open } = e.target;\n                      if (open) {\n                        const requests = await fetchNotificationsRequest();\n                        setNotificationsRequests(requests);\n                        console.log({ open, requests });\n                      }\n                    }}\n                  >\n                    <summary>\n                      Filtered notifications from{' '}\n                      {notificationsPolicy.summary.pendingRequestsCount} people\n                    </summary>\n                    {!notificationsRequests ? (\n                      <p class=\"ui-state\">\n                        <Loader abrupt />\n                      </p>\n                    ) : (\n                      notificationsRequests?.length > 0 && (\n                        <ul>\n                          {notificationsRequests.map((request) => (\n                            <li key={request.id}>\n                              <div class=\"request-notifcations\">\n                                {!request.lastStatus?.id && (\n                                  <AccountBlock\n                                    useAvatarStatic\n                                    showStats\n                                    account={request.account}\n                                  />\n                                )}\n                                {request.lastStatus?.id && (\n                                  <div class=\"last-post\">\n                                    <Link\n                                      class=\"status-link\"\n                                      to={`/${instance}/s/${request.lastStatus.id}`}\n                                    >\n                                      <Status\n                                        status={request.lastStatus}\n                                        size=\"s\"\n                                        readOnly\n                                      />\n                                    </Link>\n                                  </div>\n                                )}\n                                <NotificationRequestModalButton\n                                  request={request}\n                                />\n                              </div>\n                              <NotificationRequestButtons\n                                request={request}\n                                onChange={() => {\n                                  loadNotifications(true);\n                                }}\n                              />\n                            </li>\n                          ))}\n                        </ul>\n                      )\n                    )}\n                  </details>\n                </div>\n              </div>\n            </div>\n          )}\n        <div id=\"mentions-option\">\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={onlyMentions}\n              onChange={(e) => {\n                setOnlyMentions(e.target.checked);\n              }}\n            />{' '}\n            Only mentions\n          </label>\n        </div>\n        <h2 class=\"timeline-header\">Today</h2>\n        {showTodayEmpty && !!snapStates.notifications.length && (\n          <p class=\"ui-state insignificant\">\n            {uiState === 'default' ? \"You're all caught up.\" : <>&hellip;</>}\n          </p>\n        )}\n        {snapStates.notifications.length ? (\n          <>\n            {snapStates.notifications\n              // This is leaked from Notifications popover\n              .filter((n) => n.type !== 'follow_request')\n              .map((notification) => {\n                if (onlyMentions && notification.type !== 'mention') {\n                  return null;\n                }\n                const notificationDay = new Date(notification.createdAt);\n                const differentDay =\n                  notificationDay.toDateString() !== currentDay.toDateString();\n                if (differentDay) {\n                  currentDay = notificationDay;\n                }\n                // if notificationDay is yesterday, show \"Yesterday\"\n                // if notificationDay is before yesterday, show date\n                const heading =\n                  notificationDay.toDateString() ===\n                  yesterdayDate.toDateString()\n                    ? 'Yesterday'\n                    : niceDateTime(currentDay, {\n                        hideTime: true,\n                      });\n                return (\n                  <Fragment key={notification.id}>\n                    {differentDay && <h2 class=\"timeline-header\">{heading}</h2>}\n                    <Notification\n                      instance={instance}\n                      notification={notification}\n                      key={notification.id}\n                    />\n                  </Fragment>\n                );\n              })}\n          </>\n        ) : (\n          <>\n            {uiState === 'loading' && (\n              <>\n                <ul class=\"timeline flat\">\n                  {Array.from({ length: 5 }).map((_, i) => (\n                    <li class=\"notification skeleton\">\n                      <div class=\"notification-type\">\n                        <Icon icon=\"notification\" size=\"xl\" />\n                      </div>\n                      <div class=\"notification-content\">\n                        <p>███████████ ████</p>\n                      </div>\n                    </li>\n                  ))}\n                </ul>\n              </>\n            )}\n            {uiState === 'error' && (\n              <p class=\"ui-state\">\n                Unable to load notifications\n                <br />\n                <br />\n                <button type=\"button\" onClick={() => loadNotifications(true)}>\n                  Try again\n                </button>\n              </p>\n            )}\n          </>\n        )}\n        {showMore && (\n          <InView\n            onChange={(inView) => {\n              if (inView) {\n                loadNotifications();\n              }\n            }}\n          >\n            <button\n              type=\"button\"\n              class=\"plain block\"\n              disabled={uiState === 'loading'}\n              onClick={() => loadNotifications()}\n              style={{ marginBlockEnd: '6em' }}\n            >\n              {uiState === 'loading' ? (\n                <Loader abrupt />\n              ) : (\n                <>Show more&hellip;</>\n              )}\n            </button>\n          </InView>\n        )}\n      </div>\n      {supportsFilteredNotifications && showNotificationsSettings && (\n        <Modal\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowNotificationsSettings(false);\n            }\n          }}\n        >\n          <div class=\"sheet\" id=\"notifications-settings\" tabIndex=\"-1\">\n            <button\n              type=\"button\"\n              class=\"sheet-close\"\n              onClick={() => setShowNotificationsSettings(false)}\n            >\n              <Icon icon=\"x\" />\n            </button>\n            <header>\n              <h2>Notifications settings</h2>\n            </header>\n            <main>\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  const {\n                    filterNotFollowing,\n                    filterNotFollowers,\n                    filterNewAccounts,\n                    filterPrivateMentions,\n                  } = e.target;\n                  const allFilters = {\n                    filterNotFollowing: filterNotFollowing.checked,\n                    filterNotFollowers: filterNotFollowers.checked,\n                    filterNewAccounts: filterNewAccounts.checked,\n                    filterPrivateMentions: filterPrivateMentions.checked,\n                  };\n                  setNotificationsPolicy({\n                    ...notificationsPolicy,\n                    ...allFilters,\n                  });\n                  setShowNotificationsSettings(false);\n                  (async () => {\n                    try {\n                      await masto.v1.notifications.policy.update(allFilters);\n                      showToast('Notifications settings updated');\n                    } catch (e) {\n                      console.error(e);\n                    }\n                  })();\n                }}\n              >\n                <p>Filter out notifications from people:</p>\n                <p>\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      switch\n                      defaultChecked={notificationsPolicy.filterNotFollowing}\n                      name=\"filterNotFollowing\"\n                    />{' '}\n                    You don't follow\n                  </label>\n                </p>\n                <p>\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      switch\n                      defaultChecked={notificationsPolicy.filterNotFollowers}\n                      name=\"filterNotFollowers\"\n                    />{' '}\n                    Who don't follow you\n                  </label>\n                </p>\n                <p>\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      switch\n                      defaultChecked={notificationsPolicy.filterNewAccounts}\n                      name=\"filterNewAccounts\"\n                    />{' '}\n                    With a new account\n                  </label>\n                </p>\n                <p>\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      switch\n                      defaultChecked={notificationsPolicy.filterPrivateMentions}\n                      name=\"filterPrivateMentions\"\n                    />{' '}\n                    Who unsolicitedly private mention you\n                  </label>\n                </p>\n                <p>\n                  <button type=\"submit\">Save</button>\n                </p>\n              </form>\n            </main>\n          </div>\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nfunction inBackground() {\n  return !!document.querySelector('.deck-backdrop, #modal-container > *');\n}\n\nfunction AnnouncementBlock({ announcement }) {\n  const { instance } = api();\n  const { contact } = getCurrentInstance();\n  const contactAccount = contact?.account;\n  const {\n    id,\n    content,\n    startsAt,\n    endsAt,\n    published,\n    allDay,\n    publishedAt,\n    updatedAt,\n    read,\n    mentions,\n    statuses,\n    tags,\n    emojis,\n    reactions,\n  } = announcement;\n\n  const publishedAtDate = new Date(publishedAt);\n  const publishedDateText = niceDateTime(publishedAtDate);\n  const updatedAtDate = new Date(updatedAt);\n  const updatedAtText = niceDateTime(updatedAtDate);\n\n  return (\n    <div class=\"announcement-block\">\n      <AccountBlock account={contactAccount} />\n      <div\n        class=\"announcement-content\"\n        onClick={handleContentLinks({ mentions, instance })}\n        dangerouslySetInnerHTML={{\n          __html: enhanceContent(content, {\n            emojis,\n          }),\n        }}\n      />\n      <p class=\"insignificant\">\n        <time datetime={publishedAtDate.toISOString()}>\n          {niceDateTime(publishedAtDate)}\n        </time>\n        {updatedAt && updatedAtText !== publishedDateText && (\n          <>\n            {' '}\n            &bull;{' '}\n            <span class=\"ib\">\n              Updated{' '}\n              <time datetime={updatedAtDate.toISOString()}>\n                {niceDateTime(updatedAtDate)}\n              </time>\n            </span>\n          </>\n        )}\n      </p>\n      <div class=\"announcement-reactions\" hidden>\n        {reactions.map((reaction) => {\n          const { name, count, me, staticUrl, url } = reaction;\n          return (\n            <button type=\"button\" class={`plain4 small ${me ? 'reacted' : ''}`}>\n              {url || staticUrl ? (\n                <img src={url || staticUrl} alt={name} width=\"16\" height=\"16\" />\n              ) : (\n                <span>{name}</span>\n              )}{' '}\n              <span class=\"count\">{shortenNumber(count)}</span>\n            </button>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nfunction fetchNotficationsByAccount(accountID) {\n  const { masto } = api();\n  return masto.v1.notifications.list({\n    accountID,\n  });\n}\nfunction NotificationRequestModalButton({ request }) {\n  const { instance } = api();\n  const [uiState, setUIState] = useState('loading');\n  const { account, lastStatus } = request;\n  const [showModal, setShowModal] = useState(false);\n  const [notifications, setNotifications] = useState([]);\n\n  function onClose() {\n    setShowModal(false);\n  }\n\n  useEffect(() => {\n    if (!request?.account?.id) return;\n    if (!showModal) return;\n    setUIState('loading');\n    (async () => {\n      const notifs = await fetchNotficationsByAccount(request.account.id);\n      setNotifications(notifs || []);\n      setUIState('default');\n    })();\n  }, [showModal, request?.account?.id]);\n\n  return (\n    <>\n      <button\n        type=\"button\"\n        class=\"plain4 request-notifications-account\"\n        onClick={() => {\n          setShowModal(true);\n        }}\n      >\n        <Icon icon=\"notification\" class=\"more-insignificant\" />{' '}\n        <small>View notifications from @{account.username}</small>{' '}\n        <Icon icon=\"chevron-down\" />\n      </button>\n      {showModal && (\n        <Modal\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              onClose();\n            }\n          }}\n        >\n          <div class=\"sheet\" tabIndex=\"-1\">\n            <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n              <Icon icon=\"x\" />\n            </button>\n            <header>\n              <b>Notifications from @{account.username}</b>\n            </header>\n            <main>\n              {uiState === 'loading' ? (\n                <p class=\"ui-state\">\n                  <Loader abrupt />\n                </p>\n              ) : (\n                notifications.map((notification) => (\n                  <div\n                    class=\"notification-peek\"\n                    onClick={(e) => {\n                      const { target } = e;\n                      // If button or links\n                      if (\n                        e.target.tagName === 'BUTTON' ||\n                        e.target.tagName === 'A'\n                      ) {\n                        onClose();\n                      }\n                    }}\n                  >\n                    <Notification\n                      instance={instance}\n                      notification={notification}\n                      isStatic\n                    />\n                  </div>\n                ))\n              )}\n            </main>\n          </div>\n        </Modal>\n      )}\n    </>\n  );\n}\n\nfunction NotificationRequestButtons({ request, onChange }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [requestState, setRequestState] = useState(null); // accept, dismiss\n  const hasRequestState = requestState !== null;\n\n  return (\n    <p class=\"notification-request-buttons\">\n      <button\n        type=\"button\"\n        disabled={uiState === 'loading' || hasRequestState}\n        onClick={() => {\n          setUIState('loading');\n          (async () => {\n            try {\n              await masto.v1.notifications.requests\n                .$select(request.id)\n                .accept();\n              setRequestState('accept');\n              setUIState('default');\n              onChange({\n                request,\n                state: 'accept',\n              });\n              showToast(\n                `Notifications from @${request.account.username} will not be filtered from now on.`,\n              );\n            } catch (error) {\n              setUIState('error');\n              console.error(error);\n              showToast(`Unable to accept notification request`);\n            }\n          })();\n        }}\n      >\n        Allow\n      </button>{' '}\n      <button\n        type=\"button\"\n        disabled={uiState === 'loading' || hasRequestState}\n        class=\"light danger\"\n        onClick={() => {\n          setUIState('loading');\n          (async () => {\n            try {\n              await masto.v1.notifications.requests\n                .$select(request.id)\n                .dismiss();\n              setRequestState('dismiss');\n              setUIState('default');\n              onChange({\n                request,\n                state: 'dismiss',\n              });\n              showToast(\n                `Notifications from @${request.account.username} will not show up in Filtered notifications from now on.`,\n              );\n            } catch (error) {\n              setUIState('error');\n              console.error(error);\n              showToast(`Unable to dismiss notification request`);\n            }\n          })();\n        }}\n      >\n        Dismiss\n      </button>\n      <span class=\"notification-request-states\">\n        {uiState === 'loading' ? (\n          <Loader abrupt />\n        ) : requestState === 'accept' ? (\n          <Icon\n            icon=\"check-circle\"\n            alt=\"Accepted\"\n            class=\"notification-accepted\"\n          />\n        ) : (\n          requestState === 'dismiss' && (\n            <Icon\n              icon=\"x-circle\"\n              alt=\"Dismissed\"\n              class=\"notification-dismissed\"\n            />\n          )\n        )}\n      </span>\n    </p>\n  );\n}\n\nexport default memo(Notifications);\n","import { Menu, MenuDivider, MenuItem } from '@szhsin/react-menu';\nimport { useRef } from 'preact/hooks';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport Icon from '../components/icon';\nimport Menu2 from '../components/menu2';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { filteredItems } from '../utils/filters';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Public({ local, columnMode, ...props }) {\n  const snapStates = useSnapshot(states);\n  const isLocal = !!local;\n  const params = columnMode ? {} : useParams();\n  const { masto, instance } = api({\n    instance: props?.instance || params.instance,\n  });\n  const { masto: currentMasto, instance: currentInstance } = api();\n  const title = `${isLocal ? 'Local' : 'Federated'} timeline (${instance})`;\n  useTitle(title, isLocal ? `/:instance?/p/l` : `/:instance?/p`);\n  // const navigate = useNavigate();\n  const latestItem = useRef();\n\n  const publicIterator = useRef();\n  async function fetchPublic(firstLoad) {\n    if (firstLoad || !publicIterator.current) {\n      publicIterator.current = masto.v1.timelines.public.list({\n        limit: LIMIT,\n        local: isLocal,\n      });\n    }\n    const results = await publicIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      // value = filteredItems(value, 'public');\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines.public\n        .list({\n          limit: 1,\n          local: isLocal,\n          since_id: latestItem.current,\n        })\n        .next();\n      let { value } = results;\n      value = filteredItems(value, 'public');\n      if (value?.length) {\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  return (\n    <Timeline\n      key={instance + isLocal}\n      title={title}\n      titleComponent={\n        <h1 class=\"header-double-lines\">\n          <b>{isLocal ? 'Local timeline' : 'Federated timeline'}</b>\n          <div>{instance}</div>\n        </h1>\n      }\n      id=\"public\"\n      instance={instance}\n      emptyText=\"No one has posted anything yet.\"\n      errorText=\"Unable to load posts\"\n      fetchItems={fetchPublic}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      headerStart={<></>}\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      // allowFilters\n      filterContext=\"public\"\n      headerEnd={\n        <Menu2\n          portal\n          // setDownOverflow\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          <MenuItem href={isLocal ? `/#/${instance}/p` : `/#/${instance}/p/l`}>\n            {isLocal ? (\n              <>\n                <Icon icon=\"transfer\" /> <span>Switch to Federated</span>\n              </>\n            ) : (\n              <>\n                <Icon icon=\"transfer\" /> <span>Switch to Local</span>\n              </>\n            )}\n          </MenuItem>\n          <MenuDivider />\n          <MenuItem\n            onClick={() => {\n              let newInstance = prompt(\n                'Enter a new instance e.g. \"mastodon.social\"',\n              );\n              if (!/\\./.test(newInstance)) {\n                if (newInstance) alert('Invalid instance');\n                return;\n              }\n              if (newInstance) {\n                newInstance = newInstance.toLowerCase().trim();\n                // navigate(isLocal ? `/${newInstance}/p/l` : `/${newInstance}/p`);\n                location.hash = isLocal\n                  ? `/${newInstance}/p/l`\n                  : `/${newInstance}/p`;\n              }\n            }}\n          >\n            <Icon icon=\"bus\" /> <span>Go to another instance…</span>\n          </MenuItem>\n          {currentInstance !== instance && (\n            <MenuItem\n              onClick={() => {\n                location.hash = isLocal\n                  ? `/${currentInstance}/p/l`\n                  : `/${currentInstance}/p`;\n              }}\n            >\n              <Icon icon=\"bus\" />{' '}\n              <small class=\"menu-double-lines\">\n                Go to my instance (<b>{currentInstance}</b>)\n              </small>\n            </MenuItem>\n          )}\n        </Menu2>\n      }\n    />\n  );\n}\n\nexport default Public;\n","import './search.css';\n\nimport { useAutoAnimate } from '@formkit/auto-animate/preact';\nimport { useEffect, useLayoutEffect, useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { InView } from 'react-intersection-observer';\nimport { useParams, useSearchParams } from 'react-router-dom';\n\nimport AccountBlock from '../components/account-block';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport NavMenu from '../components/nav-menu';\nimport SearchForm from '../components/search-form';\nimport Status from '../components/status';\nimport { api } from '../utils/api';\nimport { fetchRelationships } from '../utils/relationships';\nimport shortenNumber from '../utils/shorten-number';\nimport usePageVisibility from '../utils/usePageVisibility';\nimport useTitle from '../utils/useTitle';\n\nconst SHORT_LIMIT = 5;\nconst LIMIT = 40;\nconst emptySearchParams = new URLSearchParams();\n\nfunction Search({ columnMode, ...props }) {\n  const params = columnMode ? {} : useParams();\n  const { masto, instance, authenticated } = api({\n    instance: params.instance,\n  });\n  const [uiState, setUIState] = useState('default');\n  const [searchParams] = columnMode ? [emptySearchParams] : useSearchParams();\n  const searchFormRef = useRef();\n  const q = props?.query || searchParams.get('q');\n  const type = columnMode\n    ? 'statuses'\n    : props?.type || searchParams.get('type');\n  useTitle(\n    q\n      ? `Search: ${q}${\n          type\n            ? ` (${\n                {\n                  statuses: 'Posts',\n                  accounts: 'Accounts',\n                  hashtags: 'Hashtags',\n                }[type]\n              })`\n            : ''\n        }`\n      : 'Search',\n    `/search`,\n  );\n\n  const [showMore, setShowMore] = useState(false);\n  const offsetRef = useRef(0);\n  useEffect(() => {\n    offsetRef.current = 0;\n  }, [q, type]);\n\n  const scrollableRef = useRef();\n  useLayoutEffect(() => {\n    scrollableRef.current?.scrollTo?.(0, 0);\n  }, [q, type]);\n\n  const [statusResults, setStatusResults] = useState([]);\n  const [accountResults, setAccountResults] = useState([]);\n  const [hashtagResults, setHashtagResults] = useState([]);\n  useEffect(() => {\n    setStatusResults([]);\n    setAccountResults([]);\n    setHashtagResults([]);\n  }, [q]);\n  const setTypeResultsFunc = {\n    statuses: setStatusResults,\n    accounts: setAccountResults,\n    hashtags: setHashtagResults,\n  };\n\n  const [relationshipsMap, setRelationshipsMap] = useState({});\n  const loadRelationships = async (accounts) => {\n    if (!accounts?.length) return;\n    const relationships = await fetchRelationships(accounts, relationshipsMap);\n    if (relationships) {\n      setRelationshipsMap({\n        ...relationshipsMap,\n        ...relationships,\n      });\n    }\n  };\n\n  function loadResults(firstLoad) {\n    if (firstLoad) {\n      offsetRef.current = 0;\n    }\n\n    if (!firstLoad && !authenticated) {\n      // Search results pagination is only available to authenticated users\n      return;\n    }\n\n    setUIState('loading');\n    if (firstLoad && !type) {\n      setStatusResults(statusResults.slice(0, SHORT_LIMIT));\n      setAccountResults(accountResults.slice(0, SHORT_LIMIT));\n      setHashtagResults(hashtagResults.slice(0, SHORT_LIMIT));\n    }\n\n    (async () => {\n      const params = {\n        q,\n        resolve: authenticated,\n        limit: SHORT_LIMIT,\n      };\n      if (type) {\n        params.limit = LIMIT;\n        params.type = type;\n        if (authenticated) params.offset = offsetRef.current;\n      }\n\n      try {\n        const results = await masto.v2.search.fetch(params);\n        console.log(results);\n        if (type) {\n          if (firstLoad) {\n            setTypeResultsFunc[type](results[type]);\n            const length = results[type]?.length;\n            offsetRef.current = LIMIT;\n            setShowMore(!!length);\n          } else {\n            setTypeResultsFunc[type]((prev) => [...prev, ...results[type]]);\n            const length = results[type]?.length;\n            offsetRef.current = offsetRef.current + LIMIT;\n            setShowMore(!!length);\n          }\n        } else {\n          setStatusResults(results.statuses || []);\n          setAccountResults(results.accounts || []);\n          setHashtagResults(results.hashtags || []);\n          offsetRef.current = 0;\n          setShowMore(false);\n        }\n        loadRelationships(results.accounts);\n\n        setUIState('default');\n      } catch (err) {\n        console.error(err);\n        setUIState('error');\n      }\n    })();\n  }\n\n  const lastHiddenTime = useRef();\n  usePageVisibility((visible) => {\n    const reachStart = scrollableRef.current?.scrollTop === 0;\n    if (visible && reachStart) {\n      const timeDiff = Date.now() - lastHiddenTime.current;\n      if (!lastHiddenTime.current || timeDiff > 1000 * 3) {\n        // 3 seconds\n        loadResults(true);\n      } else {\n        lastHiddenTime.current = Date.now();\n      }\n    }\n  });\n\n  useEffect(() => {\n    searchFormRef.current?.setValue?.(q || '');\n    if (q) {\n      loadResults(true);\n    } else {\n      searchFormRef.current?.focus?.();\n    }\n  }, [q, type, instance]);\n\n  useHotkeys(\n    ['/', 'Slash'],\n    (e) => {\n      searchFormRef.current?.focus?.();\n      searchFormRef.current?.select?.();\n    },\n    {\n      preventDefault: true,\n    },\n  );\n\n  const [filterBarParent] = useAutoAnimate();\n\n  return (\n    <div id=\"search-page\" class=\"deck-container\" ref={scrollableRef}>\n      <div class=\"timeline-deck deck\">\n        <header class={uiState === 'loading' ? 'loading' : ''}>\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n            </div>\n            <SearchForm ref={searchFormRef} />\n            <div class=\"header-side\">\n              <button\n                type=\"button\"\n                class=\"plain\"\n                onClick={() => {\n                  loadResults(true);\n                }}\n                disabled={uiState === 'loading'}\n              >\n                <Icon icon=\"search\" size=\"l\" />\n              </button>\n            </div>\n          </div>\n        </header>\n        <main>\n          {!!q && !columnMode && (\n            <div\n              ref={filterBarParent}\n              class={`filter-bar ${uiState === 'loading' ? 'loading' : ''}`}\n            >\n              {!!type && (\n                <Link to={`/search${q ? `?q=${encodeURIComponent(q)}` : ''}`}>\n                  ‹ All\n                </Link>\n              )}\n              {[\n                {\n                  label: 'Accounts',\n                  type: 'accounts',\n                  to: `/search?q=${encodeURIComponent(q)}&type=accounts`,\n                },\n                {\n                  label: 'Hashtags',\n                  type: 'hashtags',\n                  to: `/search?q=${encodeURIComponent(q)}&type=hashtags`,\n                },\n                {\n                  label: 'Posts',\n                  type: 'statuses',\n                  to: `/search?q=${encodeURIComponent(q)}&type=statuses`,\n                },\n              ]\n                .sort((a, b) => {\n                  if (a.type === type) return -1;\n                  if (b.type === type) return 1;\n                  return 0;\n                })\n                .map((link) => (\n                  <Link to={link.to} key={link.type}>\n                    {link.label}\n                  </Link>\n                ))}\n            </div>\n          )}\n          {!!q ? (\n            <>\n              {(!type || type === 'accounts') && (\n                <>\n                  {type !== 'accounts' && (\n                    <h2 class=\"timeline-header\">\n                      Accounts{' '}\n                      <Link\n                        to={`/search?q=${encodeURIComponent(q)}&type=accounts`}\n                      >\n                        <Icon icon=\"arrow-right\" size=\"l\" />\n                      </Link>\n                    </h2>\n                  )}\n                  {accountResults.length > 0 ? (\n                    <>\n                      <ul class=\"timeline flat accounts-list\">\n                        {accountResults.map((account) => (\n                          <li key={account.id}>\n                            <AccountBlock\n                              account={account}\n                              instance={instance}\n                              showStats\n                              relationship={relationshipsMap[account.id]}\n                            />\n                          </li>\n                        ))}\n                      </ul>\n                      {type !== 'accounts' && (\n                        <div class=\"ui-state\">\n                          <Link\n                            class=\"plain button\"\n                            to={`/search?q=${encodeURIComponent(\n                              q,\n                            )}&type=accounts`}\n                          >\n                            See more accounts <Icon icon=\"arrow-right\" />\n                          </Link>\n                        </div>\n                      )}\n                    </>\n                  ) : (\n                    !type &&\n                    (uiState === 'loading' ? (\n                      <p class=\"ui-state\">\n                        <Loader abrupt />\n                      </p>\n                    ) : (\n                      <p class=\"ui-state\">No accounts found.</p>\n                    ))\n                  )}\n                </>\n              )}\n              {(!type || type === 'hashtags') && (\n                <>\n                  {type !== 'hashtags' && (\n                    <h2 class=\"timeline-header\">\n                      Hashtags{' '}\n                      <Link\n                        to={`/search?q=${encodeURIComponent(q)}&type=hashtags`}\n                      >\n                        <Icon icon=\"arrow-right\" size=\"l\" />\n                      </Link>\n                    </h2>\n                  )}\n                  {hashtagResults.length > 0 ? (\n                    <>\n                      <ul class=\"link-list hashtag-list\">\n                        {hashtagResults.map((hashtag) => {\n                          const { name, history } = hashtag;\n                          const total = history?.reduce?.(\n                            (acc, cur) => acc + +cur.uses,\n                            0,\n                          );\n                          return (\n                            <li key={`${name}-${total}`}>\n                              <Link\n                                to={\n                                  instance\n                                    ? `/${instance}/t/${name}`\n                                    : `/t/${name}`\n                                }\n                              >\n                                <Icon icon=\"hashtag\" />\n                                <span>{name}</span>\n                                {!!total && (\n                                  <span class=\"count\">\n                                    {shortenNumber(total)}\n                                  </span>\n                                )}\n                              </Link>\n                            </li>\n                          );\n                        })}\n                      </ul>\n                      {type !== 'hashtags' && (\n                        <div class=\"ui-state\">\n                          <Link\n                            class=\"plain button\"\n                            to={`/search?q=${encodeURIComponent(\n                              q,\n                            )}&type=hashtags`}\n                          >\n                            See more hashtags <Icon icon=\"arrow-right\" />\n                          </Link>\n                        </div>\n                      )}\n                    </>\n                  ) : (\n                    !type &&\n                    (uiState === 'loading' ? (\n                      <p class=\"ui-state\">\n                        <Loader abrupt />\n                      </p>\n                    ) : (\n                      <p class=\"ui-state\">No hashtags found.</p>\n                    ))\n                  )}\n                </>\n              )}\n              {(!type || type === 'statuses') && (\n                <>\n                  {type !== 'statuses' && (\n                    <h2 class=\"timeline-header\">\n                      Posts{' '}\n                      <Link\n                        to={`/search?q=${encodeURIComponent(q)}&type=statuses`}\n                      >\n                        <Icon icon=\"arrow-right\" size=\"l\" />\n                      </Link>\n                    </h2>\n                  )}\n                  {statusResults.length > 0 ? (\n                    <>\n                      <ul class=\"timeline\">\n                        {statusResults.map((status) => (\n                          <li key={status.id}>\n                            <Link\n                              class=\"status-link\"\n                              to={\n                                instance\n                                  ? `/${instance}/s/${status.id}`\n                                  : `/s/${status.id}`\n                              }\n                            >\n                              <Status status={status} />\n                            </Link>\n                          </li>\n                        ))}\n                      </ul>\n                      {type !== 'statuses' && (\n                        <div class=\"ui-state\">\n                          <Link\n                            class=\"plain button\"\n                            to={`/search?q=${encodeURIComponent(\n                              q,\n                            )}&type=statuses`}\n                          >\n                            See more posts <Icon icon=\"arrow-right\" />\n                          </Link>\n                        </div>\n                      )}\n                    </>\n                  ) : (\n                    !type &&\n                    (uiState === 'loading' ? (\n                      <p class=\"ui-state\">\n                        <Loader abrupt />\n                      </p>\n                    ) : (\n                      <p class=\"ui-state\">No posts found.</p>\n                    ))\n                  )}\n                </>\n              )}\n              {!!type &&\n                (uiState === 'default' ? (\n                  showMore ? (\n                    <InView\n                      onChange={(inView) => {\n                        if (inView) {\n                          loadResults();\n                        }\n                      }}\n                    >\n                      <button\n                        type=\"button\"\n                        class=\"plain block\"\n                        onClick={() => loadResults()}\n                        style={{ marginBlockEnd: '6em' }}\n                      >\n                        Show more&hellip;\n                      </button>\n                    </InView>\n                  ) : (\n                    <p class=\"ui-state insignificant\">The end.</p>\n                  )\n                ) : (\n                  uiState === 'loading' && (\n                    <p class=\"ui-state\">\n                      <Loader abrupt />\n                    </p>\n                  )\n                ))}\n            </>\n          ) : uiState === 'loading' ? (\n            <p class=\"ui-state\">\n              <Loader abrupt />\n            </p>\n          ) : (\n            <p class=\"ui-state\">\n              Enter your search term or paste a URL above to get started.\n            </p>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default Search;\n","import '../components/links-bar.css';\n\nimport { MenuItem } from '@szhsin/react-menu';\nimport { getBlurHashAverageColor } from 'fast-blurhash';\nimport { useMemo, useRef, useState } from 'preact/hooks';\nimport punycode from 'punycode';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Menu2 from '../components/menu2';\nimport RelativeTime from '../components/relative-time';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { oklab2rgb, rgb2oklab } from '../utils/color-utils';\nimport { filteredItems } from '../utils/filters';\nimport pmem from '../utils/pmem';\nimport shortenNumber from '../utils/shorten-number';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nconst fetchLinks = pmem(\n  (masto) => {\n    return masto.v1.trends.links.list().next();\n  },\n  {\n    // News last much longer\n    maxAge: 10 * 60 * 1000, // 10 minutes\n  },\n);\n\nfunction Trending({ columnMode, ...props }) {\n  const snapStates = useSnapshot(states);\n  const params = columnMode ? {} : useParams();\n  const { masto, instance } = api({\n    instance: props?.instance || params.instance,\n  });\n  const { masto: currentMasto, instance: currentInstance } = api();\n  const title = `Trending (${instance})`;\n  useTitle(title, `/:instance?/trending`);\n  // const navigate = useNavigate();\n  const latestItem = useRef();\n\n  const [hashtags, setHashtags] = useState([]);\n  const [links, setLinks] = useState([]);\n  const trendIterator = useRef();\n  async function fetchTrend(firstLoad) {\n    if (firstLoad || !trendIterator.current) {\n      trendIterator.current = masto.v1.trends.statuses.list({\n        limit: LIMIT,\n      });\n\n      // Get hashtags\n      try {\n        const iterator = masto.v1.trends.tags.list();\n        const { value: tags } = await iterator.next();\n        console.log('tags', tags);\n        if (tags?.length) {\n          setHashtags(tags);\n        }\n      } catch (e) {\n        console.error(e);\n      }\n\n      // Get links\n      try {\n        const { value } = await fetchLinks(masto, instance);\n        // 4 types available: link, photo, video, rich\n        // Only want links for now\n        const links = value?.filter?.((link) => link.type === 'link');\n        console.log('links', links);\n        if (links?.length) {\n          setLinks(links);\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    }\n    const results = await trendIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      // value = filteredItems(value, 'public'); // Might not work here\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.trends.statuses\n        .list({\n          limit: 1,\n          // NOT SUPPORTED\n          // since_id: latestItem.current,\n        })\n        .next();\n      let { value } = results;\n      value = filteredItems(value, 'public');\n      if (value?.length && value[0].id !== latestItem.current) {\n        latestItem.current = value[0].id;\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  const TimelineStart = useMemo(() => {\n    return (\n      <>\n        {!!hashtags.length && (\n          <div class=\"filter-bar expandable\">\n            <Icon icon=\"chart\" class=\"insignificant\" size=\"l\" />\n            {hashtags.map((tag, i) => {\n              const { name, history } = tag;\n              const total = history.reduce((acc, cur) => acc + +cur.uses, 0);\n              return (\n                <Link to={`/${instance}/t/${name}`} key={name}>\n                  <span>\n                    <span class=\"more-insignificant\">#</span>\n                    {name}\n                  </span>\n                  <span class=\"filter-count\">{shortenNumber(total)}</span>\n                </Link>\n              );\n            })}\n          </div>\n        )}\n        {!!links.length && (\n          <div class=\"links-bar\">\n            <header>\n              <h3>Trending News</h3>\n            </header>\n            {links.map((link) => {\n              const {\n                authorName,\n                authorUrl,\n                blurhash,\n                description,\n                height,\n                image,\n                imageDescription,\n                language,\n                providerName,\n                providerUrl,\n                publishedAt,\n                title,\n                url,\n                width,\n              } = link;\n              const domain = punycode.toUnicode(\n                new URL(url).hostname.replace(/^www\\./, '').replace(/\\/$/, ''),\n              );\n              let accentColor;\n              if (blurhash) {\n                const averageColor = getBlurHashAverageColor(blurhash);\n                const labAverageColor = rgb2oklab(averageColor);\n                accentColor = oklab2rgb([\n                  0.6,\n                  labAverageColor[1],\n                  labAverageColor[2],\n                ]);\n              }\n\n              return (\n                <a\n                  key={url}\n                  href={url}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  style={\n                    accentColor\n                      ? {\n                          '--accent-color': `rgb(${accentColor.join(',')})`,\n                          '--accent-alpha-color': `rgba(${accentColor.join(\n                            ',',\n                          )}, 0.4)`,\n                        }\n                      : {}\n                  }\n                >\n                  <article>\n                    <figure>\n                      <img\n                        src={image}\n                        alt={imageDescription}\n                        width={width}\n                        height={height}\n                        loading=\"lazy\"\n                      />\n                    </figure>\n                    <div class=\"article-body\">\n                      <header>\n                        <div class=\"article-meta\">\n                          <span class=\"domain\">{domain}</span>{' '}\n                          {!!publishedAt && <>&middot; </>}\n                          {!!publishedAt && (\n                            <>\n                              <RelativeTime\n                                datetime={publishedAt}\n                                format=\"micro\"\n                              />\n                            </>\n                          )}\n                        </div>\n                        {!!title && (\n                          <h1\n                            class=\"title\"\n                            lang={language}\n                            dir=\"auto\"\n                            title={title}\n                          >\n                            {title}\n                          </h1>\n                        )}\n                      </header>\n                      {!!description && (\n                        <p\n                          class=\"description\"\n                          lang={language}\n                          dir=\"auto\"\n                          title={description}\n                        >\n                          {description}\n                        </p>\n                      )}\n                    </div>\n                  </article>\n                </a>\n              );\n            })}\n          </div>\n        )}\n      </>\n    );\n  }, [hashtags, links]);\n\n  return (\n    <Timeline\n      key={instance}\n      title={title}\n      titleComponent={\n        <h1 class=\"header-double-lines\">\n          <b>Trending</b>\n          <div>{instance}</div>\n        </h1>\n      }\n      id=\"trending\"\n      instance={instance}\n      emptyText=\"No trending posts.\"\n      errorText=\"Unable to load posts\"\n      fetchItems={fetchTrend}\n      checkForUpdates={checkForUpdates}\n      checkForUpdatesInterval={5 * 60 * 1000} // 5 minutes\n      useItemID\n      headerStart={<></>}\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      // allowFilters\n      filterContext=\"public\"\n      timelineStart={TimelineStart}\n      headerEnd={\n        <Menu2\n          portal\n          // setDownOverflow\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          <MenuItem\n            onClick={() => {\n              let newInstance = prompt(\n                'Enter a new instance e.g. \"mastodon.social\"',\n              );\n              if (!/\\./.test(newInstance)) {\n                if (newInstance) alert('Invalid instance');\n                return;\n              }\n              if (newInstance) {\n                newInstance = newInstance.toLowerCase().trim();\n                // navigate(`/${newInstance}/trending`);\n                location.hash = `/${newInstance}/trending`;\n              }\n            }}\n          >\n            <Icon icon=\"bus\" /> <span>Go to another instance…</span>\n          </MenuItem>\n          {currentInstance !== instance && (\n            <MenuItem\n              onClick={() => {\n                location.hash = `/${currentInstance}/trending`;\n              }}\n            >\n              <Icon icon=\"bus\" />{' '}\n              <small class=\"menu-double-lines\">\n                Go to my instance (<b>{currentInstance}</b>)\n              </small>\n            </MenuItem>\n          )}\n        </Menu2>\n      }\n    />\n  );\n}\n\nexport default Trending;\n","import { useHotkeys } from 'react-hotkeys-hook';\nimport { useSnapshot } from 'valtio';\n\nimport Bookmarks from '../pages/bookmarks';\nimport Favourites from '../pages/favourites';\nimport Following from '../pages/following';\nimport Hashtag from '../pages/hashtag';\nimport List from '../pages/list';\nimport Mentions from '../pages/mentions';\nimport Notifications from '../pages/notifications';\nimport Public from '../pages/public';\nimport Search from '../pages/search';\nimport Trending from '../pages/trending';\nimport states from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nfunction Columns() {\n  useTitle('Home', '/');\n  const snapStates = useSnapshot(states);\n  const { shortcuts } = snapStates;\n\n  console.debug('RENDER Columns', shortcuts);\n\n  const components = shortcuts.map((shortcut) => {\n    if (!shortcut) return null;\n    const { type, ...params } = shortcut;\n    const Component = {\n      following: Following,\n      notifications: Notifications,\n      list: List,\n      public: Public,\n      bookmarks: Bookmarks,\n      favourites: Favourites,\n      hashtag: Hashtag,\n      mentions: Mentions,\n      trending: Trending,\n      search: Search,\n    }[type];\n    if (!Component) return null;\n    // Don't show Search column with no query, for now\n    if (type === 'search' && !params.query) return null;\n    // Don't show List column with no list, for now\n    if (type === 'list' && !params.id) return null;\n    return (\n      <Component key={type + JSON.stringify(params)} {...params} columnMode />\n    );\n  });\n\n  useHotkeys(['1', '2', '3', '4', '5', '6', '7', '8', '9'], (e, handler) => {\n    try {\n      const index = parseInt(handler.keys[0], 10) - 1;\n      document.querySelectorAll('#columns > *')[index].focus();\n    } catch (e) {\n      console.error(e);\n    }\n  });\n\n  return (\n    <div\n      id=\"columns\"\n      onContextMenu={(e) => {\n        // If right-click on header, but not links or buttons\n        if (\n          e.target.closest('.deck > header') &&\n          !e.target.closest('a') &&\n          !e.target.closest('button')\n        ) {\n          e.preventDefault();\n          states.showShortcutsSettings = true;\n        }\n      }}\n    >\n      {components}\n    </div>\n  );\n}\n\nexport default Columns;\n","import './notifications-menu.css';\n\nimport { ControlledMenu } from '@szhsin/react-menu';\nimport { memo } from 'preact/compat';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport Columns from '../components/columns';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport Notification from '../components/notification';\nimport { api } from '../utils/api';\nimport db from '../utils/db';\nimport groupNotifications from '../utils/group-notifications';\nimport states, { saveStatus } from '../utils/states';\nimport { getCurrentAccountNS } from '../utils/store-utils';\n\nimport Following from './following';\n\nfunction Home() {\n  const snapStates = useSnapshot(states);\n  useEffect(() => {\n    (async () => {\n      const keys = await db.drafts.keys();\n      if (keys.length) {\n        const ns = getCurrentAccountNS();\n        const ownKeys = keys.filter((key) => key.startsWith(ns));\n        if (ownKeys.length) {\n          states.showDrafts = true;\n        }\n      }\n    })();\n  }, []);\n\n  return (\n    <>\n      {(snapStates.settings.shortcutsViewMode === 'multi-column' ||\n        (!snapStates.settings.shortcutsViewMode &&\n          snapStates.settings.shortcutsColumnsMode)) &&\n      !!snapStates.shortcuts?.length ? (\n        <Columns />\n      ) : (\n        <Following\n          title=\"Home\"\n          path=\"/\"\n          id=\"home\"\n          headerStart={false}\n          headerEnd={<NotificationsLink />}\n        />\n      )}\n    </>\n  );\n}\n\nfunction NotificationsLink() {\n  const snapStates = useSnapshot(states);\n  const notificationLinkRef = useRef();\n  const [menuState, setMenuState] = useState(undefined);\n  return (\n    <>\n      <Link\n        ref={notificationLinkRef}\n        to=\"/notifications\"\n        class={`button plain notifications-button ${\n          snapStates.notificationsShowNew ? 'has-badge' : ''\n        } ${menuState || ''}`}\n        onClick={(e) => {\n          e.stopPropagation();\n          if (window.matchMedia('(min-width: calc(40em))').matches) {\n            e.preventDefault();\n            setMenuState((state) => (!state ? 'open' : undefined));\n          }\n        }}\n      >\n        <Icon icon=\"notification\" size=\"l\" alt=\"Notifications\" />\n      </Link>\n      <NotificationsMenu\n        state={menuState}\n        anchorRef={notificationLinkRef}\n        onClose={() => setMenuState(undefined)}\n      />\n    </>\n  );\n}\n\nconst NOTIFICATIONS_LIMIT = 30;\nconst NOTIFICATIONS_DISPLAY_LIMIT = 5;\nfunction NotificationsMenu({ anchorRef, state, onClose }) {\n  const { masto, instance } = api();\n  const snapStates = useSnapshot(states);\n  const [uiState, setUIState] = useState('default');\n\n  const notificationsIterator = masto.v1.notifications.list({\n    limit: NOTIFICATIONS_LIMIT,\n  });\n\n  async function fetchNotifications() {\n    const allNotifications = await notificationsIterator.next();\n    const notifications = allNotifications.value;\n\n    if (notifications?.length) {\n      notifications.forEach((notification) => {\n        saveStatus(notification.status, instance, {\n          skipThreading: true,\n        });\n      });\n\n      const groupedNotifications = groupNotifications(notifications);\n\n      states.notificationsLast = notifications[0];\n      states.notifications = groupedNotifications;\n\n      // Update last read marker\n      masto.v1.markers\n        .create({\n          notifications: {\n            lastReadId: notifications[0].id,\n          },\n        })\n        .catch(() => {});\n    }\n\n    states.notificationsShowNew = false;\n    states.notificationsLastFetchTime = Date.now();\n    return allNotifications;\n  }\n\n  const [hasFollowRequests, setHasFollowRequests] = useState(false);\n  function fetchFollowRequests() {\n    return masto.v1.followRequests.list({\n      limit: 1,\n    });\n  }\n\n  function loadNotifications() {\n    setUIState('loading');\n    (async () => {\n      try {\n        await fetchNotifications();\n        const followRequests = await fetchFollowRequests();\n        setHasFollowRequests(!!followRequests?.length);\n        setUIState('default');\n      } catch (e) {\n        setUIState('error');\n      }\n    })();\n  }\n\n  useEffect(() => {\n    if (state === 'open') loadNotifications();\n  }, [state]);\n\n  return (\n    <ControlledMenu\n      menuClassName=\"notifications-menu\"\n      state={state}\n      anchorRef={anchorRef}\n      onClose={onClose}\n      portal={{\n        target: document.body,\n      }}\n      overflow=\"auto\"\n      viewScroll=\"close\"\n      position=\"anchor\"\n      align=\"center\"\n      boundingBoxPadding=\"8 8 8 8\"\n    >\n      <header>\n        <h2>Notifications</h2>\n      </header>\n      <main>\n        {snapStates.notifications.length ? (\n          <>\n            {snapStates.notifications\n              .slice(0, NOTIFICATIONS_DISPLAY_LIMIT)\n              .map((notification) => (\n                <Notification\n                  key={notification.id}\n                  instance={instance}\n                  notification={notification}\n                  disableContextMenu\n                />\n              ))}\n          </>\n        ) : uiState === 'loading' ? (\n          <div class=\"ui-state\">\n            <Loader abrupt />\n          </div>\n        ) : (\n          uiState === 'error' && (\n            <div class=\"ui-state\">\n              <p>Unable to fetch notifications.</p>\n              <p>\n                <button type=\"button\" onClick={loadNotifications}>\n                  Try again\n                </button>\n              </p>\n            </div>\n          )\n        )}\n      </main>\n      <footer>\n        <Link to=\"/mentions\" class=\"button plain\">\n          <Icon icon=\"at\" /> <span>Mentions</span>\n        </Link>\n        <Link to=\"/notifications\" class=\"button plain2\">\n          {hasFollowRequests ? (\n            <>\n              <span class=\"tag collapsed\">New</span>{' '}\n              <span>Follow Requests</span>\n            </>\n          ) : (\n            <b>See all</b>\n          )}{' '}\n          <Icon icon=\"arrow-right\" />\n        </Link>\n      </footer>\n    </ControlledMenu>\n  );\n}\n\nexport default memo(Home);\n","// export const statusRegex = /\\/@([^@\\/]+)@?([^\\/]+)?\\/([^\\/]+)\\/?$/i;\n// export const statusNoteRegex = /\\/notes\\/([^\\/]+)\\/?$/i;\n\nconst statusPostRegexes = [\n  /^\\/@[^@\\/]+\\/(?:statuses|posts)\\/([^\\/]+)/i, // GoToSocial, Takahe\n  /\\/notes\\/([^\\/]+)/i, // Misskey, Firefish\n  /^\\/(?:notice|objects)\\/([a-z0-9-]+)/i, // Pleroma\n  /\\/@[^@\\/]+@?[^\\/]+?\\/([^\\/]+)/i, // Mastodon\n];\n\nexport function getInstanceStatusObject(url) {\n  // Regex /:username/:id, where username = @username or @username@domain, id = anything\n  const { hostname, pathname } = new URL(url);\n  // const [, username, domain, id] = pathname.match(statusRegex) || [];\n  for (const regex of statusPostRegexes) {\n    const [, id] = pathname.match(regex) || [];\n    console.log(pathname, regex, id);\n    if (id) {\n      return {\n        instance: hostname,\n        id,\n      };\n    }\n  }\n  return {};\n}\n\nfunction getInstanceStatusURL(url) {\n  const { instance, id } = getInstanceStatusObject(url);\n  if (instance && id) {\n    return `/${instance}/s/${id}`;\n  }\n  return null;\n}\n\nexport default getInstanceStatusURL;\n","import { useLayoutEffect, useState } from 'preact/hooks';\nimport { useLocation } from 'react-router-dom';\n\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport { api } from '../utils/api';\nimport getInstanceStatusURL, {\n  getInstanceStatusObject,\n} from '../utils/get-instance-status-url';\n\nexport default function HttpRoute() {\n  const location = useLocation();\n  const url = location.pathname.replace(/^\\//, '');\n  const statusObject = getInstanceStatusObject(url);\n  // const statusURL = getInstanceStatusURL(url);\n  const statusURL = statusObject?.instance\n    ? `/${statusObject.instance}/s/${statusObject.id}`\n    : null;\n  const [uiState, setUIState] = useState('loading');\n\n  useLayoutEffect(() => {\n    setUIState('loading');\n    (async () => {\n      // Check if status returns 200\n      try {\n        const { instance, id } = statusObject;\n        const { masto } = api({ instance });\n        const status = await masto.v1.statuses.$select(id).fetch();\n        if (status) {\n          window.location.hash = statusURL + '?view=full';\n          return;\n        }\n      } catch (e) {}\n\n      // Fallback to search\n      {\n        const { masto: currentMasto, instance: currentInstance } = api();\n        const result = await currentMasto.v2.search.fetch({\n          q: url,\n          limit: 1,\n          resolve: true,\n        });\n        if (result.statuses.length) {\n          const status = result.statuses[0];\n          window.location.hash = `/${currentInstance}/s/${status.id}?view=full`;\n        } else if (result.accounts.length) {\n          const account = result.accounts[0];\n          window.location.hash = `/${currentInstance}/a/${account.id}`;\n        } else if (statusURL) {\n          // Fallback to original URL, which will probably show error\n          window.location.hash = statusURL + '?view=full';\n        } else {\n          setUIState('error');\n        }\n      }\n    })();\n  }, [statusURL]);\n\n  return (\n    <div class=\"ui-state\" tabIndex=\"-1\">\n      {uiState === 'loading' ? (\n        <>\n          <Loader abrupt />\n          <h2>Resolving…</h2>\n          <p>\n            <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n              {url}\n            </a>\n          </p>\n        </>\n      ) : (\n        <>\n          <h2>Unable to resolve URL</h2>\n          <p>\n            <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n              {url}\n            </a>\n          </p>\n        </>\n      )}\n      <hr />\n      <p>\n        <Link to=\"/\">Go home</Link>\n      </p>\n    </div>\n  );\n}\n","import './lists.css';\n\nimport { useEffect, useReducer, useRef, useState } from 'preact/hooks';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport ListAddEdit from '../components/list-add-edit';\nimport Loader from '../components/loader';\nimport Modal from '../components/modal';\nimport NavMenu from '../components/nav-menu';\nimport { fetchLists } from '../utils/lists';\nimport useTitle from '../utils/useTitle';\n\nfunction Lists() {\n  useTitle(`Lists`, `/l`);\n  const [uiState, setUIState] = useState('default');\n\n  const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n  const [lists, setLists] = useState([]);\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const lists = await fetchLists();\n        console.log(lists);\n        setLists(lists);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, [reloadCount]);\n\n  const [showListAddEditModal, setShowListAddEditModal] = useState(false);\n\n  return (\n    <div id=\"lists-page\" class=\"deck-container\" tabIndex=\"-1\">\n      <div class=\"timeline-deck deck\">\n        <header>\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n              <Link to=\"/\" class=\"button plain\">\n                <Icon icon=\"home\" size=\"l\" />\n              </Link>\n            </div>\n            <h1>Lists</h1>\n            <div class=\"header-side\">\n              <button\n                type=\"button\"\n                class=\"plain\"\n                onClick={() => setShowListAddEditModal(true)}\n              >\n                <Icon icon=\"plus\" size=\"l\" alt=\"New list\" />\n              </button>\n            </div>\n          </div>\n        </header>\n        <main>\n          {lists.length > 0 ? (\n            <>\n              <ul class=\"link-list\">\n                {lists.map((list) => (\n                  <li>\n                    <Link to={`/l/${list.id}`}>\n                      <span>\n                        <Icon icon=\"list\" /> <span>{list.title}</span>\n                      </span>\n                      {/* <button\n                      type=\"button\"\n                      class=\"plain\"\n                      onClick={(e) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        setShowListAddEditModal({\n                          list,\n                        });\n                      }}\n                    >\n                      <Icon icon=\"pencil\" />\n                    </button> */}\n                    </Link>\n                  </li>\n                ))}\n              </ul>\n              {lists.length > 1 && (\n                <footer class=\"ui-state\">\n                  <small class=\"insignificant\">\n                    {lists.length} list\n                    {lists.length === 1 ? '' : 's'}\n                  </small>\n                </footer>\n              )}\n            </>\n          ) : uiState === 'loading' ? (\n            <p class=\"ui-state\">\n              <Loader />\n            </p>\n          ) : uiState === 'error' ? (\n            <p class=\"ui-state\">Unable to load lists.</p>\n          ) : (\n            <p class=\"ui-state\">No lists yet.</p>\n          )}\n        </main>\n      </div>\n      {showListAddEditModal && (\n        <Modal\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowListAddEditModal(false);\n            }\n          }}\n        >\n          <ListAddEdit\n            list={showListAddEditModal?.list}\n            onClose={(result) => {\n              if (result.state === 'success') {\n                reload();\n              }\n              setShowListAddEditModal(false);\n            }}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nexport default Lists;\n","export default \"__VITE_ASSET__Y_wpqkTO__\"","const { PHANPY_CLIENT_NAME: CLIENT_NAME, PHANPY_WEBSITE: WEBSITE } = import.meta\n  .env;\n\nconst SCOPES = 'read write follow push';\n\nexport async function registerApplication({ instanceURL }) {\n  const registrationParams = new URLSearchParams({\n    client_name: CLIENT_NAME,\n    redirect_uris: location.origin + location.pathname,\n    scopes: SCOPES,\n    website: WEBSITE,\n  });\n  const registrationResponse = await fetch(\n    `https://${instanceURL}/api/v1/apps`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: registrationParams.toString(),\n    },\n  );\n  const registrationJSON = await registrationResponse.json();\n  console.log({ registrationJSON });\n  return registrationJSON;\n}\n\nexport async function getAuthorizationURL({ instanceURL, client_id }) {\n  const authorizationParams = new URLSearchParams({\n    client_id,\n    scope: SCOPES,\n    redirect_uri: location.origin + location.pathname,\n    // redirect_uri: 'urn:ietf:wg:oauth:2.0:oob',\n    response_type: 'code',\n  });\n  const authorizationURL = `https://${instanceURL}/oauth/authorize?${authorizationParams.toString()}`;\n  return authorizationURL;\n}\n\nexport async function getAccessToken({\n  instanceURL,\n  client_id,\n  client_secret,\n  code,\n}) {\n  const params = new URLSearchParams({\n    client_id,\n    client_secret,\n    redirect_uri: location.origin + location.pathname,\n    grant_type: 'authorization_code',\n    code,\n    scope: SCOPES,\n  });\n  const tokenResponse = await fetch(`https://${instanceURL}/oauth/token`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: params.toString(),\n  });\n  const tokenJSON = await tokenResponse.json();\n  console.log({ tokenJSON });\n  return tokenJSON;\n}\n","import './login.css';\n\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useSearchParams } from 'react-router-dom';\n\nimport logo from '../assets/logo.svg';\n\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport instancesListURL from '../data/instances.json?url';\nimport { getAuthorizationURL, registerApplication } from '../utils/auth';\nimport store from '../utils/store';\nimport useTitle from '../utils/useTitle';\n\nconst { PHANPY_DEFAULT_INSTANCE: DEFAULT_INSTANCE } = import.meta.env;\n\nfunction Login() {\n  useTitle('Log in');\n  const instanceURLRef = useRef();\n  const cachedInstanceURL = store.local.get('instanceURL');\n  const [uiState, setUIState] = useState('default');\n  const [searchParams] = useSearchParams();\n  const instance = searchParams.get('instance');\n  const submit = searchParams.get('submit');\n  const [instanceText, setInstanceText] = useState(\n    instance || cachedInstanceURL?.toLowerCase() || '',\n  );\n\n  const [instancesList, setInstancesList] = useState([]);\n  useEffect(() => {\n    (async () => {\n      try {\n        const res = await fetch(instancesListURL);\n        const data = await res.json();\n        setInstancesList(data);\n      } catch (e) {\n        // Silently fail\n        console.error(e);\n      }\n    })();\n  }, []);\n\n  // useEffect(() => {\n  //   if (cachedInstanceURL) {\n  //     instanceURLRef.current.value = cachedInstanceURL.toLowerCase();\n  //   }\n  // }, []);\n\n  const submitInstance = (instanceURL) => {\n    if (!instanceURL) return;\n    store.local.set('instanceURL', instanceURL);\n\n    (async () => {\n      setUIState('loading');\n      try {\n        const { client_id, client_secret, vapid_key } =\n          await registerApplication({\n            instanceURL,\n          });\n\n        if (client_id && client_secret) {\n          store.session.set('clientID', client_id);\n          store.session.set('clientSecret', client_secret);\n          store.session.set('vapidKey', vapid_key);\n\n          location.href = await getAuthorizationURL({\n            instanceURL,\n            client_id,\n          });\n        } else {\n          alert('Failed to register application');\n        }\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  };\n\n  const cleanInstanceText = instanceText\n    ? instanceText\n        .replace(/^https?:\\/\\//, '') // Remove protocol from instance URL\n        .replace(/\\/+$/, '') // Remove trailing slash\n        .replace(/^@?[^@]+@/, '') // Remove @?acct@\n        .trim()\n    : null;\n  const instanceTextLooksLikeDomain =\n    /[^\\s\\r\\n\\t\\/\\\\]+\\.[^\\s\\r\\n\\t\\/\\\\]+/.test(cleanInstanceText) &&\n    !/[\\s\\/\\\\@]/.test(cleanInstanceText);\n\n  const instancesSuggestions = cleanInstanceText\n    ? instancesList\n        .filter((instance) => instance.includes(instanceText))\n        .sort((a, b) => {\n          // Move text that starts with instanceText to the start\n          const aStartsWith = a\n            .toLowerCase()\n            .startsWith(instanceText.toLowerCase());\n          const bStartsWith = b\n            .toLowerCase()\n            .startsWith(instanceText.toLowerCase());\n          if (aStartsWith && !bStartsWith) return -1;\n          if (!aStartsWith && bStartsWith) return 1;\n          return 0;\n        })\n        .slice(0, 10)\n    : [];\n\n  const selectedInstanceText = instanceTextLooksLikeDomain\n    ? cleanInstanceText\n    : instancesSuggestions?.length\n    ? instancesSuggestions[0]\n    : instanceText\n    ? instancesList.find((instance) => instance.includes(instanceText))\n    : null;\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    // const { elements } = e.target;\n    // let instanceURL = elements.instanceURL.value.toLowerCase();\n    // // Remove protocol from instance URL\n    // instanceURL = instanceURL.replace(/^https?:\\/\\//, '').replace(/\\/+$/, '');\n    // // Remove @acct@ or acct@ from instance URL\n    // instanceURL = instanceURL.replace(/^@?[^@]+@/, '');\n    // if (!/\\./.test(instanceURL)) {\n    //   instanceURL = instancesList.find((instance) =>\n    //     instance.includes(instanceURL),\n    //   );\n    // }\n    // submitInstance(instanceURL);\n    submitInstance(selectedInstanceText);\n  };\n\n  if (submit) {\n    useEffect(() => {\n      submitInstance(instance || selectedInstanceText);\n    }, []);\n  }\n\n  return (\n    <main id=\"login\" style={{ textAlign: 'center' }}>\n      <form onSubmit={onSubmit}>\n        <h1>\n          <img src={logo} alt=\"\" width=\"80\" height=\"80\" />\n          <br />\n          Log in\n        </h1>\n        <label>\n          <p>Instance</p>\n          <input\n            value={instanceText}\n            required\n            type=\"text\"\n            class=\"large\"\n            id=\"instanceURL\"\n            ref={instanceURLRef}\n            disabled={uiState === 'loading'}\n            // list=\"instances-list\"\n            autocorrect=\"off\"\n            autocapitalize=\"off\"\n            autocomplete=\"off\"\n            spellCheck={false}\n            placeholder=\"instance domain\"\n            onInput={(e) => {\n              setInstanceText(e.target.value);\n            }}\n          />\n          {instancesSuggestions?.length > 0 ? (\n            <ul id=\"instances-suggestions\">\n              {instancesSuggestions.map((instance, i) => (\n                <li>\n                  <button\n                    type=\"button\"\n                    class=\"plain5\"\n                    onClick={() => {\n                      submitInstance(instance);\n                    }}\n                  >\n                    {instance}\n                  </button>\n                </li>\n              ))}\n            </ul>\n          ) : (\n            <div id=\"instances-eg\">e.g. &ldquo;mastodon.social&rdquo;</div>\n          )}\n          {/* <datalist id=\"instances-list\">\n            {instancesList.map((instance) => (\n              <option value={instance} />\n            ))}\n          </datalist> */}\n        </label>\n        {uiState === 'error' && (\n          <p class=\"error\">\n            Failed to log in. Please try again or another instance.\n          </p>\n        )}\n        <div>\n          <button\n            disabled={\n              uiState === 'loading' || !instanceText || !selectedInstanceText\n            }\n          >\n            {selectedInstanceText\n              ? `Continue with ${selectedInstanceText}`\n              : 'Continue'}\n          </button>{' '}\n        </div>\n        <Loader hidden={uiState !== 'loading'} />\n        <hr />\n        {!DEFAULT_INSTANCE && (\n          <p>\n            <a href=\"https://joinmastodon.org/servers\" target=\"_blank\">\n              Don't have an account? Create one!\n            </a>\n          </p>\n        )}\n        <p>\n          <Link to=\"/\">Go home</Link>\n        </p>\n      </form>\n    </main>\n  );\n}\n\nexport default Login;\n","import './status.css';\n\nimport { Menu, MenuDivider, MenuHeader, MenuItem } from '@szhsin/react-menu';\nimport debounce from 'just-debounce-it';\nimport pRetry from 'p-retry';\nimport { memo } from 'preact/compat';\nimport {\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'preact/hooks';\nimport punycode from 'punycode';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { InView } from 'react-intersection-observer';\nimport { matchPath, useSearchParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport Avatar from '../components/avatar';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport MediaModal from '../components/media-modal';\nimport Menu2 from '../components/menu2';\nimport NameText from '../components/name-text';\nimport RelativeTime from '../components/relative-time';\nimport Status from '../components/status';\nimport { api } from '../utils/api';\nimport htmlContentLength from '../utils/html-content-length';\nimport shortenNumber from '../utils/shorten-number';\nimport states, {\n  getStatus,\n  saveStatus,\n  statusKey,\n  threadifyStatus,\n} from '../utils/states';\nimport statusPeek from '../utils/status-peek';\nimport { getCurrentAccount } from '../utils/store-utils';\nimport useScroll from '../utils/useScroll';\nimport useTitle from '../utils/useTitle';\n\nimport getInstanceStatusURL from './../utils/get-instance-status-url';\n\nconst LIMIT = 40;\nconst SUBCOMMENTS_OPEN_ALL_LIMIT = 10;\nconst MAX_WEIGHT = 5;\n\nlet cachedRepliesToggle = {};\nlet cachedStatusesMap = {};\nlet scrollPositions = {};\nfunction resetScrollPosition(id) {\n  delete cachedStatusesMap[id];\n  delete scrollPositions[id];\n}\n\nconst scrollIntoViewOptions = {\n  block: 'nearest',\n  inline: 'center',\n  behavior: 'smooth',\n};\n\n// Select all statuses except those inside collapsed details/summary\n// Hat-tip to @AmeliaBR@front-end.social\n// https://front-end.social/@AmeliaBR/109784776146144471\nconst STATUSES_SELECTOR =\n  '.status-link:not(details:not([open]) > summary ~ *, details:not([open]) > summary ~ * *), .status-focus:not(details:not([open]) > summary ~ *, details:not([open]) > summary ~ * *)';\n\nconst STATUS_URL_REGEX = /\\/s\\//i;\n\nfunction StatusPage(params) {\n  const { id } = params;\n  const { masto, instance } = api({ instance: params.instance });\n  const snapStates = useSnapshot(states);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const mediaParam = searchParams.get('media');\n  const mediaOnlyParam = searchParams.get('media-only');\n  const mediaIndex = parseInt(mediaParam || mediaOnlyParam, 10);\n  let showMedia = mediaIndex > 0;\n  const mediaStatusID = searchParams.get('mediaStatusID');\n  const mediaStatus = getStatus(mediaStatusID, instance);\n  if (mediaStatusID && !mediaStatus) {\n    showMedia = false;\n  }\n  const showMediaOnly = showMedia && !!mediaOnlyParam;\n\n  const sKey = statusKey(id, instance);\n  const [heroStatus, setHeroStatus] = useState(states.statuses[sKey]);\n  useEffect(() => {\n    if (states.statuses[sKey]) {\n      setHeroStatus(states.statuses[sKey]);\n    }\n  }, [sKey]);\n\n  const closeLink = useMemo(() => {\n    const { prevLocation } = states;\n    const pathname =\n      (prevLocation?.pathname || '') + (prevLocation?.search || '');\n    const matchStatusPath =\n      matchPath('/:instance/s/:id', pathname) || matchPath('/s/:id', pathname);\n    if (!pathname || matchStatusPath) {\n      return '/';\n    }\n    return pathname;\n  }, []);\n\n  useEffect(() => {\n    if (!heroStatus && showMedia) {\n      (async () => {\n        try {\n          const status = await masto.v1.statuses.$select(id).fetch();\n          saveStatus(status, instance);\n          setHeroStatus(status);\n        } catch (err) {\n          console.error(err);\n          alert('Unable to load post.');\n          location.hash = closeLink;\n        }\n      })();\n    }\n  }, [showMedia]);\n\n  const mediaAttachments = mediaStatusID\n    ? snapStates.statuses[statusKey(mediaStatusID, instance)]?.mediaAttachments\n    : heroStatus?.mediaAttachments;\n\n  const handleMediaClose = useCallback(() => {\n    if (\n      !window.matchMedia('(min-width: calc(40em + 350px))').matches &&\n      snapStates.prevLocation\n    ) {\n      history.back();\n    } else {\n      if (showMediaOnly) {\n        location.hash = closeLink;\n      } else {\n        searchParams.delete('media');\n        searchParams.delete('mediaStatusID');\n        setSearchParams(searchParams);\n      }\n    }\n  }, [showMediaOnly, closeLink, snapStates.prevLocation]);\n\n  useEffect(() => {\n    let timer = setTimeout(() => {\n      // carouselRef.current?.focus?.();\n      const $carousel = document.querySelector('.carousel');\n      if ($carousel) {\n        $carousel.focus();\n      }\n    }, 100);\n    return () => clearTimeout(timer);\n  }, [showMediaOnly]);\n\n  return (\n    <div class=\"deck-backdrop\">\n      {showMedia ? (\n        mediaAttachments?.length ? (\n          <MediaModal\n            mediaAttachments={mediaAttachments}\n            statusID={mediaStatusID || id}\n            instance={instance}\n            lang={heroStatus?.language}\n            index={mediaIndex - 1}\n            onClose={handleMediaClose}\n          />\n        ) : (\n          <div class=\"media-modal-container loading\">\n            <Loader abrupt />\n          </div>\n        )\n      ) : (\n        <Link to={closeLink} />\n      )}\n      {!showMediaOnly && (\n        <StatusThread\n          id={id}\n          instance={params.instance}\n          closeLink={closeLink}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction StatusParent(props) {\n  const { linkable, to, onClick, ...restProps } = props;\n  return linkable ? (\n    <Link class=\"status-link\" to={to} onClick={onClick} {...restProps} />\n  ) : (\n    <div class=\"status-focus\" tabIndex={0} {...restProps} />\n  );\n}\n\nfunction StatusThread({ id, closeLink = '/', instance: propInstance }) {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const mediaParam = searchParams.get('media');\n  const mediaStatusID = searchParams.get('mediaStatusID');\n  const showMedia = parseInt(mediaParam, 10) > 0;\n  const firstLoad = useRef(\n    !states.prevLocation &&\n      (history.length === 1 ||\n        ('navigation' in window && navigation?.entries?.()?.length === 1)),\n  );\n  const [viewMode, setViewMode] = useState(\n    searchParams.get('view') || firstLoad.current ? 'full' : null,\n  );\n  const translate = !!parseInt(searchParams.get('translate'));\n  const { masto, instance } = api({ instance: propInstance });\n  const {\n    masto: currentMasto,\n    instance: currentInstance,\n    authenticated,\n  } = api();\n  const sameInstance = instance === currentInstance;\n  const snapStates = useSnapshot(states);\n  const [statuses, setStatuses] = useState([]);\n  const [uiState, setUIState] = useState('default');\n  const heroStatusRef = useRef();\n  const sKey = statusKey(id, instance);\n  const totalDescendants = useRef(0);\n\n  const scrollableRef = useRef();\n  useEffect(() => {\n    scrollableRef.current?.focus();\n  }, []);\n  useEffect(() => {\n    const onScroll = debounce(() => {\n      // console.log('onScroll');\n      if (!scrollableRef.current) return;\n      const { scrollTop } = scrollableRef.current;\n      if (uiState !== 'loading') {\n        scrollPositions[id] = scrollTop;\n      }\n    }, 50);\n    scrollableRef.current?.addEventListener('scroll', onScroll, {\n      passive: true,\n    });\n    onScroll();\n    return () => {\n      onScroll.cancel();\n      scrollableRef.current?.removeEventListener('scroll', onScroll);\n    };\n  }, [id, uiState !== 'loading']);\n\n  const scrollOffsets = useRef();\n  const lastInitContextTS = useRef();\n  const initContext = ({ reloadHero } = {}) => {\n    console.debug('initContext', id);\n    setUIState('loading');\n    let heroTimer;\n\n    const cachedStatuses = cachedStatusesMap[id];\n    if (cachedStatuses) {\n      // Case 1: It's cached, let's restore them to make it snappy\n      const reallyCachedStatuses = cachedStatuses.filter(\n        (s) => states.statuses[sKey],\n        // Some are not cached in the global state, so we need to filter them out\n      );\n      setStatuses(reallyCachedStatuses);\n    } else {\n      // const heroIndex = statuses.findIndex((s) => s.id === id);\n      // if (heroIndex !== -1) {\n      //   // Case 2: It's in current statuses. Slice off all descendant statuses after the hero status to be safe\n      //   const slicedStatuses = statuses.slice(0, heroIndex + 1);\n      //   setStatuses(slicedStatuses);\n      // } else {\n      // Case 3: Not cached and not in statuses, let's start from scratch\n      setStatuses([{ id }]);\n      // }\n    }\n\n    (async () => {\n      const heroFetch = () =>\n        pRetry(() => masto.v1.statuses.$select(id).fetch(), {\n          retries: 4,\n        });\n      const contextFetch = pRetry(\n        () => masto.v1.statuses.$select(id).context.fetch(),\n        {\n          retries: 8,\n        },\n      );\n\n      const hasStatus = !!snapStates.statuses[sKey];\n      let heroStatus = snapStates.statuses[sKey];\n      if (hasStatus && !reloadHero) {\n        console.debug('Hero status is cached');\n      } else {\n        try {\n          heroStatus = await heroFetch();\n          saveStatus(heroStatus, instance);\n          // Give time for context to appear\n          await new Promise((resolve) => {\n            setTimeout(resolve, 100);\n          });\n        } catch (e) {\n          console.error(e);\n          setUIState('error');\n          return;\n        }\n      }\n\n      try {\n        const context = await contextFetch;\n        const { ancestors, descendants } = context;\n\n        totalDescendants.current = descendants?.length || 0;\n\n        const missingStatuses = new Set();\n        ancestors.forEach((status) => {\n          saveStatus(status, instance, {\n            skipThreading: true,\n          });\n          if (\n            status.inReplyToId &&\n            !ancestors.find((s) => s.id === status.inReplyToId)\n          ) {\n            missingStatuses.add(status.inReplyToId);\n          }\n        });\n        const ancestorsIsThread = ancestors.every(\n          (s) => s.account.id === heroStatus.account.id,\n        );\n        const nestedDescendants = [];\n        descendants.forEach((status) => {\n          saveStatus(status, instance, {\n            skipThreading: true,\n          });\n\n          if (\n            status.inReplyToId &&\n            !descendants.find((s) => s.id === status.inReplyToId) &&\n            status.inReplyToId !== heroStatus.id\n          ) {\n            missingStatuses.add(status.inReplyToId);\n          }\n\n          if (status.inReplyToAccountId === status.account.id) {\n            // If replying to self, it's part of the thread, level 1\n            nestedDescendants.push(status);\n          } else if (status.inReplyToId === heroStatus.id) {\n            // If replying to the hero status, it's a reply, level 1\n            nestedDescendants.push(status);\n          } else if (\n            !status.inReplyToAccountId &&\n            nestedDescendants.find((s) => s.id === status.inReplyToId) &&\n            status.account.id === heroStatus.account.id\n          ) {\n            // If replying to hero's own statuses, it's part of the thread, level 1\n            nestedDescendants.push(status);\n          } else {\n            // If replying to someone else, it's a reply to a reply, level 2\n            const parent = descendants.find((s) => s.id === status.inReplyToId);\n            if (parent) {\n              if (!parent.__replies) {\n                parent.__replies = [];\n              }\n              parent.__replies.push(status);\n            } else {\n              // If no parent, something is wrong\n              console.warn('No parent found for', status);\n            }\n          }\n        });\n\n        console.log({ ancestors, descendants, nestedDescendants });\n        if (missingStatuses.size) {\n          console.error('Missing statuses', [...missingStatuses]);\n        }\n\n        function expandReplies(_replies) {\n          return _replies?.map((_r) => ({\n            id: _r.id,\n            account: _r.account,\n            repliesCount: _r.repliesCount,\n            content: _r.content,\n            weight: calcStatusWeight(_r),\n            replies: expandReplies(_r.__replies),\n          }));\n        }\n\n        const allStatuses = [\n          ...ancestors.map((s) => ({\n            id: s.id,\n            ancestor: true,\n            isThread: ancestorsIsThread,\n            accountID: s.account.id,\n            account: s.account,\n            repliesCount: s.repliesCount,\n            weight: calcStatusWeight(s),\n          })),\n          {\n            id,\n            accountID: heroStatus.account.id,\n            weight: calcStatusWeight(heroStatus),\n          },\n          ...nestedDescendants.map((s) => ({\n            id: s.id,\n            account: s.account,\n            accountID: s.account.id,\n            descendant: true,\n            thread: s.account.id === heroStatus.account.id,\n            weight: calcStatusWeight(s),\n            replies: expandReplies(s.__replies),\n          })),\n        ];\n\n        setUIState('default');\n        scrollOffsets.current = {\n          offsetTop: heroStatusRef.current?.offsetTop,\n          scrollTop: scrollableRef.current?.scrollTop,\n        };\n\n        // Set limit to hero's index\n        const heroLimit = allStatuses.findIndex((s) => s.id === id);\n        if (heroLimit >= limit) {\n          setLimit(heroLimit + 1);\n        }\n\n        console.log({ allStatuses });\n        setStatuses(allStatuses);\n        cachedStatusesMap[id] = allStatuses;\n\n        // Let's threadify this one\n        // Note that all non-hero statuses will trigger saveStatus which will threadify them too\n        // By right, at this point, all descendant statuses should be cached\n        threadifyStatus(heroStatus, instance);\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n\n    lastInitContextTS.current = Date.now();\n\n    return () => {\n      clearTimeout(heroTimer);\n    };\n  };\n\n  useEffect(initContext, [id, masto]);\n\n  const [showRefresh, setShowRefresh] = useState(false);\n  useEffect(() => {\n    let interval = setInterval(() => {\n      const now = Date.now();\n      if (\n        lastInitContextTS.current &&\n        now - lastInitContextTS.current >= 60_000\n      ) {\n        setShowRefresh(true);\n      }\n    }, 60_000); // 1 minute\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n\n  useLayoutEffect(() => {\n    if (!statuses.length) return;\n    console.debug('STATUSES', statuses);\n    const scrollPosition = scrollPositions[id];\n    console.debug('scrollPosition', scrollPosition);\n    if (!!scrollPosition) {\n      console.debug('Case 1', {\n        id,\n        scrollPosition,\n      });\n      scrollableRef.current.scrollTop = scrollPosition;\n    } else if (scrollOffsets.current) {\n      const newScrollOffsets = {\n        offsetTop: heroStatusRef.current?.offsetTop,\n        scrollTop: scrollableRef.current?.scrollTop,\n      };\n      const newScrollTop =\n        newScrollOffsets.offsetTop -\n        scrollOffsets.current.offsetTop +\n        newScrollOffsets.scrollTop;\n      console.debug('Case 2', {\n        scrollOffsets: scrollOffsets.current,\n        newScrollOffsets,\n        newScrollTop,\n        statuses: [...statuses],\n      });\n      scrollableRef.current.scrollTop = newScrollTop;\n    } else if (statuses.length === 1) {\n      console.debug('Case 3', {\n        id,\n      });\n      scrollableRef.current.scrollTop = 0;\n    }\n\n    // RESET\n    scrollOffsets.current = null;\n  }, [statuses]);\n\n  useEffect(() => {\n    if (snapStates.reloadStatusPage <= 0) return;\n    // Delete the cache for the context\n    (async () => {\n      try {\n        const { instanceURL } = getCurrentAccount();\n        const contextURL = `https://${instanceURL}/api/v1/statuses/${id}/context`;\n        console.log('Clear cache', contextURL);\n        const apiCache = await caches.open('api');\n        await apiCache.delete(contextURL, { ignoreVary: true });\n\n        return initContext({\n          reloadHero: true,\n        });\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [snapStates.reloadStatusPage]);\n\n  useEffect(() => {\n    return () => {\n      // RESET\n      scrollPositions = {};\n      states.reloadStatusPage = 0;\n      cachedStatusesMap = {};\n      cachedRepliesToggle = {};\n      statusWeightCache.clear();\n    };\n  }, []);\n\n  const heroStatus = snapStates.statuses[sKey] || snapStates.statuses[id];\n  const heroDisplayName = useMemo(() => {\n    // Remove shortcodes from display name\n    if (!heroStatus) return '';\n    const { account } = heroStatus;\n    const div = document.createElement('div');\n    div.innerHTML = account.displayName;\n    return div.innerText.trim();\n  }, [heroStatus]);\n  const heroContentText = useMemo(() => {\n    if (!heroStatus) return '';\n    let text = statusPeek(heroStatus);\n    if (text.length > 64) {\n      // \"The title should ideally be less than 64 characters in length\"\n      // https://www.w3.org/Provider/Style/TITLE.html\n      text = text.slice(0, 64) + '…';\n    }\n    return text;\n  }, [heroStatus]);\n  useTitle(\n    heroDisplayName && heroContentText\n      ? `${heroDisplayName}: \"${heroContentText}\"`\n      : 'Status',\n    '/:instance?/s/:id',\n  );\n\n  const postInstance = useMemo(() => {\n    if (!heroStatus) return;\n    const { url } = heroStatus;\n    if (!url) return;\n    return new URL(url).hostname;\n  }, [heroStatus]);\n  const postSameInstance = useMemo(() => {\n    if (!postInstance) return;\n    return postInstance === instance;\n  }, [postInstance, instance]);\n\n  const [limit, setLimit] = useState(LIMIT);\n  const showMore = useMemo(() => {\n    // return number of statuses to show\n    return statuses.length - limit;\n  }, [statuses.length, limit]);\n\n  const hasDescendants = statuses.some((s) => s.descendant);\n  const ancestors = statuses.filter((s) => s.ancestor);\n\n  const [heroInView, setHeroInView] = useState(true);\n  const heroPointer = useMemo(() => {\n    // get top offset of heroStatus\n    if (!heroStatusRef.current || heroInView) return null;\n    const { top } = heroStatusRef.current.getBoundingClientRect();\n    return top > 0 ? 'down' : 'up';\n  }, [heroInView]);\n\n  useHotkeys(\n    'esc',\n    () => {\n      location.hash = closeLink;\n    },\n    {\n      // If media is open, esc to close media first\n      // Else close the status page\n      enabled: !showMedia,\n      ignoreEventWhen: (e) => {\n        const hasModal = !!document.querySelector('#modal-container > *');\n        return hasModal;\n      },\n    },\n  );\n  // For backspace, will always close both media and status page\n  useHotkeys('backspace', () => {\n    location.hash = closeLink;\n  });\n\n  useHotkeys('j', () => {\n    const activeStatus = document.activeElement.closest(\n      '.status-link, .status-focus',\n    );\n    const activeStatusRect = activeStatus?.getBoundingClientRect();\n    const allStatusLinks = Array.from(\n      scrollableRef.current.querySelectorAll(STATUSES_SELECTOR),\n    );\n    console.log({ allStatusLinks });\n    if (\n      activeStatus &&\n      activeStatusRect.top < scrollableRef.current.clientHeight &&\n      activeStatusRect.bottom > 0\n    ) {\n      const activeStatusIndex = allStatusLinks.indexOf(activeStatus);\n      let nextStatus = allStatusLinks[activeStatusIndex + 1];\n      if (nextStatus) {\n        nextStatus.focus();\n        nextStatus.scrollIntoView(scrollIntoViewOptions);\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostStatusLink = allStatusLinks.find((statusLink) => {\n        const statusLinkRect = statusLink.getBoundingClientRect();\n        return statusLinkRect.top >= 44 && statusLinkRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostStatusLink) {\n        topmostStatusLink.focus();\n        topmostStatusLink.scrollIntoView(scrollIntoViewOptions);\n      }\n    }\n  });\n\n  useHotkeys('k', () => {\n    const activeStatus = document.activeElement.closest(\n      '.status-link, .status-focus',\n    );\n    const activeStatusRect = activeStatus?.getBoundingClientRect();\n    const allStatusLinks = Array.from(\n      scrollableRef.current.querySelectorAll(STATUSES_SELECTOR),\n    );\n    if (\n      activeStatus &&\n      activeStatusRect.top < scrollableRef.current.clientHeight &&\n      activeStatusRect.bottom > 0\n    ) {\n      const activeStatusIndex = allStatusLinks.indexOf(activeStatus);\n      let prevStatus = allStatusLinks[activeStatusIndex - 1];\n      if (prevStatus) {\n        prevStatus.focus();\n        prevStatus.scrollIntoView(scrollIntoViewOptions);\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostStatusLink = allStatusLinks.find((statusLink) => {\n        const statusLinkRect = statusLink.getBoundingClientRect();\n        return statusLinkRect.top >= 44 && statusLinkRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostStatusLink) {\n        topmostStatusLink.focus();\n        topmostStatusLink.scrollIntoView(scrollIntoViewOptions);\n      }\n    }\n  });\n\n  // NOTE: I'm not sure if 'x' is the best shortcut for this, might change it later\n  // IDEA: x is for expand\n  useHotkeys('x', () => {\n    const activeStatus = document.activeElement.closest(\n      '.status-link, .status-focus',\n    );\n    if (activeStatus) {\n      const details = activeStatus.nextElementSibling;\n      if (details && details.tagName.toLowerCase() === 'details') {\n        details.open = !details.open;\n      }\n    }\n  });\n\n  const [reachTopPost, setReachTopPost] = useState(false);\n  // const { nearReachStart } = useScroll({\n  //   scrollableRef,\n  //   distanceFromStartPx: 16,\n  // });\n\n  const initialPageState = useRef(showMedia ? 'media+status' : 'status');\n\n  const handleMediaClick = useCallback(\n    (e, i, media, status) => {\n      e.preventDefault();\n      e.stopPropagation();\n      setSearchParams({\n        media: i + 1,\n        mediaStatusID: status.id,\n      });\n    },\n    [id],\n  );\n\n  const handleStatusLinkClick = useCallback((e, status) => {\n    resetScrollPosition(status.id);\n  }, []);\n\n  useEffect(() => {\n    let timer;\n    if (mediaStatusID && showMedia) {\n      timer = setTimeout(() => {\n        const status = scrollableRef.current?.querySelector(\n          `.status-link[href*=\"/${mediaStatusID}\"]`,\n        );\n        if (status) {\n          status.scrollIntoView(scrollIntoViewOptions);\n        }\n      }, 400); // After CSS transition\n    }\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [mediaStatusID, showMedia]);\n\n  const renderStatus = useCallback(\n    (status, i) => {\n      const {\n        id: statusID,\n        ancestor,\n        isThread,\n        descendant,\n        thread,\n        replies,\n        repliesCount,\n        weight,\n      } = status;\n      const isHero = statusID === id;\n      const isLinkable = isThread || ancestor;\n\n      return (\n        <li\n          key={statusID}\n          ref={isHero ? heroStatusRef : null}\n          class={`${ancestor ? 'ancestor' : ''} ${\n            descendant ? 'descendant' : ''\n          } ${thread ? 'thread' : ''} ${isHero ? 'hero' : ''}`}\n        >\n          {isHero ? (\n            <>\n              <InView\n                threshold={0.1}\n                onChange={(inView) => {\n                  queueMicrotask(() => {\n                    requestAnimationFrame(() => {\n                      setHeroInView(inView);\n                    });\n                  });\n                }}\n                class=\"status-focus\"\n                tabIndex={0}\n              >\n                <Status\n                  statusID={statusID}\n                  instance={instance}\n                  withinContext\n                  size=\"l\"\n                  enableTranslate\n                  forceTranslate={translate}\n                />\n              </InView>\n              {uiState !== 'loading' && !authenticated ? (\n                <div class=\"post-status-banner\">\n                  <p>\n                    You're not logged in. Interactions (reply, boost, etc) are\n                    not possible.\n                  </p>\n                  <Link to=\"/login\" class=\"button\">\n                    Log in\n                  </Link>\n                </div>\n              ) : (\n                !sameInstance && (\n                  <div class=\"post-status-banner\">\n                    <p>\n                      This post is from another instance (<b>{instance}</b>).\n                      Interactions (reply, boost, etc) are not possible.\n                    </p>\n                    <button\n                      type=\"button\"\n                      disabled={uiState === 'loading'}\n                      onClick={() => {\n                        setUIState('loading');\n                        (async () => {\n                          try {\n                            const results = await currentMasto.v2.search.fetch({\n                              q: heroStatus.url,\n                              type: 'statuses',\n                              resolve: true,\n                              limit: 1,\n                            });\n                            if (results.statuses.length) {\n                              const status = results.statuses[0];\n                              location.hash = currentInstance\n                                ? `/${currentInstance}/s/${status.id}`\n                                : `/s/${status.id}`;\n                            } else {\n                              throw new Error('No results');\n                            }\n                          } catch (e) {\n                            setUIState('default');\n                            alert('Error: ' + e);\n                            console.error(e);\n                          }\n                        })();\n                      }}\n                    >\n                      <Icon icon=\"transfer\" /> Switch to my instance to enable\n                      interactions\n                    </button>\n                  </div>\n                )\n              )}\n            </>\n          ) : (\n            <StatusParent\n              linkable={isLinkable}\n              to={instance ? `/${instance}/s/${statusID}` : `/s/${statusID}`}\n              onClick={() => {\n                resetScrollPosition(statusID);\n              }}\n            >\n              {/* <Link\n              class=\"status-link\"\n              to={instance ? `/${instance}/s/${statusID}` : `/s/${statusID}`}\n              onClick={() => {\n                resetScrollPosition(statusID);\n              }}\n            > */}\n              {i === 0 && ancestor ? (\n                <InView\n                  threshold={0.5}\n                  onChange={(inView) => {\n                    queueMicrotask(() => {\n                      requestAnimationFrame(() => {\n                        setReachTopPost(inView);\n                      });\n                    });\n                  }}\n                >\n                  <Status\n                    statusID={statusID}\n                    instance={instance}\n                    withinContext\n                    size={thread || ancestor ? 'm' : 's'}\n                    enableTranslate\n                    onMediaClick={handleMediaClick}\n                    onStatusLinkClick={handleStatusLinkClick}\n                  />\n                </InView>\n              ) : (\n                <Status\n                  statusID={statusID}\n                  instance={instance}\n                  withinContext\n                  size={thread || ancestor ? 'm' : 's'}\n                  enableTranslate\n                  onMediaClick={handleMediaClick}\n                  onStatusLinkClick={handleStatusLinkClick}\n                  showActionsBar={!!descendant}\n                />\n              )}\n              {ancestor && repliesCount > 1 && (\n                <div class=\"replies-link\">\n                  <Icon icon=\"comment2\" />{' '}\n                  <span title={repliesCount}>\n                    {shortenNumber(repliesCount)}\n                  </span>\n                </div>\n              )}{' '}\n              {/* {replies?.length > LIMIT && (\n                        <div class=\"replies-link\">\n                          <Icon icon=\"comment\" />{' '}\n                          <span title={replies.length}>\n                            {shortenNumber(replies.length)}\n                          </span>\n                        </div>\n                      )} */}\n            </StatusParent>\n            // </Link>\n          )}\n          {descendant && replies?.length > 0 && (\n            <SubComments\n              instance={instance}\n              replies={replies}\n              hasParentThread={thread}\n              level={1}\n              accWeight={weight}\n              openAll={totalDescendants.current < SUBCOMMENTS_OPEN_ALL_LIMIT}\n              parentLink={{\n                to: instance ? `/${instance}/s/${statusID}` : `/s/${statusID}`,\n                onClick: () => resetScrollPosition(statusID),\n              }}\n            />\n          )}\n          {uiState === 'loading' &&\n            isHero &&\n            !!heroStatus?.repliesCount &&\n            !hasDescendants && (\n              <div class=\"status-loading\">\n                <Loader abrupt={heroStatus.repliesCount >= 3} />\n              </div>\n            )}\n          {uiState === 'error' &&\n            isHero &&\n            !!heroStatus?.repliesCount &&\n            !hasDescendants && (\n              <div class=\"status-error\">\n                Unable to load replies.\n                <br />\n                <button\n                  type=\"button\"\n                  class=\"plain\"\n                  onClick={() => {\n                    states.reloadStatusPage++;\n                  }}\n                >\n                  Try again\n                </button>\n              </div>\n            )}\n        </li>\n      );\n    },\n    [\n      id,\n      instance,\n      uiState,\n      authenticated,\n      sameInstance,\n      translate,\n      handleMediaClick,\n      handleStatusLinkClick,\n      hasDescendants,\n    ],\n  );\n\n  const prevLocationIsStatusPage = useMemo(() => {\n    // Navigation API\n    if ('navigation' in window && navigation?.entries) {\n      const prevEntry = navigation.entries()[navigation.currentEntry.index - 1];\n      if (prevEntry?.url) {\n        return STATUS_URL_REGEX.test(prevEntry.url);\n      }\n    }\n    return STATUS_URL_REGEX.test(states.prevLocation?.pathname);\n  }, [sKey]);\n\n  const moreStatusesKeys = useMemo(() => {\n    if (!showMore) return [];\n    const ids = [];\n    function getIDs(status) {\n      ids.push(status.id);\n      if (status.replies) {\n        status.replies.forEach(getIDs);\n      }\n    }\n    statuses.slice(limit).forEach(getIDs);\n    return ids.map((id) => statusKey(id, instance));\n  }, [showMore, statuses, limit, instance]);\n\n  const statusesList = useMemo(\n    () => statuses.slice(0, limit).map(renderStatus),\n    [statuses, limit, renderStatus],\n  );\n\n  return (\n    <div\n      tabIndex=\"-1\"\n      ref={scrollableRef}\n      class={`status-deck deck contained ${\n        statuses.length > 1 ? 'padded-bottom' : ''\n      } ${\n        initialPageState.current === 'status' && !firstLoad.current\n          ? 'slide-in'\n          : ''\n      } ${viewMode ? `deck-view-${viewMode}` : ''}`}\n      onAnimationEnd={(e) => {\n        // Fix the bounce effect when switching viewMode\n        // `slide-in` animation kicks in when switching viewMode\n        if (initialPageState.current === 'status') {\n          // e.target.classList.remove('slide-in');\n          initialPageState.current = null;\n        }\n      }}\n    >\n      <header\n        class={`${uiState === 'loading' ? 'loading' : ''}`}\n        onDblClick={(e) => {\n          // reload statuses\n          states.reloadStatusPage++;\n        }}\n      >\n        {/* <div>\n            <Link class=\"button plain deck-close\" href={closeLink}>\n              <Icon icon=\"chevron-left\" size=\"xl\" />\n            </Link>\n          </div> */}\n        <div class=\"header-grid header-grid-2\">\n          <h1>\n            {prevLocationIsStatusPage && (\n              <button\n                type=\"button\"\n                class=\"plain deck-back\"\n                onClick={() => {\n                  history.back();\n                }}\n              >\n                <Icon icon=\"chevron-left\" size=\"xl\" />\n              </button>\n            )}\n            {!heroInView && heroStatus && uiState !== 'loading' ? (\n              <>\n                <span class=\"hero-heading\">\n                  <NameText\n                    account={heroStatus.account}\n                    instance={instance}\n                    showAvatar\n                    short\n                  />{' '}\n                  <span class=\"insignificant\">\n                    &bull;{' '}\n                    <RelativeTime\n                      datetime={heroStatus.createdAt}\n                      format=\"micro\"\n                    />\n                  </span>\n                </span>{' '}\n                <button\n                  type=\"button\"\n                  class=\"ancestors-indicator light small\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    heroStatusRef.current.scrollIntoView({\n                      behavior: 'smooth',\n                      block: 'start',\n                    });\n                  }}\n                  title=\"Go to main post\"\n                >\n                  <Icon\n                    icon={heroPointer === 'down' ? 'arrow-down' : 'arrow-up'}\n                  />\n                </button>\n              </>\n            ) : (\n              <>\n                Post{' '}\n                <button\n                  type=\"button\"\n                  class=\"ancestors-indicator light small\"\n                  onClick={(e) => {\n                    // Scroll to top\n                    e.preventDefault();\n                    e.stopPropagation();\n                    scrollableRef.current.scrollTo({\n                      top: 0,\n                      behavior: 'smooth',\n                    });\n                  }}\n                  hidden={!ancestors.length || reachTopPost}\n                  title={`${ancestors.length} posts above ‒ Go to top`}\n                >\n                  <Icon icon=\"arrow-up\" />\n                  {ancestors\n                    .filter(\n                      (a, i, arr) =>\n                        arr.findIndex((b) => b.accountID === a.accountID) === i,\n                    )\n                    .slice(0, 3)\n                    .map((ancestor) => (\n                      <Avatar\n                        key={ancestor.account.id}\n                        url={ancestor.account.avatar}\n                        alt={ancestor.account.displayName}\n                      />\n                    ))}\n                  {/* <Icon icon=\"comment\" />{' '} */}\n                  {ancestors.length > 3 && (\n                    <>\n                      {' '}\n                      <span class=\"insignificant\">\n                        {shortenNumber(ancestors.length)}\n                      </span>\n                    </>\n                  )}\n                </button>\n              </>\n            )}\n          </h1>\n          <div class=\"header-side\">\n            <button\n              type=\"button\"\n              class=\"plain4 button-switch-view\"\n              style={{\n                display: viewMode === 'full' ? '' : 'none',\n              }}\n              onClick={() => {\n                setViewMode(null);\n                searchParams.delete('media');\n                searchParams.delete('media-only');\n                searchParams.delete('view');\n                setSearchParams(searchParams);\n              }}\n              title=\"Switch to Side Peek view\"\n            >\n              <Icon icon=\"layout4\" size=\"l\" />\n            </button>\n            {showRefresh && (\n              <button\n                type=\"button\"\n                class=\"plain button-refresh\"\n                onClick={() => {\n                  states.reloadStatusPage++;\n                  setShowRefresh(false);\n                }}\n              >\n                <Icon icon=\"refresh\" size=\"l\" />\n              </button>\n            )}\n            <Menu2\n              align=\"end\"\n              portal={{\n                // Need this, else the menu click will cause scroll jump\n                target: scrollableRef.current,\n              }}\n              menuButton={\n                <button type=\"button\" class=\"button plain4\">\n                  <Icon icon=\"more\" alt=\"Actions\" size=\"xl\" />\n                </button>\n              }\n            >\n              <MenuItem\n                disabled={uiState === 'loading'}\n                onClick={() => {\n                  states.reloadStatusPage++;\n                }}\n              >\n                <Icon icon=\"refresh\" />\n                <span>Refresh</span>\n              </MenuItem>\n              <MenuItem\n                className=\"menu-switch-view\"\n                onClick={() => {\n                  setViewMode(viewMode === 'full' ? null : 'full');\n                  searchParams.delete('media');\n                  searchParams.delete('media-only');\n                  if (viewMode === 'full') {\n                    searchParams.delete('view');\n                  } else {\n                    searchParams.set('view', 'full');\n                  }\n                  setSearchParams(searchParams);\n                }}\n              >\n                <Icon\n                  icon={\n                    {\n                      '': 'layout5',\n                      full: 'layout4',\n                    }[viewMode || '']\n                  }\n                />\n                <span>\n                  Switch to {viewMode === 'full' ? 'Side Peek' : 'Full'} view\n                </span>\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  // Click all buttons with class .spoiler but not .spoiling\n                  const buttons = Array.from(\n                    scrollableRef.current.querySelectorAll(\n                      '.spoiler-button:not(.spoiling), .spoiler-media-button:not(.spoiling)',\n                    ),\n                  );\n                  buttons.forEach((button) => {\n                    button.click();\n                  });\n                }}\n              >\n                <Icon icon=\"eye-open\" /> <span>Show all sensitive content</span>\n              </MenuItem>\n              <MenuDivider />\n              <MenuHeader className=\"plain\">Experimental</MenuHeader>\n              <MenuItem\n                disabled={!postInstance || postSameInstance}\n                onClick={() => {\n                  const statusURL = getInstanceStatusURL(heroStatus.url);\n                  if (statusURL) {\n                    location.hash = statusURL;\n                  } else {\n                    alert('Unable to switch');\n                  }\n                }}\n              >\n                <Icon icon=\"transfer\" />\n                <small class=\"menu-double-lines\">\n                  Switch to post's instance\n                  {postInstance ? (\n                    <>\n                      {' '}\n                      (<b>{punycode.toUnicode(postInstance)}</b>)\n                    </>\n                  ) : (\n                    ''\n                  )}\n                </small>\n              </MenuItem>\n            </Menu2>\n            <Link class=\"button plain deck-close\" to={closeLink}>\n              <Icon icon=\"x\" size=\"xl\" />\n            </Link>\n          </div>\n        </div>\n      </header>\n      {!!statuses.length && heroStatus ? (\n        <ul\n          class={`timeline flat contextual grow ${\n            uiState === 'loading' ? 'loading' : ''\n          }`}\n        >\n          {statusesList}\n          {showMore > 0 && (\n            <li>\n              <button\n                type=\"button\"\n                class=\"plain block show-more\"\n                disabled={uiState === 'loading'}\n                onClick={() => setLimit((l) => l + LIMIT)}\n                style={{ marginBlockEnd: '6em' }}\n                data-state-post-ids={moreStatusesKeys.join(' ')}\n              >\n                <div class=\"ib avatars-bunch\">\n                  {/* show avatars for first 5 statuses */}\n                  {statuses.slice(limit, limit + 5).map((status) => (\n                    <Avatar\n                      key={status.id}\n                      url={status.account.avatarStatic}\n                      // title={`${status.avatar.displayName} (@${status.avatar.acct})`}\n                    />\n                  ))}\n                </div>{' '}\n                <div class=\"ib\">\n                  Show more&hellip;{' '}\n                  <span class=\"tag\">\n                    {showMore > LIMIT ? `${LIMIT}+` : showMore}\n                  </span>\n                </div>\n              </button>\n            </li>\n          )}\n        </ul>\n      ) : (\n        <>\n          {uiState === 'loading' && (\n            <ul class=\"timeline flat contextual grow loading\">\n              <li>\n                <Status skeleton size=\"l\" />\n              </li>\n            </ul>\n          )}\n          {uiState === 'error' && (\n            <p class=\"ui-state\">\n              Unable to load post\n              <br />\n              <br />\n              <button\n                type=\"button\"\n                onClick={() => {\n                  states.reloadStatusPage++;\n                }}\n              >\n                Try again\n              </button>\n            </p>\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n\nfunction SubComments({\n  replies,\n  instance,\n  hasParentThread,\n  level,\n  accWeight,\n  openAll,\n  parentLink,\n}) {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  // Total comments count, including sub-replies\n  const diveDeep = (replies) => {\n    return replies.reduce((acc, reply) => {\n      const { repliesCount, replies } = reply;\n      const count = replies?.length || repliesCount;\n      return acc + count + diveDeep(replies || []);\n    }, 0);\n  };\n  const totalComments = replies.length + diveDeep(replies);\n  const sameCount = replies.length === totalComments;\n\n  // Get the first 3 accounts, unique by id\n  const accounts = replies\n    .map((r) => r.account)\n    .filter((a, i, arr) => arr.findIndex((b) => b.id === a.id) === i)\n    .slice(0, 3);\n\n  const totalWeight = useMemo(() => {\n    return replies?.reduce((acc, reply) => {\n      return acc + reply?.weight;\n    }, accWeight);\n  }, [accWeight, replies?.length]);\n\n  let open = false;\n  if (openAll) {\n    open = true;\n  } else if (totalWeight <= MAX_WEIGHT) {\n    open = true;\n  } else if (!hasParentThread && totalComments === 1) {\n    const shortReply = calcStatusWeight(replies[0]) < 2;\n    if (shortReply) open = true;\n  }\n  const openBefore = cachedRepliesToggle[replies[0].id];\n\n  const handleMediaClick = useCallback((e, i, media, status) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setSearchParams({\n      media: i + 1,\n      mediaStatusID: status.id,\n    });\n  }, []);\n\n  const detailsRef = useRef();\n  useLayoutEffect(() => {\n    function handleScroll(e) {\n      e.target.dataset.scrollLeft = e.target.scrollLeft;\n    }\n    detailsRef.current?.addEventListener('scroll', handleScroll, {\n      passive: true,\n    });\n    return () => {\n      detailsRef.current?.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n\n  return (\n    <details\n      ref={detailsRef}\n      class=\"replies\"\n      open={openBefore || open}\n      onToggle={(e) => {\n        const { open } = e.target;\n        // use first reply as ID\n        cachedRepliesToggle[replies[0].id] = open;\n      }}\n      style={{\n        '--comments-level': level,\n      }}\n      data-comments-level={level}\n      data-comments-level-overflow={level > 4}\n    >\n      <summary class=\"replies-summary\" hidden={open}>\n        <span class=\"avatars\">\n          {accounts.map((a) => (\n            <Avatar\n              key={a.id}\n              url={a.avatarStatic}\n              title={`${a.displayName} @${a.username}`}\n              squircle={a?.bot}\n            />\n          ))}\n        </span>\n        <span class=\"replies-counts\">\n          <b>\n            <span title={replies.length}>{shortenNumber(replies.length)}</span>{' '}\n            repl\n            {replies.length === 1 ? 'y' : 'ies'}\n          </b>\n          {!sameCount && totalComments > 1 && (\n            <>\n              {' '}\n              &middot;{' '}\n              <span>\n                <span title={totalComments}>\n                  {shortenNumber(totalComments)}\n                </span>{' '}\n                comment\n                {totalComments === 1 ? '' : 's'}\n              </span>\n            </>\n          )}\n        </span>\n        <Icon icon=\"chevron-down\" class=\"replies-summary-chevron\" />\n        {!!parentLink && (\n          <Link\n            class=\"replies-parent-link\"\n            to={parentLink.to}\n            onClick={parentLink.onClick}\n            title=\"View post with its replies\"\n          >\n            &raquo;\n          </Link>\n        )}\n      </summary>\n      <ul>\n        {replies.map((r) => (\n          <li key={r.id}>\n            {/* <Link\n              class=\"status-link\"\n              to={instance ? `/${instance}/s/${r.id}` : `/s/${r.id}`}\n              onClick={() => {\n                resetScrollPosition(r.id);\n              }}\n            > */}\n            <div class=\"status-focus\" tabIndex={0}>\n              <Status\n                statusID={r.id}\n                instance={instance}\n                withinContext\n                size=\"s\"\n                enableTranslate\n                onMediaClick={handleMediaClick}\n                showActionsBar\n              />\n              {!r.replies?.length && r.repliesCount > 0 && (\n                <div class=\"replies-link\">\n                  <Icon icon=\"comment2\" />{' '}\n                  <span title={r.repliesCount}>\n                    {shortenNumber(r.repliesCount)}\n                  </span>\n                </div>\n              )}\n            </div>\n            {/* </Link> */}\n            {r.replies?.length && (\n              <SubComments\n                instance={instance}\n                replies={r.replies}\n                level={level + 1}\n                accWeight={!open ? r.weight : totalWeight}\n                openAll={openAll}\n                parentLink={{\n                  to: instance ? `/${instance}/s/${r.id}` : `/s/${r.id}`,\n                  onClick: () => {\n                    resetScrollPosition(r.id);\n                  },\n                }}\n              />\n            )}\n          </li>\n        ))}\n      </ul>\n    </details>\n  );\n}\n\nconst MEDIA_VIRTUAL_LENGTH = 140;\nconst POLL_VIRTUAL_LENGTH = 35;\nconst CARD_VIRTUAL_LENGTH = 70;\nconst WEIGHT_SEGMENT = 140;\nconst statusWeightCache = new Map();\nfunction calcStatusWeight(status) {\n  const cachedWeight = statusWeightCache.get(status.id);\n  if (cachedWeight) return cachedWeight;\n  const { spoilerText, content, mediaAttachments, poll, card } = status;\n  const length = htmlContentLength(spoilerText + content);\n  const mediaLength = mediaAttachments?.length ? MEDIA_VIRTUAL_LENGTH : 0;\n  const pollLength = (poll?.options?.length || 0) * POLL_VIRTUAL_LENGTH;\n  const cardLength =\n    card && (mediaAttachments?.length || poll?.options?.length)\n      ? 0\n      : CARD_VIRTUAL_LENGTH;\n  const totalLength = length + mediaLength + pollLength + cardLength;\n  const weight = totalLength / WEIGHT_SEGMENT;\n  statusWeightCache.set(status.id, weight);\n  return weight;\n}\n\nexport default memo(StatusPage);\n","import { useParams } from 'react-router-dom';\n\nimport Status from './status';\n\nexport default function StatusRoute() {\n  const params = useParams();\n  const { id, instance } = params;\n  return <Status id={id} instance={instance} />;\n}\n","export default \"__VITE_ASSET__W5CngKHO__\"","export default \"__VITE_ASSET__vmqRZ5q5__\"","export default \"__VITE_ASSET__DFAo1Udm__\"","export default \"__VITE_ASSET__D2_o1n6___\"","export default \"__VITE_ASSET__ySLnBMku__\"","export default \"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20xml:space='preserve'%20fill-rule='evenodd'%20stroke-linejoin='round'%20stroke-miterlimit='2'%20clip-rule='evenodd'%20viewBox='0%200%20102%2028'%3e%3cpath%20fill='none'%20d='M0%200h101.5v27.5H0z'/%3e%3cg%20fill-rule='nonzero'%3e%3cpath%20fill='url(%23a)'%20d='M2.32%2021.85c1.4%200%202.21-.85%202.21-2.3v-4.64H8.5c4.45%200%207.54-2.9%207.54-7.24%200-4.35-2.98-7.24-7.32-7.24h-6.4C.93.43.11%201.28.11%202.73v16.82c0%201.45.82%202.3%202.21%202.3Zm2.21-10.4V3.94h3c2.54%200%204%201.34%204%203.75s-1.47%203.76-4%203.76h-3Z'/%3e%3cpath%20fill='url(%23b)'%20d='M20.52%2021.88c1.25%200%202.13-.76%202.13-2.23v-7.04c0-2.07%201.2-3.49%203.21-3.49%201.95%200%202.95%201.23%202.95%203.25v7.28c0%201.47.89%202.23%202.13%202.23%201.26%200%202.14-.76%202.14-2.23v-8.18c0-3.64-1.99-5.9-5.48-5.9-2.38%200-4.1%201.12-4.93%203.1h-.09V2.3c0-1.38-.78-2.2-2.1-2.2-1.31%200-2.1.82-2.1%202.2v17.34c0%201.47.9%202.23%202.14%202.23Z'/%3e%3cpath%20fill='url(%23c)'%20d='M40.45%2021.82c1.96%200%203.93-.98%204.8-2.65h.1v.8c.08%201.27.89%201.91%202.05%201.91%201.21%200%202.08-.73%202.08-2.15v-8.95c0-3.17-2.63-5.25-6.65-5.25-3.26%200-5.78%201.16-6.5%203.04-.15.32-.23.63-.23.96%200%20.97.75%201.64%201.79%201.64.69%200%201.23-.26%201.7-.79.95-1.23%201.74-1.65%203.04-1.65%201.62%200%202.64.85%202.64%202.31v1.04l-3.95.24c-3.93.23-6.13%201.88-6.13%204.74%200%202.83%202.27%204.76%205.26%204.76Zm1.4-3.09c-1.43%200-2.4-.73-2.4-1.9%200-1.12.91-1.83%202.51-1.95l3.31-.2v1.14c0%201.7-1.54%202.91-3.41%202.91Z'/%3e%3cpath%20fill='url(%23d)'%20d='M54.37%2021.88c1.26%200%202.14-.76%202.14-2.23v-7.09c0-2.03%201.21-3.44%203.13-3.44s2.89%201.17%202.89%203.22v7.31c0%201.47.88%202.23%202.14%202.23%201.24%200%202.13-.76%202.13-2.23v-8.2c0-3.68-1.96-5.87-5.45-5.87-2.41%200-4%201.07-4.83%203.01h-.09v-.87c0-1.35-.85-2.17-2.14-2.17-1.28%200-2.06.82-2.06%202.15v11.95c0%201.47.9%202.23%202.14%202.23Z'/%3e%3cpath%20fill='url(%23e)'%20d='M71.65%2027.17c1.26%200%202.14-.76%202.14-2.23v-6h.09a5.15%205.15%200%200%200%204.88%202.88c3.92%200%206.35-3.05%206.35-8.1%200-5.07-2.44-8.1-6.43-8.1a5.12%205.12%200%200%200-4.86%202.99h-.09v-.85c0-1.45-.88-2.21-2.1-2.21-1.24%200-2.11.76-2.11%202.2v17.2c0%201.46.89%202.22%202.13%202.22Zm5.6-8.8c-2.1%200-3.47-1.8-3.47-4.65%200-2.81%201.37-4.67%203.47-4.67%202.14%200%203.49%201.83%203.49%204.67%200%202.86-1.35%204.66-3.5%204.66Z'/%3e%3cpath%20fill='url(%23f)'%20d='M89.61%2027.39c3.44%200%205.26-1.5%206.73-5.55l4.81-13.1a4%204%200%200%200%20.24-1.26c0-1.13-.85-1.93-2.08-1.93-1.1%200-1.71.51-2.07%201.7l-3.4%2010.9h-.08L90.35%207.28c-.36-1.25-.94-1.73-2.07-1.73-1.26%200-2.21.83-2.21%201.99%200%20.35.09.82.25%201.26l5%2013.21-.21.56c-.52%201.1-1.32%201.42-2.07%201.42l-.75-.01c-.96%200-1.56.54-1.56%201.4%200%201.29%201%202%202.88%202Z'/%3e%3c/g%3e%3cdefs%3e%3cradialGradient%20id='a'%20cx='0'%20cy='0'%20r='1'%20gradientTransform='rotate(28.51%20.06%20.22)%20scale(57.6252)'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20offset='0'%20stop-color='%23a4bff7'/%3e%3cstop%20offset='1'%20stop-color='%236081e6'/%3e%3c/radialGradient%3e%3cradialGradient%20id='b'%20cx='0'%20cy='0'%20r='1'%20gradientTransform='rotate(28.51%20.06%20.22)%20scale(57.6252)'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20offset='0'%20stop-color='%23a4bff7'/%3e%3cstop%20offset='1'%20stop-color='%236081e6'/%3e%3c/radialGradient%3e%3cradialGradient%20id='c'%20cx='0'%20cy='0'%20r='1'%20gradientTransform='rotate(28.51%20.06%20.22)%20scale(57.6252)'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20offset='0'%20stop-color='%23a4bff7'/%3e%3cstop%20offset='1'%20stop-color='%236081e6'/%3e%3c/radialGradient%3e%3cradialGradient%20id='d'%20cx='0'%20cy='0'%20r='1'%20gradientTransform='rotate(28.51%20.06%20.22)%20scale(57.6252)'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20offset='0'%20stop-color='%23a4bff7'/%3e%3cstop%20offset='1'%20stop-color='%236081e6'/%3e%3c/radialGradient%3e%3cradialGradient%20id='e'%20cx='0'%20cy='0'%20r='1'%20gradientTransform='rotate(28.51%20.06%20.22)%20scale(57.6252)'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20offset='0'%20stop-color='%23a4bff7'/%3e%3cstop%20offset='1'%20stop-color='%236081e6'/%3e%3c/radialGradient%3e%3cradialGradient%20id='f'%20cx='0'%20cy='0'%20r='1'%20gradientTransform='rotate(28.51%20.06%20.22)%20scale(57.6252)'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20offset='0'%20stop-color='%23a4bff7'/%3e%3cstop%20offset='1'%20stop-color='%236081e6'/%3e%3c/radialGradient%3e%3c/defs%3e%3c/svg%3e\"","import './welcome.css';\n\nimport boostsCarouselUrl from '../assets/features/boosts-carousel.jpg';\nimport groupedNotificationsUrl from '../assets/features/grouped-notifications.jpg';\nimport multiColumnUrl from '../assets/features/multi-column.jpg';\nimport multiHashtagTimelineUrl from '../assets/features/multi-hashtag-timeline.jpg';\nimport nestedCommentsThreadUrl from '../assets/features/nested-comments-thread.jpg';\nimport logoText from '../assets/logo-text.svg';\nimport logo from '../assets/logo.svg';\n\nimport Link from '../components/link';\nimport states from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst {\n  PHANPY_DEFAULT_INSTANCE: DEFAULT_INSTANCE,\n  PHANPY_WEBSITE: WEBSITE,\n  PHANPY_PRIVACY_POLICY_URL: PRIVACY_POLICY_URL,\n  PHANPY_DEFAULT_INSTANCE_REGISTRATION_URL: DEFAULT_INSTANCE_REGISTRATION_URL,\n} = import.meta.env;\nconst appSite = WEBSITE\n  ? WEBSITE.replace(/https?:\\/\\//g, '').replace(/\\/$/, '')\n  : null;\nconst appVersion = __BUILD_TIME__\n  ? `${__BUILD_TIME__.slice(0, 10).replace(/-/g, '.')}${\n      __COMMIT_HASH__ ? `.${__COMMIT_HASH__}` : ''\n    }`\n  : null;\n\nfunction Welcome() {\n  useTitle(null, ['/', '/welcome']);\n  return (\n    <main id=\"welcome\">\n      <div class=\"hero-container\">\n        <div class=\"hero-content\">\n          <h1>\n            <img\n              src={logo}\n              alt=\"\"\n              width=\"160\"\n              height=\"160\"\n              style={{\n                aspectRatio: '1/1',\n                marginBlockEnd: -16,\n              }}\n            />\n            <img src={logoText} alt=\"Phanpy\" width=\"200\" />\n          </h1>\n          <p class=\"desc\">A minimalistic opinionated Mastodon web client.</p>\n          <p>\n            <Link\n              to={\n                DEFAULT_INSTANCE\n                  ? `/login?instance=${DEFAULT_INSTANCE}&submit=1`\n                  : '/login'\n              }\n              class=\"button\"\n            >\n              {DEFAULT_INSTANCE ? 'Log in' : 'Log in with Mastodon'}\n            </Link>\n          </p>\n          {DEFAULT_INSTANCE && DEFAULT_INSTANCE_REGISTRATION_URL && (\n            <p>\n              <a href={DEFAULT_INSTANCE_REGISTRATION_URL} class=\"button plain5\">\n                Sign up\n              </a>\n            </p>\n          )}\n          {!DEFAULT_INSTANCE && (\n            <p class=\"insignificant\">\n              <small>\n                Connect your existing Mastodon/Fediverse account.\n                <br />\n                Your credentials are not stored on this server.\n              </small>\n            </p>\n          )}\n        </div>\n        {(appSite || appVersion) && (\n          <p class=\"app-site-version\">\n            <small>\n              {appSite} {appVersion}\n            </small>\n          </p>\n        )}\n        <p>\n          <a href=\"https://github.com/cheeaun/phanpy\" target=\"_blank\">\n            Built\n          </a>{' '}\n          by{' '}\n          <a\n            href=\"https://mastodon.social/@cheeaun\"\n            target=\"_blank\"\n            onClick={(e) => {\n              e.preventDefault();\n              states.showAccount = 'cheeaun@mastodon.social';\n            }}\n          >\n            @cheeaun\n          </a>\n          .{' '}\n          <a href={PRIVACY_POLICY_URL} target=\"_blank\">\n            Privacy Policy\n          </a>\n          .\n        </p>\n      </div>\n      <div id=\"why-container\">\n        <div class=\"sections\">\n          <section>\n            <img\n              src={boostsCarouselUrl}\n              alt=\"Screenshot of Boosts Carousel\"\n              loading=\"lazy\"\n            />\n            <h4>Boosts Carousel</h4>\n            <p>\n              Visually separate original posts and re-shared posts (boosted\n              posts).\n            </p>\n          </section>\n          <section>\n            <img\n              src={nestedCommentsThreadUrl}\n              alt=\"Screenshot of nested comments thread\"\n              loading=\"lazy\"\n            />\n            <h4>Nested comments thread</h4>\n            <p>Effortlessly follow conversations. Semi-collapsible replies.</p>\n          </section>\n          <section>\n            <img\n              src={groupedNotificationsUrl}\n              alt=\"Screenshot of grouped notifications\"\n              loading=\"lazy\"\n            />\n            <h4>Grouped notifications</h4>\n            <p>\n              Similar notifications are grouped and collapsed to reduce clutter.\n            </p>\n          </section>\n          <section>\n            <img\n              src={multiColumnUrl}\n              alt=\"Screenshot of multi-column UI\"\n              loading=\"lazy\"\n            />\n            <h4>Single or multi-column</h4>\n            <p>\n              By default, single column for zen-mode seekers. Configurable\n              multi-column for power users.\n            </p>\n          </section>\n          <section>\n            <img\n              src={multiHashtagTimelineUrl}\n              alt=\"Screenshot of multi-hashtag timeline with a form to add more hashtags\"\n              loading=\"lazy\"\n            />\n            <h4>Multi-hashtag timeline</h4>\n            <p>Up to 5 hashtags combined into a single timeline.</p>\n          </section>\n        </div>\n      </div>\n    </main>\n  );\n}\n\nexport default Welcome;\n","// Replace alert() with toastify-js\nimport Toastify from 'toastify-js';\n\nconst nativeAlert = window.alert;\nif (!window.__nativeAlert) window.__nativeAlert = nativeAlert;\n\nwindow.alert = function (message) {\n  console.debug(\n    'ALERT: This is a custom alert() function. Native alert() is still available as window.__nativeAlert()',\n  );\n  // If Error object, show the message\n  if (message instanceof Error && message?.message) {\n    message = message.message;\n  }\n  // If not string, stringify it\n  if (typeof message !== 'string') {\n    message = JSON.stringify(message);\n  }\n\n  const toast = Toastify({\n    text: message,\n    className: 'alert',\n    gravity: 'top',\n    position: 'center',\n    duration: 10_000,\n    offset: {\n      y: 48,\n    },\n    onClick: () => {\n      toast.hideToast();\n    },\n  });\n  toast.showToast();\n};\n","import './app.css';\n\nimport debounce from 'just-debounce-it';\nimport {\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'preact/hooks';\nimport { matchPath, Route, Routes, useLocation } from 'react-router-dom';\nimport 'swiped-events';\nimport { subscribe } from 'valtio';\n\nimport BackgroundService from './components/background-service';\nimport ComposeButton from './components/compose-button';\nimport { ICONS } from './components/ICONS';\nimport KeyboardShortcutsHelp from './components/keyboard-shortcuts-help';\nimport Loader from './components/loader';\nimport Modals from './components/modals';\nimport NotificationService from './components/notification-service';\nimport SearchCommand from './components/search-command';\nimport Shortcuts from './components/shortcuts';\nimport NotFound from './pages/404';\nimport AccountStatuses from './pages/account-statuses';\nimport Bookmarks from './pages/bookmarks';\nimport Catchup from './pages/catchup';\nimport Favourites from './pages/favourites';\nimport Filters from './pages/filters';\nimport FollowedHashtags from './pages/followed-hashtags';\nimport Following from './pages/following';\nimport Hashtag from './pages/hashtag';\nimport Home from './pages/home';\nimport HttpRoute from './pages/http-route';\nimport List from './pages/list';\nimport Lists from './pages/lists';\nimport Login from './pages/login';\nimport Mentions from './pages/mentions';\nimport Notifications from './pages/notifications';\nimport Public from './pages/public';\nimport Search from './pages/search';\nimport StatusRoute from './pages/status-route';\nimport Trending from './pages/trending';\nimport Welcome from './pages/welcome';\nimport {\n  api,\n  initAccount,\n  initClient,\n  initInstance,\n  initPreferences,\n} from './utils/api';\nimport { getAccessToken } from './utils/auth';\nimport focusDeck from './utils/focus-deck';\nimport states, { initStates, statusKey } from './utils/states';\nimport store from './utils/store';\nimport { getCurrentAccount } from './utils/store-utils';\nimport './utils/toast-alert';\n\nwindow.__STATES__ = states;\nwindow.__STATES_STATS__ = () => {\n  const keys = [\n    'statuses',\n    'accounts',\n    'spoilers',\n    'unfurledLinks',\n    'statusQuotes',\n  ];\n  const counts = {};\n  keys.forEach((key) => {\n    counts[key] = Object.keys(states[key]).length;\n  });\n  console.warn('STATE stats', counts);\n\n  const { statuses } = states;\n  const unmountedPosts = [];\n  for (const key in statuses) {\n    const $post = document.querySelector(\n      `[data-state-post-id~=\"${key}\"], [data-state-post-ids~=\"${key}\"]`,\n    );\n    if (!$post) {\n      unmountedPosts.push(key);\n    }\n  }\n  console.warn('Unmounted posts', unmountedPosts.length, unmountedPosts);\n};\n\n// Experimental \"garbage collection\" for states\n// Every 15 minutes\n// Only posts for now\nsetInterval(() => {\n  if (!window.__IDLE__) return;\n  const { statuses, unfurledLinks, notifications } = states;\n  let keysCount = 0;\n  const { instance } = api();\n  for (const key in statuses) {\n    if (!window.__IDLE__) break;\n    try {\n      const $post = document.querySelector(\n        `[data-state-post-id~=\"${key}\"], [data-state-post-ids~=\"${key}\"]`,\n      );\n      const postInNotifications = notifications.some(\n        (n) => key === statusKey(n.status?.id, instance),\n      );\n      if (!$post && !postInNotifications) {\n        delete states.statuses[key];\n        delete states.statusQuotes[key];\n        for (const link in unfurledLinks) {\n          const unfurled = unfurledLinks[link];\n          const sKey = statusKey(unfurled.id, unfurled.instance);\n          if (sKey === key) {\n            delete states.unfurledLinks[link];\n            break;\n          }\n        }\n        keysCount++;\n      }\n    } catch (e) {}\n  }\n  if (keysCount) {\n    console.info(`GC: Removed ${keysCount} keys`);\n  }\n}, 15 * 60 * 1000);\n\n// Preload icons\n// There's probably a better way to do this\n// Related: https://github.com/vitejs/vite/issues/10600\nsetTimeout(() => {\n  for (const icon in ICONS) {\n    queueMicrotask(() => {\n      if (Array.isArray(ICONS[icon])) {\n        ICONS[icon][0]?.();\n      } else {\n        ICONS[icon]?.();\n      }\n    });\n  }\n}, 5000);\n\n(() => {\n  window.__IDLE__ = true;\n  const nonIdleEvents = [\n    'mousemove',\n    'mousedown',\n    'resize',\n    'keydown',\n    'touchstart',\n    'pointerdown',\n    'pointermove',\n    'wheel',\n  ];\n  const setIdle = () => {\n    window.__IDLE__ = true;\n  };\n  const IDLE_TIME = 3_000; // 3 seconds\n  const debouncedSetIdle = debounce(setIdle, IDLE_TIME);\n  const onNonIdle = () => {\n    window.__IDLE__ = false;\n    debouncedSetIdle();\n  };\n  nonIdleEvents.forEach((event) => {\n    window.addEventListener(event, onNonIdle, {\n      passive: true,\n      capture: true,\n    });\n  });\n  window.addEventListener('blur', setIdle, {\n    passive: true,\n  });\n  // When cursor leaves the window, set idle\n  document.documentElement.addEventListener(\n    'mouseleave',\n    (e) => {\n      if (!e.relatedTarget && !e.toElement) {\n        setIdle();\n      }\n    },\n    {\n      passive: true,\n    },\n  );\n  // document.addEventListener(\n  //   'visibilitychange',\n  //   () => {\n  //     if (document.visibilityState === 'visible') {\n  //       onNonIdle();\n  //     }\n  //   },\n  //   {\n  //     passive: true,\n  //   },\n  // );\n})();\n\n// Possible fix for iOS PWA theme-color bug\n// It changes when loading web pages in \"webview\"\nconst isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);\nif (isIOS) {\n  document.addEventListener('visibilitychange', () => {\n    if (document.visibilityState === 'visible') {\n      const theme = store.local.get('theme');\n      let $meta;\n      if (theme) {\n        // Get current meta\n        $meta = document.querySelector(\n          `meta[name=\"theme-color\"][data-theme-setting=\"manual\"]`,\n        );\n        if ($meta) {\n          const color = $meta.content;\n          const tempColor =\n            theme === 'light'\n              ? $meta.dataset.themeLightColorTemp\n              : $meta.dataset.themeDarkColorTemp;\n          $meta.content = tempColor || '';\n          setTimeout(() => {\n            $meta.content = color;\n          }, 10);\n        }\n      } else {\n        // Get current color scheme\n        const colorScheme = window.matchMedia('(prefers-color-scheme: dark)')\n          .matches\n          ? 'dark'\n          : 'light';\n        // Get current theme-color\n        $meta = document.querySelector(\n          `meta[name=\"theme-color\"][media*=\"${colorScheme}\"]`,\n        );\n        if ($meta) {\n          const color = $meta.dataset.content;\n          const tempColor = $meta.dataset.contentTemp;\n          $meta.content = tempColor || '';\n          setTimeout(() => {\n            $meta.content = color;\n          }, 10);\n        }\n      }\n    }\n  });\n}\n\n{\n  const theme = store.local.get('theme');\n  // If there's a theme, it's NOT auto\n  if (theme) {\n    // dark | light\n    document.documentElement.classList.add(`is-${theme}`);\n    document\n      .querySelector('meta[name=\"color-scheme\"]')\n      .setAttribute('content', theme || 'dark light');\n\n    // Enable manual theme <meta>\n    const $manualMeta = document.querySelector(\n      'meta[data-theme-setting=\"manual\"]',\n    );\n    if ($manualMeta) {\n      $manualMeta.name = 'theme-color';\n      $manualMeta.content =\n        theme === 'light'\n          ? $manualMeta.dataset.themeLightColor\n          : $manualMeta.dataset.themeDarkColor;\n    }\n    // Disable auto theme <meta>s\n    const $autoMetas = document.querySelectorAll(\n      'meta[data-theme-setting=\"auto\"]',\n    );\n    $autoMetas.forEach((m) => {\n      m.name = '';\n    });\n  }\n  const textSize = store.local.get('textSize');\n  if (textSize) {\n    document.documentElement.style.setProperty('--text-size', `${textSize}px`);\n  }\n}\n\nsubscribe(states, (changes) => {\n  for (const [action, path, value, prevValue] of changes) {\n    // Change #app dataset based on settings.shortcutsViewMode\n    if (path.join('.') === 'settings.shortcutsViewMode') {\n      const $app = document.getElementById('app');\n      if ($app) {\n        $app.dataset.shortcutsViewMode = states.shortcuts?.length ? value : '';\n      }\n    }\n\n    // Add/Remove cloak class to body\n    if (path.join('.') === 'settings.cloakMode') {\n      const $body = document.body;\n      $body.classList.toggle('cloak', value);\n    }\n  }\n});\n\nfunction App() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [uiState, setUIState] = useState('loading');\n\n  useEffect(() => {\n    const instanceURL = store.local.get('instanceURL');\n    const code = decodeURIComponent(\n      (window.location.search.match(/code=([^&]+)/) || [, ''])[1],\n    );\n\n    if (code) {\n      console.log({ code });\n      // Clear the code from the URL\n      window.history.replaceState(\n        {},\n        document.title,\n        window.location.pathname || '/',\n      );\n\n      const clientID = store.session.get('clientID');\n      const clientSecret = store.session.get('clientSecret');\n      const vapidKey = store.session.get('vapidKey');\n\n      (async () => {\n        setUIState('loading');\n        const { access_token: accessToken } = await getAccessToken({\n          instanceURL,\n          client_id: clientID,\n          client_secret: clientSecret,\n          code,\n        });\n\n        const client = initClient({ instance: instanceURL, accessToken });\n        await Promise.allSettled([\n          initInstance(client, instanceURL),\n          initAccount(client, instanceURL, accessToken, vapidKey),\n        ]);\n        initStates();\n        initPreferences(client);\n\n        setIsLoggedIn(true);\n        setUIState('default');\n      })();\n    } else {\n      window.__IGNORE_GET_ACCOUNT_ERROR__ = true;\n      const account = getCurrentAccount();\n      if (account) {\n        store.session.set('currentAccount', account.info.id);\n        const { client } = api({ account });\n        const { instance } = client;\n        // console.log('masto', masto);\n        initStates();\n        initPreferences(client);\n        setUIState('loading');\n        (async () => {\n          try {\n            await initInstance(client, instance);\n          } catch (e) {\n          } finally {\n            setIsLoggedIn(true);\n            setUIState('default');\n          }\n        })();\n      } else {\n        setUIState('default');\n      }\n    }\n  }, []);\n\n  let location = useLocation();\n  states.currentLocation = location.pathname;\n  // useLayoutEffect(() => {\n  //   states.currentLocation = location.pathname;\n  // }, [location.pathname]);\n\n  useEffect(focusDeck, [location, isLoggedIn]);\n\n  if (/\\/https?:/.test(location.pathname)) {\n    return <HttpRoute />;\n  }\n\n  return (\n    <>\n      <PrimaryRoutes isLoggedIn={isLoggedIn} loading={uiState === 'loading'} />\n      <SecondaryRoutes isLoggedIn={isLoggedIn} />\n      {uiState === 'default' && (\n        <Routes>\n          <Route path=\"/:instance?/s/:id\" element={<StatusRoute />} />\n        </Routes>\n      )}\n      {isLoggedIn && <ComposeButton />}\n      {isLoggedIn && <Shortcuts />}\n      <Modals />\n      {isLoggedIn && <NotificationService />}\n      <BackgroundService isLoggedIn={isLoggedIn} />\n      {uiState !== 'loading' && <SearchCommand onClose={focusDeck} />}\n      <KeyboardShortcutsHelp />\n    </>\n  );\n}\n\nfunction PrimaryRoutes({ isLoggedIn, loading }) {\n  const location = useLocation();\n  const nonRootLocation = useMemo(() => {\n    const { pathname } = location;\n    return !/^\\/(login|welcome)/i.test(pathname);\n  }, [location]);\n\n  return (\n    <Routes location={nonRootLocation || location}>\n      <Route\n        path=\"/\"\n        element={\n          isLoggedIn ? (\n            <Home />\n          ) : loading ? (\n            <Loader id=\"loader-root\" />\n          ) : (\n            <Welcome />\n          )\n        }\n      />\n      <Route path=\"/login\" element={<Login />} />\n      <Route path=\"/welcome\" element={<Welcome />} />\n    </Routes>\n  );\n}\n\nfunction getPrevLocation() {\n  return states.prevLocation || null;\n}\nfunction SecondaryRoutes({ isLoggedIn }) {\n  // const snapStates = useSnapshot(states);\n  const location = useLocation();\n  // const prevLocation = snapStates.prevLocation;\n  const backgroundLocation = useRef(getPrevLocation());\n\n  const isModalPage = useMemo(() => {\n    return (\n      matchPath('/:instance/s/:id', location.pathname) ||\n      matchPath('/s/:id', location.pathname)\n    );\n  }, [location.pathname, matchPath]);\n  if (isModalPage) {\n    if (!backgroundLocation.current)\n      backgroundLocation.current = getPrevLocation();\n  } else {\n    backgroundLocation.current = null;\n  }\n  console.debug({\n    backgroundLocation: backgroundLocation.current,\n    location,\n  });\n\n  return (\n    <Routes location={backgroundLocation.current || location}>\n      {isLoggedIn && (\n        <>\n          <Route path=\"/notifications\" element={<Notifications />} />\n          <Route path=\"/mentions\" element={<Mentions />} />\n          <Route path=\"/following\" element={<Following />} />\n          <Route path=\"/b\" element={<Bookmarks />} />\n          <Route path=\"/f\" element={<Favourites />} />\n          <Route path=\"/l\">\n            <Route index element={<Lists />} />\n            <Route path=\":id\" element={<List />} />\n          </Route>\n          <Route path=\"/fh\" element={<FollowedHashtags />} />\n          <Route path=\"/ft\" element={<Filters />} />\n          <Route path=\"/catchup\" element={<Catchup />} />\n        </>\n      )}\n      <Route path=\"/:instance?/t/:hashtag\" element={<Hashtag />} />\n      <Route path=\"/:instance?/a/:id\" element={<AccountStatuses />} />\n      <Route path=\"/:instance?/p\">\n        <Route index element={<Public />} />\n        <Route path=\"l\" element={<Public local />} />\n      </Route>\n      <Route path=\"/:instance?/trending\" element={<Trending />} />\n      <Route path=\"/:instance?/search\" element={<Search />} />\n      {/* <Route path=\"/:anything\" element={<NotFound />} /> */}\n    </Routes>\n  );\n}\n\nexport { App };\n","import './index.css';\n\nimport './cloak-mode.css';\n\n// Polyfill needed for Firefox < 122\n// https://bugzilla.mozilla.org/show_bug.cgi?id=1423593\n// import '@formatjs/intl-segmenter/polyfill';\nimport { render } from 'preact';\nimport { HashRouter } from 'react-router-dom';\n\nimport { App } from './app';\n\nif (import.meta.env.DEV) {\n  import('preact/debug');\n}\n\n// AbortSignal.timeout polyfill\n// Temporary fix from https://github.com/mo/abortcontroller-polyfill/issues/73#issuecomment-1541180943\n// Incorrect implementation, but should be good enough for now\nif ('AbortSignal' in window) {\n  AbortSignal.timeout =\n    AbortSignal.timeout ||\n    ((duration) => {\n      const controller = new AbortController();\n      setTimeout(() => controller.abort(), duration);\n      return controller.signal;\n    });\n}\n\nrender(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('app'),\n);\n\n// Storage cleanup\nsetTimeout(() => {\n  try {\n    // Clean up iconify localStorage\n    Object.keys(localStorage).forEach((key) => {\n      if (key.startsWith('iconify')) {\n        localStorage.removeItem(key);\n      }\n    });\n    Object.keys(sessionStorage).forEach((key) => {\n      if (key.startsWith('iconify')) {\n        sessionStorage.removeItem(key);\n      }\n    });\n\n    // Clean up old settings key\n    localStorage.removeItem('settings:boostsCarousel');\n  } catch (e) {}\n}, 5000);\n\nwindow.__CLOAK__ = () => {\n  document.body.classList.toggle('cloak');\n};\n"],"file":"assets/main-2r2IL_0Q.js"}