{"version":3,"file":"main-DUVHsGj_.js","sources":["../../src/utils/usePageVisibility.js","../../src/components/background-service.jsx","../../src/components/compose-button.jsx","../../src/components/keyboard-shortcuts-help.jsx","../../src/pages/accounts.jsx","../../src/assets/logo.svg","../../src/utils/push-notifications.js","../../src/pages/settings.jsx","../../src/utils/focus-deck.jsx","../../src/utils/useLocationChange.js","../../src/components/list-add-edit.jsx","../../src/components/account-info.jsx","../../src/components/account-sheet.jsx","../../src/components/drafts.jsx","../../src/utils/relationships.js","../../src/components/generic-accounts.jsx","../../src/components/media-alt-modal.jsx","../../src/utils/color-utils.js","../../src/components/media-modal.jsx","../../src/assets/floating-button.svg","../../src/assets/multi-column.svg","../../src/assets/tab-menu-bar.svg","../../src/utils/followed-tags.js","../../src/components/AsyncText.jsx","../../src/components/shortcuts-settings.jsx","../../src/components/modals.jsx","../../src/components/follow-request-buttons.jsx","../../src/components/notification.jsx","../../src/components/notification-service.jsx","../../src/components/search-form.jsx","../../src/components/search-command.jsx","../../src/components/shortcuts.jsx","../../src/utils/timeline-utils.jsx","../../src/utils/useScroll.js","../../src/components/media-post.jsx","../../src/components/nav-menu.jsx","../../src/components/timeline.jsx","../../src/pages/account-statuses.jsx","../../src/pages/bookmarks.jsx","../../src/pages/favourites.jsx","../../src/pages/followed-hashtags.jsx","../../src/pages/following.jsx","../../src/pages/hashtag.jsx","../../src/pages/list.jsx","../../src/pages/mentions.jsx","../../src/utils/group-notifications.jsx","../../src/pages/notifications.jsx","../../src/pages/public.jsx","../../src/pages/trending.jsx","../../src/components/columns.jsx","../../src/pages/home.jsx","../../src/utils/get-instance-status-url.js","../../src/pages/http-route.jsx","../../src/pages/lists.jsx","../../src/data/instances.json?url","../../src/utils/auth.js","../../src/pages/login.jsx","../../src/pages/search.jsx","../../src/pages/status.jsx","../../src/pages/status-route.jsx","../../src/assets/features/boosts-carousel.jpg","../../src/assets/features/grouped-notifications.jpg","../../src/assets/features/multi-column.jpg","../../src/assets/features/multi-hashtag-timeline.jpg","../../src/assets/features/nested-comments-thread.jpg","../../src/assets/logo-text.svg","../../src/pages/welcome.jsx","../../src/utils/toast-alert.js","../../src/app.jsx","../../src/main.jsx"],"sourcesContent":["import { useEffect, useRef } from 'preact/hooks';\n\nexport default function usePageVisibility(fn = () => {}, deps = []) {\n  const savedCallback = useRef(fn);\n  useEffect(() => {\n    savedCallback.current = fn;\n  }, [deps]);\n\n  useEffect(() => {\n    const handleVisibilityChange = () => {\n      const hidden = document.hidden || document.visibilityState === 'hidden';\n      console.log('👀 Page visibility changed', hidden ? 'hidden' : 'visible');\n      savedCallback.current(!hidden);\n    };\n\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    return () =>\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n  }, []);\n}\n","import { memo } from 'preact/compat';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\n\nimport { api } from '../utils/api';\nimport showToast from '../utils/show-toast';\nimport states, { saveStatus } from '../utils/states';\nimport useInterval from '../utils/useInterval';\nimport usePageVisibility from '../utils/usePageVisibility';\n\nconst STREAMING_TIMEOUT = 1000 * 3; // 3 seconds\nconst POLL_INTERVAL = 15_000; // 15 seconds\n\nexport default memo(function BackgroundService({ isLoggedIn }) {\n  // Notifications service\n  // - WebSocket to receive notifications when page is visible\n  const [visible, setVisible] = useState(true);\n  usePageVisibility(setVisible);\n  const checkLatestNotification = async (masto, instance, skipCheckMarkers) => {\n    if (states.notificationsLast) {\n      const notificationsIterator = masto.v1.notifications.list({\n        limit: 1,\n        sinceId: states.notificationsLast.id,\n      });\n      const { value: notifications } = await notificationsIterator.next();\n      if (notifications?.length) {\n        if (skipCheckMarkers) {\n          states.notificationsShowNew = true;\n        } else {\n          let lastReadId;\n          try {\n            const markers = await masto.v1.markers.fetch({\n              timeline: 'notifications',\n            });\n            lastReadId = markers?.notifications?.lastReadId;\n          } catch (e) {}\n          if (lastReadId) {\n            states.notificationsShowNew = notifications[0].id !== lastReadId;\n          } else {\n            states.notificationsShowNew = true;\n          }\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    let sub;\n    let pollNotifications;\n    if (isLoggedIn && visible) {\n      const { masto, streaming, instance } = api();\n      (async () => {\n        // 1. Get the latest notification\n        await checkLatestNotification(masto, instance);\n\n        let hasStreaming = false;\n        // 2. Start streaming\n        if (streaming) {\n          pollNotifications = setTimeout(() => {\n            (async () => {\n              try {\n                hasStreaming = true;\n                sub = streaming.user.notification.subscribe();\n                console.log('🎏 Streaming notification', sub);\n                for await (const entry of sub) {\n                  if (!sub) break;\n                  if (!visible) break;\n                  console.log('🔔🔔 Notification entry', entry);\n                  if (entry.event === 'notification') {\n                    console.log('🔔🔔 Notification', entry);\n                    saveStatus(entry.payload, instance, {\n                      skipThreading: true,\n                    });\n                  }\n                  states.notificationsShowNew = true;\n                }\n                console.log('💥 Streaming notification loop STOPPED');\n              } catch (e) {\n                hasStreaming = false;\n                console.error(e);\n              }\n\n              if (!hasStreaming) {\n                console.log('🎏 Streaming failed, fallback to polling');\n                pollNotifications = setInterval(() => {\n                  checkLatestNotification(masto, instance, true);\n                }, POLL_INTERVAL);\n              }\n            })();\n          }, STREAMING_TIMEOUT);\n        }\n      })();\n    }\n    return () => {\n      sub?.unsubscribe?.();\n      sub = null;\n      clearTimeout(pollNotifications);\n      clearInterval(pollNotifications);\n    };\n  }, [visible, isLoggedIn]);\n\n  // Check for updates service\n  const lastCheckDate = useRef();\n  const checkForUpdates = () => {\n    lastCheckDate.current = Date.now();\n    console.log('✨ Check app update');\n    fetch('./version.json')\n      .then((r) => r.json())\n      .then((info) => {\n        if (info) states.appVersion = info;\n      })\n      .catch((e) => {\n        console.error(e);\n      });\n  };\n  useInterval(checkForUpdates, visible && 1000 * 60 * 30); // 30 minutes\n  usePageVisibility((visible) => {\n    if (visible) {\n      if (!lastCheckDate.current) {\n        checkForUpdates();\n      } else {\n        const diff = Date.now() - lastCheckDate.current;\n        if (diff > 1000 * 60 * 60) {\n          // 1 hour\n          checkForUpdates();\n        }\n      }\n    }\n  });\n\n  // Global keyboard shortcuts \"service\"\n  useHotkeys('shift+alt+k', () => {\n    const currentCloakMode = states.settings.cloakMode;\n    states.settings.cloakMode = !currentCloakMode;\n    showToast({\n      text: `Cloak mode ${currentCloakMode ? 'disabled' : 'enabled'}`,\n    });\n  });\n\n  return null;\n});\n","import { useHotkeys } from 'react-hotkeys-hook';\n\nimport openCompose from '../utils/open-compose';\nimport states from '../utils/states';\n\nimport Icon from './icon';\n\nexport default function ComposeButton() {\n  function handleButton(e) {\n    if (e.shiftKey) {\n      const newWin = openCompose();\n\n      if (!newWin) {\n        states.showCompose = true;\n      }\n    } else {\n      states.showCompose = true;\n    }\n  }\n\n  useHotkeys('c, shift+c', handleButton, {\n    ignoreEventWhen: (e) => {\n      const hasModal = !!document.querySelector('#modal-container > *');\n      return hasModal;\n    },\n  });\n\n  return (\n    <button type=\"button\" id=\"compose-button\" onClick={handleButton}>\n      <Icon icon=\"quill\" size=\"xl\" alt=\"Compose\" />\n    </button>\n  );\n}\n","import './keyboard-shortcuts-help.css';\n\nimport { memo } from 'preact/compat';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { useSnapshot } from 'valtio';\n\nimport states from '../utils/states';\n\nimport Icon from './icon';\nimport Modal from './modal';\n\nexport default memo(function KeyboardShortcutsHelp() {\n  const snapStates = useSnapshot(states);\n\n  function onClose() {\n    states.showKeyboardShortcutsHelp = false;\n  }\n\n  useHotkeys(\n    '?, shift+?',\n    (e) => {\n      console.log('help');\n      states.showKeyboardShortcutsHelp = true;\n    },\n    {\n      ignoreEventWhen: (e) => {\n        const hasModal = !!document.querySelector('#modal-container > *');\n        return hasModal;\n      },\n    },\n  );\n\n  return (\n    !!snapStates.showKeyboardShortcutsHelp && (\n      <Modal class=\"light\" onClose={onClose}>\n        <div id=\"keyboard-shortcuts-help-container\" class=\"sheet\" tabindex=\"-1\">\n          <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n            <Icon icon=\"x\" />\n          </button>\n          <header>\n            <h2>Keyboard shortcuts</h2>\n          </header>\n          <main>\n            <table>\n              {[\n                {\n                  action: 'Keyboard shortcuts help',\n                  keys: <kbd>?</kbd>,\n                },\n                {\n                  action: 'Next post',\n                  keys: <kbd>j</kbd>,\n                },\n                {\n                  action: 'Previous post',\n                  keys: <kbd>k</kbd>,\n                },\n                {\n                  action: 'Skip carousel to next post',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>j</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Skip carousel to previous post',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>k</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Open post details',\n                  keys: (\n                    <>\n                      <kbd>Enter</kbd> or <kbd>o</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: (\n                    <>\n                      Expand content warning or\n                      <br />\n                      toggle expanded/collapsed thread\n                    </>\n                  ),\n                  keys: <kbd>x</kbd>,\n                },\n                {\n                  action: 'Close post or dialogs',\n                  keys: (\n                    <>\n                      <kbd>Esc</kbd> or <kbd>Backspace</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Focus column in multi-column mode',\n                  keys: (\n                    <>\n                      <kbd>1</kbd> to <kbd>9</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Compose new post',\n                  keys: <kbd>c</kbd>,\n                },\n                {\n                  action: 'Compose new post (new window)',\n                  className: 'insignificant',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>c</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Send post',\n                  keys: (\n                    <>\n                      <kbd>Ctrl</kbd> + <kbd>Enter</kbd> or <kbd>⌘</kbd> +{' '}\n                      <kbd>Enter</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Search',\n                  keys: <kbd>/</kbd>,\n                },\n                {\n                  action: 'Reply',\n                  keys: <kbd>r</kbd>,\n                },\n                {\n                  action: 'Reply (new window)',\n                  className: 'insignificant',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>r</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Like (favourite)',\n                  keys: (\n                    <>\n                      <kbd>l</kbd> or <kbd>f</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Boost',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>b</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Bookmark',\n                  keys: <kbd>d</kbd>,\n                },\n                {\n                  action: 'Toggle Cloak mode',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>Alt</kbd> + <kbd>k</kbd>\n                    </>\n                  ),\n                },\n              ].map(({ action, className, keys }) => (\n                <tr key={action}>\n                  <th class={className}>{action}</th>\n                  <td>{keys}</td>\n                </tr>\n              ))}\n            </table>\n          </main>\n        </div>\n      </Modal>\n    )\n  );\n});\n","import './accounts.css';\n\nimport { useAutoAnimate } from '@formkit/auto-animate/preact';\nimport { Menu, MenuDivider, MenuItem } from '@szhsin/react-menu';\nimport { useReducer } from 'preact/hooks';\n\nimport Avatar from '../components/avatar';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Menu2 from '../components/menu2';\nimport MenuConfirm from '../components/menu-confirm';\nimport NameText from '../components/name-text';\nimport { api } from '../utils/api';\nimport states from '../utils/states';\nimport store from '../utils/store';\n\nfunction Accounts({ onClose }) {\n  const { masto } = api();\n  // Accounts\n  const accounts = store.local.getJSON('accounts');\n  const currentAccount = store.session.get('currentAccount');\n  const moreThanOneAccount = accounts.length > 1;\n\n  const [_, reload] = useReducer((x) => x + 1, 0);\n  const [accountsListParent] = useAutoAnimate();\n\n  return (\n    <div id=\"accounts-container\" class=\"sheet\" tabIndex=\"-1\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header class=\"header-grid\">\n        <h2>Accounts</h2>\n      </header>\n      <main>\n        <section>\n          <ul class=\"accounts-list\" ref={accountsListParent}>\n            {accounts.map((account, i) => {\n              const isCurrent = account.info.id === currentAccount;\n              const isDefault = i === 0; // first account is always default\n              return (\n                <li key={account.info.id}>\n                  <div>\n                    {moreThanOneAccount && (\n                      <span class={`current ${isCurrent ? 'is-current' : ''}`}>\n                        <Icon icon=\"check-circle\" alt=\"Current\" />\n                      </span>\n                    )}\n                    <Avatar\n                      url={account.info.avatarStatic}\n                      size=\"xxl\"\n                      onDblClick={async () => {\n                        if (isCurrent) {\n                          try {\n                            const info = await masto.v1.accounts\n                              .$select(account.info.id)\n                              .fetch();\n                            console.log('fetched account info', info);\n                            account.info = info;\n                            store.local.setJSON('accounts', accounts);\n                            reload();\n                          } catch (e) {}\n                        }\n                      }}\n                    />\n                    <NameText\n                      account={\n                        moreThanOneAccount\n                          ? {\n                              ...account.info,\n                              acct: /@/.test(account.info.acct)\n                                ? account.info.acct\n                                : `${account.info.acct}@${account.instanceURL}`,\n                            }\n                          : account.info\n                      }\n                      showAcct\n                      onClick={() => {\n                        if (isCurrent) {\n                          states.showAccount = `${account.info.username}@${account.instanceURL}`;\n                        } else {\n                          store.session.set('currentAccount', account.info.id);\n                          location.reload();\n                        }\n                      }}\n                    />\n                  </div>\n                  <div class=\"actions\">\n                    {isDefault && moreThanOneAccount && (\n                      <>\n                        <span class=\"tag\">Default</span>{' '}\n                      </>\n                    )}\n                    <Menu2\n                      align=\"end\"\n                      menuButton={\n                        <button\n                          type=\"button\"\n                          title=\"More\"\n                          class=\"plain more-button\"\n                        >\n                          <Icon icon=\"more\" size=\"l\" alt=\"More\" />\n                        </button>\n                      }\n                    >\n                      <MenuItem\n                        onClick={() => {\n                          states.showAccount = `${account.info.username}@${account.instanceURL}`;\n                        }}\n                      >\n                        <Icon icon=\"user\" />\n                        <span>View profile…</span>\n                      </MenuItem>\n                      <MenuDivider />\n                      {moreThanOneAccount && (\n                        <MenuItem\n                          disabled={isDefault}\n                          onClick={() => {\n                            // Move account to the top of the list\n                            accounts.splice(i, 1);\n                            accounts.unshift(account);\n                            store.local.setJSON('accounts', accounts);\n                            reload();\n                          }}\n                        >\n                          <Icon icon=\"check-circle\" />\n                          <span>Set as default</span>\n                        </MenuItem>\n                      )}\n                      <MenuConfirm\n                        subMenu\n                        confirmLabel={\n                          <>\n                            <Icon icon=\"exit\" />\n                            <span>Log out @{account.info.acct}?</span>\n                          </>\n                        }\n                        disabled={!isCurrent}\n                        menuItemClassName=\"danger\"\n                        onClick={() => {\n                          // const yes = confirm('Log out?');\n                          // if (!yes) return;\n                          accounts.splice(i, 1);\n                          store.local.setJSON('accounts', accounts);\n                          // location.reload();\n                          location.href = location.pathname || '/';\n                        }}\n                      >\n                        <Icon icon=\"exit\" />\n                        <span>Log out…</span>\n                      </MenuConfirm>\n                    </Menu2>\n                  </div>\n                </li>\n              );\n            })}\n          </ul>\n          <p>\n            <Link to=\"/login\" class=\"button plain2\" onClick={onClose}>\n              <Icon icon=\"plus\" /> <span>Add an existing account</span>\n            </Link>\n          </p>\n          {moreThanOneAccount && (\n            <p>\n              <small>\n                Note: <i>Default</i> account will always be used for first load.\n                Switched accounts will persist during the session.\n              </small>\n            </p>\n          )}\n        </section>\n      </main>\n    </div>\n  );\n}\n\nexport default Accounts;\n","export default \"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20xml:space='preserve'%20fill-rule='evenodd'%20stroke-linejoin='round'%20stroke-miterlimit='2'%20clip-rule='evenodd'%20viewBox='0%200%2064%2064'%3e%3cpath%20fill='none'%20d='M0%200h63.994v63.994H0z'/%3e%3cpath%20fill='%23a4bff7'%20d='M37.774%2011.471c14.639%203.752%2019.034%2016.557%2015.889%2031.304-.696%203.261-2.563%206.661-6.356%208.693-3.204%201.717-8.07%202.537-15.338.55l-9.634-2.404C11.651%2046.992%208.378%2038.733%2010.027%2031.823c3.627-15.201%2015.543-23.48%2027.747-20.352Z'/%3e%3cpath%20fill='%23d8e7fe'%20d='M36.76%2015.429c12.289%203.15%2015.547%2014.114%2012.907%2026.493-.947%204.44-4.937%209.365-16.664%206.143l-9.684-2.417c-7.854-1.923-10.53-7.8-9.318-12.877%203.016-12.639%2012.611-19.943%2022.759-17.342Z'/%3e%3cpath%20fill='%236081e6'%20d='M27.471%2024.991c-1.457-.698-7.229%203.213-7.663%208.926-.182%202.39%204.55%203.237%205.071-.169.725-4.743%203.715-8.218%202.592-8.757Zm10.746%202.005c-2.083.327-.382%205.901-.595%2010.727-.123%202.8%204.388%203.464%204.703%202.011%201.098-5.073-2.066-13.058-4.108-12.738Z'/%3e%3c/svg%3e\"","// Utils for push notifications\nimport { api } from './api';\nimport { getCurrentAccount } from './store-utils';\n\n// Subscription is an object with the following structure:\n// {\n//   data: {\n//     alerts: {\n//       admin: {\n//         report: boolean,\n//         signUp: boolean,\n//       },\n//       favourite: boolean,\n//       follow: boolean,\n//       mention: boolean,\n//       poll: boolean,\n//       reblog: boolean,\n//       status: boolean,\n//       update: boolean,\n//     }\n//   },\n//   policy: \"all\" | \"followed\" | \"follower\" | \"none\",\n//   subscription: {\n//     endpoint: string,\n//     keys: {\n//       auth: string,\n//       p256dh: string,\n//     },\n//   },\n// }\n\n// Back-end CRUD\n// =============\n\nfunction createBackendPushSubscription(subscription) {\n  const { masto } = api();\n  return masto.v1.push.subscription.create(subscription);\n}\n\nfunction fetchBackendPushSubscription() {\n  const { masto } = api();\n  return masto.v1.push.subscription.fetch();\n}\n\nfunction updateBackendPushSubscription(subscription) {\n  const { masto } = api();\n  return masto.v1.push.subscription.update(subscription);\n}\n\nfunction removeBackendPushSubscription() {\n  const { masto } = api();\n  return masto.v1.push.subscription.remove();\n}\n\n// Front-end\n// =========\n\nexport function isPushSupported() {\n  return 'serviceWorker' in navigator && 'PushManager' in window;\n}\n\nexport function getRegistration() {\n  // return navigator.serviceWorker.ready;\n  return navigator.serviceWorker.getRegistration();\n}\n\nasync function getSubscription() {\n  const registration = await getRegistration();\n  const subscription = registration\n    ? await registration.pushManager.getSubscription()\n    : undefined;\n  return { registration, subscription };\n}\n\nfunction urlBase64ToUint8Array(base64String) {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = `${base64String}${padding}`\n    .replace(/-/g, '+')\n    .replace(/_/g, '/');\n\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n\n  return outputArray;\n}\n\n// Front-end <-> back-end\n// ======================\n\nexport async function initSubscription() {\n  if (!isPushSupported()) return;\n  const { subscription } = await getSubscription();\n  let backendSubscription = null;\n  try {\n    backendSubscription = await fetchBackendPushSubscription();\n  } catch (err) {\n    if (/(not found|unknown)/i.test(err.message)) {\n      // No subscription found\n    } else {\n      // Other error\n      throw err;\n    }\n  }\n  console.log('INIT subscription', {\n    subscription,\n    backendSubscription,\n  });\n\n  // Check if the subscription changed\n  if (backendSubscription && subscription) {\n    const sameEndpoint = backendSubscription.endpoint === subscription.endpoint;\n    const { vapidKey } = getCurrentAccount();\n    const sameKey = backendSubscription.serverKey === vapidKey;\n    if (!sameEndpoint) {\n      throw new Error('Backend subscription endpoint changed');\n    }\n    if (sameKey) {\n      // Subscription didn't change\n    } else {\n      // Subscription changed\n      console.error('🔔 Subscription changed', {\n        sameEndpoint,\n        serverKey: backendSubscription.serverKey,\n        vapIdKey: vapidKey,\n        endpoint1: backendSubscription.endpoint,\n        endpoint2: subscription.endpoint,\n        sameKey,\n        key1: backendSubscription.serverKey,\n        key2: vapidKey,\n      });\n      throw new Error('Backend subscription key and vapid key changed');\n      // Only unsubscribe from backend, not from browser\n      // await removeBackendPushSubscription();\n      // // Now let's resubscribe\n      // // NOTE: I have no idea if this works\n      // return await updateSubscription({\n      //   data: backendSubscription.data,\n      //   policy: backendSubscription.policy,\n      // });\n    }\n  }\n\n  if (subscription && !backendSubscription) {\n    // check if account's vapidKey is same as subscription's applicationServerKey\n    const { vapidKey } = getCurrentAccount();\n    const { applicationServerKey } = subscription.options;\n    const vapidKeyStr = urlBase64ToUint8Array(vapidKey).toString();\n    const applicationServerKeyStr = new Uint8Array(\n      applicationServerKey,\n    ).toString();\n    const sameKey = vapidKeyStr === applicationServerKeyStr;\n    if (sameKey) {\n      // Subscription didn't change\n    } else {\n      // Subscription changed\n      console.error('🔔 Subscription changed', {\n        vapidKeyStr,\n        applicationServerKeyStr,\n        sameKey,\n      });\n      // Unsubscribe since backend doesn't have a subscription\n      await subscription.unsubscribe();\n      throw new Error('Subscription key and vapid key changed');\n    }\n  }\n\n  // Check if backend subscription returns 404\n  // if (subscription && !backendSubscription) {\n  //   // Re-subscribe to backend\n  //   backendSubscription = await createBackendPushSubscription({\n  //     subscription,\n  //     data: {},\n  //     policy: 'all',\n  //   });\n  // }\n\n  return { subscription, backendSubscription };\n}\n\nexport async function updateSubscription({ data, policy }) {\n  console.log('🔔 Updating subscription', { data, policy });\n  if (!isPushSupported()) return;\n  let { registration, subscription } = await getSubscription();\n  let backendSubscription = null;\n\n  if (subscription) {\n    try {\n      backendSubscription = await updateBackendPushSubscription({\n        data,\n        policy,\n      });\n      // TODO: save subscription in user settings\n    } catch (error) {\n      // Backend doesn't have a subscription for this user\n      // Create a new one\n      backendSubscription = await createBackendPushSubscription({\n        subscription,\n        data,\n        policy,\n      });\n      // TODO: save subscription in user settings\n    }\n  } else {\n    // User is not subscribed\n    const { vapidKey } = getCurrentAccount();\n    if (!vapidKey) throw new Error('No server key found');\n    subscription = await registration.pushManager.subscribe({\n      userVisibleOnly: true,\n      applicationServerKey: urlBase64ToUint8Array(vapidKey),\n    });\n    backendSubscription = await createBackendPushSubscription({\n      subscription,\n      data,\n      policy,\n    });\n    // TODO: save subscription in user settings\n  }\n\n  return { subscription, backendSubscription };\n}\n\nexport async function removeSubscription() {\n  if (!isPushSupported()) return;\n  const { subscription } = await getSubscription();\n  if (subscription) {\n    await removeBackendPushSubscription();\n    await subscription.unsubscribe();\n  }\n}\n","import './settings.css';\n\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport logo from '../assets/logo.svg';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport RelativeTime from '../components/relative-time';\nimport targetLanguages from '../data/lingva-target-languages';\nimport { api } from '../utils/api';\nimport getTranslateTargetLanguage from '../utils/get-translate-target-language';\nimport localeCode2Text from '../utils/localeCode2Text';\nimport {\n  initSubscription,\n  isPushSupported,\n  removeSubscription,\n  updateSubscription,\n} from '../utils/push-notifications';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\nimport store from '../utils/store';\n\nconst DEFAULT_TEXT_SIZE = 16;\nconst TEXT_SIZES = [15, 16, 17, 18, 19, 20];\n\nfunction Settings({ onClose }) {\n  const snapStates = useSnapshot(states);\n  const currentTheme = store.local.get('theme') || 'auto';\n  const themeFormRef = useRef();\n  const targetLanguage =\n    snapStates.settings.contentTranslationTargetLanguage || null;\n  const systemTargetLanguage = getTranslateTargetLanguage();\n  const systemTargetLanguageText = localeCode2Text(systemTargetLanguage);\n  const currentTextSize = store.local.get('textSize') || DEFAULT_TEXT_SIZE;\n\n  const [prefs, setPrefs] = useState(store.account.get('preferences') || {});\n  const { masto, authenticated, instance } = api();\n  // Get preferences every time Settings is opened\n  // NOTE: Disabled for now because I don't expect this to change often. Also for some reason, the /api/v1/preferences endpoint is cached for a while and return old prefs if refresh immediately after changing them.\n  // useEffect(() => {\n  //   const { masto } = api();\n  //   (async () => {\n  //     try {\n  //       const preferences = await masto.v1.preferences.fetch();\n  //       setPrefs(preferences);\n  //       store.account.set('preferences', preferences);\n  //     } catch (e) {\n  //       // Silently fail\n  //       console.error(e);\n  //     }\n  //   })();\n  // }, []);\n\n  return (\n    <div id=\"settings-container\" class=\"sheet\" tabIndex=\"-1\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Settings</h2>\n      </header>\n      <main>\n        <section>\n          <ul>\n            <li>\n              <div>\n                <label>Appearance</label>\n              </div>\n              <div>\n                <form\n                  ref={themeFormRef}\n                  onInput={(e) => {\n                    console.log(e);\n                    e.preventDefault();\n                    const formData = new FormData(themeFormRef.current);\n                    const theme = formData.get('theme');\n                    const html = document.documentElement;\n\n                    if (theme === 'auto') {\n                      html.classList.remove('is-light', 'is-dark');\n                    } else {\n                      html.classList.toggle('is-light', theme === 'light');\n                      html.classList.toggle('is-dark', theme === 'dark');\n                    }\n                    document\n                      .querySelector('meta[name=\"color-scheme\"]')\n                      .setAttribute(\n                        'content',\n                        theme === 'auto' ? 'dark light' : theme,\n                      );\n\n                    if (theme === 'auto') {\n                      store.local.del('theme');\n                    } else {\n                      store.local.set('theme', theme);\n                    }\n                  }}\n                >\n                  <div class=\"radio-group\">\n                    <label>\n                      <input\n                        type=\"radio\"\n                        name=\"theme\"\n                        value=\"light\"\n                        defaultChecked={currentTheme === 'light'}\n                      />\n                      <span>Light</span>\n                    </label>\n                    <label>\n                      <input\n                        type=\"radio\"\n                        name=\"theme\"\n                        value=\"dark\"\n                        defaultChecked={currentTheme === 'dark'}\n                      />\n                      <span>Dark</span>\n                    </label>\n                    <label>\n                      <input\n                        type=\"radio\"\n                        name=\"theme\"\n                        value=\"auto\"\n                        defaultChecked={\n                          currentTheme !== 'light' && currentTheme !== 'dark'\n                        }\n                      />\n                      <span>Auto</span>\n                    </label>\n                  </div>\n                </form>\n              </div>\n            </li>\n            <li>\n              <div>\n                <label>Text size</label>\n              </div>\n              <div class=\"range-group\">\n                <span style={{ fontSize: TEXT_SIZES[0] }}>A</span>{' '}\n                <input\n                  type=\"range\"\n                  min={TEXT_SIZES[0]}\n                  max={TEXT_SIZES[TEXT_SIZES.length - 1]}\n                  step=\"1\"\n                  value={currentTextSize}\n                  list=\"sizes\"\n                  onChange={(e) => {\n                    const value = parseInt(e.target.value, 10);\n                    const html = document.documentElement;\n                    // set CSS variable\n                    html.style.setProperty('--text-size', `${value}px`);\n                    // save to local storage\n                    if (value === DEFAULT_TEXT_SIZE) {\n                      store.local.del('textSize');\n                    } else {\n                      store.local.set('textSize', e.target.value);\n                    }\n                  }}\n                />{' '}\n                <span style={{ fontSize: TEXT_SIZES[TEXT_SIZES.length - 1] }}>\n                  A\n                </span>\n                <datalist id=\"sizes\">\n                  {TEXT_SIZES.map((size) => (\n                    <option value={size} />\n                  ))}\n                </datalist>\n              </div>\n            </li>\n          </ul>\n        </section>\n        {authenticated && (\n          <>\n            <h3>Posting</h3>\n            <section>\n              <ul>\n                <li>\n                  <div>\n                    <label for=\"posting-privacy-field\">\n                      Default visibility{' '}\n                      <Icon icon=\"cloud\" alt=\"Synced\" class=\"synced-icon\" />\n                    </label>\n                  </div>\n                  <div>\n                    <select\n                      id=\"posting-privacy-field\"\n                      value={prefs['posting:default:visibility'] || 'public'}\n                      onChange={(e) => {\n                        const { value } = e.target;\n                        (async () => {\n                          try {\n                            await masto.v1.accounts.updateCredentials({\n                              source: {\n                                privacy: value,\n                              },\n                            });\n                            setPrefs({\n                              ...prefs,\n                              'posting:default:visibility': value,\n                            });\n                            store.account.set('preferences', {\n                              ...prefs,\n                              'posting:default:visibility': value,\n                            });\n                          } catch (e) {\n                            alert('Failed to update posting privacy');\n                            console.error(e);\n                          }\n                        })();\n                      }}\n                    >\n                      <option value=\"public\">Public</option>\n                      <option value=\"unlisted\">Unlisted</option>\n                      <option value=\"private\">Followers only</option>\n                    </select>\n                  </div>\n                </li>\n              </ul>\n            </section>\n            <p class=\"section-postnote\">\n              <Icon icon=\"cloud\" alt=\"Synced\" class=\"synced-icon\" />{' '}\n              <small>\n                Synced to your instance server's settings.{' '}\n                <a\n                  href={`https://${instance}/`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  Go to your instance ({instance}) for more settings.\n                </a>\n              </small>\n            </p>\n          </>\n        )}\n        <h3>Experiments</h3>\n        <section>\n          <ul>\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.autoRefresh}\n                  onChange={(e) => {\n                    states.settings.autoRefresh = e.target.checked;\n                  }}\n                />{' '}\n                Auto refresh timeline posts\n              </label>\n            </li>\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.boostsCarousel}\n                  onChange={(e) => {\n                    states.settings.boostsCarousel = e.target.checked;\n                  }}\n                />{' '}\n                Boosts carousel\n              </label>\n            </li>\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.contentTranslation}\n                  onChange={(e) => {\n                    const { checked } = e.target;\n                    states.settings.contentTranslation = checked;\n                    if (!checked) {\n                      states.settings.contentTranslationTargetLanguage = null;\n                    }\n                  }}\n                />{' '}\n                Post translation\n              </label>\n              <div\n                class={`sub-section ${\n                  !snapStates.settings.contentTranslation\n                    ? 'more-insignificant'\n                    : ''\n                }`}\n              >\n                <div>\n                  <label>\n                    Translate to{' '}\n                    <select\n                      value={targetLanguage || ''}\n                      disabled={!snapStates.settings.contentTranslation}\n                      onChange={(e) => {\n                        states.settings.contentTranslationTargetLanguage =\n                          e.target.value || null;\n                      }}\n                    >\n                      <option value=\"\">\n                        System language ({systemTargetLanguageText})\n                      </option>\n                      <option disabled>──────────</option>\n                      {targetLanguages.map((lang) => (\n                        <option value={lang.code}>{lang.name}</option>\n                      ))}\n                    </select>\n                  </label>\n                </div>\n                <hr />\n                <p class=\"checkbox-fieldset\">\n                  Hide \"Translate\" button for\n                  {snapStates.settings.contentTranslationHideLanguages.length >\n                    0 && (\n                    <>\n                      {' '}\n                      (\n                      {\n                        snapStates.settings.contentTranslationHideLanguages\n                          .length\n                      }\n                      )\n                    </>\n                  )}\n                  :\n                  <div class=\"checkbox-fields\">\n                    {targetLanguages.map((lang) => (\n                      <label>\n                        <input\n                          type=\"checkbox\"\n                          checked={snapStates.settings.contentTranslationHideLanguages.includes(\n                            lang.code,\n                          )}\n                          onChange={(e) => {\n                            const { checked } = e.target;\n                            if (checked) {\n                              states.settings.contentTranslationHideLanguages.push(\n                                lang.code,\n                              );\n                            } else {\n                              states.settings.contentTranslationHideLanguages =\n                                snapStates.settings.contentTranslationHideLanguages.filter(\n                                  (code) => code !== lang.code,\n                                );\n                            }\n                          }}\n                        />{' '}\n                        {lang.name}\n                      </label>\n                    ))}\n                  </div>\n                </p>\n                <p class=\"insignificant\">\n                  <small>\n                    Note: This feature uses an external API to translate,\n                    powered by{' '}\n                    <a\n                      href=\"https://github.com/thedaviddelta/lingva-translate\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      Lingva Translate\n                    </a>\n                    .\n                  </small>\n                </p>\n                <hr />\n                <div>\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      checked={snapStates.settings.contentTranslationAutoInline}\n                      disabled={!snapStates.settings.contentTranslation}\n                      onChange={(e) => {\n                        states.settings.contentTranslationAutoInline =\n                          e.target.checked;\n                      }}\n                    />{' '}\n                    Auto inline translation\n                  </label>\n                  <p class=\"insignificant\">\n                    <small>\n                      Automatically show translation for posts in timeline. Only\n                      works for <b>short</b> posts without content warning,\n                      media and poll.\n                    </small>\n                  </p>\n                </div>\n              </div>\n            </li>\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.cloakMode}\n                  onChange={(e) => {\n                    states.settings.cloakMode = e.target.checked;\n                  }}\n                />{' '}\n                Cloak mode{' '}\n                <span class=\"insignificant\">\n                  (<samp>Text</samp> → <samp>████</samp>)\n                </span>\n              </label>\n              <div class=\"sub-section insignificant\">\n                <small>\n                  Replace text as blocks, useful when taking screenshots, for\n                  privacy reasons.\n                </small>\n              </div>\n            </li>\n            {authenticated && (\n              <li>\n                <button\n                  type=\"button\"\n                  class=\"light\"\n                  onClick={() => {\n                    states.showDrafts = true;\n                    states.showSettings = false;\n                  }}\n                >\n                  Unsent drafts\n                </button>\n              </li>\n            )}\n          </ul>\n        </section>\n        {authenticated && <PushNotificationsSection onClose={onClose} />}\n        <h3>About</h3>\n        <section>\n          <div\n            style={{\n              display: 'flex',\n              flexWrap: 'wrap',\n              gap: 8,\n              lineHeight: 1.25,\n              alignItems: 'center',\n              marginTop: 8,\n            }}\n          >\n            <img\n              src={logo}\n              alt=\"\"\n              width=\"64\"\n              height=\"64\"\n              style={{\n                aspectRatio: '1/1',\n                verticalAlign: 'middle',\n                background: '#b7cdf9',\n                borderRadius: 12,\n              }}\n            />\n            <div>\n              <b>Phanpy</b>{' '}\n              <a\n                href=\"https://hachyderm.io/@phanpy\"\n                // target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  states.showAccount = 'phanpy@hachyderm.io';\n                }}\n              >\n                @phanpy\n              </a>\n              <br />\n              <a\n                href=\"https://github.com/cheeaun/phanpy\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                Built\n              </a>{' '}\n              by{' '}\n              <a\n                href=\"https://mastodon.social/@cheeaun\"\n                // target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  states.showAccount = 'cheeaun@mastodon.social';\n                }}\n              >\n                @cheeaun\n              </a>\n            </div>\n          </div>\n          <p>\n            <a\n              href=\"https://github.com/sponsors/cheeaun\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Sponsor\n            </a>{' '}\n            &middot;{' '}\n            <a\n              href=\"https://www.buymeacoffee.com/cheeaun\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Donate\n            </a>{' '}\n            &middot;{' '}\n            <a\n              href=\"https://github.com/cheeaun/phanpy/blob/main/PRIVACY.MD\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Privacy Policy\n            </a>\n          </p>\n          {__BUILD_TIME__ && (\n            <p>\n              Version:{' '}\n              <input\n                type=\"text\"\n                class=\"version-string\"\n                readOnly\n                size=\"18\" // Manually calculated here\n                value={`${__BUILD_TIME__.slice(0, 10).replace(/-/g, '.')}${\n                  __COMMIT_HASH__ ? `.${__COMMIT_HASH__}` : ''\n                }`}\n                onClick={(e) => {\n                  e.target.select();\n                  // Copy to clipboard\n                  try {\n                    navigator.clipboard.writeText(e.target.value);\n                    showToast('Version string copied');\n                  } catch (e) {\n                    console.warn(e);\n                    showToast('Unable to copy version string');\n                  }\n                }}\n              />{' '}\n              <span class=\"ib insignificant\">\n                (\n                <a\n                  href={`https://github.com/cheeaun/phanpy/commit/${__COMMIT_HASH__}`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  <RelativeTime datetime={new Date(__BUILD_TIME__)} />\n                </a>\n                )\n              </span>\n            </p>\n          )}\n        </section>\n      </main>\n    </div>\n  );\n}\n\nfunction PushNotificationsSection({ onClose }) {\n  if (!isPushSupported()) return null;\n\n  const { instance } = api();\n  const [uiState, setUIState] = useState('default');\n  const pushFormRef = useRef();\n  const [allowNofitications, setAllowNotifications] = useState(false);\n  const [needRelogin, setNeedRelogin] = useState(false);\n  const previousPolicyRef = useRef();\n  useEffect(() => {\n    (async () => {\n      setUIState('loading');\n      try {\n        const { subscription, backendSubscription } = await initSubscription();\n        if (\n          backendSubscription?.policy &&\n          backendSubscription.policy !== 'none'\n        ) {\n          setAllowNotifications(true);\n          const { alerts, policy } = backendSubscription;\n          previousPolicyRef.current = policy;\n          const { elements } = pushFormRef.current;\n          const policyEl = elements.namedItem(policy);\n          if (policyEl) policyEl.value = policy;\n          // alerts is {}, iterate it\n          Object.keys(alerts).forEach((alert) => {\n            const el = elements.namedItem(alert);\n            if (el?.type === 'checkbox') {\n              el.checked = true;\n            }\n          });\n        }\n        setUIState('default');\n      } catch (err) {\n        console.warn(err);\n        if (/outside.*authorized/i.test(err.message)) {\n          setNeedRelogin(true);\n        } else {\n          alert(err?.message || err);\n        }\n        setUIState('error');\n      }\n    })();\n  }, []);\n\n  const isLoading = uiState === 'loading';\n\n  return (\n    <form\n      ref={pushFormRef}\n      onChange={() => {\n        const values = Object.fromEntries(new FormData(pushFormRef.current));\n        const allowNofitications = !!values['policy-allow'];\n        const params = {\n          policy: values.policy,\n          data: {\n            alerts: {\n              mention: !!values.mention,\n              favourite: !!values.favourite,\n              reblog: !!values.reblog,\n              follow: !!values.follow,\n              follow_request: !!values.followRequest,\n              poll: !!values.poll,\n              update: !!values.update,\n              status: !!values.status,\n            },\n          },\n        };\n\n        let alertsCount = 0;\n        // Remove false values from data.alerts\n        // API defaults to false anyway\n        Object.keys(params.data.alerts).forEach((key) => {\n          if (!params.data.alerts[key]) {\n            delete params.data.alerts[key];\n          } else {\n            alertsCount++;\n          }\n        });\n        const policyChanged = previousPolicyRef.current !== params.policy;\n\n        console.log('PN Form', { values, allowNofitications, params });\n\n        if (allowNofitications && alertsCount > 0) {\n          if (policyChanged) {\n            console.debug('Policy changed.');\n            removeSubscription()\n              .then(() => {\n                updateSubscription(params);\n              })\n              .catch((err) => {\n                console.warn(err);\n                alert('Failed to update subscription. Please try again.');\n              });\n          } else {\n            updateSubscription(params).catch((err) => {\n              console.warn(err);\n              alert('Failed to update subscription. Please try again.');\n            });\n          }\n        } else {\n          removeSubscription().catch((err) => {\n            console.warn(err);\n            alert('Failed to remove subscription. Please try again.');\n          });\n        }\n      }}\n    >\n      <h3>Push Notifications (beta)</h3>\n      <section>\n        <ul>\n          <li>\n            <label>\n              <input\n                type=\"checkbox\"\n                disabled={isLoading || needRelogin}\n                name=\"policy-allow\"\n                checked={allowNofitications}\n                onChange={async (e) => {\n                  const { checked } = e.target;\n                  if (checked) {\n                    // Request permission\n                    const permission = await Notification.requestPermission();\n                    if (permission === 'granted') {\n                      setAllowNotifications(true);\n                    } else {\n                      setAllowNotifications(false);\n                      if (permission === 'denied') {\n                        alert(\n                          'Push notifications are blocked. Please enable them in your browser settings.',\n                        );\n                      }\n                    }\n                  } else {\n                    setAllowNotifications(false);\n                  }\n                }}\n              />{' '}\n              Allow from{' '}\n              <select\n                name=\"policy\"\n                disabled={isLoading || needRelogin || !allowNofitications}\n              >\n                {[\n                  {\n                    value: 'all',\n                    label: 'anyone',\n                  },\n                  {\n                    value: 'followed',\n                    label: 'people I follow',\n                  },\n                  {\n                    value: 'follower',\n                    label: 'followers',\n                  },\n                ].map((type) => (\n                  <option value={type.value}>{type.label}</option>\n                ))}\n              </select>\n            </label>\n            <div\n              class=\"shazam-container no-animation\"\n              style={{\n                width: '100%',\n              }}\n              hidden={!allowNofitications}\n            >\n              <div class=\"shazam-container-inner\">\n                <div class=\"sub-section\">\n                  <ul>\n                    {[\n                      {\n                        value: 'mention',\n                        label: 'Mentions',\n                      },\n                      {\n                        value: 'favourite',\n                        label: 'Likes',\n                      },\n                      {\n                        value: 'reblog',\n                        label: 'Boosts',\n                      },\n                      {\n                        value: 'follow',\n                        label: 'Follows',\n                      },\n                      {\n                        value: 'followRequest',\n                        label: 'Follow requests',\n                      },\n                      {\n                        value: 'poll',\n                        label: 'Polls',\n                      },\n                      {\n                        value: 'update',\n                        label: 'Post edits',\n                      },\n                      {\n                        value: 'status',\n                        label: 'New posts',\n                      },\n                    ].map((alert) => (\n                      <li>\n                        <label>\n                          <input type=\"checkbox\" name={alert.value} />{' '}\n                          {alert.label}\n                        </label>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              </div>\n            </div>\n            {needRelogin && (\n              <div class=\"sub-section\">\n                <p>\n                  Push permission was not granted since your last login. You'll\n                  need to{' '}\n                  <Link to={`/login?instance=${instance}`} onClick={onClose}>\n                    <b>log in</b> again to grant push permission\n                  </Link>\n                  .\n                </p>\n              </div>\n            )}\n          </li>\n        </ul>\n      </section>\n      <p class=\"section-postnote\">\n        <small>\n          NOTE: Push notifications only work for <b>one account</b>.\n        </small>\n      </p>\n    </form>\n  );\n}\n\nexport default Settings;\n","const focusDeck = () => {\n  let timer = setTimeout(() => {\n    const columns = document.getElementById('columns');\n    if (columns) {\n      // Focus first column\n      // columns.querySelector('.deck-container')?.focus?.();\n    } else {\n      const modals = document.querySelectorAll('#modal-container > *');\n      if (modals?.length) {\n        // Focus last modal\n        const modal = modals[modals.length - 1]; // last one\n        const modalFocusElement =\n          modal.querySelector('[tabindex=\"-1\"]') || modal;\n        if (modalFocusElement) {\n          modalFocusElement.focus();\n          return;\n        }\n      }\n      const backDrop = document.querySelector('.deck-backdrop');\n      if (backDrop) return;\n      // Focus last deck\n      const pages = document.querySelectorAll('.deck-container');\n      const page = pages[pages.length - 1]; // last one\n      if (page && page.tabIndex === -1) {\n        console.log('FOCUS', page);\n        page.focus();\n      }\n    }\n  }, 100);\n  return () => clearTimeout(timer);\n};\n\nexport default focusDeck;\n","import { useEffect, useRef } from 'preact/hooks';\nimport { useLocation } from 'react-router-dom';\n\n// Hook that runs a callback when the location changes\n// Won't run on the first render\n\nexport default function useLocationChange(fn) {\n  if (!fn) return;\n  const location = useLocation();\n  const currentLocationRef = useRef(location.pathname);\n  useEffect(() => {\n    // console.log('location', {\n    //   current: currentLocationRef.current,\n    //   next: location.pathname,\n    // });\n    if (\n      currentLocationRef.current &&\n      location.pathname !== currentLocationRef.current\n    ) {\n      fn?.();\n    }\n  }, [location.pathname, fn]);\n}\n","import { useEffect, useRef, useState } from 'preact/hooks';\n\nimport { api } from '../utils/api';\nimport supports from '../utils/supports';\n\nimport Icon from './icon';\nimport MenuConfirm from './menu-confirm';\n\nfunction ListAddEdit({ list, onClose }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const editMode = !!list;\n  const nameFieldRef = useRef();\n  const repliesPolicyFieldRef = useRef();\n  const exclusiveFieldRef = useRef();\n  useEffect(() => {\n    if (editMode) {\n      nameFieldRef.current.value = list.title;\n      repliesPolicyFieldRef.current.value = list.repliesPolicy;\n      if (exclusiveFieldRef.current) {\n        exclusiveFieldRef.current.checked = list.exclusive;\n      }\n    }\n  }, [editMode]);\n  const supportsExclusive = supports('@mastodon/list-exclusive');\n\n  return (\n    <div class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}{' '}\n      <header>\n        <h2>{editMode ? 'Edit list' : 'New list'}</h2>\n      </header>\n      <main>\n        <form\n          class=\"list-form\"\n          onSubmit={(e) => {\n            e.preventDefault(); // Get form values\n\n            const formData = new FormData(e.target);\n            const title = formData.get('title');\n            const repliesPolicy = formData.get('replies_policy');\n            const exclusive = formData.get('exclusive') === 'on';\n            console.log({\n              title,\n              repliesPolicy,\n              exclusive,\n            });\n            setUIState('loading');\n\n            (async () => {\n              try {\n                let listResult;\n\n                if (editMode) {\n                  listResult = await masto.v1.lists.$select(list.id).update({\n                    title,\n                    replies_policy: repliesPolicy,\n                    exclusive,\n                  });\n                } else {\n                  listResult = await masto.v1.lists.create({\n                    title,\n                    replies_policy: repliesPolicy,\n                    exclusive,\n                  });\n                }\n\n                console.log(listResult);\n                setUIState('default');\n                onClose?.({\n                  state: 'success',\n                  list: listResult,\n                });\n              } catch (e) {\n                console.error(e);\n                setUIState('error');\n                alert(\n                  editMode ? 'Unable to edit list.' : 'Unable to create list.',\n                );\n              }\n            })();\n          }}\n        >\n          <div class=\"list-form-row\">\n            <label for=\"list-title\">\n              Name{' '}\n              <input\n                ref={nameFieldRef}\n                type=\"text\"\n                id=\"list-title\"\n                name=\"title\"\n                required\n                disabled={uiState === 'loading'}\n                dir=\"auto\"\n              />\n            </label>\n          </div>\n          <div class=\"list-form-row\">\n            <select\n              ref={repliesPolicyFieldRef}\n              name=\"replies_policy\"\n              required\n              disabled={uiState === 'loading'}\n            >\n              <option value=\"list\">Show replies to list members</option>\n              <option value=\"followed\">Show replies to people I follow</option>\n              <option value=\"none\">Don't show replies</option>\n            </select>\n          </div>\n          {supportsExclusive && (\n            <div class=\"list-form-row\">\n              <label class=\"label-block\">\n                <input\n                  ref={exclusiveFieldRef}\n                  type=\"checkbox\"\n                  name=\"exclusive\"\n                  disabled={uiState === 'loading'}\n                />{' '}\n                Hide posts on this list from Home/Following\n              </label>\n            </div>\n          )}\n          <div class=\"list-form-footer\">\n            <button type=\"submit\" disabled={uiState === 'loading'}>\n              {editMode ? 'Save' : 'Create'}\n            </button>\n            {editMode && (\n              <MenuConfirm\n                disabled={uiState === 'loading'}\n                align=\"end\"\n                menuItemClassName=\"danger\"\n                confirmLabel=\"Delete this list?\"\n                onClick={() => {\n                  // const yes = confirm('Delete this list?');\n                  // if (!yes) return;\n                  setUIState('loading');\n\n                  (async () => {\n                    try {\n                      await masto.v1.lists.$select(list.id).remove();\n                      setUIState('default');\n                      onClose?.({\n                        state: 'deleted',\n                      });\n                    } catch (e) {\n                      console.error(e);\n                      setUIState('error');\n                      alert('Unable to delete list.');\n                    }\n                  })();\n                }}\n              >\n                <button\n                  type=\"button\"\n                  class=\"light danger\"\n                  disabled={uiState === 'loading'}\n                >\n                  Delete…\n                </button>\n              </MenuConfirm>\n            )}\n          </div>\n        </form>\n      </main>\n    </div>\n  );\n}\n\nexport default ListAddEdit;\n","import './account-info.css';\n\nimport { Menu, MenuDivider, MenuItem, SubMenu } from '@szhsin/react-menu';\nimport {\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n} from 'preact/hooks';\n\nimport { api } from '../utils/api';\nimport enhanceContent from '../utils/enhance-content';\nimport getHTMLText from '../utils/getHTMLText';\nimport handleContentLinks from '../utils/handle-content-links';\nimport niceDateTime from '../utils/nice-date-time';\nimport pmem from '../utils/pmem';\nimport shortenNumber from '../utils/shorten-number';\nimport showToast from '../utils/show-toast';\nimport states, { hideAllModals } from '../utils/states';\nimport store from '../utils/store';\nimport { updateAccount } from '../utils/store-utils';\n\nimport AccountBlock from './account-block';\nimport Avatar from './avatar';\nimport EmojiText from './emoji-text';\nimport Icon from './icon';\nimport Link from './link';\nimport ListAddEdit from './list-add-edit';\nimport Loader from './loader';\nimport Menu2 from './menu2';\nimport MenuConfirm from './menu-confirm';\nimport Modal from './modal';\nimport TranslationBlock from './translation-block';\n\nconst MUTE_DURATIONS = [\n  60 * 5, // 5 minutes\n  60 * 30, // 30 minutes\n  60 * 60, // 1 hour\n  60 * 60 * 6, // 6 hours\n  60 * 60 * 24, // 1 day\n  60 * 60 * 24 * 3, // 3 days\n  60 * 60 * 24 * 7, // 1 week\n  0, // forever\n];\nconst MUTE_DURATIONS_LABELS = {\n  0: 'Forever',\n  300: '5 minutes',\n  1_800: '30 minutes',\n  3_600: '1 hour',\n  21_600: '6 hours',\n  86_400: '1 day',\n  259_200: '3 days',\n  604_800: '1 week',\n};\n\nconst LIMIT = 80;\n\nconst ACCOUNT_INFO_MAX_AGE = 1000 * 60 * 10; // 10 mins\n\nfunction fetchFamiliarFollowers(currentID, masto) {\n  return masto.v1.accounts.familiarFollowers.fetch({\n    id: [currentID],\n  });\n}\nconst memFetchFamiliarFollowers = pmem(fetchFamiliarFollowers, {\n  maxAge: ACCOUNT_INFO_MAX_AGE,\n});\n\nasync function fetchPostingStats(accountID, masto) {\n  const fetchStatuses = masto.v1.accounts\n    .$select(accountID)\n    .statuses.list({\n      limit: 20,\n    })\n    .next();\n\n  const { value: statuses } = await fetchStatuses;\n  console.log('fetched statuses', statuses);\n  const stats = {\n    total: statuses.length,\n    originals: 0,\n    replies: 0,\n    boosts: 0,\n  };\n  // Categories statuses by type\n  // - Original posts (not replies to others)\n  // - Threads (self-replies + 1st original post)\n  // - Boosts (reblogs)\n  // - Replies (not-self replies)\n  statuses.forEach((status) => {\n    if (status.reblog) {\n      stats.boosts++;\n    } else if (\n      !!status.inReplyToId &&\n      status.inReplyToAccountId !== status.account.id // Not self-reply\n    ) {\n      stats.replies++;\n    } else {\n      stats.originals++;\n    }\n  });\n\n  // Count days since last post\n  if (statuses.length) {\n    stats.daysSinceLastPost = Math.ceil(\n      (Date.now() - new Date(statuses[statuses.length - 1].createdAt)) /\n        86400000,\n    );\n  }\n\n  console.log('posting stats', stats);\n  return stats;\n}\nconst memFetchPostingStats = pmem(fetchPostingStats, {\n  maxAge: ACCOUNT_INFO_MAX_AGE,\n});\n\nfunction AccountInfo({\n  account,\n  fetchAccount = () => {},\n  standalone,\n  instance,\n  authenticated,\n}) {\n  const { masto } = api({\n    instance,\n  });\n  const { masto: currentMasto, instance: currentInstance } = api();\n  const [uiState, setUIState] = useState('default');\n  const isString = typeof account === 'string';\n  const [info, setInfo] = useState(isString ? null : account);\n\n  const sameCurrentInstance = useMemo(\n    () => instance === currentInstance,\n    [instance, currentInstance],\n  );\n\n  useEffect(() => {\n    if (!isString) {\n      setInfo(account);\n      return;\n    }\n    setUIState('loading');\n    (async () => {\n      try {\n        const info = await fetchAccount();\n        states.accounts[`${info.id}@${instance}`] = info;\n        setInfo(info);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setInfo(null);\n        setUIState('error');\n      }\n    })();\n  }, [isString, account, fetchAccount]);\n\n  const {\n    acct,\n    avatar,\n    avatarStatic,\n    bot,\n    createdAt,\n    displayName,\n    emojis,\n    fields,\n    followersCount,\n    followingCount,\n    group,\n    // header,\n    // headerStatic,\n    id,\n    lastStatusAt,\n    locked,\n    note,\n    statusesCount,\n    url,\n    username,\n    memorial,\n    moved,\n    roles,\n  } = info || {};\n  let headerIsAvatar = false;\n  let { header, headerStatic } = info || {};\n  if (!header || /missing\\.png$/.test(header)) {\n    if (avatar && !/missing\\.png$/.test(avatar)) {\n      header = avatar;\n      headerIsAvatar = true;\n      if (avatarStatic && !/missing\\.png$/.test(avatarStatic)) {\n        headerStatic = avatarStatic;\n      }\n    }\n  }\n\n  const isSelf = useMemo(\n    () => id === store.session.get('currentAccount'),\n    [id],\n  );\n\n  useEffect(() => {\n    const infoHasEssentials = !!(\n      info?.id &&\n      info?.username &&\n      info?.acct &&\n      info?.avatar &&\n      info?.avatarStatic &&\n      info?.displayName &&\n      info?.url\n    );\n    if (isSelf && instance && infoHasEssentials) {\n      const accounts = store.local.getJSON('accounts');\n      let updated = false;\n      accounts.forEach((account) => {\n        if (account.info.id === info.id && account.instanceURL === instance) {\n          account.info = info;\n          updated = true;\n        }\n      });\n      if (updated) {\n        console.log('Updated account info', info);\n        store.local.setJSON('accounts', accounts);\n      }\n    }\n  }, [isSelf, info, instance]);\n\n  const accountInstance = useMemo(() => {\n    if (!url) return null;\n    const domain = new URL(url).hostname;\n    return domain;\n  }, [url]);\n\n  const [headerCornerColors, setHeaderCornerColors] = useState([]);\n\n  const followersIterator = useRef();\n  const familiarFollowersCache = useRef([]);\n  async function fetchFollowers(firstLoad) {\n    if (firstLoad || !followersIterator.current) {\n      followersIterator.current = masto.v1.accounts.$select(id).followers.list({\n        limit: LIMIT,\n      });\n    }\n    const results = await followersIterator.current.next();\n    if (isSelf) return results;\n    if (!sameCurrentInstance) return results;\n\n    const { value } = results;\n    let newValue = [];\n    // On first load, fetch familiar followers, merge to top of results' `value`\n    // Remove dups on every fetch\n    if (firstLoad) {\n      const familiarFollowers = await masto.v1.accounts.familiarFollowers.fetch(\n        {\n          id: [id],\n        },\n      );\n      familiarFollowersCache.current = familiarFollowers[0].accounts;\n      newValue = [\n        ...familiarFollowersCache.current,\n        ...value.filter(\n          (account) =>\n            !familiarFollowersCache.current.some(\n              (familiar) => familiar.id === account.id,\n            ),\n        ),\n      ];\n    } else if (value?.length) {\n      newValue = value.filter(\n        (account) =>\n          !familiarFollowersCache.current.some(\n            (familiar) => familiar.id === account.id,\n          ),\n      );\n    }\n\n    return {\n      ...results,\n      value: newValue,\n    };\n  }\n\n  const followingIterator = useRef();\n  async function fetchFollowing(firstLoad) {\n    if (firstLoad || !followingIterator.current) {\n      followingIterator.current = masto.v1.accounts.$select(id).following.list({\n        limit: LIMIT,\n      });\n    }\n    const results = await followingIterator.current.next();\n    return results;\n  }\n\n  const LinkOrDiv = standalone ? 'div' : Link;\n  const accountLink = instance ? `/${instance}/a/${id}` : `/a/${id}`;\n\n  const [familiarFollowers, setFamiliarFollowers] = useState([]);\n  const [postingStats, setPostingStats] = useState();\n  const [postingStatsUIState, setPostingStatsUIState] = useState('default');\n  const hasPostingStats = !!postingStats?.total;\n\n  const renderFamiliarFollowers = async (currentID) => {\n    try {\n      const followers = await memFetchFamiliarFollowers(\n        currentID,\n        currentMasto,\n      );\n      console.log('fetched familiar followers', followers);\n      setFamiliarFollowers(\n        followers[0].accounts.slice(0, FAMILIAR_FOLLOWERS_LIMIT),\n      );\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const renderPostingStats = async () => {\n    if (!id) return;\n    setPostingStatsUIState('loading');\n    try {\n      const stats = await memFetchPostingStats(id, masto);\n      setPostingStats(stats);\n      setPostingStatsUIState('default');\n    } catch (e) {\n      console.error(e);\n      setPostingStatsUIState('error');\n    }\n  };\n\n  const onRelationshipChange = useCallback(\n    ({ relationship, currentID }) => {\n      if (!relationship.following) {\n        renderFamiliarFollowers(currentID);\n        if (!standalone && statusesCount > 0) {\n          // Only render posting stats if not standalone and has posts\n          renderPostingStats();\n        }\n      }\n    },\n    [standalone, id, statusesCount],\n  );\n\n  return (\n    <div\n      tabIndex=\"-1\"\n      class={`account-container  ${uiState === 'loading' ? 'skeleton' : ''}`}\n      style={{\n        '--header-color-1': headerCornerColors[0],\n        '--header-color-2': headerCornerColors[1],\n        '--header-color-3': headerCornerColors[2],\n        '--header-color-4': headerCornerColors[3],\n      }}\n    >\n      {uiState === 'error' && (\n        <div class=\"ui-state\">\n          <p>Unable to load account.</p>\n          <p>\n            <a\n              href={isString ? account : url}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Go to account page <Icon icon=\"external\" />\n            </a>\n          </p>\n        </div>\n      )}\n      {uiState === 'loading' ? (\n        <>\n          <header>\n            <AccountBlock avatarSize=\"xxxl\" skeleton />\n          </header>\n          <main>\n            <div class=\"note\">\n              <p>███████ ████ ████</p>\n              <p>████ ████████ ██████ █████████ ████ ██</p>\n            </div>\n            <div class=\"account-metadata-box\">\n              <div class=\"profile-metadata\">\n                <div class=\"profile-field\">\n                  <b class=\"more-insignificant\">███</b>\n                  <p>██████</p>\n                </div>\n                <div class=\"profile-field\">\n                  <b class=\"more-insignificant\">████</b>\n                  <p>███████████</p>\n                </div>\n              </div>\n              <div class=\"stats\">\n                <div>\n                  <span>██</span> Followers\n                </div>\n                <div>\n                  <span>██</span> Following\n                </div>\n                <div>\n                  <span>██</span> Posts\n                </div>\n              </div>\n            </div>\n            <div class=\"actions\">\n              <span />\n              <span class=\"buttons\">\n                <button type=\"button\" title=\"More\" class=\"plain\" disabled>\n                  <Icon icon=\"more\" size=\"l\" alt=\"More\" />\n                </button>\n              </span>\n            </div>\n          </main>\n        </>\n      ) : (\n        info && (\n          <>\n            {!!moved && (\n              <div class=\"account-moved\">\n                <p>\n                  <b>{displayName}</b> has indicated that their new account is\n                  now:\n                </p>\n                <AccountBlock\n                  account={moved}\n                  instance={instance}\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    states.showAccount = moved;\n                  }}\n                />\n              </div>\n            )}\n            {!!header && !/missing\\.png$/.test(header) && (\n              <img\n                src={header}\n                alt=\"\"\n                class={`header-banner ${\n                  headerIsAvatar ? 'header-is-avatar' : ''\n                }`}\n                onError={(e) => {\n                  if (e.target.crossOrigin) {\n                    if (e.target.src !== headerStatic) {\n                      e.target.src = headerStatic;\n                    } else {\n                      e.target.removeAttribute('crossorigin');\n                      e.target.src = header;\n                    }\n                  } else if (e.target.src !== headerStatic) {\n                    e.target.src = headerStatic;\n                  } else {\n                    e.target.remove();\n                  }\n                }}\n                crossOrigin=\"anonymous\"\n                onLoad={(e) => {\n                  e.target.classList.add('loaded');\n                  try {\n                    // Get color from four corners of image\n                    const canvas = document.createElement('canvas');\n                    const ctx = canvas.getContext('2d', {\n                      willReadFrequently: true,\n                    });\n                    canvas.width = e.target.width;\n                    canvas.height = e.target.height;\n                    ctx.drawImage(e.target, 0, 0);\n                    // const colors = [\n                    //   ctx.getImageData(0, 0, 1, 1).data,\n                    //   ctx.getImageData(e.target.width - 1, 0, 1, 1).data,\n                    //   ctx.getImageData(0, e.target.height - 1, 1, 1).data,\n                    //   ctx.getImageData(\n                    //     e.target.width - 1,\n                    //     e.target.height - 1,\n                    //     1,\n                    //     1,\n                    //   ).data,\n                    // ];\n                    // Get 10x10 pixels from corners, get average color from each\n                    const pixelDimension = 10;\n                    const colors = [\n                      ctx.getImageData(0, 0, pixelDimension, pixelDimension)\n                        .data,\n                      ctx.getImageData(\n                        e.target.width - pixelDimension,\n                        0,\n                        pixelDimension,\n                        pixelDimension,\n                      ).data,\n                      ctx.getImageData(\n                        0,\n                        e.target.height - pixelDimension,\n                        pixelDimension,\n                        pixelDimension,\n                      ).data,\n                      ctx.getImageData(\n                        e.target.width - pixelDimension,\n                        e.target.height - pixelDimension,\n                        pixelDimension,\n                        pixelDimension,\n                      ).data,\n                    ].map((data) => {\n                      let r = 0;\n                      let g = 0;\n                      let b = 0;\n                      let a = 0;\n                      for (let i = 0; i < data.length; i += 4) {\n                        r += data[i];\n                        g += data[i + 1];\n                        b += data[i + 2];\n                        a += data[i + 3];\n                      }\n                      const dataLength = data.length / 4;\n                      return [\n                        r / dataLength,\n                        g / dataLength,\n                        b / dataLength,\n                        a / dataLength,\n                      ];\n                    });\n                    const rgbColors = colors.map((color) => {\n                      const [r, g, b, a] = lightenRGB(color);\n                      return `rgba(${r}, ${g}, ${b}, ${a})`;\n                    });\n                    setHeaderCornerColors(rgbColors);\n                    console.log({ colors, rgbColors });\n                  } catch (e) {\n                    // Silently fail\n                  }\n                }}\n              />\n            )}\n            <header>\n              <AccountBlock\n                account={info}\n                instance={instance}\n                avatarSize=\"xxxl\"\n                external={standalone}\n                internal={!standalone}\n              />\n            </header>\n            <div class=\"faux-header-bg\" aria-hidden=\"true\" />\n            <main>\n              {!!memorial && <span class=\"tag\">In Memoriam</span>}\n              {!!bot && (\n                <span class=\"tag\">\n                  <Icon icon=\"bot\" /> Automated\n                </span>\n              )}\n              {!!group && (\n                <span class=\"tag\">\n                  <Icon icon=\"group\" /> Group\n                </span>\n              )}\n              {roles?.map((role) => (\n                <span class=\"tag\">\n                  {role.name}\n                  {!!accountInstance && (\n                    <>\n                      {' '}\n                      <span class=\"more-insignificant\">{accountInstance}</span>\n                    </>\n                  )}\n                </span>\n              ))}\n              <div\n                class=\"note\"\n                dir=\"auto\"\n                onClick={handleContentLinks({\n                  instance: currentInstance,\n                })}\n                dangerouslySetInnerHTML={{\n                  __html: enhanceContent(note, { emojis }),\n                }}\n              />\n              <div class=\"account-metadata-box\">\n                {fields?.length > 0 && (\n                  <div class=\"profile-metadata\">\n                    {fields.map(({ name, value, verifiedAt }, i) => (\n                      <div\n                        class={`profile-field ${\n                          verifiedAt ? 'profile-verified' : ''\n                        }`}\n                        key={name + i}\n                        dir=\"auto\"\n                      >\n                        <b>\n                          <EmojiText text={name} emojis={emojis} />{' '}\n                          {!!verifiedAt && (\n                            <Icon icon=\"check-circle\" size=\"s\" />\n                          )}\n                        </b>\n                        <p\n                          dangerouslySetInnerHTML={{\n                            __html: enhanceContent(value, { emojis }),\n                          }}\n                        />\n                      </div>\n                    ))}\n                  </div>\n                )}\n                <div class=\"stats\">\n                  <LinkOrDiv\n                    tabIndex={0}\n                    to={accountLink}\n                    onClick={() => {\n                      // states.showAccount = false;\n                      setTimeout(() => {\n                        states.showGenericAccounts = {\n                          heading: 'Followers',\n                          fetchAccounts: fetchFollowers,\n                          instance,\n                          excludeRelationshipAttrs: ['followedBy'],\n                        };\n                      }, 0);\n                    }}\n                  >\n                    {!!familiarFollowers.length && (\n                      <span class=\"shazam-container-horizontal\">\n                        <span class=\"shazam-container-inner stats-avatars-bunch\">\n                          {familiarFollowers.map((follower) => (\n                            <Avatar\n                              url={follower.avatarStatic}\n                              size=\"s\"\n                              alt={`${follower.displayName} @${follower.acct}`}\n                              squircle={follower?.bot}\n                            />\n                          ))}\n                        </span>\n                      </span>\n                    )}\n                    <span title={followersCount}>\n                      {shortenNumber(followersCount)}\n                    </span>{' '}\n                    Followers\n                  </LinkOrDiv>\n                  <LinkOrDiv\n                    class=\"insignificant\"\n                    tabIndex={0}\n                    to={accountLink}\n                    onClick={() => {\n                      // states.showAccount = false;\n                      setTimeout(() => {\n                        states.showGenericAccounts = {\n                          heading: 'Following',\n                          fetchAccounts: fetchFollowing,\n                          instance,\n                          excludeRelationshipAttrs: ['following'],\n                        };\n                      }, 0);\n                    }}\n                  >\n                    <span title={followingCount}>\n                      {shortenNumber(followingCount)}\n                    </span>{' '}\n                    Following\n                    <br />\n                  </LinkOrDiv>\n                  <LinkOrDiv\n                    class=\"insignificant\"\n                    to={accountLink}\n                    // onClick={\n                    //   standalone\n                    //     ? undefined\n                    //     : () => {\n                    //         hideAllModals();\n                    //       }\n                    // }\n                  >\n                    <span title={statusesCount}>\n                      {shortenNumber(statusesCount)}\n                    </span>{' '}\n                    Posts\n                  </LinkOrDiv>\n                  {!!createdAt && (\n                    <div class=\"insignificant\">\n                      Joined{' '}\n                      <time datetime={createdAt}>\n                        {niceDateTime(createdAt, {\n                          hideTime: true,\n                        })}\n                      </time>\n                    </div>\n                  )}\n                </div>\n              </div>\n              {!!postingStats && (\n                <LinkOrDiv\n                  to={accountLink}\n                  class=\"account-metadata-box\"\n                  // onClick={() => {\n                  //   states.showAccount = false;\n                  // }}\n                >\n                  <div class=\"shazam-container\">\n                    <div class=\"shazam-container-inner\">\n                      {hasPostingStats ? (\n                        <div\n                          class=\"posting-stats\"\n                          title={`${Math.round(\n                            (postingStats.originals / postingStats.total) * 100,\n                          )}% original posts, ${Math.round(\n                            (postingStats.replies / postingStats.total) * 100,\n                          )}% replies, ${Math.round(\n                            (postingStats.boosts / postingStats.total) * 100,\n                          )}% boosts`}\n                        >\n                          <div>\n                            {postingStats.daysSinceLastPost < 365\n                              ? `Last ${postingStats.total} post${\n                                  postingStats.total > 1 ? 's' : ''\n                                } in the past \n                      ${postingStats.daysSinceLastPost} day${\n                                  postingStats.daysSinceLastPost > 1 ? 's' : ''\n                                }`\n                              : `\n                      Last ${postingStats.total} posts in the past year(s)\n                      `}\n                          </div>\n                          <div\n                            class=\"posting-stats-bar\"\n                            style={{\n                              // [originals | replies | boosts]\n                              '--originals-percentage': `${\n                                (postingStats.originals / postingStats.total) *\n                                100\n                              }%`,\n                              '--replies-percentage': `${\n                                ((postingStats.originals +\n                                  postingStats.replies) /\n                                  postingStats.total) *\n                                100\n                              }%`,\n                            }}\n                          />\n                          <div class=\"posting-stats-legends\">\n                            <span class=\"ib\">\n                              <span class=\"posting-stats-legend-item posting-stats-legend-item-originals\" />{' '}\n                              Original\n                            </span>{' '}\n                            <span class=\"ib\">\n                              <span class=\"posting-stats-legend-item posting-stats-legend-item-replies\" />{' '}\n                              Replies\n                            </span>{' '}\n                            <span class=\"ib\">\n                              <span class=\"posting-stats-legend-item posting-stats-legend-item-boosts\" />{' '}\n                              Boosts\n                            </span>\n                          </div>\n                        </div>\n                      ) : (\n                        <div class=\"posting-stats\">Post stats unavailable.</div>\n                      )}\n                    </div>\n                  </div>\n                </LinkOrDiv>\n              )}\n              <div class=\"account-metadata-box\">\n                <div\n                  class=\"shazam-container no-animation\"\n                  hidden={!!postingStats}\n                >\n                  <div class=\"shazam-container-inner\">\n                    <button\n                      type=\"button\"\n                      class=\"posting-stats-button\"\n                      disabled={postingStatsUIState === 'loading'}\n                      onClick={() => {\n                        renderPostingStats();\n                      }}\n                    >\n                      <div\n                        class={`posting-stats-bar posting-stats-icon ${\n                          postingStatsUIState === 'loading' ? 'loading' : ''\n                        }`}\n                        style={{\n                          '--originals-percentage': '33%',\n                          '--replies-percentage': '66%',\n                        }}\n                      />\n                      View post stats{' '}\n                      {/* <Loader\n                        abrupt\n                        hidden={postingStatsUIState !== 'loading'}\n                      /> */}\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </main>\n            <footer>\n              <RelatedActions\n                info={info}\n                instance={instance}\n                authenticated={authenticated}\n                onRelationshipChange={onRelationshipChange}\n              />\n            </footer>\n          </>\n        )\n      )}\n    </div>\n  );\n}\n\nconst FAMILIAR_FOLLOWERS_LIMIT = 3;\n\nfunction RelatedActions({\n  info,\n  instance,\n  authenticated,\n  onRelationshipChange = () => {},\n}) {\n  if (!info) return null;\n  const {\n    masto: currentMasto,\n    instance: currentInstance,\n    authenticated: currentAuthenticated,\n  } = api();\n  const sameInstance = instance === currentInstance;\n\n  const [relationshipUIState, setRelationshipUIState] = useState('default');\n  const [relationship, setRelationship] = useState(null);\n\n  const { id, acct, url, username, locked, lastStatusAt, note, fields, moved } =\n    info;\n  const accountID = useRef(id);\n\n  const {\n    following,\n    showingReblogs,\n    notifying,\n    followedBy,\n    blocking,\n    blockedBy,\n    muting,\n    mutingNotifications,\n    requested,\n    domainBlocking,\n    endorsed,\n    note: privateNote,\n  } = relationship || {};\n\n  const [currentInfo, setCurrentInfo] = useState(null);\n  const [isSelf, setIsSelf] = useState(false);\n\n  useEffect(() => {\n    if (info) {\n      const currentAccount = store.session.get('currentAccount');\n      let currentID;\n      (async () => {\n        if (sameInstance && authenticated) {\n          currentID = id;\n        } else if (!sameInstance && currentAuthenticated) {\n          // Grab this account from my logged-in instance\n          const acctHasInstance = info.acct.includes('@');\n          try {\n            const results = await currentMasto.v2.search.fetch({\n              q: acctHasInstance ? info.acct : `${info.username}@${instance}`,\n              type: 'accounts',\n              limit: 1,\n              resolve: true,\n            });\n            console.log('🥏 Fetched account from logged-in instance', results);\n            if (results.accounts.length) {\n              currentID = results.accounts[0].id;\n              setCurrentInfo(results.accounts[0]);\n            }\n          } catch (e) {\n            console.error(e);\n          }\n        }\n\n        if (!currentID) return;\n\n        if (currentAccount === currentID) {\n          // It's myself!\n          setIsSelf(true);\n          return;\n        }\n\n        accountID.current = currentID;\n\n        if (moved) return;\n\n        setRelationshipUIState('loading');\n\n        const fetchRelationships = currentMasto.v1.accounts.relationships.fetch(\n          {\n            id: [currentID],\n          },\n        );\n\n        try {\n          const relationships = await fetchRelationships;\n          console.log('fetched relationship', relationships);\n          setRelationshipUIState('default');\n\n          if (relationships.length) {\n            const relationship = relationships[0];\n            setRelationship(relationship);\n            onRelationshipChange({ relationship, currentID });\n          }\n        } catch (e) {\n          console.error(e);\n          setRelationshipUIState('error');\n        }\n      })();\n    }\n  }, [info, authenticated]);\n\n  useEffect(() => {\n    if (info && isSelf) {\n      updateAccount(info);\n    }\n  }, [info, isSelf]);\n\n  const loading = relationshipUIState === 'loading';\n\n  const [showTranslatedBio, setShowTranslatedBio] = useState(false);\n  const [showAddRemoveLists, setShowAddRemoveLists] = useState(false);\n  const [showPrivateNoteModal, setShowPrivateNoteModal] = useState(false);\n\n  return (\n    <>\n      <div class=\"actions\">\n        <span>\n          {followedBy ? (\n            <span class=\"tag\">Following you</span>\n          ) : !!lastStatusAt ? (\n            <small class=\"insignificant\">\n              Last post:{' '}\n              <span class=\"ib\">\n                {niceDateTime(lastStatusAt, {\n                  hideTime: true,\n                })}\n              </span>\n            </small>\n          ) : (\n            <span />\n          )}\n          {muting && <span class=\"tag danger\">Muted</span>}\n          {blocking && <span class=\"tag danger\">Blocked</span>}\n        </span>{' '}\n        <span class=\"buttons\">\n          {!!privateNote && (\n            <button\n              type=\"button\"\n              class=\"private-note-tag\"\n              title=\"Private note\"\n              onClick={() => {\n                setShowPrivateNoteModal(true);\n              }}\n              dir=\"auto\"\n            >\n              <span>{privateNote}</span>\n            </button>\n          )}\n          <Menu2\n            portal={{\n              target: document.body,\n            }}\n            containerProps={{\n              style: {\n                // Higher than the backdrop\n                zIndex: 1001,\n              },\n            }}\n            align=\"center\"\n            position=\"anchor\"\n            overflow=\"auto\"\n            menuButton={\n              <button\n                type=\"button\"\n                title=\"More\"\n                class=\"plain\"\n                disabled={loading}\n              >\n                <Icon icon=\"more\" size=\"l\" alt=\"More\" />\n              </button>\n            }\n          >\n            {currentAuthenticated && !isSelf && (\n              <>\n                <MenuItem\n                  onClick={() => {\n                    states.showCompose = {\n                      draftStatus: {\n                        status: `@${currentInfo?.acct || acct} `,\n                      },\n                    };\n                  }}\n                >\n                  <Icon icon=\"at\" />\n                  <span>Mention @{username}</span>\n                </MenuItem>\n                <MenuItem\n                  onClick={() => {\n                    setShowTranslatedBio(true);\n                  }}\n                >\n                  <Icon icon=\"translate\" />\n                  <span>Translate bio</span>\n                </MenuItem>\n                <MenuItem\n                  onClick={() => {\n                    setShowPrivateNoteModal(true);\n                  }}\n                >\n                  <Icon icon=\"pencil\" />\n                  <span>\n                    {privateNote ? 'Edit private note' : 'Add private note'}\n                  </span>\n                </MenuItem>\n                {/* Add/remove from lists is only possible if following the account */}\n                {following && (\n                  <MenuItem\n                    onClick={() => {\n                      setShowAddRemoveLists(true);\n                    }}\n                  >\n                    <Icon icon=\"list\" />\n                    <span>Add/remove from Lists</span>\n                  </MenuItem>\n                )}\n                <MenuDivider />\n              </>\n            )}\n            <MenuItem href={url} target=\"_blank\">\n              <Icon icon=\"external\" />\n              <small class=\"menu-double-lines\">{niceAccountURL(url)}</small>\n            </MenuItem>\n            <div class=\"menu-horizontal\">\n              <MenuItem\n                onClick={() => {\n                  // Copy url to clipboard\n                  try {\n                    navigator.clipboard.writeText(url);\n                    showToast('Link copied');\n                  } catch (e) {\n                    console.error(e);\n                    showToast('Unable to copy link');\n                  }\n                }}\n              >\n                <Icon icon=\"link\" />\n                <span>Copy</span>\n              </MenuItem>\n              {navigator?.share &&\n                navigator?.canShare?.({\n                  url,\n                }) && (\n                  <MenuItem\n                    onClick={() => {\n                      try {\n                        navigator.share({\n                          url,\n                        });\n                      } catch (e) {\n                        console.error(e);\n                        alert(\"Sharing doesn't seem to work.\");\n                      }\n                    }}\n                  >\n                    <Icon icon=\"share\" />\n                    <span>Share…</span>\n                  </MenuItem>\n                )}\n            </div>\n            {!!relationship && (\n              <>\n                <MenuDivider />\n                {muting ? (\n                  <MenuItem\n                    onClick={() => {\n                      setRelationshipUIState('loading');\n                      (async () => {\n                        try {\n                          const newRelationship = await currentMasto.v1.accounts\n                            .$select(currentInfo?.id || id)\n                            .unmute();\n                          console.log('unmuting', newRelationship);\n                          setRelationship(newRelationship);\n                          setRelationshipUIState('default');\n                          showToast(`Unmuted @${username}`);\n                          states.reloadGenericAccounts.id = 'mute';\n                          states.reloadGenericAccounts.counter++;\n                        } catch (e) {\n                          console.error(e);\n                          setRelationshipUIState('error');\n                        }\n                      })();\n                    }}\n                  >\n                    <Icon icon=\"unmute\" />\n                    <span>Unmute @{username}</span>\n                  </MenuItem>\n                ) : (\n                  <SubMenu\n                    openTrigger=\"clickOnly\"\n                    direction=\"bottom\"\n                    overflow=\"auto\"\n                    shift={16}\n                    label={\n                      <>\n                        <Icon icon=\"mute\" />\n                        <span class=\"menu-grow\">Mute @{username}…</span>\n                        <span\n                          style={{\n                            textOverflow: 'clip',\n                          }}\n                        >\n                          <Icon icon=\"time\" />\n                          <Icon icon=\"chevron-right\" />\n                        </span>\n                      </>\n                    }\n                  >\n                    <div class=\"menu-wrap\">\n                      {MUTE_DURATIONS.map((duration) => (\n                        <MenuItem\n                          onClick={() => {\n                            setRelationshipUIState('loading');\n                            (async () => {\n                              try {\n                                const newRelationship =\n                                  await currentMasto.v1.accounts\n                                    .$select(currentInfo?.id || id)\n                                    .mute({\n                                      duration,\n                                    });\n                                console.log('muting', newRelationship);\n                                setRelationship(newRelationship);\n                                setRelationshipUIState('default');\n                                showToast(\n                                  `Muted @${username} for ${MUTE_DURATIONS_LABELS[duration]}`,\n                                );\n                                states.reloadGenericAccounts.id = 'mute';\n                                states.reloadGenericAccounts.counter++;\n                              } catch (e) {\n                                console.error(e);\n                                setRelationshipUIState('error');\n                                showToast(`Unable to mute @${username}`);\n                              }\n                            })();\n                          }}\n                        >\n                          {MUTE_DURATIONS_LABELS[duration]}\n                        </MenuItem>\n                      ))}\n                    </div>\n                  </SubMenu>\n                )}\n                <MenuConfirm\n                  subMenu\n                  confirm={!blocking}\n                  confirmLabel={\n                    <>\n                      <Icon icon=\"block\" />\n                      <span>Block @{username}?</span>\n                    </>\n                  }\n                  menuItemClassName=\"danger\"\n                  onClick={() => {\n                    // if (!blocking && !confirm(`Block @${username}?`)) {\n                    //   return;\n                    // }\n                    setRelationshipUIState('loading');\n                    (async () => {\n                      try {\n                        if (blocking) {\n                          const newRelationship = await currentMasto.v1.accounts\n                            .$select(currentInfo?.id || id)\n                            .unblock();\n                          console.log('unblocking', newRelationship);\n                          setRelationship(newRelationship);\n                          setRelationshipUIState('default');\n                          showToast(`Unblocked @${username}`);\n                        } else {\n                          const newRelationship = await currentMasto.v1.accounts\n                            .$select(currentInfo?.id || id)\n                            .block();\n                          console.log('blocking', newRelationship);\n                          setRelationship(newRelationship);\n                          setRelationshipUIState('default');\n                          showToast(`Blocked @${username}`);\n                        }\n                        states.reloadGenericAccounts.id = 'block';\n                        states.reloadGenericAccounts.counter++;\n                      } catch (e) {\n                        console.error(e);\n                        setRelationshipUIState('error');\n                        if (blocking) {\n                          showToast(`Unable to unblock @${username}`);\n                        } else {\n                          showToast(`Unable to block @${username}`);\n                        }\n                      }\n                    })();\n                  }}\n                >\n                  {blocking ? (\n                    <>\n                      <Icon icon=\"unblock\" />\n                      <span>Unblock @{username}</span>\n                    </>\n                  ) : (\n                    <>\n                      <Icon icon=\"block\" />\n                      <span>Block @{username}…</span>\n                    </>\n                  )}\n                </MenuConfirm>\n                {/* <MenuItem>\n                <Icon icon=\"flag\" />\n                <span>Report @{username}…</span>\n              </MenuItem> */}\n              </>\n            )}\n          </Menu2>\n          {!relationship && relationshipUIState === 'loading' && (\n            <Loader abrupt />\n          )}\n          {!!relationship && (\n            <MenuConfirm\n              confirm={following || requested}\n              confirmLabel={\n                <span>\n                  {requested\n                    ? 'Withdraw follow request?'\n                    : `Unfollow @${info.acct || info.username}?`}\n                </span>\n              }\n              menuItemClassName=\"danger\"\n              align=\"end\"\n              disabled={loading}\n              onClick={() => {\n                setRelationshipUIState('loading');\n                (async () => {\n                  try {\n                    let newRelationship;\n\n                    if (following || requested) {\n                      // const yes = confirm(\n                      //   requested\n                      //     ? 'Withdraw follow request?'\n                      //     : `Unfollow @${info.acct || info.username}?`,\n                      // );\n\n                      // if (yes) {\n                      newRelationship = await currentMasto.v1.accounts\n                        .$select(accountID.current)\n                        .unfollow();\n                      // }\n                    } else {\n                      newRelationship = await currentMasto.v1.accounts\n                        .$select(accountID.current)\n                        .follow();\n                    }\n\n                    if (newRelationship) setRelationship(newRelationship);\n                    setRelationshipUIState('default');\n                  } catch (e) {\n                    alert(e);\n                    setRelationshipUIState('error');\n                  }\n                })();\n              }}\n            >\n              <button\n                type=\"button\"\n                class={`${following || requested ? 'light swap' : ''}`}\n                data-swap-state={following || requested ? 'danger' : ''}\n                disabled={loading}\n              >\n                {following ? (\n                  <>\n                    <span>Following</span>\n                    <span>Unfollow…</span>\n                  </>\n                ) : requested ? (\n                  <>\n                    <span>Requested</span>\n                    <span>Withdraw…</span>\n                  </>\n                ) : locked ? (\n                  <>\n                    <Icon icon=\"lock\" /> <span>Follow</span>\n                  </>\n                ) : (\n                  'Follow'\n                )}\n              </button>\n            </MenuConfirm>\n          )}\n        </span>\n      </div>\n      {!!showTranslatedBio && (\n        <Modal\n          class=\"light\"\n          onClose={() => {\n            setShowTranslatedBio(false);\n          }}\n        >\n          <TranslatedBioSheet\n            note={note}\n            fields={fields}\n            onClose={() => setShowTranslatedBio(false)}\n          />\n        </Modal>\n      )}\n      {!!showAddRemoveLists && (\n        <Modal\n          class=\"light\"\n          onClose={() => {\n            setShowAddRemoveLists(false);\n          }}\n        >\n          <AddRemoveListsSheet\n            accountID={accountID.current}\n            onClose={() => setShowAddRemoveLists(false)}\n          />\n        </Modal>\n      )}\n      {!!showPrivateNoteModal && (\n        <Modal\n          class=\"light\"\n          onClose={() => {\n            setShowPrivateNoteModal(false);\n          }}\n        >\n          <PrivateNoteSheet\n            account={info}\n            note={privateNote}\n            onRelationshipChange={(relationship) => {\n              setRelationship(relationship);\n              // onRelationshipChange({ relationship, currentID: accountID.current });\n            }}\n            onClose={() => setShowPrivateNoteModal(false)}\n          />\n        </Modal>\n      )}\n    </>\n  );\n}\n\n// Apply more alpha if high luminence\nfunction lightenRGB([r, g, b]) {\n  const luminence = 0.2126 * r + 0.7152 * g + 0.0722 * b;\n  console.log('luminence', luminence);\n  let alpha;\n  if (luminence >= 220) {\n    alpha = 1;\n  } else if (luminence <= 50) {\n    alpha = 0.1;\n  } else {\n    alpha = luminence / 255;\n  }\n  alpha = Math.min(1, alpha);\n  return [r, g, b, alpha];\n}\n\nfunction niceAccountURL(url) {\n  if (!url) return;\n  const urlObj = new URL(url);\n  const { host, pathname } = urlObj;\n  const path = pathname.replace(/\\/$/, '').replace(/^\\//, '');\n  return (\n    <>\n      <span class=\"more-insignificant\">{host}/</span>\n      <wbr />\n      <span>{path}</span>\n    </>\n  );\n}\n\nfunction TranslatedBioSheet({ note, fields, onClose }) {\n  const fieldsText =\n    fields\n      ?.map(({ name, value }) => `${name}\\n${getHTMLText(value)}`)\n      .join('\\n\\n') || '';\n\n  const text = getHTMLText(note) + (fieldsText ? `\\n\\n${fieldsText}` : '');\n\n  return (\n    <div class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Translated Bio</h2>\n      </header>\n      <main>\n        <p\n          style={{\n            whiteSpace: 'pre-wrap',\n          }}\n        >\n          {text}\n        </p>\n        <TranslationBlock forceTranslate text={text} />\n      </main>\n    </div>\n  );\n}\n\nfunction AddRemoveListsSheet({ accountID, onClose }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [lists, setLists] = useState([]);\n  const [listsContainingAccount, setListsContainingAccount] = useState([]);\n  const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const lists = await masto.v1.lists.list();\n        lists.sort((a, b) => a.title.localeCompare(b.title));\n        const listsContainingAccount = await masto.v1.accounts\n          .$select(accountID)\n          .lists.list();\n        console.log({ lists, listsContainingAccount });\n        setLists(lists);\n        setListsContainingAccount(listsContainingAccount);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, [reloadCount]);\n\n  const [showListAddEditModal, setShowListAddEditModal] = useState(false);\n\n  return (\n    <div class=\"sheet\" id=\"list-add-remove-container\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Add/Remove from Lists</h2>\n      </header>\n      <main>\n        {lists.length > 0 ? (\n          <ul class=\"list-add-remove\">\n            {lists.map((list) => {\n              const inList = listsContainingAccount.some(\n                (l) => l.id === list.id,\n              );\n              return (\n                <li>\n                  <button\n                    type=\"button\"\n                    class={`light ${inList ? 'checked' : ''}`}\n                    disabled={uiState === 'loading'}\n                    onClick={() => {\n                      setUIState('loading');\n                      (async () => {\n                        try {\n                          if (inList) {\n                            await masto.v1.lists\n                              .$select(list.id)\n                              .accounts.remove({\n                                accountIds: [accountID],\n                              });\n                          } else {\n                            await masto.v1.lists\n                              .$select(list.id)\n                              .accounts.create({\n                                accountIds: [accountID],\n                              });\n                          }\n                          // setUIState('default');\n                          reload();\n                        } catch (e) {\n                          console.error(e);\n                          setUIState('error');\n                          alert(\n                            inList\n                              ? 'Unable to remove from list.'\n                              : 'Unable to add to list.',\n                          );\n                        }\n                      })();\n                    }}\n                  >\n                    <Icon icon=\"check-circle\" />\n                    <span>{list.title}</span>\n                  </button>\n                </li>\n              );\n            })}\n          </ul>\n        ) : uiState === 'loading' ? (\n          <p class=\"ui-state\">\n            <Loader abrupt />\n          </p>\n        ) : uiState === 'error' ? (\n          <p class=\"ui-state\">Unable to load lists.</p>\n        ) : (\n          <p class=\"ui-state\">No lists.</p>\n        )}\n        <button\n          type=\"button\"\n          class=\"plain2\"\n          onClick={() => setShowListAddEditModal(true)}\n          disabled={uiState !== 'default'}\n        >\n          <Icon icon=\"plus\" size=\"l\" /> <span>New list</span>\n        </button>\n      </main>\n      {showListAddEditModal && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowListAddEditModal(false);\n            }\n          }}\n        >\n          <ListAddEdit\n            list={showListAddEditModal?.list}\n            onClose={(result) => {\n              if (result.state === 'success') {\n                reload();\n              }\n              setShowListAddEditModal(false);\n            }}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nfunction PrivateNoteSheet({\n  account,\n  note: initialNote,\n  onRelationshipChange = () => {},\n  onClose = () => {},\n}) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const textareaRef = useRef(null);\n\n  useEffect(() => {\n    let timer;\n    if (textareaRef.current && !initialNote) {\n      timer = setTimeout(() => {\n        textareaRef.current.focus?.();\n      }, 100);\n    }\n    return () => {\n      clearTimeout(timer);\n    };\n  }, []);\n\n  return (\n    <div class=\"sheet\" id=\"private-note-container\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <b>Private note about @{account?.username || account?.acct}</b>\n      </header>\n      <main>\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const note = formData.get('note');\n            if (note?.trim() !== initialNote?.trim()) {\n              setUIState('loading');\n              (async () => {\n                try {\n                  const newRelationship = await masto.v1.accounts\n                    .$select(account?.id)\n                    .note.create({\n                      comment: note,\n                    });\n                  console.log('updated relationship', newRelationship);\n                  setUIState('default');\n                  onRelationshipChange(newRelationship);\n                  onClose();\n                } catch (e) {\n                  console.error(e);\n                  setUIState('error');\n                  alert(e?.message || 'Unable to update private note.');\n                }\n              })();\n            }\n          }}\n        >\n          <textarea\n            ref={textareaRef}\n            name=\"note\"\n            disabled={uiState === 'loading'}\n          >\n            {initialNote}\n          </textarea>\n          <footer>\n            <button\n              type=\"button\"\n              class=\"light\"\n              disabled={uiState === 'loading'}\n              onClick={() => {\n                onClose?.();\n              }}\n            >\n              Cancel\n            </button>\n            <span>\n              <Loader abrupt hidden={uiState !== 'loading'} />\n              <button disabled={uiState === 'loading'} type=\"submit\">\n                Save &amp; close\n              </button>\n            </span>\n          </footer>\n        </form>\n      </main>\n    </div>\n  );\n}\n\nexport default AccountInfo;\n","import { useEffect } from 'preact/hooks';\n\nimport { api } from '../utils/api';\nimport states from '../utils/states';\nimport useLocationChange from '../utils/useLocationChange';\n\nimport AccountInfo from './account-info';\nimport Icon from './icon';\n\nfunction AccountSheet({ account, instance: propInstance, onClose }) {\n  const { masto, instance, authenticated } = api({ instance: propInstance });\n  const isString = typeof account === 'string';\n\n  useEffect(() => {\n    if (!isString) {\n      states.accounts[`${account.id}@${instance}`] = account;\n    }\n  }, [account]);\n\n  useLocationChange(onClose);\n\n  return (\n    <div\n      class=\"sheet\"\n      // onClick={(e) => {\n      //   const accountBlock = e.target.closest('.account-block');\n      //   if (accountBlock) {\n      //     onClose({\n      //       destination: 'account-statuses',\n      //     });\n      //   }\n      // }}\n    >\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close outer\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <AccountInfo\n        instance={instance}\n        authenticated={authenticated}\n        account={account}\n        fetchAccount={async () => {\n          if (isString) {\n            try {\n              const info = await masto.v1.accounts.lookup({\n                acct: account,\n                skip_webfinger: false,\n              });\n              return info;\n            } catch (e) {\n              const result = await masto.v2.search.fetch({\n                q: account,\n                type: 'accounts',\n                limit: 1,\n                resolve: authenticated,\n              });\n              if (result.accounts.length) {\n                return result.accounts[0];\n              } else if (/https?:\\/\\/[^/]+\\/@/.test(account)) {\n                const accountURL = new URL(account);\n                const acct = accountURL.pathname.replace(/^\\//, '');\n                const result = await masto.v2.search.fetch({\n                  q: acct,\n                  type: 'accounts',\n                  limit: 1,\n                  resolve: authenticated,\n                });\n                if (result.accounts.length) {\n                  return result.accounts[0];\n                }\n              }\n            }\n          } else {\n            return account;\n          }\n        }}\n      />\n    </div>\n  );\n}\n\nexport default AccountSheet;\n","import './drafts.css';\n\nimport { useEffect, useMemo, useReducer, useState } from 'react';\n\nimport { api } from '../utils/api';\nimport db from '../utils/db';\nimport niceDateTime from '../utils/nice-date-time';\nimport states from '../utils/states';\nimport { getCurrentAccountNS } from '../utils/store-utils';\n\nimport Icon from './icon';\nimport Loader from './loader';\nimport MenuConfirm from './menu-confirm';\n\nfunction Drafts({ onClose }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [drafts, setDrafts] = useState([]);\n  const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const keys = await db.drafts.keys();\n        if (keys.length) {\n          const ns = getCurrentAccountNS();\n          const ownKeys = keys.filter((key) => key.startsWith(ns));\n          if (ownKeys.length) {\n            const drafts = await db.drafts.getMany(ownKeys);\n            drafts.sort(\n              (a, b) =>\n                new Date(b.updatedAt).getTime() -\n                new Date(a.updatedAt).getTime(),\n            );\n            setDrafts(drafts);\n          } else {\n            setDrafts([]);\n          }\n        } else {\n          setDrafts([]);\n        }\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, [reloadCount]);\n\n  const hasDrafts = drafts?.length > 0;\n\n  return (\n    <div class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>\n          Unsent drafts <Loader abrupt hidden={uiState !== 'loading'} />\n        </h2>\n        {hasDrafts && (\n          <div class=\"insignificant\">\n            Looks like you have unsent drafts. Let's continue where you left\n            off.\n          </div>\n        )}\n      </header>\n      <main>\n        {hasDrafts ? (\n          <>\n            <ul class=\"drafts-list\">\n              {drafts.map((draft) => {\n                const { updatedAt, key, draftStatus, replyTo } = draft;\n                const updatedAtDate = new Date(updatedAt);\n                return (\n                  <li key={updatedAt}>\n                    <div class=\"mini-draft-meta\">\n                      <b>\n                        <Icon icon={replyTo ? 'reply' : 'quill'} size=\"s\" />{' '}\n                        <time>\n                          {!!replyTo && (\n                            <>\n                              @{replyTo.account.acct}\n                              <br />\n                            </>\n                          )}\n                          {niceDateTime(updatedAtDate)}\n                        </time>\n                      </b>\n                      <MenuConfirm\n                        confirmLabel={<span>Delete this draft?</span>}\n                        menuItemClassName=\"danger\"\n                        align=\"end\"\n                        disabled={uiState === 'loading'}\n                        onClick={() => {\n                          (async () => {\n                            try {\n                              // const yes = confirm('Delete this draft?');\n                              // if (yes) {\n                              await db.drafts.del(key);\n                              reload();\n                              // }\n                            } catch (e) {\n                              alert('Error deleting draft! Please try again.');\n                            }\n                          })();\n                        }}\n                      >\n                        <button\n                          type=\"button\"\n                          class=\"small light\"\n                          disabled={uiState === 'loading'}\n                        >\n                          Delete&hellip;\n                        </button>\n                      </MenuConfirm>\n                    </div>\n                    <button\n                      type=\"button\"\n                      disabled={uiState === 'loading'}\n                      class=\"draft-item\"\n                      onClick={async () => {\n                        // console.log({ draftStatus });\n                        let replyToStatus;\n                        if (replyTo) {\n                          setUIState('loading');\n                          try {\n                            replyToStatus = await masto.v1.statuses\n                              .$select(replyTo.id)\n                              .fetch();\n                          } catch (e) {\n                            console.error(e);\n                            alert('Error fetching reply-to status!');\n                            setUIState('default');\n                            return;\n                          }\n                          setUIState('default');\n                        }\n                        window.__COMPOSE__ = {\n                          draftStatus,\n                          replyToStatus,\n                        };\n                        states.showCompose = true;\n                        states.showDrafts = false;\n                      }}\n                    >\n                      <MiniDraft draft={draft} />\n                    </button>\n                  </li>\n                );\n              })}\n            </ul>\n            {drafts.length > 1 && (\n              <p>\n                <MenuConfirm\n                  confirmLabel={<span>Delete all drafts?</span>}\n                  menuItemClassName=\"danger\"\n                  disabled={uiState === 'loading'}\n                  onClick={() => {\n                    (async () => {\n                      // const yes = confirm('Delete all drafts?');\n                      // if (yes) {\n                      setUIState('loading');\n                      try {\n                        await db.drafts.delMany(\n                          drafts.map((draft) => draft.key),\n                        );\n                        setUIState('default');\n                        reload();\n                      } catch (e) {\n                        console.error(e);\n                        alert('Error deleting drafts! Please try again.');\n                        setUIState('error');\n                      }\n                      // }\n                    })();\n                  }}\n                >\n                  <button\n                    type=\"button\"\n                    class=\"light danger\"\n                    disabled={uiState === 'loading'}\n                  >\n                    Delete all&hellip;\n                  </button>\n                </MenuConfirm>\n              </p>\n            )}\n          </>\n        ) : (\n          <p>No drafts found.</p>\n        )}\n      </main>\n    </div>\n  );\n}\n\nfunction MiniDraft({ draft }) {\n  const { draftStatus, replyTo } = draft;\n  const { status, spoilerText, poll, mediaAttachments } = draftStatus;\n  const hasPoll = poll?.options?.length > 0;\n  const hasMedia = mediaAttachments?.length > 0;\n  const hasPollOrMedia = hasPoll || hasMedia;\n  const firstImageMedia = useMemo(() => {\n    if (!hasMedia) return;\n    const image = mediaAttachments.find((media) => /image/.test(media.type));\n    if (!image) return;\n    const { file } = image;\n    const objectURL = URL.createObjectURL(file);\n    return objectURL;\n  }, [hasMedia, mediaAttachments]);\n  return (\n    <>\n      <div class=\"mini-draft\">\n        {hasPollOrMedia && (\n          <div\n            class={`mini-draft-aside ${firstImageMedia ? 'has-image' : ''}`}\n            style={\n              firstImageMedia\n                ? {\n                    '--bg-image': `url(${firstImageMedia})`,\n                  }\n                : {}\n            }\n          >\n            {hasPoll && <Icon icon=\"poll\" />}\n            {hasMedia && (\n              <span>\n                <Icon icon=\"attachment\" />{' '}\n                <small>{mediaAttachments?.length}</small>\n              </span>\n            )}\n          </div>\n        )}\n        <div class=\"mini-draft-main\">\n          {!!spoilerText && <div class=\"mini-draft-spoiler\">{spoilerText}</div>}\n          {!!status && <div class=\"mini-draft-status\">{status}</div>}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Drafts;\n","import { api } from './api';\nimport store from './store';\n\nexport async function fetchRelationships(accounts, relationshipsMap = {}) {\n  if (!accounts?.length) return;\n  const { masto } = api();\n\n  const currentAccount = store.session.get('currentAccount');\n  const uniqueAccountIds = accounts.reduce((acc, a) => {\n    // 1. Ignore duplicate accounts\n    // 2. Ignore accounts that are already inside relationshipsMap\n    // 3. Ignore currently logged in account\n    if (\n      !acc.includes(a.id) &&\n      !relationshipsMap[a.id] &&\n      a.id !== currentAccount\n    ) {\n      acc.push(a.id);\n    }\n    return acc;\n  }, []);\n  if (!uniqueAccountIds.length) return null;\n\n  try {\n    const relationships = await masto.v1.accounts.relationships.fetch({\n      id: uniqueAccountIds,\n    });\n    const newRelationshipsMap = relationships.reduce((acc, r) => {\n      acc[r.id] = r;\n      return acc;\n    }, {});\n    return newRelationshipsMap;\n  } catch (e) {\n    console.error(e);\n    // It's okay to fail\n    return null;\n  }\n}\n","import './generic-accounts.css';\n\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { InView } from 'react-intersection-observer';\nimport { useSnapshot } from 'valtio';\n\nimport { api } from '../utils/api';\nimport { fetchRelationships } from '../utils/relationships';\nimport states from '../utils/states';\nimport useLocationChange from '../utils/useLocationChange';\n\nimport AccountBlock from './account-block';\nimport Icon from './icon';\nimport Loader from './loader';\n\nexport default function GenericAccounts({\n  instance,\n  excludeRelationshipAttrs = [],\n  onClose = () => {},\n}) {\n  const { masto, instance: currentInstance } = api();\n  const isCurrentInstance = instance ? instance === currentInstance : true;\n  const snapStates = useSnapshot(states);\n  ``;\n  const [uiState, setUIState] = useState('default');\n  const [accounts, setAccounts] = useState([]);\n  const [showMore, setShowMore] = useState(false);\n\n  useLocationChange(onClose);\n\n  if (!snapStates.showGenericAccounts) {\n    return null;\n  }\n\n  const {\n    id,\n    heading,\n    fetchAccounts,\n    accounts: staticAccounts,\n    showReactions,\n  } = snapStates.showGenericAccounts;\n\n  const [relationshipsMap, setRelationshipsMap] = useState({});\n\n  const loadRelationships = async (accounts) => {\n    if (!accounts?.length) return;\n    if (!isCurrentInstance) return;\n    const relationships = await fetchRelationships(accounts, relationshipsMap);\n    if (relationships) {\n      setRelationshipsMap({\n        ...relationshipsMap,\n        ...relationships,\n      });\n    }\n  };\n\n  const loadAccounts = (firstLoad) => {\n    if (!fetchAccounts) return;\n    if (firstLoad) setAccounts([]);\n    setUIState('loading');\n    (async () => {\n      try {\n        const { done, value } = await fetchAccounts(firstLoad);\n        if (Array.isArray(value)) {\n          if (firstLoad) {\n            const accounts = [];\n            for (let i = 0; i < value.length; i++) {\n              const account = value[i];\n              const theAccount = accounts.find(\n                (a, j) => a.id === account.id && i !== j,\n              );\n              if (!theAccount) {\n                accounts.push({\n                  _types: [],\n                  ...account,\n                });\n              } else {\n                theAccount._types.push(...account._types);\n              }\n            }\n            setAccounts(accounts);\n          } else {\n            // setAccounts((prev) => [...prev, ...value]);\n            // Merge accounts by id and _types\n            setAccounts((prev) => {\n              const newAccounts = prev;\n              for (const account of value) {\n                const theAccount = newAccounts.find((a) => a.id === account.id);\n                if (!theAccount) {\n                  newAccounts.push(account);\n                } else {\n                  theAccount._types.push(...account._types);\n                }\n              }\n              return newAccounts;\n            });\n          }\n          setShowMore(!done);\n\n          loadRelationships(value);\n        } else {\n          setShowMore(false);\n        }\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  };\n\n  const firstLoad = useRef(true);\n  useEffect(() => {\n    if (staticAccounts?.length > 0) {\n      setAccounts(staticAccounts);\n      loadRelationships(staticAccounts);\n    } else {\n      loadAccounts(true);\n      firstLoad.current = false;\n    }\n  }, [staticAccounts, fetchAccounts]);\n\n  useEffect(() => {\n    if (firstLoad.current) return;\n    // reloadGenericAccounts contains value like {id: 'mute', counter: 1}\n    // We only need to reload if the id matches\n    if (snapStates.reloadGenericAccounts?.id === id) {\n      loadAccounts(true);\n    }\n  }, [snapStates.reloadGenericAccounts.counter]);\n\n  return (\n    <div id=\"generic-accounts-container\" class=\"sheet\" tabindex=\"-1\">\n      <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n        <Icon icon=\"x\" />\n      </button>\n      <header>\n        <h2>{heading || 'Accounts'}</h2>\n      </header>\n      <main>\n        {accounts.length > 0 ? (\n          <>\n            <ul class=\"accounts-list\">\n              {accounts.map((account) => {\n                const relationship = relationshipsMap[account.id];\n                const key = `${account.id}-${account._types?.length || ''}`;\n                return (\n                  <li key={key}>\n                    {showReactions && account._types?.length > 0 && (\n                      <div class=\"reactions-block\">\n                        {account._types.map((type) => (\n                          <Icon\n                            icon={\n                              {\n                                reblog: 'rocket',\n                                favourite: 'heart',\n                              }[type]\n                            }\n                            class={`${type}-icon`}\n                          />\n                        ))}\n                      </div>\n                    )}\n                    <div class=\"account-relationships\">\n                      <AccountBlock\n                        account={account}\n                        showStats\n                        relationship={relationship}\n                        excludeRelationshipAttrs={excludeRelationshipAttrs}\n                      />\n                    </div>\n                  </li>\n                );\n              })}\n            </ul>\n            {uiState === 'default' ? (\n              showMore ? (\n                <InView\n                  onChange={(inView) => {\n                    if (inView) {\n                      loadAccounts();\n                    }\n                  }}\n                >\n                  <button\n                    type=\"button\"\n                    class=\"plain block\"\n                    onClick={() => loadAccounts()}\n                  >\n                    Show more&hellip;\n                  </button>\n                </InView>\n              ) : (\n                <p class=\"ui-state insignificant\">The end.</p>\n              )\n            ) : (\n              uiState === 'loading' && (\n                <p class=\"ui-state\">\n                  <Loader abrupt />\n                </p>\n              )\n            )}\n          </>\n        ) : uiState === 'loading' ? (\n          <p class=\"ui-state\">\n            <Loader abrupt />\n          </p>\n        ) : uiState === 'error' ? (\n          <p class=\"ui-state\">Error loading accounts</p>\n        ) : (\n          <p class=\"ui-state insignificant\">Nothing to show</p>\n        )}\n      </main>\n    </div>\n  );\n}\n","import { Menu, MenuItem } from '@szhsin/react-menu';\nimport { useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport getTranslateTargetLanguage from '../utils/get-translate-target-language';\nimport localeMatch from '../utils/locale-match';\nimport states from '../utils/states';\n\nimport Icon from './icon';\nimport Menu2 from './menu2';\nimport TranslationBlock from './translation-block';\n\nexport default function MediaAltModal({ alt, lang, onClose }) {\n  const snapStates = useSnapshot(states);\n  const [forceTranslate, setForceTranslate] = useState(false);\n  const targetLanguage = getTranslateTargetLanguage(true);\n  const contentTranslationHideLanguages =\n    snapStates.settings.contentTranslationHideLanguages || [];\n  const differentLanguage =\n    !!lang &&\n    lang !== targetLanguage &&\n    !localeMatch([lang], [targetLanguage]) &&\n    !contentTranslationHideLanguages.find(\n      (l) => lang === l || localeMatch([lang], [l]),\n    );\n\n  return (\n    <div class=\"sheet\" tabindex=\"-1\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close outer\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header class=\"header-grid\">\n        <h2>Media description</h2>\n        <div class=\"header-side\">\n          <Menu2\n            align=\"end\"\n            menuButton={\n              <button type=\"button\" class=\"plain4\">\n                <Icon icon=\"more\" alt=\"More\" size=\"xl\" />\n              </button>\n            }\n          >\n            <MenuItem\n              disabled={forceTranslate}\n              onClick={() => {\n                setForceTranslate(true);\n              }}\n            >\n              <Icon icon=\"translate\" />\n              <span>Translate</span>\n            </MenuItem>\n          </Menu2>\n        </div>\n      </header>\n      <main lang={lang} dir=\"auto\">\n        <p\n          style={{\n            whiteSpace: 'pre-wrap',\n            textWrap: 'pretty',\n          }}\n        >\n          {alt}\n        </p>\n        {(differentLanguage || forceTranslate) && (\n          <TranslationBlock\n            forceTranslate={forceTranslate}\n            sourceLanguage={lang}\n            text={alt}\n          />\n        )}\n      </main>\n    </div>\n  );\n}\n","// https://gist.github.com/earthbound19/e7fe15fdf8ca3ef814750a61bc75b5ce\nfunction clamp(value, min, max) {\n  return Math.max(Math.min(value, max), min);\n}\n\nconst gammaToLinear = (c) =>\n  c >= 0.04045 ? Math.pow((c + 0.055) / 1.055, 2.4) : c / 12.92;\nconst linearToGamma = (c) =>\n  c >= 0.0031308 ? 1.055 * Math.pow(c, 1 / 2.4) - 0.055 : 12.92 * c;\n\nexport function rgb2oklab([r, g, b]) {\n  r = gammaToLinear(r / 255);\n  g = gammaToLinear(g / 255);\n  b = gammaToLinear(b / 255);\n  var l = 0.4122214708 * r + 0.5363325363 * g + 0.0514459929 * b;\n  var m = 0.2119034982 * r + 0.6806995451 * g + 0.1073969566 * b;\n  var s = 0.0883024619 * r + 0.2817188376 * g + 0.6299787005 * b;\n  l = Math.cbrt(l);\n  m = Math.cbrt(m);\n  s = Math.cbrt(s);\n  return [\n    l * +0.2104542553 + m * +0.793617785 + s * -0.0040720468,\n    l * +1.9779984951 + m * -2.428592205 + s * +0.4505937099,\n    l * +0.0259040371 + m * +0.7827717662 + s * -0.808675766,\n  ];\n}\n\nexport function oklab2rgb([L, a, b]) {\n  var l = L + a * +0.3963377774 + b * +0.2158037573;\n  var m = L + a * -0.1055613458 + b * -0.0638541728;\n  var s = L + a * -0.0894841775 + b * -1.291485548;\n  // The ** operator here cubes; same as l_*l_*l_ in the C++ example:\n  l = l ** 3;\n  m = m ** 3;\n  s = s ** 3;\n  var r = l * +4.0767416621 + m * -3.3077115913 + s * +0.2309699292;\n  var g = l * -1.2684380046 + m * +2.6097574011 + s * -0.3413193965;\n  var b = l * -0.0041960863 + m * -0.7034186147 + s * +1.707614701;\n  // Convert linear RGB values returned from oklab math to sRGB for our use before returning them:\n  r = 255 * linearToGamma(r);\n  g = 255 * linearToGamma(g);\n  b = 255 * linearToGamma(b);\n  // OPTION: clamp r g and b values to the range 0-255; but if you use the values immediately to draw, JavaScript clamps them on use:\n  r = clamp(r, 0, 255);\n  g = clamp(g, 0, 255);\n  b = clamp(b, 0, 255);\n  // OPTION: round the values. May not be necessary if you use them immediately for rendering in JavaScript, as JavaScript (also) discards decimals on render:\n  r = Math.round(r);\n  g = Math.round(g);\n  b = Math.round(b);\n  return [r, g, b];\n}\n","import { Menu } from '@szhsin/react-menu';\nimport { getBlurHashAverageColor } from 'fast-blurhash';\nimport {\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\n\nimport { oklab2rgb, rgb2oklab } from '../utils/color-utils';\nimport states from '../utils/states';\n\nimport Icon from './icon';\nimport Link from './link';\nimport Media from './media';\nimport Menu2 from './menu2';\nimport MenuLink from './menu-link';\n\nfunction MediaModal({\n  mediaAttachments,\n  statusID,\n  instance,\n  lang,\n  index = 0,\n  onClose = () => {},\n}) {\n  const carouselRef = useRef(null);\n\n  const [currentIndex, setCurrentIndex] = useState(index);\n  const carouselFocusItem = useRef(null);\n  useLayoutEffect(() => {\n    carouselFocusItem.current?.scrollIntoView();\n\n    // history.pushState({ mediaModal: true }, '');\n    // const handlePopState = (e) => {\n    //   if (e.state?.mediaModal) {\n    //     onClose();\n    //   }\n    // };\n    // window.addEventListener('popstate', handlePopState);\n    // return () => {\n    //   window.removeEventListener('popstate', handlePopState);\n    // };\n  }, []);\n  const prevStatusID = useRef(statusID);\n  useEffect(() => {\n    const scrollLeft = index * carouselRef.current.clientWidth;\n    const differentStatusID = prevStatusID.current !== statusID;\n    if (differentStatusID) prevStatusID.current = statusID;\n    carouselRef.current.scrollTo({\n      left: scrollLeft,\n      behavior: differentStatusID ? 'auto' : 'smooth',\n    });\n    carouselRef.current.focus();\n  }, [index, statusID]);\n\n  const [showControls, setShowControls] = useState(true);\n\n  useEffect(() => {\n    let handleSwipe = () => {\n      onClose();\n    };\n    if (carouselRef.current) {\n      carouselRef.current.addEventListener('swiped-down', handleSwipe);\n    }\n    return () => {\n      if (carouselRef.current) {\n        carouselRef.current.removeEventListener('swiped-down', handleSwipe);\n      }\n    };\n  }, []);\n\n  useHotkeys(\n    'esc',\n    onClose,\n    {\n      ignoreEventWhen: (e) => {\n        const hasModal = !!document.querySelector('#modal-container > *');\n        return hasModal;\n      },\n    },\n    [onClose],\n  );\n\n  useEffect(() => {\n    let handleScroll = () => {\n      const { clientWidth, scrollLeft } = carouselRef.current;\n      const index = Math.round(scrollLeft / clientWidth);\n      setCurrentIndex(index);\n    };\n    if (carouselRef.current) {\n      carouselRef.current.addEventListener('scroll', handleScroll, {\n        passive: true,\n      });\n    }\n    return () => {\n      if (carouselRef.current) {\n        carouselRef.current.removeEventListener('scroll', handleScroll);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    let timer = setTimeout(() => {\n      carouselRef.current?.focus?.();\n    }, 100);\n    return () => clearTimeout(timer);\n  }, []);\n\n  const mediaAccentColors = useMemo(() => {\n    return mediaAttachments?.map((media) => {\n      const { blurhash } = media;\n      if (blurhash) {\n        const averageColor = getBlurHashAverageColor(blurhash);\n        const labAverageColor = rgb2oklab(averageColor);\n        return oklab2rgb([0.6, labAverageColor[1], labAverageColor[2]]);\n      }\n      return null;\n    });\n  }, [mediaAttachments]);\n  const mediaAccentGradient = useMemo(() => {\n    const gap = 5;\n    const range = 100 / mediaAccentColors.length;\n    return (\n      mediaAccentColors\n        ?.map((color, i) => {\n          const start = i * range + gap;\n          const end = (i + 1) * range - gap;\n          if (color) {\n            return `\n            rgba(${color?.join(',')}, 0.4) ${start}%,\n            rgba(${color?.join(',')}, 0.4) ${end}%\n          `;\n          }\n\n          return `\n            transparent ${start}%,\n            transparent ${end}%\n          `;\n        })\n        ?.join(', ') || 'transparent'\n    );\n  }, [mediaAccentColors]);\n\n  return (\n    <div\n      class={`media-modal-container media-modal-count-${mediaAttachments?.length}`}\n    >\n      <div\n        ref={carouselRef}\n        tabIndex=\"0\"\n        data-swipe-threshold=\"44\"\n        class=\"carousel\"\n        onClick={(e) => {\n          if (\n            e.target.classList.contains('carousel-item') ||\n            e.target.classList.contains('media') ||\n            e.target.classList.contains('media-zoom')\n          ) {\n            onClose();\n          }\n        }}\n        style={\n          mediaAttachments.length > 1\n            ? {\n                backgroundAttachment: 'local',\n                backgroundImage: `linear-gradient(\n            to right, ${mediaAccentGradient})`,\n              }\n            : {}\n        }\n      >\n        {mediaAttachments?.map((media, i) => {\n          const accentColor =\n            mediaAttachments.length === 1 ? mediaAccentColors[i] : null;\n          return (\n            <div\n              class=\"carousel-item\"\n              style={\n                accentColor\n                  ? {\n                      '--accent-color': `rgb(${accentColor?.join(',')})`,\n                      '--accent-alpha-color': `rgba(${accentColor?.join(\n                        ',',\n                      )}, 0.4)`,\n                    }\n                  : {}\n              }\n              tabindex=\"0\"\n              key={media.id}\n              ref={i === currentIndex ? carouselFocusItem : null}\n              onClick={(e) => {\n                // console.log(e);\n                // if (e.target !== e.currentTarget) {\n                //   setShowControls(!showControls);\n                // }\n                if (!e.target.classList.contains('media')) {\n                  setShowControls(!showControls);\n                }\n              }}\n            >\n              {!!media.description && (\n                <button\n                  type=\"button\"\n                  class=\"media-alt\"\n                  hidden={!showControls}\n                  onClick={() => {\n                    states.showMediaAlt = {\n                      alt: media.description,\n                      lang,\n                    };\n                  }}\n                >\n                  <span class=\"alt-badge\">ALT</span>\n                  <span class=\"media-alt-desc\" lang={lang} dir=\"auto\">\n                    {media.description}\n                  </span>\n                </button>\n              )}\n              <Media media={media} showOriginal lang={lang} />\n            </div>\n          );\n        })}\n      </div>\n      <div class=\"carousel-top-controls\" hidden={!showControls}>\n        <span>\n          <button\n            type=\"button\"\n            class=\"carousel-button\"\n            onClick={() => onClose()}\n          >\n            <Icon icon=\"x\" />\n          </button>\n        </span>\n        {mediaAttachments?.length > 1 ? (\n          <span class=\"carousel-dots\">\n            {mediaAttachments?.map((media, i) => (\n              <button\n                key={media.id}\n                type=\"button\"\n                disabled={i === currentIndex}\n                class={`carousel-dot ${i === currentIndex ? 'active' : ''}`}\n                onClick={(e) => {\n                  e.preventDefault();\n                  e.stopPropagation();\n                  carouselRef.current.scrollTo({\n                    left: carouselRef.current.clientWidth * i,\n                    behavior: 'smooth',\n                  });\n                  carouselRef.current.focus();\n                }}\n              >\n                <Icon icon=\"round\" size=\"s\" />\n              </button>\n            ))}\n          </span>\n        ) : (\n          <span />\n        )}\n        <span>\n          <Menu2\n            overflow=\"auto\"\n            align=\"end\"\n            position=\"anchor\"\n            gap={4}\n            menuClassName=\"glass-menu\"\n            menuButton={\n              <button type=\"button\" class=\"carousel-button\">\n                <Icon icon=\"more\" alt=\"More\" />\n              </button>\n            }\n          >\n            <MenuLink\n              href={\n                mediaAttachments[currentIndex]?.remoteUrl ||\n                mediaAttachments[currentIndex]?.url\n              }\n              class=\"carousel-button\"\n              target=\"_blank\"\n              title=\"Open original media in new window\"\n            >\n              <Icon icon=\"popout\" />\n              <span>Open original media</span>\n            </MenuLink>\n          </Menu2>{' '}\n          <Link\n            to={`${instance ? `/${instance}` : ''}/s/${statusID}${\n              window.matchMedia('(min-width: calc(40em + 350px))').matches\n                ? `?media=${currentIndex + 1}`\n                : ''\n            }`}\n            class=\"button carousel-button media-post-link\"\n            // onClick={() => {\n            //   // if small screen (not media query min-width 40em + 350px), run onClose\n            //   if (\n            //     !window.matchMedia('(min-width: calc(40em + 350px))').matches\n            //   ) {\n            //     onClose();\n            //   }\n            // }}\n          >\n            <span class=\"button-label\">View post </span>&raquo;\n          </Link>\n        </span>\n      </div>\n      {mediaAttachments?.length > 1 && (\n        <div class=\"carousel-controls\" hidden={!showControls}>\n          <button\n            type=\"button\"\n            class=\"carousel-button\"\n            hidden={currentIndex === 0}\n            onClick={(e) => {\n              e.preventDefault();\n              e.stopPropagation();\n              carouselRef.current.focus();\n              carouselRef.current.scrollTo({\n                left: carouselRef.current.clientWidth * (currentIndex - 1),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"arrow-left\" />\n          </button>\n          <button\n            type=\"button\"\n            class=\"carousel-button\"\n            hidden={currentIndex === mediaAttachments.length - 1}\n            onClick={(e) => {\n              e.preventDefault();\n              e.stopPropagation();\n              carouselRef.current.focus();\n              carouselRef.current.scrollTo({\n                left: carouselRef.current.clientWidth * (currentIndex + 1),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"arrow-right\" />\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default MediaModal;\n","export default \"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20fill='none'%20viewBox='0%200%2084%2062'%3e%3crect%20width='64'%20height='48'%20x='18'%20y='2'%20fill='%23fff'%20stroke='%23999'%20stroke-width='3'%20rx='4'/%3e%3crect%20width='32'%20height='48'%20x='2'%20y='12'%20fill='%23fff'%20stroke='%23999'%20stroke-width='3'%20rx='4'/%3e%3cpath%20fill='%234169E1'%20d='M14%2052a4%204%200%201%201-8%200%204%204%200%200%201%208%200Zm64-42a4%204%200%201%201-8%200%204%204%200%200%201%208%200Z'/%3e%3c/svg%3e\"","export default \"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20fill='none'%20viewBox='0%200%2082%2062'%3e%3crect%20width='78'%20height='58'%20x='2'%20y='2'%20fill='%23999'%20fill-opacity='.3'%20stroke='%23999'%20stroke-width='3'%20rx='4'/%3e%3crect%20width='18'%20height='46'%20x='8'%20y='8'%20fill='%23fff'%20stroke='%23999'%20stroke-width='2'%20rx='1'/%3e%3crect%20width='18'%20height='46'%20x='32'%20y='8'%20fill='%23fff'%20stroke='%23999'%20stroke-width='2'%20rx='1'/%3e%3crect%20width='18'%20height='46'%20x='56'%20y='8'%20fill='%23fff'%20stroke='%23999'%20stroke-width='2'%20rx='1'/%3e%3c/svg%3e\"","export default \"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20fill='none'%20viewBox='0%200%2084%2062'%3e%3crect%20width='64'%20height='48'%20x='18'%20y='2'%20fill='%23fff'%20stroke='%23999'%20stroke-width='3'%20rx='4'/%3e%3cpath%20fill='%23999'%20fill-opacity='.3'%20d='M19%203h62v10H19z'/%3e%3cpath%20stroke='%234169E1'%20stroke-width='2'%20d='M43%208a2%202%200%201%201-4%200%202%202%200%200%201%204%200Z'/%3e%3cpath%20stroke='%23999'%20stroke-width='2'%20d='M52%208a2%202%200%201%201-4%200%202%202%200%200%201%204%200Zm9%200a2%202%200%201%201-4%200%202%202%200%200%201%204%200Z'/%3e%3crect%20width='32'%20height='48'%20x='2'%20y='12'%20fill='%23fff'%20stroke='%23999'%20stroke-width='3'%20rx='4'/%3e%3cpath%20fill='%23999'%20fill-opacity='.3'%20d='M3%2049h30v10H3z'/%3e%3cpath%20stroke='%234169E1'%20stroke-width='2'%20d='M11%2054a2%202%200%201%201-4%200%202%202%200%200%201%204%200Z'/%3e%3cpath%20stroke='%23999'%20stroke-width='2'%20d='M20%2054a2%202%200%201%201-4%200%202%202%200%200%201%204%200Zm9%200a2%202%200%201%201-4%200%202%202%200%200%201%204%200Z'/%3e%3c/svg%3e\"","import { api } from '../utils/api';\nimport store from '../utils/store';\n\nconst LIMIT = 200;\nconst MAX_FETCH = 10;\n\nexport async function fetchFollowedTags() {\n  const { masto } = api();\n  const iterator = masto.v1.followedTags.list({\n    limit: LIMIT,\n  });\n  const tags = [];\n  let fetchCount = 0;\n  do {\n    const { value, done } = await iterator.next();\n    if (done || value?.length === 0) break;\n    tags.push(...value);\n    fetchCount++;\n  } while (fetchCount < MAX_FETCH);\n  tags.sort((a, b) => a.name.localeCompare(b.name));\n  console.log(tags);\n\n  if (tags.length) {\n    setTimeout(() => {\n      // Save to local storage, with saved timestamp\n      store.account.set('followedTags', {\n        tags,\n        updatedAt: Date.now(),\n      });\n    }, 1);\n  }\n\n  return tags;\n}\n\nconst MAX_AGE = 24 * 60 * 60 * 1000; // 1 day\nexport async function getFollowedTags() {\n  try {\n    const { tags, updatedAt } = store.account.get('followedTags') || {};\n    if (!tags?.length) return await fetchFollowedTags();\n    if (Date.now() - updatedAt > MAX_AGE) {\n      // Stale-while-revalidate\n      fetchFollowedTags();\n      return tags;\n    }\n    return tags;\n  } catch (e) {\n    return [];\n  }\n}\n\nconst fauxDiv = document.createElement('div');\nexport const extractTagsFromStatus = (content) => {\n  if (!content) return [];\n  if (content.indexOf('#') === -1) return [];\n  fauxDiv.innerHTML = content;\n  const hashtagLinks = fauxDiv.querySelectorAll('a.hashtag');\n  if (!hashtagLinks.length) return [];\n  return Array.from(hashtagLinks).map((a) =>\n    a.innerText.trim().replace(/^[^#]*#+/, ''),\n  );\n};\n","import { useEffect, useState } from 'preact/hooks';\n\nfunction AsyncText({ children }) {\n  if (typeof children === 'string') return children;\n  const [text, setText] = useState('');\n  useEffect(() => {\n    Promise.resolve(children).then(setText);\n  }, [children]);\n  return text;\n}\n\nexport default AsyncText;\n","import './shortcuts-settings.css';\n\nimport { useAutoAnimate } from '@formkit/auto-animate/preact';\nimport {\n  compressToEncodedURIComponent,\n  decompressFromEncodedURIComponent,\n} from 'lz-string';\nimport { useEffect, useMemo, useRef, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport floatingButtonUrl from '../assets/floating-button.svg';\nimport multiColumnUrl from '../assets/multi-column.svg';\nimport tabMenuBarUrl from '../assets/tab-menu-bar.svg';\n\nimport { api } from '../utils/api';\nimport { fetchFollowedTags } from '../utils/followed-tags';\nimport pmem from '../utils/pmem';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\n\nimport AsyncText from './AsyncText';\nimport Icon from './icon';\nimport MenuConfirm from './menu-confirm';\nimport Modal from './modal';\n\nexport const SHORTCUTS_LIMIT = 9;\n\nconst TYPES = [\n  'following',\n  'mentions',\n  'notifications',\n  'list',\n  'public',\n  'trending',\n  // NOTE: Hide for now\n  // 'search', // Search on Mastodon ain't great\n  // 'account-statuses', // Need @acct search first\n  'hashtag',\n  'bookmarks',\n  'favourites',\n];\nconst TYPE_TEXT = {\n  following: 'Home / Following',\n  notifications: 'Notifications',\n  list: 'List',\n  public: 'Public (Local / Federated)',\n  search: 'Search',\n  'account-statuses': 'Account',\n  bookmarks: 'Bookmarks',\n  favourites: 'Likes',\n  hashtag: 'Hashtag',\n  trending: 'Trending',\n  mentions: 'Mentions',\n};\nconst TYPE_PARAMS = {\n  list: [\n    {\n      text: 'List ID',\n      name: 'id',\n    },\n  ],\n  public: [\n    {\n      text: 'Local only',\n      name: 'local',\n      type: 'checkbox',\n    },\n    {\n      text: 'Instance',\n      name: 'instance',\n      type: 'text',\n      placeholder: 'Optional, e.g. mastodon.social',\n      notRequired: true,\n    },\n  ],\n  trending: [\n    {\n      text: 'Instance',\n      name: 'instance',\n      type: 'text',\n      placeholder: 'Optional, e.g. mastodon.social',\n      notRequired: true,\n    },\n  ],\n  search: [\n    {\n      text: 'Search term',\n      name: 'query',\n      type: 'text',\n    },\n  ],\n  'account-statuses': [\n    {\n      text: '@',\n      name: 'id',\n      type: 'text',\n      placeholder: 'cheeaun@mastodon.social',\n    },\n  ],\n  hashtag: [\n    {\n      text: '#',\n      name: 'hashtag',\n      type: 'text',\n      placeholder: 'e.g. PixelArt (Max 5, space-separated)',\n      pattern: '[^#]+',\n    },\n    {\n      text: 'Media only',\n      name: 'media',\n      type: 'checkbox',\n    },\n    {\n      text: 'Instance',\n      name: 'instance',\n      type: 'text',\n      placeholder: 'Optional, e.g. mastodon.social',\n      notRequired: true,\n    },\n  ],\n};\nconst fetchListTitle = pmem(async ({ id }) => {\n  const list = await api().masto.v1.lists.$select(id).fetch();\n  return list.title;\n});\nconst fetchAccountTitle = pmem(async ({ id }) => {\n  const account = await api().masto.v1.accounts.$select(id).fetch();\n  return account.username || account.acct || account.displayName;\n});\nexport const SHORTCUTS_META = {\n  following: {\n    id: 'home',\n    title: (_, index) => (index === 0 ? 'Home' : 'Following'),\n    path: '/',\n    icon: 'home',\n  },\n  mentions: {\n    id: 'mentions',\n    title: 'Mentions',\n    path: '/mentions',\n    icon: 'at',\n  },\n  notifications: {\n    id: 'notifications',\n    title: 'Notifications',\n    path: '/notifications',\n    icon: 'notification',\n  },\n  list: {\n    id: 'list',\n    title: fetchListTitle,\n    path: ({ id }) => `/l/${id}`,\n    icon: 'list',\n  },\n  public: {\n    id: 'public',\n    title: ({ local }) => (local ? 'Local' : 'Federated'),\n    subtitle: ({ instance }) => instance || api().instance,\n    path: ({ local, instance }) => `/${instance}/p${local ? '/l' : ''}`,\n    icon: ({ local }) => (local ? 'group' : 'earth'),\n  },\n  trending: {\n    id: 'trending',\n    title: 'Trending',\n    subtitle: ({ instance }) => instance || api().instance,\n    path: ({ instance }) => `/${instance}/trending`,\n    icon: 'chart',\n  },\n  search: {\n    id: 'search',\n    title: ({ query }) => query,\n    path: ({ query }) => `/search?q=${query}`,\n    icon: 'search',\n  },\n  'account-statuses': {\n    id: 'account-statuses',\n    title: fetchAccountTitle,\n    path: ({ id }) => `/a/${id}`,\n    icon: 'user',\n  },\n  bookmarks: {\n    id: 'bookmarks',\n    title: 'Bookmarks',\n    path: '/b',\n    icon: 'bookmark',\n  },\n  favourites: {\n    id: 'favourites',\n    title: 'Likes',\n    path: '/f',\n    icon: 'heart',\n  },\n  hashtag: {\n    id: 'hashtag',\n    title: ({ hashtag }) => hashtag,\n    subtitle: ({ instance }) => instance || api().instance,\n    path: ({ hashtag, instance, media }) =>\n      `${instance ? `/${instance}` : ''}/t/${hashtag.split(/\\s+/).join('+')}${\n        media ? '?media=1' : ''\n      }`,\n    icon: 'hashtag',\n  },\n};\n\nfunction ShortcutsSettings({ onClose }) {\n  const snapStates = useSnapshot(states);\n  const { shortcuts } = snapStates;\n  const [showForm, setShowForm] = useState(false);\n  const [showImportExport, setShowImportExport] = useState(false);\n\n  const [shortcutsListParent] = useAutoAnimate();\n\n  return (\n    <div id=\"shortcuts-settings-container\" class=\"sheet\" tabindex=\"-1\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>\n          <Icon icon=\"shortcut\" /> Shortcuts{' '}\n          <sup\n            style={{\n              fontSize: 12,\n              opacity: 0.5,\n              textTransform: 'uppercase',\n            }}\n          >\n            beta\n          </sup>\n        </h2>\n      </header>\n      <main>\n        <p>Specify a list of shortcuts that'll appear&nbsp;as:</p>\n        <div class=\"shortcuts-view-mode\">\n          {[\n            {\n              value: 'float-button',\n              label: 'Floating button',\n              imgURL: floatingButtonUrl,\n            },\n            {\n              value: 'tab-menu-bar',\n              label: 'Tab/Menu bar',\n              imgURL: tabMenuBarUrl,\n            },\n            {\n              value: 'multi-column',\n              label: 'Multi-column',\n              imgURL: multiColumnUrl,\n            },\n          ].map(({ value, label, imgURL }) => {\n            const checked =\n              snapStates.settings.shortcutsViewMode === value ||\n              (value === 'float-button' &&\n                !snapStates.settings.shortcutsViewMode);\n            return (\n              <label key={value} class={checked ? 'checked' : ''}>\n                <input\n                  type=\"radio\"\n                  name=\"shortcuts-view-mode\"\n                  value={value}\n                  checked={checked}\n                  onChange={(e) => {\n                    states.settings.shortcutsViewMode = e.target.value;\n                  }}\n                />{' '}\n                <img src={imgURL} alt=\"\" width=\"80\" height=\"58\" />{' '}\n                <span>{label}</span>\n              </label>\n            );\n          })}\n        </div>\n        {shortcuts.length > 0 ? (\n          <ol class=\"shortcuts-list\" ref={shortcutsListParent}>\n            {shortcuts.filter(Boolean).map((shortcut, i) => {\n              // const key = i + Object.values(shortcut);\n              const key = Object.values(shortcut).join('-');\n              const { type } = shortcut;\n              if (!SHORTCUTS_META[type]) return null;\n              let { icon, title, subtitle } = SHORTCUTS_META[type];\n              if (typeof title === 'function') {\n                title = title(shortcut, i);\n              }\n              if (typeof subtitle === 'function') {\n                subtitle = subtitle(shortcut, i);\n              }\n              if (typeof icon === 'function') {\n                icon = icon(shortcut, i);\n              }\n              return (\n                <li key={key}>\n                  <Icon icon={icon} />\n                  <span class=\"shortcut-text\">\n                    <AsyncText>{title}</AsyncText>\n                    {subtitle && (\n                      <>\n                        {' '}\n                        <small class=\"ib insignificant\">{subtitle}</small>\n                      </>\n                    )}\n                  </span>\n                  <span class=\"shortcut-actions\">\n                    <button\n                      type=\"button\"\n                      class=\"plain small\"\n                      disabled={i === 0}\n                      onClick={() => {\n                        const shortcutsArr = Array.from(states.shortcuts);\n                        if (i > 0) {\n                          const temp = states.shortcuts[i - 1];\n                          shortcutsArr[i - 1] = shortcut;\n                          shortcutsArr[i] = temp;\n                          states.shortcuts = shortcutsArr;\n                        }\n                      }}\n                    >\n                      <Icon icon=\"arrow-up\" alt=\"Move up\" />\n                    </button>\n                    <button\n                      type=\"button\"\n                      class=\"plain small\"\n                      disabled={i === shortcuts.length - 1}\n                      onClick={() => {\n                        const shortcutsArr = Array.from(states.shortcuts);\n                        if (i < states.shortcuts.length - 1) {\n                          const temp = states.shortcuts[i + 1];\n                          shortcutsArr[i + 1] = shortcut;\n                          shortcutsArr[i] = temp;\n                          states.shortcuts = shortcutsArr;\n                        }\n                      }}\n                    >\n                      <Icon icon=\"arrow-down\" alt=\"Move down\" />\n                    </button>\n                    <button\n                      type=\"button\"\n                      class=\"plain small\"\n                      onClick={() => {\n                        setShowForm({\n                          shortcut,\n                          shortcutIndex: i,\n                        });\n                      }}\n                    >\n                      <Icon icon=\"pencil\" alt=\"Edit\" />\n                    </button>\n                    {/* <button\n                      type=\"button\"\n                      class=\"plain small\"\n                      onClick={() => {\n                        states.shortcuts.splice(i, 1);\n                      }}\n                    >\n                      <Icon icon=\"x\" alt=\"Remove\" />\n                    </button> */}\n                  </span>\n                </li>\n              );\n            })}\n          </ol>\n        ) : (\n          <div class=\"ui-state insignificant\">\n            <p>No shortcuts yet. Tap on the Add shortcut button.</p>\n            <p>\n              Not sure what to add?\n              <br />\n              Try adding{' '}\n              <a\n                href=\"#\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  states.shortcuts = [\n                    {\n                      type: 'following',\n                    },\n                    {\n                      type: 'notifications',\n                    },\n                  ];\n                }}\n              >\n                Home / Following and Notifications\n              </a>{' '}\n              first.\n            </p>\n          </div>\n        )}\n        <p class=\"insignificant\">\n          {shortcuts.length >= SHORTCUTS_LIMIT &&\n            `Max ${SHORTCUTS_LIMIT} shortcuts`}\n        </p>\n        <p\n          style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n          }}\n        >\n          <button\n            type=\"button\"\n            class=\"light\"\n            onClick={() => setShowImportExport(true)}\n          >\n            Import/export\n          </button>\n          <button\n            type=\"button\"\n            disabled={shortcuts.length >= SHORTCUTS_LIMIT}\n            onClick={() => setShowForm(true)}\n          >\n            <Icon icon=\"plus\" /> <span>Add shortcut</span>\n          </button>\n        </p>\n      </main>\n      {showForm && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowForm(false);\n            }\n          }}\n        >\n          <ShortcutForm\n            shortcut={showForm.shortcut}\n            shortcutIndex={showForm.shortcutIndex}\n            onSubmit={({ result, mode }) => {\n              console.log('onSubmit', result);\n              if (mode === 'edit') {\n                states.shortcuts[showForm.shortcutIndex] = result;\n              } else {\n                states.shortcuts.push(result);\n              }\n            }}\n            onClose={() => setShowForm(false)}\n          />\n        </Modal>\n      )}\n      {showImportExport && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowImportExport(false);\n            }\n          }}\n        >\n          <ImportExport\n            shortcuts={shortcuts}\n            onClose={() => setShowImportExport(false)}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nconst FETCH_MAX_AGE = 1000 * 60; // 1 minute\nconst fetchLists = pmem(\n  () => {\n    const { masto } = api();\n    return masto.v1.lists.list();\n  },\n  {\n    maxAge: FETCH_MAX_AGE,\n  },\n);\n\nfunction ShortcutForm({\n  onSubmit,\n  disabled,\n  shortcut,\n  shortcutIndex,\n  onClose,\n}) {\n  console.log('shortcut', shortcut);\n  const editMode = !!shortcut;\n  const [currentType, setCurrentType] = useState(shortcut?.type || null);\n  const { masto } = api();\n\n  const [uiState, setUIState] = useState('default');\n  const [lists, setLists] = useState([]);\n  const [followedHashtags, setFollowedHashtags] = useState([]);\n  useEffect(() => {\n    (async () => {\n      if (currentType !== 'list') return;\n      try {\n        setUIState('loading');\n        const lists = await fetchLists();\n        lists.sort((a, b) => a.title.localeCompare(b.title));\n        setLists(lists);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n\n    (async () => {\n      if (currentType !== 'hashtag') return;\n      try {\n        const tags = await fetchFollowedTags();\n        setFollowedHashtags(tags);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [currentType]);\n\n  const formRef = useRef();\n  useEffect(() => {\n    if (editMode && currentType && TYPE_PARAMS[currentType]) {\n      // Populate form\n      const form = formRef.current;\n      TYPE_PARAMS[currentType].forEach(({ name, type }) => {\n        const input = form.querySelector(`[name=\"${name}\"]`);\n        if (input && shortcut[name]) {\n          if (type === 'checkbox') {\n            input.checked = shortcut[name] === 'on' ? true : false;\n          } else {\n            input.value = shortcut[name];\n          }\n        }\n      });\n    }\n  }, [editMode, currentType]);\n\n  return (\n    <div id=\"shortcut-settings-form\" class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>{editMode ? 'Edit' : 'Add'} shortcut</h2>\n      </header>\n      <main tabindex=\"-1\">\n        <form\n          ref={formRef}\n          onSubmit={(e) => {\n            // Construct a nice object from form\n            e.preventDefault();\n            const data = new FormData(e.target);\n            const result = {};\n            data.forEach((value, key) => {\n              result[key] = value?.trim();\n              if (key === 'instance') {\n                // Remove protocol and trailing slash\n                result[key] = result[key]\n                  .replace(/^https?:\\/\\//, '')\n                  .replace(/\\/+$/, '');\n                // Remove @acct@ or acct@ from instance URL\n                result[key] = result[key].replace(/^@?[^@]+@/, '');\n              }\n            });\n            console.log('result', result);\n            if (!result.type) return;\n            onSubmit({\n              result,\n              mode: editMode ? 'edit' : 'add',\n            });\n            // Reset\n            e.target.reset();\n            setCurrentType(null);\n            onClose?.();\n          }}\n        >\n          <p>\n            <label>\n              <span>Timeline</span>\n              <select\n                required\n                disabled={disabled}\n                onChange={(e) => {\n                  setCurrentType(e.target.value);\n                }}\n                defaultValue={editMode ? shortcut.type : undefined}\n                name=\"type\"\n              >\n                <option></option>\n                {TYPES.map((type) => (\n                  <option value={type}>{TYPE_TEXT[type]}</option>\n                ))}\n              </select>\n            </label>\n          </p>\n          {TYPE_PARAMS[currentType]?.map?.(\n            ({ text, name, type, placeholder, pattern, notRequired }) => {\n              if (currentType === 'list') {\n                return (\n                  <p>\n                    <label>\n                      <span>List</span>\n                      <select\n                        name=\"id\"\n                        required={!notRequired}\n                        disabled={disabled || uiState === 'loading'}\n                        defaultValue={editMode ? shortcut.id : undefined}\n                      >\n                        {lists.map((list) => (\n                          <option value={list.id}>{list.title}</option>\n                        ))}\n                      </select>\n                    </label>\n                  </p>\n                );\n              }\n\n              return (\n                <p>\n                  <label>\n                    <span>{text}</span>{' '}\n                    <input\n                      type={type}\n                      name={name}\n                      placeholder={placeholder}\n                      required={type === 'text' && !notRequired}\n                      disabled={disabled}\n                      list={\n                        currentType === 'hashtag'\n                          ? 'followed-hashtags-datalist'\n                          : null\n                      }\n                      autocorrect=\"off\"\n                      autocapitalize=\"off\"\n                      spellcheck={false}\n                      pattern={pattern}\n                    />\n                    {currentType === 'hashtag' &&\n                      followedHashtags.length > 0 && (\n                        <datalist id=\"followed-hashtags-datalist\">\n                          {followedHashtags.map((tag) => (\n                            <option value={tag.name} />\n                          ))}\n                        </datalist>\n                      )}\n                  </label>\n                </p>\n              );\n            },\n          )}\n          <footer>\n            <button\n              type=\"submit\"\n              class=\"block\"\n              disabled={disabled || uiState === 'loading'}\n            >\n              {editMode ? 'Save' : 'Add'}\n            </button>\n            {editMode && (\n              <button\n                type=\"button\"\n                class=\"light danger\"\n                onClick={() => {\n                  states.shortcuts.splice(shortcutIndex, 1);\n                  onClose?.();\n                }}\n              >\n                Remove\n              </button>\n            )}\n          </footer>\n        </form>\n      </main>\n    </div>\n  );\n}\n\nfunction ImportExport({ shortcuts, onClose }) {\n  const shortcutsStr = useMemo(() => {\n    if (!shortcuts) return '';\n    if (!shortcuts.filter(Boolean).length) return '';\n    return compressToEncodedURIComponent(\n      JSON.stringify(shortcuts.filter(Boolean)),\n    );\n  }, [shortcuts]);\n  const [importShortcutStr, setImportShortcutStr] = useState('');\n  const [importUIState, setImportUIState] = useState('default');\n  const parsedImportShortcutStr = useMemo(() => {\n    if (!importShortcutStr) {\n      setImportUIState('default');\n      return null;\n    }\n    try {\n      const parsed = JSON.parse(\n        decompressFromEncodedURIComponent(importShortcutStr),\n      );\n      // Very basic validation, I know\n      if (!Array.isArray(parsed)) throw new Error('Not an array');\n      setImportUIState('default');\n      return parsed;\n    } catch (err) {\n      // Fallback to JSON string parsing\n      // There's a chance that someone might want to import a JSON string instead of the compressed version\n      try {\n        const parsed = JSON.parse(importShortcutStr);\n        if (!Array.isArray(parsed)) throw new Error('Not an array');\n        setImportUIState('default');\n        return parsed;\n      } catch (err) {\n        setImportUIState('error');\n        return null;\n      }\n    }\n  }, [importShortcutStr]);\n  const hasCurrentSettings = states.shortcuts.length > 0;\n\n  return (\n    <div id=\"import-export-container\" class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>\n          Import/Export <small class=\"ib insignificant\">Shortcuts</small>\n        </h2>\n      </header>\n      <main tabindex=\"-1\">\n        <section>\n          <h3>\n            <Icon icon=\"arrow-down-circle\" size=\"l\" class=\"insignificant\" />{' '}\n            <span>Import</span>\n          </h3>\n          <p>\n            <input\n              type=\"text\"\n              name=\"import\"\n              placeholder=\"Paste shortcuts here\"\n              class=\"block\"\n              onInput={(e) => {\n                setImportShortcutStr(e.target.value);\n              }}\n            />\n          </p>\n          {!!parsedImportShortcutStr &&\n            Array.isArray(parsedImportShortcutStr) && (\n              <>\n                <p>\n                  <b>{parsedImportShortcutStr.length}</b> shortcut\n                  {parsedImportShortcutStr.length > 1 ? 's' : ''}{' '}\n                  <small class=\"insignificant\">\n                    ({importShortcutStr.length} characters)\n                  </small>\n                </p>\n                <ol class=\"import-settings-list\">\n                  {parsedImportShortcutStr.map((shortcut) => (\n                    <li>\n                      <span\n                        style={{\n                          opacity: shortcuts.some((s) =>\n                            // Compare all properties\n                            Object.keys(s).every(\n                              (key) => s[key] === shortcut[key],\n                            ),\n                          )\n                            ? 1\n                            : 0,\n                        }}\n                      >\n                        *\n                      </span>\n                      <span>\n                        {TYPE_TEXT[shortcut.type]}\n                        {shortcut.type === 'list' && ' ⚠️'}{' '}\n                        {TYPE_PARAMS[shortcut.type]?.map?.(\n                          ({ text, name, type }) =>\n                            shortcut[name] ? (\n                              <>\n                                <span class=\"tag collapsed insignificant\">\n                                  {text}:{' '}\n                                  {type === 'checkbox'\n                                    ? shortcut[name] === 'on'\n                                      ? '✅'\n                                      : '❌'\n                                    : shortcut[name]}\n                                </span>{' '}\n                              </>\n                            ) : null,\n                        )}\n                      </span>\n                    </li>\n                  ))}\n                </ol>\n                <p>\n                  <small>* Exists in current shortcuts</small>\n                  <br />\n                  <small>\n                    ⚠️ List may not work if it's from a different account.\n                  </small>\n                </p>\n              </>\n            )}\n          {importUIState === 'error' && (\n            <p class=\"error\">\n              <small>⚠️ Invalid settings format</small>\n            </p>\n          )}\n          <p>\n            {hasCurrentSettings && (\n              <>\n                <MenuConfirm\n                  confirmLabel=\"Append to current shortcuts?\"\n                  menuFooter={\n                    <div class=\"footer\">\n                      Only shortcuts that don’t exist in current shortcuts will\n                      be appended.\n                    </div>\n                  }\n                  onClick={() => {\n                    // states.shortcuts = [\n                    //   ...states.shortcuts,\n                    //   ...parsedImportShortcutStr,\n                    // ];\n                    // Append non-unique shortcuts only\n                    const nonUniqueShortcuts = parsedImportShortcutStr.filter(\n                      (shortcut) =>\n                        !states.shortcuts.some((s) =>\n                          // Compare all properties\n                          Object.keys(s).every(\n                            (key) => s[key] === shortcut[key],\n                          ),\n                        ),\n                    );\n                    if (!nonUniqueShortcuts.length) {\n                      showToast('No new shortcuts to import');\n                      return;\n                    }\n                    let newShortcuts = [\n                      ...states.shortcuts,\n                      ...nonUniqueShortcuts,\n                    ];\n                    const exceededLimit = newShortcuts.length > SHORTCUTS_LIMIT;\n                    if (exceededLimit) {\n                      // If exceeded, trim it\n                      newShortcuts = newShortcuts.slice(0, SHORTCUTS_LIMIT);\n                    }\n                    states.shortcuts = newShortcuts;\n                    showToast(\n                      exceededLimit\n                        ? `Shortcuts imported. Exceeded max ${SHORTCUTS_LIMIT}, so the rest are not imported.`\n                        : 'Shortcuts imported',\n                    );\n                    onClose?.();\n                  }}\n                >\n                  <button\n                    type=\"button\"\n                    class=\"plain2\"\n                    disabled={!parsedImportShortcutStr}\n                  >\n                    Import & append…\n                  </button>\n                </MenuConfirm>{' '}\n              </>\n            )}\n            <MenuConfirm\n              confirmLabel={\n                hasCurrentSettings\n                  ? 'Override current shortcuts?'\n                  : 'Import shortcuts?'\n              }\n              menuItemClassName={hasCurrentSettings ? 'danger' : undefined}\n              onClick={() => {\n                states.shortcuts = parsedImportShortcutStr;\n                showToast('Shortcuts imported');\n                onClose?.();\n              }}\n            >\n              <button\n                type=\"button\"\n                class=\"plain2\"\n                disabled={!parsedImportShortcutStr}\n              >\n                {hasCurrentSettings ? 'or override…' : 'Import…'}\n              </button>\n            </MenuConfirm>\n          </p>\n        </section>\n        <section>\n          <h3>\n            <Icon icon=\"arrow-up-circle\" size=\"l\" class=\"insignificant\" />{' '}\n            <span>Export</span>\n          </h3>\n          <p>\n            <input\n              style={{ width: '100%' }}\n              type=\"text\"\n              value={shortcutsStr}\n              readOnly\n              onClick={(e) => {\n                if (!e.target.value) return;\n                e.target.select();\n                // Copy url to clipboard\n                try {\n                  navigator.clipboard.writeText(e.target.value);\n                  showToast('Shortcuts copied');\n                } catch (e) {\n                  console.error(e);\n                  showToast('Unable to copy shortcuts');\n                }\n              }}\n            />\n          </p>\n          <p>\n            <button\n              type=\"button\"\n              class=\"plain2\"\n              disabled={!shortcutsStr}\n              onClick={() => {\n                try {\n                  navigator.clipboard.writeText(shortcutsStr);\n                  showToast('Shortcut settings copied');\n                } catch (e) {\n                  console.error(e);\n                  showToast('Unable to copy shortcut settings');\n                }\n              }}\n            >\n              <Icon icon=\"clipboard\" /> <span>Copy</span>\n            </button>{' '}\n            {navigator?.share &&\n              navigator?.canShare?.({\n                text: shortcutsStr,\n              }) && (\n                <button\n                  type=\"button\"\n                  class=\"plain2\"\n                  disabled={!shortcutsStr}\n                  onClick={() => {\n                    try {\n                      navigator.share({\n                        text: shortcutsStr,\n                      });\n                    } catch (e) {\n                      console.error(e);\n                      alert(\"Sharing doesn't seem to work.\");\n                    }\n                  }}\n                >\n                  <Icon icon=\"share\" /> <span>Share</span>\n                </button>\n              )}{' '}\n            {shortcutsStr.length > 0 && (\n              <small class=\"insignificant\">\n                {shortcutsStr.length} characters\n              </small>\n            )}\n          </p>\n          {!!shortcutsStr && (\n            <details>\n              <summary class=\"insignificant\">\n                <small>Raw Shortcuts JSON</small>\n              </summary>\n              <textarea style={{ width: '100%' }} rows={10} readOnly>\n                {JSON.stringify(shortcuts.filter(Boolean), null, 2)}\n              </textarea>\n            </details>\n          )}\n        </section>\n      </main>\n    </div>\n  );\n}\n\nexport default ShortcutsSettings;\n","import { useLocation, useNavigate } from 'react-router-dom';\nimport { subscribe, useSnapshot } from 'valtio';\n\nimport Accounts from '../pages/accounts';\nimport Settings from '../pages/settings';\nimport focusDeck from '../utils/focus-deck';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\n\nimport AccountSheet from './account-sheet';\nimport Compose from './compose';\nimport Drafts from './drafts';\nimport GenericAccounts from './generic-accounts';\nimport MediaAltModal from './media-alt-modal';\nimport MediaModal from './media-modal';\nimport Modal from './modal';\nimport ShortcutsSettings from './shortcuts-settings';\n\nsubscribe(states, (changes) => {\n  for (const [action, path, value, prevValue] of changes) {\n    // When closing modal, focus on deck\n    if (/^show/i.test(path) && !value) {\n      focusDeck();\n    }\n  }\n});\n\nexport default function Modals() {\n  const snapStates = useSnapshot(states);\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  return (\n    <>\n      {!!snapStates.showCompose && (\n        <Modal>\n          <Compose\n            replyToStatus={\n              typeof snapStates.showCompose !== 'boolean'\n                ? snapStates.showCompose.replyToStatus\n                : window.__COMPOSE__?.replyToStatus || null\n            }\n            editStatus={\n              states.showCompose?.editStatus ||\n              window.__COMPOSE__?.editStatus ||\n              null\n            }\n            draftStatus={\n              states.showCompose?.draftStatus ||\n              window.__COMPOSE__?.draftStatus ||\n              null\n            }\n            onClose={(results) => {\n              const { newStatus, instance, type } = results || {};\n              states.showCompose = false;\n              window.__COMPOSE__ = null;\n              if (newStatus) {\n                states.reloadStatusPage++;\n                showToast({\n                  text: {\n                    post: 'Post published. Check it out.',\n                    reply: 'Reply posted. Check it out.',\n                    edit: 'Post updated. Check it out.',\n                  }[type || 'post'],\n                  delay: 1000,\n                  duration: 10_000, // 10 seconds\n                  onClick: (toast) => {\n                    toast.hideToast();\n                    states.prevLocation = location;\n                    navigate(\n                      instance\n                        ? `/${instance}/s/${newStatus.id}`\n                        : `/s/${newStatus.id}`,\n                    );\n                  },\n                });\n              }\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showSettings && (\n        <Modal\n          onClose={() => {\n            states.showSettings = false;\n          }}\n        >\n          <Settings\n            onClose={() => {\n              states.showSettings = false;\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showAccounts && (\n        <Modal\n          onClose={() => {\n            states.showAccounts = false;\n          }}\n        >\n          <Accounts\n            onClose={() => {\n              states.showAccounts = false;\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showAccount && (\n        <Modal\n          class=\"light\"\n          onClose={() => {\n            states.showAccount = false;\n          }}\n        >\n          <AccountSheet\n            account={snapStates.showAccount?.account || snapStates.showAccount}\n            instance={snapStates.showAccount?.instance}\n            onClose={({ destination } = {}) => {\n              states.showAccount = false;\n              // states.showGenericAccounts = false;\n              // if (destination) {\n              //   states.showAccounts = false;\n              // }\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showDrafts && (\n        <Modal\n          onClose={() => {\n            states.showDrafts = false;\n          }}\n        >\n          <Drafts onClose={() => (states.showDrafts = false)} />\n        </Modal>\n      )}\n      {!!snapStates.showMediaModal && (\n        <Modal\n          onClick={(e) => {\n            if (\n              e.target === e.currentTarget ||\n              e.target.classList.contains('media')\n            ) {\n              states.showMediaModal = false;\n            }\n          }}\n        >\n          <MediaModal\n            mediaAttachments={snapStates.showMediaModal.mediaAttachments}\n            instance={snapStates.showMediaModal.instance}\n            index={snapStates.showMediaModal.index}\n            statusID={snapStates.showMediaModal.statusID}\n            onClose={() => {\n              states.showMediaModal = false;\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showShortcutsSettings && (\n        <Modal\n          class=\"light\"\n          onClose={() => {\n            states.showShortcutsSettings = false;\n          }}\n        >\n          <ShortcutsSettings\n            onClose={() => (states.showShortcutsSettings = false)}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showGenericAccounts && (\n        <Modal\n          class=\"light\"\n          onClose={() => {\n            states.showGenericAccounts = false;\n          }}\n        >\n          <GenericAccounts\n            instance={snapStates.showGenericAccounts.instance}\n            excludeRelationshipAttrs={\n              snapStates.showGenericAccounts.excludeRelationshipAttrs\n            }\n            onClose={() => (states.showGenericAccounts = false)}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showMediaAlt && (\n        <Modal\n          class=\"light\"\n          onClose={(e) => {\n            states.showMediaAlt = false;\n          }}\n        >\n          <MediaAltModal\n            alt={snapStates.showMediaAlt.alt || snapStates.showMediaAlt}\n            lang={snapStates.showMediaAlt?.lang}\n            onClose={() => {\n              states.showMediaAlt = false;\n            }}\n          />\n        </Modal>\n      )}\n    </>\n  );\n}\n","import { useState } from 'preact/hooks';\n\nimport { api } from '../utils/api';\n\nimport Icon from './icon';\nimport Loader from './loader';\n\nfunction FollowRequestButtons({ accountID, onChange }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [requestState, setRequestState] = useState(null); // accept, reject\n  const [relationship, setRelationship] = useState(null);\n\n  const hasRelationship = relationship !== null;\n\n  return (\n    <p class=\"follow-request-buttons\">\n      <button\n        type=\"button\"\n        disabled={uiState === 'loading' || hasRelationship}\n        onClick={() => {\n          setUIState('loading');\n          setRequestState('accept');\n          (async () => {\n            try {\n              const rel = await masto.v1.followRequests\n                .$select(accountID)\n                .authorize();\n              if (!rel?.followedBy) {\n                throw new Error('Follow request not accepted');\n              }\n              setRelationship(rel);\n              onChange();\n            } catch (e) {\n              console.error(e);\n            }\n            setUIState('default');\n          })();\n        }}\n      >\n        Accept\n      </button>{' '}\n      <button\n        type=\"button\"\n        disabled={uiState === 'loading' || hasRelationship}\n        class=\"light danger\"\n        onClick={() => {\n          setUIState('loading');\n          setRequestState('reject');\n          (async () => {\n            try {\n              const rel = await masto.v1.followRequests\n                .$select(accountID)\n                .reject();\n              if (rel?.followedBy) {\n                throw new Error('Follow request not rejected');\n              }\n              setRelationship(rel);\n              onChange();\n            } catch (e) {\n              console.error(e);\n              setUIState('default');\n            }\n          })();\n        }}\n      >\n        Reject\n      </button>\n      <span class=\"follow-request-states\">\n        {hasRelationship && requestState ? (\n          requestState === 'accept' ? (\n            <Icon icon=\"check-circle\" alt=\"Accepted\" class=\"follow-accepted\" />\n          ) : (\n            <Icon icon=\"x-circle\" alt=\"Rejected\" class=\"follow-rejected\" />\n          )\n        ) : (\n          <Loader hidden={uiState !== 'loading'} />\n        )}\n      </span>\n    </p>\n  );\n}\n\nexport default FollowRequestButtons;\n","import { Fragment } from 'preact';\nimport { memo } from 'preact/compat';\n\nimport shortenNumber from '../utils/shorten-number';\nimport states from '../utils/states';\nimport store from '../utils/store';\nimport useTruncated from '../utils/useTruncated';\n\nimport Avatar from './avatar';\nimport FollowRequestButtons from './follow-request-buttons';\nimport Icon from './icon';\nimport Link from './link';\nimport NameText from './name-text';\nimport RelativeTime from './relative-time';\nimport Status from './status';\n\nconst NOTIFICATION_ICONS = {\n  mention: 'comment',\n  status: 'notification',\n  reblog: 'rocket',\n  follow: 'follow',\n  follow_request: 'follow-add',\n  favourite: 'heart',\n  poll: 'poll',\n  update: 'pencil',\n  'admin.signup': 'account-edit',\n  'admin.report': 'account-warning',\n};\n\n/*\nNotification types\n==================\nmention = Someone mentioned you in their status\nstatus = Someone you enabled notifications for has posted a status\nreblog = Someone boosted one of your statuses\nfollow = Someone followed you\nfollow_request = Someone requested to follow you\nfavourite = Someone favourited one of your statuses\npoll = A poll you have voted in or created has ended\nupdate = A status you interacted with has been edited\nadmin.sign_up = Someone signed up (optionally sent to admins)\nadmin.report = A new report has been filed\n*/\n\nconst contentText = {\n  mention: 'mentioned you in their post.',\n  status: 'published a post.',\n  reblog: 'boosted your post.',\n  'reblog+account': (count) => `boosted ${count} of your posts.`,\n  reblog_reply: 'boosted your reply.',\n  follow: 'followed you.',\n  follow_request: 'requested to follow you.',\n  favourite: 'liked your post.',\n  'favourite+account': (count) => `liked ${count} of your posts.`,\n  favourite_reply: 'liked your reply.',\n  poll: 'A poll you have voted in or created has ended.',\n  'poll-self': 'A poll you have created has ended.',\n  'poll-voted': 'A poll you have voted in has ended.',\n  update: 'A post you interacted with has been edited.',\n  'favourite+reblog': 'boosted & liked your post.',\n  'favourite+reblog+account': (count) =>\n    `boosted & liked ${count} of your posts.`,\n  'favourite+reblog_reply': 'boosted & liked your reply.',\n  'admin.sign_up': 'signed up.',\n  'admin.report': (targetAccount) => <>reported {targetAccount}</>,\n};\n\nconst AVATARS_LIMIT = 50;\n\nfunction Notification({\n  notification,\n  instance,\n  isStatic,\n  disableContextMenu,\n}) {\n  const { id, status, account, report, _accounts, _statuses } = notification;\n  let { type } = notification;\n\n  // status = Attached when type of the notification is favourite, reblog, status, mention, poll, or update\n  const actualStatus = status?.reblog || status;\n  const actualStatusID = actualStatus?.id;\n\n  const currentAccount = store.session.get('currentAccount');\n  const isSelf = currentAccount === account?.id;\n  const isVoted = status?.poll?.voted;\n  const isReplyToOthers =\n    !!status?.inReplyToAccountId &&\n    status?.inReplyToAccountId !== currentAccount &&\n    status?.account?.id === currentAccount;\n\n  let favsCount = 0;\n  let reblogsCount = 0;\n  if (type === 'favourite+reblog') {\n    for (const account of _accounts) {\n      if (account._types?.includes('favourite')) {\n        favsCount++;\n      }\n      if (account._types?.includes('reblog')) {\n        reblogsCount++;\n      }\n    }\n    if (!reblogsCount && favsCount) type = 'favourite';\n    if (!favsCount && reblogsCount) type = 'reblog';\n  }\n\n  let text;\n  if (type === 'poll') {\n    text = contentText[isSelf ? 'poll-self' : isVoted ? 'poll-voted' : 'poll'];\n  } else if (\n    type === 'reblog' ||\n    type === 'favourite' ||\n    type === 'favourite+reblog'\n  ) {\n    if (_statuses?.length > 1) {\n      text = contentText[`${type}+account`];\n    } else if (isReplyToOthers) {\n      text = contentText[`${type}_reply`];\n    } else {\n      text = contentText[type];\n    }\n  } else if (contentText[type]) {\n    text = contentText[type];\n  } else {\n    // Anticipate unhandled notification types, possibly from Mastodon forks or non-Mastodon instances\n    // This surfaces the error to the user, hoping that users will report it\n    text = `[Unknown notification type: ${type}]`;\n  }\n\n  if (typeof text === 'function') {\n    const count = _statuses?.length || _accounts?.length;\n    if (count) {\n      text = text(count);\n    } else if (type === 'admin.report') {\n      const targetAccount = report?.targetAccount;\n      if (targetAccount) {\n        text = text(<NameText account={targetAccount} showAvatar />);\n      }\n    }\n  }\n\n  if (type === 'mention' && !status) {\n    // Could be deleted\n    return null;\n  }\n\n  const formattedCreatedAt =\n    notification.createdAt && new Date(notification.createdAt).toLocaleString();\n\n  const genericAccountsHeading =\n    {\n      'favourite+reblog': 'Boosted/Liked by…',\n      favourite: 'Liked by…',\n      reblog: 'Boosted by…',\n      follow: 'Followed by…',\n    }[type] || 'Accounts';\n  const handleOpenGenericAccounts = () => {\n    states.showGenericAccounts = {\n      heading: genericAccountsHeading,\n      accounts: _accounts,\n      showReactions: type === 'favourite+reblog',\n      excludeRelationshipAttrs: type === 'follow' ? ['followedBy'] : [],\n    };\n  };\n\n  console.debug('RENDER Notification', notification.id);\n\n  return (\n    <div\n      class={`notification notification-${type}`}\n      data-notification-id={id}\n      tabIndex=\"0\"\n    >\n      <div\n        class={`notification-type notification-${type}`}\n        title={formattedCreatedAt}\n      >\n        {type === 'favourite+reblog' ? (\n          <>\n            <Icon icon=\"rocket\" size=\"xl\" alt={type} class=\"reblog-icon\" />\n            <Icon icon=\"heart\" size=\"xl\" alt={type} class=\"favourite-icon\" />\n          </>\n        ) : (\n          <Icon\n            icon={NOTIFICATION_ICONS[type] || 'notification'}\n            size=\"xl\"\n            alt={type}\n          />\n        )}\n      </div>\n      <div class=\"notification-content\">\n        {type !== 'mention' && (\n          <>\n            <p>\n              {!/poll|update/i.test(type) && (\n                <>\n                  {_accounts?.length > 1 ? (\n                    <>\n                      <b tabIndex=\"0\" onClick={handleOpenGenericAccounts}>\n                        <span title={_accounts.length}>\n                          {shortenNumber(_accounts.length)}\n                        </span>{' '}\n                        people\n                      </b>{' '}\n                    </>\n                  ) : (\n                    <>\n                      <NameText account={account} showAvatar />{' '}\n                    </>\n                  )}\n                </>\n              )}\n              {text}\n              {type === 'mention' && (\n                <span class=\"insignificant\">\n                  {' '}\n                  •{' '}\n                  <RelativeTime\n                    datetime={notification.createdAt}\n                    format=\"micro\"\n                  />\n                </span>\n              )}\n            </p>\n            {type === 'follow_request' && (\n              <FollowRequestButtons accountID={account.id} />\n            )}\n          </>\n        )}\n        {_accounts?.length > 1 && (\n          <p class=\"avatars-stack\">\n            {_accounts.slice(0, AVATARS_LIMIT).map((account) => (\n              <Fragment key={account.id}>\n                <a\n                  key={account.id}\n                  href={account.url}\n                  rel=\"noopener noreferrer\"\n                  class=\"account-avatar-stack\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    states.showAccount = account;\n                  }}\n                >\n                  <Avatar\n                    url={account.avatarStatic}\n                    size={\n                      _accounts.length <= 10\n                        ? 'xxl'\n                        : _accounts.length < 20\n                        ? 'xl'\n                        : _accounts.length < 30\n                        ? 'l'\n                        : _accounts.length < 40\n                        ? 'm'\n                        : 's' // My god, this person is popular!\n                    }\n                    key={account.id}\n                    alt={`${account.displayName} @${account.acct}`}\n                    squircle={account?.bot}\n                  />\n                  {type === 'favourite+reblog' && (\n                    <div class=\"account-sub-icons\">\n                      {account._types.map((type) => (\n                        <Icon\n                          icon={NOTIFICATION_ICONS[type]}\n                          size=\"s\"\n                          class={`${type}-icon`}\n                        />\n                      ))}\n                    </div>\n                  )}\n                </a>{' '}\n              </Fragment>\n            ))}\n            <button\n              type=\"button\"\n              class=\"small plain\"\n              onClick={handleOpenGenericAccounts}\n            >\n              {_accounts.length > AVATARS_LIMIT &&\n                `+${_accounts.length - AVATARS_LIMIT}`}\n              <Icon icon=\"chevron-down\" />\n            </button>\n          </p>\n        )}\n        {_statuses?.length > 1 && (\n          <ul class=\"notification-group-statuses\">\n            {_statuses.map((status) => (\n              <li key={status.id}>\n                <TruncatedLink\n                  class={`status-link status-type-${type}`}\n                  to={\n                    instance ? `/${instance}/s/${status.id}` : `/s/${status.id}`\n                  }\n                >\n                  <Status status={status} size=\"s\" />\n                </TruncatedLink>\n              </li>\n            ))}\n          </ul>\n        )}\n        {status && (!_statuses?.length || _statuses?.length <= 1) && (\n          <TruncatedLink\n            class={`status-link status-type-${type}`}\n            to={\n              instance\n                ? `/${instance}/s/${actualStatusID}`\n                : `/s/${actualStatusID}`\n            }\n            onContextMenu={\n              !disableContextMenu\n                ? (e) => {\n                    const post = e.target.querySelector('.status');\n                    if (post) {\n                      // Fire a custom event to open the context menu\n                      if (e.metaKey) return;\n                      e.preventDefault();\n                      post.dispatchEvent(\n                        new MouseEvent('contextmenu', {\n                          clientX: e.clientX,\n                          clientY: e.clientY,\n                        }),\n                      );\n                    }\n                  }\n                : undefined\n            }\n          >\n            {isStatic ? (\n              <Status status={actualStatus} size=\"s\" />\n            ) : (\n              <Status statusID={actualStatusID} size=\"s\" />\n            )}\n          </TruncatedLink>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction TruncatedLink(props) {\n  const ref = useTruncated();\n  return <Link {...props} data-read-more=\"Read more →\" ref={ref} />;\n}\n\nexport default memo(Notification);\n","import { memo } from 'preact/compat';\nimport { useLayoutEffect, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport { api } from '../utils/api';\nimport states from '../utils/states';\nimport {\n  getAccountByAccessToken,\n  getCurrentAccount,\n} from '../utils/store-utils';\nimport usePageVisibility from '../utils/usePageVisibility';\n\nimport Icon from './icon';\nimport Link from './link';\nimport Modal from './modal';\nimport Notification from './notification';\n\nexport default memo(function NotificationService() {\n  if (!('serviceWorker' in navigator)) return null;\n\n  const snapStates = useSnapshot(states);\n  const { routeNotification } = snapStates;\n\n  console.log('🛎️ Notification service', routeNotification);\n\n  const { id, accessToken } = routeNotification || {};\n  const [showNotificationSheet, setShowNotificationSheet] = useState(false);\n\n  useLayoutEffect(() => {\n    if (!id || !accessToken) return;\n    const { instance: currentInstance } = api();\n    const { masto, instance } = api({\n      accessToken,\n    });\n    console.log('API', { accessToken, currentInstance, instance });\n    const sameInstance = currentInstance === instance;\n    const account = accessToken\n      ? getAccountByAccessToken(accessToken)\n      : getCurrentAccount();\n    (async () => {\n      const notification = await masto.v1.notifications.$select(id).fetch();\n      if (notification && account) {\n        console.log('🛎️ Notification', { id, notification, account });\n        const accountInstance = account.instanceURL;\n        const { type, status, account: notificationAccount } = notification;\n        const hasModal = !!document.querySelector('#modal-container > *');\n        const isFollow = type === 'follow' && !!notificationAccount?.id;\n        const hasAccount = !!notificationAccount?.id;\n        const hasStatus = !!status?.id;\n        if (isFollow && sameInstance) {\n          // Show account sheet, can handle different instances\n          states.showAccount = {\n            account: notificationAccount,\n            instance: accountInstance,\n          };\n        } else if (hasModal || !sameInstance || (hasAccount && hasStatus)) {\n          // Show sheet of notification, if\n          // - there is a modal open\n          // - the notification is from another instance\n          // - the notification has both account and status, gives choice for users to go to account or status\n          setShowNotificationSheet({\n            id,\n            account,\n            notification,\n            sameInstance,\n          });\n        } else {\n          if (hasStatus) {\n            // Go to status page\n            location.hash = `/${currentInstance}/s/${status.id}`;\n          } else if (isFollow) {\n            // Go to profile page\n            location.hash = `/${currentInstance}/a/${notificationAccount.id}`;\n          } else {\n            // Go to notifications page\n            location.hash = '/notifications';\n          }\n        }\n      } else {\n        console.warn('🛎️ Notification not found', id);\n      }\n    })();\n  }, [id, accessToken]);\n\n  useLayoutEffect(() => {\n    // Listen to message from service worker\n    const handleMessage = (event) => {\n      console.log('💥💥💥 Message event', event);\n      const { type, id, accessToken } = event?.data || {};\n      if (type === 'notification') {\n        states.routeNotification = {\n          id,\n          accessToken,\n        };\n      }\n    };\n    console.log('👂👂👂 Listen to message');\n    navigator.serviceWorker.addEventListener('message', handleMessage);\n    return () => {\n      console.log('👂👂👂 Remove listen to message');\n      navigator.serviceWorker.removeEventListener('message', handleMessage);\n    };\n  }, []);\n\n  useLayoutEffect(() => {\n    if (navigator?.clearAppBadge) {\n      navigator.clearAppBadge();\n    }\n  }, []);\n  usePageVisibility((visible) => {\n    if (visible && navigator?.clearAppBadge) {\n      console.log('🔰 Clear app badge');\n      navigator.clearAppBadge();\n    }\n  });\n\n  const onClose = () => {\n    setShowNotificationSheet(false);\n    states.routeNotification = null;\n\n    // If url is #/notifications?id=123, go to #/notifications\n    if (/\\/notifications\\?id=/i.test(location.hash)) {\n      location.hash = '/notifications';\n    }\n  };\n\n  if (showNotificationSheet) {\n    const { id, account, notification, sameInstance } = showNotificationSheet;\n    return (\n      <Modal\n        class=\"light\"\n        onClick={(e) => {\n          if (e.target === e.currentTarget) {\n            onClose();\n          }\n        }}\n      >\n        <div class=\"sheet\" tabIndex=\"-1\">\n          <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n            <Icon icon=\"x\" />\n          </button>\n          <header>\n            <b>Notification</b>\n          </header>\n          <main>\n            {!sameInstance && (\n              <p>This notification is from your other account.</p>\n            )}\n            <div\n              class=\"notification-peek\"\n              // style={{\n              //   pointerEvents: sameInstance ? '' : 'none',\n              // }}\n              onClick={(e) => {\n                const { target } = e;\n                // If button or links\n                if (e.target.tagName === 'BUTTON' || e.target.tagName === 'A') {\n                  onClose();\n                }\n              }}\n            >\n              <Notification\n                instance={account.instanceURL}\n                notification={notification}\n                isStatic\n              />\n            </div>\n            <div\n              style={{\n                textAlign: 'end',\n              }}\n            >\n              <Link to=\"/notifications\" class=\"button light\" onClick={onClose}>\n                <span>View all notifications</span> <Icon icon=\"arrow-right\" />\n              </Link>\n            </div>\n          </main>\n        </div>\n      </Modal>\n    );\n  }\n\n  return null;\n});\n","import { forwardRef } from 'preact/compat';\nimport { useImperativeHandle, useRef, useState } from 'preact/hooks';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { api } from '../utils/api';\n\nimport Icon from './icon';\nimport Link from './link';\n\nconst SearchForm = forwardRef((props, ref) => {\n  const { instance } = api();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [searchMenuOpen, setSearchMenuOpen] = useState(false);\n  const [query, setQuery] = useState(searchParams.get('q') || '');\n  const type = searchParams.get('type');\n  const formRef = useRef(null);\n\n  const searchFieldRef = useRef(null);\n  useImperativeHandle(ref, () => ({\n    setValue: (value) => {\n      setQuery(value);\n    },\n    focus: () => {\n      searchFieldRef.current.focus();\n    },\n    select: () => {\n      searchFieldRef.current.select();\n    },\n    blur: () => {\n      searchFieldRef.current.blur();\n    },\n  }));\n\n  return (\n    <form\n      ref={formRef}\n      class=\"search-popover-container\"\n      onSubmit={(e) => {\n        e.preventDefault();\n\n        const isSearchPage = /\\/search/.test(location.hash);\n        if (isSearchPage) {\n          if (query) {\n            const params = {\n              q: query,\n            };\n            if (type) params.type = type; // Preserve type\n            setSearchParams(params);\n          } else {\n            setSearchParams({});\n          }\n        } else {\n          if (query) {\n            location.hash = `/search?q=${encodeURIComponent(query)}${\n              type ? `&type=${type}` : ''\n            }`;\n          } else {\n            location.hash = `/search`;\n          }\n        }\n\n        props?.onSubmit?.(e);\n      }}\n    >\n      <input\n        ref={searchFieldRef}\n        value={query}\n        name=\"q\"\n        type=\"search\"\n        // autofocus\n        placeholder=\"Search\"\n        dir=\"auto\"\n        autocomplete=\"off\"\n        autocorrect=\"off\"\n        autocapitalize=\"off\"\n        onSearch={(e) => {\n          if (!e.target.value) {\n            setSearchParams({});\n          }\n        }}\n        onInput={(e) => {\n          setQuery(e.target.value);\n          setSearchMenuOpen(true);\n        }}\n        onFocus={() => {\n          setSearchMenuOpen(true);\n        }}\n        onBlur={() => {\n          setTimeout(() => {\n            setSearchMenuOpen(false);\n          }, 100);\n          formRef.current\n            ?.querySelector('.search-popover-item.focus')\n            ?.classList.remove('focus');\n        }}\n        onKeyDown={(e) => {\n          const { key } = e;\n          switch (key) {\n            case 'Escape':\n              setSearchMenuOpen(false);\n              break;\n            case 'Down':\n            case 'ArrowDown':\n              e.preventDefault();\n              if (searchMenuOpen) {\n                const focusItem = formRef.current.querySelector(\n                  '.search-popover-item.focus',\n                );\n                if (focusItem) {\n                  let nextItem = focusItem.nextElementSibling;\n                  while (nextItem && nextItem.hidden) {\n                    nextItem = nextItem.nextElementSibling;\n                  }\n                  if (nextItem) {\n                    nextItem.classList.add('focus');\n                    const siblings = Array.from(\n                      nextItem.parentElement.children,\n                    ).filter((el) => el !== nextItem);\n                    siblings.forEach((el) => {\n                      el.classList.remove('focus');\n                    });\n                  }\n                } else {\n                  const firstItem = formRef.current.querySelector(\n                    '.search-popover-item',\n                  );\n                  if (firstItem) {\n                    firstItem.classList.add('focus');\n                  }\n                }\n              }\n              break;\n            case 'Up':\n            case 'ArrowUp':\n              e.preventDefault();\n              if (searchMenuOpen) {\n                const focusItem = document.querySelector(\n                  '.search-popover-item.focus',\n                );\n                if (focusItem) {\n                  let prevItem = focusItem.previousElementSibling;\n                  while (prevItem && prevItem.hidden) {\n                    prevItem = prevItem.previousElementSibling;\n                  }\n                  if (prevItem) {\n                    prevItem.classList.add('focus');\n                    const siblings = Array.from(\n                      prevItem.parentElement.children,\n                    ).filter((el) => el !== prevItem);\n                    siblings.forEach((el) => {\n                      el.classList.remove('focus');\n                    });\n                  }\n                } else {\n                  const lastItem = document.querySelector(\n                    '.search-popover-item:last-child',\n                  );\n                  if (lastItem) {\n                    lastItem.classList.add('focus');\n                  }\n                }\n              }\n              break;\n            case 'Enter':\n              if (searchMenuOpen) {\n                const focusItem = document.querySelector(\n                  '.search-popover-item.focus',\n                );\n                if (focusItem) {\n                  e.preventDefault();\n                  focusItem.click();\n                }\n                setSearchMenuOpen(false);\n                props?.onSubmit?.(e);\n              }\n              break;\n          }\n        }}\n      />\n      <div class=\"search-popover\" hidden={!searchMenuOpen || !query}>\n        {!!query &&\n          [\n            {\n              label: (\n                <>\n                  Posts with <q>{query}</q>\n                </>\n              ),\n              to: `/search?q=${encodeURIComponent(query)}&type=statuses`,\n              hidden: /^https?:/.test(query),\n            },\n            {\n              label: (\n                <>\n                  Posts tagged with <mark>#{query.replace(/^#/, '')}</mark>\n                </>\n              ),\n              to: `/${instance}/t/${query.replace(/^#/, '')}`,\n              hidden:\n                /^@/.test(query) || /^https?:/.test(query) || /\\s/.test(query),\n              top: /^#/.test(query),\n              type: 'link',\n            },\n            {\n              label: (\n                <>\n                  Look up <mark>{query}</mark>\n                </>\n              ),\n              to: `/${query}`,\n              hidden: !/^https?:/.test(query),\n              top: /^https?:/.test(query),\n              type: 'link',\n            },\n            {\n              label: (\n                <>\n                  Accounts with <q>{query}</q>\n                </>\n              ),\n              to: `/search?q=${encodeURIComponent(query)}&type=accounts`,\n            },\n          ]\n            .sort((a, b) => {\n              if (a.top && !b.top) return -1;\n              if (!a.top && b.top) return 1;\n              return 0;\n            })\n            .map(({ label, to, hidden, type }) => (\n              <Link\n                to={to}\n                class=\"search-popover-item\"\n                hidden={hidden}\n                onClick={(e) => {\n                  props?.onSubmit?.(e);\n                }}\n              >\n                <Icon\n                  icon={type === 'link' ? 'arrow-right' : 'search'}\n                  class=\"more-insignificant\"\n                />\n                <span>{label}</span>{' '}\n              </Link>\n            ))}\n      </div>\n    </form>\n  );\n});\n\nexport default SearchForm;\n","import './search-command.css';\n\nimport { memo } from 'preact/compat';\nimport { useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\n\nimport SearchForm from './search-form';\n\nexport default memo(function SearchCommand({ onClose = () => {} }) {\n  const [showSearch, setShowSearch] = useState(false);\n  const searchFormRef = useRef(null);\n\n  useHotkeys(\n    '/',\n    (e) => {\n      setShowSearch(true);\n      setTimeout(() => {\n        searchFormRef.current?.focus?.();\n        searchFormRef.current?.select?.();\n      }, 0);\n    },\n    {\n      preventDefault: true,\n      ignoreEventWhen: (e) => {\n        const isSearchPage = /\\/search/.test(location.hash);\n        const hasModal = !!document.querySelector('#modal-container > *');\n        return isSearchPage || hasModal;\n      },\n    },\n  );\n\n  const closeSearch = () => {\n    setShowSearch(false);\n    onClose();\n  };\n\n  useHotkeys(\n    'esc',\n    (e) => {\n      searchFormRef.current?.blur?.();\n      closeSearch();\n    },\n    {\n      enabled: showSearch,\n      enableOnFormTags: true,\n      preventDefault: true,\n    },\n  );\n\n  return (\n    <div\n      id=\"search-command-container\"\n      hidden={!showSearch}\n      onClick={(e) => {\n        console.log(e);\n        if (e.target === e.currentTarget) {\n          closeSearch();\n        }\n      }}\n    >\n      <SearchForm\n        ref={searchFormRef}\n        onSubmit={() => {\n          closeSearch();\n        }}\n      />\n    </div>\n  );\n});\n","import './shortcuts.css';\n\nimport { Menu, MenuItem } from '@szhsin/react-menu';\nimport { memo } from 'preact/compat';\nimport { useMemo, useRef } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { useNavigate } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport { SHORTCUTS_META } from '../components/shortcuts-settings';\nimport { api } from '../utils/api';\nimport states from '../utils/states';\n\nimport AsyncText from './AsyncText';\nimport Icon from './icon';\nimport Link from './link';\nimport Menu2 from './menu2';\nimport MenuLink from './menu-link';\n\nfunction Shortcuts() {\n  const { instance } = api();\n  const snapStates = useSnapshot(states);\n  const { shortcuts, settings } = snapStates;\n\n  if (!shortcuts.length) {\n    return null;\n  }\n  if (\n    settings.shortcutsViewMode === 'multi-column' ||\n    (!settings.shortcutsViewMode && settings.shortcutsColumnsMode)\n  ) {\n    return null;\n  }\n\n  const menuRef = useRef();\n\n  const formattedShortcuts = useMemo(\n    () =>\n      shortcuts\n        .map((pin, i) => {\n          const { type, ...data } = pin;\n          if (!SHORTCUTS_META[type]) return null;\n          let { id, path, title, subtitle, icon } = SHORTCUTS_META[type];\n\n          if (typeof id === 'function') {\n            id = id(data, i);\n          }\n          if (typeof path === 'function') {\n            path = path(\n              {\n                ...data,\n                instance: data.instance || instance,\n              },\n              i,\n            );\n          }\n          if (typeof title === 'function') {\n            title = title(data, i);\n          }\n          if (typeof subtitle === 'function') {\n            subtitle = subtitle(data, i);\n          }\n          if (typeof icon === 'function') {\n            icon = icon(data, i);\n          }\n\n          return {\n            id,\n            path,\n            title,\n            subtitle,\n            icon,\n          };\n        })\n        .filter(Boolean),\n    [shortcuts],\n  );\n\n  const navigate = useNavigate();\n  useHotkeys(['1', '2', '3', '4', '5', '6', '7', '8', '9'], (e, handler) => {\n    const index = parseInt(handler.keys[0], 10) - 1;\n    if (index < formattedShortcuts.length) {\n      const { path } = formattedShortcuts[index];\n      if (path) {\n        navigate(path);\n        menuRef.current?.closeMenu?.();\n      }\n    }\n  });\n\n  return (\n    <div id=\"shortcuts\">\n      {snapStates.settings.shortcutsViewMode === 'tab-menu-bar' ? (\n        <nav\n          class=\"tab-bar\"\n          onContextMenu={(e) => {\n            e.preventDefault();\n            states.showShortcutsSettings = true;\n          }}\n        >\n          <ul>\n            {formattedShortcuts.map(\n              ({ id, path, title, subtitle, icon }, i) => {\n                return (\n                  <li key={`${i}-${id}-${title}-${subtitle}-${path}`}>\n                    <Link\n                      class={subtitle ? 'has-subtitle' : ''}\n                      to={path}\n                      onClick={(e) => {\n                        if (e.target.classList.contains('is-active')) {\n                          e.preventDefault();\n                          const page = document.getElementById(`${id}-page`);\n                          console.log(id, page);\n                          if (page) {\n                            page.scrollTop = 0;\n                            const updatesButton =\n                              page.querySelector('.updates-button');\n                            if (updatesButton) {\n                              updatesButton.click();\n                            }\n                          }\n                        }\n                      }}\n                    >\n                      <Icon icon={icon} size=\"xl\" alt={title} />\n                      <span>\n                        <AsyncText>{title}</AsyncText>\n                        {subtitle && (\n                          <>\n                            <br />\n                            <small>{subtitle}</small>\n                          </>\n                        )}\n                      </span>\n                    </Link>\n                  </li>\n                );\n              },\n            )}\n          </ul>\n        </nav>\n      ) : (\n        <Menu2\n          instanceRef={menuRef}\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          menuClassName=\"glass-menu shortcuts-menu\"\n          gap={8}\n          position=\"anchor\"\n          menuButton={\n            <button\n              type=\"button\"\n              id=\"shortcuts-button\"\n              class=\"plain\"\n              onContextMenu={(e) => {\n                e.preventDefault();\n                states.showShortcutsSettings = true;\n              }}\n              onTransitionStart={(e) => {\n                // Close menu if the button disappears\n                try {\n                  const { target } = e;\n                  if (getComputedStyle(target).pointerEvents === 'none') {\n                    menuRef.current?.closeMenu?.();\n                  }\n                } catch (e) {}\n              }}\n            >\n              <Icon icon=\"shortcut\" size=\"xl\" alt=\"Shortcuts\" />\n            </button>\n          }\n        >\n          {formattedShortcuts.map(({ id, path, title, subtitle, icon }, i) => {\n            return (\n              <MenuLink\n                to={path}\n                key={`${i}-${id}-${title}-${subtitle}-${path}`}\n                class=\"glass-menu-item\"\n              >\n                <Icon icon={icon} size=\"l\" />{' '}\n                <span class=\"menu-grow\">\n                  <span>\n                    <AsyncText>{title}</AsyncText>\n                  </span>\n                  {subtitle && (\n                    <>\n                      {' '}\n                      <small class=\"more-insignificant\">{subtitle}</small>\n                    </>\n                  )}\n                </span>\n                <span class=\"menu-shortcut hide-until-focus-visible\">\n                  {i + 1}\n                </span>\n              </MenuLink>\n            );\n          })}\n        </Menu2>\n      )}\n    </div>\n  );\n}\n\nexport default memo(Shortcuts);\n","import { extractTagsFromStatus, getFollowedTags } from './followed-tags';\nimport { fetchRelationships } from './relationships';\nimport states, { statusKey } from './states';\nimport store from './store';\n\nexport function groupBoosts(values) {\n  let newValues = [];\n  let boostStash = [];\n  let serialBoosts = 0;\n  for (let i = 0; i < values.length; i++) {\n    const item = values[i];\n    if (item.reblog && !item.account?.group) {\n      boostStash.push(item);\n      serialBoosts++;\n    } else {\n      newValues.push(item);\n      if (serialBoosts < 3) {\n        serialBoosts = 0;\n      }\n    }\n  }\n  // if boostStash is more than quarter of values\n  // or if there are 3 or more boosts in a row\n  if (\n    values.length > 10 &&\n    (boostStash.length > values.length / 4 || serialBoosts >= 3)\n  ) {\n    // if boostStash is more than 3 quarter of values\n    const boostStashID = boostStash.map((status) => status.id);\n    if (boostStash.length > (values.length * 3) / 4) {\n      // insert boost array at the end of specialHome list\n      newValues = [\n        ...newValues,\n        { id: boostStashID, items: boostStash, type: 'boosts' },\n      ];\n    } else {\n      // insert boosts array in the middle of specialHome list\n      const half = Math.floor(newValues.length / 2);\n      newValues = [\n        ...newValues.slice(0, half),\n        {\n          id: boostStashID,\n          items: boostStash,\n          type: 'boosts',\n        },\n        ...newValues.slice(half),\n      ];\n    }\n    return newValues;\n  } else {\n    return values;\n  }\n}\n\nexport function dedupeBoosts(items, instance) {\n  const boostedStatusIDs = store.account.get('boostedStatusIDs') || {};\n  const filteredItems = items.filter((item) => {\n    if (!item.reblog) return true;\n    const statusKey = `${instance}-${item.reblog.id}`;\n    const boosterID = boostedStatusIDs[statusKey];\n    if (boosterID && boosterID !== item.id) {\n      console.warn(\n        `🚫 Duplicate boost by ${item.account.displayName}`,\n        item,\n        item.reblog,\n      );\n      return false;\n    } else {\n      boostedStatusIDs[statusKey] = item.id;\n    }\n    return true;\n  });\n  // Limit to 50\n  const keys = Object.keys(boostedStatusIDs);\n  if (keys.length > 50) {\n    keys.slice(0, keys.length - 50).forEach((key) => {\n      delete boostedStatusIDs[key];\n    });\n  }\n  store.account.set('boostedStatusIDs', boostedStatusIDs);\n  return filteredItems;\n}\n\nexport function groupContext(items) {\n  const contexts = [];\n  let contextIndex = 0;\n  items.forEach((item) => {\n    for (let i = 0; i < contexts.length; i++) {\n      if (contexts[i].find((t) => t.id === item.id)) return;\n      if (\n        contexts[i].find((t) => t.id === item.inReplyToId) ||\n        contexts[i].find((t) => t.inReplyToId === item.id)\n      ) {\n        contexts[i].push(item);\n        return;\n      }\n    }\n    const repliedItem = items.find((i) => i.id === item.inReplyToId);\n    if (repliedItem) {\n      contexts[contextIndex++] = [item, repliedItem];\n    }\n  });\n\n  // Check for cross-item contexts\n  // Merge contexts into one if they have a common item (same id)\n  for (let i = 0; i < contexts.length; i++) {\n    for (let j = i + 1; j < contexts.length; j++) {\n      const commonItem = contexts[i].find((t) => contexts[j].includes(t));\n      if (commonItem) {\n        contexts[i] = [...contexts[i], ...contexts[j]];\n        // Remove duplicate items\n        contexts[i] = contexts[i].filter(\n          (item, index, self) =>\n            self.findIndex((t) => t.id === item.id) === index,\n        );\n        contexts.splice(j, 1);\n        j--;\n      }\n    }\n  }\n\n  // Sort items by checking inReplyToId\n  contexts.forEach((context) => {\n    context.sort((a, b) => {\n      if (!a.inReplyToId && !b.inReplyToId) {\n        return new Date(a.createdAt) - new Date(b.createdAt);\n      }\n      if (a.inReplyToId === b.id) return 1;\n      if (b.inReplyToId === a.id) return -1;\n      if (!a.inReplyToId) return -1;\n      if (!b.inReplyToId) return 1;\n      return new Date(a.createdAt) - new Date(b.createdAt);\n    });\n  });\n\n  // Tag items that has different author than first post's author\n  contexts.forEach((context) => {\n    const firstItemAccountID = context[0].account.id;\n    context.forEach((item) => {\n      if (item.account.id !== firstItemAccountID) {\n        item._differentAuthor = true;\n      }\n    });\n  });\n\n  if (contexts.length) console.log('🧵 Contexts', contexts);\n\n  const newItems = [];\n  const appliedContextIndices = [];\n  items.forEach((item) => {\n    if (item.reblog) {\n      newItems.push(item);\n      return;\n    }\n    for (let i = 0; i < contexts.length; i++) {\n      if (contexts[i].find((t) => t.id === item.id)) {\n        if (appliedContextIndices.includes(i)) return;\n        const contextItems = contexts[i];\n        contextItems.sort((a, b) => {\n          const aDate = new Date(a.createdAt);\n          const bDate = new Date(b.createdAt);\n          return aDate - bDate;\n        });\n        const firstItemAccountID = contextItems[0].account.id;\n        newItems.push({\n          id: contextItems.map((i) => i.id),\n          items: contextItems,\n          type: contextItems.every((it) => it.account.id === firstItemAccountID)\n            ? 'thread'\n            : 'conversation',\n        });\n        appliedContextIndices.push(i);\n        return;\n      }\n    }\n    newItems.push(item);\n  });\n\n  return newItems;\n}\n\nexport async function assignFollowedTags(items, instance) {\n  const followedTags = await getFollowedTags(); // [{name: 'tag'}, {...}]\n  if (!followedTags.length) return;\n  const { statusFollowedTags } = states;\n  console.log('statusFollowedTags', statusFollowedTags);\n  const statusWithFollowedTags = [];\n  items.forEach((item) => {\n    if (item.reblog) return;\n    const { id, content, tags = [] } = item;\n    const sKey = statusKey(id, instance);\n    if (statusFollowedTags[sKey]?.length) return;\n    const extractedTags = extractTagsFromStatus(content);\n    if (!extractedTags.length && !tags.length) return;\n    const itemFollowedTags = followedTags.reduce((acc, tag) => {\n      if (\n        extractedTags.some((t) => t.toLowerCase() === tag.name.toLowerCase()) ||\n        tags.some((t) => t.name.toLowerCase() === tag.name.toLowerCase())\n      ) {\n        acc.push(tag.name);\n      }\n      return acc;\n    }, []);\n    if (itemFollowedTags.length) {\n      // statusFollowedTags[sKey] = itemFollowedTags;\n      statusWithFollowedTags.push({\n        item,\n        sKey,\n        followedTags: itemFollowedTags,\n      });\n    }\n  });\n\n  if (statusWithFollowedTags.length) {\n    const accounts = statusWithFollowedTags.map((s) => s.item.account);\n    const relationships = await fetchRelationships(accounts);\n    if (!relationships) return;\n\n    statusWithFollowedTags.forEach((s) => {\n      const { item, sKey, followedTags } = s;\n      const r = relationships[item.account.id];\n      if (!r.following) {\n        statusFollowedTags[sKey] = followedTags;\n      }\n    });\n  }\n}\n\nexport function clearFollowedTagsState() {\n  states.statusFollowedTags = {};\n}\n","import { useLayoutEffect, useState } from 'preact/hooks';\n\nexport default function useScroll({\n  scrollableRef,\n  distanceFromStart = 1, // ratio of clientHeight/clientWidth\n  distanceFromEnd = 1, // ratio of clientHeight/clientWidth\n  scrollThresholdStart = 10,\n  scrollThresholdEnd = 10,\n  direction = 'vertical',\n  distanceFromStartPx: _distanceFromStartPx,\n  distanceFromEndPx: _distanceFromEndPx,\n} = {}) {\n  const [scrollDirection, setScrollDirection] = useState(null);\n  const [reachStart, setReachStart] = useState(false);\n  const [reachEnd, setReachEnd] = useState(false);\n  const [nearReachStart, setNearReachStart] = useState(false);\n  const [nearReachEnd, setNearReachEnd] = useState(false);\n  const isVertical = direction === 'vertical';\n\n  useLayoutEffect(() => {\n    const scrollableElement = scrollableRef.current;\n    if (!scrollableElement) return {};\n    let previousScrollStart = isVertical\n      ? scrollableElement.scrollTop\n      : scrollableElement.scrollLeft;\n\n    function onScroll() {\n      const {\n        scrollTop,\n        scrollLeft,\n        scrollHeight,\n        scrollWidth,\n        clientHeight,\n        clientWidth,\n      } = scrollableElement;\n      const scrollStart = isVertical ? scrollTop : scrollLeft;\n      const scrollDimension = isVertical ? scrollHeight : scrollWidth;\n      const clientDimension = isVertical ? clientHeight : clientWidth;\n      const scrollDistance = Math.abs(scrollStart - previousScrollStart);\n      const distanceFromStartPx =\n        _distanceFromStartPx ||\n        Math.min(\n          clientDimension * distanceFromStart,\n          scrollDimension,\n          scrollStart,\n        );\n      const distanceFromEndPx =\n        _distanceFromEndPx ||\n        Math.min(\n          clientDimension * distanceFromEnd,\n          scrollDimension,\n          scrollDimension - scrollStart - clientDimension,\n        );\n\n      if (\n        scrollDistance >=\n        (previousScrollStart < scrollStart\n          ? scrollThresholdEnd\n          : scrollThresholdStart)\n      ) {\n        setScrollDirection(previousScrollStart < scrollStart ? 'end' : 'start');\n        previousScrollStart = scrollStart;\n      }\n\n      setReachStart(scrollStart <= 0);\n      setReachEnd(scrollStart + clientDimension >= scrollDimension);\n      setNearReachStart(scrollStart <= distanceFromStartPx);\n      setNearReachEnd(\n        scrollStart + clientDimension >= scrollDimension - distanceFromEndPx,\n      );\n    }\n\n    scrollableElement.addEventListener('scroll', onScroll, { passive: true });\n\n    return () => scrollableElement.removeEventListener('scroll', onScroll);\n  }, [\n    distanceFromStart,\n    distanceFromEnd,\n    scrollThresholdStart,\n    scrollThresholdEnd,\n  ]);\n\n  return {\n    scrollDirection,\n    reachStart,\n    reachEnd,\n    nearReachStart,\n    nearReachEnd,\n    init: () => {\n      if (scrollableRef.current) {\n        scrollableRef.current.dispatchEvent(new Event('scroll'));\n      }\n    },\n  };\n}\n","import './media-post.css';\n\nimport { memo } from 'preact/compat';\nimport { useContext, useMemo } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport FilterContext from '../utils/filter-context';\nimport { isFiltered } from '../utils/filters';\nimport states, { statusKey } from '../utils/states';\nimport store from '../utils/store';\n\nimport Media from './media';\n\nfunction MediaPost({\n  class: className,\n  statusID,\n  status,\n  instance,\n  parent,\n  // allowFilters,\n  onMediaClick,\n}) {\n  let sKey = statusKey(statusID, instance);\n  const snapStates = useSnapshot(states);\n  if (!status) {\n    status = snapStates.statuses[sKey] || snapStates.statuses[statusID];\n    sKey = statusKey(status?.id, instance);\n  }\n  if (!status) {\n    return null;\n  }\n\n  const {\n    account: {\n      acct,\n      avatar,\n      avatarStatic,\n      id: accountId,\n      url: accountURL,\n      displayName,\n      username,\n      emojis: accountEmojis,\n      bot,\n      group,\n    },\n    id,\n    repliesCount,\n    reblogged,\n    reblogsCount,\n    favourited,\n    favouritesCount,\n    bookmarked,\n    poll,\n    muted,\n    sensitive,\n    spoilerText,\n    visibility, // public, unlisted, private, direct\n    language,\n    editedAt,\n    filtered,\n    card,\n    createdAt,\n    inReplyToId,\n    inReplyToAccountId,\n    content,\n    mentions,\n    mediaAttachments,\n    reblog,\n    uri,\n    url,\n    emojis,\n    // Non-API props\n    _deleted,\n    _pinned,\n    // _filtered,\n  } = status;\n\n  if (!mediaAttachments?.length) {\n    return null;\n  }\n\n  const debugHover = (e) => {\n    if (e.shiftKey) {\n      console.log({\n        ...status,\n      });\n    }\n  };\n\n  const currentAccount = useMemo(() => {\n    return store.session.get('currentAccount');\n  }, []);\n  const isSelf = useMemo(() => {\n    return currentAccount && currentAccount === accountId;\n  }, [accountId, currentAccount]);\n\n  const filterContext = useContext(FilterContext);\n  const filterInfo = !isSelf && isFiltered(filtered, filterContext);\n\n  if (filterInfo?.action === 'hide') {\n    return null;\n  }\n\n  console.debug('RENDER Media post', id, status?.account.displayName);\n\n  // const readingExpandSpoilers = useMemo(() => {\n  //   const prefs = store.account.get('preferences') || {};\n  //   return !!prefs['reading:expand:spoilers'];\n  // }, []);\n  const hasSpoiler = spoilerText || sensitive;\n\n  const Parent = parent || 'div';\n\n  return mediaAttachments.map((media, i) => {\n    const mediaKey = `${sKey}-${media.id}`;\n    const filterTitleStr = filterInfo?.titlesStr;\n    return (\n      <Parent\n        data-state-post-id={sKey}\n        onMouseEnter={debugHover}\n        key={mediaKey}\n        data-spoiler-text={\n          spoilerText || (sensitive ? 'Sensitive media' : undefined)\n        }\n        data-filtered-text={\n          filterInfo\n            ? `Filtered${filterTitleStr ? `: ${filterTitleStr}` : ''}`\n            : undefined\n        }\n        class={`\n          media-post\n          ${filterInfo ? 'filtered' : ''}\n          ${hasSpoiler ? 'has-spoiler' : ''}\n        `}\n      >\n        <Media\n          class={className}\n          media={media}\n          lang={language}\n          to={`/${instance}/s/${id}?media-only=${i + 1}`}\n          onClick={\n            onMediaClick ? (e) => onMediaClick(e, i, media, status) : undefined\n          }\n        />\n      </Parent>\n    );\n  });\n}\n\nexport default memo(MediaPost);\n","import './nav-menu.css';\n\nimport { ControlledMenu, MenuDivider, MenuItem } from '@szhsin/react-menu';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useLongPress } from 'use-long-press';\nimport { useSnapshot } from 'valtio';\n\nimport { api } from '../utils/api';\nimport safeBoundingBoxPadding from '../utils/safe-bounding-box-padding';\nimport states from '../utils/states';\nimport store from '../utils/store';\n\nimport Avatar from './avatar';\nimport Icon from './icon';\nimport MenuLink from './menu-link';\n\nfunction NavMenu(props) {\n  const snapStates = useSnapshot(states);\n  const { masto, instance, authenticated } = api();\n\n  const [currentAccount, setCurrentAccount] = useState();\n  const [moreThanOneAccount, setMoreThanOneAccount] = useState(false);\n\n  useEffect(() => {\n    const accounts = store.local.getJSON('accounts') || [];\n    const acc = accounts.find(\n      (account) => account.info.id === store.session.get('currentAccount'),\n    );\n    if (acc) setCurrentAccount(acc);\n    setMoreThanOneAccount(accounts.length > 1);\n  }, []);\n\n  // Home = Following\n  // But when in multi-column mode, Home becomes columns of anything\n  // User may choose pin or not to pin Following\n  // If user doesn't pin Following, we show it in the menu\n  const showFollowing =\n    (snapStates.settings.shortcutsViewMode === 'multi-column' ||\n      (!snapStates.settings.shortcutsViewMode &&\n        snapStates.settings.shortcutsColumnsMode)) &&\n    !snapStates.shortcuts.find((pin) => pin.type === 'following');\n\n  const bindLongPress = useLongPress(\n    () => {\n      states.showAccounts = true;\n    },\n    {\n      threshold: 600,\n      detect: 'touch',\n      cancelOnMovement: true,\n    },\n  );\n\n  const buttonRef = useRef();\n  const [menuState, setMenuState] = useState(undefined);\n\n  const boundingBoxPadding = safeBoundingBoxPadding([\n    0,\n    0,\n    snapStates.settings.shortcutsViewMode === 'tab-menu-bar' ? 50 : 0,\n    0,\n  ]);\n\n  const mutesIterator = useRef();\n  async function fetchMutes(firstLoad) {\n    if (firstLoad || !mutesIterator.current) {\n      mutesIterator.current = masto.v1.mutes.list({\n        limit: 80,\n      });\n    }\n    const results = await mutesIterator.current.next();\n    return results;\n  }\n\n  const blocksIterator = useRef();\n  async function fetchBlocks(firstLoad) {\n    if (firstLoad || !blocksIterator.current) {\n      blocksIterator.current = masto.v1.blocks.list({\n        limit: 80,\n      });\n    }\n    const results = await blocksIterator.current.next();\n    return results;\n  }\n\n  return (\n    <>\n      <button\n        ref={buttonRef}\n        type=\"button\"\n        class={`button plain nav-menu-button ${\n          moreThanOneAccount ? 'with-avatar' : ''\n        } ${open ? 'active' : ''}`}\n        style={{ position: 'relative' }}\n        onClick={() => {\n          setMenuState((state) => (!state ? 'open' : undefined));\n        }}\n        onContextMenu={(e) => {\n          e.preventDefault();\n          states.showAccounts = true;\n        }}\n        {...bindLongPress()}\n      >\n        {moreThanOneAccount && (\n          <Avatar\n            url={\n              currentAccount?.info?.avatar || currentAccount?.info?.avatarStatic\n            }\n            size=\"l\"\n            squircle={currentAccount?.info?.bot}\n          />\n        )}\n        <Icon icon=\"menu\" size={moreThanOneAccount ? 's' : 'l'} />\n      </button>\n      <ControlledMenu\n        menuClassName=\"nav-menu\"\n        state={menuState}\n        anchorRef={buttonRef}\n        onClose={() => {\n          setMenuState(undefined);\n        }}\n        containerProps={{\n          style: {\n            zIndex: 10,\n          },\n          onClick: () => {\n            setMenuState(undefined);\n          },\n        }}\n        portal={{\n          target: document.body,\n        }}\n        {...props}\n        overflow=\"auto\"\n        viewScroll=\"close\"\n        position=\"anchor\"\n        align=\"center\"\n        boundingBoxPadding={boundingBoxPadding}\n        unmountOnClose\n      >\n        {!!snapStates.appVersion?.commitHash &&\n          __COMMIT_HASH__ !== snapStates.appVersion.commitHash && (\n            <div class=\"top-menu\">\n              <MenuItem\n                onClick={() => {\n                  const yes = confirm('Reload page now to update?');\n                  if (yes) {\n                    (async () => {\n                      try {\n                        location.reload();\n                      } catch (e) {}\n                    })();\n                  }\n                }}\n              >\n                <Icon icon=\"sparkles\" class=\"sparkle-icon\" size=\"l\" />{' '}\n                <span>New update available…</span>\n              </MenuItem>\n              <MenuDivider />\n            </div>\n          )}\n        <section>\n          <MenuLink to=\"/\">\n            <Icon icon=\"home\" size=\"l\" /> <span>Home</span>\n          </MenuLink>\n          {authenticated && (\n            <>\n              {showFollowing && (\n                <MenuLink to=\"/following\">\n                  <Icon icon=\"following\" size=\"l\" /> <span>Following</span>\n                </MenuLink>\n              )}\n              <MenuLink to=\"/mentions\">\n                <Icon icon=\"at\" size=\"l\" /> <span>Mentions</span>\n              </MenuLink>\n              <MenuLink to=\"/notifications\">\n                <Icon icon=\"notification\" size=\"l\" /> <span>Notifications</span>\n                {snapStates.notificationsShowNew && (\n                  <sup title=\"New\" style={{ opacity: 0.5 }}>\n                    {' '}\n                    &bull;\n                  </sup>\n                )}\n              </MenuLink>\n              <MenuDivider />\n              <MenuLink to=\"/l\">\n                <Icon icon=\"list\" size=\"l\" /> <span>Lists</span>\n              </MenuLink>\n              <MenuLink to=\"/ft\">\n                <Icon icon=\"hashtag\" size=\"l\" /> <span>Followed Hashtags</span>\n              </MenuLink>\n              <MenuLink to=\"/b\">\n                <Icon icon=\"bookmark\" size=\"l\" /> <span>Bookmarks</span>\n              </MenuLink>\n              <MenuLink to=\"/f\">\n                <Icon icon=\"heart\" size=\"l\" /> <span>Likes</span>\n              </MenuLink>\n            </>\n          )}\n          <MenuDivider />\n          <MenuLink to={`/search`}>\n            <Icon icon=\"search\" size=\"l\" /> <span>Search</span>\n          </MenuLink>\n          <MenuLink to={`/${instance}/p/l`}>\n            <Icon icon=\"group\" size=\"l\" /> <span>Local</span>\n          </MenuLink>\n          <MenuLink to={`/${instance}/p`}>\n            <Icon icon=\"earth\" size=\"l\" /> <span>Federated</span>\n          </MenuLink>\n          <MenuLink to={`/${instance}/trending`}>\n            <Icon icon=\"chart\" size=\"l\" /> <span>Trending</span>\n          </MenuLink>\n        </section>\n        <section>\n          {authenticated ? (\n            <>\n              <MenuDivider />\n              {currentAccount?.info?.id && (\n                <MenuLink to={`/${instance}/a/${currentAccount.info.id}`}>\n                  <Icon icon=\"user\" size=\"l\" /> <span>Profile</span>\n                </MenuLink>\n              )}\n              <MenuItem\n                onClick={() => {\n                  states.showAccounts = true;\n                }}\n              >\n                <Icon icon=\"group\" size=\"l\" /> <span>Accounts&hellip;</span>\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  states.showGenericAccounts = {\n                    id: 'mute',\n                    heading: 'Muted users',\n                    fetchAccounts: fetchMutes,\n                    excludeRelationshipAttrs: ['muting'],\n                  };\n                }}\n              >\n                <Icon icon=\"mute\" size=\"l\" /> Muted users&hellip;\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  states.showGenericAccounts = {\n                    id: 'block',\n                    heading: 'Blocked users',\n                    fetchAccounts: fetchBlocks,\n                    excludeRelationshipAttrs: ['blocking'],\n                  };\n                }}\n              >\n                <Icon icon=\"block\" size=\"l\" />\n                Blocked users&hellip;\n              </MenuItem>\n              <MenuDivider className=\"divider-grow\" />\n              <MenuItem\n                onClick={() => {\n                  states.showKeyboardShortcutsHelp = true;\n                }}\n              >\n                <Icon icon=\"keyboard\" size=\"l\" />{' '}\n                <span>Keyboard shortcuts</span>\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  states.showShortcutsSettings = true;\n                }}\n              >\n                <Icon icon=\"shortcut\" size=\"l\" />{' '}\n                <span>Shortcuts / Columns&hellip;</span>\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  states.showSettings = true;\n                }}\n              >\n                <Icon icon=\"gear\" size=\"l\" /> <span>Settings&hellip;</span>\n              </MenuItem>\n            </>\n          ) : (\n            <>\n              <MenuDivider />\n              <MenuLink to=\"/login\">\n                <Icon icon=\"user\" size=\"l\" /> <span>Log in</span>\n              </MenuLink>\n              <MenuItem\n                onClick={() => {\n                  states.showSettings = true;\n                }}\n              >\n                <Icon icon=\"gear\" size=\"l\" /> <span>Settings&hellip;</span>\n              </MenuItem>\n            </>\n          )}\n        </section>\n      </ControlledMenu>\n    </>\n  );\n}\n\nexport default NavMenu;\n","import { useCallback, useEffect, useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { InView } from 'react-intersection-observer';\nimport { useDebouncedCallback } from 'use-debounce';\nimport { useSnapshot } from 'valtio';\n\nimport FilterContext from '../utils/filter-context';\nimport { isFiltered } from '../utils/filters';\nimport states, { statusKey } from '../utils/states';\nimport statusPeek from '../utils/status-peek';\nimport { groupBoosts, groupContext } from '../utils/timeline-utils';\nimport useInterval from '../utils/useInterval';\nimport usePageVisibility from '../utils/usePageVisibility';\nimport useScroll from '../utils/useScroll';\n\nimport Icon from './icon';\nimport Link from './link';\nimport MediaPost from './media-post';\nimport NavMenu from './nav-menu';\nimport Status from './status';\n\nconst scrollIntoViewOptions = {\n  block: 'nearest',\n  inline: 'center',\n  behavior: 'smooth',\n};\n\nfunction Timeline({\n  title,\n  titleComponent,\n  id,\n  instance,\n  emptyText,\n  errorText,\n  useItemID, // use statusID instead of status object, assuming it's already in states\n  boostsCarousel,\n  fetchItems = () => {},\n  checkForUpdates = () => {},\n  checkForUpdatesInterval = 15_000, // 15 seconds\n  headerStart,\n  headerEnd,\n  timelineStart,\n  // allowFilters,\n  refresh,\n  view,\n  filterContext,\n  showFollowedTags,\n}) {\n  const snapStates = useSnapshot(states);\n  const [items, setItems] = useState([]);\n  const [uiState, setUIState] = useState('default');\n  const [showMore, setShowMore] = useState(false);\n  const [showNew, setShowNew] = useState(false);\n  const [visible, setVisible] = useState(true);\n  const scrollableRef = useRef();\n\n  console.debug('RENDER Timeline', id, refresh);\n\n  const allowGrouping = view !== 'media';\n  const loadItems = useDebouncedCallback(\n    (firstLoad) => {\n      setShowNew(false);\n      if (uiState === 'loading') return;\n      setUIState('loading');\n      (async () => {\n        try {\n          let { done, value } = await fetchItems(firstLoad);\n          if (Array.isArray(value)) {\n            // Avoid grouping for pinned posts\n            const [pinnedPosts, otherPosts] = value.reduce(\n              (acc, item) => {\n                if (item._pinned) {\n                  acc[0].push(item);\n                } else {\n                  acc[1].push(item);\n                }\n                return acc;\n              },\n              [[], []],\n            );\n            value = otherPosts;\n            if (allowGrouping) {\n              if (boostsCarousel) {\n                value = groupBoosts(value);\n              }\n              value = groupContext(value);\n            }\n            if (pinnedPosts.length) {\n              value = pinnedPosts.concat(value);\n            }\n            console.log(value);\n            if (firstLoad) {\n              setItems(value);\n            } else {\n              setItems((items) => [...items, ...value]);\n            }\n            if (!value.length) done = true;\n            setShowMore(!done);\n          } else {\n            setShowMore(false);\n          }\n          setUIState('default');\n        } catch (e) {\n          console.error(e);\n          setUIState('error');\n        } finally {\n          loadItems.cancel();\n        }\n      })();\n    },\n    1500,\n    {\n      leading: true,\n      trailing: false,\n    },\n  );\n\n  const itemsSelector = '.timeline-item, .timeline-item-alt';\n\n  const jRef = useHotkeys('j, shift+j', (_, handler) => {\n    // focus on next status after active item\n    const activeItem = document.activeElement.closest(itemsSelector);\n    const activeItemRect = activeItem?.getBoundingClientRect();\n    const allItems = Array.from(\n      scrollableRef.current.querySelectorAll(itemsSelector),\n    );\n    if (\n      activeItem &&\n      activeItemRect.top < scrollableRef.current.clientHeight &&\n      activeItemRect.bottom > 0\n    ) {\n      const activeItemIndex = allItems.indexOf(activeItem);\n      let nextItem = allItems[activeItemIndex + 1];\n      if (handler.shift) {\n        // get next status that's not .timeline-item-alt\n        nextItem = allItems.find(\n          (item, index) =>\n            index > activeItemIndex &&\n            !item.classList.contains('timeline-item-alt'),\n        );\n      }\n      if (nextItem) {\n        nextItem.focus();\n        nextItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostItem = allItems.find((item) => {\n        const itemRect = item.getBoundingClientRect();\n        return itemRect.top >= 44 && itemRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostItem) {\n        topmostItem.focus();\n        topmostItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    }\n  });\n\n  const kRef = useHotkeys('k, shift+k', (_, handler) => {\n    // focus on previous status after active item\n    const activeItem = document.activeElement.closest(itemsSelector);\n    const activeItemRect = activeItem?.getBoundingClientRect();\n    const allItems = Array.from(\n      scrollableRef.current.querySelectorAll(itemsSelector),\n    );\n    if (\n      activeItem &&\n      activeItemRect.top < scrollableRef.current.clientHeight &&\n      activeItemRect.bottom > 0\n    ) {\n      const activeItemIndex = allItems.indexOf(activeItem);\n      let prevItem = allItems[activeItemIndex - 1];\n      if (handler.shift) {\n        // get prev status that's not .timeline-item-alt\n        prevItem = allItems.findLast(\n          (item, index) =>\n            index < activeItemIndex &&\n            !item.classList.contains('timeline-item-alt'),\n        );\n      }\n      if (prevItem) {\n        prevItem.focus();\n        prevItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostItem = allItems.find((item) => {\n        const itemRect = item.getBoundingClientRect();\n        return itemRect.top >= 44 && itemRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostItem) {\n        topmostItem.focus();\n        topmostItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    }\n  });\n\n  const oRef = useHotkeys(['enter', 'o'], () => {\n    // open active status\n    const activeItem = document.activeElement.closest(itemsSelector);\n    if (activeItem) {\n      activeItem.click();\n    }\n  });\n\n  const {\n    scrollDirection,\n    nearReachStart,\n    nearReachEnd,\n    reachStart,\n    reachEnd,\n  } = useScroll({\n    scrollableRef,\n    distanceFromEnd: 2,\n    scrollThresholdStart: 44,\n  });\n\n  useEffect(() => {\n    scrollableRef.current?.scrollTo({ top: 0 });\n    loadItems(true);\n  }, []);\n  useEffect(() => {\n    loadItems(true);\n  }, [refresh]);\n\n  useEffect(() => {\n    if (reachStart) {\n      loadItems(true);\n    }\n  }, [reachStart]);\n\n  useEffect(() => {\n    if (nearReachEnd || (reachEnd && showMore)) {\n      loadItems();\n    }\n  }, [nearReachEnd, showMore]);\n\n  const prevView = useRef(view);\n  useEffect(() => {\n    if (prevView.current !== view) {\n      prevView.current = view;\n      setItems([]);\n    }\n  }, [view]);\n\n  const loadOrCheckUpdates = useCallback(\n    async ({ disableIdleCheck = false } = {}) => {\n      const noPointers = scrollableRef.current\n        ? getComputedStyle(scrollableRef.current).pointerEvents === 'none'\n        : false;\n      console.log('✨ Load or check updates', id, {\n        autoRefresh: snapStates.settings.autoRefresh,\n        scrollTop: scrollableRef.current.scrollTop,\n        disableIdleCheck,\n        idle: window.__IDLE__,\n        inBackground: inBackground(),\n        noPointers,\n      });\n      if (\n        snapStates.settings.autoRefresh &&\n        scrollableRef.current.scrollTop < 16 &&\n        (disableIdleCheck || window.__IDLE__) &&\n        !inBackground() &&\n        !noPointers\n      ) {\n        console.log('✨ Load updates', id, snapStates.settings.autoRefresh);\n        loadItems(true);\n      } else {\n        console.log('✨ Check updates', id, snapStates.settings.autoRefresh);\n        const hasUpdate = await checkForUpdates();\n        if (hasUpdate) {\n          console.log('✨ Has new updates', id);\n          setShowNew(true);\n        }\n      }\n    },\n    [id, loadItems, checkForUpdates, snapStates.settings.autoRefresh],\n  );\n\n  const lastHiddenTime = useRef();\n  usePageVisibility(\n    (visible) => {\n      if (visible) {\n        const timeDiff = Date.now() - lastHiddenTime.current;\n        if (!lastHiddenTime.current || timeDiff > 1000 * 3) {\n          // 3 seconds\n          loadOrCheckUpdates({\n            disableIdleCheck: true,\n          });\n        }\n      } else {\n        lastHiddenTime.current = Date.now();\n      }\n      setVisible(visible);\n    },\n    [checkForUpdates, loadOrCheckUpdates, snapStates.settings.autoRefresh],\n  );\n\n  // checkForUpdates interval\n  useInterval(\n    loadOrCheckUpdates,\n    visible && !showNew\n      ? checkForUpdatesInterval * (nearReachStart ? 1 : 2)\n      : null,\n  );\n\n  const hiddenUI = scrollDirection === 'end' && !nearReachStart;\n\n  return (\n    <FilterContext.Provider value={filterContext}>\n      <div\n        id={`${id}-page`}\n        class=\"deck-container\"\n        ref={(node) => {\n          scrollableRef.current = node;\n          jRef.current = node;\n          kRef.current = node;\n          oRef.current = node;\n        }}\n        tabIndex=\"-1\"\n      >\n        <div class=\"timeline-deck deck\">\n          <header\n            hidden={hiddenUI}\n            onClick={(e) => {\n              if (!e.target.closest('a, button')) {\n                scrollableRef.current?.scrollTo({\n                  top: 0,\n                  behavior: 'smooth',\n                });\n              }\n            }}\n            onDblClick={(e) => {\n              if (!e.target.closest('a, button')) {\n                loadItems(true);\n              }\n            }}\n            class={uiState === 'loading' ? 'loading' : ''}\n          >\n            <div class=\"header-grid\">\n              <div class=\"header-side\">\n                <NavMenu />\n                {headerStart !== null && headerStart !== undefined ? (\n                  headerStart\n                ) : (\n                  <Link to=\"/\" class=\"button plain home-button\">\n                    <Icon icon=\"home\" size=\"l\" />\n                  </Link>\n                )}\n              </div>\n              {title && (titleComponent ? titleComponent : <h1>{title}</h1>)}\n              <div class=\"header-side\">\n                {/* <Loader hidden={uiState !== 'loading'} /> */}\n                {!!headerEnd && headerEnd}\n              </div>\n            </div>\n            {items.length > 0 &&\n              uiState !== 'loading' &&\n              !hiddenUI &&\n              showNew && (\n                <button\n                  class=\"updates-button shiny-pill\"\n                  type=\"button\"\n                  onClick={() => {\n                    loadItems(true);\n                    scrollableRef.current?.scrollTo({\n                      top: 0,\n                      behavior: 'smooth',\n                    });\n                  }}\n                >\n                  <Icon icon=\"arrow-up\" /> New posts\n                </button>\n              )}\n          </header>\n          {!!timelineStart && (\n            <div\n              class={`timeline-start ${uiState === 'loading' ? 'loading' : ''}`}\n            >\n              {timelineStart}\n            </div>\n          )}\n          {!!items.length ? (\n            <>\n              <ul class={`timeline ${view ? `timeline-${view}` : ''}`}>\n                {items.map((status) => (\n                  <TimelineItem\n                    status={status}\n                    instance={instance}\n                    useItemID={useItemID}\n                    // allowFilters={allowFilters}\n                    filterContext={filterContext}\n                    key={status.id + status?._pinned + view}\n                    view={view}\n                    showFollowedTags={showFollowedTags}\n                  />\n                ))}\n                {showMore &&\n                  uiState === 'loading' &&\n                  (view === 'media' ? null : (\n                    <>\n                      <li\n                        style={{\n                          height: '20vh',\n                        }}\n                      >\n                        <Status skeleton />\n                      </li>\n                      <li\n                        style={{\n                          height: '25vh',\n                        }}\n                      >\n                        <Status skeleton />\n                      </li>\n                    </>\n                  ))}\n              </ul>\n              {uiState === 'default' &&\n                (showMore ? (\n                  <InView\n                    onChange={(inView) => {\n                      if (inView) {\n                        loadItems();\n                      }\n                    }}\n                  >\n                    <button\n                      type=\"button\"\n                      class=\"plain block\"\n                      onClick={() => loadItems()}\n                      style={{ marginBlockEnd: '6em' }}\n                    >\n                      Show more&hellip;\n                    </button>\n                  </InView>\n                ) : (\n                  <p class=\"ui-state insignificant\">The end.</p>\n                ))}\n            </>\n          ) : uiState === 'loading' ? (\n            <ul class=\"timeline\">\n              {Array.from({ length: 5 }).map((_, i) =>\n                view === 'media' ? (\n                  <div\n                    style={{\n                      height: '50vh',\n                    }}\n                  />\n                ) : (\n                  <li key={i}>\n                    <Status skeleton />\n                  </li>\n                ),\n              )}\n            </ul>\n          ) : (\n            uiState !== 'error' && <p class=\"ui-state\">{emptyText}</p>\n          )}\n          {uiState === 'error' && (\n            <p class=\"ui-state\">\n              {errorText}\n              <br />\n              <br />\n              <button type=\"button\" onClick={() => loadItems(!items.length)}>\n                Try again\n              </button>\n            </p>\n          )}\n        </div>\n      </div>\n    </FilterContext.Provider>\n  );\n}\n\nfunction TimelineItem({\n  status,\n  instance,\n  useItemID,\n  // allowFilters,\n  filterContext,\n  view,\n  showFollowedTags,\n}) {\n  const { id: statusID, reblog, items, type, _pinned } = status;\n  if (_pinned) useItemID = false;\n  const actualStatusID = reblog?.id || statusID;\n  const url = instance\n    ? `/${instance}/s/${actualStatusID}`\n    : `/s/${actualStatusID}`;\n  let title = '';\n  if (type === 'boosts') {\n    title = `${items.length} Boosts`;\n  } else if (type === 'pinned') {\n    title = 'Pinned posts';\n  }\n  const isCarousel = type === 'boosts' || type === 'pinned';\n  if (items) {\n    if (isCarousel) {\n      // Here, we don't hide filtered posts, but we sort them last\n      items.sort((a, b) => {\n        // if (a._filtered && !b._filtered) {\n        //   return 1;\n        // }\n        // if (!a._filtered && b._filtered) {\n        //   return -1;\n        // }\n        const aFiltered = isFiltered(a.filtered, filterContext);\n        const bFiltered = isFiltered(b.filtered, filterContext);\n        if (aFiltered && !bFiltered) {\n          return 1;\n        }\n        if (!aFiltered && bFiltered) {\n          return -1;\n        }\n        return 0;\n      });\n      return (\n        <li key={`timeline-${statusID}`} class=\"timeline-item-carousel\">\n          <StatusCarousel title={title} class={`${type}-carousel`}>\n            {items.map((item) => {\n              const { id: statusID, reblog, _pinned } = item;\n              const actualStatusID = reblog?.id || statusID;\n              const url = instance\n                ? `/${instance}/s/${actualStatusID}`\n                : `/s/${actualStatusID}`;\n              if (_pinned) useItemID = false;\n              return (\n                <li key={statusID}>\n                  <Link class=\"status-carousel-link timeline-item-alt\" to={url}>\n                    {useItemID ? (\n                      <Status\n                        statusID={statusID}\n                        instance={instance}\n                        size=\"s\"\n                        contentTextWeight\n                        enableCommentHint\n                        // allowFilters={allowFilters}\n                      />\n                    ) : (\n                      <Status\n                        status={item}\n                        instance={instance}\n                        size=\"s\"\n                        contentTextWeight\n                        enableCommentHint\n                        // allowFilters={allowFilters}\n                      />\n                    )}\n                  </Link>\n                </li>\n              );\n            })}\n          </StatusCarousel>\n        </li>\n      );\n    }\n    const manyItems = items.length > 3;\n    return items.map((item, i) => {\n      const { id: statusID, _differentAuthor } = item;\n      const url = instance ? `/${instance}/s/${statusID}` : `/s/${statusID}`;\n      const isMiddle = i > 0 && i < items.length - 1;\n      const isSpoiler = item.sensitive && !!item.spoilerText;\n      const showCompact =\n        (!_differentAuthor && isSpoiler && i > 0) ||\n        (manyItems &&\n          isMiddle &&\n          (type === 'thread' ||\n            (type === 'conversation' &&\n              !_differentAuthor &&\n              !items[i - 1]._differentAuthor &&\n              !items[i + 1]._differentAuthor)));\n      const isStart = i === 0;\n      const isEnd = i === items.length - 1;\n      return (\n        <li\n          key={`timeline-${statusID}`}\n          class={`timeline-item-container timeline-item-container-type-${type} timeline-item-container-${\n            isStart ? 'start' : isEnd ? 'end' : 'middle'\n          } ${_differentAuthor ? 'timeline-item-diff-author' : ''}`}\n        >\n          <Link class=\"status-link timeline-item\" to={url}>\n            {showCompact ? (\n              <TimelineStatusCompact status={item} instance={instance} />\n            ) : useItemID ? (\n              <Status\n                statusID={statusID}\n                instance={instance}\n                enableCommentHint={isEnd}\n                showFollowedTags={showFollowedTags}\n                // allowFilters={allowFilters}\n              />\n            ) : (\n              <Status\n                status={item}\n                instance={instance}\n                enableCommentHint={isEnd}\n                showFollowedTags={showFollowedTags}\n                // allowFilters={allowFilters}\n              />\n            )}\n          </Link>\n        </li>\n      );\n    });\n  }\n\n  const itemKey = `timeline-${statusID + _pinned}`;\n\n  if (view === 'media') {\n    return useItemID ? (\n      <MediaPost\n        class=\"timeline-item\"\n        parent=\"li\"\n        key={itemKey}\n        statusID={statusID}\n        instance={instance}\n        // allowFilters={allowFilters}\n      />\n    ) : (\n      <MediaPost\n        class=\"timeline-item\"\n        parent=\"li\"\n        key={itemKey}\n        status={status}\n        instance={instance}\n        // allowFilters={allowFilters}\n      />\n    );\n  }\n\n  return (\n    <li key={itemKey}>\n      <Link class=\"status-link timeline-item\" to={url}>\n        {useItemID ? (\n          <Status\n            statusID={statusID}\n            instance={instance}\n            enableCommentHint\n            showFollowedTags={showFollowedTags}\n            // allowFilters={allowFilters}\n          />\n        ) : (\n          <Status\n            status={status}\n            instance={instance}\n            enableCommentHint\n            showFollowedTags={showFollowedTags}\n            // allowFilters={allowFilters}\n          />\n        )}\n      </Link>\n    </li>\n  );\n}\n\nfunction StatusCarousel({ title, class: className, children }) {\n  const carouselRef = useRef();\n  const { reachStart, reachEnd, init } = useScroll({\n    scrollableRef: carouselRef,\n    direction: 'horizontal',\n  });\n  useEffect(() => {\n    init?.();\n  }, []);\n\n  return (\n    <div class={`status-carousel ${className}`}>\n      <header>\n        <h3>{title}</h3>\n        <span>\n          <button\n            type=\"button\"\n            class=\"small plain2\"\n            disabled={reachStart}\n            onClick={() => {\n              carouselRef.current?.scrollBy({\n                left: -Math.min(320, carouselRef.current?.offsetWidth),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"chevron-left\" />\n          </button>{' '}\n          <button\n            type=\"button\"\n            class=\"small plain2\"\n            disabled={reachEnd}\n            onClick={() => {\n              carouselRef.current?.scrollBy({\n                left: Math.min(320, carouselRef.current?.offsetWidth),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"chevron-right\" />\n          </button>\n        </span>\n      </header>\n      <ul ref={carouselRef}>{children}</ul>\n    </div>\n  );\n}\n\nfunction TimelineStatusCompact({ status, instance }) {\n  const snapStates = useSnapshot(states);\n  const { id, visibility } = status;\n  const statusPeekText = statusPeek(status);\n  const sKey = statusKey(id, instance);\n  return (\n    <article\n      class={`status compact-thread ${\n        visibility === 'direct' ? 'visibility-direct' : ''\n      }`}\n      tabindex=\"-1\"\n    >\n      {!!snapStates.statusThreadNumber[sKey] ? (\n        <div class=\"status-thread-badge\">\n          <Icon icon=\"thread\" size=\"s\" />\n          {snapStates.statusThreadNumber[sKey]\n            ? ` ${snapStates.statusThreadNumber[sKey]}/X`\n            : ''}\n        </div>\n      ) : (\n        <div class=\"status-thread-badge\">\n          <Icon icon=\"thread\" size=\"s\" />\n        </div>\n      )}\n      <div class=\"content-compact\" title={statusPeekText}>\n        {statusPeekText}\n        {status.sensitive && status.spoilerText && (\n          <>\n            {' '}\n            <span class=\"spoiler-badge\">\n              <Icon icon=\"eye-close\" size=\"s\" />\n            </span>\n          </>\n        )}\n      </div>\n    </article>\n  );\n}\n\nfunction inBackground() {\n  return !!document.querySelector('.deck-backdrop, #modal-container > *');\n}\n\nexport default Timeline;\n","import { MenuItem } from '@szhsin/react-menu';\nimport {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'preact/hooks';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport AccountInfo from '../components/account-info';\nimport EmojiText from '../components/emoji-text';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Menu2 from '../components/menu2';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport pmem from '../utils/pmem';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\nconst MIN_YEAR = 1983;\nconst MIN_YEAR_MONTH = `${MIN_YEAR}-01`; // Birth of the Internet\n\nconst supportsInputMonth = (() => {\n  try {\n    const input = document.createElement('input');\n    input.setAttribute('type', 'month');\n    return input.type === 'month';\n  } catch (e) {\n    return false;\n  }\n})();\n\nasync function _isSearchEnabled(instance) {\n  const { masto } = api({ instance });\n  const results = await masto.v2.search.fetch({\n    q: 'from:me',\n    type: 'statuses',\n    limit: 1,\n  });\n  return !!results?.statuses?.length;\n}\nconst isSearchEnabled = pmem(_isSearchEnabled);\n\nfunction AccountStatuses() {\n  const snapStates = useSnapshot(states);\n  const { id, ...params } = useParams();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const month = searchParams.get('month');\n  const excludeReplies = !searchParams.get('replies');\n  const excludeBoosts = !!searchParams.get('boosts');\n  const tagged = searchParams.get('tagged');\n  const media = !!searchParams.get('media');\n  const { masto, instance, authenticated } = api({ instance: params.instance });\n  const { masto: currentMasto, instance: currentInstance } = api();\n  const accountStatusesIterator = useRef();\n\n  const allSearchParams = [month, excludeReplies, excludeBoosts, tagged, media];\n  const [account, setAccount] = useState();\n  const searchOffsetRef = useRef(0);\n  useEffect(() => {\n    searchOffsetRef.current = 0;\n  }, allSearchParams);\n\n  const sameCurrentInstance = useMemo(\n    () => instance === currentInstance,\n    [instance, currentInstance],\n  );\n  const [searchEnabled, setSearchEnabled] = useState(false);\n  useEffect(() => {\n    // Only enable for current logged-in instance\n    // Most remote instances don't allow unauthenticated searches\n    if (!sameCurrentInstance) return;\n    if (!account?.acct) return;\n    (async () => {\n      const enabled = await isSearchEnabled(instance);\n      console.log({ enabled });\n      setSearchEnabled(enabled);\n    })();\n  }, [instance, sameCurrentInstance, account?.acct]);\n\n  async function fetchAccountStatuses(firstLoad) {\n    const isValidMonth = /^\\d{4}-[01]\\d$/.test(month);\n    const isValidYear = month?.split?.('-')?.[0] >= MIN_YEAR;\n    if (isValidMonth && isValidYear) {\n      if (!account) {\n        return {\n          value: [],\n          done: true,\n        };\n      }\n      const [_year, _month] = month.split('-');\n      const monthIndex = parseInt(_month, 10) - 1;\n      // YYYY-MM (no day)\n      // Search options:\n      // - from:account\n      // - after:YYYY-MM-DD (non-inclusive)\n      // - before:YYYY-MM-DD (non-inclusive)\n\n      // Last day of previous month\n      const after = new Date(_year, monthIndex, 0);\n      const afterStr = `${after.getFullYear()}-${(after.getMonth() + 1)\n        .toString()\n        .padStart(2, '0')}-${after.getDate().toString().padStart(2, '0')}`;\n      // First day of next month\n      const before = new Date(_year, monthIndex + 1, 1);\n      const beforeStr = `${before.getFullYear()}-${(before.getMonth() + 1)\n        .toString()\n        .padStart(2, '0')}-${before.getDate().toString().padStart(2, '0')}`;\n      console.log({\n        month,\n        _year,\n        _month,\n        monthIndex,\n        after,\n        before,\n        afterStr,\n        beforeStr,\n      });\n\n      let limit;\n      if (firstLoad) {\n        limit = LIMIT + 1;\n        searchOffsetRef.current = 0;\n      } else {\n        limit = LIMIT + searchOffsetRef.current + 1;\n        searchOffsetRef.current += LIMIT;\n      }\n\n      const searchResults = await masto.v2.search.fetch({\n        q: `from:${account.acct} after:${afterStr} before:${beforeStr}`,\n        type: 'statuses',\n        limit,\n        offset: searchOffsetRef.current,\n      });\n      if (searchResults?.statuses?.length) {\n        const value = searchResults.statuses.slice(0, LIMIT);\n        value.forEach((item) => {\n          saveStatus(item, instance);\n        });\n        const done = searchResults.statuses.length <= LIMIT;\n        return { value, done };\n      } else {\n        return { value: [], done: true };\n      }\n    }\n\n    const results = [];\n    if (firstLoad) {\n      const { value } = await masto.v1.accounts\n        .$select(id)\n        .statuses.list({\n          pinned: true,\n        })\n        .next();\n      if (value?.length && !tagged && !media) {\n        const pinnedStatuses = value.map((status) => {\n          saveStatus(status, instance);\n          return {\n            ...status,\n            _pinned: true,\n          };\n        });\n        if (pinnedStatuses.length >= 3) {\n          const pinnedStatusesIds = pinnedStatuses.map((status) => status.id);\n          results.push({\n            id: pinnedStatusesIds,\n            items: pinnedStatuses,\n            type: 'pinned',\n          });\n        } else {\n          results.push(...pinnedStatuses);\n        }\n      }\n    }\n    if (firstLoad || !accountStatusesIterator.current) {\n      accountStatusesIterator.current = masto.v1.accounts\n        .$select(id)\n        .statuses.list({\n          limit: LIMIT,\n          exclude_replies: excludeReplies,\n          exclude_reblogs: excludeBoosts,\n          only_media: media,\n          tagged,\n        });\n    }\n    const { value, done } = await accountStatusesIterator.current.next();\n    if (value?.length) {\n      results.push(...value);\n\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      value: results,\n      done,\n    };\n  }\n\n  const [featuredTags, setFeaturedTags] = useState([]);\n  useTitle(\n    account?.acct\n      ? `${account?.displayName ? account.displayName + ' ' : ''}@${\n          account.acct\n        }${\n          !excludeReplies\n            ? ' (+ Replies)'\n            : excludeBoosts\n            ? ' (- Boosts)'\n            : tagged\n            ? ` (#${tagged})`\n            : media\n            ? ' (Media)'\n            : month\n            ? ` (${new Date(month).toLocaleString('default', {\n                month: 'long',\n                year: 'numeric',\n              })})`\n            : ''\n        }`\n      : 'Account posts',\n    '/:instance?/a/:id',\n  );\n\n  const fetchAccountPromiseRef = useRef();\n  const fetchAccount = useCallback(() => {\n    const fetchPromise =\n      fetchAccountPromiseRef.current || masto.v1.accounts.$select(id).fetch();\n    fetchAccountPromiseRef.current = fetchPromise;\n    return fetchPromise;\n  }, [id, masto]);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const acc = await fetchAccount();\n        console.log(acc);\n        setAccount(acc);\n      } catch (e) {\n        console.error(e);\n      }\n      try {\n        const featuredTags = await masto.v1.accounts\n          .$select(id)\n          .featuredTags.list();\n        console.log({ featuredTags });\n        setFeaturedTags(featuredTags);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [id]);\n\n  const { displayName, acct, emojis } = account || {};\n\n  const accountInfoMemo = useMemo(() => {\n    const cachedAccount = snapStates.accounts[`${id}@${instance}`];\n    return (\n      <AccountInfo\n        instance={instance}\n        account={cachedAccount || id}\n        fetchAccount={fetchAccount}\n        authenticated={authenticated}\n        standalone\n      />\n    );\n  }, [id, instance, authenticated, fetchAccount]);\n\n  const filterBarRef = useRef();\n  const TimelineStart = useMemo(() => {\n    const filtered =\n      !excludeReplies || excludeBoosts || tagged || media || !!month;\n\n    return (\n      <>\n        {accountInfoMemo}\n        <div\n          class=\"filter-bar\"\n          ref={filterBarRef}\n          style={{\n            position: 'relative',\n          }}\n        >\n          {filtered ? (\n            <Link\n              to={`/${instance}/a/${id}`}\n              class=\"insignificant filter-clear\"\n              title=\"Clear filters\"\n              key=\"clear-filters\"\n            >\n              <Icon icon=\"x\" size=\"l\" />\n            </Link>\n          ) : (\n            <Icon icon=\"filter\" class=\"insignificant\" size=\"l\" />\n          )}\n          <Link\n            to={`/${instance}/a/${id}${excludeReplies ? '?replies=1' : ''}`}\n            onClick={() => {\n              if (excludeReplies) {\n                showToast('Showing post with replies');\n              }\n            }}\n            class={excludeReplies ? '' : 'is-active'}\n          >\n            + Replies\n          </Link>\n          <Link\n            to={`/${instance}/a/${id}${excludeBoosts ? '' : '?boosts=0'}`}\n            onClick={() => {\n              if (!excludeBoosts) {\n                showToast('Showing posts without boosts');\n              }\n            }}\n            class={!excludeBoosts ? '' : 'is-active'}\n          >\n            - Boosts\n          </Link>\n          <Link\n            to={`/${instance}/a/${id}${media ? '' : '?media=1'}`}\n            onClick={() => {\n              if (!media) {\n                showToast('Showing posts with media');\n              }\n            }}\n            class={media ? 'is-active' : ''}\n          >\n            Media\n          </Link>\n          {featuredTags.map((tag) => (\n            <Link\n              key={tag.id}\n              to={`/${instance}/a/${id}${\n                tagged === tag.name\n                  ? ''\n                  : `?tagged=${encodeURIComponent(tag.name)}`\n              }`}\n              onClick={() => {\n                if (tagged !== tag.name) {\n                  showToast(`Showing posts tagged with #${tag.name}`);\n                }\n              }}\n              class={tagged === tag.name ? 'is-active' : ''}\n            >\n              <span>\n                <span class=\"more-insignificant\">#</span>\n                {tag.name}\n              </span>\n              {\n                // The count differs based on instance 😅\n              }\n              {/* <span class=\"filter-count\">{tag.statusesCount}</span> */}\n            </Link>\n          ))}\n          {searchEnabled &&\n            (supportsInputMonth ? (\n              <label class={`filter-field ${month ? 'is-active' : ''}`}>\n                <Icon icon=\"month\" size=\"l\" />\n                <input\n                  type=\"month\"\n                  disabled={!account?.acct}\n                  value={month || ''}\n                  min={MIN_YEAR_MONTH}\n                  max={new Date().toISOString().slice(0, 7)}\n                  onInput={(e) => {\n                    const { value, validity } = e.currentTarget;\n                    if (!validity.valid) return;\n                    setSearchParams(\n                      value\n                        ? {\n                            month: value,\n                          }\n                        : {},\n                    );\n                    showToast(\n                      `Showing posts in ${new Date(value).toLocaleString(\n                        'default',\n                        {\n                          month: 'long',\n                          year: 'numeric',\n                        },\n                      )}`,\n                    );\n                  }}\n                />\n              </label>\n            ) : (\n              // Fallback to <select> for month and <input type=\"number\"> for year\n              <MonthPicker\n                class={`filter-field ${month ? 'is-active' : ''}`}\n                disabled={!account?.acct}\n                value={month || ''}\n                min={MIN_YEAR_MONTH}\n                max={new Date().toISOString().slice(0, 7)}\n                onInput={(e) => {\n                  const { value, validity } = e;\n                  if (!validity.valid) return;\n                  setSearchParams(\n                    value\n                      ? {\n                          month: value,\n                        }\n                      : {},\n                  );\n                }}\n              />\n            ))}\n        </div>\n      </>\n    );\n  }, [\n    id,\n    instance,\n    authenticated,\n    featuredTags,\n    searchEnabled,\n    ...allSearchParams,\n  ]);\n\n  useEffect(() => {\n    // Focus on .is-active\n    const active = filterBarRef.current?.querySelector('.is-active');\n    if (active) {\n      console.log('active', active, active.offsetLeft);\n      filterBarRef.current.scrollTo({\n        behavior: 'smooth',\n        left:\n          active.offsetLeft -\n          (filterBarRef.current.offsetWidth - active.offsetWidth) / 2,\n      });\n    }\n  }, [featuredTags, searchEnabled, ...allSearchParams]);\n\n  const accountInstance = useMemo(() => {\n    if (!account?.url) return null;\n    const domain = new URL(account.url).hostname;\n    return domain;\n  }, [account]);\n  const sameInstance = instance === accountInstance;\n  const allowSwitch = !!account && !sameInstance;\n\n  return (\n    <Timeline\n      key={id}\n      title={`${account?.acct ? '@' + account.acct : 'Posts'}`}\n      titleComponent={\n        <h1\n          class=\"header-double-lines header-account\"\n          // onClick={() => {\n          //   states.showAccount = {\n          //     account,\n          //     instance,\n          //   };\n          // }}\n        >\n          <b>\n            <EmojiText text={displayName} emojis={emojis} />\n          </b>\n          <div>\n            <span>@{acct}</span>\n          </div>\n        </h1>\n      }\n      id=\"account-statuses\"\n      instance={instance}\n      emptyText=\"Nothing to see here yet.\"\n      errorText=\"Unable to load posts\"\n      fetchItems={fetchAccountStatuses}\n      useItemID\n      view={media ? 'media' : undefined}\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      timelineStart={TimelineStart}\n      refresh={[\n        excludeReplies,\n        excludeBoosts,\n        tagged,\n        media,\n        month + account?.acct,\n      ].toString()}\n      headerEnd={\n        <Menu2\n          portal\n          // setDownOverflow\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          <MenuItem\n            disabled={!allowSwitch}\n            onClick={() => {\n              (async () => {\n                try {\n                  const { masto } = api({\n                    instance: accountInstance,\n                  });\n                  const acc = await masto.v1.accounts.lookup({\n                    acct: account.acct,\n                  });\n                  const { id } = acc;\n                  location.hash = `/${accountInstance}/a/${id}`;\n                } catch (e) {\n                  console.error(e);\n                  alert('Unable to fetch account info');\n                }\n              })();\n            }}\n          >\n            <Icon icon=\"transfer\" />{' '}\n            <small class=\"menu-double-lines\">\n              Switch to account's instance (<b>{accountInstance}</b>)\n            </small>\n          </MenuItem>\n          {!sameCurrentInstance && (\n            <MenuItem\n              onClick={() => {\n                (async () => {\n                  try {\n                    const acc = await currentMasto.v1.accounts.lookup({\n                      acct: account.acct + '@' + instance,\n                    });\n                    const { id } = acc;\n                    location.hash = `/${currentInstance}/a/${id}`;\n                  } catch (e) {\n                    console.error(e);\n                    alert('Unable to fetch account info');\n                  }\n                })();\n              }}\n            >\n              <Icon icon=\"transfer\" />{' '}\n              <small class=\"menu-double-lines\">\n                Switch to my instance (<b>{currentInstance}</b>)\n              </small>\n            </MenuItem>\n          )}\n        </Menu2>\n      }\n    />\n  );\n}\n\nfunction MonthPicker(props) {\n  const {\n    class: className,\n    disabled,\n    value,\n    min,\n    max,\n    onInput = () => {},\n  } = props;\n  const [_year, _month] = value?.split('-') || [];\n  const monthFieldRef = useRef();\n  const yearFieldRef = useRef();\n\n  const checkValidity = (month, year) => {\n    const [minYear, minMonth] = min?.split('-') || [];\n    const [maxYear, maxMonth] = max?.split('-') || [];\n    if (year < minYear) return false;\n    if (year > maxYear) return false;\n    if (year === minYear && month < minMonth) return false;\n    if (year === maxYear && month > maxMonth) return false;\n    return true;\n  };\n\n  return (\n    <div class={className}>\n      <Icon icon=\"month\" size=\"l\" />\n      <select\n        ref={monthFieldRef}\n        disabled={disabled}\n        value={_month || ''}\n        onInput={(e) => {\n          const { value: month } = e.currentTarget;\n          const year = yearFieldRef.current.value;\n          if (!checkValidity(month, year))\n            return {\n              value: '',\n              validity: {\n                valid: false,\n              },\n            };\n          onInput({\n            value: month ? `${year}-${month}` : '',\n            validity: {\n              valid: true,\n            },\n          });\n        }}\n      >\n        <option value=\"\">Month</option>\n        <option disabled>-----</option>\n        {Array.from({ length: 12 }, (_, i) => (\n          <option\n            value={\n              // Month is 1-indexed\n              (i + 1).toString().padStart(2, '0')\n            }\n            key={i}\n          >\n            {new Date(0, i).toLocaleString('default', {\n              month: 'long',\n            })}\n          </option>\n        ))}\n      </select>{' '}\n      <input\n        ref={yearFieldRef}\n        type=\"number\"\n        disabled={disabled}\n        value={_year || new Date().getFullYear()}\n        min={min?.slice(0, 4) || MIN_YEAR}\n        max={max?.slice(0, 4) || new Date().getFullYear()}\n        onInput={(e) => {\n          const { value: year, validity } = e.currentTarget;\n          const month = monthFieldRef.current.value;\n          if (!validity.valid || !checkValidity(month, year))\n            return {\n              value: '',\n              validity: {\n                valid: false,\n              },\n            };\n          onInput({\n            value: year ? `${year}-${month}` : '',\n            validity: {\n              valid: true,\n            },\n          });\n        }}\n        style={{\n          width: '4.5em',\n        }}\n      />\n    </div>\n  );\n}\n\nexport default AccountStatuses;\n","import { useRef } from 'preact/hooks';\n\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Bookmarks() {\n  useTitle('Bookmarks', '/b');\n  const { masto, instance } = api();\n  const bookmarksIterator = useRef();\n  async function fetchBookmarks(firstLoad) {\n    if (firstLoad || !bookmarksIterator.current) {\n      bookmarksIterator.current = masto.v1.bookmarks.list({ limit: LIMIT });\n    }\n    return await bookmarksIterator.current.next();\n  }\n\n  return (\n    <Timeline\n      title=\"Bookmarks\"\n      id=\"bookmarks\"\n      emptyText=\"No bookmarks yet. Go bookmark something!\"\n      errorText=\"Unable to load bookmarks\"\n      instance={instance}\n      fetchItems={fetchBookmarks}\n    />\n  );\n}\n\nexport default Bookmarks;\n","import { useRef } from 'preact/hooks';\n\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Favourites() {\n  useTitle('Likes', '/f');\n  const { masto, instance } = api();\n  const favouritesIterator = useRef();\n  async function fetchFavourites(firstLoad) {\n    if (firstLoad || !favouritesIterator.current) {\n      favouritesIterator.current = masto.v1.favourites.list({ limit: LIMIT });\n    }\n    return await favouritesIterator.current.next();\n  }\n\n  return (\n    <Timeline\n      title=\"Likes\"\n      id=\"favourites\"\n      emptyText=\"No likes yet. Go like something!\"\n      errorText=\"Unable to load likes\"\n      instance={instance}\n      fetchItems={fetchFavourites}\n    />\n  );\n}\n\nexport default Favourites;\n","import { useEffect, useState } from 'preact/hooks';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport NavMenu from '../components/nav-menu';\nimport { api } from '../utils/api';\nimport { fetchFollowedTags } from '../utils/followed-tags';\nimport useTitle from '../utils/useTitle';\n\nfunction FollowedHashtags() {\n  const { masto, instance } = api();\n  useTitle(`Followed Hashtags`, `/ft`);\n  const [uiState, setUIState] = useState('default');\n\n  const [followedHashtags, setFollowedHashtags] = useState([]);\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const tags = await fetchFollowedTags();\n        setFollowedHashtags(tags);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, []);\n\n  return (\n    <div id=\"followed-hashtags-page\" class=\"deck-container\" tabIndex=\"-1\">\n      <div class=\"timeline-deck deck\">\n        <header>\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n              <Link to=\"/\" class=\"button plain\">\n                <Icon icon=\"home\" size=\"l\" />\n              </Link>\n            </div>\n            <h1>Followed Hashtags</h1>\n            <div class=\"header-side\" />\n          </div>\n        </header>\n        <main>\n          {followedHashtags.length > 0 ? (\n            <ul class=\"link-list\">\n              {followedHashtags.map((tag) => (\n                <li>\n                  <Link\n                    to={\n                      instance ? `/${instance}/t/${tag.name}` : `/t/${tag.name}`\n                    }\n                  >\n                    <Icon icon=\"hashtag\" /> <span>{tag.name}</span>\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          ) : uiState === 'loading' ? (\n            <p class=\"ui-state\">\n              <Loader abrupt />\n            </p>\n          ) : uiState === 'error' ? (\n            <p class=\"ui-state\">Unable to load followed hashtags.</p>\n          ) : (\n            <p class=\"ui-state\">No hashtags followed yet.</p>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default FollowedHashtags;\n","import { useEffect, useRef } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { filteredItems } from '../utils/filters';\nimport states from '../utils/states';\nimport { getStatus, saveStatus } from '../utils/states';\nimport {\n  assignFollowedTags,\n  clearFollowedTagsState,\n  dedupeBoosts,\n} from '../utils/timeline-utils';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Following({ title, path, id, ...props }) {\n  useTitle(title || 'Following', path || '/following');\n  const { masto, streaming, instance } = api();\n  const snapStates = useSnapshot(states);\n  const homeIterator = useRef();\n  const latestItem = useRef();\n\n  console.debug('RENDER Following', title, id);\n\n  async function fetchHome(firstLoad) {\n    if (firstLoad || !homeIterator.current) {\n      homeIterator.current = masto.v1.timelines.home.list({ limit: LIMIT });\n    }\n    const results = await homeIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      let latestItemChanged = false;\n      if (firstLoad) {\n        if (value[0].id !== latestItem.current) {\n          latestItemChanged = true;\n        }\n        latestItem.current = value[0].id;\n        console.log('First load', latestItem.current);\n      }\n\n      // value = filteredItems(value, 'home');\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n      value = dedupeBoosts(value, instance);\n      if (firstLoad && latestItemChanged) clearFollowedTagsState();\n      assignFollowedTags(value, instance);\n\n      // ENFORCE sort by datetime (Latest first)\n      value.sort((a, b) => {\n        const aDate = new Date(a.createdAt);\n        const bDate = new Date(b.createdAt);\n        return bDate - aDate;\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines.home\n        .list({\n          limit: 5,\n          since_id: latestItem.current,\n        })\n        .next();\n      let { value } = results;\n      console.log('checkForUpdates', latestItem.current, value);\n      if (value?.length) {\n        latestItem.current = value[0].id;\n        value = dedupeBoosts(value, instance);\n        value = filteredItems(value, 'home');\n        if (value.some((item) => !item.reblog)) {\n          return true;\n        }\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  useEffect(() => {\n    let sub;\n    (async () => {\n      if (streaming) {\n        sub = streaming.user.subscribe();\n        console.log('🎏 Streaming user', sub);\n        for await (const entry of sub) {\n          if (!sub) break;\n          if (entry.event === 'status.update') {\n            const status = entry.payload;\n            console.log(`🔄 Status ${status.id} updated`);\n            saveStatus(status, instance);\n          } else if (entry.event === 'delete') {\n            const statusID = entry.payload;\n            console.log(`❌ Status ${statusID} deleted`);\n            // delete states.statuses[statusID];\n            const s = getStatus(statusID, instance);\n            if (s) s._deleted = true;\n          }\n        }\n        console.log('💥 Streaming user loop STOPPED');\n      }\n    })();\n    return () => {\n      sub?.unsubscribe?.();\n      sub = null;\n    };\n  }, [streaming]);\n\n  return (\n    <Timeline\n      title={title || 'Following'}\n      id={id || 'following'}\n      emptyText=\"Nothing to see here.\"\n      errorText=\"Unable to load posts.\"\n      instance={instance}\n      fetchItems={fetchHome}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      {...props}\n      // allowFilters\n      filterContext=\"home\"\n      showFollowedTags\n    />\n  );\n}\n\nexport default Following;\n","import {\n  FocusableItem,\n  MenuDivider,\n  MenuGroup,\n  MenuHeader,\n  MenuItem,\n} from '@szhsin/react-menu';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useNavigate, useParams, useSearchParams } from 'react-router-dom';\n\nimport Icon from '../components/icon';\nimport Menu2 from '../components/menu2';\nimport MenuConfirm from '../components/menu-confirm';\nimport { SHORTCUTS_LIMIT } from '../components/shortcuts-settings';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { filteredItems } from '../utils/filters';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\n// Limit is 4 per \"mode\"\n// https://github.com/mastodon/mastodon/issues/15194\n// Hard-coded https://github.com/mastodon/mastodon/blob/19614ba2477f3d12468f5ec251ce1cc5f8c6210c/app/models/tag_feed.rb#L4\nconst TAGS_LIMIT_PER_MODE = 4;\nconst TOTAL_TAGS_LIMIT = TAGS_LIMIT_PER_MODE + 1;\n\nfunction Hashtags({ media: mediaView, columnMode, ...props }) {\n  // const navigate = useNavigate();\n  let { hashtag, ...params } = columnMode ? {} : useParams();\n  if (props.hashtag) hashtag = props.hashtag;\n  let hashtags = hashtag.trim().split(/[\\s+]+/);\n  hashtags.sort();\n  hashtag = hashtags[0];\n  const [searchParams, setSearchParams] = useSearchParams();\n  const media = mediaView || !!searchParams.get('media');\n  const linkParams = media ? '?media=1' : '';\n\n  const { masto, instance, authenticated } = api({\n    instance: props?.instance || params.instance,\n  });\n  const {\n    masto: currentMasto,\n    instance: currentInstance,\n    authenticated: currentAuthenticated,\n  } = api();\n  const hashtagTitle = hashtags.map((t) => `#${t}`).join(' ');\n  const hashtagPostTitle = media ? ` (Media only)` : '';\n  const title = instance\n    ? `${hashtagTitle}${hashtagPostTitle} on ${instance}`\n    : `${hashtagTitle}${hashtagPostTitle}`;\n  useTitle(title, `/:instance?/t/:hashtag`);\n  const latestItem = useRef();\n\n  // const hashtagsIterator = useRef();\n  const maxID = useRef(undefined);\n  async function fetchHashtags(firstLoad) {\n    // if (firstLoad || !hashtagsIterator.current) {\n    //   hashtagsIterator.current = masto.v1.timelines.tag.$select(hashtag).list({\n    //     limit: LIMIT,\n    //     any: hashtags.slice(1),\n    //   });\n    // }\n    // const results = await hashtagsIterator.current.next();\n\n    // NOTE: Temporary fix for listHashtag not persisting `any` in subsequent calls.\n    const results = await masto.v1.timelines.tag\n      .$select(hashtag)\n      .list({\n        limit: LIMIT,\n        any: hashtags.slice(1),\n        maxId: firstLoad ? undefined : maxID.current,\n        onlyMedia: media,\n      })\n      .next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      // value = filteredItems(value, 'public');\n      value.forEach((item) => {\n        saveStatus(item, instance, {\n          skipThreading: media, // If media view, no need to form threads\n        });\n      });\n\n      maxID.current = value[value.length - 1].id;\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines.tag\n        .$select(hashtag)\n        .list({\n          limit: 1,\n          any: hashtags.slice(1),\n          since_id: latestItem.current,\n          onlyMedia: media,\n        })\n        .next();\n      let { value } = results;\n      value = filteredItems(value, 'public');\n      if (value?.length) {\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  const [followUIState, setFollowUIState] = useState('default');\n  const [info, setInfo] = useState();\n  // Get hashtag info\n  useEffect(() => {\n    (async () => {\n      try {\n        const info = await masto.v1.tags.$select(hashtag).fetch();\n        console.log(info);\n        setInfo(info);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [hashtag]);\n\n  const reachLimit = hashtags.length >= TOTAL_TAGS_LIMIT;\n\n  return (\n    <Timeline\n      key={instance + hashtagTitle}\n      title={title}\n      titleComponent={\n        !!instance && (\n          <h1 class=\"header-double-lines\">\n            <b>{hashtagTitle}</b>\n            <div>{instance}</div>\n          </h1>\n        )\n      }\n      id=\"hashtag\"\n      instance={instance}\n      emptyText=\"No one has posted anything with this tag yet.\"\n      errorText=\"Unable to load posts with this tag\"\n      fetchItems={fetchHashtags}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      view={media ? 'media' : undefined}\n      refresh={media}\n      // allowFilters\n      filterContext=\"public\"\n      headerEnd={\n        <Menu2\n          portal\n          setDownOverflow\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          {!!info && hashtags.length === 1 && (\n            <>\n              <MenuConfirm\n                subMenu\n                confirm={info.following}\n                confirmLabel={`Unfollow #${hashtag}?`}\n                disabled={followUIState === 'loading' || !authenticated}\n                onClick={() => {\n                  setFollowUIState('loading');\n                  if (info.following) {\n                    // const yes = confirm(`Unfollow #${hashtag}?`);\n                    // if (!yes) {\n                    //   setFollowUIState('default');\n                    //   return;\n                    // }\n                    masto.v1.tags\n                      .$select(hashtag)\n                      .unfollow()\n                      .then(() => {\n                        setInfo({ ...info, following: false });\n                        showToast(`Unfollowed #${hashtag}`);\n                      })\n                      .catch((e) => {\n                        alert(e);\n                        console.error(e);\n                      })\n                      .finally(() => {\n                        setFollowUIState('default');\n                      });\n                  } else {\n                    masto.v1.tags\n                      .$select(hashtag)\n                      .follow()\n                      .then(() => {\n                        setInfo({ ...info, following: true });\n                        showToast(`Followed #${hashtag}`);\n                      })\n                      .catch((e) => {\n                        alert(e);\n                        console.error(e);\n                      })\n                      .finally(() => {\n                        setFollowUIState('default');\n                      });\n                  }\n                }}\n              >\n                {info.following ? (\n                  <>\n                    <Icon icon=\"check-circle\" /> <span>Following…</span>\n                  </>\n                ) : (\n                  <>\n                    <Icon icon=\"plus\" /> <span>Follow</span>\n                  </>\n                )}\n              </MenuConfirm>\n              <MenuDivider />\n            </>\n          )}\n          <MenuHeader className=\"plain\">Filters</MenuHeader>\n          <MenuItem\n            type=\"checkbox\"\n            checked={!!media}\n            onClick={() => {\n              if (media) {\n                searchParams.delete('media');\n              } else {\n                searchParams.set('media', '1');\n              }\n              setSearchParams(searchParams);\n            }}\n          >\n            <Icon icon=\"check-circle\" />{' '}\n            <span class=\"menu-grow\">Media only</span>\n          </MenuItem>\n          <MenuDivider />\n          <FocusableItem className=\"menu-field\" disabled={reachLimit}>\n            {({ ref }) => (\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  const newHashtag = e.target[0].value?.trim?.();\n                  // Use includes but need to be case insensitive\n                  if (\n                    newHashtag &&\n                    !hashtags.some(\n                      (t) => t.toLowerCase() === newHashtag.toLowerCase(),\n                    )\n                  ) {\n                    hashtags.push(newHashtag);\n                    hashtags.sort();\n                    // navigate(\n                    //   instance\n                    //     ? `/${instance}/t/${hashtags.join('+')}`\n                    //     : `/t/${hashtags.join('+')}`,\n                    // );\n                    location.hash = instance\n                      ? `/${instance}/t/${hashtags.join('+')}`\n                      : `/t/${hashtags.join('+')}${linkParams}`;\n                  }\n                }}\n              >\n                <Icon icon=\"hashtag\" />\n                <input\n                  ref={ref}\n                  type=\"text\"\n                  placeholder={\n                    reachLimit ? `Max ${TOTAL_TAGS_LIMIT} tags` : 'Add hashtag'\n                  }\n                  required\n                  autocorrect=\"off\"\n                  autocapitalize=\"off\"\n                  spellcheck={false}\n                  // no spaces, no hashtags\n                  pattern=\"[^#][^\\s#]+[^#]\"\n                  disabled={reachLimit}\n                />\n              </form>\n            )}\n          </FocusableItem>\n          <MenuGroup takeOverflow>\n            {hashtags.map((t, i) => (\n              <MenuItem\n                key={t}\n                disabled={hashtags.length === 1}\n                onClick={(e) => {\n                  hashtags.splice(i, 1);\n                  hashtags.sort();\n                  // navigate(\n                  //   instance\n                  //     ? `/${instance}/t/${hashtags.join('+')}`\n                  //     : `/t/${hashtags.join('+')}`,\n                  // );\n                  location.hash = instance\n                    ? `/${instance}/t/${hashtags.join('+')}${linkParams}`\n                    : `/t/${hashtags.join('+')}${linkParams}`;\n                }}\n              >\n                <Icon icon=\"x\" alt=\"Remove hashtag\" class=\"danger-icon\" />\n                <span>\n                  <span class=\"more-insignificant\">#</span>\n                  {t}\n                </span>\n              </MenuItem>\n            ))}\n          </MenuGroup>\n          <MenuDivider />\n          <MenuItem\n            disabled={!currentAuthenticated}\n            onClick={() => {\n              if (states.shortcuts.length >= SHORTCUTS_LIMIT) {\n                alert(\n                  `Max ${SHORTCUTS_LIMIT} shortcuts reached. Unable to add shortcut.`,\n                );\n                return;\n              }\n              const shortcut = {\n                type: 'hashtag',\n                hashtag: hashtags.join(' '),\n                instance,\n                media: media ? 'on' : undefined,\n              };\n              // Check if already exists\n              const exists = states.shortcuts.some(\n                (s) =>\n                  s.type === shortcut.type &&\n                  s.hashtag\n                    .split(/[\\s+]+/)\n                    .sort()\n                    .join(' ') ===\n                    shortcut.hashtag\n                      .split(/[\\s+]+/)\n                      .sort()\n                      .join(' ') &&\n                  (s.instance ? s.instance === shortcut.instance : true) &&\n                  (s.media ? !!s.media === !!shortcut.media : true),\n              );\n              if (exists) {\n                alert('This shortcut already exists');\n              } else {\n                states.shortcuts.push(shortcut);\n                showToast(`Hashtag shortcut added`);\n              }\n            }}\n          >\n            <Icon icon=\"shortcut\" /> <span>Add to Shorcuts</span>\n          </MenuItem>\n          <MenuItem\n            onClick={() => {\n              let newInstance = prompt(\n                'Enter a new instance e.g. \"mastodon.social\"',\n              );\n              if (!/\\./.test(newInstance)) {\n                if (newInstance) alert('Invalid instance');\n                return;\n              }\n              if (newInstance) {\n                newInstance = newInstance.toLowerCase().trim();\n                // navigate(`/${newInstance}/t/${hashtags.join('+')}`);\n                location.hash = `/${newInstance}/t/${hashtags.join(\n                  '+',\n                )}${linkParams}`;\n              }\n            }}\n          >\n            <Icon icon=\"bus\" /> <span>Go to another instance…</span>\n          </MenuItem>\n          {currentInstance !== instance && (\n            <MenuItem\n              onClick={() => {\n                location.hash = `/${currentInstance}/t/${hashtags.join(\n                  '+',\n                )}${linkParams}`;\n              }}\n            >\n              <Icon icon=\"bus\" />{' '}\n              <small class=\"menu-double-lines\">\n                Go to my instance (<b>{currentInstance}</b>)\n              </small>\n            </MenuItem>\n          )}\n        </Menu2>\n      }\n    />\n  );\n}\n\nexport default Hashtags;\n","import './lists.css';\n\nimport { Menu, MenuItem } from '@szhsin/react-menu';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { InView } from 'react-intersection-observer';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport AccountBlock from '../components/account-block';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport ListAddEdit from '../components/list-add-edit';\nimport Menu2 from '../components/menu2';\nimport MenuConfirm from '../components/menu-confirm';\nimport Modal from '../components/modal';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { filteredItems } from '../utils/filters';\nimport states, { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction List(props) {\n  const snapStates = useSnapshot(states);\n  const { masto, instance } = api();\n  const id = props?.id || useParams()?.id;\n  // const navigate = useNavigate();\n  const latestItem = useRef();\n  // const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n\n  const listIterator = useRef();\n  async function fetchList(firstLoad) {\n    if (firstLoad || !listIterator.current) {\n      listIterator.current = masto.v1.timelines.list.$select(id).list({\n        limit: LIMIT,\n      });\n    }\n    const results = await listIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      // value = filteredItems(value, 'home');\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines.list.$select(id).list({\n        limit: 1,\n        since_id: latestItem.current,\n      });\n      let { value } = results;\n      value = filteredItems(value, 'home');\n      if (value?.length) {\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  const [list, setList] = useState({ title: 'List' });\n  // const [title, setTitle] = useState(`List`);\n  useTitle(list.title, `/l/:id`);\n  useEffect(() => {\n    (async () => {\n      try {\n        const list = await masto.v1.lists.$select(id).fetch();\n        setList(list);\n        // setTitle(list.title);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [id]);\n\n  const [showListAddEditModal, setShowListAddEditModal] = useState(false);\n  const [showManageMembersModal, setShowManageMembersModal] = useState(false);\n\n  return (\n    <>\n      <Timeline\n        key={id}\n        title={list.title}\n        id=\"list\"\n        emptyText=\"Nothing yet.\"\n        errorText=\"Unable to load posts.\"\n        instance={instance}\n        fetchItems={fetchList}\n        checkForUpdates={checkForUpdates}\n        useItemID\n        boostsCarousel={snapStates.settings.boostsCarousel}\n        // allowFilters\n        filterContext=\"home\"\n        // refresh={reloadCount}\n        headerStart={\n          <Link to=\"/l\" class=\"button plain\">\n            <Icon icon=\"list\" size=\"l\" />\n          </Link>\n        }\n        headerEnd={\n          <Menu2\n            portal\n            setDownOverflow\n            overflow=\"auto\"\n            viewScroll=\"close\"\n            position=\"anchor\"\n            menuButton={\n              <button type=\"button\" class=\"plain\">\n                <Icon icon=\"more\" size=\"l\" />\n              </button>\n            }\n          >\n            <MenuItem\n              onClick={() =>\n                setShowListAddEditModal({\n                  list,\n                })\n              }\n            >\n              <Icon icon=\"pencil\" size=\"l\" />\n              <span>Edit</span>\n            </MenuItem>\n            <MenuItem onClick={() => setShowManageMembersModal(true)}>\n              <Icon icon=\"group\" size=\"l\" />\n              <span>Manage members</span>\n            </MenuItem>\n          </Menu2>\n        }\n      />\n      {showListAddEditModal && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowListAddEditModal(false);\n            }\n          }}\n        >\n          <ListAddEdit\n            list={showListAddEditModal?.list}\n            onClose={(result) => {\n              if (result.state === 'success' && result.list) {\n                setList(result.list);\n                // reload();\n              } else if (result.state === 'deleted') {\n                // navigate('/l');\n                location.hash = '/l';\n              }\n              setShowListAddEditModal(false);\n            }}\n          />\n        </Modal>\n      )}\n      {showManageMembersModal && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowManageMembersModal(false);\n            }\n          }}\n        >\n          <ListManageMembers\n            listID={id}\n            onClose={() => setShowManageMembersModal(false)}\n          />\n        </Modal>\n      )}\n    </>\n  );\n}\n\nconst MEMBERS_LIMIT = 40;\nfunction ListManageMembers({ listID, onClose }) {\n  // Show list of members with [Remove] button\n  // API only returns 40 members at a time, so this need to be paginated with infinite scroll\n  // Show [Add] button after removing a member\n  const { masto, instance } = api();\n  const [members, setMembers] = useState([]);\n  const [uiState, setUIState] = useState('default');\n  const [showMore, setShowMore] = useState(false);\n\n  const membersIterator = useRef();\n\n  async function fetchMembers(firstLoad) {\n    setShowMore(false);\n    setUIState('loading');\n    (async () => {\n      try {\n        if (firstLoad || !membersIterator.current) {\n          membersIterator.current = masto.v1.lists\n            .$select(listID)\n            .accounts.list({\n              limit: MEMBERS_LIMIT,\n            });\n        }\n        const results = await membersIterator.current.next();\n        let { done, value } = results;\n        if (value?.length) {\n          if (firstLoad) {\n            setMembers(value);\n          } else {\n            setMembers(members.concat(value));\n          }\n          setShowMore(!done);\n        } else {\n          setShowMore(false);\n        }\n        setUIState('default');\n      } catch (e) {\n        setUIState('error');\n      }\n    })();\n  }\n\n  useEffect(() => {\n    fetchMembers(true);\n  }, []);\n\n  return (\n    <div class=\"sheet\" id=\"list-manage-members-container\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Manage members</h2>\n      </header>\n      <main>\n        <ul>\n          {members.map((member) => (\n            <li key={member.id}>\n              <AccountBlock account={member} instance={instance} />\n              <RemoveAddButton account={member} listID={listID} />\n            </li>\n          ))}\n          {showMore && uiState === 'default' && (\n            <InView as=\"li\" onChange={(inView) => inView && fetchMembers()}>\n              <button type=\"button\" class=\"light block\" onClick={fetchMembers}>\n                Show more&hellip;\n              </button>\n            </InView>\n          )}\n        </ul>\n      </main>\n    </div>\n  );\n}\n\nfunction RemoveAddButton({ account, listID }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [removed, setRemoved] = useState(false);\n\n  return (\n    <MenuConfirm\n      confirm={!removed}\n      confirmLabel={<span>Remove @{account.username} from list?</span>}\n      align=\"end\"\n      menuItemClassName=\"danger\"\n      onClick={() => {\n        if (removed) {\n          setUIState('loading');\n          (async () => {\n            try {\n              await masto.v1.lists.$select(listID).accounts.create({\n                accountIds: [account.id],\n              });\n              setUIState('default');\n              setRemoved(false);\n            } catch (e) {\n              setUIState('error');\n            }\n          })();\n        } else {\n          // const yes = confirm(`Remove ${account.username} from this list?`);\n          // if (!yes) return;\n          setUIState('loading');\n\n          (async () => {\n            try {\n              await masto.v1.lists.$select(listID).accounts.remove({\n                accountIds: [account.id],\n              });\n              setUIState('default');\n              setRemoved(true);\n            } catch (e) {\n              setUIState('error');\n            }\n          })();\n        }\n      }}\n    >\n      <button\n        type=\"button\"\n        class={`light ${removed ? '' : 'danger'}`}\n        disabled={uiState === 'loading'}\n      >\n        {removed ? 'Add' : 'Remove…'}\n      </button>\n    </MenuConfirm>\n  );\n}\n\nexport default List;\n","import { useMemo, useRef, useState } from 'preact/hooks';\nimport { useSearchParams } from 'react-router-dom';\n\nimport Link from '../components/link';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\nconst emptySearchParams = new URLSearchParams();\n\nfunction Mentions({ columnMode, ...props }) {\n  const { masto, instance } = api();\n  const [searchParams] = columnMode ? [emptySearchParams] : useSearchParams();\n  const [stateType, setStateType] = useState(null);\n  const type = props?.type || searchParams.get('type') || stateType;\n  useTitle(`Mentions${type === 'private' ? ' (Private)' : ''}`, '/mentions');\n\n  const mentionsIterator = useRef();\n  const latestItem = useRef();\n\n  async function fetchMentions(firstLoad) {\n    if (firstLoad || !mentionsIterator.current) {\n      mentionsIterator.current = masto.v1.notifications.list({\n        limit: LIMIT,\n        types: ['mention'],\n      });\n    }\n    const results = await mentionsIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n        console.log('First load', latestItem.current);\n      }\n\n      value.forEach(({ status: item }) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value: value?.map((item) => item.status),\n    };\n  }\n\n  const conversationsIterator = useRef();\n  const latestConversationItem = useRef();\n  async function fetchConversations(firstLoad) {\n    if (firstLoad || !conversationsIterator.current) {\n      conversationsIterator.current = masto.v1.conversations.list({\n        limit: LIMIT,\n      });\n    }\n    const results = await conversationsIterator.current.next();\n    let { value } = results;\n    value = value?.filter((item) => item.lastStatus);\n    if (value?.length) {\n      if (firstLoad) {\n        latestConversationItem.current = value[0].lastStatus.id;\n        console.log('First load', latestConversationItem.current);\n      }\n\n      value.forEach(({ lastStatus: item }) => {\n        saveStatus(item, instance);\n      });\n    }\n    console.log('results', results);\n    return {\n      ...results,\n      value: value?.map((item) => item.lastStatus),\n    };\n  }\n\n  function fetchItems(...args) {\n    if (type === 'private') {\n      return fetchConversations(...args);\n    }\n    return fetchMentions(...args);\n  }\n\n  async function checkForUpdates() {\n    if (type === 'private') {\n      try {\n        const results = await masto.v1.conversations\n          .list({\n            limit: 1,\n            since_id: latestConversationItem.current,\n          })\n          .next();\n        let { value } = results;\n        console.log(\n          'checkForUpdates PRIVATE',\n          latestConversationItem.current,\n          value,\n        );\n        if (value?.length) {\n          latestConversationItem.current = value[0].lastStatus.id;\n          return true;\n        }\n        return false;\n      } catch (e) {\n        return false;\n      }\n    } else {\n      try {\n        const results = await masto.v1.notifications\n          .list({\n            limit: 1,\n            types: ['mention'],\n            since_id: latestItem.current,\n          })\n          .next();\n        let { value } = results;\n        console.log('checkForUpdates ALL', latestItem.current, value);\n        if (value?.length) {\n          latestItem.current = value[0].id;\n          return true;\n        }\n        return false;\n      } catch (e) {\n        return false;\n      }\n    }\n  }\n\n  const TimelineStart = useMemo(() => {\n    return (\n      <div class=\"filter-bar centered\">\n        <Link\n          to=\"/mentions\"\n          class={!type ? 'is-active' : ''}\n          onClick={(e) => {\n            if (columnMode) {\n              e.preventDefault();\n              setStateType(null);\n            }\n          }}\n        >\n          All\n        </Link>\n        <Link\n          to=\"/mentions?type=private\"\n          class={type === 'private' ? 'is-active' : ''}\n          onClick={(e) => {\n            if (columnMode) {\n              e.preventDefault();\n              setStateType('private');\n            }\n          }}\n        >\n          Private\n        </Link>\n      </div>\n    );\n  }, [type]);\n\n  return (\n    <Timeline\n      title=\"Mentions\"\n      id=\"mentions\"\n      emptyText=\"No one mentioned you :(\"\n      errorText=\"Unable to load mentions.\"\n      instance={instance}\n      fetchItems={fetchItems}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      timelineStart={TimelineStart}\n      refresh={type}\n    />\n  );\n}\n\nexport default Mentions;\n","// This is like very lame \"type-checking\" lol\nconst notificationTypeKeys = {\n  mention: ['account', 'status'],\n  status: ['account', 'status'],\n  reblog: ['account', 'status'],\n  follow: ['account'],\n  follow_request: ['account'],\n  favourite: ['account', 'status'],\n  poll: ['status'],\n  update: ['status'],\n};\nfunction fixNotifications(notifications) {\n  return notifications.filter((notification) => {\n    const { type, id, createdAt } = notification;\n    if (!type) {\n      console.warn('Notification missing type', notification);\n      return false;\n    }\n    if (!id || !createdAt) {\n      console.warn('Notification missing id or createdAt', notification);\n      // Continue processing this despite missing id or createdAt\n    }\n    const keys = notificationTypeKeys[type];\n    if (keys?.length) {\n      return keys.every((key) => !!notification[key]);\n    }\n    return true; // skip other types\n  });\n}\n\nfunction groupNotifications(notifications) {\n  // Filter out invalid notifications\n  notifications = fixNotifications(notifications);\n\n  // Create new flat list of notifications\n  // Combine sibling notifications based on type and status id\n  // Concat all notification.account into an array of _accounts\n  const notificationsMap = {};\n  const cleanNotifications = [];\n  for (let i = 0, j = 0; i < notifications.length; i++) {\n    const notification = notifications[i];\n    const { id, status, account, type, createdAt } = notification;\n    const date = createdAt ? new Date(createdAt).toLocaleDateString() : '';\n    let virtualType = type;\n    if (type === 'favourite' || type === 'reblog') {\n      virtualType = 'favourite+reblog';\n    }\n    const key = `${status?.id}-${virtualType}-${date}`;\n    const mappedNotification = notificationsMap[key];\n    if (virtualType === 'follow_request') {\n      cleanNotifications[j++] = notification;\n    } else if (mappedNotification?.account) {\n      const mappedAccount = mappedNotification._accounts.find(\n        (a) => a.id === account.id,\n      );\n      if (mappedAccount) {\n        mappedAccount._types.push(type);\n        mappedAccount._types.sort().reverse();\n        mappedNotification.id += `-${id}`;\n      } else {\n        account._types = [type];\n        mappedNotification._accounts.push(account);\n        mappedNotification.id += `-${id}`;\n      }\n    } else {\n      account._types = [type];\n      let n = (notificationsMap[key] = {\n        ...notification,\n        type: virtualType,\n        _accounts: [account],\n      });\n      cleanNotifications[j++] = n;\n    }\n  }\n\n  // 2nd pass to group \"favourite+reblog\"-type notifications by account if _accounts.length <= 1\n  // This means one acount has favourited and reblogged the multiple statuses\n  // The grouped notification\n  // - type: \"favourite+reblog+account\"\n  // - _statuses: [status, status, ...]\n  const notificationsMap2 = {};\n  const cleanNotifications2 = [];\n  for (let i = 0, j = 0; i < cleanNotifications.length; i++) {\n    const notification = cleanNotifications[i];\n    const { id, account, _accounts, type, createdAt } = notification;\n    const date = createdAt ? new Date(createdAt).toLocaleDateString() : '';\n    if (type === 'favourite+reblog' && account && _accounts.length === 1) {\n      const key = `${account?.id}-${type}-${date}`;\n      const mappedNotification = notificationsMap2[key];\n      if (mappedNotification) {\n        mappedNotification._statuses.push(notification.status);\n        mappedNotification.id += `-${id}`;\n      } else {\n        let n = (notificationsMap2[key] = {\n          ...notification,\n          type,\n          _statuses: [notification.status],\n        });\n        cleanNotifications2[j++] = n;\n      }\n    } else {\n      cleanNotifications2[j++] = notification;\n    }\n  }\n\n  console.log({ notifications, cleanNotifications, cleanNotifications2 });\n\n  // return cleanNotifications;\n  return cleanNotifications2;\n}\n\nexport default groupNotifications;\n","import './notifications.css';\n\nimport { Fragment } from 'preact';\nimport { memo } from 'preact/compat';\nimport { useCallback, useEffect, useRef, useState } from 'preact/hooks';\nimport { InView } from 'react-intersection-observer';\nimport { useSearchParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\nimport { subscribeKey } from 'valtio/utils';\n\nimport AccountBlock from '../components/account-block';\nimport FollowRequestButtons from '../components/follow-request-buttons';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport NavMenu from '../components/nav-menu';\nimport Notification from '../components/notification';\nimport { api } from '../utils/api';\nimport enhanceContent from '../utils/enhance-content';\nimport groupNotifications from '../utils/group-notifications';\nimport handleContentLinks from '../utils/handle-content-links';\nimport niceDateTime from '../utils/nice-date-time';\nimport { getRegistration } from '../utils/push-notifications';\nimport shortenNumber from '../utils/shorten-number';\nimport states, { saveStatus } from '../utils/states';\nimport { getCurrentInstance } from '../utils/store-utils';\nimport usePageVisibility from '../utils/usePageVisibility';\nimport useScroll from '../utils/useScroll';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 30; // 30 is the maximum limit :(\nconst emptySearchParams = new URLSearchParams();\n\nfunction Notifications({ columnMode }) {\n  useTitle('Notifications', '/notifications');\n  const { masto, instance } = api();\n  const snapStates = useSnapshot(states);\n  const [uiState, setUIState] = useState('default');\n  const [searchParams] = columnMode ? [emptySearchParams] : useSearchParams();\n  const notificationID = searchParams.get('id');\n  const notificationAccessToken = searchParams.get('access_token');\n  const [showMore, setShowMore] = useState(false);\n  const [onlyMentions, setOnlyMentions] = useState(false);\n  const scrollableRef = useRef();\n  const { nearReachEnd, scrollDirection, reachStart, nearReachStart } =\n    useScroll({\n      scrollableRef,\n    });\n  const hiddenUI = scrollDirection === 'end' && !nearReachStart;\n  const [followRequests, setFollowRequests] = useState([]);\n  const [announcements, setAnnouncements] = useState([]);\n\n  console.debug('RENDER Notifications');\n\n  const notificationsIterator = useRef();\n  async function fetchNotifications(firstLoad) {\n    if (firstLoad || !notificationsIterator.current) {\n      // Reset iterator\n      notificationsIterator.current = masto.v1.notifications.list({\n        limit: LIMIT,\n        excludeTypes: ['follow_request'],\n      });\n    }\n    const allNotifications = await notificationsIterator.current.next();\n    const notifications = allNotifications.value;\n\n    if (notifications?.length) {\n      notifications.forEach((notification) => {\n        saveStatus(notification.status, instance, {\n          skipThreading: true,\n        });\n      });\n\n      const groupedNotifications = groupNotifications(notifications);\n\n      if (firstLoad) {\n        states.notificationsLast = notifications[0];\n        states.notifications = groupedNotifications;\n\n        // Update last read marker\n        masto.v1.markers\n          .create({\n            notifications: {\n              lastReadId: notifications[0].id,\n            },\n          })\n          .catch(() => {});\n      } else {\n        states.notifications.push(...groupedNotifications);\n      }\n    }\n\n    states.notificationsShowNew = false;\n    states.notificationsLastFetchTime = Date.now();\n    return allNotifications;\n  }\n\n  async function fetchFollowRequests() {\n    // Note: no pagination here yet because this better be on a separate page. Should be rare use-case???\n    try {\n      return await masto.v1.followRequests.list({\n        limit: 80,\n      });\n    } catch (e) {\n      // Silently fail\n      return [];\n    }\n  }\n\n  const loadFollowRequests = () => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const requests = await fetchFollowRequests();\n        setFollowRequests(requests);\n        setUIState('default');\n      } catch (e) {\n        setUIState('error');\n      }\n    })();\n  };\n\n  async function fetchAnnouncements() {\n    try {\n      return await masto.v1.announcements.list();\n    } catch (e) {\n      // Silently fail\n      return [];\n    }\n  }\n\n  const loadNotifications = (firstLoad) => {\n    setShowNew(false);\n    setUIState('loading');\n    (async () => {\n      try {\n        const fetchNotificationsPromise = fetchNotifications(firstLoad);\n\n        if (firstLoad) {\n          fetchAnnouncements()\n            .then((announcements) => {\n              announcements.sort((a, b) => {\n                // Sort by updatedAt first, then createdAt\n                const aDate = new Date(a.updatedAt || a.createdAt);\n                const bDate = new Date(b.updatedAt || b.createdAt);\n                return bDate - aDate;\n              });\n              setAnnouncements(announcements);\n            })\n            .catch(() => {});\n\n          fetchFollowRequests()\n            .then((requests) => {\n              setFollowRequests(requests);\n            })\n            .catch(() => {});\n        }\n\n        const { done } = await fetchNotificationsPromise;\n        setShowMore(!done);\n\n        setUIState('default');\n      } catch (e) {\n        setUIState('error');\n      }\n    })();\n  };\n\n  useEffect(() => {\n    loadNotifications(true);\n  }, []);\n  useEffect(() => {\n    if (reachStart) {\n      loadNotifications(true);\n    }\n  }, [reachStart]);\n\n  // useEffect(() => {\n  //   if (nearReachEnd && showMore) {\n  //     loadNotifications();\n  //   }\n  // }, [nearReachEnd, showMore]);\n\n  const [showNew, setShowNew] = useState(false);\n\n  const loadUpdates = useCallback(\n    ({ disableIdleCheck = false } = {}) => {\n      if (uiState === 'loading') {\n        return;\n      }\n      console.log('✨ Load updates', {\n        autoRefresh: snapStates.settings.autoRefresh,\n        scrollTop: scrollableRef.current?.scrollTop,\n        inBackground: inBackground(),\n        disableIdleCheck,\n      });\n      if (\n        snapStates.settings.autoRefresh &&\n        scrollableRef.current?.scrollTop < 16 &&\n        (disableIdleCheck || window.__IDLE__) &&\n        !inBackground()\n      ) {\n        loadNotifications(true);\n      }\n    },\n    [snapStates.notificationsShowNew, snapStates.settings.autoRefresh, uiState],\n  );\n  // useEffect(loadUpdates, [snapStates.notificationsShowNew]);\n\n  const lastHiddenTime = useRef();\n  usePageVisibility((visible) => {\n    let unsub;\n    if (visible) {\n      const timeDiff = Date.now() - lastHiddenTime.current;\n      if (!lastHiddenTime.current || timeDiff > 1000 * 3) {\n        // 3 seconds\n        loadUpdates({\n          disableIdleCheck: true,\n        });\n      } else {\n        lastHiddenTime.current = Date.now();\n      }\n      unsub = subscribeKey(states, 'notificationsShowNew', (v) => {\n        if (v) {\n          loadUpdates();\n        }\n        setShowNew(v);\n      });\n    }\n    return () => {\n      unsub?.();\n    };\n  });\n\n  const todayDate = new Date();\n  const yesterdayDate = new Date(todayDate - 24 * 60 * 60 * 1000);\n  let currentDay = new Date();\n  const showTodayEmpty = !snapStates.notifications.some(\n    (notification) =>\n      new Date(notification.createdAt).toDateString() ===\n      todayDate.toDateString(),\n  );\n\n  const announcementsListRef = useRef();\n\n  useEffect(() => {\n    if (notificationID) {\n      states.routeNotification = {\n        id: notificationID,\n        accessToken: atob(notificationAccessToken),\n      };\n    }\n  }, [notificationID, notificationAccessToken]);\n\n  // useEffect(() => {\n  //   if (uiState === 'default') {\n  //     (async () => {\n  //       try {\n  //         const registration = await getRegistration();\n  //         if (registration?.getNotifications) {\n  //           const notifications = await registration.getNotifications();\n  //           console.log('🔔 Push notifications', notifications);\n  //           // Close all notifications?\n  //           // notifications.forEach((notification) => {\n  //           //   notification.close();\n  //           // });\n  //         }\n  //       } catch (e) {}\n  //     })();\n  //   }\n  // }, [uiState]);\n\n  return (\n    <div\n      id=\"notifications-page\"\n      class=\"deck-container\"\n      ref={scrollableRef}\n      tabIndex=\"-1\"\n    >\n      <div class={`timeline-deck deck ${onlyMentions ? 'only-mentions' : ''}`}>\n        <header\n          hidden={hiddenUI}\n          onClick={(e) => {\n            if (!e.target.closest('a, button')) {\n              scrollableRef.current?.scrollTo({ top: 0, behavior: 'smooth' });\n            }\n          }}\n          class={uiState === 'loading' ? 'loading' : ''}\n        >\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n              <Link to=\"/\" class=\"button plain\">\n                <Icon icon=\"home\" size=\"l\" alt=\"Home\" />\n              </Link>\n            </div>\n            <h1>Notifications</h1>\n            <div class=\"header-side\">\n              {/* <Loader hidden={uiState !== 'loading'} /> */}\n            </div>\n          </div>\n          {showNew && uiState !== 'loading' && (\n            <button\n              class=\"updates-button shiny-pill\"\n              type=\"button\"\n              onClick={() => {\n                loadNotifications(true);\n                scrollableRef.current?.scrollTo({\n                  top: 0,\n                  behavior: 'smooth',\n                });\n              }}\n            >\n              <Icon icon=\"arrow-up\" /> New notifications\n            </button>\n          )}\n        </header>\n        {announcements.length > 0 && (\n          <div class=\"shazam-container\">\n            <div class=\"shazam-container-inner\">\n              <details class=\"announcements\">\n                <summary>\n                  <span>\n                    <Icon icon=\"announce\" class=\"announcement-icon\" size=\"l\" />{' '}\n                    <b>Announcement{announcements.length > 1 ? 's' : ''}</b>{' '}\n                    <small class=\"insignificant\">{instance}</small>\n                  </span>\n                  {announcements.length > 1 && (\n                    <span class=\"announcements-nav-buttons\">\n                      {announcements.map((announcement, index) => (\n                        <button\n                          type=\"button\"\n                          class=\"plain2 small\"\n                          onClick={() => {\n                            announcementsListRef.current?.children[\n                              index\n                            ].scrollIntoView({\n                              behavior: 'smooth',\n                              block: 'nearest',\n                            });\n                          }}\n                        >\n                          {index + 1}\n                        </button>\n                      ))}\n                    </span>\n                  )}\n                </summary>\n                <ul\n                  class={`announcements-list-${\n                    announcements.length > 1 ? 'multiple' : 'single'\n                  }`}\n                  ref={announcementsListRef}\n                >\n                  {announcements.map((announcement) => (\n                    <li>\n                      <AnnouncementBlock announcement={announcement} />\n                    </li>\n                  ))}\n                </ul>\n              </details>\n            </div>\n          </div>\n        )}\n        {followRequests.length > 0 && (\n          <div class=\"follow-requests\">\n            <h2 class=\"timeline-header\">Follow requests</h2>\n            {followRequests.length > 5 ? (\n              <details>\n                <summary>{followRequests.length} follow requests</summary>\n                <ul>\n                  {followRequests.map((account) => (\n                    <li key={account.id}>\n                      <AccountBlock account={account} />\n                      <FollowRequestButtons\n                        accountID={account.id}\n                        onChange={() => {\n                          // loadFollowRequests();\n                          // loadNotifications(true);\n                        }}\n                      />\n                    </li>\n                  ))}\n                </ul>\n              </details>\n            ) : (\n              <ul>\n                {followRequests.map((account) => (\n                  <li key={account.id}>\n                    <AccountBlock account={account} />\n                    <FollowRequestButtons\n                      accountID={account.id}\n                      onChange={() => {\n                        // loadFollowRequests();\n                        // loadNotifications(true);\n                      }}\n                    />\n                  </li>\n                ))}\n              </ul>\n            )}\n          </div>\n        )}\n        <div id=\"mentions-option\">\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={onlyMentions}\n              onChange={(e) => {\n                setOnlyMentions(e.target.checked);\n              }}\n            />{' '}\n            Only mentions\n          </label>\n        </div>\n        <h2 class=\"timeline-header\">Today</h2>\n        {showTodayEmpty && !!snapStates.notifications.length && (\n          <p class=\"ui-state insignificant\">\n            {uiState === 'default' ? \"You're all caught up.\" : <>&hellip;</>}\n          </p>\n        )}\n        {snapStates.notifications.length ? (\n          <>\n            {snapStates.notifications\n              // This is leaked from Notifications popover\n              .filter((n) => n.type !== 'follow_request')\n              .map((notification) => {\n                if (onlyMentions && notification.type !== 'mention') {\n                  return null;\n                }\n                const notificationDay = new Date(notification.createdAt);\n                const differentDay =\n                  notificationDay.toDateString() !== currentDay.toDateString();\n                if (differentDay) {\n                  currentDay = notificationDay;\n                }\n                // if notificationDay is yesterday, show \"Yesterday\"\n                // if notificationDay is before yesterday, show date\n                const heading =\n                  notificationDay.toDateString() ===\n                  yesterdayDate.toDateString()\n                    ? 'Yesterday'\n                    : niceDateTime(currentDay, {\n                        hideTime: true,\n                      });\n                return (\n                  <Fragment key={notification.id}>\n                    {differentDay && <h2 class=\"timeline-header\">{heading}</h2>}\n                    <Notification\n                      instance={instance}\n                      notification={notification}\n                      key={notification.id}\n                    />\n                  </Fragment>\n                );\n              })}\n          </>\n        ) : (\n          <>\n            {uiState === 'loading' && (\n              <>\n                <ul class=\"timeline flat\">\n                  {Array.from({ length: 5 }).map((_, i) => (\n                    <li class=\"notification skeleton\">\n                      <div class=\"notification-type\">\n                        <Icon icon=\"notification\" size=\"xl\" />\n                      </div>\n                      <div class=\"notification-content\">\n                        <p>███████████ ████</p>\n                      </div>\n                    </li>\n                  ))}\n                </ul>\n              </>\n            )}\n            {uiState === 'error' && (\n              <p class=\"ui-state\">\n                Unable to load notifications\n                <br />\n                <br />\n                <button type=\"button\" onClick={() => loadNotifications(true)}>\n                  Try again\n                </button>\n              </p>\n            )}\n          </>\n        )}\n        {showMore && (\n          <InView\n            onChange={(inView) => {\n              if (inView) {\n                loadNotifications();\n              }\n            }}\n          >\n            <button\n              type=\"button\"\n              class=\"plain block\"\n              disabled={uiState === 'loading'}\n              onClick={() => loadNotifications()}\n              style={{ marginBlockEnd: '6em' }}\n            >\n              {uiState === 'loading' ? (\n                <Loader abrupt />\n              ) : (\n                <>Show more&hellip;</>\n              )}\n            </button>\n          </InView>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction inBackground() {\n  return !!document.querySelector('.deck-backdrop, #modal-container > *');\n}\n\nfunction AnnouncementBlock({ announcement }) {\n  const { instance } = api();\n  const { contact } = getCurrentInstance();\n  const contactAccount = contact?.account;\n  const {\n    id,\n    content,\n    startsAt,\n    endsAt,\n    published,\n    allDay,\n    publishedAt,\n    updatedAt,\n    read,\n    mentions,\n    statuses,\n    tags,\n    emojis,\n    reactions,\n  } = announcement;\n\n  const publishedAtDate = new Date(publishedAt);\n  const publishedDateText = niceDateTime(publishedAtDate);\n  const updatedAtDate = new Date(updatedAt);\n  const updatedAtText = niceDateTime(updatedAtDate);\n\n  return (\n    <div class=\"announcement-block\">\n      <AccountBlock account={contactAccount} />\n      <div\n        class=\"announcement-content\"\n        onClick={handleContentLinks({ mentions, instance })}\n        dangerouslySetInnerHTML={{\n          __html: enhanceContent(content, {\n            emojis,\n          }),\n        }}\n      />\n      <p class=\"insignificant\">\n        <time datetime={publishedAtDate.toISOString()}>\n          {niceDateTime(publishedAtDate)}\n        </time>\n        {updatedAt && updatedAtText !== publishedDateText && (\n          <>\n            {' '}\n            &bull;{' '}\n            <span class=\"ib\">\n              Updated{' '}\n              <time datetime={updatedAtDate.toISOString()}>\n                {niceDateTime(updatedAtDate)}\n              </time>\n            </span>\n          </>\n        )}\n      </p>\n      <div class=\"announcement-reactions\" hidden>\n        {reactions.map((reaction) => {\n          const { name, count, me, staticUrl, url } = reaction;\n          return (\n            <button type=\"button\" class={`plain4 small ${me ? 'reacted' : ''}`}>\n              {url || staticUrl ? (\n                <img src={url || staticUrl} alt={name} width=\"16\" height=\"16\" />\n              ) : (\n                <span>{name}</span>\n              )}{' '}\n              <span class=\"count\">{shortenNumber(count)}</span>\n            </button>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(Notifications);\n","import { Menu, MenuDivider, MenuItem } from '@szhsin/react-menu';\nimport { useRef } from 'preact/hooks';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport Icon from '../components/icon';\nimport Menu2 from '../components/menu2';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { filteredItems } from '../utils/filters';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Public({ local, columnMode, ...props }) {\n  const snapStates = useSnapshot(states);\n  const isLocal = !!local;\n  const params = columnMode ? {} : useParams();\n  const { masto, instance } = api({\n    instance: props?.instance || params.instance,\n  });\n  const { masto: currentMasto, instance: currentInstance } = api();\n  const title = `${isLocal ? 'Local' : 'Federated'} timeline (${instance})`;\n  useTitle(title, isLocal ? `/:instance?/p/l` : `/:instance?/p`);\n  // const navigate = useNavigate();\n  const latestItem = useRef();\n\n  const publicIterator = useRef();\n  async function fetchPublic(firstLoad) {\n    if (firstLoad || !publicIterator.current) {\n      publicIterator.current = masto.v1.timelines.public.list({\n        limit: LIMIT,\n        local: isLocal,\n      });\n    }\n    const results = await publicIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      // value = filteredItems(value, 'public');\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines.public\n        .list({\n          limit: 1,\n          local: isLocal,\n          since_id: latestItem.current,\n        })\n        .next();\n      let { value } = results;\n      value = filteredItems(value, 'public');\n      if (value?.length) {\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  return (\n    <Timeline\n      key={instance + isLocal}\n      title={title}\n      titleComponent={\n        <h1 class=\"header-double-lines\">\n          <b>{isLocal ? 'Local timeline' : 'Federated timeline'}</b>\n          <div>{instance}</div>\n        </h1>\n      }\n      id=\"public\"\n      instance={instance}\n      emptyText=\"No one has posted anything yet.\"\n      errorText=\"Unable to load posts\"\n      fetchItems={fetchPublic}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      headerStart={<></>}\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      // allowFilters\n      filterContext=\"public\"\n      headerEnd={\n        <Menu2\n          portal\n          // setDownOverflow\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          <MenuItem href={isLocal ? `/#/${instance}/p` : `/#/${instance}/p/l`}>\n            {isLocal ? (\n              <>\n                <Icon icon=\"transfer\" /> <span>Switch to Federated</span>\n              </>\n            ) : (\n              <>\n                <Icon icon=\"transfer\" /> <span>Switch to Local</span>\n              </>\n            )}\n          </MenuItem>\n          <MenuDivider />\n          <MenuItem\n            onClick={() => {\n              let newInstance = prompt(\n                'Enter a new instance e.g. \"mastodon.social\"',\n              );\n              if (!/\\./.test(newInstance)) {\n                if (newInstance) alert('Invalid instance');\n                return;\n              }\n              if (newInstance) {\n                newInstance = newInstance.toLowerCase().trim();\n                // navigate(isLocal ? `/${newInstance}/p/l` : `/${newInstance}/p`);\n                location.hash = isLocal\n                  ? `/${newInstance}/p/l`\n                  : `/${newInstance}/p`;\n              }\n            }}\n          >\n            <Icon icon=\"bus\" /> <span>Go to another instance…</span>\n          </MenuItem>\n          {currentInstance !== instance && (\n            <MenuItem\n              onClick={() => {\n                location.hash = isLocal\n                  ? `/${currentInstance}/p/l`\n                  : `/${currentInstance}/p`;\n              }}\n            >\n              <Icon icon=\"bus\" />{' '}\n              <small class=\"menu-double-lines\">\n                Go to my instance (<b>{currentInstance}</b>)\n              </small>\n            </MenuItem>\n          )}\n        </Menu2>\n      }\n    />\n  );\n}\n\nexport default Public;\n","import './trending.css';\n\nimport { MenuItem } from '@szhsin/react-menu';\nimport { getBlurHashAverageColor } from 'fast-blurhash';\nimport { useMemo, useRef, useState } from 'preact/hooks';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Menu2 from '../components/menu2';\nimport RelativeTime from '../components/relative-time';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { oklab2rgb, rgb2oklab } from '../utils/color-utils';\nimport { filteredItems } from '../utils/filters';\nimport pmem from '../utils/pmem';\nimport shortenNumber from '../utils/shorten-number';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nconst fetchLinks = pmem(\n  (masto) => {\n    return masto.v1.trends.links.list().next();\n  },\n  {\n    // News last much longer\n    maxAge: 10 * 60 * 1000, // 10 minutes\n  },\n);\n\nfunction Trending({ columnMode, ...props }) {\n  const snapStates = useSnapshot(states);\n  const params = columnMode ? {} : useParams();\n  const { masto, instance } = api({\n    instance: props?.instance || params.instance,\n  });\n  const { masto: currentMasto, instance: currentInstance } = api();\n  const title = `Trending (${instance})`;\n  useTitle(title, `/:instance?/trending`);\n  // const navigate = useNavigate();\n  const latestItem = useRef();\n\n  const [hashtags, setHashtags] = useState([]);\n  const [links, setLinks] = useState([]);\n  const trendIterator = useRef();\n  async function fetchTrend(firstLoad) {\n    if (firstLoad || !trendIterator.current) {\n      trendIterator.current = masto.v1.trends.statuses.list({\n        limit: LIMIT,\n      });\n\n      // Get hashtags\n      try {\n        const iterator = masto.v1.trends.tags.list();\n        const { value: tags } = await iterator.next();\n        console.log('tags', tags);\n        if (tags?.length) {\n          setHashtags(tags);\n        }\n      } catch (e) {\n        console.error(e);\n      }\n\n      // Get links\n      try {\n        const { value } = await fetchLinks(masto);\n        // 4 types available: link, photo, video, rich\n        // Only want links for now\n        const links = value?.filter?.((link) => link.type === 'link');\n        console.log('links', links);\n        if (links?.length) {\n          setLinks(links);\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    }\n    const results = await trendIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      // value = filteredItems(value, 'public'); // Might not work here\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.trends.statuses\n        .list({\n          limit: 1,\n          // NOT SUPPORTED\n          // since_id: latestItem.current,\n        })\n        .next();\n      let { value } = results;\n      value = filteredItems(value, 'public');\n      if (value?.length && value[0].id !== latestItem.current) {\n        latestItem.current = value[0].id;\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  const TimelineStart = useMemo(() => {\n    return (\n      <>\n        {!!hashtags.length && (\n          <div class=\"filter-bar expandable\">\n            <Icon icon=\"chart\" class=\"insignificant\" size=\"l\" />\n            {hashtags.map((tag, i) => {\n              const { name, history } = tag;\n              const total = history.reduce((acc, cur) => acc + +cur.uses, 0);\n              return (\n                <Link to={`/${instance}/t/${name}`} key={name}>\n                  <span>\n                    <span class=\"more-insignificant\">#</span>\n                    {name}\n                  </span>\n                  <span class=\"filter-count\">{shortenNumber(total)}</span>\n                </Link>\n              );\n            })}\n          </div>\n        )}\n        {!!links.length && (\n          <div class=\"links-bar\">\n            <header>\n              <h3>Trending News</h3>\n            </header>\n            {links.map((link) => {\n              const {\n                authorName,\n                authorUrl,\n                blurhash,\n                description,\n                height,\n                image,\n                imageDescription,\n                language,\n                providerName,\n                providerUrl,\n                publishedAt,\n                title,\n                url,\n                width,\n              } = link;\n              const domain = new URL(url).hostname\n                .replace(/^www\\./, '')\n                .replace(/\\/$/, '');\n              let accentColor;\n              if (blurhash) {\n                const averageColor = getBlurHashAverageColor(blurhash);\n                const labAverageColor = rgb2oklab(averageColor);\n                accentColor = oklab2rgb([\n                  0.6,\n                  labAverageColor[1],\n                  labAverageColor[2],\n                ]);\n              }\n\n              return (\n                <a\n                  key={url}\n                  href={url}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  style={\n                    accentColor\n                      ? {\n                          '--accent-color': `rgb(${accentColor.join(',')})`,\n                          '--accent-alpha-color': `rgba(${accentColor.join(\n                            ',',\n                          )}, 0.4)`,\n                        }\n                      : {}\n                  }\n                >\n                  <article>\n                    <figure>\n                      <img\n                        src={image}\n                        alt={imageDescription}\n                        width={width}\n                        height={height}\n                        loading=\"lazy\"\n                      />\n                    </figure>\n                    <div class=\"article-body\">\n                      <header>\n                        <div class=\"article-meta\">\n                          <span class=\"domain\">{domain}</span>{' '}\n                          {!!publishedAt && <>&middot; </>}\n                          {!!publishedAt && (\n                            <>\n                              <RelativeTime\n                                datetime={publishedAt}\n                                format=\"micro\"\n                              />\n                            </>\n                          )}\n                        </div>\n                        {!!title && (\n                          <h1 class=\"title\" lang={language} dir=\"auto\">\n                            {title}\n                          </h1>\n                        )}\n                      </header>\n                      {!!description && (\n                        <p class=\"description\" lang={language} dir=\"auto\">\n                          {description}\n                        </p>\n                      )}\n                    </div>\n                  </article>\n                </a>\n              );\n            })}\n          </div>\n        )}\n      </>\n    );\n  }, [hashtags, links]);\n\n  return (\n    <Timeline\n      key={instance}\n      title={title}\n      titleComponent={\n        <h1 class=\"header-double-lines\">\n          <b>Trending</b>\n          <div>{instance}</div>\n        </h1>\n      }\n      id=\"trending\"\n      instance={instance}\n      emptyText=\"No trending posts.\"\n      errorText=\"Unable to load posts\"\n      fetchItems={fetchTrend}\n      checkForUpdates={checkForUpdates}\n      checkForUpdatesInterval={5 * 60 * 1000} // 5 minutes\n      useItemID\n      headerStart={<></>}\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      // allowFilters\n      filterContext=\"public\"\n      timelineStart={TimelineStart}\n      headerEnd={\n        <Menu2\n          portal\n          // setDownOverflow\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          <MenuItem\n            onClick={() => {\n              let newInstance = prompt(\n                'Enter a new instance e.g. \"mastodon.social\"',\n              );\n              if (!/\\./.test(newInstance)) {\n                if (newInstance) alert('Invalid instance');\n                return;\n              }\n              if (newInstance) {\n                newInstance = newInstance.toLowerCase().trim();\n                // navigate(`/${newInstance}/trending`);\n                location.hash = `/${newInstance}/trending`;\n              }\n            }}\n          >\n            <Icon icon=\"bus\" /> <span>Go to another instance…</span>\n          </MenuItem>\n          {currentInstance !== instance && (\n            <MenuItem\n              onClick={() => {\n                location.hash = `/${currentInstance}/trending`;\n              }}\n            >\n              <Icon icon=\"bus\" />{' '}\n              <small class=\"menu-double-lines\">\n                Go to my instance (<b>{currentInstance}</b>)\n              </small>\n            </MenuItem>\n          )}\n        </Menu2>\n      }\n    />\n  );\n}\n\nexport default Trending;\n","import { useHotkeys } from 'react-hotkeys-hook';\nimport { useSnapshot } from 'valtio';\n\nimport Bookmarks from '../pages/bookmarks';\nimport Favourites from '../pages/favourites';\nimport Following from '../pages/following';\nimport Hashtag from '../pages/hashtag';\nimport List from '../pages/list';\nimport Mentions from '../pages/mentions';\nimport Notifications from '../pages/notifications';\nimport Public from '../pages/public';\nimport Trending from '../pages/trending';\nimport states from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nfunction Columns() {\n  useTitle('Home', '/');\n  const snapStates = useSnapshot(states);\n  const { shortcuts } = snapStates;\n\n  console.debug('RENDER Columns', shortcuts);\n\n  const components = shortcuts.map((shortcut) => {\n    if (!shortcut) return null;\n    const { type, ...params } = shortcut;\n    const Component = {\n      following: Following,\n      notifications: Notifications,\n      list: List,\n      public: Public,\n      bookmarks: Bookmarks,\n      favourites: Favourites,\n      hashtag: Hashtag,\n      mentions: Mentions,\n      trending: Trending,\n    }[type];\n    if (!Component) return null;\n    return (\n      <Component key={type + JSON.stringify(params)} {...params} columnMode />\n    );\n  });\n\n  useHotkeys(['1', '2', '3', '4', '5', '6', '7', '8', '9'], (e, handler) => {\n    try {\n      const index = parseInt(handler.keys[0], 10) - 1;\n      document.querySelectorAll('#columns > *')[index].focus();\n    } catch (e) {\n      console.error(e);\n    }\n  });\n\n  return (\n    <div\n      id=\"columns\"\n      onContextMenu={(e) => {\n        // If right-click on header, but not links or buttons\n        if (\n          e.target.closest('.deck > header') &&\n          !e.target.closest('a') &&\n          !e.target.closest('button')\n        ) {\n          e.preventDefault();\n          states.showShortcutsSettings = true;\n        }\n      }}\n    >\n      {components}\n    </div>\n  );\n}\n\nexport default Columns;\n","import './notifications-menu.css';\n\nimport { ControlledMenu } from '@szhsin/react-menu';\nimport { memo } from 'preact/compat';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport Columns from '../components/columns';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport Notification from '../components/notification';\nimport { api } from '../utils/api';\nimport db from '../utils/db';\nimport groupNotifications from '../utils/group-notifications';\nimport states, { saveStatus } from '../utils/states';\nimport { getCurrentAccountNS } from '../utils/store-utils';\n\nimport Following from './following';\n\nfunction Home() {\n  const snapStates = useSnapshot(states);\n  useEffect(() => {\n    (async () => {\n      const keys = await db.drafts.keys();\n      if (keys.length) {\n        const ns = getCurrentAccountNS();\n        const ownKeys = keys.filter((key) => key.startsWith(ns));\n        if (ownKeys.length) {\n          states.showDrafts = true;\n        }\n      }\n    })();\n  }, []);\n\n  return (\n    <>\n      {(snapStates.settings.shortcutsViewMode === 'multi-column' ||\n        (!snapStates.settings.shortcutsViewMode &&\n          snapStates.settings.shortcutsColumnsMode)) &&\n      !!snapStates.shortcuts?.length ? (\n        <Columns />\n      ) : (\n        <Following\n          title=\"Home\"\n          path=\"/\"\n          id=\"home\"\n          headerStart={false}\n          headerEnd={<NotificationsLink />}\n        />\n      )}\n    </>\n  );\n}\n\nfunction NotificationsLink() {\n  const snapStates = useSnapshot(states);\n  const notificationLinkRef = useRef();\n  const [menuState, setMenuState] = useState(undefined);\n  return (\n    <>\n      <Link\n        ref={notificationLinkRef}\n        to=\"/notifications\"\n        class={`button plain notifications-button ${\n          snapStates.notificationsShowNew ? 'has-badge' : ''\n        } ${menuState || ''}`}\n        onClick={(e) => {\n          e.stopPropagation();\n          if (window.matchMedia('(min-width: calc(40em))').matches) {\n            e.preventDefault();\n            setMenuState((state) => (!state ? 'open' : undefined));\n          }\n        }}\n      >\n        <Icon icon=\"notification\" size=\"l\" alt=\"Notifications\" />\n      </Link>\n      <NotificationsMenu\n        state={menuState}\n        anchorRef={notificationLinkRef}\n        onClose={() => setMenuState(undefined)}\n      />\n    </>\n  );\n}\n\nconst NOTIFICATIONS_LIMIT = 30;\nconst NOTIFICATIONS_DISPLAY_LIMIT = 5;\nfunction NotificationsMenu({ anchorRef, state, onClose }) {\n  const { masto, instance } = api();\n  const snapStates = useSnapshot(states);\n  const [uiState, setUIState] = useState('default');\n\n  const notificationsIterator = masto.v1.notifications.list({\n    limit: NOTIFICATIONS_LIMIT,\n  });\n\n  async function fetchNotifications() {\n    const allNotifications = await notificationsIterator.next();\n    const notifications = allNotifications.value;\n\n    if (notifications?.length) {\n      notifications.forEach((notification) => {\n        saveStatus(notification.status, instance, {\n          skipThreading: true,\n        });\n      });\n\n      const groupedNotifications = groupNotifications(notifications);\n\n      states.notificationsLast = notifications[0];\n      states.notifications = groupedNotifications;\n\n      // Update last read marker\n      masto.v1.markers\n        .create({\n          notifications: {\n            lastReadId: notifications[0].id,\n          },\n        })\n        .catch(() => {});\n    }\n\n    states.notificationsShowNew = false;\n    states.notificationsLastFetchTime = Date.now();\n    return allNotifications;\n  }\n\n  const [hasFollowRequests, setHasFollowRequests] = useState(false);\n  function fetchFollowRequests() {\n    return masto.v1.followRequests.list({\n      limit: 1,\n    });\n  }\n\n  function loadNotifications() {\n    setUIState('loading');\n    (async () => {\n      try {\n        await fetchNotifications();\n        const followRequests = await fetchFollowRequests();\n        setHasFollowRequests(!!followRequests?.length);\n        setUIState('default');\n      } catch (e) {\n        setUIState('error');\n      }\n    })();\n  }\n\n  useEffect(() => {\n    if (state === 'open') loadNotifications();\n  }, [state]);\n\n  return (\n    <ControlledMenu\n      menuClassName=\"notifications-menu\"\n      state={state}\n      anchorRef={anchorRef}\n      onClose={onClose}\n      portal={{\n        target: document.body,\n      }}\n      overflow=\"auto\"\n      viewScroll=\"close\"\n      position=\"anchor\"\n      align=\"center\"\n      boundingBoxPadding=\"8 8 8 8\"\n    >\n      <header>\n        <h2>Notifications</h2>\n      </header>\n      <main>\n        {snapStates.notifications.length ? (\n          <>\n            {snapStates.notifications\n              .slice(0, NOTIFICATIONS_DISPLAY_LIMIT)\n              .map((notification) => (\n                <Notification\n                  key={notification.id}\n                  instance={instance}\n                  notification={notification}\n                  disableContextMenu\n                />\n              ))}\n          </>\n        ) : uiState === 'loading' ? (\n          <div class=\"ui-state\">\n            <Loader abrupt />\n          </div>\n        ) : (\n          uiState === 'error' && (\n            <div class=\"ui-state\">\n              <p>Unable to fetch notifications.</p>\n              <p>\n                <button type=\"button\" onClick={loadNotifications}>\n                  Try again\n                </button>\n              </p>\n            </div>\n          )\n        )}\n      </main>\n      <footer>\n        <Link to=\"/mentions\" class=\"button plain\">\n          <Icon icon=\"at\" /> <span>Mentions</span>\n        </Link>\n        <Link to=\"/notifications\" class=\"button plain2\">\n          {hasFollowRequests ? (\n            <>\n              <span class=\"tag collapsed\">New</span>{' '}\n              <span>Follow Requests</span>\n            </>\n          ) : (\n            <b>See all</b>\n          )}{' '}\n          <Icon icon=\"arrow-right\" />\n        </Link>\n      </footer>\n    </ControlledMenu>\n  );\n}\n\nexport default memo(Home);\n","// export const statusRegex = /\\/@([^@\\/]+)@?([^\\/]+)?\\/([^\\/]+)\\/?$/i;\n// export const statusNoteRegex = /\\/notes\\/([^\\/]+)\\/?$/i;\n\nconst statusPostRegexes = [\n  /^\\/@[^@\\/]+\\/(?:statuses|posts)\\/([^\\/]+)/i, // GoToSocial, Takahe\n  /\\/notes\\/([^\\/]+)/i, // Misskey, Firefish\n  /^\\/(?:notice|objects)\\/([a-z0-9-]+)/i, // Pleroma\n  /\\/@[^@\\/]+@?[^\\/]+?\\/([^\\/]+)/i, // Mastodon\n];\n\nexport function getInstanceStatusObject(url) {\n  // Regex /:username/:id, where username = @username or @username@domain, id = anything\n  const { hostname, pathname } = new URL(url);\n  // const [, username, domain, id] = pathname.match(statusRegex) || [];\n  for (const regex of statusPostRegexes) {\n    const [, id] = pathname.match(regex) || [];\n    console.log(pathname, regex, id);\n    if (id) {\n      return {\n        instance: hostname,\n        id,\n      };\n    }\n  }\n  return null;\n}\n\nfunction getInstanceStatusURL(url) {\n  const { instance, id } = getInstanceStatusObject(url);\n  if (instance && id) {\n    return `/${instance}/s/${id}`;\n  }\n  return null;\n}\n\nexport default getInstanceStatusURL;\n","import { useLayoutEffect, useState } from 'preact/hooks';\nimport { useLocation } from 'react-router-dom';\n\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport { api } from '../utils/api';\nimport getInstanceStatusURL, {\n  getInstanceStatusObject,\n} from '../utils/get-instance-status-url';\n\nexport default function HttpRoute() {\n  const location = useLocation();\n  const url = location.pathname.replace(/^\\//, '');\n  const statusObject = getInstanceStatusObject(url);\n  // const statusURL = getInstanceStatusURL(url);\n  const statusURL = statusObject?.instance\n    ? `/${statusObject.instance}/s/${statusObject.id}`\n    : null;\n  const [uiState, setUIState] = useState('loading');\n\n  useLayoutEffect(() => {\n    setUIState('loading');\n    (async () => {\n      // Check if status returns 200\n      try {\n        const { instance, id } = statusObject;\n        const { masto } = api({ instance });\n        const status = await masto.v1.statuses.$select(id).fetch();\n        if (status) {\n          window.location.hash = statusURL + '?view=full';\n          return;\n        }\n      } catch (e) {}\n\n      // Fallback to search\n      {\n        const { masto: currentMasto, instance: currentInstance } = api();\n        const result = await currentMasto.v2.search.fetch({\n          q: url,\n          type: 'statuses',\n          limit: 1,\n          resolve: true,\n        });\n        if (result.statuses.length) {\n          const status = result.statuses[0];\n          window.location.hash = `/${currentInstance}/s/${status.id}?view=full`;\n        } else {\n          // Fallback to original URL, which will probably show error\n          window.location.hash = statusURL + '?view=full';\n        }\n      }\n    })();\n  }, [statusURL]);\n\n  return (\n    <div class=\"ui-state\" tabIndex=\"-1\">\n      {uiState === 'loading' ? (\n        <>\n          <Loader abrupt />\n          <h2>Resolving…</h2>\n          <p>\n            <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n              {url}\n            </a>\n          </p>\n        </>\n      ) : (\n        <>\n          <h2>Unable to resolve URL</h2>\n          <p>\n            <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n              {url}\n            </a>\n          </p>\n        </>\n      )}\n      <hr />\n      <p>\n        <Link to=\"/\">Go home</Link>\n      </p>\n    </div>\n  );\n}\n","import './lists.css';\n\nimport { useEffect, useReducer, useRef, useState } from 'preact/hooks';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport ListAddEdit from '../components/list-add-edit';\nimport Loader from '../components/loader';\nimport Modal from '../components/modal';\nimport NavMenu from '../components/nav-menu';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nfunction Lists() {\n  const { masto } = api();\n  useTitle(`Lists`, `/l`);\n  const [uiState, setUIState] = useState('default');\n\n  const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n  const [lists, setLists] = useState([]);\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const lists = await masto.v1.lists.list();\n        lists.sort((a, b) => a.title.localeCompare(b.title));\n        console.log(lists);\n        setLists(lists);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, [reloadCount]);\n\n  const [showListAddEditModal, setShowListAddEditModal] = useState(false);\n\n  return (\n    <div id=\"lists-page\" class=\"deck-container\" tabIndex=\"-1\">\n      <div class=\"timeline-deck deck\">\n        <header>\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n              <Link to=\"/\" class=\"button plain\">\n                <Icon icon=\"home\" size=\"l\" />\n              </Link>\n            </div>\n            <h1>Lists</h1>\n            <div class=\"header-side\">\n              <button\n                type=\"button\"\n                class=\"plain\"\n                onClick={() => setShowListAddEditModal(true)}\n              >\n                <Icon icon=\"plus\" size=\"l\" alt=\"New list\" />\n              </button>\n            </div>\n          </div>\n        </header>\n        <main>\n          {lists.length > 0 ? (\n            <ul class=\"link-list\">\n              {lists.map((list) => (\n                <li>\n                  <Link to={`/l/${list.id}`}>\n                    <span>\n                      <Icon icon=\"list\" /> <span>{list.title}</span>\n                    </span>\n                    {/* <button\n                      type=\"button\"\n                      class=\"plain\"\n                      onClick={(e) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        setShowListAddEditModal({\n                          list,\n                        });\n                      }}\n                    >\n                      <Icon icon=\"pencil\" />\n                    </button> */}\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          ) : uiState === 'loading' ? (\n            <p class=\"ui-state\">\n              <Loader />\n            </p>\n          ) : uiState === 'error' ? (\n            <p class=\"ui-state\">Unable to load lists.</p>\n          ) : (\n            <p class=\"ui-state\">No lists yet.</p>\n          )}\n        </main>\n      </div>\n      {showListAddEditModal && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowListAddEditModal(false);\n            }\n          }}\n        >\n          <ListAddEdit\n            list={showListAddEditModal?.list}\n            onClose={(result) => {\n              if (result.state === 'success') {\n                reload();\n              }\n              setShowListAddEditModal(false);\n            }}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nexport default Lists;\n","export default \"__VITE_ASSET__Y_wpqkTO__\"","const { VITE_CLIENT_NAME: CLIENT_NAME, VITE_WEBSITE: WEBSITE } = import.meta\n  .env;\n\nconst SCOPES = 'read write follow push';\n\nexport async function registerApplication({ instanceURL }) {\n  const registrationParams = new URLSearchParams({\n    client_name: CLIENT_NAME,\n    redirect_uris: location.origin + location.pathname,\n    scopes: SCOPES,\n    website: WEBSITE,\n  });\n  const registrationResponse = await fetch(\n    `https://${instanceURL}/api/v1/apps`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: registrationParams.toString(),\n    },\n  );\n  const registrationJSON = await registrationResponse.json();\n  console.log({ registrationJSON });\n  return registrationJSON;\n}\n\nexport async function getAuthorizationURL({ instanceURL, client_id }) {\n  const authorizationParams = new URLSearchParams({\n    client_id,\n    scope: SCOPES,\n    redirect_uri: location.origin + location.pathname,\n    // redirect_uri: 'urn:ietf:wg:oauth:2.0:oob',\n    response_type: 'code',\n  });\n  const authorizationURL = `https://${instanceURL}/oauth/authorize?${authorizationParams.toString()}`;\n  return authorizationURL;\n}\n\nexport async function getAccessToken({\n  instanceURL,\n  client_id,\n  client_secret,\n  code,\n}) {\n  const params = new URLSearchParams({\n    client_id,\n    client_secret,\n    redirect_uri: location.origin + location.pathname,\n    grant_type: 'authorization_code',\n    code,\n    scope: SCOPES,\n  });\n  const tokenResponse = await fetch(`https://${instanceURL}/oauth/token`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: params.toString(),\n  });\n  const tokenJSON = await tokenResponse.json();\n  console.log({ tokenJSON });\n  return tokenJSON;\n}\n","import './login.css';\n\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useSearchParams } from 'react-router-dom';\n\nimport logo from '../assets/logo.svg';\n\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport instancesListURL from '../data/instances.json?url';\nimport { getAuthorizationURL, registerApplication } from '../utils/auth';\nimport store from '../utils/store';\nimport useTitle from '../utils/useTitle';\n\nfunction Login() {\n  useTitle('Log in');\n  const instanceURLRef = useRef();\n  const cachedInstanceURL = store.local.get('instanceURL');\n  const [uiState, setUIState] = useState('default');\n  const [searchParams] = useSearchParams();\n  const instance = searchParams.get('instance');\n  const [instanceText, setInstanceText] = useState(\n    instance || cachedInstanceURL?.toLowerCase() || '',\n  );\n\n  const [instancesList, setInstancesList] = useState([]);\n  useEffect(() => {\n    (async () => {\n      try {\n        const res = await fetch(instancesListURL);\n        const data = await res.json();\n        setInstancesList(data);\n      } catch (e) {\n        // Silently fail\n        console.error(e);\n      }\n    })();\n  }, []);\n\n  // useEffect(() => {\n  //   if (cachedInstanceURL) {\n  //     instanceURLRef.current.value = cachedInstanceURL.toLowerCase();\n  //   }\n  // }, []);\n\n  const submitInstance = (instanceURL) => {\n    if (!instanceURL) return;\n    store.local.set('instanceURL', instanceURL);\n\n    (async () => {\n      setUIState('loading');\n      try {\n        const { client_id, client_secret, vapid_key } =\n          await registerApplication({\n            instanceURL,\n          });\n\n        if (client_id && client_secret) {\n          store.session.set('clientID', client_id);\n          store.session.set('clientSecret', client_secret);\n          store.session.set('vapidKey', vapid_key);\n\n          location.href = await getAuthorizationURL({\n            instanceURL,\n            client_id,\n          });\n        } else {\n          alert('Failed to register application');\n        }\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  };\n\n  const cleanInstanceText = instanceText\n    ? instanceText\n        .replace(/^https?:\\/\\//, '') // Remove protocol from instance URL\n        .replace(/\\/+$/, '') // Remove trailing slash\n        .replace(/^@?[^@]+@/, '') // Remove @?acct@\n        .trim()\n    : null;\n  const instanceTextLooksLikeDomain =\n    /[^\\s\\r\\n\\t\\/\\\\]+\\.[^\\s\\r\\n\\t\\/\\\\]+/.test(cleanInstanceText) &&\n    !/[\\s\\/\\\\@]/.test(cleanInstanceText);\n\n  const instancesSuggestions = cleanInstanceText\n    ? instancesList\n        .filter((instance) => instance.includes(instanceText))\n        .sort((a, b) => {\n          // Move text that starts with instanceText to the start\n          const aStartsWith = a\n            .toLowerCase()\n            .startsWith(instanceText.toLowerCase());\n          const bStartsWith = b\n            .toLowerCase()\n            .startsWith(instanceText.toLowerCase());\n          if (aStartsWith && !bStartsWith) return -1;\n          if (!aStartsWith && bStartsWith) return 1;\n          return 0;\n        })\n        .slice(0, 10)\n    : [];\n\n  const selectedInstanceText = instanceTextLooksLikeDomain\n    ? cleanInstanceText\n    : instancesSuggestions?.length\n    ? instancesSuggestions[0]\n    : instanceText\n    ? instancesList.find((instance) => instance.includes(instanceText))\n    : null;\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    // const { elements } = e.target;\n    // let instanceURL = elements.instanceURL.value.toLowerCase();\n    // // Remove protocol from instance URL\n    // instanceURL = instanceURL.replace(/^https?:\\/\\//, '').replace(/\\/+$/, '');\n    // // Remove @acct@ or acct@ from instance URL\n    // instanceURL = instanceURL.replace(/^@?[^@]+@/, '');\n    // if (!/\\./.test(instanceURL)) {\n    //   instanceURL = instancesList.find((instance) =>\n    //     instance.includes(instanceURL),\n    //   );\n    // }\n    // submitInstance(instanceURL);\n    submitInstance(selectedInstanceText);\n  };\n\n  return (\n    <main id=\"login\" style={{ textAlign: 'center' }}>\n      <form onSubmit={onSubmit}>\n        <h1>\n          <img src={logo} alt=\"\" width=\"80\" height=\"80\" />\n          <br />\n          Log in\n        </h1>\n        <label>\n          <p>Instance</p>\n          <input\n            value={instanceText}\n            required\n            type=\"text\"\n            class=\"large\"\n            id=\"instanceURL\"\n            ref={instanceURLRef}\n            disabled={uiState === 'loading'}\n            // list=\"instances-list\"\n            autocorrect=\"off\"\n            autocapitalize=\"off\"\n            autocomplete=\"off\"\n            spellcheck={false}\n            placeholder=\"instance domain\"\n            onInput={(e) => {\n              setInstanceText(e.target.value);\n            }}\n          />\n          {instancesSuggestions?.length > 0 ? (\n            <ul id=\"instances-suggestions\">\n              {instancesSuggestions.map((instance, i) => (\n                <li>\n                  <button\n                    type=\"button\"\n                    class=\"plain5\"\n                    onClick={() => {\n                      submitInstance(instance);\n                    }}\n                  >\n                    {instance}\n                  </button>\n                </li>\n              ))}\n            </ul>\n          ) : (\n            <div id=\"instances-eg\">e.g. &ldquo;mastodon.social&rdquo;</div>\n          )}\n          {/* <datalist id=\"instances-list\">\n            {instancesList.map((instance) => (\n              <option value={instance} />\n            ))}\n          </datalist> */}\n        </label>\n        {uiState === 'error' && (\n          <p class=\"error\">\n            Failed to log in. Please try again or another instance.\n          </p>\n        )}\n        <div>\n          <button\n            disabled={\n              uiState === 'loading' || !instanceText || !selectedInstanceText\n            }\n          >\n            {selectedInstanceText\n              ? `Continue with ${selectedInstanceText}`\n              : 'Continue'}\n          </button>{' '}\n        </div>\n        <Loader hidden={uiState !== 'loading'} />\n        <hr />\n        <p>\n          <a href=\"https://joinmastodon.org/servers\" target=\"_blank\">\n            Don't have an account? Create one!\n          </a>\n        </p>\n        <p>\n          <Link to=\"/\">Go home</Link>\n        </p>\n      </form>\n    </main>\n  );\n}\n\nexport default Login;\n","import './search.css';\n\nimport { useAutoAnimate } from '@formkit/auto-animate/preact';\nimport { useEffect, useLayoutEffect, useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { InView } from 'react-intersection-observer';\nimport { useParams, useSearchParams } from 'react-router-dom';\n\nimport AccountBlock from '../components/account-block';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport NavMenu from '../components/nav-menu';\nimport SearchForm from '../components/search-form';\nimport Status from '../components/status';\nimport { api } from '../utils/api';\nimport { fetchRelationships } from '../utils/relationships';\nimport shortenNumber from '../utils/shorten-number';\nimport useTitle from '../utils/useTitle';\n\nconst SHORT_LIMIT = 5;\nconst LIMIT = 40;\n\nfunction Search(props) {\n  const params = useParams();\n  const { masto, instance, authenticated } = api({\n    instance: params.instance,\n  });\n  const [uiState, setUIState] = useState('default');\n  const [searchParams] = useSearchParams();\n  const searchFormRef = useRef();\n  const q = props?.query || searchParams.get('q');\n  const type = props?.type || searchParams.get('type');\n  useTitle(\n    q\n      ? `Search: ${q}${\n          type\n            ? ` (${\n                {\n                  statuses: 'Posts',\n                  accounts: 'Accounts',\n                  hashtags: 'Hashtags',\n                }[type]\n              })`\n            : ''\n        }`\n      : 'Search',\n    `/search`,\n  );\n\n  const [showMore, setShowMore] = useState(false);\n  const offsetRef = useRef(0);\n  useEffect(() => {\n    offsetRef.current = 0;\n  }, [q, type]);\n\n  const scrollableRef = useRef();\n  useLayoutEffect(() => {\n    scrollableRef.current?.scrollTo?.(0, 0);\n  }, [q, type]);\n\n  const [statusResults, setStatusResults] = useState([]);\n  const [accountResults, setAccountResults] = useState([]);\n  const [hashtagResults, setHashtagResults] = useState([]);\n  useEffect(() => {\n    setStatusResults([]);\n    setAccountResults([]);\n    setHashtagResults([]);\n  }, [q]);\n  const setTypeResultsFunc = {\n    statuses: setStatusResults,\n    accounts: setAccountResults,\n    hashtags: setHashtagResults,\n  };\n\n  const [relationshipsMap, setRelationshipsMap] = useState({});\n  const loadRelationships = async (accounts) => {\n    if (!accounts?.length) return;\n    const relationships = await fetchRelationships(accounts, relationshipsMap);\n    if (relationships) {\n      setRelationshipsMap({\n        ...relationshipsMap,\n        ...relationships,\n      });\n    }\n  };\n\n  function loadResults(firstLoad) {\n    if (!firstLoad && !authenticated) {\n      // Search results pagination is only available to authenticated users\n      return;\n    }\n\n    setUIState('loading');\n    if (firstLoad && !type) {\n      setStatusResults(statusResults.slice(0, SHORT_LIMIT));\n      setAccountResults(accountResults.slice(0, SHORT_LIMIT));\n      setHashtagResults(hashtagResults.slice(0, SHORT_LIMIT));\n    }\n\n    (async () => {\n      const params = {\n        q,\n        resolve: authenticated,\n        limit: SHORT_LIMIT,\n      };\n      if (type) {\n        params.limit = LIMIT;\n        params.type = type;\n        if (authenticated) params.offset = offsetRef.current;\n      }\n\n      try {\n        const results = await masto.v2.search.fetch(params);\n        console.log(results);\n        if (type) {\n          if (firstLoad) {\n            setTypeResultsFunc[type](results[type]);\n            const length = results[type]?.length;\n            offsetRef.current = LIMIT;\n            setShowMore(!!length);\n          } else {\n            setTypeResultsFunc[type]((prev) => [...prev, ...results[type]]);\n            const length = results[type]?.length;\n            offsetRef.current = offsetRef.current + LIMIT;\n            setShowMore(!!length);\n          }\n        } else {\n          setStatusResults(results.statuses || []);\n          setAccountResults(results.accounts || []);\n          setHashtagResults(results.hashtags || []);\n          offsetRef.current = 0;\n          setShowMore(false);\n        }\n        loadRelationships(results.accounts);\n\n        setUIState('default');\n      } catch (err) {\n        console.error(err);\n        setUIState('error');\n      }\n    })();\n  }\n\n  useEffect(() => {\n    if (q) {\n      searchFormRef.current?.setValue?.(q);\n      loadResults(true);\n    } else {\n      searchFormRef.current?.focus?.();\n    }\n  }, [q, type, instance]);\n\n  useHotkeys(\n    '/',\n    (e) => {\n      searchFormRef.current?.focus?.();\n    },\n    {\n      preventDefault: true,\n    },\n  );\n\n  const [filterBarParent] = useAutoAnimate();\n\n  return (\n    <div id=\"search-page\" class=\"deck-container\" ref={scrollableRef}>\n      <div class=\"timeline-deck deck\">\n        <header class={uiState === 'loading' ? 'loading' : ''}>\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n            </div>\n            <SearchForm ref={searchFormRef} />\n            <div class=\"header-side\">&nbsp;</div>\n          </div>\n        </header>\n        <main>\n          {!!q && (\n            <div\n              ref={filterBarParent}\n              class={`filter-bar ${uiState === 'loading' ? 'loading' : ''}`}\n            >\n              {!!type && (\n                <Link to={`/search${q ? `?q=${encodeURIComponent(q)}` : ''}`}>\n                  ‹ All\n                </Link>\n              )}\n              {[\n                {\n                  label: 'Accounts',\n                  type: 'accounts',\n                  to: `/search?q=${encodeURIComponent(q)}&type=accounts`,\n                },\n                {\n                  label: 'Hashtags',\n                  type: 'hashtags',\n                  to: `/search?q=${encodeURIComponent(q)}&type=hashtags`,\n                },\n                {\n                  label: 'Posts',\n                  type: 'statuses',\n                  to: `/search?q=${encodeURIComponent(q)}&type=statuses`,\n                },\n              ]\n                .sort((a, b) => {\n                  if (a.type === type) return -1;\n                  if (b.type === type) return 1;\n                  return 0;\n                })\n                .map((link) => (\n                  <Link to={link.to} key={link.type}>\n                    {link.label}\n                  </Link>\n                ))}\n            </div>\n          )}\n          {!!q ? (\n            <>\n              {(!type || type === 'accounts') && (\n                <>\n                  {type !== 'accounts' && (\n                    <h2 class=\"timeline-header\">Accounts</h2>\n                  )}\n                  {accountResults.length > 0 ? (\n                    <>\n                      <ul class=\"timeline flat accounts-list\">\n                        {accountResults.map((account) => (\n                          <li key={account.id}>\n                            <AccountBlock\n                              account={account}\n                              instance={instance}\n                              showStats\n                              relationship={relationshipsMap[account.id]}\n                            />\n                          </li>\n                        ))}\n                      </ul>\n                      {type !== 'accounts' && (\n                        <div class=\"ui-state\">\n                          <Link\n                            class=\"plain button\"\n                            to={`/search?q=${q}&type=accounts`}\n                          >\n                            See more accounts <Icon icon=\"arrow-right\" />\n                          </Link>\n                        </div>\n                      )}\n                    </>\n                  ) : (\n                    !type &&\n                    (uiState === 'loading' ? (\n                      <p class=\"ui-state\">\n                        <Loader abrupt />\n                      </p>\n                    ) : (\n                      <p class=\"ui-state\">No accounts found.</p>\n                    ))\n                  )}\n                </>\n              )}\n              {(!type || type === 'hashtags') && (\n                <>\n                  {type !== 'hashtags' && (\n                    <h2 class=\"timeline-header\">Hashtags</h2>\n                  )}\n                  {hashtagResults.length > 0 ? (\n                    <>\n                      <ul class=\"link-list hashtag-list\">\n                        {hashtagResults.map((hashtag) => {\n                          const { name, history } = hashtag;\n                          const total = history?.reduce?.(\n                            (acc, cur) => acc + +cur.uses,\n                            0,\n                          );\n                          return (\n                            <li key={`${name}-${total}`}>\n                              <Link\n                                to={\n                                  instance\n                                    ? `/${instance}/t/${name}`\n                                    : `/t/${name}`\n                                }\n                              >\n                                <Icon icon=\"hashtag\" />\n                                <span>{name}</span>\n                                {!!total && (\n                                  <span class=\"count\">\n                                    {shortenNumber(total)}\n                                  </span>\n                                )}\n                              </Link>\n                            </li>\n                          );\n                        })}\n                      </ul>\n                      {type !== 'hashtags' && (\n                        <div class=\"ui-state\">\n                          <Link\n                            class=\"plain button\"\n                            to={`/search?q=${q}&type=hashtags`}\n                          >\n                            See more hashtags <Icon icon=\"arrow-right\" />\n                          </Link>\n                        </div>\n                      )}\n                    </>\n                  ) : (\n                    !type &&\n                    (uiState === 'loading' ? (\n                      <p class=\"ui-state\">\n                        <Loader abrupt />\n                      </p>\n                    ) : (\n                      <p class=\"ui-state\">No hashtags found.</p>\n                    ))\n                  )}\n                </>\n              )}\n              {(!type || type === 'statuses') && (\n                <>\n                  {type !== 'statuses' && (\n                    <h2 class=\"timeline-header\">Posts</h2>\n                  )}\n                  {statusResults.length > 0 ? (\n                    <>\n                      <ul class=\"timeline\">\n                        {statusResults.map((status) => (\n                          <li key={status.id}>\n                            <Link\n                              class=\"status-link\"\n                              to={\n                                instance\n                                  ? `/${instance}/s/${status.id}`\n                                  : `/s/${status.id}`\n                              }\n                            >\n                              <Status status={status} />\n                            </Link>\n                          </li>\n                        ))}\n                      </ul>\n                      {type !== 'statuses' && (\n                        <div class=\"ui-state\">\n                          <Link\n                            class=\"plain button\"\n                            to={`/search?q=${q}&type=statuses`}\n                          >\n                            See more posts <Icon icon=\"arrow-right\" />\n                          </Link>\n                        </div>\n                      )}\n                    </>\n                  ) : (\n                    !type &&\n                    (uiState === 'loading' ? (\n                      <p class=\"ui-state\">\n                        <Loader abrupt />\n                      </p>\n                    ) : (\n                      <p class=\"ui-state\">No posts found.</p>\n                    ))\n                  )}\n                </>\n              )}\n              {!!type &&\n                (uiState === 'default' ? (\n                  showMore ? (\n                    <InView\n                      onChange={(inView) => {\n                        if (inView) {\n                          loadResults();\n                        }\n                      }}\n                    >\n                      <button\n                        type=\"button\"\n                        class=\"plain block\"\n                        onClick={() => loadResults()}\n                        style={{ marginBlockEnd: '6em' }}\n                      >\n                        Show more&hellip;\n                      </button>\n                    </InView>\n                  ) : (\n                    <p class=\"ui-state insignificant\">The end.</p>\n                  )\n                ) : (\n                  uiState === 'loading' && (\n                    <p class=\"ui-state\">\n                      <Loader abrupt />\n                    </p>\n                  )\n                ))}\n            </>\n          ) : uiState === 'loading' ? (\n            <p class=\"ui-state\">\n              <Loader abrupt />\n            </p>\n          ) : (\n            <p class=\"ui-state\">\n              Enter your search term or paste a URL above to get started.\n            </p>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default Search;\n","import './status.css';\n\nimport { Menu, MenuDivider, MenuHeader, MenuItem } from '@szhsin/react-menu';\nimport debounce from 'just-debounce-it';\nimport pRetry from 'p-retry';\nimport { memo } from 'preact/compat';\nimport {\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { InView } from 'react-intersection-observer';\nimport { matchPath, useSearchParams } from 'react-router-dom';\nimport { useDebouncedCallback } from 'use-debounce';\nimport { useSnapshot } from 'valtio';\n\nimport Avatar from '../components/avatar';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport MediaModal from '../components/media-modal';\nimport Menu2 from '../components/menu2';\nimport NameText from '../components/name-text';\nimport RelativeTime from '../components/relative-time';\nimport Status from '../components/status';\nimport { api } from '../utils/api';\nimport htmlContentLength from '../utils/html-content-length';\nimport shortenNumber from '../utils/shorten-number';\nimport states, {\n  getStatus,\n  saveStatus,\n  statusKey,\n  threadifyStatus,\n} from '../utils/states';\nimport statusPeek from '../utils/status-peek';\nimport { getCurrentAccount } from '../utils/store-utils';\nimport useScroll from '../utils/useScroll';\nimport useTitle from '../utils/useTitle';\n\nimport getInstanceStatusURL from './../utils/get-instance-status-url';\n\nconst LIMIT = 40;\nconst SUBCOMMENTS_OPEN_ALL_LIMIT = 10;\nconst MAX_WEIGHT = 5;\n\nlet cachedRepliesToggle = {};\nlet cachedStatusesMap = {};\nlet scrollPositions = {};\nfunction resetScrollPosition(id) {\n  delete cachedStatusesMap[id];\n  delete scrollPositions[id];\n}\n\nconst scrollIntoViewOptions = {\n  block: 'nearest',\n  inline: 'center',\n  behavior: 'smooth',\n};\n\n// Select all statuses except those inside collapsed details/summary\n// Hat-tip to @AmeliaBR@front-end.social\n// https://front-end.social/@AmeliaBR/109784776146144471\nconst STATUSES_SELECTOR =\n  '.status-link:not(details:not([open]) > summary ~ *, details:not([open]) > summary ~ * *), .status-focus:not(details:not([open]) > summary ~ *, details:not([open]) > summary ~ * *)';\n\nconst STATUS_URL_REGEX = /\\/s\\//i;\n\nfunction StatusPage(params) {\n  const { id } = params;\n  const { masto, instance } = api({ instance: params.instance });\n  const snapStates = useSnapshot(states);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const mediaParam = searchParams.get('media');\n  const mediaOnlyParam = searchParams.get('media-only');\n  const mediaIndex = parseInt(mediaParam || mediaOnlyParam, 10);\n  let showMedia = mediaIndex > 0;\n  const mediaStatusID = searchParams.get('mediaStatusID');\n  const mediaStatus = getStatus(mediaStatusID, instance);\n  if (mediaStatusID && !mediaStatus) {\n    showMedia = false;\n  }\n  const showMediaOnly = showMedia && !!mediaOnlyParam;\n\n  const sKey = statusKey(id, instance);\n  const [heroStatus, setHeroStatus] = useState(states.statuses[sKey]);\n  useEffect(() => {\n    if (states.statuses[sKey]) {\n      setHeroStatus(states.statuses[sKey]);\n    }\n  }, [sKey]);\n\n  const closeLink = useMemo(() => {\n    const { prevLocation } = states;\n    const pathname =\n      (prevLocation?.pathname || '') + (prevLocation?.search || '');\n    const matchStatusPath =\n      matchPath('/:instance/s/:id', pathname) || matchPath('/s/:id', pathname);\n    if (!pathname || matchStatusPath) {\n      return '/';\n    }\n    return pathname;\n  }, []);\n\n  useEffect(() => {\n    if (!heroStatus && showMedia) {\n      (async () => {\n        try {\n          const status = await masto.v1.statuses.$select(id).fetch();\n          saveStatus(status, instance);\n          setHeroStatus(status);\n        } catch (err) {\n          console.error(err);\n          alert('Unable to load post.');\n          location.hash = closeLink;\n        }\n      })();\n    }\n  }, [showMedia]);\n\n  const mediaAttachments = mediaStatusID\n    ? mediaStatus?.mediaAttachments\n    : heroStatus?.mediaAttachments;\n\n  const handleMediaClose = useCallback(() => {\n    if (\n      !window.matchMedia('(min-width: calc(40em + 350px))').matches &&\n      snapStates.prevLocation\n    ) {\n      history.back();\n    } else {\n      if (showMediaOnly) {\n        location.hash = closeLink;\n      } else {\n        searchParams.delete('media');\n        searchParams.delete('mediaStatusID');\n        setSearchParams(searchParams);\n      }\n    }\n  }, [showMediaOnly, closeLink, snapStates.prevLocation]);\n\n  useEffect(() => {\n    let timer = setTimeout(() => {\n      // carouselRef.current?.focus?.();\n      const $carousel = document.querySelector('.carousel');\n      if ($carousel) {\n        $carousel.focus();\n      }\n    }, 100);\n    return () => clearTimeout(timer);\n  }, [showMediaOnly]);\n\n  return (\n    <div class=\"deck-backdrop\">\n      {showMedia ? (\n        mediaAttachments?.length ? (\n          <MediaModal\n            mediaAttachments={mediaAttachments}\n            statusID={mediaStatusID || id}\n            instance={instance}\n            lang={heroStatus?.language}\n            index={mediaIndex - 1}\n            onClose={handleMediaClose}\n          />\n        ) : (\n          <div class=\"media-modal-container loading\">\n            <Loader abrupt />\n          </div>\n        )\n      ) : (\n        <Link to={closeLink} />\n      )}\n      {!showMediaOnly && (\n        <StatusThread\n          id={id}\n          instance={params.instance}\n          closeLink={closeLink}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction StatusThread({ id, closeLink = '/', instance: propInstance }) {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const mediaParam = searchParams.get('media');\n  const mediaStatusID = searchParams.get('mediaStatusID');\n  const showMedia = parseInt(mediaParam, 10) > 0;\n  const firstLoad = useRef(\n    !states.prevLocation &&\n      (history.length === 1 ||\n        ('navigation' in window && navigation?.entries?.()?.length === 1)),\n  );\n  const [viewMode, setViewMode] = useState(\n    searchParams.get('view') || firstLoad.current ? 'full' : null,\n  );\n  const translate = !!parseInt(searchParams.get('translate'));\n  const { masto, instance } = api({ instance: propInstance });\n  const {\n    masto: currentMasto,\n    instance: currentInstance,\n    authenticated,\n  } = api();\n  const sameInstance = instance === currentInstance;\n  const snapStates = useSnapshot(states);\n  const [statuses, setStatuses] = useState([]);\n  const [uiState, setUIState] = useState('default');\n  const heroStatusRef = useRef();\n  const sKey = statusKey(id, instance);\n  const totalDescendants = useRef(0);\n\n  const scrollableRef = useRef();\n  useEffect(() => {\n    scrollableRef.current?.focus();\n  }, []);\n  useEffect(() => {\n    const onScroll = debounce(() => {\n      // console.log('onScroll');\n      if (!scrollableRef.current) return;\n      const { scrollTop } = scrollableRef.current;\n      if (uiState !== 'loading') {\n        scrollPositions[id] = scrollTop;\n      }\n    }, 50);\n    scrollableRef.current?.addEventListener('scroll', onScroll, {\n      passive: true,\n    });\n    onScroll();\n    return () => {\n      onScroll.cancel();\n      scrollableRef.current?.removeEventListener('scroll', onScroll);\n    };\n  }, [id, uiState !== 'loading']);\n\n  const scrollOffsets = useRef();\n  const initContext = ({ reloadHero } = {}) => {\n    console.debug('initContext', id);\n    setUIState('loading');\n    let heroTimer;\n\n    const cachedStatuses = cachedStatusesMap[id];\n    if (cachedStatuses) {\n      // Case 1: It's cached, let's restore them to make it snappy\n      const reallyCachedStatuses = cachedStatuses.filter(\n        (s) => states.statuses[sKey],\n        // Some are not cached in the global state, so we need to filter them out\n      );\n      setStatuses(reallyCachedStatuses);\n    } else {\n      // const heroIndex = statuses.findIndex((s) => s.id === id);\n      // if (heroIndex !== -1) {\n      //   // Case 2: It's in current statuses. Slice off all descendant statuses after the hero status to be safe\n      //   const slicedStatuses = statuses.slice(0, heroIndex + 1);\n      //   setStatuses(slicedStatuses);\n      // } else {\n      // Case 3: Not cached and not in statuses, let's start from scratch\n      setStatuses([{ id }]);\n      // }\n    }\n\n    (async () => {\n      const heroFetch = () =>\n        pRetry(() => masto.v1.statuses.$select(id).fetch(), {\n          retries: 4,\n        });\n      const contextFetch = pRetry(\n        () => masto.v1.statuses.$select(id).context.fetch(),\n        {\n          retries: 8,\n        },\n      );\n\n      const hasStatus = !!snapStates.statuses[sKey];\n      let heroStatus = snapStates.statuses[sKey];\n      if (hasStatus && !reloadHero) {\n        console.debug('Hero status is cached');\n      } else {\n        try {\n          heroStatus = await heroFetch();\n          saveStatus(heroStatus, instance);\n          // Give time for context to appear\n          await new Promise((resolve) => {\n            setTimeout(resolve, 100);\n          });\n        } catch (e) {\n          console.error(e);\n          setUIState('error');\n          return;\n        }\n      }\n\n      try {\n        const context = await contextFetch;\n        const { ancestors, descendants } = context;\n\n        totalDescendants.current = descendants?.length || 0;\n\n        const missingStatuses = new Set();\n        ancestors.forEach((status) => {\n          saveStatus(status, instance, {\n            skipThreading: true,\n          });\n          if (\n            status.inReplyToId &&\n            !ancestors.find((s) => s.id === status.inReplyToId)\n          ) {\n            missingStatuses.add(status.inReplyToId);\n          }\n        });\n        const ancestorsIsThread = ancestors.every(\n          (s) => s.account.id === heroStatus.account.id,\n        );\n        const nestedDescendants = [];\n        descendants.forEach((status) => {\n          saveStatus(status, instance, {\n            skipThreading: true,\n          });\n\n          if (\n            status.inReplyToId &&\n            !descendants.find((s) => s.id === status.inReplyToId) &&\n            status.inReplyToId !== heroStatus.id\n          ) {\n            missingStatuses.add(status.inReplyToId);\n          }\n\n          if (status.inReplyToAccountId === status.account.id) {\n            // If replying to self, it's part of the thread, level 1\n            nestedDescendants.push(status);\n          } else if (status.inReplyToId === heroStatus.id) {\n            // If replying to the hero status, it's a reply, level 1\n            nestedDescendants.push(status);\n          } else if (\n            !status.inReplyToAccountId &&\n            nestedDescendants.find((s) => s.id === status.inReplyToId) &&\n            status.account.id === heroStatus.account.id\n          ) {\n            // If replying to hero's own statuses, it's part of the thread, level 1\n            nestedDescendants.push(status);\n          } else {\n            // If replying to someone else, it's a reply to a reply, level 2\n            const parent = descendants.find((s) => s.id === status.inReplyToId);\n            if (parent) {\n              if (!parent.__replies) {\n                parent.__replies = [];\n              }\n              parent.__replies.push(status);\n            } else {\n              // If no parent, something is wrong\n              console.warn('No parent found for', status);\n            }\n          }\n        });\n\n        console.log({ ancestors, descendants, nestedDescendants });\n        if (missingStatuses.size) {\n          console.error('Missing statuses', [...missingStatuses]);\n        }\n\n        function expandReplies(_replies) {\n          return _replies?.map((_r) => ({\n            id: _r.id,\n            account: _r.account,\n            repliesCount: _r.repliesCount,\n            content: _r.content,\n            weight: calcStatusWeight(_r),\n            replies: expandReplies(_r.__replies),\n          }));\n        }\n\n        const allStatuses = [\n          ...ancestors.map((s) => ({\n            id: s.id,\n            ancestor: true,\n            isThread: ancestorsIsThread,\n            accountID: s.account.id,\n            account: s.account,\n            repliesCount: s.repliesCount,\n            weight: calcStatusWeight(s),\n          })),\n          {\n            id,\n            accountID: heroStatus.account.id,\n            weight: calcStatusWeight(heroStatus),\n          },\n          ...nestedDescendants.map((s) => ({\n            id: s.id,\n            account: s.account,\n            accountID: s.account.id,\n            descendant: true,\n            thread: s.account.id === heroStatus.account.id,\n            weight: calcStatusWeight(s),\n            replies: expandReplies(s.__replies),\n          })),\n        ];\n\n        setUIState('default');\n        scrollOffsets.current = {\n          offsetTop: heroStatusRef.current?.offsetTop,\n          scrollTop: scrollableRef.current?.scrollTop,\n        };\n\n        // Set limit to hero's index\n        const heroLimit = allStatuses.findIndex((s) => s.id === id);\n        if (heroLimit >= limit) {\n          setLimit(heroLimit + 1);\n        }\n\n        console.log({ allStatuses });\n        setStatuses(allStatuses);\n        cachedStatusesMap[id] = allStatuses;\n\n        // Let's threadify this one\n        // Note that all non-hero statuses will trigger saveStatus which will threadify them too\n        // By right, at this point, all descendant statuses should be cached\n        threadifyStatus(heroStatus, instance);\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n\n    return () => {\n      clearTimeout(heroTimer);\n    };\n  };\n\n  useEffect(initContext, [id, masto]);\n  useEffect(() => {\n    if (!statuses.length) return;\n    console.debug('STATUSES', statuses);\n    const scrollPosition = scrollPositions[id];\n    console.debug('scrollPosition', scrollPosition);\n    if (!!scrollPosition) {\n      console.debug('Case 1', {\n        id,\n        scrollPosition,\n      });\n      scrollableRef.current.scrollTop = scrollPosition;\n    } else if (scrollOffsets.current) {\n      const newScrollOffsets = {\n        offsetTop: heroStatusRef.current?.offsetTop,\n        scrollTop: scrollableRef.current?.scrollTop,\n      };\n      const newScrollTop =\n        newScrollOffsets.offsetTop -\n        scrollOffsets.current.offsetTop +\n        newScrollOffsets.scrollTop;\n      console.debug('Case 2', {\n        scrollOffsets: scrollOffsets.current,\n        newScrollOffsets,\n        newScrollTop,\n        statuses: [...statuses],\n      });\n      scrollableRef.current.scrollTop = newScrollTop;\n    } else if (statuses.length === 1) {\n      console.debug('Case 3', {\n        id,\n      });\n      scrollableRef.current.scrollTop = 0;\n    }\n\n    // RESET\n    scrollOffsets.current = null;\n  }, [statuses]);\n\n  useEffect(() => {\n    if (snapStates.reloadStatusPage <= 0) return;\n    // Delete the cache for the context\n    (async () => {\n      try {\n        const { instanceURL } = getCurrentAccount();\n        const contextURL = `https://${instanceURL}/api/v1/statuses/${id}/context`;\n        console.log('Clear cache', contextURL);\n        const apiCache = await caches.open('api');\n        await apiCache.delete(contextURL, { ignoreVary: true });\n\n        return initContext({\n          reloadHero: true,\n        });\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [snapStates.reloadStatusPage]);\n\n  useEffect(() => {\n    return () => {\n      // RESET\n      scrollPositions = {};\n      states.reloadStatusPage = 0;\n      cachedStatusesMap = {};\n      cachedRepliesToggle = {};\n      statusWeightCache.clear();\n    };\n  }, []);\n\n  const heroStatus = snapStates.statuses[sKey] || snapStates.statuses[id];\n  const heroDisplayName = useMemo(() => {\n    // Remove shortcodes from display name\n    if (!heroStatus) return '';\n    const { account } = heroStatus;\n    const div = document.createElement('div');\n    div.innerHTML = account.displayName;\n    return div.innerText.trim();\n  }, [heroStatus]);\n  const heroContentText = useMemo(() => {\n    if (!heroStatus) return '';\n    let text = statusPeek(heroStatus);\n    if (text.length > 64) {\n      // \"The title should ideally be less than 64 characters in length\"\n      // https://www.w3.org/Provider/Style/TITLE.html\n      text = text.slice(0, 64) + '…';\n    }\n    return text;\n  }, [heroStatus]);\n  useTitle(\n    heroDisplayName && heroContentText\n      ? `${heroDisplayName}: \"${heroContentText}\"`\n      : 'Status',\n    '/:instance?/s/:id',\n  );\n\n  const postInstance = useMemo(() => {\n    if (!heroStatus) return;\n    const { url } = heroStatus;\n    if (!url) return;\n    return new URL(url).hostname;\n  }, [heroStatus]);\n  const postSameInstance = useMemo(() => {\n    if (!postInstance) return;\n    return postInstance === instance;\n  }, [postInstance, instance]);\n\n  const [limit, setLimit] = useState(LIMIT);\n  const showMore = useMemo(() => {\n    // return number of statuses to show\n    return statuses.length - limit;\n  }, [statuses.length, limit]);\n\n  const hasDescendants = statuses.some((s) => s.descendant);\n  const ancestors = statuses.filter((s) => s.ancestor);\n\n  const [heroInView, setHeroInView] = useState(true);\n  const onView = useDebouncedCallback(setHeroInView, 100);\n  const heroPointer = useMemo(() => {\n    // get top offset of heroStatus\n    if (!heroStatusRef.current || heroInView) return null;\n    const { top } = heroStatusRef.current.getBoundingClientRect();\n    return top > 0 ? 'down' : 'up';\n  }, [heroInView]);\n\n  useHotkeys(\n    'esc',\n    () => {\n      location.hash = closeLink;\n    },\n    {\n      // If media is open, esc to close media first\n      // Else close the status page\n      enabled: !showMedia,\n      ignoreEventWhen: (e) => {\n        const hasModal = !!document.querySelector('#modal-container > *');\n        return hasModal;\n      },\n    },\n  );\n  // For backspace, will always close both media and status page\n  useHotkeys('backspace', () => {\n    location.hash = closeLink;\n  });\n\n  useHotkeys('j', () => {\n    const activeStatus = document.activeElement.closest(\n      '.status-link, .status-focus',\n    );\n    const activeStatusRect = activeStatus?.getBoundingClientRect();\n    const allStatusLinks = Array.from(\n      scrollableRef.current.querySelectorAll(STATUSES_SELECTOR),\n    );\n    console.log({ allStatusLinks });\n    if (\n      activeStatus &&\n      activeStatusRect.top < scrollableRef.current.clientHeight &&\n      activeStatusRect.bottom > 0\n    ) {\n      const activeStatusIndex = allStatusLinks.indexOf(activeStatus);\n      let nextStatus = allStatusLinks[activeStatusIndex + 1];\n      if (nextStatus) {\n        nextStatus.focus();\n        nextStatus.scrollIntoView(scrollIntoViewOptions);\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostStatusLink = allStatusLinks.find((statusLink) => {\n        const statusLinkRect = statusLink.getBoundingClientRect();\n        return statusLinkRect.top >= 44 && statusLinkRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostStatusLink) {\n        topmostStatusLink.focus();\n        topmostStatusLink.scrollIntoView(scrollIntoViewOptions);\n      }\n    }\n  });\n\n  useHotkeys('k', () => {\n    const activeStatus = document.activeElement.closest(\n      '.status-link, .status-focus',\n    );\n    const activeStatusRect = activeStatus?.getBoundingClientRect();\n    const allStatusLinks = Array.from(\n      scrollableRef.current.querySelectorAll(STATUSES_SELECTOR),\n    );\n    if (\n      activeStatus &&\n      activeStatusRect.top < scrollableRef.current.clientHeight &&\n      activeStatusRect.bottom > 0\n    ) {\n      const activeStatusIndex = allStatusLinks.indexOf(activeStatus);\n      let prevStatus = allStatusLinks[activeStatusIndex - 1];\n      if (prevStatus) {\n        prevStatus.focus();\n        prevStatus.scrollIntoView(scrollIntoViewOptions);\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostStatusLink = allStatusLinks.find((statusLink) => {\n        const statusLinkRect = statusLink.getBoundingClientRect();\n        return statusLinkRect.top >= 44 && statusLinkRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostStatusLink) {\n        topmostStatusLink.focus();\n        topmostStatusLink.scrollIntoView(scrollIntoViewOptions);\n      }\n    }\n  });\n\n  // NOTE: I'm not sure if 'x' is the best shortcut for this, might change it later\n  // IDEA: x is for expand\n  useHotkeys('x', () => {\n    const activeStatus = document.activeElement.closest(\n      '.status-link, .status-focus',\n    );\n    if (activeStatus) {\n      const details = activeStatus.nextElementSibling;\n      if (details && details.tagName.toLowerCase() === 'details') {\n        details.open = !details.open;\n      }\n    }\n  });\n\n  const { nearReachStart } = useScroll({\n    scrollableRef,\n    distanceFromStartPx: 16,\n  });\n\n  const initialPageState = useRef(showMedia ? 'media+status' : 'status');\n\n  const handleMediaClick = useCallback(\n    (e, i, media, status) => {\n      e.preventDefault();\n      e.stopPropagation();\n      setSearchParams({\n        media: i + 1,\n        mediaStatusID: status.id,\n      });\n    },\n    [id],\n  );\n\n  const handleStatusLinkClick = useCallback((e, status) => {\n    resetScrollPosition(status.id);\n  }, []);\n\n  useEffect(() => {\n    let timer;\n    if (mediaStatusID && showMedia) {\n      timer = setTimeout(() => {\n        const status = scrollableRef.current?.querySelector(\n          `.status-link[href*=\"/${mediaStatusID}\"]`,\n        );\n        if (status) {\n          status.scrollIntoView(scrollIntoViewOptions);\n        }\n      }, 400); // After CSS transition\n    }\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [mediaStatusID, showMedia]);\n\n  const renderStatus = useCallback(\n    (status) => {\n      const {\n        id: statusID,\n        ancestor,\n        isThread,\n        descendant,\n        thread,\n        replies,\n        repliesCount,\n        weight,\n      } = status;\n      const isHero = statusID === id;\n      // const StatusParent = useCallback(\n      //   (props) =>\n      //     isThread || thread || ancestor ? (\n      //       <Link\n      //         class=\"status-link\"\n      //         to={\n      //           instance ? `/${instance}/s/${statusID}` : `/s/${statusID}`\n      //         }\n      //         onClick={() => {\n      //           resetScrollPosition(statusID);\n      //         }}\n      //         {...props}\n      //       />\n      //     ) : (\n      //       <div class=\"status-focus\" tabIndex={0} {...props} />\n      //     ),\n      //   [isThread, thread],\n      // );\n      return (\n        <li\n          key={statusID}\n          ref={isHero ? heroStatusRef : null}\n          class={`${ancestor ? 'ancestor' : ''} ${\n            descendant ? 'descendant' : ''\n          } ${thread ? 'thread' : ''} ${isHero ? 'hero' : ''}`}\n        >\n          {isHero ? (\n            <>\n              <InView\n                threshold={0.1}\n                onChange={onView}\n                class=\"status-focus\"\n                tabIndex={0}\n              >\n                <Status\n                  statusID={statusID}\n                  instance={instance}\n                  withinContext\n                  size=\"l\"\n                  enableTranslate\n                  forceTranslate={translate}\n                />\n              </InView>\n              {uiState !== 'loading' && !authenticated ? (\n                <div class=\"post-status-banner\">\n                  <p>\n                    You're not logged in. Interactions (reply, boost, etc) are\n                    not possible.\n                  </p>\n                  <Link to=\"/login\" class=\"button\">\n                    Log in\n                  </Link>\n                </div>\n              ) : (\n                !sameInstance && (\n                  <div class=\"post-status-banner\">\n                    <p>\n                      This post is from another instance (<b>{instance}</b>).\n                      Interactions (reply, boost, etc) are not possible.\n                    </p>\n                    <button\n                      type=\"button\"\n                      disabled={uiState === 'loading'}\n                      onClick={() => {\n                        setUIState('loading');\n                        (async () => {\n                          try {\n                            const results = await currentMasto.v2.search.fetch({\n                              q: heroStatus.url,\n                              type: 'statuses',\n                              resolve: true,\n                              limit: 1,\n                            });\n                            if (results.statuses.length) {\n                              const status = results.statuses[0];\n                              location.hash = currentInstance\n                                ? `/${currentInstance}/s/${status.id}`\n                                : `/s/${status.id}`;\n                            } else {\n                              throw new Error('No results');\n                            }\n                          } catch (e) {\n                            setUIState('default');\n                            alert('Error: ' + e);\n                            console.error(e);\n                          }\n                        })();\n                      }}\n                    >\n                      <Icon icon=\"transfer\" /> Switch to my instance to enable\n                      interactions\n                    </button>\n                  </div>\n                )\n              )}\n            </>\n          ) : (\n            // <StatusParent>\n            <Link\n              class=\"status-link\"\n              to={instance ? `/${instance}/s/${statusID}` : `/s/${statusID}`}\n              onClick={() => {\n                resetScrollPosition(statusID);\n              }}\n            >\n              <Status\n                statusID={statusID}\n                instance={instance}\n                withinContext\n                size={thread || ancestor ? 'm' : 's'}\n                enableTranslate\n                onMediaClick={handleMediaClick}\n                onStatusLinkClick={handleStatusLinkClick}\n              />\n              {ancestor && isThread && repliesCount > 1 && (\n                <div class=\"replies-link\">\n                  <Icon icon=\"comment2\" />{' '}\n                  <span title={repliesCount}>\n                    {shortenNumber(repliesCount)}\n                  </span>\n                </div>\n              )}{' '}\n              {/* {replies?.length > LIMIT && (\n                        <div class=\"replies-link\">\n                          <Icon icon=\"comment\" />{' '}\n                          <span title={replies.length}>\n                            {shortenNumber(replies.length)}\n                          </span>\n                        </div>\n                      )} */}\n              {/* </StatusParent> */}\n            </Link>\n          )}\n          {descendant && replies?.length > 0 && (\n            <SubComments\n              instance={instance}\n              replies={replies}\n              hasParentThread={thread}\n              level={1}\n              accWeight={weight}\n              openAll={totalDescendants.current < SUBCOMMENTS_OPEN_ALL_LIMIT}\n            />\n          )}\n          {uiState === 'loading' &&\n            isHero &&\n            !!heroStatus?.repliesCount &&\n            !hasDescendants && (\n              <div class=\"status-loading\">\n                <Loader />\n              </div>\n            )}\n          {uiState === 'error' &&\n            isHero &&\n            !!heroStatus?.repliesCount &&\n            !hasDescendants && (\n              <div class=\"status-error\">\n                Unable to load replies.\n                <br />\n                <button\n                  type=\"button\"\n                  class=\"plain\"\n                  onClick={() => {\n                    states.reloadStatusPage++;\n                  }}\n                >\n                  Try again\n                </button>\n              </div>\n            )}\n        </li>\n      );\n    },\n    [\n      id,\n      instance,\n      uiState,\n      authenticated,\n      sameInstance,\n      translate,\n      handleMediaClick,\n      handleStatusLinkClick,\n      hasDescendants,\n    ],\n  );\n\n  const prevLocationIsStatusPage = useMemo(() => {\n    // Navigation API\n    if ('navigation' in window && navigation?.entries) {\n      const prevEntry = navigation.entries()[navigation.currentEntry.index - 1];\n      if (prevEntry?.url) {\n        return STATUS_URL_REGEX.test(prevEntry.url);\n      }\n    }\n    return STATUS_URL_REGEX.test(states.prevLocation?.pathname);\n  }, [sKey]);\n\n  return (\n    <div\n      tabIndex=\"-1\"\n      ref={scrollableRef}\n      class={`status-deck deck contained ${\n        statuses.length > 1 ? 'padded-bottom' : ''\n      } ${\n        initialPageState.current === 'status' && !firstLoad.current\n          ? 'slide-in'\n          : ''\n      } ${viewMode ? `deck-view-${viewMode}` : ''}`}\n      onAnimationEnd={(e) => {\n        // Fix the bounce effect when switching viewMode\n        // `slide-in` animation kicks in when switching viewMode\n        if (initialPageState.current === 'status') {\n          // e.target.classList.remove('slide-in');\n          initialPageState.current = null;\n        }\n      }}\n    >\n      <header\n        class={`${heroInView ? 'inview' : ''} ${\n          uiState === 'loading' ? 'loading' : ''\n        }`}\n        onDblClick={(e) => {\n          // reload statuses\n          states.reloadStatusPage++;\n        }}\n      >\n        {/* <div>\n            <Link class=\"button plain deck-close\" href={closeLink}>\n              <Icon icon=\"chevron-left\" size=\"xl\" />\n            </Link>\n          </div> */}\n        <div class=\"header-grid header-grid-2\">\n          <h1>\n            {prevLocationIsStatusPage && (\n              <button\n                type=\"button\"\n                class=\"plain deck-back\"\n                onClick={() => {\n                  history.back();\n                }}\n              >\n                <Icon icon=\"chevron-left\" size=\"xl\" />\n              </button>\n            )}\n            {!heroInView && heroStatus && uiState !== 'loading' ? (\n              <>\n                <span class=\"hero-heading\">\n                  <NameText\n                    account={heroStatus.account}\n                    instance={instance}\n                    showAvatar\n                    short\n                  />{' '}\n                  <span class=\"insignificant\">\n                    &bull;{' '}\n                    <RelativeTime\n                      datetime={heroStatus.createdAt}\n                      format=\"micro\"\n                    />\n                  </span>\n                </span>{' '}\n                <button\n                  type=\"button\"\n                  class=\"ancestors-indicator light small\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    heroStatusRef.current.scrollIntoView({\n                      behavior: 'smooth',\n                      block: 'start',\n                    });\n                  }}\n                  title=\"Go to main post\"\n                >\n                  <Icon\n                    icon={heroPointer === 'down' ? 'arrow-down' : 'arrow-up'}\n                  />\n                </button>\n              </>\n            ) : (\n              <>\n                Post{' '}\n                <button\n                  type=\"button\"\n                  class=\"ancestors-indicator light small\"\n                  onClick={(e) => {\n                    // Scroll to top\n                    e.preventDefault();\n                    e.stopPropagation();\n                    scrollableRef.current.scrollTo({\n                      top: 0,\n                      behavior: 'smooth',\n                    });\n                  }}\n                  hidden={!ancestors.length || nearReachStart}\n                  title={`${ancestors.length} posts above ‒ Go to top`}\n                >\n                  <Icon icon=\"arrow-up\" />\n                  {ancestors\n                    .filter(\n                      (a, i, arr) =>\n                        arr.findIndex((b) => b.accountID === a.accountID) === i,\n                    )\n                    .slice(0, 3)\n                    .map((ancestor) => (\n                      <Avatar\n                        key={ancestor.account.id}\n                        url={ancestor.account.avatar}\n                        alt={ancestor.account.displayName}\n                      />\n                    ))}\n                  {/* <Icon icon=\"comment\" />{' '} */}\n                  {ancestors.length > 3 && (\n                    <>\n                      {' '}\n                      <span class=\"insignificant\">\n                        {shortenNumber(ancestors.length)}\n                      </span>\n                    </>\n                  )}\n                </button>\n              </>\n            )}\n          </h1>\n          <div class=\"header-side\">\n            <button\n              type=\"button\"\n              class=\"plain4 button-switch-view\"\n              style={{\n                display: viewMode === 'full' ? '' : 'none',\n              }}\n              onClick={() => {\n                setViewMode(null);\n                searchParams.delete('media');\n                searchParams.delete('media-only');\n                searchParams.delete('view');\n                setSearchParams(searchParams);\n              }}\n              title=\"Switch to Side Peek view\"\n            >\n              <Icon icon=\"layout4\" size=\"l\" />\n            </button>\n            <Menu2\n              align=\"end\"\n              portal={{\n                // Need this, else the menu click will cause scroll jump\n                target: scrollableRef.current,\n              }}\n              menuButton={\n                <button type=\"button\" class=\"button plain4\">\n                  <Icon icon=\"more\" alt=\"Actions\" size=\"xl\" />\n                </button>\n              }\n            >\n              <MenuItem\n                disabled={uiState === 'loading'}\n                onClick={() => {\n                  states.reloadStatusPage++;\n                }}\n              >\n                <Icon icon=\"refresh\" />\n                <span>Refresh</span>\n              </MenuItem>\n              <MenuItem\n                className=\"menu-switch-view\"\n                onClick={() => {\n                  setViewMode(viewMode === 'full' ? null : 'full');\n                  searchParams.delete('media');\n                  searchParams.delete('media-only');\n                  if (viewMode === 'full') {\n                    searchParams.delete('view');\n                  } else {\n                    searchParams.set('view', 'full');\n                  }\n                  setSearchParams(searchParams);\n                }}\n              >\n                <Icon\n                  icon={\n                    {\n                      '': 'layout5',\n                      full: 'layout4',\n                    }[viewMode || '']\n                  }\n                />\n                <span>\n                  Switch to {viewMode === 'full' ? 'Side Peek' : 'Full'} view\n                </span>\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  // Click all buttons with class .spoiler but not .spoiling\n                  const buttons = Array.from(\n                    scrollableRef.current.querySelectorAll(\n                      'button.spoiler:not(.spoiling)',\n                    ),\n                  );\n                  buttons.forEach((button) => {\n                    button.click();\n                  });\n                }}\n              >\n                <Icon icon=\"eye-open\" /> <span>Show all sensitive content</span>\n              </MenuItem>\n              <MenuDivider />\n              <MenuHeader className=\"plain\">Experimental</MenuHeader>\n              <MenuItem\n                disabled={!postInstance || postSameInstance}\n                onClick={() => {\n                  const statusURL = getInstanceStatusURL(heroStatus.url);\n                  if (statusURL) {\n                    location.hash = statusURL;\n                  } else {\n                    alert('Unable to switch');\n                  }\n                }}\n              >\n                <Icon icon=\"transfer\" />\n                <small class=\"menu-double-lines\">\n                  Switch to post's instance\n                  {postInstance ? (\n                    <>\n                      {' '}\n                      (<b>{postInstance}</b>)\n                    </>\n                  ) : (\n                    ''\n                  )}\n                </small>\n              </MenuItem>\n            </Menu2>\n            <Link class=\"button plain deck-close\" to={closeLink}>\n              <Icon icon=\"x\" size=\"xl\" />\n            </Link>\n          </div>\n        </div>\n      </header>\n      {!!statuses.length && heroStatus ? (\n        <ul\n          class={`timeline flat contextual grow ${\n            uiState === 'loading' ? 'loading' : ''\n          }`}\n        >\n          {statuses.slice(0, limit).map(renderStatus)}\n          {showMore > 0 && (\n            <li>\n              <button\n                type=\"button\"\n                class=\"plain block show-more\"\n                disabled={uiState === 'loading'}\n                onClick={() => setLimit((l) => l + LIMIT)}\n                style={{ marginBlockEnd: '6em' }}\n                data-state-post-ids={statuses\n                  .slice(limit)\n                  .map((s) => statusKey(s.id, instance))\n                  .join(' ')}\n              >\n                <div class=\"ib avatars-bunch\">\n                  {/* show avatars for first 5 statuses */}\n                  {statuses.slice(limit, limit + 5).map((status) => (\n                    <Avatar\n                      key={status.id}\n                      url={status.account.avatarStatic}\n                      // title={`${status.avatar.displayName} (@${status.avatar.acct})`}\n                    />\n                  ))}\n                </div>{' '}\n                <div class=\"ib\">\n                  Show more&hellip;{' '}\n                  <span class=\"tag\">\n                    {showMore > LIMIT ? `${LIMIT}+` : showMore}\n                  </span>\n                </div>\n              </button>\n            </li>\n          )}\n        </ul>\n      ) : (\n        <>\n          {uiState === 'loading' && (\n            <ul class=\"timeline flat contextual grow loading\">\n              <li>\n                <Status skeleton size=\"l\" />\n              </li>\n            </ul>\n          )}\n          {uiState === 'error' && (\n            <p class=\"ui-state\">\n              Unable to load post\n              <br />\n              <br />\n              <button\n                type=\"button\"\n                onClick={() => {\n                  states.reloadStatusPage++;\n                }}\n              >\n                Try again\n              </button>\n            </p>\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n\nfunction SubComments({\n  replies,\n  instance,\n  hasParentThread,\n  level,\n  accWeight,\n  openAll,\n}) {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  // Total comments count, including sub-replies\n  const diveDeep = (replies) => {\n    return replies.reduce((acc, reply) => {\n      const { repliesCount, replies } = reply;\n      const count = replies?.length || repliesCount;\n      return acc + count + diveDeep(replies || []);\n    }, 0);\n  };\n  const totalComments = replies.length + diveDeep(replies);\n  const sameCount = replies.length === totalComments;\n\n  // Get the first 3 accounts, unique by id\n  const accounts = replies\n    .map((r) => r.account)\n    .filter((a, i, arr) => arr.findIndex((b) => b.id === a.id) === i)\n    .slice(0, 3);\n\n  const totalWeight = useMemo(() => {\n    return replies?.reduce((acc, reply) => {\n      return acc + reply?.weight;\n    }, accWeight);\n  }, [accWeight, replies?.length]);\n\n  let open = false;\n  if (openAll) {\n    open = true;\n  } else if (totalWeight <= MAX_WEIGHT) {\n    open = true;\n  } else if (!hasParentThread && totalComments === 1) {\n    const shortReply = calcStatusWeight(replies[0]) < 2;\n    if (shortReply) open = true;\n  }\n  const openBefore = cachedRepliesToggle[replies[0].id];\n\n  const handleMediaClick = useCallback((e, i, media, status) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setSearchParams({\n      media: i + 1,\n      mediaStatusID: status.id,\n    });\n  }, []);\n\n  const detailsRef = useRef();\n  useLayoutEffect(() => {\n    function handleScroll(e) {\n      e.target.dataset.scrollLeft = e.target.scrollLeft;\n    }\n    detailsRef.current?.addEventListener('scroll', handleScroll, {\n      passive: true,\n    });\n    return () => {\n      detailsRef.current?.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n\n  return (\n    <details\n      ref={detailsRef}\n      class=\"replies\"\n      open={openBefore || open}\n      onToggle={(e) => {\n        const { open } = e.target;\n        // use first reply as ID\n        cachedRepliesToggle[replies[0].id] = open;\n      }}\n      style={{\n        '--comments-level': level,\n      }}\n      data-comments-level={level}\n      data-comments-level-overflow={level > 4}\n    >\n      <summary class=\"replies-summary\" hidden={open}>\n        <span class=\"avatars\">\n          {accounts.map((a) => (\n            <Avatar\n              key={a.id}\n              url={a.avatarStatic}\n              title={`${a.displayName} @${a.username}`}\n              squircle={a?.bot}\n            />\n          ))}\n        </span>\n        <b>\n          <span title={replies.length}>{shortenNumber(replies.length)}</span>{' '}\n          repl\n          {replies.length === 1 ? 'y' : 'ies'}\n        </b>\n        {!sameCount && totalComments > 1 && (\n          <>\n            {' '}\n            &middot;{' '}\n            <span>\n              <span title={totalComments}>{shortenNumber(totalComments)}</span>{' '}\n              comment\n              {totalComments === 1 ? '' : 's'}\n            </span>\n          </>\n        )}\n      </summary>\n      <ul>\n        {replies.map((r) => (\n          <li key={r.id}>\n            <Link\n              class=\"status-link\"\n              to={instance ? `/${instance}/s/${r.id}` : `/s/${r.id}`}\n              onClick={() => {\n                resetScrollPosition(r.id);\n              }}\n            >\n              {/* <div class=\"status-focus\" tabIndex={0}> */}\n              <Status\n                statusID={r.id}\n                instance={instance}\n                withinContext\n                size=\"s\"\n                enableTranslate\n                onMediaClick={handleMediaClick}\n              />\n              {!r.replies?.length && r.repliesCount > 0 && (\n                <div class=\"replies-link\">\n                  <Icon icon=\"comment2\" />{' '}\n                  <span title={r.repliesCount}>\n                    {shortenNumber(r.repliesCount)}\n                  </span>\n                </div>\n              )}\n              {/* </div> */}\n            </Link>\n            {r.replies?.length && (\n              <SubComments\n                instance={instance}\n                replies={r.replies}\n                level={level + 1}\n                accWeight={!open ? r.weight : totalWeight}\n                openAll={openAll}\n              />\n            )}\n          </li>\n        ))}\n      </ul>\n    </details>\n  );\n}\n\nconst MEDIA_VIRTUAL_LENGTH = 140;\nconst POLL_VIRTUAL_LENGTH = 35;\nconst CARD_VIRTUAL_LENGTH = 70;\nconst WEIGHT_SEGMENT = 140;\nconst statusWeightCache = new Map();\nfunction calcStatusWeight(status) {\n  const cachedWeight = statusWeightCache.get(status.id);\n  if (cachedWeight) return cachedWeight;\n  const { spoilerText, content, mediaAttachments, poll, card } = status;\n  const length = htmlContentLength(spoilerText + content);\n  const mediaLength = mediaAttachments?.length ? MEDIA_VIRTUAL_LENGTH : 0;\n  const pollLength = (poll?.options?.length || 0) * POLL_VIRTUAL_LENGTH;\n  const cardLength =\n    card && (mediaAttachments?.length || poll?.options?.length)\n      ? 0\n      : CARD_VIRTUAL_LENGTH;\n  const totalLength = length + mediaLength + pollLength + cardLength;\n  const weight = totalLength / WEIGHT_SEGMENT;\n  statusWeightCache.set(status.id, weight);\n  return weight;\n}\n\nexport default memo(StatusPage);\n","import { useParams } from 'react-router-dom';\n\nimport Status from './status';\n\nexport default function StatusRoute() {\n  const params = useParams();\n  const { id, instance } = params;\n  return <Status id={id} instance={instance} />;\n}\n","export default \"__VITE_ASSET__W5CngKHO__\"","export default \"__VITE_ASSET__vmqRZ5q5__\"","export default \"__VITE_ASSET__DFAo1Udm__\"","export default \"__VITE_ASSET__D2_o1n6___\"","export default \"__VITE_ASSET__ySLnBMku__\"","export default \"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20xml:space='preserve'%20fill-rule='evenodd'%20stroke-linejoin='round'%20stroke-miterlimit='2'%20clip-rule='evenodd'%20viewBox='0%200%20102%2028'%3e%3cpath%20fill='none'%20d='M0%200h101.5v27.5H0z'/%3e%3cg%20fill-rule='nonzero'%3e%3cpath%20fill='url(%23a)'%20d='M2.32%2021.85c1.4%200%202.21-.85%202.21-2.3v-4.64H8.5c4.45%200%207.54-2.9%207.54-7.24%200-4.35-2.98-7.24-7.32-7.24h-6.4C.93.43.11%201.28.11%202.73v16.82c0%201.45.82%202.3%202.21%202.3Zm2.21-10.4V3.94h3c2.54%200%204%201.34%204%203.75s-1.47%203.76-4%203.76h-3Z'/%3e%3cpath%20fill='url(%23b)'%20d='M20.52%2021.88c1.25%200%202.13-.76%202.13-2.23v-7.04c0-2.07%201.2-3.49%203.21-3.49%201.95%200%202.95%201.23%202.95%203.25v7.28c0%201.47.89%202.23%202.13%202.23%201.26%200%202.14-.76%202.14-2.23v-8.18c0-3.64-1.99-5.9-5.48-5.9-2.38%200-4.1%201.12-4.93%203.1h-.09V2.3c0-1.38-.78-2.2-2.1-2.2-1.31%200-2.1.82-2.1%202.2v17.34c0%201.47.9%202.23%202.14%202.23Z'/%3e%3cpath%20fill='url(%23c)'%20d='M40.45%2021.82c1.96%200%203.93-.98%204.8-2.65h.1v.8c.08%201.27.89%201.91%202.05%201.91%201.21%200%202.08-.73%202.08-2.15v-8.95c0-3.17-2.63-5.25-6.65-5.25-3.26%200-5.78%201.16-6.5%203.04-.15.32-.23.63-.23.96%200%20.97.75%201.64%201.79%201.64.69%200%201.23-.26%201.7-.79.95-1.23%201.74-1.65%203.04-1.65%201.62%200%202.64.85%202.64%202.31v1.04l-3.95.24c-3.93.23-6.13%201.88-6.13%204.74%200%202.83%202.27%204.76%205.26%204.76Zm1.4-3.09c-1.43%200-2.4-.73-2.4-1.9%200-1.12.91-1.83%202.51-1.95l3.31-.2v1.14c0%201.7-1.54%202.91-3.41%202.91Z'/%3e%3cpath%20fill='url(%23d)'%20d='M54.37%2021.88c1.26%200%202.14-.76%202.14-2.23v-7.09c0-2.03%201.21-3.44%203.13-3.44s2.89%201.17%202.89%203.22v7.31c0%201.47.88%202.23%202.14%202.23%201.24%200%202.13-.76%202.13-2.23v-8.2c0-3.68-1.96-5.87-5.45-5.87-2.41%200-4%201.07-4.83%203.01h-.09v-.87c0-1.35-.85-2.17-2.14-2.17-1.28%200-2.06.82-2.06%202.15v11.95c0%201.47.9%202.23%202.14%202.23Z'/%3e%3cpath%20fill='url(%23e)'%20d='M71.65%2027.17c1.26%200%202.14-.76%202.14-2.23v-6h.09a5.15%205.15%200%200%200%204.88%202.88c3.92%200%206.35-3.05%206.35-8.1%200-5.07-2.44-8.1-6.43-8.1a5.12%205.12%200%200%200-4.86%202.99h-.09v-.85c0-1.45-.88-2.21-2.1-2.21-1.24%200-2.11.76-2.11%202.2v17.2c0%201.46.89%202.22%202.13%202.22Zm5.6-8.8c-2.1%200-3.47-1.8-3.47-4.65%200-2.81%201.37-4.67%203.47-4.67%202.14%200%203.49%201.83%203.49%204.67%200%202.86-1.35%204.66-3.5%204.66Z'/%3e%3cpath%20fill='url(%23f)'%20d='M89.61%2027.39c3.44%200%205.26-1.5%206.73-5.55l4.81-13.1a4%204%200%200%200%20.24-1.26c0-1.13-.85-1.93-2.08-1.93-1.1%200-1.71.51-2.07%201.7l-3.4%2010.9h-.08L90.35%207.28c-.36-1.25-.94-1.73-2.07-1.73-1.26%200-2.21.83-2.21%201.99%200%20.35.09.82.25%201.26l5%2013.21-.21.56c-.52%201.1-1.32%201.42-2.07%201.42l-.75-.01c-.96%200-1.56.54-1.56%201.4%200%201.29%201%202%202.88%202Z'/%3e%3c/g%3e%3cdefs%3e%3cradialGradient%20id='a'%20cx='0'%20cy='0'%20r='1'%20gradientTransform='rotate(28.51%20.06%20.22)%20scale(57.6252)'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20offset='0'%20stop-color='%23a4bff7'/%3e%3cstop%20offset='1'%20stop-color='%236081e6'/%3e%3c/radialGradient%3e%3cradialGradient%20id='b'%20cx='0'%20cy='0'%20r='1'%20gradientTransform='rotate(28.51%20.06%20.22)%20scale(57.6252)'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20offset='0'%20stop-color='%23a4bff7'/%3e%3cstop%20offset='1'%20stop-color='%236081e6'/%3e%3c/radialGradient%3e%3cradialGradient%20id='c'%20cx='0'%20cy='0'%20r='1'%20gradientTransform='rotate(28.51%20.06%20.22)%20scale(57.6252)'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20offset='0'%20stop-color='%23a4bff7'/%3e%3cstop%20offset='1'%20stop-color='%236081e6'/%3e%3c/radialGradient%3e%3cradialGradient%20id='d'%20cx='0'%20cy='0'%20r='1'%20gradientTransform='rotate(28.51%20.06%20.22)%20scale(57.6252)'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20offset='0'%20stop-color='%23a4bff7'/%3e%3cstop%20offset='1'%20stop-color='%236081e6'/%3e%3c/radialGradient%3e%3cradialGradient%20id='e'%20cx='0'%20cy='0'%20r='1'%20gradientTransform='rotate(28.51%20.06%20.22)%20scale(57.6252)'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20offset='0'%20stop-color='%23a4bff7'/%3e%3cstop%20offset='1'%20stop-color='%236081e6'/%3e%3c/radialGradient%3e%3cradialGradient%20id='f'%20cx='0'%20cy='0'%20r='1'%20gradientTransform='rotate(28.51%20.06%20.22)%20scale(57.6252)'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20offset='0'%20stop-color='%23a4bff7'/%3e%3cstop%20offset='1'%20stop-color='%236081e6'/%3e%3c/radialGradient%3e%3c/defs%3e%3c/svg%3e\"","import './welcome.css';\n\nimport boostsCarouselUrl from '../assets/features/boosts-carousel.jpg';\nimport groupedNotificationsUrl from '../assets/features/grouped-notifications.jpg';\nimport multiColumnUrl from '../assets/features/multi-column.jpg';\nimport multiHashtagTimelineUrl from '../assets/features/multi-hashtag-timeline.jpg';\nimport nestedCommentsThreadUrl from '../assets/features/nested-comments-thread.jpg';\nimport logoText from '../assets/logo-text.svg';\nimport logo from '../assets/logo.svg';\n\nimport Link from '../components/link';\nimport states from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nfunction Welcome() {\n  useTitle(null, ['/', '/welcome']);\n  return (\n    <main id=\"welcome\">\n      <div class=\"hero-container\">\n        <div class=\"hero-content\">\n          <h1>\n            <img\n              src={logo}\n              alt=\"\"\n              width=\"160\"\n              height=\"160\"\n              style={{\n                aspectRatio: '1/1',\n                marginBlockEnd: -16,\n              }}\n            />\n            <img src={logoText} alt=\"Phanpy\" width=\"200\" />\n          </h1>\n          <p class=\"desc\">A minimalistic opinionated Mastodon web client.</p>\n          <p>\n            <Link to=\"/login\" class=\"button\">\n              Log in with Mastodon\n            </Link>\n          </p>\n          <p class=\"insignificant\">\n            <small>\n              Connect your existing Mastodon/Fediverse account.\n              <br />\n              Your credentials are not stored on this server.\n            </small>\n          </p>\n        </div>\n        <p>\n          <a href=\"https://github.com/cheeaun/phanpy\" target=\"_blank\">\n            Built\n          </a>{' '}\n          by{' '}\n          <a\n            href=\"https://mastodon.social/@cheeaun\"\n            target=\"_blank\"\n            onClick={(e) => {\n              e.preventDefault();\n              states.showAccount = 'cheeaun@mastodon.social';\n            }}\n          >\n            @cheeaun\n          </a>\n          .{' '}\n          <a\n            href=\"https://github.com/cheeaun/phanpy/blob/main/PRIVACY.MD\"\n            target=\"_blank\"\n          >\n            Privacy Policy\n          </a>\n          .\n        </p>\n      </div>\n      <div id=\"why-container\">\n        <div class=\"sections\">\n          <section>\n            <img\n              src={boostsCarouselUrl}\n              alt=\"Screenshot of Boosts Carousel\"\n              loading=\"lazy\"\n            />\n            <h4>Boosts Carousel</h4>\n            <p>\n              Visually separate original posts and re-shared posts (boosted\n              posts).\n            </p>\n          </section>\n          <section>\n            <img\n              src={nestedCommentsThreadUrl}\n              alt=\"Screenshot of nested comments thread\"\n              loading=\"lazy\"\n            />\n            <h4>Nested comments thread</h4>\n            <p>Effortlessly follow conversations. Semi-collapsible replies.</p>\n          </section>\n          <section>\n            <img\n              src={groupedNotificationsUrl}\n              alt=\"Screenshot of grouped notifications\"\n              loading=\"lazy\"\n            />\n            <h4>Grouped notifications</h4>\n            <p>\n              Similar notifications are grouped and collapsed to reduce clutter.\n            </p>\n          </section>\n          <section>\n            <img\n              src={multiColumnUrl}\n              alt=\"Screenshot of multi-column UI\"\n              loading=\"lazy\"\n            />\n            <h4>Single or multi-column</h4>\n            <p>\n              By default, single column for zen-mode seekers. Configurable\n              multi-column for power users.\n            </p>\n          </section>\n          <section>\n            <img\n              src={multiHashtagTimelineUrl}\n              alt=\"Screenshot of multi-hashtag timeline with a form to add more hashtags\"\n              loading=\"lazy\"\n            />\n            <h4>Multi-hashtag timeline</h4>\n            <p>Up to 5 hashtags combined into a single timeline.</p>\n          </section>\n        </div>\n      </div>\n    </main>\n  );\n}\n\nexport default Welcome;\n","// Replace alert() with toastify-js\nimport Toastify from 'toastify-js';\n\nconst nativeAlert = window.alert;\nif (!window.__nativeAlert) window.__nativeAlert = nativeAlert;\n\nwindow.alert = function (message) {\n  console.debug(\n    'ALERT: This is a custom alert() function. Native alert() is still available as window.__nativeAlert()',\n  );\n  // If Error object, show the message\n  if (message instanceof Error && message?.message) {\n    message = message.message;\n  }\n  // If not string, stringify it\n  if (typeof message !== 'string') {\n    message = JSON.stringify(message);\n  }\n\n  const toast = Toastify({\n    text: message,\n    className: 'alert',\n    gravity: 'top',\n    position: 'center',\n    duration: 10_000,\n    offset: {\n      y: 48,\n    },\n    onClick: () => {\n      toast.hideToast();\n    },\n  });\n  toast.showToast();\n};\n","import './app.css';\n\nimport debounce from 'just-debounce-it';\nimport {\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'preact/hooks';\nimport { matchPath, Route, Routes, useLocation } from 'react-router-dom';\nimport 'swiped-events';\nimport { subscribe } from 'valtio';\n\nimport BackgroundService from './components/background-service';\nimport ComposeButton from './components/compose-button';\nimport { ICONS } from './components/icon';\nimport KeyboardShortcutsHelp from './components/keyboard-shortcuts-help';\nimport Loader from './components/loader';\nimport Modals from './components/modals';\nimport NotificationService from './components/notification-service';\nimport SearchCommand from './components/search-command';\nimport Shortcuts from './components/shortcuts';\nimport NotFound from './pages/404';\nimport AccountStatuses from './pages/account-statuses';\nimport Bookmarks from './pages/bookmarks';\nimport Favourites from './pages/favourites';\nimport FollowedHashtags from './pages/followed-hashtags';\nimport Following from './pages/following';\nimport Hashtag from './pages/hashtag';\nimport Home from './pages/home';\nimport HttpRoute from './pages/http-route';\nimport List from './pages/list';\nimport Lists from './pages/lists';\nimport Login from './pages/login';\nimport Mentions from './pages/mentions';\nimport Notifications from './pages/notifications';\nimport Public from './pages/public';\nimport Search from './pages/search';\nimport StatusRoute from './pages/status-route';\nimport Trending from './pages/trending';\nimport Welcome from './pages/welcome';\nimport {\n  api,\n  initAccount,\n  initClient,\n  initInstance,\n  initPreferences,\n} from './utils/api';\nimport { getAccessToken } from './utils/auth';\nimport focusDeck from './utils/focus-deck';\nimport states, { initStates, statusKey } from './utils/states';\nimport store from './utils/store';\nimport { getCurrentAccount } from './utils/store-utils';\nimport './utils/toast-alert';\n\nwindow.__STATES__ = states;\nwindow.__STATES_STATS__ = () => {\n  const keys = [\n    'statuses',\n    'accounts',\n    'spoilers',\n    'unfurledLinks',\n    'statusQuotes',\n  ];\n  const counts = {};\n  keys.forEach((key) => {\n    counts[key] = Object.keys(states[key]).length;\n  });\n  console.warn('STATE stats', counts);\n\n  const { statuses } = states;\n  const unmountedPosts = [];\n  for (const key in statuses) {\n    const $post = document.querySelector(\n      `[data-state-post-id~=\"${key}\"], [data-state-post-ids~=\"${key}\"]`,\n    );\n    if (!$post) {\n      unmountedPosts.push(key);\n    }\n  }\n  console.warn('Unmounted posts', unmountedPosts.length, unmountedPosts);\n};\n\n// Experimental \"garbage collection\" for states\n// Every 15 minutes\n// Only posts for now\nsetInterval(() => {\n  if (!window.__IDLE__) return;\n  const { statuses, unfurledLinks, notifications } = states;\n  let keysCount = 0;\n  const { instance } = api();\n  for (const key in statuses) {\n    if (!window.__IDLE__) break;\n    try {\n      const $post = document.querySelector(\n        `[data-state-post-id~=\"${key}\"], [data-state-post-ids~=\"${key}\"]`,\n      );\n      const postInNotifications = notifications.some(\n        (n) => key === statusKey(n.status?.id, instance),\n      );\n      if (!$post && !postInNotifications) {\n        delete states.statuses[key];\n        delete states.statusQuotes[key];\n        for (const link in unfurledLinks) {\n          const unfurled = unfurledLinks[link];\n          const sKey = statusKey(unfurled.id, unfurled.instance);\n          if (sKey === key) {\n            delete states.unfurledLinks[link];\n            break;\n          }\n        }\n        keysCount++;\n      }\n    } catch (e) {}\n  }\n  if (keysCount) {\n    console.info(`GC: Removed ${keysCount} keys`);\n  }\n}, 15 * 60 * 1000);\n\n// Preload icons\n// There's probably a better way to do this\n// Related: https://github.com/vitejs/vite/issues/10600\nsetTimeout(() => {\n  for (const icon in ICONS) {\n    if (Array.isArray(ICONS[icon])) {\n      ICONS[icon][0]?.();\n    } else {\n      ICONS[icon]?.();\n    }\n  }\n}, 5000);\n\n(() => {\n  window.__IDLE__ = true;\n  const nonIdleEvents = [\n    'mousemove',\n    'mousedown',\n    'resize',\n    'keydown',\n    'touchstart',\n    'pointerdown',\n    'pointermove',\n    'wheel',\n  ];\n  const setIdle = () => {\n    window.__IDLE__ = true;\n  };\n  const IDLE_TIME = 3_000; // 3 seconds\n  const debouncedSetIdle = debounce(setIdle, IDLE_TIME);\n  const onNonIdle = () => {\n    window.__IDLE__ = false;\n    debouncedSetIdle();\n  };\n  nonIdleEvents.forEach((event) => {\n    window.addEventListener(event, onNonIdle, {\n      passive: true,\n      capture: true,\n    });\n  });\n  window.addEventListener('blur', setIdle, {\n    passive: true,\n  });\n  // When cursor leaves the window, set idle\n  document.documentElement.addEventListener(\n    'mouseleave',\n    (e) => {\n      if (!e.relatedTarget && !e.toElement) {\n        setIdle();\n      }\n    },\n    {\n      passive: true,\n    },\n  );\n  // document.addEventListener(\n  //   'visibilitychange',\n  //   () => {\n  //     if (document.visibilityState === 'visible') {\n  //       onNonIdle();\n  //     }\n  //   },\n  //   {\n  //     passive: true,\n  //   },\n  // );\n})();\n\n// Possible fix for iOS PWA theme-color bug\n// It changes when loading web pages in \"webview\"\nconst isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);\nif (isIOS) {\n  document.addEventListener('visibilitychange', () => {\n    if (document.visibilityState === 'visible') {\n      // Get current color scheme\n      const colorScheme = window.matchMedia('(prefers-color-scheme: dark)')\n        .matches\n        ? 'dark'\n        : 'light';\n      // Get current theme-color\n      const $meta = document.querySelector(\n        `meta[name=\"theme-color\"][media*=\"${colorScheme}\"]`,\n      );\n      const color = $meta?.getAttribute('content');\n      if (color) {\n        $meta.content = '';\n        setTimeout(() => {\n          $meta.content = color;\n        }, 10);\n      }\n    }\n  });\n}\n\nsubscribe(states, (changes) => {\n  for (const [action, path, value, prevValue] of changes) {\n    // Change #app dataset based on settings.shortcutsViewMode\n    if (path.join('.') === 'settings.shortcutsViewMode') {\n      const $app = document.getElementById('app');\n      if ($app) {\n        $app.dataset.shortcutsViewMode = states.shortcuts?.length ? value : '';\n      }\n    }\n\n    // Add/Remove cloak class to body\n    if (path.join('.') === 'settings.cloakMode') {\n      const $body = document.body;\n      $body.classList.toggle('cloak', value);\n    }\n  }\n});\n\nfunction App() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [uiState, setUIState] = useState('loading');\n\n  useLayoutEffect(() => {\n    const theme = store.local.get('theme');\n    if (theme) {\n      document.documentElement.classList.add(`is-${theme}`);\n      document\n        .querySelector('meta[name=\"color-scheme\"]')\n        .setAttribute('content', theme === 'auto' ? 'dark light' : theme);\n    }\n    const textSize = store.local.get('textSize');\n    if (textSize) {\n      document.documentElement.style.setProperty(\n        '--text-size',\n        `${textSize}px`,\n      );\n    }\n  }, []);\n\n  useEffect(() => {\n    const instanceURL = store.local.get('instanceURL');\n    const code = decodeURIComponent(\n      (window.location.search.match(/code=([^&]+)/) || [, ''])[1],\n    );\n\n    if (code) {\n      console.log({ code });\n      // Clear the code from the URL\n      window.history.replaceState(\n        {},\n        document.title,\n        window.location.pathname || '/',\n      );\n\n      const clientID = store.session.get('clientID');\n      const clientSecret = store.session.get('clientSecret');\n      const vapidKey = store.session.get('vapidKey');\n\n      (async () => {\n        setUIState('loading');\n        const { access_token: accessToken } = await getAccessToken({\n          instanceURL,\n          client_id: clientID,\n          client_secret: clientSecret,\n          code,\n        });\n\n        const client = initClient({ instance: instanceURL, accessToken });\n        await Promise.allSettled([\n          initInstance(client, instanceURL),\n          initAccount(client, instanceURL, accessToken, vapidKey),\n        ]);\n        initStates();\n        initPreferences(client);\n\n        setIsLoggedIn(true);\n        setUIState('default');\n      })();\n    } else {\n      window.__IGNORE_GET_ACCOUNT_ERROR__ = true;\n      const account = getCurrentAccount();\n      if (account) {\n        store.session.set('currentAccount', account.info.id);\n        const { client } = api({ account });\n        const { instance } = client;\n        // console.log('masto', masto);\n        initStates();\n        initPreferences(client);\n        setUIState('loading');\n        (async () => {\n          try {\n            await initInstance(client, instance);\n          } catch (e) {\n          } finally {\n            setIsLoggedIn(true);\n            setUIState('default');\n          }\n        })();\n      } else {\n        setUIState('default');\n      }\n    }\n  }, []);\n\n  let location = useLocation();\n  states.currentLocation = location.pathname;\n  // useLayoutEffect(() => {\n  //   states.currentLocation = location.pathname;\n  // }, [location.pathname]);\n\n  useEffect(focusDeck, [location, isLoggedIn]);\n\n  if (/\\/https?:/.test(location.pathname)) {\n    return <HttpRoute />;\n  }\n\n  return (\n    <>\n      <PrimaryRoutes isLoggedIn={isLoggedIn} loading={uiState === 'loading'} />\n      <SecondaryRoutes isLoggedIn={isLoggedIn} />\n      {uiState === 'default' && (\n        <Routes>\n          <Route path=\"/:instance?/s/:id\" element={<StatusRoute />} />\n        </Routes>\n      )}\n      {isLoggedIn && <ComposeButton />}\n      {isLoggedIn && <Shortcuts />}\n      <Modals />\n      {isLoggedIn && <NotificationService />}\n      <BackgroundService isLoggedIn={isLoggedIn} />\n      {uiState !== 'loading' && <SearchCommand onClose={focusDeck} />}\n      <KeyboardShortcutsHelp />\n    </>\n  );\n}\n\nfunction PrimaryRoutes({ isLoggedIn, loading }) {\n  const location = useLocation();\n  const nonRootLocation = useMemo(() => {\n    const { pathname } = location;\n    return !/^\\/(login|welcome)/.test(pathname);\n  }, [location]);\n\n  return (\n    <Routes location={nonRootLocation || location}>\n      <Route\n        path=\"/\"\n        element={\n          isLoggedIn ? (\n            <Home />\n          ) : loading ? (\n            <Loader id=\"loader-root\" />\n          ) : (\n            <Welcome />\n          )\n        }\n      />\n      <Route path=\"/login\" element={<Login />} />\n      <Route path=\"/welcome\" element={<Welcome />} />\n    </Routes>\n  );\n}\n\nfunction getPrevLocation() {\n  return states.prevLocation || null;\n}\nfunction SecondaryRoutes({ isLoggedIn }) {\n  // const snapStates = useSnapshot(states);\n  const location = useLocation();\n  // const prevLocation = snapStates.prevLocation;\n  const backgroundLocation = useRef(getPrevLocation());\n\n  const isModalPage = useMemo(() => {\n    return (\n      matchPath('/:instance/s/:id', location.pathname) ||\n      matchPath('/s/:id', location.pathname)\n    );\n  }, [location.pathname, matchPath]);\n  if (isModalPage) {\n    if (!backgroundLocation.current)\n      backgroundLocation.current = getPrevLocation();\n  } else {\n    backgroundLocation.current = null;\n  }\n  console.debug({\n    backgroundLocation: backgroundLocation.current,\n    location,\n  });\n\n  return (\n    <Routes location={backgroundLocation.current || location}>\n      {isLoggedIn && (\n        <>\n          <Route path=\"/notifications\" element={<Notifications />} />\n          <Route path=\"/mentions\" element={<Mentions />} />\n          <Route path=\"/following\" element={<Following />} />\n          <Route path=\"/b\" element={<Bookmarks />} />\n          <Route path=\"/f\" element={<Favourites />} />\n          <Route path=\"/l\">\n            <Route index element={<Lists />} />\n            <Route path=\":id\" element={<List />} />\n          </Route>\n          <Route path=\"/ft\" element={<FollowedHashtags />} />\n        </>\n      )}\n      <Route path=\"/:instance?/t/:hashtag\" element={<Hashtag />} />\n      <Route path=\"/:instance?/a/:id\" element={<AccountStatuses />} />\n      <Route path=\"/:instance?/p\">\n        <Route index element={<Public />} />\n        <Route path=\"l\" element={<Public local />} />\n      </Route>\n      <Route path=\"/:instance?/trending\" element={<Trending />} />\n      <Route path=\"/:instance?/search\" element={<Search />} />\n      {/* <Route path=\"/:anything\" element={<NotFound />} /> */}\n    </Routes>\n  );\n}\n\nexport { App };\n","import './index.css';\n\nimport './cloak-mode.css';\n\nimport { render } from 'preact';\nimport { HashRouter } from 'react-router-dom';\n\nimport { App } from './app';\n\nif (import.meta.env.DEV) {\n  import('preact/debug');\n}\n\n// AbortSignal.timeout polyfill\n// Temporary fix from https://github.com/mo/abortcontroller-polyfill/issues/73#issuecomment-1541180943\n// Incorrect implementation, but should be good enough for now\nif ('AbortSignal' in window) {\n  AbortSignal.timeout =\n    AbortSignal.timeout ||\n    ((duration) => {\n      const controller = new AbortController();\n      setTimeout(() => controller.abort(), duration);\n      return controller.signal;\n    });\n}\n\nrender(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('app'),\n);\n\n// Storage cleanup\nsetTimeout(() => {\n  try {\n    // Clean up iconify localStorage\n    Object.keys(localStorage).forEach((key) => {\n      if (key.startsWith('iconify')) {\n        localStorage.removeItem(key);\n      }\n    });\n    Object.keys(sessionStorage).forEach((key) => {\n      if (key.startsWith('iconify')) {\n        sessionStorage.removeItem(key);\n      }\n    });\n\n    // Clean up old settings key\n    localStorage.removeItem('settings:boostsCarousel');\n  } catch (e) {}\n}, 5000);\n\nwindow.__CLOAK__ = () => {\n  document.body.classList.toggle('cloak');\n};\n"],"names":["usePageVisibility","fn","deps","savedCallback","useRef","useEffect","current","handleVisibilityChange","hidden","document","visibilityState","console","STREAMING_TIMEOUT","POLL_INTERVAL","BackgroundService","memo","isLoggedIn","visible","setVisible","useState","checkLatestNotification","masto","instance","skipCheckMarkers","states","notificationsLast","notificationsIterator","v1","notifications","list","limit","sinceId","id","value","next","length","notificationsShowNew","lastReadId","markers","fetch","timeline","sub","pollNotifications","streaming","api","hasStreaming","setTimeout","user","notification","subscribe","log","entry","_a","checkForUpdates","clearTimeout","clearInterval","info","visible2","lastCheckDate","useHotkeys","currentCloakMode","Date","diff","ComposeButton","handleButton","e","shiftKey","openCompose","showCompose","ignoreEventWhen","querySelector","_jsx","type","onClick","children","Icon","icon","size","alt","KeyboardShortcutsHelp","snapStates","useSnapshot","onClose","showKeyboardShortcutsHelp","hasModal","Modal","class","tabindex","action","keys","_jsxs","_Fragment","className","map","Accounts","accounts","store","local","getJSON","currentAccount","session","get","moreThanOneAccount","_","reload","useReducer","x","accountsListParent","useAutoAnimate","tabIndex","ref","account","i","isCurrent","isDefault","Avatar","url","avatarStatic","onDblClick","$select","NameText","test","showAcct","set","Menu2","align","menuButton","title","MenuItem","MenuDivider","disabled","splice","MenuConfirm","subMenu","confirmLabel","menuItemClassName","href","Link","to","logo","createBackendPushSubscription","subscription","push","create","fetchBackendPushSubscription","updateBackendPushSubscription","update","removeBackendPushSubscription","remove","isPushSupported","navigator","window","getRegistration","serviceWorker","getSubscription","registration","pushManager","undefined","urlBase64ToUint8Array","base64String","padding","repeat","base64","replace","rawData","atob","outputArray","Uint8Array","charCodeAt","initSubscription","backendSubscription","err","message","sameEndpoint","vapidKey","sameKey","getCurrentAccount","applicationServerKey","vapidKeyStr","applicationServerKeyStr","updateSubscription","data","policy","removeSubscription","userVisibleOnly","DEFAULT_TEXT_SIZE","TEXT_SIZES","Settings","currentTheme","themeFormRef","targetLanguage","settings","contentTranslationTargetLanguage","systemTargetLanguage","getTranslateTargetLanguage","systemTargetLanguageText","localeCode2Text","currentTextSize","prefs","setPrefs","authenticated","onInput","formData","theme","documentElement","html","classList","toggle","name","defaultChecked","fontSize","min","max","step","onChange","parseInt","setProperty","for","target","alert","rel","checked","autoRefresh","boostsCarousel","contentTranslation","targetLanguages","lang","code","contentTranslationHideLanguages","cloakMode","PushNotificationsSection","display","flexWrap","gap","lineHeight","src","width","aspectRatio","verticalAlign","borderRadius","readOnly","__BUILD_TIME__","showToast","writeText","datetime","uiState","setUIState","allowNofitications","setAllowNotifications","setNeedRelogin","pushFormRef","needRelogin","alerts","previousPolicyRef","policyEl","elements","namedItem","Object","el","warn","values","params","mention","favourite","reblog","follow","follow_request","poll","status","key","policyChanged","alertsCount","isLoading","permission","Notification","label","alert2","focusDeck","timer","columns","getElementById","modals","querySelectorAll","modal","modalFocusElement","focus","backDrop","pages","page","useLocationChange","location","useLocation","currentLocationRef","pathname","ListAddEdit","editMode","nameFieldRef","repliesPolicyFieldRef","exclusiveFieldRef","repliesPolicy","exclusive","supportsExclusive","supports","onSubmit","preventDefault","FormData","listResult","replies_policy","MUTE_DURATIONS","MUTE_DURATIONS_LABELS","LIMIT","ACCOUNT_INFO_MAX_AGE","fetchFamiliarFollowers","currentID","familiarFollowers","memFetchFamiliarFollowers","pmem","maxAge","fetchPostingStats","accountID","fetchStatuses","statuses","total","originals","replies","stats","boosts","memFetchPostingStats","fetchAccount","standalone","currentMasto","currentInstance","isString","useMemo","setInfo","sameCurrentInstance","info2","acct","avatar","bot","createdAt","displayName","emojis","fields","group","lastStatusAt","locked","note","statusesCount","username","memorial","moved","roles","header","headerStatic","headerIsAvatar","isSelf","infoHasEssentials","account2","updated","forEach","headerCornerColors","setHeaderCornerColors","followersIterator","domain","fetchFollowers","firstLoad","familiarFollowersCache","results","familiarFollowers2","newValue","familiar","followingIterator","LinkOrDiv","accountLink","postingStats","setPostingStats","renderFamiliarFollowers","setFamiliarFollowers","postingStatsUIState","setPostingStatsUIState","hasPostingStats","followers","renderPostingStats","onRelationshipChange","AccountBlock","canvas","add","pixelDimension","r","createElement","ctx","g","b","height","drawImage","colors","getImageData","a","dataLength","color","lightenRGB","rgbColors","avatarSize","external","role","accountInstance","handleContentLinks","enhanceContent","verifiedAt","__html","EmojiText","follower","heading","fetchAccounts","excludeRelationshipAttrs","shortenNumber","followersCount","fetchFollowing","followingCount","niceDateTime","FAMILIAR_FOLLOWERS_LIMIT","currentAuthenticated","relationship","privateNote","following","showingReblogs","notifying","followedBy","blocking","blockedBy","muting","mutingNotifications","requested","domainBlocking","endorsed","currentInfo","setIsSelf","q","fetchRelationships","relationships","setRelationshipUIState","relationship2","updateAccount","setRelationship","loading","relationshipUIState","showTranslatedBio","setShowPrivateNoteModal","showAddRemoveLists","showPrivateNoteModal","dir","setShowTranslatedBio","setShowAddRemoveLists","clipboard","share","newRelationship","openTrigger","duration","counter","Loader","confirm","AddRemoveListsSheet","PrivateNoteSheet","luminence","alpha","urlObj","host","path","TranslatedBioSheet","fieldsText","Math","getHTMLText","text","lists","setLists","listsContainingAccount","setListsContainingAccount","c","style","listsContainingAccount2","lists2","reloadCount","showListAddEditModal","setShowListAddEditModal","sort","l","inList","accountIds","result","abrupt","textareaRef","initialNote","e2","trim","AccountSheet","propInstance","AccountInfo","lookup","skip_webfinger","v2","search","resolve","URL","Drafts","drafts","setDrafts","db","ns","getCurrentAccountNS","ownKeys","filter","startsWith","getMany","updatedAt","getTime","hasDrafts","draft","draftStatus","replyTo","updatedAtDate","replyToStatus","MiniDraft","spoilerText","mediaAttachments","hasPoll","options","hasMedia","firstImageMedia","media","image","file","objectURL","createObjectURL","hasPollOrMedia","relationshipsMap","uniqueAccountIds","reduce","acc","includes","GenericAccounts","isCurrentInstance","setAccounts","showMore","setShowMore","showGenericAccounts","staticAccounts","showReactions","setRelationshipsMap","loadRelationships","loadAccounts","done","Array","isArray","theAccount","find","j","_types","prev","newAccounts","reloadGenericAccounts","_b","showStats","InView","MediaAltModal","forceTranslate","setForceTranslate","differentLanguage","localeMatch","whiteSpace","textWrap","TranslationBlock","sourceLanguage","clamp","gammaToLinear","pow","linearToGamma","rgb2oklab","m","s","cbrt","oklab2rgb","L","round","MediaModal","statusID","index","carouselRef","currentIndex","setCurrentIndex","carouselFocusItem","useLayoutEffect","scrollIntoView","prevStatusID","scrollLeft","clientWidth","differentStatusID","scrollTo","left","behavior","showControls","setShowControls","handleSwipe","addEventListener","removeEventListener","handleScroll","passive","mediaAccentColors","blurhash","averageColor","getBlurHashAverageColor","labAverageColor","mediaAccentGradient","range","start","end","join","contains","backgroundAttachment","backgroundImage","accentColor","description","showMediaAlt","Media","showOriginal","stopPropagation","overflow","position","menuClassName","MenuLink","remoteUrl","matchMedia","matches","floatingButtonUrl","multiColumnUrl$1","tabMenuBarUrl","MAX_FETCH","fetchFollowedTags","iterator","followedTags","tags","fetchCount","localeCompare","MAX_AGE","getFollowedTags","fauxDiv","extractTagsFromStatus","content","hashtagLinks","AsyncText","setText","Promise","then","SHORTCUTS_LIMIT","TYPES","TYPE_TEXT","public","bookmarks","favourites","hashtag","trending","mentions","TYPE_PARAMS","placeholder","notRequired","pattern","fetchListTitle","fetchAccountTitle","SHORTCUTS_META","subtitle","query","split","ShortcutsSettings","shortcuts","showForm","setShowForm","showImportExport","setShowImportExport","shortcutsListParent","opacity","textTransform","imgURL","multiColumnUrl","shortcutsViewMode","Boolean","shortcut","shortcutsArr","from","temp","shortcutIndex","justifyContent","alignItems","currentTarget","ShortcutForm","mode","ImportExport","FETCH_MAX_AGE","fetchLists","setFollowedHashtags","currentType","form","formRef","input","setCurrentType","required","defaultValue","autocorrect","followedHashtags","tag","shortcutsStr","compressToEncodedURIComponent","importUIState","setImportUIState","parsedImportShortcutStr","importShortcutStr","parsed","parse","hasCurrentSettings","nonUniqueShortcuts","every","exceededLimit","newShortcuts","changes","prevValue","Modals","navigate","useNavigate","Compose","__COMPOSE__","editStatus","newStatus","reloadStatusPage","post","reply","edit","delay","toast","hideToast","prevLocation","showSettings","showAccounts","showAccount","destination","showDrafts","showMediaModal","showShortcutsSettings","FollowRequestButtons","requestState","setRequestState","hasRelationship","followRequests","authorize","Error","NOTIFICATION_ICONS","contentText","count","reblog_reply","favourite_reply","targetAccount","AVATARS_LIMIT","isStatic","disableContextMenu","report","_accounts","_statuses","actualStatus","actualStatusID","isVoted","voted","isReplyToOthers","inReplyToAccountId","favsCount","reblogsCount","showAvatar","formattedCreatedAt","toLocaleString","genericAccountsHeading","handleOpenGenericAccounts","debug","RelativeTime","format","Fragment","type2","status2","Status","TruncatedLink","onContextMenu","dispatchEvent","clientX","clientY","props","useTruncated","NotificationService","routeNotification","accessToken","setShowNotificationSheet","showNotificationSheet","sameInstance","getAccountByAccessToken","isFollow","notificationAccount","hasAccount","hasStatus","event","id2","hash","accessToken2","handleMessage","clearAppBadge","tagName","instanceURL","SearchForm","forwardRef","searchParams","setSearchParams","useSearchParams","searchMenuOpen","setSearchMenuOpen","setQuery","searchFieldRef","useImperativeHandle","setValue","select","blur","encodeURIComponent","autocomplete","autocapitalize","onSearch","onFocus","onBlur","onKeyDown","focusItem","nextItem","nextElementSibling","parentElement","firstItem","prevItem","previousElementSibling","lastItem","click","top","SearchCommand","showSearch","setShowSearch","searchFormRef","isSearchPage","closeSearch","enabled","enableOnFormTags","Shortcuts","shortcutsColumnsMode","menuRef","formattedShortcuts","pin","handler","closeMenu","updatesButton","instanceRef","viewScroll","groupBoosts","newValues","boostStash","serialBoosts","item","boostStashID","items","half","floor","slice","dedupeBoosts","boostedStatusIDs","filteredItems","statusKey","boosterID","statusKey2","groupContext","contexts","contextIndex","t","repliedItem","self","context","inReplyToId","firstItemAccountID","newItems","appliedContextIndices","contextItems","aDate","bDate","i2","assignFollowedTags","statusFollowedTags","statusWithFollowedTags","sKey","extractedTags","itemFollowedTags","clearFollowedTagsState","useScroll","scrollableRef","distanceFromStart","distanceFromEnd","scrollThresholdStart","scrollThresholdEnd","direction","distanceFromStartPx","_distanceFromStartPx","distanceFromEndPx","_distanceFromEndPx","scrollDirection","setScrollDirection","reachStart","setReachStart","reachEnd","setReachEnd","nearReachStart","setNearReachStart","nearReachEnd","setNearReachEnd","isVertical","scrollableElement","previousScrollStart","scrollTop","onScroll","scrollHeight","scrollWidth","clientHeight","scrollStart","scrollDimension","clientDimension","scrollDistance","abs","init","Event","MediaPost","parent","onMediaClick","accountId","accountURL","accountEmojis","repliesCount","reblogged","favourited","favouritesCount","bookmarked","muted","sensitive","visibility","language","editedAt","filtered","card","uri","_deleted","_pinned","debugHover","filterContext","useContext","FilterContext","isFiltered","filterInfo","mediaKey","titlesStr","hasSpoiler","NavMenu","setCurrentAccount","setMoreThanOneAccount","showFollowing","bindLongPress","useLongPress","threshold","detect","cancelOnMovement","buttonRef","menuState","setMenuState","boundingBoxPadding","safeBoundingBoxPadding","mutesIterator","fetchMutes","mutes","blocksIterator","fetchBlocks","blocks","open","state","squircle","ControlledMenu","anchorRef","containerProps","zIndex","portal","body","unmountOnClose","appVersion","commitHash","__COMMIT_HASH__","scrollIntoViewOptions","block","inline","Timeline","titleComponent","emptyText","errorText","useItemID","fetchItems","checkForUpdatesInterval","headerStart","headerEnd","timelineStart","refresh","view","showFollowedTags","setItems","showNew","setShowNew","allowGrouping","loadItems","useDebouncedCallback","otherPosts","pinnedPosts","items2","itemsSelector","jRef","activeItem","activeItemRect","closest","getBoundingClientRect","allItems","activeItemIndex","indexOf","itemRect","topmostItem","kRef","findLast","oRef","prevView","useCallback","disableIdleCheck","loadOrCheckUpdates","inBackground","noPointers","__IDLE__","timeDiff","hasUpdate","useInterval","lastHiddenTime","node","hiddenUI","TimelineItem","inView","bFiltered","isCarousel","StatusCarousel","aFiltered","statusID2","reblog2","actualStatusID2","url2","_pinned2","manyItems","_differentAuthor","isMiddle","isSpoiler","showCompact","isStart","isEnd","itemKey","TimelineStatusCompact","statusPeekText","statusThreadNumber","MIN_YEAR","MIN_YEAR_MONTH","supportsInputMonth","setAttribute","_isSearchEnabled","isSearchEnabled","AccountStatuses","useParams","month","excludeReplies","excludeBoosts","tagged","accountStatusesIterator","allSearchParams","setAccount","searchOffsetRef","searchEnabled","setSearchEnabled","isValidMonth","_year","_month","monthIndex","after","afterStr","before","beforeStr","searchResults","saveStatus","value2","offset","pinnedStatuses","pinnedStatusesIds","exclude_replies","fetchPromise","fetchAccountPromiseRef","setFeaturedTags","useTitle","cachedAccount","featuredTags","accountInfoMemo","filterBarRef","TimelineStart","validity","active","allowSwitch","offsetLeft","fetchAccountStatuses","masto2","monthFieldRef","checkValidity","year","minYear","maxYear","maxMonth","minMonth","yearFieldRef","Bookmarks","bookmarksIterator","fetchBookmarks","Favourites","favouritesIterator","fetchFavourites","FollowedHashtags","Following","homeIterator","latestItem","latestItemChanged","payload","fetchHome","TAGS_LIMIT_PER_MODE","TOTAL_TAGS_LIMIT","Hashtags","mediaView","columnMode","hashtags","linkParams","hashtagTitle","hashtagPostTitle","maxID","fetchHashtags","timelines","any","maxId","onlyMedia","skipThreading","since_id","followUIState","setFollowUIState","reachLimit","setDownOverflow","catch","finally","MenuHeader","FocusableItem","newHashtag","MenuGroup","exists","some","newInstance","List","listIterator","fetchList","setList","showManageMembersModal","setShowManageMembersModal","ListManageMembers","MEMBERS_LIMIT","listID","members","setMembers","membersIterator","fetchMembers","member","as","RemoveAddButton","removed","setRemoved","emptySearchParams","URLSearchParams","Mentions","stateType","setStateType","mentionsIterator","fetchMentions","types","conversationsIterator","latestConversationItem","lastStatus","fetchConversations","args","notificationTypeKeys","fixNotifications","groupNotifications","notificationsMap","cleanNotifications","virtualType","date","mappedNotification","mappedAccount","n","cleanNotifications2","notificationsMap2","Notifications","notificationID","notificationAccessToken","onlyMentions","setOnlyMentions","setFollowRequests","announcements","setAnnouncements","excludeTypes","allNotifications","groupedNotifications","notificationsLastFetchTime","fetchFollowRequests","loadFollowRequests","requests","fetchAnnouncements","loadNotifications","fetchNotificationsPromise","fetchNotifications","announcements2","loadUpdates","unsub","v","subscribeKey","yesterdayDate","todayDate","currentDay","showTodayEmpty","announcementsListRef","announcement","AnnouncementBlock","notificationDay","differentDay","contact","contactAccount","startsAt","allDay","publishedAt","endsAt","published","read","reactions","publishedAtDate","publishedDateText","updatedAtText","dangerouslySetInnerHTML","staticUrl","me","reaction","Public","isLocal","publicIterator","fetchPublic","prompt","toLowerCase","fetchLinks","trends","links","Trending","setHashtags","setLinks","trendIterator","fetchTrend","links2","link","history","cur","authorName","authorUrl","imageDescription","providerName","providerUrl","title2","Columns","components","Hashtag","Component","error","Home","NotificationsLink","notificationLinkRef","NotificationsMenu","NOTIFICATIONS_LIMIT","NOTIFICATIONS_DISPLAY_LIMIT","now","hasFollowRequests","setHasFollowRequests","statusPostRegexes","getInstanceStatusObject","hostname","regex","match","getInstanceStatusURL","HttpRoute","statusObject","statusURL","Lists","instancesListURL","define_import_meta_env_default","Login","instanceURLRef","cachedInstanceURL","instanceText","setInstanceText","instancesList","setInstancesList","json","submitInstance","client_id","client_secret","vapid_key","getAuthorizationURL","cleanInstanceText","instanceTextLooksLikeDomain","instancesSuggestions","instance2","aStartsWith","bStartsWith","selectedInstanceText","textAlign","SHORT_LIMIT","Search","offsetRef","statusResults","setStatusResults","accountResults","setAccountResults","hashtagResults","setHashtagResults","setTypeResultsFunc","loadResults","filterBarParent","SUBCOMMENTS_OPEN_ALL_LIMIT","MAX_WEIGHT","cachedRepliesToggle","cachedStatusesMap","scrollPositions","resetScrollPosition","STATUSES_SELECTOR","STATUS_URL_REGEX","StatusPage","mediaParam","mediaOnlyParam","mediaIndex","showMedia","mediaStatusID","mediaStatus","getStatus","showMediaOnly","heroStatus","setHeroStatus","closeLink","matchStatusPath","matchPath","handleMediaClose","delete","$carousel","StatusThread","navigation","translate","setStatuses","heroStatusRef","totalDescendants","debounce","scrollOffsets","reloadHero","heroTimer","cachedStatuses","reallyCachedStatuses","heroFetch","pRetry","contextFetch","heroStatus2","_replies","_r","expandReplies","weight","descendants","missingStatuses","ancestors2","ancestors","ancestorsIsThread","nestedDescendants","__replies","ancestor","isThread","allStatuses","offsetTop","heroLimit","setLimit","scrollPosition","threadifyStatus","newScrollTop","newScrollOffsets","contextURL","initContext","statusWeightCache","div","apiCache","heroDisplayName","heroContentText","postInstance","hasDescendants","innerHTML","heroInView","postSameInstance","allStatusLinks","activeStatus","activeStatusIndex","nextStatus","statusLink","onView","setHeroInView","heroPointer","statusLinkRect","topmostStatusLink","activeStatusRect","prevStatus","details","initialPageState","handleMediaClick","handleStatusLinkClick","descendant","thread","isHero","renderStatus","SubComments","withinContext","prevEntry","level","openAll","prevLocationIsStatusPage","entries","arr","viewMode","setViewMode","button","buttons","diveDeep","replies2","replies3","totalComments","accWeight","totalWeight","calcStatusWeight","openBefore","hasParentThread","detailsRef","sameCount","open2","shortReply","dataset","MEDIA_VIRTUAL_LENGTH","CARD_VIRTUAL_LENGTH","WEIGHT_SEGMENT","cachedWeight","htmlContentLength","mediaLength","pollLength","POLL_VIRTUAL_LENGTH","cardLength","StatusRoute","boostsCarouselUrl","groupedNotificationsUrl","multiHashtagTimelineUrl","nestedCommentsThreadUrl","logoText","Welcome","marginBlockEnd","nativeAlert","__nativeAlert","Toastify","gravity","y","__STATES__","__STATES_STATS__","counts","unmountedPosts","setInterval","unfurledLinks","$post","postInNotifications","unfurled","keysCount","ICONS","_d","_c","nonIdleEvents","setIdle","debouncedSetIdle","onNonIdle","isIOS","colorScheme","$meta","getAttribute","$app","$body","setIsLoggedIn","textSize","decodeURIComponent","clientID","clientSecret","initPreferences","client","initInstance","initStates","PrimaryRoutes","Routes","Route","nonRootLocation","element","backgroundLocation","getPrevLocation","isModalPage","timeout","AbortSignal","controller","AbortController","abort","signal","render","HashRouter","App","localStorage","removeItem","sessionStorage","__CLOAK__"],"mappings":"m1BAEe,SAASA,GAAkBC,EAAKA,IAAM,GAAIC,EAAO,CAAA,EAAI,CAClE,MAAMC,EAAgBC,EAAOH,CAAE,EAC/BI,EAAU,IAAM,CACdF,EAAcG,QAAUL,CAC1B,EAAG,CAACC,CAAI,CAAC,EAETG,EAAU,IAAM,CACd,MAAME,EAAyBA,IAAM,CACnC,MAAMC,EAASC,SAASD,QAAUC,SAASC,kBAAoB,SAC/DC,EAAwC,QAAA,CAAAH,CAAA,CACxCL,EACF,gBAAC,iBAAA,mBAAAI,CAAA,EAEDE,IAAyB,SAAA,oBAAmB,oBAAyB,GAC9D,CAAA,CAAA,ECNX,MAAMG,GAAoB,IAAO,EAC3BC,GAAgB,KAEtBC,GAAeC,GAAK,SAA2B,CAAEC,WAAAA,CAAW,EAAG,CAG7D,KAAM,CAACC,EAASC,CAAU,EAAIC,EAAS,EAAI,EAC3CnB,GAAkBkB,CAAU,EAC5B,MAAME,EAA0B,MAAOC,EAAOC,EAAUC,IAAqB,OAC3E,GAAIC,EAAOC,kBAAmB,CAC5B,MAAMC,EAAwBL,EAAMM,GAAGC,cAAcC,KAAK,CACxDC,MAAO,EACPC,QAASP,EAAOC,kBAAkBO,EAAAA,CACnC,EACK,CAAEC,MAAOL,CAAAA,EAAkB,MAAMF,EAAsBQ,OAC7D,GAAIN,GAAAA,MAAAA,EAAeO,OACjB,GAAIZ,EACFC,EAAOY,qBAAuB,OACzB,CACDC,IAAAA,EACA,GAAA,CACF,MAAMC,EAAU,MAAMjB,EAAMM,GAAGW,QAAQC,MAAM,CAC3CC,SAAU,eAAA,CACX,EACDH,GAAaC,EAAAA,GAAAA,YAAAA,EAASV,gBAATU,YAAAA,EAAwBD,gBAC3B,CAAC,CACTA,EACFb,EAAOY,qBAAuBR,EAAc,CAAC,EAAEI,KAAOK,EAEtDb,EAAOY,qBAAuB,EAElC,CAEJ,CAAA,EAGF/B,EAAU,IAAM,CACVoC,IAAAA,EACAC,EACJ,GAAI1B,GAAcC,EAAS,CACnB,KAAA,CAAEI,MAAAA,EAAOsB,UAAAA,EAAWrB,SAAAA,GAAasB,EAAI,GAC1C,SAAY,CAELxB,MAAAA,EAAwBC,EAAOC,CAAQ,EAE7C,IAAIuB,EAAe,GAEfF,IACFD,EAAoBI,WAAW,IAAM,EAClC,SAAY,CACP,GAAA,CACaD,EAAA,GACTF,EAAAA,EAAUI,KAAKC,aAAaC,UAAU,EACpCC,wBAEI,GADZ,CAAAT,GACY,CAAAxB,EACV,MAAckC,EAAA,QAAA,gBACND,gBACJC,gBACFxC,CAAQuC,EAC4B1B,EACnB,qBAAA,EAAA,CAEnB,MAAA,CACAA,EAA8B,EAChC,CACAb,MACU,YAAA,IAAA,CACKS,EAAAC,EAAAC,EAAA,EAAA,CACfX,EAAAA,EAAe,EAGjB,IACEA,EAAAA,EAAsD,EAEpDS,IAA6C,CAEjD,MAAA,IAAA,QAAAgC,EAAAX,GAAA,YAAAA,EAAA,cAAA,MAAAW,EAAA,KAAAX,GACCA,OAEP,aAAAC,CAAA,EACF,cAAGA,CAAA,CAAA,CAEL,EAAA,CAAAzB,EAAaD,CAAA,CAAA,EACXyB,MAAAA,EAAmBrC,IACbiD,EAAA,IAAA,CACNC,EAAAA,QAA8B,KAAA,MAC9BC,MAAAA,gBAA+B,EAAA,KAAA,GAAA,EAAA,MAAA,EAAA,KAAAC,GAAA,CACjCA,IACWxC,EAAAA,WAAWwC,EAGxB,CAAA,EAAA,YACA,EACgBlD,OAAAA,GAAAA,KAAmB,IAAA,GAAA,EAAA,EACjCK,GAAgC8C,GAAA,CAC1BA,IAGED,EAAAA,QAGW,KAAA,IAAA,EAAAE,EAAA,QAChB,IAAA,GAAA,IACLL,IALgB7B,IASZ,CAAI,EACcmC,GAAA,cAAA,IAAA,CAAA,MACXC,EAAApC,EAAA,SAAA,UACLA,EAAA,SAAaqC,UAAS,CAAAD,EAClBE,GAAAA,CAEc,KAAA,cAAAF,EAAA,WAAA,SAAA,EAAA,CAClB,CAAA,CACF,EACF,IAAA,CAAA,ECxHJ,SAAwBG,IAAgB,CACtC,SAASC,EAAaC,EAAG,CACnBA,EAAEC,SACWC,OAGb3C,EAAO4C,YAAc,IAGvB5C,EAAO4C,YAAc,EAEzB,CAEAT,OAAAA,GAAW,aAAcK,EAAc,CACrCK,gBAAwBJ,GACL,CAAC,CAACxD,SAAS6D,cAAc,sBAAsB,CAElE,CACD,EAGCC,EAAA,SAAA,CAAQC,KAAK,SAASxC,GAAG,iBAAiByC,QAAST,EAAaU,SAC9DH,EAACI,EAAI,CAACC,KAAK,QAAQC,KAAK,KAAKC,IAAI,SAAA,CAAW,CAAA,CACtC,CAEZ,CCrBA,MAAAC,GAAehE,GAAK,UAAiC,CAC7CiE,MAAAA,EAAaC,GAAYzD,CAAM,EAErC,SAAS0D,GAAU,CACjB1D,EAAO2D,0BAA4B,EACrC,CAEAxB,OAAAA,GACE,aACOM,GAAA,CACLtD,EAAAA,0BAAkB,EAClBa,EAAAA,CAEF,gBAAAyC,GAC0B,CAAA,CAAA,SAAA,cAAA,sBAAA,CAEfmB,CACT,EAEJ,CAAA,CAAAJ,EAAA,2BAAAT,EAAAc,GAAA,CAEA,MACIL,QACOM,QAAAA,EAAcJ,SAAAA,EAAAA,MAAAA,CAAiBR,GAAAA,oCAC/B1C,MAAG,QAAoCsD,SAAM,KAAQC,SAAS,CAAAhB,EAAA,SAAA,CAAIG,KAAAA,SAC7DF,MAAK,cAASc,QAAMJ,EAAcT,SAASS,EAAAA,EAAAA,CAAQR,KAAAA,GACpD,CAAA,CAAM,CAAA,EAAKH,EAAA,SAAA,CAElBA,SAAAA,EAAA,KAAA,CAAAG,6BACE,CAAA,CAAI,CAAA,EAAsBH,EAAA,OAAA,CAE5BA,SAAAA,EAAA,QAAA,CAAAG,kBAEK,0BAEGc,KAAQjB,EAAA,MAAA,CACRkB,SAAM,GAAA,CAAA,CAAK,EAAM,CAEnB,OAAA,YACED,KAAQjB,EAAA,MAAA,CACRkB,SAAM,GAAA,CAAA,CAAK,EAAM,CAEnB,OAAA,gBACED,KAAQjB,EAAA,MAAA,CACRkB,SAAM,GAAA,CAAA,CAAK,EAAM,CAEnB,OAAA,6BACED,KAAQE,EAAAC,EAAA,CACRF,SACEE,CAAApB,EAAA,MAAA,CAAAG,SACEH,OAAA,CAAA,EAAK,MAAAA,EAAA,MAAA,CAAU,SAAIA,GAAA,CAAA,CAAAG,CAAK,CAAA,CAAO,EAC/B,CAGN,OAAA,iCACEc,KAAQE,EAAAC,EAAA,CACRF,SACEE,CAAApB,EAAA,MAAA,CAAAG,SACEH,OAAA,CAAA,EAAK,MAAAA,EAAA,MAAA,CAAU,SAAIA,GAAA,CAAA,CAAAG,CAAK,CAAA,CAAO,EAC/B,CAGN,OAAA,oBACEc,KAAQE,EAAAC,EAAA,CACRF,SACEE,CAAApB,EAAA,MAAA,CAAAG,SACEH,OAAA,CAAA,EAAK,OAAAA,EAAA,MAAA,CAAU,SAAKA,GAAA,CAAA,CAAAG,CAAK,CAAA,CAAO,EAChC,CAGN,OAAAgB,EAAAC,EAAA,CACEH,sCACEjB,EAAA,KAAA,CAAA,CAAA,EAAA,kCAAA,CAAA,CAAAG,EAIA,KAAEH,EAAA,MAAA,CAEJkB,SAAM,GAAA,CAAA,CAAK,EAAM,CAEnB,OAAA,wBACED,KAAQE,EAAAC,EAAA,CACRF,SACEE,CAAApB,EAAA,MAAA,CAAAG,SACEH,KAAA,CAAA,EAAK,OAAAA,EAAA,MAAA,CAAQ,SAAKA,WAAA,CAAA,CAAAG,CAAK,CAAA,CAAe,EACtC,CAGN,OAAA,oCACEc,KAAQE,EAAAC,EAAA,CACRF,SACEE,CAAApB,EAAA,MAAA,CAAAG,SACEH,GAAA,CAAA,EAAK,OAAAA,EAAA,MAAA,CAAM,SAAKA,GAAA,CAAA,CAAAG,CAAK,CAAA,CAAO,EAC5B,CAGN,OAAA,mBACEc,KAAQjB,EAAA,MAAA,CACRkB,SAAM,GAAA,CAAA,CAAK,EAAM,CAEnB,OAAA,gCACED,UAAQ,gBACRI,KAAWF,EAAAC,EAAA,CACXF,SACEE,CAAApB,EAAA,MAAA,CAAAG,SACEH,OAAA,CAAA,EAAK,MAAAA,EAAA,MAAA,CAAU,SAAIA,GAAA,CAAA,CAAAG,CAAK,CAAA,CAAO,EAC/B,CAGN,OAAA,YACEc,KAAQE,EAAAC,EAAA,CACRF,SACEE,CAAApB,EAAA,MAAA,CAAAG,SACEH,MAAA,CAAA,EAAK,MAAAA,EAAA,MAAA,CAAS,SAAIA,OAAA,CAAA,EAAK,OAAAA,EAAA,MAAA,CAAU,SAAKA,GAAA,CAAA,EAAK,KAAA,IAAAA,EAAA,MAAA,CAAM,SAAI,OACrD,CAAA,CAAAG,CAAK,CAAA,CAAW,EAChB,CAGN,OAAA,SACEc,KAAQjB,EAAA,MAAA,CACRkB,SAAM,GAAA,CAAA,CAAK,EAAM,CAEnB,OAAA,QACED,KAAQjB,EAAA,MAAA,CACRkB,SAAM,GAAA,CAAA,CAAK,EAAM,CAEnB,OAAA,qBACED,UAAQ,gBACRI,KAAWF,EAAAC,EAAA,CACXF,SACEE,CAAApB,EAAA,MAAA,CAAAG,SACEH,OAAA,CAAA,EAAK,MAAAA,EAAA,MAAA,CAAU,SAAIA,GAAA,CAAA,CAAAG,CAAK,CAAA,CAAO,EAC/B,CAGN,OAAA,mBACEc,KAAQE,EAAAC,EAAA,CACRF,SACEE,CAAApB,EAAA,MAAA,CAAAG,SACEH,GAAA,CAAA,EAAK,OAAAA,EAAA,MAAA,CAAM,SAAKA,GAAA,CAAA,CAAAG,CAAK,CAAA,CAAO,EAC5B,CAGN,OAAA,QACEc,KAAQE,EAAAC,EAAA,CACRF,SACEE,CAAApB,EAAA,MAAA,CAAAG,SACEH,OAAA,CAAA,EAAK,MAAAA,EAAA,MAAA,CAAU,SAAIA,GAAA,CAAA,CAAAG,CAAK,CAAA,CAAO,EAC/B,CAGN,OAAA,WACEc,KAAQjB,EAAA,MAAA,CACRkB,SAAM,GAAA,CAAA,CAAK,EAAM,CAEnB,OAAA,oBACED,KAAQE,EAAAC,EAAA,CACRF,SACEE,CAAApB,EAAA,MAAA,CAAAG,SACEH,OAAA,CAAA,EAAK,MAAAA,EAAA,MAAA,CAAU,SAAIA,KAAA,CAAA,EAAK,MAAAA,EAAA,MAAA,CAAQ,SAAIA,GAAA,CAAA,CAAAG,CAAK,CAAA,CAAO,CAAA,EAChD,IAAA,CAAA,CAGNmB,OAAAA,EAAOL,UAAAA,EAAQI,KAAAA,CAAAA,IAAWH,EAAAA,KAAAA,CAAK,SAC/B,CAAAlB,EAAA,KAAA,CAAAG,MAAAA,EACMY,SAAOM,CAAAA,CAAAA,EAAYJ,EAAAA,KAAAA,CACvBjB,SAAAkB,CAAA,CAAA,CAAAf,CAAKe,EAASD,CAAC,CAAA,CAAA,CAAA,CAElB,CAAA,CAAC,CACG,CAAA,CACF,CAAA,CACJ,CAAA,ECtKb,SAASM,GAAS,CAAEZ,QAAAA,CAAQ,EAAG,CACvB,KAAA,CAAE7D,MAAAA,GAAUuB,EAAI,EAEhBmD,EAAWC,GAAMC,MAAMC,QAAQ,UAAU,EACzCC,EAAiBH,GAAMI,QAAQC,IAAI,gBAAgB,EACnDC,EAAqBP,EAAS5D,OAAS,EAEvC,CAACoE,EAAGC,CAAM,EAAIC,GAAkBC,GAAAA,EAAI,EAAG,CAAC,EACxC,CAACC,CAAkB,EAAIC,KAE7B,OACElB,EAAA,MAAA,CAAK1D,GAAG,qBAAqBsD,MAAM,QAAQuB,SAAS,KAAInC,SACrD,CAAA,CAAC,CAACQ,GACDX,EAAA,SAAA,CAAQC,KAAK,SAASc,MAAM,cAAcb,QAASS,EAAQR,SACzDH,EAACI,EAAI,CAACC,KAAK,GAAA,CAAK,CAAA,CACV,EAEVL,EAAA,SAAA,CAAQe,MAAM,cAAaZ,SACzBH,EAAA,KAAA,CAAAG,SAAI,UAAA,CAAY,CAAA,CACV,EACRH,EAAA,OAAA,CAAAG,SACEgB,EAAA,UAAA,CAAAhB,UACEH,EAAA,KAAA,CAAIe,MAAM,gBAAgBwB,IAAKH,EAAmBjC,SAC/CqB,EAASF,IAAI,CAACkB,EAASC,IAAM,CACtBC,MAAAA,EAAYF,EAAQvD,KAAKxB,KAAOmE,EAChCe,EAAYF,IAAM,EACxB,OACEtB,EAAA,KAAA,CAAAhB,UACEgB,EAAA,MAAA,CAAAhB,SAAA,CACG4B,GACC/B,EAAA,OAAA,CAAMe,MAAQ,WAAU2B,EAAY,aAAe,EAAG,GAAEvC,SACtDH,EAACI,EAAI,CAACC,KAAK,eAAeE,IAAI,SAAA,CAAW,CAAA,CACrC,EAERP,EAAC4C,GAAM,CACLC,IAAKL,EAAQvD,KAAK6D,aAClBxC,KAAK,MACLyC,WAAY,SAAY,CACtB,GAAIL,EACE,GAAA,CACIzD,MAAAA,EAAO,MAAMnC,EAAMM,GAAGoE,SACzBwB,QAAQR,EAAQvD,KAAKxB,EAAE,EACvBO,MAAM,EACDW,EAAAA,OACR6D,GAAAA,MAAevD,QAAAA,WAAAA,CAAAA,EACTyC,GACC,MAAA,EAEX,CAAA,CACF,EAAA1B,EAAAiD,GAAA,CAEFjD,QAAS+B,EAAA,MAGD,KACE,KAAW9C,IAAAA,KAAAA,EAAAA,KAAAA,IAAAA,EAAAA,EAAAA,KAAAA,KAAAA,GAAAA,EAAAA,KAAAA,IAAAA,IAAAA,EAAAA,WAAAA,EAAAA,IACDiE,KAGZ,SACQjE,GAEdkE,QAAQ,IAAA,GAENlG,EAAe,YAAA,GAAAuF,EAAA,KAAA,QAAA,IAAAA,EAAA,WAAA,IAERf,GAAA,QAAA,IAAA,iBAAAe,EAAA,KAAA,EAAA,EACLf,SAAc2B,OAAAA,EAEhB,CAAA,CACF,CAAA,CAAA,CAAA,EACAjC,EAAA,MAAA,CAEJA,MAAAA,UAAKJ,SAAM,CAAA4B,GAAAZ,GAAAZ,EAAAC,EAAA,UACKW,CAAAA,EAAAA,OAAAA,CACZ5B,MAAAA,MACQY,SAAM,SAAA,CAAA,EAAM,GAAA,CAAA,CAAO,IAAWsC,GAAA,CAGxClC,MAAAA,MACEmC,WAAMtD,EAAA,SAAA,CACNuD,KAAAA,SAEItD,MAAK,OACLuD,MAAM,oBACNzC,SAAMf,EAAAI,EAAA,CAAmBD,KAAAA,OAEnBE,KAAK,IAAOC,IAAK,MAAA,CAAA,CAAQ,CAAA,EAAS,SAClC,CAAAa,EAAAsC,GAAA,CACTtD,QAEDgB,IAACsC,GACUvD,YAAM,GAAAsC,EAAA,KAAA,QAAA,IAAAA,EAAA,WAAA,EACbvF,EACF,SAAA,CAAA+C,EAAAI,EAAA,CAAED,KAAAA,MAEG,CAAA,EAAMH,EAAA,OAAA,CACXA,SAAA,eAAA,CAAA,CAAAG,CAAM,CAAA,EAAoBH,EAAA0D,GAAA,CAAA,CAAA,EAAA3B,GAAAZ,EAAAsC,GAAA,UAE3BC,EAGGC,QAAUhB,IAAAA,GACK,OAAAF,EAAA,CAAA,EAEJmB,EAAAA,SAAW,EACpBpC,GAAAA,cAAwB,WAAAA,CAAA,EAClBE,GACC,EACT,SAAA,CAAA1B,EAAAI,EAAA,CAAED,KAAAA,cAEG,CAAA,EAAMH,EAAA,OAAA,CACXA,SAAA,gBAAA,CAAA,CAAAG,CAAM,CAAA,EAAqBgB,EAAA0C,GAAA,CAG/B1C,QAAY,GACV2C,aAAO3C,EAAAC,EAAA,CACP2C,SAAAA,CAAAA,IACE,CAAA5D,KAAAA,MACO,CAAA,EAAMgB,EAAA,OAAA,CACXA,SAAA,CAAA,YAAAqB,EAAA,KAAA,KAAA,GAAA,CAAA,CAAA,CAAArC,CAAmC,CAAA,EAAO,SAC1C,CAAAuC,EAEJiB,kBAAWjB,SACXsB,QAAkB,IAAA,GACH,OAAAvB,EAAA,CAAA,EAGJmB,GAAAA,MAAAA,QAAW,WAAApC,CAAA,EACdE,SAAAA,KAAc,SAAA,UAAoB,GAE/BuC,EACX,SAAA,CAAAjE,EAAAI,EAAA,CAAED,KAAAA,MAEG,CAAA,EAAMH,EAAA,OAAA,CACXA,SAAA,UAAA,CAAA,CAAAG,CAAM,CAAA,CAAQ,CAAO,CAAA,CAAA,CACT,CAAA,CAAA,CACR,EACLqC,EAAC,KAAA,EAAA,CAAA,CAAA,CACJ,CAAA,EAEPxC,EAAA,IAAA,CAEHA,SAAAmB,EAAA+C,EAAA,CAAA/D,GAAAA,SACQgE,MAAG,gBAASpD,QAAMJ,EAAgBT,SAASS,CAAAA,EAAAA,EAAAA,CAAQR,KAAAA,MAClD,CAAA,EAAM,IAAAH,EAAA,OAAA,CAAQ,SAAEA,yBAAA,CAAA,CAAAG,CAAM,CAAA,CAA8B,CAAA,EACrD4B,GAAA/B,EAAA,IAAA,CACL,SAEDA,EAAAA,QAAAA,CAAAG,mBACEH,EAAA,IAAA,CAAA,SACQA,SAAA,CAAA,EAAG,iGAAA,CAAA,CAAO,CAElB,CAAA,CAAA,CAAO,CAAA,CAEV,CAAA,CAAA,CACM,CAAA,CACJ,CC7Kb,MAAeoE,GAAA,8lCCkCf,SAASC,GAA8BC,EAAc,CACnD,KAAM,CAAExH,MAAAA,CAAO,EAAGuB,EAAG,EACrB,OAAOvB,EAAMM,GAAGmH,KAAKD,aAAaE,OAAOF,CAAY,CACvD,CAEA,SAASG,IAA+B,CACtC,KAAM,CAAE3H,MAAAA,CAAO,EAAGuB,EAAG,EACrB,OAAOvB,EAAMM,GAAGmH,KAAKD,aAAatG,MAAK,CACzC,CAEA,SAAS0G,GAA8BJ,EAAc,CACnD,KAAM,CAAExH,MAAAA,CAAO,EAAGuB,EAAG,EACrB,OAAOvB,EAAMM,GAAGmH,KAAKD,aAAaK,OAAOL,CAAY,CACvD,CAEA,SAASM,IAAgC,CACvC,KAAM,CAAE9H,MAAAA,CAAO,EAAGuB,EAAG,EACrB,OAAOvB,EAAMM,GAAGmH,KAAKD,aAAaO,OAAM,CAC1C,CAKO,SAASC,IAAkB,CAChC,MAAO,kBAAmBC,WAAa,gBAAiBC,MAC1D,CAEO,SAASC,IAAkB,CAEhC,OAAOF,UAAUG,cAAcD,iBACjC,CAEA,eAAeE,IAAkB,CAC/B,MAAMC,EAAe,MAAMH,KACrBX,EAAec,EACjB,MAAMA,EAAaC,YAAYF,gBAAiB,EAChDG,OACJ,MAAO,CAAEF,aAAAA,EAAcd,aAAAA,EACzB,CAEA,SAASiB,GAAsBC,EAAc,CAC3C,MAAMC,EAAU,IAAIC,QAAQ,EAAKF,EAAa5H,OAAS,GAAM,CAAC,EACxD+H,EAAU,GAAEH,CAAa,GAAEC,CAAQ,GACtCG,QAAQ,KAAM,GAAG,EACjBA,QAAQ,KAAM,GAAG,EAEdC,EAAUb,OAAOc,KAAKH,CAAM,EAC5BI,EAAc,IAAIC,WAAWH,EAAQjI,MAAM,EAEjD,QAAS6E,EAAI,EAAGA,EAAIoD,EAAQjI,OAAQ,EAAE6E,EACpCsD,EAAYtD,CAAC,EAAIoD,EAAQI,WAAWxD,CAAC,EAGvC,OAAOsD,CACT,CAKO,eAAeG,IAAmB,CACvC,GAAI,CAACpB,GAAe,EAAI,OACxB,KAAM,CAAER,aAAAA,CAAa,EAAI,MAAMa,GAAe,EAC9C,IAAIgB,EAAsB,KAC1B,GAAI,CACFA,EAAsB,MAAM1B,IAC7B,OAAQ2B,EAAK,CACZ,GAAI,wBAAuBlD,KAAKkD,EAAIC,OAAO,EAIzC,MAAMD,CAEV,CAGED,GAAAA,GAAAA,EAAAA,CACA,MAAAG,EAAAH,EAAA,WAAA7B,EAAA,UAEF,SAAAiC,CACIJ,EAAAA,GAAmB,EACfG,EAAAA,EAAkC,YAAchC,EACtD,GAAM,CAAAgC,EAAEC,MAAAA,IAAAA,MAAAA,uCAAAA,EACR,GAAA,CAAAC,EAGA,MAAA,IAAA,MAAA,gDAAA,QAY6B,CAAAL,EAAU,CAErC,KAAE,CACF,SAAAI,CACA,EAAAE,GAAA,EACA,CACA,qBAAAC,CACA,EAAApC,EAAA,QACAqC,EAAApB,GAAAgB,CAAA,EAAA,SAAA,EACAK,EAAA,IAAA,WAAAF,CAAA,EAAA,SAAA,EAEA,GAAA,EADAC,IAAAC,GAKAtC,YAAYA,EAAK6B,cACnB,IAAA,MAAA,wCAAA,CACQI,CAWNnK,MAAAA,qCAGEoK,CACF,CACA,eAAAK,GAAA,CACA,KAAAC,EACA,OAAAC,CACF,EAAA,CACF,GAAA,CAAAjC,GAAA,EAAA,WAEA,aAAAM,EACA,aAAAd,CACA,EAAA,MAAAa,GAAA,EACAgB,EAAA,KACA,GAAA7B,EACA,GAAA,CACA6B,EAAA,MAAAzB,GAAA,CACA,KAAAoC,EACA,OAAAC,GAEqB,MAAA,CACvBZ,EAAA,MAAA9B,GAAA,CAEO,aAAAC,EAAwC,KAAAwC,EAAEC,OAAAA,CAAO,CAAG,CACX,KAAEA,CAChD,KAAKjC,CACD,SAAAyB,CAAc,EAAAE,GAAA,EAAEnC,GAAAA,CAAAA,EAAAA,MAAAA,IAAAA,MAAAA,qBAAAA,EAAiBA,EAAqB,MAAAc,EAAE,YAAA,UAAA,CACxDe,gBAAAA,GAEA7B,qBAAciB,GAAAgB,CAAA,EACZ,IACiB,MAAS7B,GAAAA,gBAE1BqC,KAAAA,EACF,OAAAA,CACA,CAAA,CAEA,OAEmB,qCAGjBA,CACF,CACA,eAAAC,IAAA,CACF,GAAA,CAAAlC,GAAA,EAAA,OACF,KAAO,CACL,aAAAR,GACM,MAAAa,GAAA,EAAEoB,IAAS,MAAqB3B,GAAE,EACxC,QAAe,cAEbqC,CC3LN,MAAMC,GAAoB,GACpBC,GAAa,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,EAE1C,SAASC,GAAS,CAAEzG,QAAAA,CAAQ,EAAG,CACvBF,MAAAA,EAAaC,GAAYzD,CAAM,EAC/BoK,EAAe5F,GAAMC,MAAMI,IAAI,OAAO,GAAK,OAC3CwF,EAAezL,IACf0L,EACJ9G,EAAW+G,SAASC,kCAAoC,KACpDC,EAAuBC,KACvBC,EAA2BC,GAAgBH,CAAoB,EAC/DI,EAAkBrG,GAAMC,MAAMI,IAAI,UAAU,GAAKoF,GAEjD,CAACa,EAAOC,CAAQ,EAAIpL,EAAS6E,GAAMe,QAAQV,IAAI,aAAa,GAAK,CAAA,CAAE,EACnE,CAAEhF,MAAAA,EAAOmL,cAAAA,EAAelL,SAAAA,GAAasB,EAAI,EAiB/C,OACE8C,EAAA,MAAA,CAAK1D,GAAG,qBAAqBsD,MAAM,QAAQuB,SAAS,KAAInC,SACrD,CAAA,CAAC,CAACQ,GACDX,EAAA,SAAA,CAAQC,KAAK,SAASc,MAAM,cAAcb,QAASS,EAAQR,SACzDH,EAACI,EAAI,CAACC,KAAK,GAAA,CAAK,CAAA,CACV,EAEVL,EAAA,SAAA,CAAAG,SACEH,EAAA,KAAA,CAAAG,SAAI,UAAA,CAAY,CAAA,CACV,EACRgB,EAAA,OAAA,CAAAhB,UACEH,EAAA,UAAA,CAAAG,SACEgB,EAAA,KAAA,CAAAhB,UACEgB,EAAA,KAAA,CAAAhB,UACEH,EAAA,MAAA,CAAAG,SACEH,EAAA,QAAA,CAAAG,SAAO,YAAA,CAAiB,CAAA,CACrB,EACLH,EAAA,MAAA,CAAAG,SACEH,EAAA,OAAA,CACEuC,IAAK+E,EACLY,QAAgBxI,GAAA,CACdtD,EAAAA,eAAa,EAEb,MAAM+L,EADW,IAAA,SAAAb,EAAA,OAAA,EACaA,IAAAA,OAAAA,EACxBc,EAAAA,SAAiBtG,gBACvBsG,IAAsBC,OAEtBC,YAAsB,OAAA,WAAA,SAAA,GAEfA,EAAA,UAAA,OAAA,WAAAF,IAAA,OAAA,EACLE,EAAKC,UAAUC,OAAO,UAAYJ,IAAAA,MAAiB,GAErD,SAAA,cAAA,2BAAA,EAAA,aAAA,UAAAA,IAAA,OAAA,aAAAA,CAAA,EAEGrI,IAAAA,OAMH0B,SAAc,IAAQ,OAAA,EAEfA,GAAA,MAAA,IAAA,QAAA2G,CAAA,CAEP,EACF,SAAAjH,EAAA,MAAA,CAAEhB,MAAAA,cAEGY,SAAM,CAAAI,EAAA,QAAA,CAAahB,SACtBgB,CAAAA,EAAA,QAAA,CAAAhB,KAAAA,QAEIF,KAAK,QACLwI,MAAK,QACL/K,eAAM2J,IAAA,OAAA,CAAA,YAGRrH,SAAA,OAAA,CAAA,CAAAG,CAAM,CAAA,EAAYgB,EAAA,QAAA,CAEpBA,SAAA,CAAAnB,EAAA,QAAA,CAAAG,KAAAA,QAEIF,KAAK,QACLwI,MAAK,OACL/K,eAAM2J,IAAA,MAAA,CAAA,YAGRrH,SAAA,MAAA,CAAA,CAAAG,CAAM,CAAA,EAAWgB,EAAA,QAAA,CAEnBA,SAAA,CAAAnB,EAAA,QAAA,CAAAG,KAAAA,QAEIF,KAAK,QACLwI,MAAK,OACL/K,eAAM2J,IAAA,SAAAA,IAAA,MAAA,CACNqB,EAAAA,EAAAA,OAAAA,CAIF1I,SAAA,MAAA,CAAA,CAAAG,CAAM,CAAA,CAAI,CAAO,CAAA,CACX,CAAA,CACL,CAAA,CAAC,CACF,CAAA,EACFgB,EAAA,KAAA,CAERA,SAAA,CAAAnB,EAAA,MAAA,CAAAG,SACEH,EAAA,QAAA,CAAAG,oBACE,CAAA,CAAO,CAAA,EAAgBgB,EAAA,MAAA,CAEzBA,MAAAA,cAAKJ,SAAM,CAAAf,EAAA,OAAA,CAAaG,MAAAA,CACT,SAAAgH,GAAA,CAAA,CAAEwB,EAAwB,SAAA,GAAA,CAAA,EAAG,IAAA3I,EAAA,QAAA,CAAO,KACjDA,QACEC,IAAKkH,GAAA,CAAA,EACLyB,IAAKzB,GAAWA,GAAC,OAAA,CAAA,EACjB0B,KAAK1B,IACL2B,MAAKhB,EACLpK,KAAOoK,QACPxK,SAAKoC,GAAA,CACLqJ,MAAAA,EAAiB,SAAArJ,EAAA,OAAA,MAAA,EAAA,EACDsJ,SAAAA,gBACd,kBAAsBX,cAAAA,GAAAA,CAAAA,IAAAA,EAEtBC,IAAWW,GAEXxH,SAAcyF,IAAmB,UAAA,EAE1BzF,GAAA,MAAA,IAAA,WAAA/B,EAAA,OAAA,KAAA,CAEP,CAAA,CACF,EAAA,IAAAM,EAAA,OAAA,CACD,MACDA,CAAa,SAAAmH,GAAAA,GAAA,OAAA,CAAA,CAAA,EAA8C,SAAA,GAAA,CAAA,EAAGnH,EAAA,WAAA,CAG9DA,GAAAA,QAAUvC,SAAG0J,GAAA,IAAA7G,GAAAN,EAAA,SAAA,QAET,CAAA,CAAQtC,CAAO4C,CAAAA,CAAK,CACrB,CAAA,CAAC,CACO,CAAA,CAAA,CACP,CAAA,CACH,CAAA,EACH2H,GAAA9G,EAAAC,EAAA,CACG,SAEPD,CAAAA,EAAAA,KAAAA,CAAAhB,SACEH,SAAA,CAAA,EAAIA,EAAA,UAAA,CACJA,SAAAA,EAAA,KAAA,CAAAG,WACE,KAAA,CAAAA,YACE,MAAA,CAAAA,SACEH,EAAA,QAAA,CAAAG,IAAAA,wBACS+I,SAAI,CAAA,qBAAA,IAAAlJ,EAAAI,EAAA,cAEHC,IAAK,SAAQE,MAAI,aAAA,CAAA,CAASQ,CAAM,CAAA,CAAgB,CAAA,EACjDf,EAAA,MAAA,CAETA,SAAAmB,EAAA,SAAA,CAAAhB,GAAAA,wBAEI1C,MAAGsK,EAAA,4BAAA,GAAA,SACHrK,SAAagC,GAAA,CACbqJ,KAAAA,CACQ,MAAArL,CAAA,EAAEA,EAAAA,iBAAYyL,CACP,GAAA,CACP,MAAArM,EAAA,GAAA,SAAA,kBAAA,CACIA,OAAAA,CACI,QAAAY,CAAA,CACGA,CACX,EACFsK,EAAC,CACQ,GAAAD,EACP,6BAAGA,CAAAA,CAAAA,EAELtG,GAAC,QAAA,IAAA,cAAA,CACKe,GAAAA,EACJ,6BAAGuF,CAAAA,CAAAA,CAC2BrK,MAC/B,yCACS,CACV0L,CACAhN,IACF,EAAA,SACC,CAAA4D,EAAA,SAAA,CACL,MAAA,SAAEG,SAEFH,QAAA,CAAA,EAAcA,EAAA,SAAA,CAAQG,MAAC,WACvBH,SAAA,UAAA,CAAA,EAAcA,EAAA,SAAA,CAAUG,MAAC,UACzBH,SAAA,gBAAA,CAAA,CAAQtC,CAAM,CAAA,CAAU,CAAA,CAAA,CAAuB,CAAA,CACzC,CAAA,CACJ,CAAA,EAAAyD,EACJ,IAAA,CAAC,MACH,mBAENA,SAAA,CAAAnB,EAAAI,EAAA,CAAS,KAAA,QAAkBD,IAAAA,SACnBE,MAAK,aAAA,CAAA,EAAY,IAAAc,EAAA,QAAA,CAASJ,SAAM,CAAA,6CAAA,IAAAI,EAAA,IAAA,CAAiB,KACvDA,WAAApE,CAAA,IAAO,OAAA,SAGHkH,IAAAA,sBACAkF,SAAO,CAAA,wBAAApM,EAAA,sBAAA,CAAA,CAAA,CACPsM,CAAI,CAAA,CAAA,CAGN,CAAA,CAAA,CAAI,CAAA,EAAArJ,EACE,KAAA,CAAA,SACN,aAAA,CACJ,EAEJA,EAAA,UAAA,CAAAG,SAAIgB,EAAA,KAAA,CACJnB,SAAA,CAAAA,EAAA,KAAA,CAAAG,WACE,QAAA,CAAAA,SACEH,CAAAA,EAAA,QAAA,CAAAG,KACEgB,WAAAhB,QACEH,EAAA,SAAA,YACEC,SAAKP,GAAA,CACL4J,EAAS7I,qBAAoB8I,EAAAA,OAAAA,OAC7BR,CACSvB,CAAAA,EAAAA,IAAAA,6BAAgC8B,CAAAA,CACzC,CAAA,CAAE,EAAAtJ,EACD,KAEL,CAAA,SAAOmB,EAAA,QAAA,CAETnB,SAAA,CAAAA,EAAA,QAAA,CAAAG,KACEgB,WAAAhB,QACEH,EAAA,SAAA,eACEC,SAAKP,GAAA,CACL4J,EAAS7I,wBAAoB+I,EAAAA,OAAAA,OAC7BT,CACSvB,CAAAA,EAAAA,IAAAA,iBAA0B9H,CAAS4J,CAC5C,CAAA,CAAE,EAAAnI,EACD,KAEL,CAAA,SAAO,CAAAA,EAAA,QAAA,CAETA,SAAA,CAAAnB,EAAA,QAAA,CAAAG,gBACEA,QACEH,EAAA,SAAA,mBACEC,SAAKP,GAAA,CACL4J,KAAAA,CACAP,QAAAA,CACQ,EAAArJ,EAAA,OAAE4J,EAAAA,SAAAA,mBAAAA,EAAcH,IACtBlM,WAAqCqM,iCAAAA,KAEnCrM,CAAmD,CACrD,EAAA,IAAA,kBAAA,CAAA,CACF,EAAAkE,EAAA,MAAA,CAAE,MACD,eAELV,EAAA,SAAA,mBAAA,GAAA,oBAAA,GACAU,SAAA,CAAAnB,EAAA,MAAA,UAEImB,EAAA,SAGChB,SAEHH,CAAAA,eAAA,IAAAmB,EAAA,SAAA,CAAAhB,SACE,GAAO,SACQ,CAAAM,EAAA,4BAEX/C,SAAyBgC,GAAA,CACzBiE,EAAAA,SAAWlD,iCAAoBgJ,EAAAA,OAAAA,OAAAA,IAC/BV,EACE9L,SAAgBwK,CAAAA,EAAAA,SAAAA,CAElB,MAAA,GAAEtH,SAEFgB,CAAAA,oBAAAyG,EAAA,GAAA,CAAA,CAAA,EAAc5H,EAAA,SAAA,CAAEG,SAAC,GAGjBH,SAAA,YAAA,CAAA,EAAgB0J,GAAA,IAAAC,GAAA3J,EAAA,SAAA,CAAAG,MAACwJ,EAAA,KAChBD,SAAAA,EAAAA,IACC,CAAA,CAAQhM,EAAYkM,CAAAA,CAAAA,CAAYnB,CAAI,CACpC,CAAA,EAAAzI,EACK,KAAA,CAAA,CAAA,EAAAmB,EAAA,IAAA,CAAA,MACJ,6BAEJ,CAAA,8BACLV,EAAA,SAAA,gCAAA,OAAA,GAAAU,EAAAC,EAAA,CAAS,SAAA,CAAA,IAAA,IAAAX,EAAA,SAAA,gCAAA,OAAA,GAAA,CAAA,CAAmBN,EAAAA,IAAAA,EAEzBM,MAAAA,CAECN,MAAAA,kBAQE,SAGJH,GAAA,IAAA2J,GAAAxI,EAAA,QAAA,CAAW,SAAA,CAAAnB,EAAA,QAAA,MACR0J,WACCvJ,QACEH,EAAA,SAAA,gCAAA,SAAA2J,EAAA,IAAA,EACE1J,SAAKP,GAAA,OAILqJ,QAAAA,CACQ,EAAArJ,EAAA,OAAE4J,IAAcH,SAAAA,gCAAAA,KAAAA,EAAAA,IAAAA,EAEpBlM,EAAOuK,SAASqC,gCACdF,EACF,SAAA,gCAAA,OAAAC,GAAAA,IAAAD,EAAA,IAAA,CAEOnC,CAGL,CACJ,EAAA,IAAAmC,EAAA,IAAA,CAAA,CACF,CAAA,CAAA,CAAA,CAAA,CAEQ,CAAA,EAAA3J,EAEb,IAAA,CAAC,MACE,gBAERA,SAAAmB,EAAA,QAAA,CAAS,SAAA,CAAA,mEAAA,IAAAnB,EAAA,IAAA,CAAeG,KACtBgB,oDAAO,OAAA,SAIH8C,IAAK,sBACLkF,SAAO,kBAAA,CAAA,EACH,GAAA,CAAA,CAAA,CACL,CAED,EAAAnJ,EAEF,KAAA,CAAA,CAAA,EAAAmB,EAAA,MAAA,CAAA,SAAO,CAAAA,EAAA,QAAA,CAETnB,SAAK,CAAAA,EACLmB,QAAA,CAAAhB,gBACEA,QACEH,EAAA,SAAA,6BACEC,SAAK,CAAAQ,EAAA,SAAA,mBACL6I,aACA3F,EAAAA,SAAWlD,6BAAoBgJ,EAAAA,OAAAA,OAC/BV,CACSvB,CAAAA,EAAAA,IAAAA,yBACL9H,CAAS4J,CACb,EAAAtJ,EAAA,IAAA,CAAE,MACD,gBAGLA,SAAAmB,EAAA,QAAA,CAAS,SAAA,CAAA,wEAAAnB,EAAA,IAAA,CAAeG,gBACtB,CAAA,EAAA,iDAEYH,CAAA,CAAA,CAAG,CAAK,CAAA,CAEpB,CAAA,CAAA,CAAO,CAAA,CAAA,CACL,CAAA,EAAAmB,EACA,KAAA,CAAA,SACF,CAAAA,EAAA,QAAA,CAERA,SAAA,CAAAnB,EAAA,QAAA,CAAAG,gBACEA,QACEH,EAAA,SAAA,UACEC,SAAKP,GAAA,CACL4J,EAAS7I,mBAAoBqJ,EAAAA,OAAAA,OAC7Bf,CACSvB,CAAAA,EAAAA,IAAAA,aAAqB9H,IAAAA,EAAEyJ,OAAOG,CACvC,MAAA,gBACC,SACQ,CAAA,IAAAtJ,EAAA,QACC,SAAA,MAAA,CAAe,EAAA,MAACA,EACzBA,OAAA,CAAAG,SAAM,MAAU,CAAA,EAAI,GAAAH,CAAA,CAAA,CAAA,CAAM,CAAI,EAAAA,EACjC,MAAA,CAAA,MAAO,4BAETA,SAAAA,EAAA,QAAA,CAAW,SAAA,8EAAA,CAA2BG,CACpC,CAAA,CAAA,CAAO,CAAA,EAGP8H,GAAOjI,EAAA,KAAA,CAAC,SACJA,EAAA,SAAA,CAEPiI,KACCjI,SAAAG,MAAAA,QAEIF,QAAK,IAAA,CACChD,EAAA,WAAA,KACGiD,aAAM,EACbjD,EACAA,SAAsB,eAAA,CACxB,CAAA,CAAA,CAAA,CACD,CAAA,CAEO,CAAA,EAACgL,GAEZjI,EAAA+J,GAAA,CAAA,QAAApJ,CACC,CACG,EACRsH,EAAiBjI,KAAAA,CAA0BW,SAAAA,OAAAA,CAAmB,EAC/DX,EAAA,UAAA,CAAAG,SAAI,CAAAgB,EAAA,MAAA,CACJA,MAAA,CAAAhB,QACEgB,OACS,SAAA,OACL6I,IAAS,EACTC,WAAU,KACVC,WAAK,SACLC,UAAY,CAAA,EACA,SACD,CAAAnK,EAAA,MAAA,CACb,IAAAoE,GAAEjE,IAAAA,GAGAiK,MAAKhG,KACL7D,OAAI,KACJ8J,MAAM,CACC,YAAA,MACA,cAAA,SACLC,WAAa,UACbC,aAAe,EAAA,CACH,CAAA,EACZC,EAAc,MAAA,CAChB,SAAA,CAAAxK,EAAA,IAAA,CAEFmB,SAAA,QAAA,CAAAhB,EAAAA,IAAAA,EACEH,IAAA,CAAAG,KAAG,+BAAS,IACZH,sBACEiE,QAAKvE,GAAA,CAEDA,EAAA,eAAA,EACJQ,EAAUR,YAAM,qBACdA,EACAzC,SAAqB,SAAA,CACvB,EAAA+C,EAAA,KAAA,CAAA,CAAA,EAAAA,EAAA,IAAA,CAAEG,KACH,2CAGI,SAEH8D,IAAK,sBACLkF,SAAO,OAAA,CAAA,EACH,IAAA,KAAA,IAAAnJ,EAAA,IAAA,CAAqBG,KAC1B,mCAEI,IAAA,sBAGH8D,QAAKvE,GAAA,CAEDA,EAAA,eAAA,EACJQ,EAAUR,YAAM,yBACdA,EACAzC,SAAqB,UAAA,CACvB,CAAA,CAAA,CAAA,CAAA,CACD,CAAA,EAEDkE,EAAI,IAAA,CAAA,SACA,CAAAnB,EAAA,IAAA,CAERmB,KAAA,sCAAAhB,gBAEI8D,IAAK,sBACLkF,SAAO,SAAA,CAAA,EACH,IAAA,IAAA,IAAAnJ,EAAA,IAAA,CAAqBG,KAC1B,uCAEI,OACI,SAEP8D,IAAK,sBACLkF,SAAO,QAAA,CAAA,EACH,IAAA,IAAA,IAAAnJ,EAAA,IAAA,CAAqBG,KAC1B,yDAEI,OACI,SAEP8D,IAAK,sBACLkF,SAAO,gBAAA,CAAA,CACPE,CAAI,CAAA,EAAqBlJ,EAC1B,IAAA,CAED,SAAI,CAAA,WAAA,IAAAH,EAAA,QAAA,CAGJmB,KAAA,OAAG,MAAA,iBAGClB,SAAK,GACLc,KAAM,KACN0J,MAAQ,GAAA,2BAAA,MAAA,EAAA,EAAA,EAAA,QAAA,KAAA,GAAA,CAAA,WACRnK,QAAKZ,GAAA,UACKgL,SAGVxK,GAAAA,CACIiJ,UAAc,UAAA,UAAAzJ,EAAA,OAAA,KAAA,EAEZiL,GAAA,uBAAA,CACF5F,MAAoB6F,CACpBD,GAAU,+BAAuB,EAEjCvO,CACAuO,CAAAA,EAAAA,IAAAA,EAAAA,OAAyC,CAC3C,MAAA,mBACF,SAAA,CAAA,IAAA3K,EAAA,IAAA,CACC,KACHmB,mDAAY,OAAA,SAAkB,IAAA,sBAG1B8C,eACO,SAAA,IAAA,KAAA,0BAAA,CAAA,CACH,CAAqB9D,CAAAA,EAAAA,GAAAA,CAEZ,CAAC0K,CAAAA,CAAiC,CAAA,CAAA,CAAI,CAAC,CAAA,CAGxD,CAAA,CAAA,CAAO,CAAA,CAEV,CACO,SACLd,GAAA,CAAA,QAAApJ,CAGb,EAAA,CAEA,GAAA,CAAAmE,GAAkC,EAAEnE,OAAAA,KAAW,KAAA,CAC7C,SAAA5D,CAA+B,EAAAsB,EAAA,EAEzB,CAAAyM,EAAAC,CAAA,EAAAnO,EAAA,SAAA,EAAEG,EAAAA,IAAiB,CAAAiO,EAAAC,CAAA,EAAArO,EAAA,EAAA,EACnB,CAACkO,EAAmBI,KAAsB,EAAA,EAC1CC,EAAqBtP,IAC3BC,EAAOkP,IAAAA,EACP,SAAOI,CACPL,aACAjP,GAAAA,CACe,KAAA,CACXiP,aAAAA,EACI,oBAAA5E,CACI,EAAA,MAAAD,GAAA,EAAE5B,GAAAA,GAAAA,MAAAA,EAAAA,QAAAA,EAAAA,SAAAA,OAAAA,CAAc6B,EAAAA,EAAAA,EAAoB,MAExCA,OAAAA,EAGA8E,OAAAA,CACM,EAAA9E,EAAEkF,EAAAA,QAAAA,EAAQtE,KAAAA,CAAWZ,SAAAA,CAC3BmF,EAAAA,EAAAA,QACMC,EAAAC,EAAA,UAAAzE,CAAA,EAAEyE,MAAyBzP,MAAAA,GAC3BwP,OAAAA,KAAAA,CAAoBE,EAAAA,QAAAA,GAAgB,CACtCF,MAAAA,EAAAA,EAAAA,UAAAA,CAAAA,GAAUA,GAAAA,YAAAA,EAAAA,QAAiBxE,aAE/B2E,EAAOxK,QAAKmK,GAENM,CAAAA,CACFA,CACFZ,EAAA,SAAA,CAAA,OACD3E,EAAA,CACH,uBAAA,KAAAA,EAAA,OAAA,EACA2E,EAAoB,EAAA,EAEpB3O,OAAQwP,GAAAA,YAAAA,EAAKxF,UAAGA,CAAA,EAEd8E,EAAAA,OAAmB,CAAA,CAEb9E,IACR,EAAA,CAAA,CAAA,EACA2E,MAAAA,EAAkBD,IAAA,UACpB,OAAA3J,EAAA,OAAA,CACF,IAAGgK,EACL,SAAK,IAAA,CAEL,QAA8B,OAAA,YAAA,IAAA,SAAAA,EAAA,OAAA,CAAA,IAG5B,CAAA,CAAAU,EAAA,cAAA,EACOV,EAAAA,QACWU,EAAA,OACd,MACA,OAA2B,CACrBC,QAAS,CAAA,CAAAD,EAAA,kBACE9E,CAAAA,CAAAA,EAAAA,UACT,OAAA,CAAA,CAAA8E,EAAA,OACI,OAAA,CAAA,CAAAA,EAAA,OACNE,eAAkBA,CAAAA,CAAAA,EAAAA,cAClBC,KAAAA,CAAAA,CAAAA,EAAoBA,KACpBC,OAAQ,CAAC,CAACJ,EAAOI,OACjBC,OAAQ,CAAC,CAACL,EAAOK,MACjBC,CACAC,CAAeA,EAEfC,IAAAA,EAAiBA,EACnB,OAAA,KAAAP,EAAA,KAAA,MAAA,EAAA,QAAAQ,GAAA,CACFR,EAAA,KAAA,OAAAQ,CAAA,EAMFZ,IALA,OAAAI,EAAA,KAAA,OAAAQ,CAAA,CAOWR,CAAAA,EAAsB,MACxBS,EAAAjB,EAAA,UAAAQ,EAAA,OACLU,GAAAA,EAAAA,EACFD,EACDvF,GAAA,EAAA,KAAA,IAAA,CACKuF,GAAkCxQ,CAAAA,CAExCK,CAAAA,EAAAA,MAAuBgK,GAAA,CAAEyF,MAAAA,kDAAAA,CAAAA,CAAQb,EAA4BnE,GAAAiF,CAAA,EAAA,MAAA1F,GAAA,CAEzD4E,MAAAA,kDAAuC,CACzC,CAAA,EAIMnE,GAAAA,EAAAA,MAAyBT,GAAA,CAC3B,MACQA,kDAAQ,CACdhK,CAAAA,CACwD,EACzD,SACE,CAAA4D,EAAA,KAAA,CACc8L,SAAAA,2BACjB1P,CAAAA,EAAAA,EAAAA,WACAgN,SAAAA,EAAwD,KAAA,CAAA,SACzDjI,EAAA,KAAA,CACH,SAAA,CAAAA,EAAA,QAAA,CACK,SAAA,CAAAnB,EAAA,QAAA,CACc,KAAA,WACjB5D,SAAgBqQ,GAAArB,EAChBhC,KAAwD,eACzD,QAAA4B,EACH,SAAA,MAAAtL,GAAA,CACF,KAAA,CAEAM,QAAAA,CAAA,EAAIN,EAAA,OACJ,GAAA4J,EAAA,OACEoD,EAAA,MAAA,aAAA,wBACE,YACE,EAAA,GAESzB,EAAA,EAAA,EACKwB,IAAarB,UAClB,MAAA,8EAAA,EAGG,MAAE9B,EAAAA,EAAAA,CACR,CAEQoD,CAAAA,EAAAA,IAAAA,aAAAA,IAAmBC,EAAAA,SAAAA,CACzB,KAAA,SACE1B,SAAAA,GAAAA,GAA0B,CAAAD,EAAA,SACrB,CAAA,CACLC,MAAAA,MACA,MAAA,QACE7B,EAAAA,CAGF,MAAA,WACF,MAAA,iBAAA,EACK,CACL6B,MAAAA,WACF,MAAA,WACF,CAAA,EAAA,IAAAhL,GAAAD,EAAA,SAAA,CACC,MACQC,EAAA,MAEJ,SAAAA,EAAA,KAAA,CACL0D,CAAAA,CAAuCqH,CAAAA,CAAmB7K,CAGxD,CAAA,EAAAH,EACS,MAAA,CAAA,MACA,gCAAA,MAET,CAAA,MACS,MAAA,EACA,OAET,CAAAgL,EAAA,SACShL,EAAA,MAAA,CAAA,MACA,yBACT,SACKC,EAAAA,MACL,CAAQvC,MAAOuC,cAAWE,SAAEF,EAAK2M,KAAAA,CAClC,SAAA,CAAA,CACM,MAAA,UAEX,MAAA,UAAA,EACQ,CACC,MAAA,YACE,MAAA,OAAA,EACT,CACQ,MAAC5B,SAAmB7K,MAE5B,QAAA,EAAW,CAAwBA,eACtB,MAAA,SAAA,EAAaA,uBAIhBzC,MAAO,iBAAA,EACA,CAET,MAAA,OACEA,MAAO,OAAA,EACA,CAET,MAAA,SACEA,MAAO,YAAA,EACA,CAET,MAAA,SACEA,MAAO,WAAA,CAAA,EACA,IAAAmP,GAAA7M,EAAA,KAAA,CAET,SAAAmB,EAAA,QAAA,CACS,SAAA,CAAAnB,EAAA,QAAA,CACA,KAAA,WAET,KAAA6M,EAAA,KAAA,CACS,EAAA,IAAAA,EAAA,KAAA,CAAA,CACA,CAAA,CAET,CAAA,CAAA,CAAA,CACS,CAAA,CACA,CAAA,CAET,CAAA,EAAAzB,GACSpL,EAAA,MAAA,CAAA,MAAA,cACA,SAETsB,EAAK8H,IAAAA,CACLjJ,SAAAA,CAAAA,wEACE,IAAAgB,EAAA+C,EAAA,CAAA/D,GAAAA,mBACEpD,CAAA,GAAA,QAAY4D,EAAA,YAAuBjD,IAAAA,CAAAA,SAClC0L,QAAW,CAAA,EAAA,iCACP,CAAA,CAAA,EAAC,GAEX,CAAA,CAAA,CACC,CAAA,CAAA,CACD,CAAA,CACF,CAAA,CAGL,CAAA,EAAApJ,EAAW,IAAA,CAAaG,MAAAA,mBACtB,mBAEU,CACFgE,SAAAA,CAAAA,0CAAgCnE,EAAA,IAAA,CAAA,SAAYW,aAAQR,CAAAA,EAAAA,GAAAA,CACxD,CAAA,CAAG,CAAM,CAAA,CACX,CAAA,CAEF,CCzwBhB,MAAM2M,GAAYA,IAAM,CAClBC,IAAAA,EAAQxO,WAAW,IAAM,CAE3B,GAAIyO,CADY9Q,SAAS+Q,eAAe,SAAS,EAI1C,CACCC,MAAAA,EAAShR,SAASiR,iBAAiB,sBAAsB,EAC/D,GAAID,GAAAA,MAAAA,EAAQtP,OAAQ,CAElB,MAAMwP,EAAQF,EAAOA,EAAOtP,OAAS,CAAC,EAChCyP,EACJD,EAAMrN,cAAc,iBAAiB,GAAKqN,EAC5C,GAAIC,EAAmB,CACrBA,EAAkBC,MAAM,EACxB,MACF,CACF,CAEIC,GADarR,SAAS6D,cAAc,gBAAgB,EAC1C,OAERyN,MAAAA,EAAQtR,SAASiR,iBAAiB,iBAAiB,EACnDM,EAAOD,EAAMA,EAAM5P,OAAS,CAAC,EAC/B6P,GAAQA,EAAKnL,WAAa,IACpB3D,EAAAA,MAAAA,CAEV,CACF,EAAA,GAAA,EACF,MAAM,IAAA,aAAAoO,CAAA,CACN,ECvBa,SAASW,GAAkBhS,EAAI,CAC5C,GAAI,CAACA,EAAI,OACT,MAAMiS,EAAWC,KACXC,EAAqBhS,EAAO8R,EAASG,QAAQ,EACnDhS,EAAU,IAAM,CAMZ+R,EAAmB9R,SACnB4R,EAASG,WAAaD,EAAmB9R,UAEzCL,GAAAA,MAAAA,IAEH,EAAE,CAACiS,EAASG,SAAUpS,CAAE,CAAC,CAC5B,CCdA,SAASqS,GAAY,CAAEzQ,KAAAA,EAAMqD,QAAAA,CAAQ,EAAG,CAChC,KAAA,CAAE7D,MAAAA,GAAUuB,EAAI,EAChB,CAACyM,EAASC,CAAU,EAAInO,EAAS,SAAS,EAC1CoR,EAAW,CAAC,CAAC1Q,EACb2Q,EAAepS,IACfqS,EAAwBrS,IACxBsS,EAAoBtS,IAC1BC,EAAU,IAAM,CACVkS,IACWjS,EAAAA,QAAQ2B,MAAQJ,EAAKkG,MACZzH,EAAAA,QAAQ2B,MAAQJ,EAAK8Q,cACvCD,EAAkBpS,UACFA,EAAAA,QAAQuN,QAAUhM,EAAK+Q,WAE7C,EACC,CAACL,CAAQ,CAAC,EACPM,MAAAA,EAAoBC,GAAS,0BAA0B,EAE7D,OACEpN,EAAA,MAAA,CAAKJ,MAAM,QAAOZ,SACf,CAAA,CAAC,CAACQ,GACDX,EAAA,SAAA,CAAQC,KAAK,SAASc,MAAM,cAAcb,QAASS,EAAQR,SACzDH,EAACI,EAAI,CAACC,KAAK,GAAA,CAAK,CAAA,CACV,EACP,IACHL,EAAA,SAAA,CAAAG,SACEH,EAAA,KAAA,CAAAG,SAAK6N,EAAW,YAAc,UAAA,CAAe,CAAA,CACvC,EACRhO,EAAA,OAAA,CAAAG,SACEgB,EAAA,OAAA,CACEJ,MAAM,YACNyN,SAAiB9O,GAAA,CACfA,EAAE+O,eAAe,EAEjB,MAAMtG,EAAW,IAAIuG,SAAShP,EAAEyJ,MAAM,EAChC3F,EAAQ2E,EAASrG,IAAI,OAAO,EAC5BsM,EAAgBjG,EAASrG,IAAI,gBAAgB,EAC7CuM,EAAYlG,EAASrG,IAAI,WAAW,IAAM,KAChD1F,EAAY,SAAA,GACVoH,SAAAA,CACA4K,GAAAA,CACAC,IAAAA,EACDL,EACDjD,EAAoB,MAAAjO,EAAA,GAAA,MAAA,QAAAQ,EAAA,EAAA,EAAA,OAAA,CAEP,MAAAkG,EACP,eAAA4K,EACEO,UAAAA,CAEJ,CAAA,EAEInL,EAAAA,MAAAA,EAAAA,GAAAA,MAAAA,OAAAA,CACAoL,MAAAA,EACAP,eAAAA,EACD,UAAAA,CAAA,CACI,EAEH7K,EAAAA,SAAAA,EAAAA,GAAAA,MAAAA,EACgB4K,CAChBC,MAAAA,UACF,KAACM,CAAA,EAGHvS,OACA2O,EAAW,OAAS,EACV,MAAAiD,EAAA,uBAAA,wBAAA,CAAA,CACD,IACDW,EACP,YACS,MAAA,CACVvS,MAAAA,gBACA2O,SAAAA,EAAkB,QAAA,CAEhBiD,IAAAA,aAEJ,SAAA,CAAA,OAAA,IAAAhO,EAAA,QAAA,CACC,IAAAiO,EACL,KAAA,OAAE9N,gBAES,KAAA,QAAeA,YACb,SAAA2K,IAAA,UAAa,IAAA,MAEtB,CAAA,CACEvI,CAAK0L,CAAAA,CACA,CAAA,EAAAjO,EACF,MAAA,CAAA,MACE,gBAAA,SACGmB,EAAA,SAAA,CAAA,MACc,KAClB,iBAAM,SACV,GACG,SAAA2J,IAAA,UAET9K,SAAA,CAAAA,EAAA,SAAA,CAAW,MAAA,OAAeG,uCACxB,CACO+N,EAAAA,EAAAA,SAAAA,CACA,MAAA,WACG,SAAA,iCAAA,cACc,CAAU/N,MAAAA,OAExBzC,SAAM,oBAAA,CAAA,CAAMyC,CAAC,CAA4B,CACjD,CAAA,EAAAmO,GAActO,EAAA,MAAA,CAAA,MAAW,gBAA+B,SACxDA,EAAA,QAAA,CAAA,MAAc,cAAA,SAAO,CAAAA,EAAA,QAAA,CAA2B,IAAAmO,EAC1C,KAAA,WAGRnO,KAAAA,YAAW,SAAA8K,IAAA,SAAA,CAAe3K,EAAAA,iDACxB,CAAA,CAAA,CAAa,CAAaA,EAAAA,EAAAA,MACxBH,CAAA,MACOmO,mBAAAA,SACA,CAAAnO,EAAA,SAAA,CAAA,KACA,SAAA,aACiB,UAAU,SAGpCgO,EAAA,OAAA,QAAA,CAAO,EAAAA,GAAAhO,EAAA6D,GAAA,CAGX1C,SAAA2J,IAAA,UAAW,MAAA,MAAkB3K,kBAC3B,SAAQF,aAAK,oBAAS0D,YAAsB,CAAUxD,WAC/B,GAGrBH,SAAAA,KAEQ,MAAAlD,EAAA,GAAA,MAAA,QAAAQ,EAAA,EAAA,EAAA,SACYyN,EAAA,SAAA,EACLpK,GAAA,MAAAA,EAAA,OACE,SAGboK,EAEa,MAAA,CACPA,EAAA,OAAA,EACF,MAAMjO,wBAA4BW,CAClCsN,CACApK,IAAU,EACD,SACRX,EAAA,SAAA,CAAA,cAED5D,MAAAA,eACA2O,SAAAA,IAAkB,UAClB3B,SAAM,SAAwB,CAChC,CAAA,CAAA,CAAA,CACC,CACL,CAAA,CAAA,CAAEjJ,CAEF,CAAA,CAAA,CACO,CAAA,CACC,CC1HxB,MAAM0O,GAAiB,CACrB,GAAK,EACL,GAAK,GACL,GAAK,GACL,GAAK,GAAK,EACV,GAAK,GAAK,GACV,GAAK,GAAK,GAAK,EACf,GAAK,GAAK,GAAK,EACf,CAAG,EAECC,GAAwB,CAC5B,EAAG,UACH,IAAK,YACL,KAAO,aACP,KAAO,SACP,MAAQ,UACR,MAAQ,QACR,OAAS,SACT,OAAS,QACX,EAEMC,GAAQ,GAERC,GAAuB,IAAO,GAAK,GAEzC,SAASC,GAAuBC,EAAWpS,EAAO,CAChD,OAAOA,EAAMM,GAAGoE,SAAS2N,kBAAkBnR,MAAM,CAC/CP,GAAI,CAACyR,CAAS,CAAA,CACf,CACH,CACA,MAAME,GAA4BC,GAAKJ,GAAwB,CAC7DK,OAAQN,EACV,CAAC,EAED,eAAeO,GAAkBC,EAAW1S,EAAO,CAC3C2S,MAAAA,EAAgB3S,EAAMM,GAAGoE,SAC5BwB,QAAQwM,CAAS,EACjBE,SAASpS,KAAK,CACbC,MAAO,EAAA,CACR,EACAI,KAAK,EAEF,CAAED,MAAOgS,GAAa,MAAMD,EAC1B9Q,GACR,MAAc+Q,EAAA,OACZC,UAAgB/R,EAChBgS,QAAW,EACXC,OAAS,CAAA,EAEX,OAAAH,EAAA,QAAArD,GAAA,CAMAqD,SACEI,WACQC,EAAAA,aAAAA,EAAAA,qBAAAA,EAAAA,QAAAA,GACRD,EAAA,UAKOA,EAAA,WACCF,CACR,EACDF,EAAA,SAGDI,oBAAqB,KAAA,MAAA,KAAA,MAAA,IAAA,KAAAJ,EAAAA,EAAA,OAAA,CAAA,EAAA,SAAA,GAAA,KAAA,GAKrBI,CAEA1T,CACA,MAAO0T,GAAAA,GAAAA,GAAAA,CACT,OAAAd,EACA,CAAMgB,EAA+C,SAC3ChB,GAAAA,CACT,QAAAxM,EAED,aAAAyN,EAAqB,IAAA,CACnBzN,EACAyN,WAAAA,EAAsB,SAAAlT,EACtBmT,cAAAA,CAAAA,EACAnT,CACAkL,KAAAA,CACC,MAAAnL,CACK,EAAAuB,EAAA,CAAEvB,SAAAA,CAAAA,GACNC,CACD,MAAAoT,EACK,SAAAC,CAAA,EAASD,EAAAA,EAAwBC,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,SAAAA,EAAwBC,EAAA,OAAA7N,GAAA,SACzD,CAACsI,EAAAA,CAAmB,EAAAlO,IAAsB,KAAA4F,CAAA,EAC1C6N,EAA8BC,GAAA,IAAAvT,IAAAqT,EAAA,CAAArT,EAAAqT,CAAA,CAAA,EACpCtU,EAAayU,IAAAA,CAEPC,GAAAA,CAAAA,EAAAA,CAKN1U,EAAgB0G,CAAA,EACd,MACE+N,CACAxF,EAAA,SAAA,GACF,SAAA,CACAA,GAAAA,CACa,MAAA0F,EAAA,MAAAR,IACPhT,EAAA,SAAA,GAAAwT,EAAA,EAAA,IAAA1T,CAAA,EAAA,EAAA0T,EACIxR,EAAAA,CAAAA,EACNhC,WAAmBgC,CACnBsR,MAAY,CACZxF,EAAAA,IAAoB,IACV,OAAA,CACV3O,CACAmU,IACAxF,EAAAA,CAAAA,EAAAA,EAAkBkF,CAAA,CAAA,EACpB,KAAA,CACF,KAAAS,EACC,OAAAC,EAEG,aAAA7N,EACJ4N,IAAAA,EACAC,UAAAA,EACA7N,YAAAA,EACA8N,OAAAA,EACAC,OAAAA,EACAC,eAAAA,EACAC,eAAAA,EACAC,MAAAA,EAGAC,GAAAA,EAAAA,aAAAA,EAAAA,OAAAA,EAGAxT,KAAAA,EACAyT,cAAAA,EACAC,IAAAA,EACAC,SAAAA,EACAC,SAAAA,GACAxO,MAAAA,GACAyO,MAAAA,CAAAA,EACAC,GAAAA,CAAAA,EACAC,IAAAA,GAAAA,GACAC,CACF,OAAAC,GACA,aAAAC,CACA,EAAI1S,GAAA,CAAA,GAAEyS,CAAAA,IAAAA,gBAAAA,KAAAA,EAAAA,IAAQC,GAAAA,CAAAA,gBAAAA,KAAAA,CAAAA,IAAiB1S,GAAS0R,EACpCiB,GAA2B1O,GACfJ,GAAiBI,CAAAA,qBAAcJ,CAAA,IAClC6N,EAAAA,IAIT,MAAAkB,EAAAvB,GAAA,IAAA7S,IAAAgE,GAAA,QAAA,IAAA,gBAAA,EAAA,CAAAhE,CAAA,CAAA,EACF3B,EAAA,IAAA,CACF,MAAAgW,EAAA,CAAA,EAAA7S,GAAA,MAAAA,EAAA,KAAAA,GAAA,MAAAA,EAAA,YAAAA,GAAA,MAAAA,EAAA,QAAAA,GAAA,MAAAA,EAAA,UAAAA,GAAA,MAAAA,EAAA,gBAAAA,GAAA,MAAAA,EAAA,eAAAA,GAAA,MAAAA,EAAA,MAEM4S,GAAAA,GACJ9U,GAAA+U,EAA2BhQ,CAI7BhG,MAAU0F,GAAMC,GAAA,MAAA,QAAA,UAAA,EACd,IAAMqQ,GAAoB,GAStBD,GAAAA,YAAyC,CACrCrQ,GAAWC,KAAAA,KAAYE,EAAAA,IAAkBoQ,GAAA,cAAAhV,IAC3CiV,GAAU,KAAA/S,EACLgT,GAAAA,GAELzP,CAAAA,EACUwP,IACZvQ,GAAA,MAAA,QAAA,WAAAD,EAAA,CAEF,CACU7C,EAAAA,CAAAA,EAAAA,EAAI5B,IACN2E,MAAAA,EAAc4O,GAAA,IACtBzN,EAEQ5D,SAAe,EAAA,SADzB,KAIA,CAAA4D,CAAKA,CAAAA,EAAY,CAAAqP,GAAAC,EAAA,EAAAvV,EAAA,CAAA,CAAA,EACjBwV,GAAuBvP,IAChBwP,GAAAA,EAAAA,CAAAA,CAAAA,EACT,eAAQC,GAAAC,EAAA,EAEFA,GAAqBJ,CAAAA,GAAAA,WAE3BC,WAAiCtV,EAAA,GAAA,SAAA,QAAAW,CAAA,EAAA,UAAA,KAAA,CAC3B+U,MAAAA,EACN,CAAA,GAEsBzW,MAAAA,GAAAA,MAAAA,GAAmByF,QAASwB,OAGhD,GAFIzF,GAEJ,CAAAiT,EACA,OAAgBiC,GACZZ,KAAAA,CAAeY,MAAAA,EACnB,EAAIA,GAA6BA,IAAAA,GAAAA,CAAAA,EAE3B,GAAAF,EAAA,CAAE7U,MAAAA,GAAAA,MAAAA,EAAAA,GAAAA,SAAAA,kBAAAA,MAAAA,CAAU+U,GAAAA,CAAAA,CAAAA,CAClB,CAAA,EAGAD,GAAe,QAAAE,GAAA,CAAA,EAAA,SACbC,UAAgC7V,QAAS0E,GAAAA,cACvC,CAAAgR,GAAA,QAAA,KAAAI,IAAAA,GAAA,KAAAb,GAAA,EAAA,CAAA,CAAA,CAAA,MACSrU,IAAA,MAAAA,GAAA,SACTiV,GACFjV,GAAA,OAAAqU,IAAA,CAAAS,GAAA,QAAA,KAAAI,IAAAA,GAAA,KAAAb,GAAA,EAAA,CAAA,GAEAY,MAAAA,CASF,GAAAF,GACEE,MAAAA,EAKA,CAGK,CAAA,MACFF,EAAAA,IAAAA,eACIE,EAAAA,EAAAA,CACT,OAAAJ,GAAA,CAAAM,EAAA,WACFA,EAAA,QAAA/V,EAAA,GAAA,SAAA,QAAAW,CAAA,EAAA,UAAA,KAAA,CAEMoV,QACN,CAAA,GAEsB9W,MAAAA,EAAmByF,QAASwB,MACrC+L,CAEX,MAAA+D,EAAA5C,EAAA,MAAAhM,EACA6O,GAAgBhW,EAAwBhB,IAAAA,CAAAA,MAAAA,CAAa,GAAA,MAAA0B,CAAA,GAC9CgV,CAAAA,GAAAA,CAAAA,EAAAA,EAAAA,CAAAA,CAAAA,EACT,CAAAO,EAAAC,CAAA,EAAArW,EAAA,EAEMkW,CAAAA,IAAiC5O,EAAAA,EAAAA,SAAAA,EACjC6O,iBAA6BhW,OAE7BmW,GAAoBC,MAAAA,GAAwBvW,CAClD,GAAM,CACN,MAAOwW,GAAAA,MAAqBC,GAA0BzW,EAAkBuT,CAAA,EAClEmD,EAAmBC,GAAe5D,CAAAA,EAAAA,SAAAA,MAAAA,EAAAA,EAAAA,CAAAA,CAExC,MAAMuD,CAAAA,CACJ,EACEM,GAAkB,SAChBtE,CAGMvQ,GAAAA,EAIV,CAAA0U,GAAY,SAAA,EACVjX,GAAAA,CACF,MAAA0T,EAAA,MAAAE,GAAAvS,EAAAX,CAAA,EACFmW,EAAAnD,CAAA,EAEAuD,GAA2B,SAAY,CACrC,MAAK5V,CAAI4V,GAAA,OAAA,CACTA,EACA,EACEI,GAAyChW,GAAAA,CAAAA,CACzCwV,aAAAA,EACAI,UAAAA,EAAgC,KAEhCjX,EAAe,YACfiX,GAA8BnE,EAAA,EAChC,CAAAgB,GAAAmB,EAAA,GACFmC,KAGmBtE,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,CAAAA,EAAU,OAAM/N,EAAA,MAAA,CAC3B,cACF+R,MAAAA,sBAAiCpI,IAAA,UAAA,WAAA,EAAA,GAC7B,MAACoF,CAEgB,mBAAAgC,GAAA,CAAA,EACrB,mBAAAA,GAAA,CAAA,EACF,mBAAAA,GAAA,CAAA,EAEDhC,sBACH,CAAA,CAEA,EAEI5N,SAAS,CAAAwI,IAAA,SAAA3J,EAAA,MAAA,CACD,MAAA,WACD,SAAA,CAAAnB,EAAA,IAAA,CACL,SAAA,yBAAwC,CACxC,EAAAA,EAAA,IAAA,CACA,SAAAmB,EAAA,KACA,KAAAkP,MACF,OAAA,SAECvF,IAAAA,sBACY,SAAA,CAAA,sBAAA9K,EAAAI,EAAA,CAAUD,KACnBH,UAAA,CAAG,CAAA,CAAA,CACHA,CAAA,CAAAG,CAAAA,CAEI8D,CAAAA,EAAAA,cAA2BpB,EAAAA,EAAAA,CAAAA,SACpB,CAAA7C,EAAA,SAAA,CAAA,SACHA,EAAA0T,GAAA,CAAqBvT,WAENH,OAAK,SAAM,EAAA,CAAA,CAAa,CAAA,EAC1CmB,EAAA,OAAA,CACD,SAAA,CAAAA,EAAA,MAAA,CAGK,MAAA,OACXhB,SACEH,CAAAA,EAAA,IAAA,CAAAG,4BACe,CAAY,EAAAH,EAAA,IAAA,CAAe,SAAA,wCAAA,CAAE,CAAA,CAAA,CAE5CmB,EAAAA,EAAA,MAAA,CAAAhB,MAAAA,uBACOY,SAAM,CAAAI,EAAA,MAAA,CAAMhB,MAAAA,mBACfA,SAAG,CAAAgB,EAAA,MAAA,CACHnB,MAAA,gBAAG,SAAA,CAAAA,EAAA,IAAA,CAA0C,MAAA,qBAE/CmB,SAAA,KAAA,CAAW,EAAAnB,EAAA,IAAA,CAAsBG,SAC/BgB,QAAA,CAAW,CAAA,CAAA,CAAkBhB,EAAAA,QAC3B,CAAKY,MAAM,gBAAeZ,UACxBH,EAAA,IAAA,CAAGe,MAAM,qBAAoBZ,SAAC,MAAA,CAAM,EACpCH,EAAA,IAAA,CAAAG,SAAG,aAAA,CAAS,CAAC,CAAA,CACV,CACLgB,CAAA,CAAA,EAAKJ,EAAM,MAAA,CAAeZ,MAAAA,QACxB,SAAS,CAAAgB,EAAA,MAAA,CAAA,SAAqB,CAAAnB,EAAA,OAAA,CAC9BA,SAAA,IAAA,CAAA,EAAG,YAAA,CAAA,CAAA,EAAemB,EAAA,MAAA,CACd,SAAA,CAAAnB,EAAA,OAAA,CAERmB,SAAA,IAAW,CAAA,EAAA,YAAA,CAAA,CAAOhB,EAAAA,QAChB,CAAAA,UACEH,EAAA,OAAA,CAAAG,SAAM,IAAQ,CAAA,EAChB,QAAA,CAAA,CAAK,CACLgB,CAAA,CAAAhB,CAAAA,CACE,CAAA,EAAAgB,EAAM,MAAA,CAAE,gBACV,SACAA,CAAAA,EAAA,OAAA,CAAA,CAAA,EAAAnB,EAAA,OAAA,CAAAG,MAAAA,UACE,SAAMH,EAAA,SAAA,CAAE,KACV,SAAM,MAAA,OACF,MAAA,QAERmB,SAAA,GAAW,SAAAnB,EAAAI,EAAA,CAASD,KACX,OACK,KAAA,IAASA,IAAAA,MACnB,CAAa,CAAA,CAAA,CAAe,CAAA,CAAA,CAAa,CAAA,CAAA,CAAgB,CAAAA,CAAAA,CAClD,CAAA,EAAAlB,GAAMkC,EAAAC,EAAA,CAAA,SAAOd,CAAK,CAAA,CAAAkR,IAAArQ,EAAA,MAAA,CAAA,MAAA,gBAAQ,SAAQ,CAAAA,EAAA,IAAA,CAAA,SACjC,CAAAnB,EAAA,IAAA,CACH,SAAA8Q,CACH,CAAA,EAAA,+CAAA,CAAA,CACD,EAAA9Q,EAAA0T,GAAA,CAIPvS,QAAAA,cAEe,QAAAzB,GAAA,CAAeS,EAAAA,gBACxB,EAAAA,EAAAA,YACEqR,EAAA,CAAIV,CAAW,CAAA,CAEjB,CAAA,EACA9Q,CAAAA,CAAAA,IAAa,CAAA,gBAAA,KAAA0R,EAAA,GAAA1R,EAAA,MAAA,CAAA,IACFwR,GACTzU,IAAAA,GAAAA,uBACgB6U,GAAA,mBAAA,EAAA,GACdlS,QAAkBA,GAAA,CAClBzC,EAAAA,OAAqBuU,YACvB9R,EAAA,OAAA,MAAAiS,EACAjS,EAAA,OAAA,IAAAiS,GAKGD,EAAAA,OAAAA,gBAAAA,aAAAA,EACDhS,EAAA,OAAA,IAAAgS,IAIYhS,EAAA,OAAA,MAAAiS,EACVjS,EAAAA,WAAsBiS,EAEtBjS,EAAAA,eAEEyJ,EACFzJ,wBACF,OAAAA,GAAA,CACFA,EAAWA,OAAAA,UAAS0K,IAAAA,QAAsB,EACxC1K,GAAEyJ,CACG,MAAAwK,GAAA,SAAA,cAAA,QAAA,KACWA,GAAA,WAAA,KAAA,CAClB,mBAAA,EAAA,CACF,EACYA,GAAA,MAAAjU,EAAA,OAAA,SACG,OAAAA,EAAA,OAAA,OACXyJ,GAAAA,UAAiByK,EAAAA,OAAY,EAAA,CAAA,EAC3B,MAAAC,GAAA,GAiDEC,GA/CW5X,CAAS6X,GAAAA,aAAAA,EAAAA,EAAsBF,GAAAA,EAAA,EAAA,KAAAG,GAAA,aAAAtU,EAAA,OAAA,MAAAmU,GAAA,EAAAA,GAAAA,EAAA,EAAA,KAAAG,GAAA,aAAA,EAAAtU,EAAA,OAAA,OAAAmU,GAAAA,GAAAA,EAAA,EAAA,KAAAG,GAAA,aAAAtU,EAAA,OAAA,MAAAmU,GAAAnU,EAAA,OAAA,OAAAmU,GAAAA,GAAAA,EAAA,EAAA,IAAA,EAAA,IAAA/M,IAAA,CACxCkN,IAAAA,GAAAA,EACgBC,GAAA,EACrBC,GAAA,EACM7J,EAAAA,EACA8J,QAAAA,GAAAA,EAAWhL,GAAOgL,GAAAA,OAAAA,IAAAA,EACrBC,IAAU1U,GAAAA,EAAAA,EAaduU,IAAuBnN,GAAArE,GAAA,CAAA,EACjB4R,IAAAA,GAAAA,GACAC,CAAAA,EAqBJC,GAAQzN,GAAArE,GAAA,CAAA,EAER,MAAQ+R,GAAA1N,GAAA,OAAA,EACR,MAAQ,CAAAgN,GAAAU,GAAAP,GAAAO,GAAAN,GAAAM,GAAAD,EAAAC,EAAA,CACR,CAAA,EACa,IAAAC,IAAA,CACN3N,KAAAA,CAAAA,GAAAA,MAASyN,CAAC,EAAAG,GAAAD,EAAA,EACV3N,MAAAA,UAAS,KAACmN,EAAA,KAAAC,EAAA,KAAAK,CAAA,GACfA,CAAKzN,EACPqL,GAAAwC,EAAA,CACMH,MAAAA,CACC,CAIS,CAGlB,CAAMG,EAAAA,EAAAA,SAAAA,CACJ,SAAA3U,EAAUiU,IACV,QAAAhV,EAAmC,SAAAlC,EAErCoV,WAAAA,OACA/V,SAAQuC,EAAM0V,SAAAA,CAAAA,CAAAA,CAAQM,CAAAA,CAAAA,EAAAA,EAAW,MAAA,CAAA,uBAEjC,cAAA,MAAA,CAEJ,EAAAxT,EAAA,OAAA,CAGJnB,SAAA,CAAA,CAAA,CAAAuR,IAAAvR,EAAA,OAAA,CAAAG,MAAAA,MAEIqC,SAASvD,aACTlC,CAAAA,EAAAA,CAAAA,CAAAA,GAAAA,EAAAA,OAAAA,CACA6X,MAAW,MACXC,SAAU3E,CAAAA,EAAAA,EAAAA,WAEX,CAAA,EAAA,YAAA,CAEHlQ,CAAAA,EAAAA,CAAAA,CAAAA,GAAAmB,EAAA,OAAA,CAAW,MAAA,MAA6B,SAAA,CAAAnB,EAAAI,EAAA,CACxCe,KAAA,kBACKoQ,CAAY,CAAA,EAAYE,GAAA,YAAAA,EAAA,IAAAqD,GAAA3T,EAAA,OAAA,CAAKhB,MAAC,MAChC,SAAEyQ,CACDzP,OAAA,CAAA,CAAA4T,GAAA5T,EAAAC,EAAA,CAAY,SAAA,CAAA,IAAApB,EAAA,OAAA,CAAKG,MACfH,qBAAW,SAAA+U,CAAA,EACb,CAAA,CAED,CAAA,CACC,CAAA,GAAY/U,EAAA,MAAA,CAAKG,MAAAA,OACV,IAAM,OAAO,QACpB6U,GAAA,CAEDvD,SAAYqD,CACX,CAAY,EAAK3U,wBAEZ4U,CACD5U,OAAA8U,GAEE7D,EAAA,CAAMrQ,OAAAA,CAAM,CAAA,CAAsBgU,CAAuB,CAAA,EAE5D5T,EAAA,MAAA,CAEJ,MACDnB,uBACEe,SAAM,EAAAiQ,GAAA,YAAAA,EAAA,QAAA,GAAAhR,EAAA,MAAA,CACF,MAAA,4BACwBgR,EAAA,IAAA,CAAA,CAChBZ,KAAAA,EACX,MAAA1S,GACwB,WAAAwX,EAAA,EACvBC,cAA+BpE,MAAAA,iBAAAA,GAAAA,mBAAAA,EAAAA,GAAQ,IAAA,OACzC,SAAA,CAAA5P,EAAA,IAAA,CAEFA,SAAA,CAAAnB,EAAAoV,GAAA,CAAW,KAAA3M,UAEI,CAAA,EAAA,IAAA,CAAA,CAAAyM,IAAAlV,EAAAI,EAAA,CAAkBD,KACnBmB,eAAOmH,KAAAA,GAAAA,CAAM/K,CAAAA,CAAAA,CAAOwX,EAAAA,EAAAA,IAAAA,CAC1B/T,wBAAA,CACU,OAAA8T,GACOvX,GAAA,CAGX,OAAAqT,CAAA,CAAM5Q,CAEVA,CACY,CAAA,CAAA,CAAOsI,EAAMsI,EAAAA,EAAAA,CAAAA,CAAAA,CAAAA,EAAAA,EAAmB,MACvCmE,CACI,MAAM,QAAA,SAAoB,CAAA/T,EAAA2R,EAAA,CAAA,SAChC,EAAA,GAEH9S,GAAA,QAC2B,IAAA,CACvBmV,gBAAgCpE,EAAAA,oBAAAA,CAAQ,QAAA,YAC1C,cAAAuB,GACA,SAAAvV,EAbU0F,yBAef,CAAA,YAAA,CAAA,CAGM,EAAA,CAAA,CAAOtC,EAEdmC,SAAU,CAAA,CAAA,CAAA6M,GAAA,QAAAnP,EAAA,OAAA,CACN+S,MAAAA,uCACW/S,EAAA,OAAA,CAEbzB,MAAAA,6CACEtB,SAA6BkS,GAAA,IAAAkG,GAAArV,EAAA4C,GAAA,CAC3B0S,IAASD,EAAA,aACTE,KAAejD,IACfvV,IAAAA,GAAAA,EAAAA,WAAAA,KAAAA,EAAAA,IAAAA,GACAyY,SAAAA,GAAAA,YAAAA,EAAAA,GAAuC,CACzC,CAAA,CAAA,EACE,CACN,EAAAxV,EAAA,OAAA,SAGQe,SAAM0U,GAAAC,CAAA,CAAA,CAA6BvV,EAAAA,IAAAA,WACvC,CAAA,CAAA,EAAAgB,EAAY2R,EAAA,CAAA,MACT3D,gBACQ,WACSrM,GAAAA,GACT,YACGuS,CAAuC,eAC3BzE,CAAI3T,EAE3B,oBAAA,CACG,QAAA,YAGV+C,cAAA2V,EAAaD,SAAAA,EAAevV,yBACG,CAAA,WAAA,CAAA,CAIjCgB,EAAAA,CAAAA,CACQ,EACNmB,SAAU,CAAAtC,EAAA,OAAA,CACN+S,MAAAA,WACW0C,GAAAG,CAAA,CAEbrX,CAAAA,EAAAA,IAAAA,YAAiByB,EAAA,KAAA,CAAA,CAAA,CAAA,CACf/C,CAAAA,EAAAA,EAAAA,EAA6B,CAAA,MAClB,gBAAA,GAAA8V,GAEThW,SAAAA,CAAAA,EAAAA,OAAAA,CACAyY,MAAAA,EACF,SAAAC,GAAApE,CAAA,CAAA,CAAA,MACE,OAAA,CACN,CAAA,EAAA,CAAA,CAAAR,GAAA1P,EAAA,MAAA,CAAEhB,MAAAA,gBAEF,SAAayV,CAAAA,SAAAA,IAAAA,EAAAA,OAAAA,CAAezV,SACzBsV,WACSI,KAEN,CAER1U,SAAU,EAAA,CACF,CAAA,CACF4R,CAAAA,CAAAA,CAOJ5S,CAAAA,CAEA,CAAA,CAAA,CAA2BA,CAAAA,EAAAA,CAAAA,CAAAA,OACG,CAAC,GAAA4S,GAGjC,MACE,uBACA,SAAW/S,EAAA,MAAA,CAAA,MAAgB,mBAEzB,SAAgB6Q,EAAAA,MAAAA,CAAU1Q,MAAAA,yBACC,SACbmT,GAAAnS,EAAA,MAAA,CACZ,MAAC,gBACI,MAAA,GAAA,KAAA,MAAA6R,EAAA,UAAAA,EAAA,MAAA,GAAA,CAAA,qBAAA,KAAA,MAAAA,EAAA,QAAAA,EAAA,MAAA,GAAA,CAAA,cAAA,KAAA,MAAAA,EAAA,OAAAA,EAAA,MAAA,GAAA,CAAA,WAEV,SAAA,CAAAhT,EAAA,MAAA,CACG,SAAAgT,EAAA,kBAAA,IAAA,QAAAA,EAAA,KAAA,QAAAA,EAAA,MAAA,EAAA,IAAA,EAAA;AAAA,wBAELA,EACS,iBAAA,OAAAA,EAAA,kBAAA,EAAA,IAAA,EAAA,GAAA;AAAA,6BACJD,EAAAA,KAAAA;AAAAA,uBACE,CAGN5S,EAEAH,EAAA,MAAA,CAAW,MAAA,oBAAkBG,OACQA,yBAE/BgB,GAAA6R,EAAA,UAAAA,EAAA,MAAA,GAAA,IACQ,uBAAA,IAAAA,EAAA,UAAAA,EAAA,SAAAA,EAAA,MAAA,GAAA,GACNxP,CAME,CAAUrD,EAAAA,QAEZ,CAAAA,MACG6S,wBAILA,SAAAA,CAAAA,EAAAA,QAGS,MAAA,KACe,SAAA,CAAAhT,EAAA,OAAA,CAGtBA,MAAA,+DAAA,CACQ,EAAA,IAAA,UAAA,CAAA,CACC,EAAA,IAAAmB,EAAA,OAAA,CAAA,MAAA,KAEL,oBAIA,MAAA,6DAKC,CACH,EAAA,IAAA,SAAA,CAAA,CAEFA,EAAAA,IAAAA,EAAA,OAAA,CAAW,MAAA,KAAuBhB,SAChCgB,CAAAA,EAAA,OAAA,CAAY,MAAA,4DAAA,CAAIhB,EAAAA,IAAAA,QACd,CAAA,CAAA,CAAA,CAAY,CAA+D,CAAA,CAE7E,CAAA,EAAMH,EACNmB,MAAAA,CAAA,MAAY,gBAAIhB,SAAAA,yBACd,CAAA,CAAY,CAA6D,CAE3E,CAAA,CACA,CAAA,EAAAH,EAAA,MAAY,CAAIG,MAAAA,uBACd,SAAAH,EAAY,MAAA,CAA4D,MAAA,gCAE1E,OAAO,CAAA,CAAAgT,EAAA,SACHhT,EAAA,MAAA,CAAA,MAGRA,yBAAA,SAAWmB,EAAA,SAAA,CAAehB,KAAC,SAA4B,MAAA,uBAEtD,SAAAiT,IAAA,UACF,QAAA,IAAA,CAGTI,IAAW,EAAsBrT,SAC/B,CAAAH,EAAA,MAAA,CACQ,MAAA,wCAAAoT,IAAA,UAAA,UAAA,EAAA,GACNnX,MAAU+W,CAAa7S,yBAEvB,MAAW,uBAAA,KAAwBA,CACjC,CACO,EAAA,kBAAA,GAAA,CAAA,CAAA,CACC,CAAA,CAC4B,CAAA,CAEhCqT,CAAmB,CAAA,CAAA,CACrB,EAAAxT,EAAA,SAAA,CAAEG,SAAAA,EAAAA,GAEF,CAAA,KAAAlB,EAGG,SAAAlC,EACM,cAAAkL,EACqB,qBAAAwL,EACF,CAC1B,CAAA,CAAE,CAAA,CAEe,CAAA,CAAA,CAKb,CAAA,CACL,CACF,MAAAqC,GACD,EAAA,SAER9V,GAAA,CAAAG,KAAAA,EAEIlB,SAAAA,EACAlC,cAAAA,EACAkL,qBAAAA,EAAAA,IAAAA,CACAwL,CAAAA,EAAAA,OACD,GAAC,CACIxU,EAAC,OAGd,KAAA,KACE,CAET,MAAAkR,EAEA,SAAiCC,EAEjC,cAAwB2F,CACtB9W,EAAAA,EAAAA,EACAlC,EAAAA,IAAAA,EACAkL,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,SAAAA,MAC6B,EAAArL,EAAA,IAAA,EAAC,CAC7B,GAAAa,EACD,KAAAiT,EAAkB,IAAA7N,EACZ,SAAAyO,EACJxU,OAAAA,EACAC,aAAAA,EACAkL,KAAAA,WAEF,MAAAuJ,CAEA,EAAAvS,EACMuQ,EAACwG,EAA6BvY,CAAA,EAE9B,CAAEA,UAAAA,EAAIiT,eAAAA,EAAM7N,UAAAA,EAAKyO,WAAAA,EAAUH,SAAAA,EAAQD,UAAAA,EAAcE,OAAAA,EAAMJ,oBAAAA,EAAQQ,UAAAA,EACnEvS,eAAAA,EACIuQ,SAAAA,GAEA,KAAAyG,EAAA,EACJC,GAAAA,CAAAA,EACAC,CAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EACAC,CAAAA,GAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EACAC,EAAAA,IAAAA,CACAC,GAAAA,EAAAA,CACAC,MAAAA,EAAAA,GAAAA,QAAAA,IAAAA,gBAAAA,EACAC,IAAAA,GACAC,SAAAA,CACAC,GAAAA,GAAAA,EACAC,EAAAA,UACAC,CAAAA,GAAAA,EAAAA,CACMX,MAAAA,GAAAA,EAAAA,KAAAA,SAAAA,GAAAA,MAGDY,MAAAA,EAA2B,MAAA1G,KAAiB,OAAA,MAAA,CAC5C0B,EAAQiF,KAA2B,KAAA,GAAA7X,EAAA,QAAA,IAAAlC,CAAA,GAE1B,KAAA,WACJ,MAAA,EACe0E,QAAAA,EACvB,CAAIyN,EACSuD,EAAA,SAAA,aACwB,SAAA,CAAA,EAAA,GACrBhV,GAAAA,EAAAA,SAAAA,CAAAA,CAAAA,EAGZ,MAAwBwB,CAAAA,CACpB,CACF,GAAA,CAAAiQ,EACE6H,OAA8D,GAAAnV,IACxDsN,EAAA,CAAA4H,EACC,EAAA,EAAA,MACE,CAGPrE,GADI9T,EAAAA,UACJ8T,EACUA,OACGA,EAAAA,SAAiB,EAClC,MAAAuE,GAAA7G,EAAA,GAAA,SAAA,cAAA,MAAA,CACF,KAAY,CACV/T,CAAAA,EACF,GAAA,CACF,MAAA6a,GAAA,MAAAD,GAEgB,GAAhBE,EAAKhI,SAAAA,EAAW+H,GAAA,OAAA,CAEZrV,QAA8BqV,GAAA,CAAA,EAEhCH,EAAcK,CAAA,EACd1D,EAAA,CACF,aAAA0D,EAEA3H,UAAAA,CAEA,CAAIgC,CAAO,CAEX0F,MAAAA,CAEAA,EAA2B/G,OAAAA,CAEvB1S,CAAc,IAId,CACF,EAAA,CAAAwB,EAAAgJ,IACQtJ,EAAAA,IAAAA,CACRuY,GAAAA,IAEAE,KAEEC,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EACqB,MAAAC,EAAAC,IAAA,UAAA,CAAAC,EAAExB,EAAAA,EAAAA,EAAAA,EAAAA,EAAc9G,CAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,CAAAA,GAAWuI,EAAA,EAAA7a,EAAA,EAAA,EAClD,OAAAuE,EAAAC,EAAA,CAAA,YACU,MAAA,CACVhF,MAAAA,UACA8a,SAAAA,CAAAA,EAAAA,OAAAA,CACF,SAAA,CAAAb,EAAArW,EAAA,OAAA,CACC,MAAA,MACL,SAAA,eACQiI,CAAAA,EAAAA,EAAc9G,EAAA,QAAA,CAExBrF,MAAgB,yBACM,CAAA,aAAA,IAAAkE,EAAA,OAAA,CAClBoX,MAAAA,KACF,SAAAvB,GAAA3E,EAAA,CACQW,SAAO,EAEjB,EAEA,CAAO2F,CAAAA,CACP,CAAOE,EAAAA,EAAAA,OAAAA,CAAAA,CAAAA,EAAyClB,GAAAxW,EAAA,OAAIpD,CAC7C+a,MAAAA,sBAGL,OAAA,CAAAxX,EAAAA,GACEH,EAAA,OAAA,CAAW,MAAA,aAASG,SAClBgB,SAAA,CAAA,CAAA,CAEI,CAAA,EAAMJ,IAAMI,EAAA,OAAA,CAAA,MAAM,UAAa,SAC3B+P,CAAAA,CAAAA,CAAAA,IACJlR,EAAA,SAAA,CAAOe,KAAM,SAAeZ,MAAC,mBAE3B,MAAY,eAAIA,QAAAA,KACcsX,GAChB,EAAA,CAAA,EACV,IACG,gBAGTzX,EAAA,OAESA,CAAY,SAAAiW,EAAA,CAAa,CAAA,CAAW,EAC9CK,EAAYtW,GAAAA,CAAMe,OAAM,CAAa,OAAA,SAAA,IAAc,EAC9C,eACR,CAAY,MAAA,CAGD,OAAA,IACC,CACA,EACNb,eACEuX,SAAAA,SACF,SAAA,OACAG,WAAI5X,EAAA,SAAA,CAAMG,KAAAA,SAEVA,MAAO8V,OAAkB,MAAA,QAG7B9U,SAAMmW,EACI,SAAAtX,EAAAI,EAAA,MACElE,OACV,KAAA,IACgB,IAAA,MAAA,CACP,CAAA,CAAA,EAAA,SAEG,CAAA6Z,GAAA,CAAAlE,IAAA1Q,EAAAC,EAAA,CACV,SAAA,CAAAD,EAAAsC,GAAA,CACF,QAAA,IAAA,CACMxG,EAAA,YAAA,CACG,YAAA,CACA,OAAA,KAAA4Z,GAAA,YAAAA,EAAA,OAAAnG,CAAA,GACTnN,CACE,CAEQ,EACA,SAAA,CAAAvD,EAAAI,EAAA,CACIkX,KAAAA,IAAAA,CAAQnX,EAAAA,SAEb,CAAM,SAAA,CAAA,YAAAmR,CAAA,CAAA,CAAY,CAAA,CAAA,CAAA,EAAQnQ,EAAAsC,GAAA,CAAQ,QAAA,IAAA,CACjCoU,GAAA,EAAA,GAIR1X,SACEgB,CAAAA,EAASf,EAAA,iBAELnD,CAAAA,EAAAA,EAAO4C,OAAc,CAAA,SACN,eAAA,CAAA,CAAA,CAC2B,CACxC,EAAAsB,EAAAsC,GAAA,CACF,QAAA,IAAA,CACFgU,GAAA,EAAA,CAAEtX,EAEG,SAAM,CAAAH,EAAAI,EAAA,CACXe,KAAAA,QAAA,CAAAhB,EAAAA,EAAAA,OAAM,CAA0B,SAAA8V,GAAA,oBAAA,kBAAA,CAElC9U,CAAAA,CAAS,CAAA,KACQA,EAAAsC,GAAA,CACboU,QAAAA,IAAAA,CACFC,GAAA,EAAA,CAAE3X,EAEG,SAAM,CAAAH,EAAAI,EAAA,CACXJ,KAAAA,MAAA,CAAA,EAAMA,EAAA,OAAA,CAAoB,SAAA,uBAAA,CAE5BmB,CAAAA,CAAS,CAAA,OACQ,CAAA,CAAA,CAAA,CACbsW,CAAAA,EAAAA,EAAAA,GAAAA,CACF,KAAA5U,EAAE1C,OAAAA,SAEG,SAAM,CAAAH,EAAAI,EAAA,CAAQ,KACnBJ,UAAA,CAAAG,EAAAA,EAAAA,SACyD,MAClD,oBACC,SAGRgB,GAAS0B,CAAA,CAAA,CAAA,CACP3C,CACE4X,CAAAA,EAAAA,EAAAA,MAAAA,CACF,MAAA,kBAAE3X,SAAAA,CAAAA,EAEFH,GAAK,CAAA,QAAM,IAAA,CACXA,GAAAA,CAAM,UAAA,UAAA,UAAA6C,CAAA,EAA4B8H,GAAA,aAAA,CAGtC3K,OAGJmB,GAAS,qBAAA,CAAO0B,CAAY,EAAQ1C,SAClCH,CAAAA,EAAKI,EAAA,CAAM,KAAA,MAAA,CACXJ,EAAAA,EAAA,OAAA,CAAa,SAAA,MAAA,CAAmBG,CAAAA,CAA6B,CAAA,GAAC,iCAAA,UAAAtB,EAAA,iCAAA,WAAA,YAAAA,EAAA,eAAA,CAEhEsC,IAAAA,CAAA,KAAWA,EAAAsC,GAAA,CAAiBtD,QAC1BgB,IAACsC,KAGO,UAAA,MAAA,CACQsU,IAAAA,CACVpN,CAAAA,OACU,CACVvO,MAAAA,+BAAe,CACfuO,CACF,EACF,SAAA,CAAA3K,EAAAI,EAAA,CAAED,KAAAA,OAEG,CAAA,EAAMH,EAAA,OAAA,CACXA,SAAA,QAAA,CAAA,CAAAG,CAAM,CAAA,CAAI,CAAO,CAAA,EACT,CAAA,CACT4E,GAAWiT,IACY,CACpBnV,SAAAA,CAAAA,EAAAA,GAAAA,CAAAA,CAAAA,EAAAA,EAAAA,EAAAA,GAAAA,CAEA1B,QAAAA,IAAS,GACQ,SAAA,GACT,SAAA,CACF4D,GAAAA,CACElC,MAAAA,EAAAA,MAAAA,EAAAA,GAAAA,SAAAA,SAAAA,GAAAA,YAAAA,EAAAA,KAAAA,CAAAA,EAAAA,OAAAA,EACDwU,EAAAY,CAAA,IACS,SAAA,EACV7b,eAAekV,CAAA,EAAA,EACflI,EAAqC,sBAAA,GAAA,OACvCnM,EAAA,sBAAA,SACF,MAAA,CAAEkD,EAEG,OAAA,CAAM,CAAA,IACX,EAAY,SAAO,CAAAH,EAAAI,EAAA,CAEtB,KAAA,QAAA,CAEH,EAAC4V,EAAAA,OACD7U,CAAAhB,SACGuD,CAAAA,WAAAA,CAECvC,CAAS,GAEL+V,CAAAA,EAAAA,EAAAA,GAAAA,CACA,YAAa,YACP,UAAA,SACIe,SAAAA,OAGEtZ,MAAAA,GACR0Y,MAAAA,EAAAA,EAA+B,CAC/BH,SAAAA,CAAAA,EAAAA,EAAAA,CACW,KAAA,MACXja,CAAAA,EAAAA,EAAAA,QACAA,MAAAA,YACF,SAAY,CAAA,SAAAqU,EAAA,GAAA,CACVlV,CAAAA,EAAAA,EAAAA,OAAcsD,CACdwX,MAAAA,CACF,aAAA,MACC,EACL,SAAA,CAAAlX,EAAAI,EAAA,CAAED,KAEFH,MAAK,CAAM,EAAAA,EAAAI,EAAA,CACXe,KAAA,eAAA,CAAAhB,CAAAA,CAAuB,CAAQ,CAAA,CAAA,CAGjCH,EACEkY,SAAYlY,EAAA,MAAA,CACF,MAAA,YACD,SAAA6O,GAAA,IAAAsJ,GAAAnY,EAAAyD,GAAA,CACF,QAAA,IAAA,CACPmJ,EACE,SAAA,GAAAzM,SACO,CAAM,GAAA,CACXgB,MAAA8W,EAAA,MAAA9H,EAAA,GAAA,SAAA,SAAA0G,GAAA,YAAAA,EAAA,KAAApZ,CAAA,EAAA,KAAA,CAAY,SAAA0a,CAAA,CAAY,EACxBhX,EAAA8W,CAAA,EACSf,EAAA,SAAA,EACSvM,GAAA,UAAA2G,CAAA,QAAAxC,GAAAqJ,CAAA,CAAA,EAAA,EAChBlb,EAAA,sBAAA,GAAA,OAAEkD,EAEFH,sBAAK,SAAM,MAAA,CACXA,EAAK,OAAA,EAAM2K,GAAA,mBAAA2G,CAAA,EAAA,CAAkB,CAAA,IAE/B,EACHnR,YAEDgY,CAAA,CAAA,CAAW,CAAA,CAAA,CAAA,CAEE,CAAA,EAAAnY,KACQ,CACbkX,QAAAA,GACA,QAAa,CAAAZ,EACP,aAAAnV,EAAAC,EAAA,CACI6W,SAAAA,CAAAA,EAAAA,EAAAA,CAIAE,KAAAA,OAAAA,CAAAA,EAAAA,EACD,OAAA,CACGxZ,SAAAA,CAAAA,YAA6B,GAAA,CACrC0Y,CAAAA,CAAAA,CACAH,CAAAA,EACAvM,kBAAAA,SAGA1N,QAAAA,IAAAA,CACAA,EAA6Bmb,SAAAA,GAAAA,UAE7Bhc,GAAAA,CACA8a,GAAAA,EAAAA,CACW,MAAAe,EAAA,MAAA9H,EAA4B,GAAA,SAAA,SAAA0G,GAAA,YAAAA,EAAA,KAAApZ,CAAA,EAAA,QAAA,EACzC4Z,EAAAY,CAAA,EACCf,EAAA,SAAA,EACLvM,GAAA,cAAA2G,CAAA,EAAA,CAAA,KAAEnR,CAIL,MAAA8X,EAAA,MAAA9H,EAAA,GAAA,SAAA,SAAA0G,GAAA,YAAAA,EAAA,KAAApZ,CAAA,EAAA,MAAA,EACE4Z,EAAAY,CAAA,EAGGf,EAAA,SAAA,EACHvM,GAAA,YAAA2G,CAAA,EAAA,EAEPvN,EAAAA,sBACE,GAAA,QAAA5D,EACEH,sBAAK,SAAM,MAAA,CACXmB,EAAA,OAAA,EAAMmV,EAAyB3L,GAAA,sBAAA2G,CAAA,EAAA,EAGjB3G,GAAA,oBAAA2G,CAAA,EAAA,CAKhB4F,CACA,IACM,EACF,SAAIZ,EAAUnV,EAAAC,EAAA,CACN6W,SAAAA,CAAAA,EAAAA,EAAAA,CAGEtZ,KAAAA,SACR0Y,CAAAA,EAAAA,EAAAA,OAAAA,CACAH,SAAAA,CAAAA,YAAAA,CAAgC,CAChCvM,CAAW,CAAA,CAAuB,CAAA,EAAAxJ,EAC7BC,EAAA,CACC6W,SAAAA,CAAAA,EAAAA,EAAAA,CAGEtZ,KAAAA,OACR0Y,CAAAA,EAAAA,EAAAA,OAAAA,CACAH,SAAAA,CAAAA,UAAAA,EAAgC,GAAA,CAChCvM,CAAW,CAAA,CAAqB,CAClC,CACA1N,CAAAA,CAAAA,CACAA,CAAAA,CAAAA,CAA6Bmb,CAAAA,EAAAA,CAAAA,GACnBb,IAAA,WAAAvX,EAAAqY,GAAA,CACVjc,OAAAA,EACA8a,CAAAA,EAAAA,CAAAA,CAAAA,GAAAA,EAAAA,GAA8B,CAC9B,QAAAhB,GAAcQ,EACD,aAAA1W,EAAA,OAAA,CAA+B,SACrC0W,EAAA,2BAAA,aAAAzX,EAAA,MAAAA,EAAA,QAAA,GACL0L,CAAW,EACb,kBAAA,SACF,MAAA,MAAA,SACC2M,EACL,QAAA,IAAA,CAAEnX,EAGAgB,SAAA,GAAAhB,SAAAA,CACO,GAACE,CAAc,IACpBc,EAAAhB,GAAMuW,EAA0BuB,EAAA,MAAA9H,EAAA,GAAA,SAAA,QAAAX,EAAA,OAAA,EAAA,WAGlCrP,EACO,MAAAgQ,EAAA,GAAA,SAAA,QAAAX,EAAA,OAAA,EAAA,SACLrO,GAAAhB,EAAcmR,CAAAA,EAAU4F,EAAO,SAAA,CAC/B,OAAAxX,EAAA,CAEQ,MAAAA,CAAA,EAMjBwX,EAAA,OAAA,EAGM,IAER,EAEGoB,SAAsB5B,EAAAA,SAAAA,CACtB3S,KAAAA,SACE5D,SACGuW,GACGA,EAAA,aAAA,KAEA,kBAAAR,GAAAQ,EAAA,SAAA,GAEU,SAAAY,EACZ,SAAApB,EAAA/U,EAAAC,EAAA,CACIkW,SAAAA,CAAAA,EAAAA,OAAAA,UACK,WACbJ,CAAAA,EAAAA,EAAAA,OAAAA,CACa,SAAA,WACX,CAAI,CAAA,CACF,CAAIe,EAAAA,EAAAA,EAAAA,EAAAA,CAEJ,mBAA4B,CAQR,SAAA,WAEN,CAAA,EAEPjY,EAAA,OAAA,CACa,SAAA,WAER,CACZ,CAAA,CAEA,CAAIiY,EAAAA,EAAAA,EAAAA,EAAAA,CAAiBZ,SAAAA,CAAAA,EAAAA,EAA+B,CACpDH,KAAAA,MAAgC,OACzBxX,EAAG,OAAA,CACV0J,SAAO,QACP8N,CAAAA,CAAAA,CACF,CAAA,EAAA,QAAA,CAAA,CACC,CACL,CAAA,CAAA,CAAE/W,CAAAA,CAEF,CAAA,EAAA,CAAA,CAAAqX,GACOxX,EAAAc,GAAA,CAAA,MACG,QACR,QAAA,IAAA,CAAqD+W,GAC3CP,EAAAA,CAAQnX,EAGhBA,SAAAA,EAAAA,GACE,CAAA,KAAAiR,EAAe,OAAAJ,EACf,QAAM,IAAA6G,GAAA,EAAA,CAAA,CAAA,CAAgB,CAAA,EAAA,CAAA,CAAAH,IAGxBvW,EAAAL,GAAA,CAAAX,MAAAA,QACE,QAAA,IAAM,CAAS2X,GACf,EAAA,CAAA,EAAM,SAAgB9X,EAAAuY,GAAA,CAAA,UAGxBpX,EAAAA,QAAAhB,QAAAA,IAAAA,GACO,EAAA,CAAA,CAAA,CAAM,CAAA,EAAA,CAAA,CAAAwX,IAAU3X,EAAAc,GAAA,CAAA,MAAA,QAAM,QAAY,IAAC,CAAA2W,GAG1C,EAAA,CAAA,EAEI,SAEXzX,EAAAwY,GAAA,CACI,QAAAvZ,EAER,KAAEuY,GAEO,qBAAAL,GAAA,GACSA,CAAA,CACbU,EACF,QAAA,IAAAJ,GAAA,EAAA,CAAA,CAAEtX,CAEiB,CACjBiR,CAAAA,CAAAA,CACAJ,CAAAA,CACyC,SAC1C0D,GAAA,CAAAZ,EAAAG,EAAAC,CAAA,EAAA,CAAA,MAGJuE,EAAEf,MAAAA,QACKzD,EAAA,MAAAC,EAAA,IACJnT,EAAM,OACNJ,GAAe,IACbmX,EAAAA,EACFW,GAAA,GAAEtY,EAAAA,GAIAQ,EAAAA,EAAemX,IAChBY,EAGFf,KAAAA,IAAAA,EAAAA,CAAAA,EAEO,CAAA7D,EAAAG,EAAAC,EAAAwE,CAAA,CAAA,CAEJjB,SAAAA,GAAAA,EAAAA,CACF,GAAA,CAAA5U,EAAE1C,OAEe,MACfqC,EAASvD,IAAAA,IAAAA,CAAAA,EACTmS,CACAqC,KAAAA,EACE4D,SAAAA,CAEF,EAAAsB,EACAhY,EAAAA,EAAe8W,QAAAA,MAAAA,EAAAA,EAAAA,QAA6B,MAAA,EAAA,EAAA,OAC7CtW,EAAAC,EAAA,CAAC,SAEL,CAAAD,EAAA,OAAA,CACD,MAAA,qBAEN,SAAA,CAAAyX,EAAA,GAAA,CAGA,CAAA,EAAA5Y,EAAoB,MAAA,CAAIiU,CAAAA,EAAAA,EAAO,OAAA,CAC7B,SAAkB4E,CAClBzc,CAAQuC,CAAAA,CACR,CAAI+Z,CACJ,CACEA,SAAQI,GAAA,CACV,KAAA1H,EACU,OAAAJ,EACV,QAAArQ,CACE+X,EAAAA,CACF,MAAAK,GAAA/H,GAAA,YAAAA,EAAA,IAAA,CAAA,CACQgI,KAAAA,EACR,MAAAtb,CACF,IAAA,GAAA+K,CAAA;AAAA,EAEAwQ,SAAwBpW,KAAK;AAAA;AAAA,KAAA,GACtBA,EAAAA,GAAAA,CAAAA,GAAAA,EAAAA;AAAAA;AAAAA,EACC8V,CAAAA,GAAS,IACT,OAAAxX,EAAA,MAAA,CAAEyX,MAAAA,QAAM9K,SAAAA,CAAAA,CAAAA,CAAAA,GAAAA,EAAAA,SAAAA,CAAa6K,KAAAA,SACrBE,MAAAA,cACN,QACEzX,EAAAjB,SACEgB,EAAAf,EAAA,CAAY,KAAA,GAAA,CAAoBD,CAAQ,CAAM,EAC9CH,EAAM,SAAA,CACNG,SAAO0Y,EAAAA,KAAAA,CAAY,SAAA,gBAAA,CACnB,CAEN,CAAA,EAAA1X,EAAA,OAAA,CAEA,SAA4B,CAAAnB,EAAA,IAAA,CAAEoR,MAAAA,CAAMJ,WAAAA,UAAQrQ,EAAW,SAAAuY,CACrD,CAAMH,EAAAA,EAAAA,GAEI,CAAGtQ,eAAAA,GAAM/K,KAAAA,CAAAA,CAAM,CAAO,CAAO,GAGvC,CAAA,CAAgD,CAAA,YAAqB,CAErE,UAAA8R,EACE,QAAA7O,CAAW,EAAA,CAEP,KAAa,CAAA,MAAA7D,CAAe,EAAcoD,EAASS,EAAQR,CAAAA,GACpD,EAAAvD,EAAA,SAAA,EAACyD,CAAK8Y,EAAAC,CAAA,EAAAxc,EAAA,CAAA,CAAA,EAAK,CAAAyc,EAAAC,CAAA,EAAA1c,EAAA,CAAA,CAAA,EAGpBoD,CAAAA,EAAAiC,CAAA,EAAAC,GAAAqX,GAAAA,EAAA,EAAA,CAAA,EAAApZ,EAAAA,KACE4K,EAAI,SAAA,GAAA,SAAkB,CAExB5J,GAAAA,CAAAhB,MAAAA,EACE,MAAArD,EAAA,GAAA,MAAA,KAAA,EACE0c,EAAO,KAAA,CAAAjF,EAAAL,IAAAK,EAAA,MAAA,cAAAL,EAAA,KAAA,CAAA,EAAA,MACOuF,EAAA,MAAA3c,EAAA,GAAA,SAAA,QAAA0S,CAAA,EAAA,MAAA,OACd4J,EAAAM,CAAA,EAAEvZ,EAED+Y,CAAAA,EAEHlZ,EAAiB,SAAA,CAAA,MAAe,CAACkZ,EAAAA,OAAAA,CAAa,CAAC,IAC1C,EACJ,CAAAS,CAAA,CAAA,EAET,KAAA,CAAAC,EAAAC,CAAA,EAAAjd,EAAA,EAAA,EAEA,OAAS2b,EAAoB,MAAA,CAAE/I,MAAAA,QAAW7O,GAAAA,4BAAW,SAAA,CAAA,CAAA,CAAAA,GAAAX,EAAA,SAAA,CAC7C,KAAA,SAAElD,MAAAA,cAAUuB,QAAIsC,EACtB,SAAOmK,EAAmB1K,EAAA,CACpB,KAAQgZ,GACd,CAAA,CACA,CAAM,EAAApZ,WAAoB,CAE1BlE,SAAgBkE,EAAA,KAAA,CACd+K,SAAoB,uBACpB,CAAa,CACX,CAAI,EAAA5J,EAAA,OAAA,CACF,SAAc,CAAAgY,EAAA,OAAY/b,EAAAA,OAAc,CACxC+b,MAAMW,kBACAT,SAAAA,EAAAA,IAAAA,GAAAA,CAGNjd,MAAQuC,EAAI0a,EAAA,KAAAU,GAAAA,EAAA,KAAAzc,EAAA,EAAA,EAAE6b,OAAAA,EAAAA,KAAAA,CAAOE,SAAAA,EAAAA,SAAAA,CAAwB,KAAA,SAC7CD,MAAc,SAAAY,EAAA,UAAA,EAAA,GACdV,SAAAA,IAAgD,UAChDvO,QAAoB,IAAA,CACVA,EAAA,SAAA,YACK,CACfA,GAAkB,CACpBiP,EACC,MAAAld,EAAA,GAAA,MAAA,QAAAQ,EAAA,EAAA,EAAA,SAAA,OAAA,CACW,WAAA,CAAAkS,CAAA,CAEhB,CAAOoK,EAGM,MAAA9c,EAAA,GAAA,MAAA,QAAAQ,EAAA,EAAA,EAAA,SAAA,OAAA,CAAW,WAAA,CAAAkS,CAAA,CAAA,CACjB7O,EAC2BsB,GAAuBtB,MAAAA,GAC5C,OAAA,EAAM,MAAAqZ,EAAA,8BAAA,wBAAA,CAAK,CAAA,IAGpB7Z,EACM,SAAA,CAAAH,EAAAI,EAAA,CAAyB,KAAA,cAAA,CAE/B,EAAAJ,EAAA,OAAA,UACkB1C,EAAA,KACd,CAAU,CAAA,CAAA,CAAiB6C,CAEvB,CAAA,CAGA,CAAA,CACEA,CAAAA,EAAAA,cACEH,EAAA,IAAA,CAAA,MACO,WAAA,SACGA,EAAAqY,GAAiB,CAAe,SAClB,CAAA,CAEpBtN,CAAAA,EAAAA,IAAAA,QAAoB/K,EAAA,IAAA,CACpB,MAAA,WACM,SAAA,uBACF,CAAA,EAAAA,EAAA,IAAA,CACQlD,MAAAA,WAGFmd,SAAAA,WAAsB,CAAA,EAAA9Y,EAAA,SACvB,CAAA,KAAA,SAEGrE,MAAAA,SAGFmd,QAAAA,IAAAA,EAAsB,EAAA,EAAA,SAAAnP,IACvB,UACL,SAAA,CAAA9K,EAAAI,EAAA,CAEO,KAAA,OAAA,KAAA,GAEPhE,CAAAA,EAAAA,IAAAA,EAAAA,QACA2O,SAAAA,UACA3B,CACE4Q,CAAAA,CAGF,CACF,CAAA,CAAA,CAAA,EAAAJ,GACC5Z,EAAAc,GAAA,CACL,MAAA,QAAEX,QAAAA,GAAAA,CAEGT,EAAA,SAAMA,EAAA,eAAcma,EACzB,EAAA,CAAYrW,EAAa,SACnBxD,EAAA+N,GAAA,CAAA,KACN6L,GAAA,YAAAA,EAAA,KAER,QAACM,GAAA,CAEWA,EAAA,QAAA,WACLjY,IACCkY,EAAM,EAAA,CAAE,CAAA,CACf,CAEH,CAAA,CAAA,CAAS,CAAA,CAAW,CAEpB,SAAS3B,GAAA,CAAA,QAAAhW,EAAoB,KAE/BrB,EAAA,qBAAAsS,EACO,IAAA,CAAA,EAELvT,QAAAA,EAAAA,IAAe2Z,CAA4B,CACrB,EAAU1Z,CAE3B,KAAA,CAAM,MAAArD,CAAY,EAAAuB,EAAK,EAAE,CAAAyM,EAAMC,CAAA,EAAAnO,EAAA,SAAA,EAAQwd,EAAOve,EAAA,IAAA,EAAAC,OAAAA,EAC5C,IAAA,CAAA,IAEV8d,EACO,OACEQ,EAAA,SAAA,CAAAC,IACNna,aAAgB,IAAA,UACVR,GAAAA,EAAAA,EAAaA,SAAiB,QAA9BA,MAAAA,EAAAA,KAAAA,EACFma,EAAAA,GAAAA,GAEJ,IAAA,CAAE1Z,cAEU,CAAA,CACkB7C,EAAAA,CAAAA,CAAAA,EAEtB4c,EAAAA,OACK,MAAA,QACT,GAAA,yBACAL,SAAAA,CAAAA,CAAAA,CAAAA,GAAAA,EAAAA,SAA6B,CAC/B,KAAA,SAAE,MACH,cAEJ,QAAAlZ,EACE,SAAAX,EAAAI,EAAA,CAET,KAAA,GAEA,CAAA,CAA0B,CACxBoC,EAAAA,EAAAA,SAAAA,CACM6X,SAAAA,EAAAA,IAAAA,mCACuB7X,GAAA,YAAAA,EAAA,YAAAA,GAAA,YAAAA,EAAA,KAAA,CAAA,CAAC,CAAA,KACd,OAAA,CAAC,SAAArB,EAAA,OAAA,CAChB,SAAAzB,GAAA,CACKA,EAAA,eAAA,EAAgB,MAAA0R,EAAdtU,IAAAA,SAAAA,EAAAA,MAAAA,EAAc,IAAA,MAAA,GACfgO,GAAAA,YAAAA,EAAmB,WAAAuP,GAAA,YAAAA,EAAsB,UAC1CD,WAAyB,GAEf,SAAA,CACVrN,GAAAA,CACAqN,MAAuBnC,EAAc,MAAAnb,EAAA,GAAA,SAAA,QAAA0F,GAAA,YAAAA,EAAA,EAAA,EAAA,KAAA,OAAA,SACd4O,CACvBgJ,CAAAA,EACIrP,EAAA,SAAA,EACR0I,EAAAwE,CAAA,EACatX,GACX5B,OAAkBub,EAAA,CACpBvP,EAAA,OAAA,EACG,OAAAuP,GAAA,YAAAA,EAAA,UAAA,gCAAA,CAGH,CAAA,OAEiB,SAAA,CAAAta,EAAA,WAAA,CAAe,IAAAoa,EAAuBzZ,KAAAA,OAAQR,aACpD,UAAM,SAAAka,CAAA,CAAK,EAAAlZ,EAAA,SAAA,CAGpBnB,SAAA,CAAAA,EAAA,SAAA,CAAAG,oBACK,QAA2D,SAAA2K,IAAA,UAEhE9K,QAAA,IAAA,CAAAG,GAAAA,MAAAA,KAGQsO,SAAe,QACjB,CAAA,EAAAtN,EAAiB,OAAA,CACXiQ,SAAAA,CAAOjJ,EAASrG,GAAI,CACtBsP,OAAMmJ,GACRxP,OAAAA,IAAoB,SACpB,CAAC,EAAY/K,EAAA,SAAA,CACP,SAAA8K,IAAA,UACImN,KAAAA,SAES,SACF7G,cAAAA,CAAAA,CAAAA,CAEbhV,CAAQuC,CAAAA,CACRoM,CAAAA,CAAAA,CACA0I,CAAAA,CACA9S,CAAQ,CAAA,CAAA,CAAA,CAERvE,CC1iDlB,SAASoe,GAAa,CAAEhY,QAAAA,EAASzF,SAAU0d,EAAc9Z,QAAAA,CAAQ,EAAG,CAC5D,KAAA,CAAE7D,MAAAA,EAAOC,SAAAA,EAAUkL,cAAAA,GAAkB5J,EAAI,CAAEtB,SAAU0d,CAAAA,CAAc,EACnEpK,EAAW,OAAO7N,GAAY,SAEpC1G,OAAAA,EAAU,IAAM,CACTuU,IACHpT,EAAOuE,SAAU,GAAEgB,EAAQ/E,EAAG,IAAGV,CAAS,EAAC,EAAIyF,EACjD,EACC,CAACA,CAAO,CAAC,EAEZkL,GAAkB/M,CAAO,EAGvBQ,EAAA,MAAA,CACEJ,MAAM,QAQNZ,SAEC,CAAA,CAAC,CAACQ,GACDX,EAAA,SAAA,CAAQC,KAAK,SAASc,MAAM,oBAAoBb,QAASS,EAAQR,SAC/DH,EAACI,EAAI,CAACC,KAAK,GAAA,CAAK,CAAA,CACV,EAEVL,EAAC0a,GAAW,CACV3d,SAAAA,EACAkL,cAAAA,EACAzF,QAAAA,EACAyN,aAAc,SAAY,CACxB,GAAII,EACE,GAAA,CAKKpR,OAJM,MAAMnC,EAAMM,GAAGoE,SAASmZ,OAAO,CAC1CjK,KAAMlO,EACNoY,eAAgB,EAAA,CACjB,OAES,CACV,MAAMV,EAAS,MAAMpd,EAAM+d,GAAGC,OAAO9c,MAAM,CACzC+Y,EAAGvU,EACHvC,KAAM,WACN1C,MAAO,EACPwd,QAAS9S,CAAAA,CACV,EACGiS,GAAAA,EAAO1Y,SAAS5D,OACXsc,OAAAA,EAAO1Y,SAAS,CAAC,EACf,GAAA,sBAAsB0B,KAAKV,CAAO,EAAG,CAE9C,MAAMkO,EADa,IAAIsK,IAAIxY,CAAO,EACVsL,SAASlI,QAAQ,MAAO,EAAE,EAC5CsU,EAAS,MAAMpd,EAAM+d,GAAGC,OAAO9c,MAAM,CACzC+Y,EAAGrG,EACHzQ,KAAM,WACN1C,MAAO,EACPwd,QAAS9S,CAAAA,CACV,EACGiS,GAAAA,EAAO1Y,SAAS5D,OACXsc,OAAAA,EAAO1Y,SAAS,CAAC,CAE5B,CACF,KAEOgB,QAAAA,CAEX,CAAA,CACD,CAAC,CAAA,CACC,CAET,CClEA,SAASyY,GAAO,CAAEta,QAAAA,CAAQ,EAAG,CACrB,KAAA,CAAE7D,MAAAA,GAAUuB,EAAI,EAChB,CAACyM,EAASC,CAAU,EAAInO,EAAS,SAAS,EAC1C,CAACse,EAAQC,CAAS,EAAIve,EAAS,CAAE,CAAA,EACjC,CAAC+c,EAAa1X,CAAM,EAAIC,GAAkBqX,GAAAA,EAAI,EAAG,CAAC,EAExDzd,EAAU,IAAM,CACdiP,EAAW,SAAS,GACnB,SAAY,CACP,GAAA,CACF,MAAM7J,EAAO,MAAMka,GAAGF,OAAOha,KAAK,EAClC,GAAIA,EAAKtD,OAAQ,CACf,MAAMyd,EAAKC,KACLC,EAAUra,EAAKsa,UAAgBlP,EAAImP,WAAWJ,CAAE,CAAC,EACvD,GAAIE,EAAQ3d,OAAQ,CAClB,MAAMsd,EAAS,MAAME,GAAGF,OAAOQ,QAAQH,CAAO,EAC9CL,EAAOpB,KACL,CAACvF,EAAGL,IACF,IAAI5U,KAAK4U,EAAEyH,SAAS,EAAEC,QAAAA,EACtB,IAAItc,KAAKiV,EAAEoH,SAAS,EAAEC,SAC1B,EACAT,EAAUD,CAAM,CAAA,MAEhBC,EAAU,CAAE,CAAA,CACd,MAEAA,EAAU,CAAE,CAAA,EAEdpQ,EAAW,SAAS,OACV,CACV3O,SAAe,CACf2O,CAAkB,IACpB,EACC,CAAA4O,CAAA,CAAA,EACL,MAAIA,GAAYuB,GAAA,YAAAA,EAAA,QAAA,EAEVW,OAAAA,EAAAA,OAEN,cACO9a,SAAM,CAAA,CAAA,CAAAJ,GAAAX,EAAA,SAAA,eAECC,MAAK,cAASc,QAAMJ,EAAcT,SAASS,EAAAA,EAAAA,CAAQR,KAAAA,GACpD,CAAA,CAAM,CAAA,EAAKgB,EAAA,SAAA,CAGpBA,SAAA,CAAAA,EAAA,KAAA,CAAAhB,SACEgB,CAAAA,iBAAAnB,EAAAqY,GAAA,CAAI,OAAA,GACoB8B,OAAMrP,IAAA,SAAA,CAAA,CAAC7O,CAAoB,CAAA,EAAa4f,GAAA7b,EAAA,MAAA,CAC5D,MAEFA,gBAAKe,SAAM,uEAAA,CAAA,CAAeZ,CAAC,CAAA,EAI5BH,EAAA,OAAA,CAEHA,SAAA6b,EAAA1a,EAAAC,EAAA,CAAAjB,SAEIgB,CAAAA,EAAAA,KAAAA,CAAAhB,MAAAA,cACMY,SAAMma,EAAA,IAAAY,GAAA,CAAa3b,KAAAA,CAEb,UAAAwb,EAAEA,IAAAA,EAAWrP,YAAAA,EAAKyP,QAAAA,CAAaC,EAAAA,EAAYF,EAAAA,IAAAA,KAAAA,CAAAA,EAC3CG,OAAAA,EAAAA,KAAAA,CACN,UACE9a,EAAA,MAAA,CAAAhB,MAAAA,kBACOY,SAAM,CAAAI,EAAA,IAAA,CAAiBhB,SAC1BgB,CAAAA,EAAAf,EAAA,CAAAD,KAAAA,EACO,QAAA,QAACE,KAAM2b,GAAoB,CAAA,EAAc,IAAA7a,EAAA,OAAA,CAAK,SACnDA,CAAAA,CAAAA,CAAA6a,GAAA7a,EAAAC,EAAA,UACI,CAAC4a,IAAAA,UACD,KAAAhc,EAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAAG,EAAAA,GAAE8b,CACUzZ,CAAAA,CACJ,CAAA,CAAA,CAGkB,CAAA,EACvBxC,EAAA6D,GAAA,CAET7D,aAAYA,EAAA,OAAA,CACV+D,SAAAA,oBAAc,CAAA,EAAwB,kBAAM,SAC5CC,MAAkB,MAClBV,SAAMwH,IAAA,UACNnH,YAAsB,WACP,CACA,GAAA,CACP,MAAAyX,GAAA,OAAA,IAAA9O,CAAA,EAGI8O,GACC,MAAA,gDAEG,CACVhS,CAA+C,IACjD,EAEJ,SAAApJ,EAAA,SAAA,CAAEG,KAAAA,SAGAF,MAAK,cACLc,SAAM+J,IAAA,UACNnH,SAAUmH,SAAY,CAAA,CACvB,CAAA,CAED,CAAQ,CAAA,EACI9K,EAAA,SAAA,CAEhBA,KAAAA,SACEC,SAAK6K,IAAA,UACLnH,mBACA5C,QAAM,SAAA,OAGAmb,GAAAA,EAAAA,CACJnR,EAAa,SAAA,EACXA,GAAAA,CACImR,EAAA,MAAApf,EAAA,GAAA,SAAA,QAAAkf,EAAA,EAAA,EAAA,OACc,MAAA,wCAGN,EACV5f,WAAe,EACfgN,MACA2B,CACAA,EAAA,SAAA,CACF,CACAA,OAAAA,YAAoB,CACtB,YAAAgR,EACA/W,cAAAA,CAAqB,EAEnBkX,EAAAA,YAAAA,GACFjf,EAAA,WAAA,EACAA,EACAA,SAAoB+C,EAAAmc,GAAA,CACtB,MAAAL,CAAA,CAAE3b,CAEQ,CAAC2b,CAAAA,CAAAA,EAAAA,CAAe,CAAA,CAAA,CACnB,CAAA,EAAAZ,EACP,OAAA,GAAAlb,EAAA,IAAA,CAER,SAACA,EAAA6D,GAAA,CAEFqX,aAAgBlb,EAAA,OACf,CAAAG,6BACc,CACV4D,EAAc,kBAAM,SAAkB,SAAM+G,IAAA,UAC5C9G,QAAkB,IAAA,WACI,GACP,SAAA,EACA,GAAA,CAGX+G,MAAAA,GAAW,OAAS,QAAAmQ,EAAA,IAAAY,GAAAA,EAAA,GAAA,CAAA,EAChB/Q,EAAA,SAAA,EACIqQ,GAGNrQ,MAAAA,CACO,MAAA,0CAAA,IACG,OAAA,CACV3O,CACAgN,IACA2B,EACF,SAAA/K,EAAA,SAAA,CAEF,KAAG,SACL,MAAA,eAAEG,aAEF,UACEF,SAAK,aAAA,CAAA,CACC,CAAA,CACgB,CAAA,CAAA,CACvB,CAAA,EAAAD,EAEO,IAAA,CAAA,SACG,kBAAA,CAAA,CAEhB,CAAA,CAAA,CAGH,CAAA,CAAG,CAAmB,SAEnBmc,GAAA,CAAA,MAAAL,CAGb,EAAA,OAEA,KAAA,CAAqBA,YAAAA,EAAS,QAAAE,CACtB,EAAAF,EAAEC,CAAaC,OAAAA,EAAYF,YAAAA,EAC3B,KAAA1P,EAAEC,iBAAAA,CAAQ+P,EAAAA,EAAahQ,IAAAA,EAAAA,GAAAA,YAAAA,EAAAA,UAAAA,YAAAA,EAAAA,QAAAA,EAAMiQ,GAAAA,GAAAA,YAAAA,EAAAA,QAAAA,EAAqBN,EAAAA,GAAAA,EAClDO,EAAgBC,GAAkB,IAAA,CAClCC,GAAAA,CAAAA,EACN,OACMC,MAAAA,EAAAA,EAAgC,KAAAC,GAAA,QAAA,KAAAA,EAAA,IAAA,CAAA,EACpC,GAAI,CAACF,EAAU,OACTG,KAAAA,CACN,KAAAC,CAAY,EAAAD,EACJC,OAAF,IAAA,gBAAAA,CAAA,CAAEA,EAASD,CAAAA,EAAAA,CAAAA,CAAAA,EACXE,OAAAA,EAAAA,EAAgBC,CACfD,SAAAA,EAAAA,MAAAA,CACLL,MAAUH,aACd,SACE,CAAAU,GAAA5b,EAAA,MAAA,CAAAhB,0BACEsc,EAAA,YAAA,EAAA,GAAW,MAAAA,EAAA,CAAY,aAEnBtb,OAAAA,CAAA,GAAA,EACU,CAAA,EACRqY,SAEM,CAAA8C,GAAAtc,EAAAI,EAAA,CACE,KAAA,MAAqC,GAEvCoc,GAACrb,EAAA,OAAA,CAGNmb,SAAWtc,CAAAA,EAAAA,EAAAA,CAAW,KAAA,YAAA,CAAQ,EAE7BmB,IAAAA,EAAAA,QAAA,CAAAhB,SACEH,GAAAA,YAAAA,EAAK,MAAA,CAAA,CAACK,CAAK,CAAA,CAAY,CACvB,CAAA,EAAAc,QAA0BvD,CAAAA,MAAe,kBAAA,SAE5C,CAAA,CAAA,CAAAwe,GAAApc,EAAA,MAAA,CAGLmB,MAAA,qBAAW,SAAAib,SACNA,EAAAA,MAAepc,CAAKe,MAAM,oBAAoBZ,SAAEic,CAAAA,CAAiB,CACnE,CAAY,CAAA,CAAA,CAAW,CAAA,CAAqB/P,CAAAA,CAAa,CC5O7D,eAAe2K,GAAmBxV,EAAUwb,EAAmB,GAAI,CACxE,GAAI,EAACxb,GAAAA,MAAAA,EAAU5D,QAAQ,OACvB,KAAM,CAAEd,MAAAA,CAAO,EAAGuB,EAAG,EAEfuD,EAAiBH,GAAMI,QAAQC,IAAI,gBAAgB,EACnDmb,EAAmBzb,EAAS0b,OAAO,CAACC,EAAK5I,KAK3C,CAAC4I,EAAIC,SAAS7I,EAAE9W,EAAE,GAClB,CAACuf,EAAiBzI,EAAE9W,EAAE,GACtB8W,EAAE9W,KAAOmE,GAETub,EAAI5Y,KAAKgQ,EAAE9W,EAAE,EAER0f,GACN,CAAE,CAAA,EACL,GAAI,CAACF,EAAiBrf,OAAQ,OAAO,KAErC,GAAI,CAQF,OAPsB,MAAMd,EAAMM,GAAGoE,SAASyV,cAAcjZ,MAAM,CAChEP,GAAIwf,CACN,CAAC,GACyCC,OAAO,CAACC,EAAKrJ,KACrDqJ,EAAIrJ,EAAErW,EAAE,EAAIqW,EACLqJ,GACN,CAAE,CAAA,CAEN,MAAW,CAEV,OAAA,IACA,CACF,CCrBF,SAAwBE,GAAgB,CACtCtgB,SAAAA,EACAyY,yBAAAA,EAA2B,CAAE,EAC7B7U,QAAAA,EAAUA,IAAM,CAAC,CACnB,EAAG,CACK,KAAA,CAAE7D,MAAAA,EAAOC,SAAUqT,GAAoB/R,EAAI,EAC3Cif,EAAoBvgB,EAAWA,IAAaqT,EAAkB,GAC9D3P,EAAaC,GAAYzD,CAAM,EAE/B,CAAC6N,EAASC,CAAU,EAAInO,EAAS,SAAS,EAC1C,CAAC4E,EAAU+b,CAAW,EAAI3gB,EAAS,CAAE,CAAA,EACrC,CAAC4gB,EAAUC,CAAW,EAAI7gB,EAAS,EAAK,EAI1C,GAFJ8Q,GAAkB/M,CAAO,EAErB,CAACF,EAAWid,oBACP,OAAA,KAGH,KAAA,CACJjgB,GAAAA,EACA6X,QAAAA,EACAC,cAAAA,EACA/T,SAAUmc,EACVC,cAAAA,CAAAA,EACEnd,EAAWid,oBAET,CAACV,EAAkBa,CAAmB,EAAIjhB,EAAS,CAAE,CAAA,EAErDkhB,EAAoB,MAAOtc,GAAa,CAE5C,GADI,EAACA,GAAAA,MAAAA,EAAU5D,SACX,CAAC0f,EAAmB,OACxB,MAAMrG,EAAgB,MAAMD,GAAmBxV,EAAUwb,CAAgB,EACrE/F,GACkB4G,EAAA,CAClB,GAAGb,EACH,GAAG/F,CAAAA,CACJ,CACH,EAGI8G,EAAgBxL,GAAc,CAC7BgD,IACDhD,GAAWgL,EAAY,CAAE,CAAA,EAC7BxS,EAAW,SAAS,GACnB,SAAY,CACP,GAAA,CACI,KAAA,CAAEiT,KAAAA,EAAMtgB,MAAAA,CAAAA,EAAU,MAAM6X,EAAchD,CAAS,EACjD0L,GAAAA,MAAMC,QAAQxgB,CAAK,EAAG,CACxB,GAAI6U,EAAW,CACb,MAAM/Q,EAAW,CAAA,EACjB,QAASiB,EAAI,EAAGA,EAAI/E,EAAME,OAAQ6E,IAAK,CAC/BD,MAAAA,EAAU9E,EAAM+E,CAAC,EACjB0b,EAAa3c,EAAS4c,KAC1B,CAAC7J,EAAG8J,IAAM9J,EAAE9W,KAAO+E,EAAQ/E,IAAMgF,IAAM4b,CACzC,EACKF,EAMHA,EAAWG,OAAO/Z,KAAK,GAAG/B,EAAQ8b,MAAM,EALxC9c,EAAS+C,KAAK,CACZ+Z,OAAQ,CAAE,EACV,GAAG9b,CAAAA,CACJ,CAIL,CACA+a,EAAY/b,CAAQ,CAAA,MAIpB+b,EAAsBgB,GAAA,CACpB,MAAMC,EAAcD,EACpB,UAAW/b,KAAW9E,EAAO,CAC3B,MAAMygB,EAAaK,EAAYJ,QAAY7J,EAAE9W,KAAO+E,EAAQ/E,EAAE,EACzD0gB,EAGHA,EAAWG,OAAO/Z,KAAK,GAAG/B,EAAQ8b,MAAM,EAFxCE,EAAYja,KAAK/B,CAAO,CAI5B,CACOgc,OAAAA,CAAAA,CACR,EAEHf,EAAY,CAACO,CAAI,EAEjBF,EAAkBpgB,CAAK,CAAA,MAEvB+f,EAAY,EAAK,EAEnB1S,EAAW,SAAS,OACV,CACV3O,SAAe,CACf2O,CAAkB,KACpB,EAEJwH,EAAA1W,EAAA,EAAA,EAEM0W,OAAAA,EAAAA,IAAAA,EACNzW,GAAAA,YAAAA,EAAgB,QAAA,GACV6hB,EAAAA,GACFJ,EAA0BI,CAAA,IAErBI,EAAA,EAAA,EACLA,EAAAA,QAAiB,GACG,EACtB,CAAAJ,EAAApI,CAAA,CAAA,EACFzZ,EAAoByZ,IAAAA,OAEpBzZ,EAAgB,WACS+C,EAAA4B,EAAA,wBAAA,YAAA5B,EAAA,MAAApB,GAGnBgD,EAAWge,EAAuBhhB,CAEtC,EAAA,CAAAgD,EAAA,sBAAA,OAAA,CAAA,EACage,EAAAA,MAAAA,CAEf,GAAA,6BACOhhB,MAAG,QAA6BsD,SAAM,KAAQC,SAAS,CAAAhB,EAAA,SAAA,CAAIG,KAAAA,SACtDF,MAAK,cAASc,QAAMJ,EAAcT,SAASS,EAAAA,EAAAA,CAAQR,KAAAA,GACpD,CAAA,CAAM,CAAA,EAAKH,EAAA,SAAA,CAElBA,SAAAA,EAAA,KAAA,CAAAG,YACE,UAAA,CAAA,CAAgB,CAAA,EAAeH,EAAA,OAAA,CAEjCA,SAAAwB,EAAA,OAAA,EAAAL,EAAAC,EAAA,CACGI,SAAAA,CAAAA,EAAAA,KAAkB,CACjBrB,MAAAA,gBACMY,SAAMS,EAAA,IAAAgB,GAAA,SAAerC,MAAAA,EACRqC,EAAYA,EAAA,EAAA,EACnBwT,EAAAA,GAAAA,EAAgCxT,EAAAA,MAAAA,EAAAA,EAAAA,SAAAA,YAAAA,EAAAA,SAAU,EAAA,GAC1C8J,OAAAA,OAAiB7O,CACvB,UACEmgB,KAAAc,EAAAlc,EAAA,SAAA,YAAAkc,EAAA,QAAA,GAAA1e,EAAA,MAAA,CAAAG,MAAAA,kBAESY,SAAMyB,EAAA,OAAA,IAAAvC,GAAAD,EAAAI,EAAA,OAIH,OAAA,SACE6L,UAAQ,OAAA,EACRD,CAAW,EACb,MAAM,GAAA/L,CAAA,OAAA,CAERc,CAAAA,CAAe,CAAA,EAElBf,EAAA,MAAA,CAGLA,MAAA,wBAAKe,SAAMf,EAAA0T,GAAA,CAAuBvT,QAAAA,EAE9BqC,UAAAA,GACAmc,aAAAA,EACA3I,yBAAAA,CAAAA,CACAR,CAAAA,CAAAA,CAAmD,CACpD,EACElJ,CAAC,CAAA,CAAA,CACJ,CAAA,EAEPxB,IAAA,UAAA0S,EAAAxd,EAAA4e,GAAA,CAEF9T,SAAAA,GACC0S,IAGMO,GAEA,EACF,SAAA/d,EAAA,SAAA,CAAEG,KAAAA,SAGAF,MAAK,cACLc,QAAM,IAAAgd,EAAA,EACN7d,qBAA4B,CAAA,CAC7B,CAAA,EAEOF,EAAA,IAAA,CAGVA,MAAAA,yBAAGe,SAAM,UAAA,CAAA,EAAyB+J,IAAA,WAAA9K,EAAA,IAAA,CAAW,MAGnC,WACPe,SAAMf,EAAAqY,GAAA,CAAUlY,OACjBH,EAAO,CAAA,CAAO,CAAA,CAAA,CAAE,CAAA,EAGrB8K,IAAA,UAAA9K,EAAA,IAAA,CACD,MACY,WACXe,SAAMf,EAAAqY,GAAA,CAAUlY,OACjBH,EAAO,CAAA,CAAO,CAAA,EAAE8K,IAAA,QAAA9K,EAAA,IAAA,CACf,MACW,WACXe,SAAM,wBAAA,CAAA,EAAWf,EAAA,IAAA,CAEpBA,MAAAA,yBAAGe,SAAM,iBAAA,CAAA,CAAyB,CAAA,CAAe,CAAG,CAAA,CAEjD,CCxMb,SAAwB8d,GAAc,CAAEte,IAAAA,EAAKoJ,KAAAA,EAAMhJ,QAAAA,CAAQ,EAAG,CACtDF,MAAAA,EAAaC,GAAYzD,CAAM,EAC/B,CAAC6hB,EAAgBC,CAAiB,EAAIniB,EAAS,EAAK,EACpD2K,EAAiBI,GAA2B,EAAI,EAChDkC,EACJpJ,EAAW+G,SAASqC,iCAAmC,CAAA,EACnDmV,EACJ,CAAC,CAACrV,GACFA,IAASpC,GACT,CAAC0X,GAAY,CAACtV,CAAI,EAAG,CAACpC,CAAc,CAAC,GACrC,CAACsC,EAAgCuU,KACxBzU,GAAAA,IAASoQ,GAAKkF,GAAY,CAACtV,CAAI,EAAG,CAACoQ,CAAC,CAAC,CAC9C,EAEF,OACE5Y,EAAA,MAAA,CAAKJ,MAAM,QAAQC,SAAS,KAAIb,SAC7B,CAAA,CAAC,CAACQ,GACDX,EAAA,SAAA,CAAQC,KAAK,SAASc,MAAM,oBAAoBb,QAASS,EAAQR,SAC/DH,EAACI,EAAI,CAACC,KAAK,GAAA,CAAK,CAAA,CACV,EAEVc,EAAA,SAAA,CAAQJ,MAAM,cAAaZ,UACzBH,EAAA,KAAA,CAAAG,SAAI,mBAAA,CAAqB,EACzBH,EAAA,MAAA,CAAKe,MAAM,cAAaZ,SACtBH,EAACqD,GAAK,CACJC,MAAM,MACNC,WACEvD,EAAA,SAAA,CAAQC,KAAK,SAASc,MAAM,SAAQZ,SAClCH,EAACI,EAAI,CAACC,KAAK,OAAOE,IAAI,OAAOD,KAAK,IAAA,CAAM,CAAA,CAClC,EACTH,SAEDgB,EAACsC,GAAQ,CACPE,SAAUmb,EACV5e,QAASA,IAAM,CACb6e,EAAkB,EAAI,CACxB,EAAE5e,SAAA,CAEFH,EAACI,EAAI,CAACC,KAAK,WAAA,CAAa,EACxBL,EAAA,OAAA,CAAAG,SAAM,WAAA,CAAe,CAAC,CAAA,CACd,CAAA,CACL,CAAA,CACJ,CAAC,CAAA,CACA,EACRgB,EAAA,OAAA,CAAMwI,KAAAA,EAAYiO,IAAI,OAAMzX,UAC1BH,EAAA,IAAA,CACEwZ,MAAO,CACL0F,WAAY,WACZC,SAAU,QACZ,EAAEhf,SAEDI,CACA,CAAA,GACDye,GAAqBF,IACrB9e,EAACof,GAAgB,CACfN,eAAAA,EACAO,eAAgB1V,EAChBuP,KAAM3Y,CAAAA,CACP,CACF,CAAA,CACG,CAAC,CAAA,CACJ,CAET,CC1EA,SAAS+e,GAAM5hB,EAAOkL,EAAKC,EAAK,CAC9B,OAAOmQ,KAAKnQ,IAAImQ,KAAKpQ,IAAIlL,EAAOmL,CAAG,EAAGD,CAAG,CAC3C,CAEA,MAAM2W,GAAiBhG,GACrBA,GAAK,OAAUP,KAAKwG,KAAKjG,EAAI,MAAS,MAAO,GAAG,EAAIA,EAAI,MACpDkG,GAAiBlG,GACrBA,GAAK,SAAY,MAAQP,KAAKwG,IAAIjG,EAAG,EAAI,GAAG,EAAI,KAAQ,MAAQA,EAE3D,SAASmG,GAAU,CAAC5L,EAAGG,EAAGC,CAAC,EAAG,CACnCJ,EAAIyL,GAAczL,EAAI,GAAG,EACzBG,EAAIsL,GAActL,EAAI,GAAG,EACzBC,EAAIqL,GAAcrL,EAAI,GAAG,EACzB,IAAI6F,EAAI,YAAejG,EAAI,YAAeG,EAAI,YAAeC,EACzDyL,EAAI,YAAe7L,EAAI,YAAeG,EAAI,YAAeC,EACzD0L,EAAI,YAAe9L,EAAI,YAAeG,EAAI,YAAeC,EAC7D6F,OAAAA,EAAIf,KAAK6G,KAAK9F,CAAC,EACf4F,EAAI3G,KAAK6G,KAAKF,CAAC,EACfC,EAAI5G,KAAK6G,KAAKD,CAAC,EACR,CACL7F,EAAI,YAAgB4F,EAAI,WAAeC,EAAI,aAC3C7F,EAAI,aAAgB4F,EAAI,aAAeC,EAAI,YAC3C7F,EAAI,YAAgB4F,EAAI,YAAgBC,EAAI,WAAY,CAE5D,CAEO,SAASE,GAAU,CAACC,EAAGxL,EAAGL,CAAC,EAAG,CACnC,IAAI6F,EAAIgG,EAAIxL,EAAI,YAAgBL,EAAI,YAChCyL,EAAII,EAAIxL,EAAI,aAAgBL,EAAI,aAChC0L,EAAIG,EAAIxL,EAAI,aAAgBL,EAAI,aAEpC6F,EAAIA,GAAK,EACT4F,EAAIA,GAAK,EACTC,EAAIA,GAAK,EACT,IAAI9L,EAAIiG,EAAI,aAAgB4F,EAAI,cAAgBC,EAAI,YAChD3L,EAAI8F,EAAI,cAAgB4F,EAAI,aAAgBC,EAAI,aAChD1L,EAAI6F,EAAI,aAAgB4F,EAAI,aAAgBC,EAAI,YAEpD9L,OAAAA,EAAI,IAAM2L,GAAc3L,CAAC,EACzBG,EAAI,IAAMwL,GAAcxL,CAAC,EACzBC,EAAI,IAAMuL,GAAcvL,CAAC,EAEzBJ,EAAIwL,GAAMxL,EAAG,EAAG,GAAG,EACnBG,EAAIqL,GAAMrL,EAAG,EAAG,GAAG,EACnBC,EAAIoL,GAAMpL,EAAG,EAAG,GAAG,EAEnBJ,EAAIkF,KAAKgH,MAAMlM,CAAC,EAChBG,EAAI+E,KAAKgH,MAAM/L,CAAC,EAChBC,EAAI8E,KAAKgH,MAAM9L,CAAC,EACT,CAACJ,EAAGG,EAAGC,CAAC,CACjB,CC/BA,SAAS+L,GAAW,CAClB5D,iBAAAA,EACA6D,SAAAA,EACAnjB,SAAAA,EACA4M,KAAAA,EACAwW,MAAAA,EAAQ,EACRxf,QAAAA,EAAUA,IAAM,CAAC,CACnB,EAAG,SACKyf,MAAAA,EAAcvkB,EAAO,IAAI,EAEzB,CAACwkB,EAAcC,CAAe,EAAI1jB,EAASujB,CAAK,EAChDI,EAAoB1kB,EAAO,IAAI,EACrC2kB,GAAgB,IAAM,QACpBD,EAAAA,EAAkBxkB,UAAlBwkB,MAAAA,EAA2BE,gBAY7B,EAAG,CAAE,CAAA,EACCC,MAAAA,EAAe7kB,EAAOqkB,CAAQ,EACpCpkB,EAAU,IAAM,CACR6kB,MAAAA,EAAaR,EAAQC,EAAYrkB,QAAQ6kB,YACzCC,EAAoBH,EAAa3kB,UAAYmkB,EAC/CW,IAAmBH,EAAa3kB,QAAUmkB,GAC9CE,EAAYrkB,QAAQ+kB,SAAS,CAC3BC,KAAMJ,EACNK,SAAUH,EAAoB,OAAS,QAAA,CACxC,EACDT,EAAYrkB,QAAQuR,OAAM,EACzB,CAAC6S,EAAOD,CAAQ,CAAC,EAEpB,KAAM,CAACe,EAAcC,CAAe,EAAItkB,EAAS,EAAI,EAErDd,EAAU,IAAM,CACd,IAAIqlB,EAAcA,IAAM,CACdxgB,GAAA,EAEV,OAAIyf,EAAYrkB,SACFA,EAAAA,QAAQqlB,iBAAiB,cAAeD,CAAW,EAE1D,IAAM,CACPf,EAAYrkB,SACFA,EAAAA,QAAQslB,oBAAoB,cAAeF,CAAW,CACpE,CAEJ,EAAG,CAAE,CAAA,EAEL/hB,GACE,MACAuB,EACA,CACEb,gBAAwBJ,GACL,CAAC,CAACxD,SAAS6D,cAAc,sBAAsB,CAElE,EAEF,CAACY,CAAO,CACV,EAEA7E,EAAU,IAAM,CACd,IAAIwlB,EAAeA,IAAM,CACjB,KAAA,CAAEV,YAAAA,EAAaD,WAAAA,CAAAA,EAAeP,EAAYrkB,QAC1CokB,EAAQnH,KAAKgH,MAAMW,EAAaC,CAAW,EACjDN,EAAgBH,CAAK,CAAA,EAEvB,OAAIC,EAAYrkB,SACFA,EAAAA,QAAQqlB,iBAAiB,SAAUE,EAAc,CAC3DC,QAAS,EAAA,CACV,EAEI,IAAM,CACPnB,EAAYrkB,SACFA,EAAAA,QAAQslB,oBAAoB,SAAUC,CAAY,CAChE,CAEJ,EAAG,CAAE,CAAA,EAELxlB,EAAU,IAAM,CACViR,IAAAA,EAAQxO,WAAW,IAAM,UAC3B6hB,GAAAA,EAAAA,EAAYrkB,UAAZqkB,YAAAA,EAAqB9S,QAArB8S,MAAAA,EAAAA,KAAAA,IACC,GAAG,EACC,MAAA,IAAMrhB,aAAagO,CAAK,CACjC,EAAG,CAAE,CAAA,EAECyU,MAAAA,EAAoBlR,GAAQ,IACzB+L,GAAAA,YAAAA,EAAkB/a,IAAeob,GAAA,CAChC,KAAA,CAAE+E,SAAAA,CAAa/E,EAAAA,EACrB,GAAI+E,EAAU,CACNC,MAAAA,EAAeC,GAAwBF,CAAQ,EAC/CG,EAAkBlC,GAAUgC,CAAY,EACvC5B,OAAAA,GAAU,CAAC,GAAK8B,EAAgB,CAAC,EAAGA,EAAgB,CAAC,CAAC,CAAC,CAChE,CACO,OAAA,IAAA,GAER,CAACvF,CAAgB,CAAC,EACfwF,EAAsBvR,GAAQ,IAAM,OAElCwR,MAAAA,EAAQ,IAAMN,EAAkB5jB,OACtC,QACE4jB,EAAAA,GAAAA,YAAAA,EACIlgB,IAAI,CAACmT,EAAOhS,IAAM,CACZsf,MAAAA,EAAQtf,EAAIqf,EAAQ5X,EACpB8X,GAAOvf,EAAI,GAAKqf,EAAQ5X,EAC9B,OAAIuK,EACM;AAAA,mBACDA,GAAAA,YAAAA,EAAOwN,KAAK,IAAK,UAASF,CAAM;AAAA,mBAChCtN,GAAAA,YAAAA,EAAOwN,KAAK,IAAK,UAASD,CAAI;AAAA,YAI/B;AAAA,0BACQD,CAAM;AAAA,0BACNC,CAAI;AAAA,WAErB,KAfHR,YAAAA,EAgBIS,KAAK,QAAS,aAAA,EAEnB,CAACT,CAAiB,CAAC,EAEtB,OACErgB,EAAA,MAAA,CACEJ,MAAQ,2CAA0Csb,GAAAA,YAAAA,EAAkBze,MAAO,GAAEuC,UAE7EH,EAAA,MAAA,CACEuC,IAAK6d,EACL9d,SAAS,IACT,uBAAqB,KACrBvB,MAAM,WACNb,QAAgBR,GAAA,EAEZA,EAAEyJ,OAAOZ,UAAU2Z,SAAS,eAAe,GAC3CxiB,EAAEyJ,OAAOZ,UAAU2Z,SAAS,OAAO,GACnCxiB,EAAEyJ,OAAOZ,UAAU2Z,SAAS,YAAY,IAEhCvhB,GAEZ,EACA6Y,MACE6C,EAAiBze,OAAS,EACtB,CACEukB,qBAAsB,QACtBC,gBAAkB;AAAA,wBACVP,CAAoB,GAAA,EAE9B,CAAC,EACN1hB,SAEAkc,GAAAA,YAAAA,EAAkB/a,IAAI,CAACob,EAAOja,IAAM,CACnC,MAAM4f,EACJhG,EAAiBze,SAAW,EAAI4jB,EAAkB/e,CAAC,EAAI,KACzD,OACEtB,EAAA,MAAA,CACEJ,MAAM,gBACNyY,MACE6I,EACI,CACE,iBAAmB,OAAMA,GAAAA,YAAAA,EAAaJ,KAAK,IAAK,IAChD,uBAAyB,QAAOI,GAAAA,YAAAA,EAAaJ,KAC3C,IACA,QAAA,EAEJ,CAAC,EAEPjhB,SAAS,IAETuB,IAAKE,IAAM4d,EAAeE,EAAoB,KAC9CrgB,QAAgBR,GAAA,CAKTA,EAAEyJ,OAAOZ,UAAU2Z,SAAS,OAAO,GACtChB,EAAgB,CAACD,CAAY,CAEjC,EAAE9gB,UAED,CAAC,CAACuc,EAAM4F,aACPnhB,EAAA,SAAA,CACElB,KAAK,SACLc,MAAM,YACN9E,OAAQ,CAACglB,EACT/gB,QAASA,IAAM,CACbjD,EAAOslB,aAAe,CACpBhiB,IAAKmc,EAAM4F,YACX3Y,KAAAA,CAAAA,CAEJ,EAAExJ,UAEFH,EAAA,OAAA,CAAMe,MAAM,YAAWZ,SAAC,KAAA,CAAS,EACjCH,EAAA,OAAA,CAAMe,MAAM,iBAAiB4I,KAAAA,EAAYiO,IAAI,OAAMzX,SAChDuc,EAAM4F,WAAAA,CACH,CAAC,CAAA,CACD,EAEVtiB,EAACwiB,GAAK,CAAC9F,MAAAA,EAAc+F,aAAY,GAAC9Y,KAAAA,CAAAA,CAAa,CAAC,CAAA,EA9B3C+S,EAAMjf,EA+BR,CAAA,EAER,CACE,EACL0D,EAAA,MAAA,CAAKJ,MAAM,wBAAwB9E,OAAQ,CAACglB,EAAa9gB,UACvDH,EAAA,OAAA,CAAAG,SACEH,EAAA,SAAA,CACEC,KAAK,SACLc,MAAM,kBACNb,QAASA,IAAMS,EAAQ,EAAER,SAEzBH,EAACI,EAAI,CAACC,KAAK,GAAA,CAAK,CAAA,CACV,CACJ,CAAA,GACLgc,GAAAA,YAAAA,EAAkBze,QAAS,EAC1BoC,EAAA,OAAA,CAAMe,MAAM,gBAAeZ,SACxBkc,GAAAA,YAAAA,EAAkB/a,IAAI,CAACob,EAAOja,IAC7BzC,EAAA,SAAA,CAEEC,KAAK,SACL0D,SAAUlB,IAAM4d,EAChBtf,MAAQ,gBAAe0B,IAAM4d,EAAe,SAAW,EAAG,GAC1DngB,QAAgBR,GAAA,CACdA,EAAE+O,eAAe,EACjB/O,EAAEgjB,gBAAgB,EAClBtC,EAAYrkB,QAAQ+kB,SAAS,CAC3BC,KAAMX,EAAYrkB,QAAQ6kB,YAAcne,EACxCue,SAAU,QAAA,CACX,EACDZ,EAAYrkB,QAAQuR,OACtB,EAAEnN,SAEFH,EAACI,EAAI,CAACC,KAAK,QAAQC,KAAK,GAAA,CAAK,CAAA,EAdxBoc,EAAMjf,EAeL,EACT,CACG,EAENuC,EAAO,OAAA,CAAA,CAAA,EAETmB,EAAA,OAAA,CAAAhB,SAAA,CACEH,EAACqD,GAAK,CACJsf,SAAS,OACTrf,MAAM,MACNsf,SAAS,SACT1Y,IAAK,EACL2Y,cAAc,aACdtf,WACEvD,EAAA,SAAA,CAAQC,KAAK,SAASc,MAAM,kBAAiBZ,SAC3CH,EAACI,EAAI,CAACC,KAAK,OAAOE,IAAI,MAAA,CAAQ,CAAA,CACxB,EACTJ,SAEDgB,EAAC2hB,GAAQ,CACP7e,OACEoY,EAAAA,EAAiBgE,CAAY,IAA7BhE,YAAAA,EAAgC0G,cAChC1G,EAAAA,EAAiBgE,CAAY,IAA7BhE,YAAAA,EAAgCxZ,KAElC9B,MAAM,kBACNoI,OAAO,SACP3F,MAAM,oCAAmCrD,SAAA,CAEzCH,EAACI,EAAI,CAACC,KAAK,QAAA,CAAU,EACrBL,EAAA,OAAA,CAAAG,SAAM,qBAAA,CAAyB,CAAC,CAAA,CACxB,CAAA,CACL,EAAE,IACTgB,EAAC+C,EAAI,CACHC,GAAK,GAAEpH,EAAY,IAAGA,CAAS,GAAI,EAAG,MAAKmjB,CAAS,GAClDlb,OAAOge,WAAW,iCAAiC,EAAEC,QAChD,UAAS5C,EAAe,CAAE,GAC3B,EACL,GACDtf,MAAM,yCAQNZ,UAEAH,EAAA,OAAA,CAAMe,MAAM,eAAcZ,SAAC,YAAgB,CAAA,EAC7C,GAAA,CAAA,CAAM,CAAC,CAAA,CACH,CAAC,CACJ,CAAA,GACJkc,GAAAA,YAAAA,EAAkBze,QAAS,GAC1BuD,EAAA,MAAA,CAAKJ,MAAM,oBAAoB9E,OAAQ,CAACglB,EAAa9gB,UACnDH,EAAA,SAAA,CACEC,KAAK,SACLc,MAAM,kBACN9E,OAAQokB,IAAiB,EACzBngB,QAAgBR,GAAA,CACdA,EAAE+O,eAAe,EACjB/O,EAAEgjB,gBAAgB,EAClBtC,EAAYrkB,QAAQuR,QACpB8S,EAAYrkB,QAAQ+kB,SAAS,CAC3BC,KAAMX,EAAYrkB,QAAQ6kB,aAAeP,EAAe,GACxDW,SAAU,QAAA,CACX,CACH,EAAE7gB,SAEFH,EAACI,EAAI,CAACC,KAAK,YAAA,CAAc,CAAA,CACnB,EACRL,EAAA,SAAA,CACEC,KAAK,SACLc,MAAM,kBACN9E,OAAQokB,IAAiBhE,EAAiBze,OAAS,EACnDsC,QAAgBR,GAAA,CACdA,EAAE+O,eAAe,EACjB/O,EAAEgjB,gBAAgB,EAClBtC,EAAYrkB,QAAQuR,QACpB8S,EAAYrkB,QAAQ+kB,SAAS,CAC3BC,KAAMX,EAAYrkB,QAAQ6kB,aAAeP,EAAe,GACxDW,SAAU,QAAA,CACX,CACH,EAAE7gB,SAEFH,EAACI,EAAI,CAACC,KAAK,aAAA,CAAe,CAAA,CACpB,CAAC,CAAA,CACN,CACN,CAAA,CACE,CAET,CCzVA,MAAe6iB,GAAA,+fCAAC,GAAA,8lBCAAC,GAAA,yjCCGTrU,GAAQ,IACRsU,GAAY,GAEX,eAAeC,IAAoB,CACxC,KAAM,CAAExmB,MAAAA,CAAO,EAAGuB,EAAG,EACfklB,EAAWzmB,EAAMM,GAAGomB,aAAalmB,KAAK,CAC1CC,MAAOwR,EACT,CAAC,EACK0U,EAAO,CAAA,EACb,IAAIC,EAAa,EACjB,EAAG,CACD,KAAM,CAAEhmB,MAAAA,EAAOsgB,KAAAA,CAAK,EAAI,MAAMuF,EAAS5lB,OACvC,GAAIqgB,IAAQtgB,GAAAA,YAAAA,EAAOE,UAAW,EAAG,MACjC6lB,EAAKlf,KAAK,GAAG7G,CAAK,EAClBgmB,UACOA,EAAaL,IACtBI,OAAAA,EAAK3J,KAAK,CAACvF,EAAGL,IAAMK,EAAE9L,KAAKkb,cAAczP,EAAEzL,IAAI,CAAC,EAChDrM,EAAQuC,QAEJ8kB,WAAK7lB,IAAQ,CAEb6D,GAAA,QAAA,IAAA,eAAA,CACAA,KAAAA,EACEgiB,UAAI,KAAA,IAAA,CACJ9H,CAAAA,CACF,EAAC,CAAC,EAEN8H,CAEA,CACF,MAAAG,GAAA,GAAA,GAAA,GAAA,IAEMA,eAAeC,IAAgB,CAC9B,GAAA,CACD,KAAA,CACI,KAAAJ,EAAEA,UAAAA,CAAM9H,EAAAA,GAAAA,QAAAA,IAAAA,cAAAA,GAAAA,CAAAA,EAAU,OAAS8H,GAAA,MAAAA,EAAQ,QACrC,KAAK,MAAQ9H,EAASiI,IAExBN,KACAA,GAJ0D,MAAAA,GAAO,CAOnE,MAAW,CACX,MAAO5jB,EACP,CACF,CACF,MAAAokB,GAAA,SAAA,cAAA,KAAA,EAEaC,GAAyBC,GAAO,CAC7C,GAAA,CAAOA,EAAMD,MAAAA,GACX,GAAIC,EAAQ,QAAE,GAAS,IAAA,GAAA,MAAA,GACvBF,GAAIE,UAAgBA,EACpBF,MAAOG,EAAoBH,GAAA,iBAAA,WAAA,EAC3B,OAAAG,EAAkB,OACD,MAAA,KAACrmB,OAAiB2W,GAAAA,EAAA,UAAA,KAAA,EAAA,QAAA,WAAA,EAAA,CAAA,EADU,ICtD/C,SAAS2P,GAAU,CAAE/jB,SAAAA,CAAS,EAAG,CAC/B,GAAI,OAAOA,GAAa,SAAiBA,OAAAA,EACzC,KAAM,CAAC+Y,EAAMiL,CAAO,EAAIvnB,EAAS,EAAE,EACnCd,OAAAA,EAAU,IAAM,CACdsoB,QAAQrJ,QAAQ5a,CAAQ,EAAEkkB,KAAKF,CAAO,CAAA,EACrC,CAAChkB,CAAQ,CAAC,EACN+Y,CACT,CCgBO,MAAMoL,GAAkB,EAEzBC,GAAQ,CACZ,YACA,WACA,gBACA,OACA,SACA,WAIA,UACA,YACA,YAAY,EAERC,GAAY,CAChBtO,UAAW,mBACX7Y,cAAe,gBACfC,KAAM,OACNmnB,OAAQ,6BACR3J,OAAQ,SACR,mBAAoB,UACpB4J,UAAW,YACXC,WAAY,QACZC,QAAS,UACTC,SAAU,WACVC,SAAU,UACZ,EACMC,GAAc,CAClBznB,KAAM,CACJ,CACE4b,KAAM,UACNzQ,KAAM,IAAA,CACP,EAEHgc,OAAQ,CACN,CACEvL,KAAM,aACNzQ,KAAM,QACNxI,KAAM,UAAA,EAER,CACEiZ,KAAM,WACNzQ,KAAM,WACNxI,KAAM,OACN+kB,YAAa,iCACbC,YAAa,EAAA,CACd,EAEHJ,SAAU,CACR,CACE3L,KAAM,WACNzQ,KAAM,WACNxI,KAAM,OACN+kB,YAAa,iCACbC,YAAa,EAAA,CACd,EAEHnK,OAAQ,CACN,CACE5B,KAAM,cACNzQ,KAAM,QACNxI,KAAM,MAAA,CACP,EAEH,mBAAoB,CAClB,CACEiZ,KAAM,IACNzQ,KAAM,KACNxI,KAAM,OACN+kB,YAAa,yBAAA,CACd,EAEHJ,QAAS,CACP,CACE1L,KAAM,IACNzQ,KAAM,UACNxI,KAAM,OACN+kB,YAAa,yCACbE,QAAS,OAAA,EAEX,CACEhM,KAAM,aACNzQ,KAAM,QACNxI,KAAM,UAAA,EAER,CACEiZ,KAAM,WACNzQ,KAAM,WACNxI,KAAM,OACN+kB,YAAa,iCACbC,YAAa,EAAA,CACd,CAEL,EACME,GAAiB9V,GAAK,MAAO,CAAE5R,GAAAA,CAAG,KACzB,MAAMY,EAAMvB,EAAAA,MAAMM,GAAG+b,MAAMnW,QAAQvF,CAAE,EAAEO,SACxCwF,KACb,EACK4hB,GAAoB/V,GAAK,MAAO,CAAE5R,GAAAA,CAAG,IAAM,CACzC+E,MAAAA,EAAU,MAAMnE,EAAMvB,EAAAA,MAAMM,GAAGoE,SAASwB,QAAQvF,CAAE,EAAEO,QAC1D,OAAOwE,EAAQ8O,UAAY9O,EAAQkO,MAAQlO,EAAQsO,WACrD,CAAC,EACYuU,GAAiB,CAC5BnP,UAAW,CACTzY,GAAI,OACJ+F,MAAOA,CAACxB,EAAGme,IAAWA,IAAU,EAAI,OAAS,YAC7CtH,KAAM,IACNxY,KAAM,MACR,EACAykB,SAAU,CACRrnB,GAAI,WACJ+F,MAAO,WACPqV,KAAM,YACNxY,KAAM,IACR,EACAhD,cAAe,CACbI,GAAI,gBACJ+F,MAAO,gBACPqV,KAAM,iBACNxY,KAAM,cACR,EACA/C,KAAM,CACJG,GAAI,OACJ+F,MAAO2hB,GACPtM,KAAMA,CAAC,CAAEpb,GAAAA,CAAAA,IAAU,MAAKA,CAAG,GAC3B4C,KAAM,MACR,EACAokB,OAAQ,CACNhnB,GAAI,SACJ+F,MAAOA,CAAC,CAAE9B,MAAAA,CAAAA,IAAaA,EAAQ,QAAU,YACzC4jB,SAAUA,CAAC,CAAEvoB,SAAAA,CAAAA,IAAeA,GAAYsB,EAAAA,EAAMtB,SAC9C8b,KAAMA,CAAC,CAAEnX,MAAAA,EAAO3E,SAAAA,CAAAA,IAAgB,IAAGA,CAAS,KAAI2E,EAAQ,KAAO,EAAG,GAClErB,KAAMA,CAAC,CAAEqB,MAAAA,CAAAA,IAAaA,EAAQ,QAAU,OAC1C,EACAmjB,SAAU,CACRpnB,GAAI,WACJ+F,MAAO,WACP8hB,SAAUA,CAAC,CAAEvoB,SAAAA,CAAAA,IAAeA,GAAYsB,EAAAA,EAAMtB,SAC9C8b,KAAMA,CAAC,CAAE9b,SAAAA,CAAAA,IAAgB,IAAGA,CAAS,YACrCsD,KAAM,OACR,EACAya,OAAQ,CACNrd,GAAI,SACJ+F,MAAOA,CAAC,CAAE+hB,MAAAA,CAAAA,IAAYA,EACtB1M,KAAMA,CAAC,CAAE0M,MAAAA,CAAAA,IAAa,aAAYA,CAAM,GACxCllB,KAAM,QACR,EACA,mBAAoB,CAClB5C,GAAI,mBACJ+F,MAAO4hB,GACPvM,KAAMA,CAAC,CAAEpb,GAAAA,CAAAA,IAAU,MAAKA,CAAG,GAC3B4C,KAAM,MACR,EACAqkB,UAAW,CACTjnB,GAAI,YACJ+F,MAAO,YACPqV,KAAM,KACNxY,KAAM,UACR,EACAskB,WAAY,CACVlnB,GAAI,aACJ+F,MAAO,QACPqV,KAAM,KACNxY,KAAM,OACR,EACAukB,QAAS,CACPnnB,GAAI,UACJ+F,MAAOA,CAAC,CAAEohB,QAAAA,CAAAA,IAAcA,EACxBU,SAAUA,CAAC,CAAEvoB,SAAAA,CAAAA,IAAeA,GAAYsB,EAAAA,EAAMtB,SAC9C8b,KAAMA,CAAC,CAAE+L,QAAAA,EAAS7nB,SAAAA,EAAU2f,MAAAA,CAAAA,IACzB,GAAE3f,EAAY,IAAGA,CAAS,GAAI,EAAG,MAAK6nB,EAAQY,MAAM,KAAK,EAAEvD,KAAK,GAAG,CAAE,GACpEvF,EAAQ,WAAa,EACtB,GACHrc,KAAM,SACR,CACF,EAEA,SAASolB,GAAkB,CAAE9kB,QAAAA,CAAQ,EAAG,CAChCF,MAAAA,EAAaC,GAAYzD,CAAM,EAC/B,CAAEyoB,UAAAA,CAAcjlB,EAAAA,EAChB,CAACklB,EAAUC,CAAW,EAAIhpB,EAAS,EAAK,EACxC,CAACipB,EAAkBC,CAAmB,EAAIlpB,EAAS,EAAK,EAExD,CAACmpB,CAAmB,EAAI1jB,KAE9B,OACElB,EAAA,MAAA,CAAK1D,GAAG,+BAA+BsD,MAAM,QAAQC,SAAS,KAAIb,SAC/D,CAAA,CAAC,CAACQ,GACDX,EAAA,SAAA,CAAQC,KAAK,SAASc,MAAM,cAAcb,QAASS,EAAQR,SACzDH,EAACI,EAAI,CAACC,KAAK,GAAA,CAAK,CAAA,CACV,EAEVL,EAAA,SAAA,CAAAG,SACEgB,EAAA,KAAA,CAAAhB,SAAA,CACEH,EAACI,EAAI,CAACC,KAAK,UAAY,CAAA,EAAC,aAAW,IACnCL,EAAA,MAAA,CACEwZ,MAAO,CACL7Q,SAAU,GACVqd,QAAS,GACTC,cAAe,WACjB,EAAE9lB,SACH,MAAA,CAEI,CAAC,CAAA,CACJ,CAAA,CACE,EACRgB,EAAA,OAAA,CAAAhB,UACEH,EAAA,IAAA,CAAAG,SAAG,gDAAA,CAAsD,EACzDH,EAAA,MAAA,CAAKe,MAAM,sBAAqBZ,SAC7B,CACC,CACEzC,MAAO,eACPkP,MAAO,kBACPsZ,OAAQhD,EAAAA,EAEV,CACExlB,MAAO,eACPkP,MAAO,eACPsZ,OAAQ9C,EAAAA,EAEV,CACE1lB,MAAO,eACPkP,MAAO,eACPsZ,OAAQC,EAAAA,CACT,EACD7kB,IAAI,CAAC,CAAE5D,MAAAA,EAAOkP,MAAAA,EAAOsZ,OAAAA,CAAAA,IAAa,CAC5B5c,MAAAA,EACJ7I,EAAW+G,SAAS4e,oBAAsB1oB,GACzCA,IAAU,gBACT,CAAC+C,EAAW+G,SAAS4e,kBACzB,OACEjlB,EAAA,QAAA,CAAmBJ,MAAOuI,EAAU,UAAY,GAAGnJ,UACjDH,EAAA,QAAA,CACEC,KAAK,QACLwI,KAAK,sBACL/K,MAAAA,EACA4L,QAAAA,EACAP,SAAiBrJ,GAAA,CACR8H,EAAAA,SAAS4e,kBAAoB1mB,EAAEyJ,OAAOzL,KAC/C,CAAA,CACD,EAAE,IACHsC,EAAA,MAAA,CAAKoK,IAAK8b,EAAQ3lB,IAAI,GAAG8J,MAAM,KAAK8J,OAAO,IAAA,CAAM,EAAE,IACnDnU,EAAA,OAAA,CAAAG,SAAOyM,CAAAA,CAAY,CAAC,GAXVlP,CAYL,CAAA,CAEV,CACE,CAAA,EACJgoB,EAAU9nB,OAAS,EAClBoC,EAAA,KAAA,CAAIe,MAAM,iBAAiBwB,IAAKwjB,EAAoB5lB,SACjDulB,EAAUlK,OAAO6K,OAAO,EAAE/kB,IAAI,CAACglB,EAAU7jB,IAAM,CAE9C,MAAM6J,EAAMZ,OAAOG,OAAOya,CAAQ,EAAErE,KAAK,GAAG,EACtC,CAAEhiB,KAAAA,CAASqmB,EAAAA,EACb,GAAA,CAACjB,GAAeplB,CAAI,EAAU,OAAA,KAC9B,GAAA,CAAEI,KAAAA,EAAMmD,MAAAA,EAAO8hB,SAAAA,CAAAA,EAAaD,GAAeplB,CAAI,EAC/C,OAAA,OAAOuD,GAAU,aACXA,EAAAA,EAAM8iB,EAAU7jB,CAAC,GAEvB,OAAO6iB,GAAa,aACXA,EAAAA,EAASgB,EAAU7jB,CAAC,GAE7B,OAAOpC,GAAS,aACXA,EAAAA,EAAKimB,EAAU7jB,CAAC,GAGvBtB,EAAA,KAAA,CAAAhB,SAAA,CACEH,EAACI,EAAI,CAACC,KAAAA,CAAAA,CAAa,EACnBc,EAAA,OAAA,CAAMJ,MAAM,gBAAeZ,SAAA,CACzBH,EAACkkB,GAAS,CAAA/jB,SAAEqD,CAAAA,CAAiB,EAC5B8hB,GACCnkB,EAAAC,EAAA,CAAAjB,SAAA,CACG,IACDH,EAAA,QAAA,CAAOe,MAAM,mBAAkBZ,SAAEmlB,CAAAA,CAAgB,CAAC,CAAA,CAClD,CACH,CAAA,CACG,EACNnkB,EAAA,OAAA,CAAMJ,MAAM,mBAAkBZ,UAC5BH,EAAA,SAAA,CACEC,KAAK,SACLc,MAAM,cACN4C,SAAUlB,IAAM,EAChBvC,QAASA,IAAM,CACb,MAAMqmB,EAAetI,MAAMuI,KAAKvpB,EAAOyoB,SAAS,EAChD,GAAIjjB,EAAI,EAAG,CACT,MAAMgkB,EAAOxpB,EAAOyoB,UAAUjjB,EAAI,CAAC,EACtBA,EAAAA,EAAI,CAAC,EAAI6jB,EACtBC,EAAa9jB,CAAC,EAAIgkB,EAClBxpB,EAAOyoB,UAAYa,CACrB,CACF,EAAEpmB,SAEFH,EAACI,EAAI,CAACC,KAAK,WAAWE,IAAI,SAAA,CAAW,CAAA,CAC/B,EACRP,EAAA,SAAA,CACEC,KAAK,SACLc,MAAM,cACN4C,SAAUlB,IAAMijB,EAAU9nB,OAAS,EACnCsC,QAASA,IAAM,CACb,MAAMqmB,EAAetI,MAAMuI,KAAKvpB,EAAOyoB,SAAS,EAChD,GAAIjjB,EAAIxF,EAAOyoB,UAAU9nB,OAAS,EAAG,CACnC,MAAM6oB,EAAOxpB,EAAOyoB,UAAUjjB,EAAI,CAAC,EACtBA,EAAAA,EAAI,CAAC,EAAI6jB,EACtBC,EAAa9jB,CAAC,EAAIgkB,EAClBxpB,EAAOyoB,UAAYa,CACrB,CACF,EAAEpmB,SAEFH,EAACI,EAAI,CAACC,KAAK,aAAaE,IAAI,WAAA,CAAa,CAAA,CACnC,EACRP,EAAA,SAAA,CACEC,KAAK,SACLc,MAAM,cACNb,QAASA,IAAM,CACD0lB,EAAA,CACVU,SAAAA,EACAI,cAAejkB,CAAAA,CAChB,CACH,EAAEtC,SAEFH,EAACI,EAAI,CAACC,KAAK,SAASE,IAAI,MAAA,CAAQ,CAAA,CAC1B,CAAC,CAAA,CAUL,CAAC,GAjEA+L,CAkEL,CAAA,CAEP,CAAA,CACC,EAEJnL,EAAA,MAAA,CAAKJ,MAAM,yBAAwBZ,UACjCH,EAAA,IAAA,CAAAG,SAAG,mDAAA,CAAoD,EACvDgB,EAAA,IAAA,CAAAhB,SAAA,CAAG,wBAEDH,EAAA,KAAA,EAAK,EACK,aAAC,IACXA,EAAA,IAAA,CACEiE,KAAK,IACL/D,QAAgBR,GAAA,CACdA,EAAE+O,eAAe,EACjBxR,EAAOyoB,UAAY,CACjB,CACEzlB,KAAM,WAAA,EAER,CACEA,KAAM,eAAA,CACP,CAEL,EAAEE,SACH,oCAAA,CAEE,EAAE,IAAI,QAEX,CAAA,CAAG,CAAC,CAAA,CACD,EAEPH,EAAA,IAAA,CAAGe,MAAM,gBAAeZ,SACrBulB,EAAU9nB,QAAU0mB,IAClB,OAAMA,EAAgB,YAAA,CACxB,EACHnjB,EAAA,IAAA,CACEqY,MAAO,CACLxP,QAAS,OACT2c,eAAgB,gBAChBC,WAAY,QACd,EAAEzmB,UAEFH,EAAA,SAAA,CACEC,KAAK,SACLc,MAAM,QACNb,QAASA,IAAM4lB,EAAoB,EAAI,EAAE3lB,SAC1C,eAAA,CAEO,EACRgB,EAAA,SAAA,CACElB,KAAK,SACL0D,SAAU+hB,EAAU9nB,QAAU0mB,GAC9BpkB,QAASA,IAAM0lB,EAAY,EAAI,EAAEzlB,SAAA,CAEjCH,EAACI,EAAI,CAACC,KAAK,MAAA,CAAQ,EAAE,IAAAL,EAAA,OAAA,CAAAG,SAAM,cAAA,CAAkB,CAAC,CAAA,CACxC,CAAC,CAAA,CACR,CAAC,CAAA,CACA,EACLwlB,GACC3lB,EAACc,GAAK,CACJC,MAAM,QACNb,QAAgBR,GAAA,CACVA,EAAEyJ,SAAWzJ,EAAEmnB,eACjBjB,EAAY,EAAK,CAErB,EAAEzlB,SAEFH,EAAC8mB,GAAY,CACXR,SAAUX,EAASW,SACnBI,cAAef,EAASe,cACxBlY,SAAUA,CAAC,CAAE0L,OAAAA,EAAQ6M,KAAAA,CAAAA,IAAW,CACtBpoB,WACR1B,YAAqB0oB,EAAA,aAAA,EAAAzL,EAEdjd,EAAA,UAAA,KAAAid,CAAA,CAEP,EACF,QAAA,IAAA0L,EAAA,EAAA,CAAA,CACAjlB,CAAgC,CAAA,EACjCklB,GAAA7lB,EAAAc,GAAA,CACI,MAGPd,QACEe,QAAMrB,GAAA,YACUA,EAAA,eACVA,EAA8B,EAAA,CAElC,EACF,SAAAM,EAAAgnB,GAAA,CAAE7mB,UAAAA,EAGAulB,QAAAA,IAAAA,EAAAA,EAAAA,CAAAA,CACA/kB,CAAwC,CAAA,CAAE,CAC3C,CAAA,CAEJ,CAGP,MAAAsmB,GAAA,IAAA,GAEMA,MAAuB,IAAA,CACvBC,KAAAA,CAEI,MAAApqB,CAAEA,EAAAA,EAAAA,EAAM,OAAQA,EAAA,GAAA,MAAA,KAAA,CACtB,EAAOA,CAET,OAAAmqB,EAAA,CAAA,EAEA,SACFH,GAAA,CAEA,SAAAtY,EACEA,SAAAA,EACA7K,SAAAA,EACA2iB,cAAAA,EACAI,QAAAA,CAAAA,EACA/lB,SACC,MAAAqN,EAAA,CAAA,CAAAsY,EACO3nB,CAAAA,GAAwB,EAAA/B,GAAA0pB,GAAA,YAAAA,EAAA,OAAA,IAAA,EAC1BtY,CACN,MAAAlR,CACM,EAAAuB,EAAA,EAAEvB,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,SAAAA,EAAc,CAAAqc,EAAAC,CAAA,EAAAxc,EAAA,CAAA,CAAA,EAEhB,CAACkO,EAAmBqc,CAAsB,EAAAvqB,EAAA,CAAA,CAAA,EAChDd,EAAcsd,IAAAA,EACd,SAAyB+N,CACzBrrB,GAAAA,IAAgB,OAEZ,GAAIsrB,CAAwBrc,EAAA,SAAA,EACxB,MAAA2O,EAAA,MAAAwN,KACFnc,EAAAA,KAAoB,CAAAwJ,EAAAL,IAAAK,EAAA,MAAA,cAAAL,EAAA,KAAA,CAAA,EACdiF,EAAAA,CAAQ,EACdA,EAAW,SAAIjF,CACfkF,MAAc,CACdrO,EAAW,OAAS,EAEpB3O,MACA2O,SAAAA,CACF,GAAAqc,IAAA,UAGW,GAAA,CACX,MAAoB3D,EAAA,MAAAH,KAAW6D,EAAA1D,CAAA,CAC/B,MAAI,CAAA,CACF,IACA0D,EAAAA,CAAAA,CAAAA,CAAAA,EAAwB,QACdtrB,IACVO,OAAAA,EAAAA,KACF,GAAA4R,GAAAoZ,GAAArC,GAAAqC,CAAA,EAAA,CACC,MAAAC,EAAAC,EAAA,QACDF,GAAYA,CAAA,EAAA,QAAA,CAAA,CAEVE,KAAAA,EACNxrB,KAAAA,CACE,IAAgBsrB,CAEd,QAAqBrrB,EAAAA,cAAAA,UAAAA,CAAAA,IAAAA,EACTqrB,GAAAA,EAAanV,CAAAA,IAAWxJ,IAAAA,WAAMxI,EAAAA,QAAAA,EAAAA,CAAAA,IAAAA,KACxCsnB,EAAcF,MAAAA,EAAoB5e,CAAA,EAG9B8e,CAAAA,CAAiD,CAEjDA,EAAM7pB,CAAAA,EAAAA,IACRyD,EAAA,MAAA,CACF,GAAA,yBAAA,MACD,QACH,SAAA,CAAA,CAAA,CAAAR,GAAAX,EAAA,SAAA,CACEgO,KAAUoZ,SAEd,oBACU,QAAAzmB,EAA+B,SAAAX,EAAAI,EAAA,MACpC,GACC,CAAa,CAAA,CAAA,EAAeJ,EAAA,SAAA,CAAcE,SAASS,EAAAA,KAAAA,CAAQR,YACpD,OAAA,MAAA,WAAA,CAAA,CAAA,CAAM,CAAA,EAAKH,EAAA,OAAA,CAGpBA,SAAA,KAAAG,SACEgB,EAAA,OAAA,CAAAhB,MAA4C,SAAAT,GAAA,CAE9CM,EAAAA,eAAA,EAAe,MAAA8G,EAAA,IAAA,SAAApH,EAAA,MAAA,EACbyB,EAAA,CAAA,EACOmmB,EAAAA,QAAAA,CAAAA,EAAAA,IAAAA,GACYhb,CAAA,EAAA5O,GAAA,YAAAA,EAAA,OAEE4O,IAAA,aACjB4N,EAAa5N,CAAA,EAAa5M,EAAAA,CAAEyJ,EAAM,QAAA,eAAA,EAAA,EAAA,QAAA,OAAA,EAAA,EAClC+Q,KAAgBA,EAAA5N,CAAA,EAAA,QAAA,YAAA,EAAA,EAEd4N,CAAO5N,EACP4N,SAMEA,EAAAA,CACF,OAAAA,EACD,KAAAlM,EAAA,OAAA,KACD5R,CAAQuC,EACRe,EAAA,OAAYO,QAAMunB,EAAA,IAAA,EACT7mB,GAAA,MAAAA,IACPuZ,EACA6M,SAAM/Y,OAAW,CACnB,SAAC7M,EAAA,QAAA,CAECgI,SAAa,CAAAnJ,EAAA,OAAA,CACfwnB,SAAAA,UACA7mB,CAAU,EAAAQ,EAAA,SAAA,CACZ,SAAA,GAAEhB,SAAAA,EAEFA,YACE,CAAAA,EACET,EAAA,OAAA,KAAA,CAAM,EACNyB,aAAA6M,EAAAsY,EAAA,KAAA,OACEmB,KAAQ,OACR9jB,SAAAA,CAAAA,EAAAA,SAAAA,EAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,SAAAA,SAEiBjE,SAAAA,IAAShC,CAC1B,CAAA,CAAA,CAAA,CAAA,CACAgqB,CAAAA,CAAyCpiB,CAAAA,CAC9BnF,CAAAA,GAAAA,GAAAA,EAAAA,GAAAinB,CAEX,IAFWjnB,YAAAA,EAEX,MAFWA,YAAAA,EAAAA,KAAAA,EAEK,CACfokB,CACC,KAAArL,EAAoB/Y,KAAAA,EAAiB,KAAAF,EACrC,YAAA+kB,EACK,QAAAE,EAGZH,YAAAA,CACE,IAAQtc,IAAAA,OAAMxI,EAAAA,IAAAA,CAAM+kB,SAAAA,EAAAA,QAAAA,CAAaE,SAAAA,CAAAA,EAAAA,OAAAA,CAASD,SAAAA,MAAAA,CAAkB,EAAAjlB,EAAA,SAAA,WAEzD,SACE,CAAAilB,EAAA9kB,YACE2K,IAAA,UAAA3K,aACE6N,EAAAsY,EAAA,GAAA,OAAAnmB,SAAMgZ,EAAA,IAAA7b,GAAA0C,EAAA,SAAA,CACNA,MAAA1C,EAAA,GACO,SAAAA,EAAA,KAAA,GACM2nB,CACXthB,CAAAA,CAAkC,CAClC+jB,CAAuCpiB,CAAAA,EAGjB7H,OAAU+F,SAC/BrC,EAAA,QAAA,CAAA,SACM,CAAAnB,EAAA,OAAA,CACJ,SAAAkZ,CAAA,CACN,EAAA,IAAAlZ,EAAA,QAAA,CAEP,KAAAC,EAEA,KAAAwI,EACEtI,YAAAA,EACEA,SACEH,IAAA,QAAA,CAAAilB,EAAA9kB,SAAAA,EAAkB,KAClBH,IAAA,UAAA,6BAAA,KACEC,YAAAA,MACAwI,eAAAA,MACAuc,WAAAA,GACAyC,QAAAA,CAA8BxC,CAC9BthB,EAAAA,IAAAA,WAAAA,EAAAA,OAAAA,GAAAA,EAAAA,WAAAA,CACArG,GAAAA,6BAKAqqB,SAAYC,EAAA,IAAAC,GAAA7nB,EAAA,SAAA,CACG,MAAA6nB,EAAA,IAAA,CACH,CAAA,CAAA,CACZ3C,CAAAA,CAAAA,CAAiB,CAIf,CAAA,GAAa/jB,EACVymB,SAAAA,CACC,YAAmBnf,SAAAA,CAAAA,KACpB,SAAA,MAEJ,QAAA,SACE9E,GAAAmH,IAAA,UACN,SAAAkD,EAAA,OAAA,KAAA,CAIT7M,EAAAA,GAAAnB,EAAA,SAAA,CAAAG,KAAAA,SAEIF,MAAK,eACLc,QAAM,IAAA,CACN4C,EAAAA,iBAAkC+iB,EAAA,CAAA,EAAUvmB,GAAAA,MAAAA,GAGtC,EAGJF,SAAK,QAAA,CAAA,CACLc,CAAM,CAAA,CAAA,CAEJ9D,CAAOyoB,CACP/kB,CAAU,CAAA,CAAA,CACZ,CAAA,CACD,SAAAqmB,GAGF,CAAA,UAAAtB,EACM,QAAA/kB,CACL,EAAA,OACD,MACJmnB,EAAAxX,GAAA,IAET,CAAAoV,GAEwBA,CAAAA,EAAAA,OAAAA,OAAAA,EAAAA,OAAW/kB,GAAWonB,GAAAA,8BAAA,KAAA,UAAArC,EAAA,OAAA,OAAA,CAAA,CAAA,EACtCoC,CAAAA,CAAAA,CAAAA,EACA,CAACpC,EAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EAAkB,CAAAsC,EAAAC,CAAA,EAAArrB,EAAA,SAAA,EACnBsrB,EAA2BtqB,GAAAA,IAAAA,CAAe,GAAA,CAAAuqB,EAC9C,OAAAF,aAGEvC,KAEJ,GAAM,CACAwC,MAAAA,EAAAA,KAAAA,MAAAA,GAAAA,kCAAwCC,CAAA,CAAA,EAC5C,GAAwB,CAAA,MAAA,QAAAC,CAAA,EACtBH,MAAAA,IAAAA,MAA0B,cAAA,EACnB,OAAAA,EAAA,SAAA,EACTG,CACI,MAAA,CACF,GAAA,CAII,MAAOlK,EAAAA,KAAc,MAAAiK,CAAA,EAAS,GAAA,CAAA,cAAwBC,CAAA,EAC1DH,MAAAA,IAAAA,MAA0B,cAAA,EACnBG,OAAAA,EAAAA,SAAAA,EACKA,CAGR,MAAA,CACIA,OAAAA,EAAcC,OAAAA,EACTnK,IAAuB,CAClC+J,CACA,EAAOG,CAAAA,CAAAA,CAAAA,IACKnrB,EAAA,UAAA,OAAA,EACZgrB,OAAAA,EAAAA,MAAAA,CACO,GAAA,0BACT,MAAA,QACF,SAAA,CAAA,CAAA,CAAAtnB,GAAAX,EAAA,SAAA,CACEmoB,KAAAA,SACEG,MAAAA,cAEN,QACE3nB,EAAQ,SAAAX,EAAAI,EAAA,CAAgC,KAAA,GAAA,EAEpC,CAAA,EAAaJ,EAAA,SAAA,CAASe,SAAMI,EAAA,KAAA,CAAuBR,SAAAA,CAAAA,iBAAAA,EAAAA,QAAAA,CAAQR,yBAC9C,SAAA,WAAA,CAAK,CAAA,CAAA,CAGpBH,CAAA,CAAAG,EAAAA,EAAAA,OACE,CAAA,SAAA,KACgB,SAAa,CAAAgB,EAAA,UAAA,CAAA,SAAmB,CAAAA,EAAA,KAAA,CAAiB,SAAA,CAAAnB,EAAAI,EAAA,CAC7D,KAAA,oBAENe,KAAA,IAAe,MAAA,eAAA,CAAIhB,EAAAA,IACjBgB,EAAA,OAAA,CAAAhB,SACEgB,QAAA,CAAAhB,CAAAA,CACO,CAAA,EAACE,EAAK,IAAA,CAAA,SAAyBL,EAAA,QAAA,CAAIe,KAAM,OAAiB,KAC/Df,SAAAG,YAAM,uBAAa,MAAA,QAErBH,QAAAN,GAAA,CAAAS,EACET,EAAA,OAAA,KAAA,CACO,CAAA,CAAA,CACA,CAAA,EACLslB,CAAY,CAAAkD,GAAA,MAAA,QAAAA,CAAA,GAAA/mB,EAAAC,EAAA,CAAA,SACN,CAAAD,EAAA,IAAA,CACN+G,SAAgB,CAAAlI,EAAA,IAAA,CACON,SAAAA,EAAc,MAAA,CACrC,EAAA,YAAAwoB,EAAA,OAAA,EAAA,IAAA,GAAA,IAAA/mB,EAAA,QAAA,CACD,MAAA,gBAEA+mB,SAAAA,CAAAA,IAAAA,EACaA,OAAAA,cAAAA,CACZ,CAAA/nB,CAAAA,CACE,CAAAA,EAAAA,EAAAA,KACEH,CAAA,6BAAkC,SAAKkoB,EACdtqB,IAAAA,qBAAmB,KAAI,CACzCmD,SAAM,CAAAf,EAAA,OAAA,QAEL,QAAA0lB,EAAA,KAAA9F,GAEA,OAAA,KAAAA,CAAA,EAAA,MAAAtT,GAAAsT,EAAAtT,CAAA,IAAAga,EAAAha,CAAA,CAAA,CACP4b,EAAAA,EAAAA,CACC/nB,EAEIqZ,SAAO,GAAA,CACLwM,EAAAA,EAAAA,QAAyBpG,SAAAA,CAAAA,GAAAA,EAAAA,IAAAA,EAAAA,EAAAA,OAAAA,QAAAA,MAAAA,KAAAA,GAAAA,EAAAA,GAAAA,EAAAA,IAAAA,IAAAA,YAAAA,EAAAA,MAAAA,YAAAA,EAAAA,KAAAA,EAAAA,CAAAA,CAEvBlU,KAAAA,EAEA,KAAAjD,EAIJ,KAAAxI,CACD,IAAAqmB,EAAA7d,CAAA,EAAAtH,EAAAC,EAAA,CAGDD,SAAA,CAAAA,EAAA,OAAA,OACGqjB,8BAGItL,SAAAA,CAAAA,EAAAA,IAAAA,IAAAA,IAAAA,WAAAA,EAAAA,CAAAA,IAAAA,KAAAA,IAAAA,IAAAA,EAAAA,CAAAA,CAAAA,CAAMzQ,CAAAA,EAAAA,GAAAA,CAAAA,CAAMxI,EAAAA,KAAAA,CAAAA,CAAAA,CAAK,CAEhB,CAAAE,EAAAA,CACE,CAAA,EAAAgB,EAAMJ,IAAM,CAAA,SAA6B,CAAAf,EAAA,QACjC,CAKY,SACT,+BAAA,CAAA,EAAAA,EAEX,KACP,CAAA,CAAA,EAAAA,EAAA,QAAA,CAAA,SACI,wDAAA,CACL,CACL,CAAA,CACC,CACJmB,CAAAhB,CAAAA,EAAAA,IACE,SAAAH,EAAA,IAAA,CAAA,MAAO,QAA6B,SAC/BA,EAAA,SACL,SAAO,4BAAA,CAAA,CAEC,CAAA,EACNmB,EAAA,IAAA,CACJ,SAEa,CAAAmnB,KACjBlnB,EAAA,CAAS,SAAA,CAAApB,EAAA6D,GAAA,CAAO1D,aACd,+BAAO,WAAAH,EAAA,MAAA,CAAiC,MAAA,SAG5CmB,SAAA,wEAAA,CACGmnB,EACCnoB,QACEH,IAAY,CACG,MAAAuoB,EAAAL,EAAA,OAAA5B,GAAA,CAAArpB,EAAA,UAAA,KAAA2iB,GAEA,OAAA,KAAAA,CAAA,EAAA,MAAAtT,GAAAsT,EAAAtT,CAAA,IAAAga,EAAAha,CAAA,CAAA,CAAS,CAAA,EAGf,GAAA,CAAAic,EAAA,OAAA,IAEQ,4BAAA,EAMb,MAE4B3I,CAEtBlU,IAAAA,EAAe8c,CAAAA,GACZlc,EAAQsT,UAAK,GAAetT,CAC/B,EAAA,MAENmc,EAAAC,EAAA,OAAApE,GACImE,IACF9d,EAAsC+d,EAAA,MAAA,EAAApE,EAAA,GAExCrnB,EAAA,UAAAyrB,EACA/d,KACY+a,oCACWpB,EAAA,kCAAA,oBAAA,EAEjBmE,GAAAA,MAAAA,GACN,EAEiBC,SAAAA,EAAAA,SAAAA,CACjB,KAAA,SACAzrB,MAAOyoB,SACP/a,SACE8d,CACKP,EAGG,SAAA,kBAAA,CACZ,CAAE/nB,CAAAA,EAAAA,GAAAA,CAEF,CAAA,EAAAH,EACO6D,GAAA,CAAA,aACCykB,EAAA,8BAAA,oBAAA,kBACKJ,EAAAA,SAAAA,OAAAA,QACZ,IAAA,CAEDjrB,EAAQ,UAAAirB,KACQ,oBAAA,EAGtBloB,GAAAA,MAAAA,GACE+D,EAKAC,SAAAA,EAAAA,wBAEE/G,MAAOyoB,SACP/a,SAAU,CAAoBud,EACpB,SAAAI,EAAA,eAAA,SAAA,CACZ,CAAA,CAAEnoB,CAAAA,CAEF,CAAA,CAAA,CACO,CAAA,EAAAgB,EACC,UAAA,CAAA,YACK+mB,KAAAA,CAAwB/nB,SAAAA,CAAAA,KAEa,KAC1C,kBACI,KAAA,IACZ,MAAA,eAAA,CAENgB,EAAAA,IAAAnB,EAAA,OAAA,CAAAG,SACEgB,QAAA,CAAAhB,CAAAA,CACO,CAAA,EAACE,EAAK,IAAA,CAAA,SAAuBL,EAAA,QAAA,CAAIe,MAAM,CAAmB,MAC/Df,MAAM,EAAa,KAAA,OAErBA,MAAA8nB,EAAA3nB,YAEIqZ,QAAO9Z,GAAA,CAAE2K,GAAO3K,EAAA,OAAA,MACX,CAAAA,EAAA,OAAA,SACEooB,GAAAA,CACC,UAAA,UAAA,UAAApoB,EAAA,OAAA,KAAA,KACQ,kBAAA,CACV,MAAUhC,CAAOiN,GAAA,0BAAA,CACrBjL,EAEI,CACFqF,CAAAA,CACA4F,CAAAA,EAAAA,EAAAA,IAAAA,CAA4B,YAClB,SAAA,CACVvO,KAAAA,SACAuO,MAAAA,SACF,SAAA,CAAAmd,EACF,QAAA,IAAA,CACD,GAAA,CAEH3mB,UAAA,UAAA,UAAA2mB,CAAA,EAAA3nB,GACEgB,0BAAA,CACO,MAAA,CACCwJ,GAAA,kCAAA,IAGA,SAAA,CAAA3K,EAAAI,EAAA,CACQ2X,KAAAA,WACVpN,CAAAA,EAAAA,IAAAA,EAAU,OAA0B,CACtC,SAAY,MACVvO,CAAAA,CAAAA,CACAuO,CAAAA,EAAAA,KAAAA,iCAA4C,UAAA9L,EAAA,iCAAA,WAAA,YAAAA,EAAA,eAAA,CAC9C,KAAAipB,CAAA,KACF3mB,EAAA,SAAA,CAAEhB,KAAAA,SAEG,MAAM,SAAW,SAAIH,CAAAA,EAAA,QAAM,IAAA,CAAW,GAAA,CACnC,UACEgY,MAAAA,CAEF8P,KAAAA,CAAAA,CAEN3mB,CACO,MAAA,CACC,MAAA,+BAAA,IAGA,SAAA,CAAAnB,EAAAI,EAAA,CACF2E,KAAAA,OAAgB,CAAA,EAAA,IACR+iB,EAAAA,OAAAA,CAAAA,SACP,OAAA,CAAA,CACH,CACE1rB,CAAAA,EAAAA,IAAAA,EAAe,OAAA,GAAA+E,EAAA,QAAA,CACfiI,MAAAA,gBACF,SAAA,CAAA0e,EAAA,OAAA,aAAA,CAAA,CACF,CAAA,CAAE3nB,CAAAA,EAAAA,CAAAA,CAAAA,GAEGgB,EAAA,UAAA,CAAA,SAAM,CAAAnB,EAAA,UAAA,CAAO,MAAIA,gBAAA,SAAMA,EAAA,QAAA,CAAY,SAAA,oBAAA,CAEzC,CAEH,CAAA,EAAaA,EAAA,WAAA,CAAeG,MACzB2nB,CAEJ,MAAA,MAED,EACA3nB,KAAAA,GACWY,SAAM,GAAeZ,SAC5BH,KAAA,UAAA0lB,EAAA,OAAA,OAAA,EAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAO,CAAA,CAAA,CAAyB,CAAC,CAAA,CAEnC,CAAA,CAAA,CAAiB,CAAA,CAAS,CC56BxChnB,GAAUzB,EAAqB0rB,GAAA,CAC7B,SAAW,CAAC1nB,EAAQ4X,EAAMnb,EAAOkrB,CAAS,IAAKD,EAEzC,SAASzlB,KAAK2V,CAAI,GAAK,CAACnb,GAChBoP,IAGhB,CAAC,EAED,SAAwB+b,IAAS,qBACzBpoB,MAAAA,EAAaC,GAAYzD,CAAM,EAC/B6rB,EAAWC,KACXpb,EAAWC,KAEjB,OACEzM,EAAAC,EAAA,CAAAjB,SAAA,CACG,CAAC,CAACM,EAAWZ,aACZG,EAACc,GAAK,CAAAX,SACJH,EAACgpB,GAAO,CACN9M,cACE,OAAOzb,EAAWZ,aAAgB,UAC9BY,EAAWZ,YAAYqc,gBACvBlX,EAAAA,OAAOikB,cAAPjkB,YAAAA,EAAoBkX,gBAAiB,KAE3CgN,aACEjsB,EAAAA,EAAO4C,cAAP5C,YAAAA,EAAoBisB,eACpBlkB,EAAAA,OAAOikB,cAAPjkB,YAAAA,EAAoBkkB,aACpB,KAEFnN,cACE9e,EAAAA,EAAO4C,cAAP5C,YAAAA,EAAoB8e,gBACpB/W,EAAAA,OAAOikB,cAAPjkB,YAAAA,EAAoB+W,cACpB,KAEFpb,QAAsB8R,GAAA,CACd,KAAA,CAAE0W,UAAAA,EAAWpsB,SAAAA,EAAUkD,KAAAA,CAAAA,EAASwS,GAAW,CAAA,EACjDxV,EAAO4C,YAAc,GACrBmF,OAAOikB,YAAc,KACjBE,IACKC,EAAAA,mBACGze,GAAA,CACRuO,KAAM,CACJmQ,KAAM,gCACNC,MAAO,8BACPC,KAAM,6BAAA,EACNtpB,GAAQ,MAAM,EAChBupB,MAAO,IACPrR,SAAU,IACVjY,QAAoBupB,GAAA,CAClBA,EAAMC,UAAU,EAChBzsB,EAAO0sB,aAAehc,EAEpB5Q,EAAAA,EACK,IAAGA,CAAS,MAAKosB,EAAU1rB,EAAG,GAC9B,MAAK0rB,EAAU1rB,EAAG,EACzB,CACF,CAAA,CACD,EAEL,CAAA,CACD,CACI,CAAA,EAER,CAAC,CAACgD,EAAWmpB,cACZ5pB,EAACc,GAAK,CACJH,QAASA,IAAM,CACb1D,EAAO2sB,aAAe,EACxB,EAAEzpB,SAEFH,EAACoH,GAAQ,CACPzG,QAASA,IAAM,CACb1D,EAAO2sB,aAAe,EACxB,CAAA,CACD,CACI,CAAA,EAER,CAAC,CAACnpB,EAAWopB,cACZ7pB,EAACc,GAAK,CACJH,QAASA,IAAM,CACb1D,EAAO4sB,aAAe,EACxB,EAAE1pB,SAEFH,EAACuB,GAAQ,CACPZ,QAASA,IAAM,CACb1D,EAAO4sB,aAAe,EACxB,CAAA,CACD,CACI,CAAA,EAER,CAAC,CAACppB,EAAWqpB,aACZ9pB,EAACc,GAAK,CACJC,MAAM,QACNJ,QAASA,IAAM,CACb1D,EAAO6sB,YAAc,EACvB,EAAE3pB,SAEFH,EAACwa,GAAY,CACXhY,UAAS/B,EAAAA,EAAWqpB,cAAXrpB,YAAAA,EAAwB+B,UAAW/B,EAAWqpB,YACvD/sB,UAAU0D,EAAAA,EAAWqpB,cAAXrpB,YAAAA,EAAwB1D,SAClC4D,QAASA,CAAC,CAAEopB,YAAAA,CAAY,EAAI,KAAO,CACjC9sB,EAAO6sB,YAAc,EAKvB,CAAA,CACD,CACI,CAAA,EAER,CAAC,CAACrpB,EAAWupB,YACZhqB,EAACc,GAAK,CACJH,QAASA,IAAM,CACb1D,EAAO+sB,WAAa,EACtB,EAAE7pB,SAEFH,EAACib,GAAM,CAACta,QAASA,IAAO1D,EAAO+sB,WAAa,EAAA,CAAS,CAChD,CAAA,EAER,CAAC,CAACvpB,EAAWwpB,gBACZjqB,EAACc,GAAK,CACJZ,QAAgBR,GAAA,EAEZA,EAAEyJ,SAAWzJ,EAAEmnB,eACfnnB,EAAEyJ,OAAOZ,UAAU2Z,SAAS,OAAO,KAEnCjlB,EAAOgtB,eAAiB,GAE5B,EAAE9pB,SAEFH,EAACigB,GAAU,CACT5D,iBAAkB5b,EAAWwpB,eAAe5N,iBAC5Ctf,SAAU0D,EAAWwpB,eAAeltB,SACpCojB,MAAO1f,EAAWwpB,eAAe9J,MACjCD,SAAUzf,EAAWwpB,eAAe/J,SACpCvf,QAASA,IAAM,CACb1D,EAAOgtB,eAAiB,EAC1B,CAAA,CACD,CACI,CAAA,EAER,CAAC,CAACxpB,EAAWypB,uBACZlqB,EAACc,GAAK,CACJC,MAAM,QACNJ,QAASA,IAAM,CACb1D,EAAOitB,sBAAwB,EACjC,EAAE/pB,SAEFH,EAACylB,GAAiB,CAChB9kB,QAASA,IAAO1D,EAAOitB,sBAAwB,EAAA,CAChD,CACI,CAAA,EAER,CAAC,CAACzpB,EAAWid,qBACZ1d,EAACc,GAAK,CACJC,MAAM,QACNJ,QAASA,IAAM,CACb1D,EAAOygB,oBAAsB,EAC/B,EAAEvd,SAEFH,EAACqd,GAAe,CACdtgB,SAAU0D,EAAWid,oBAAoB3gB,SACzCyY,yBACE/U,EAAWid,oBAAoBlI,yBAEjC7U,QAASA,IAAO1D,EAAOygB,oBAAsB,EAAA,CAC9C,CACI,CAAA,EAER,CAAC,CAACjd,EAAW8hB,cACZviB,EAACc,GAAK,CACJC,MAAM,QACNJ,QAAgBjB,GAAA,CACdzC,EAAOslB,aAAe,EACxB,EAAEpiB,SAEFH,EAAC6e,GAAa,CACZte,IAAKE,EAAW8hB,aAAahiB,KAAOE,EAAW8hB,aAC/C5Y,MAAMlJ,EAAAA,EAAW8hB,eAAX9hB,YAAAA,EAAyBkJ,KAC/BhJ,QAASA,IAAM,CACb1D,EAAOslB,aAAe,EACxB,CAAA,CACD,CAAA,CACI,CACR,CAAA,CACD,CAEN,CCrMA,SAAS4H,GAAqB,CAAE3a,UAAAA,EAAWzG,SAAAA,CAAS,EAAG,CAC/C,KAAA,CAAEjM,MAAAA,GAAUuB,EAAI,EAChB,CAACyM,EAASC,CAAU,EAAInO,EAAS,SAAS,EAC1C,CAACwtB,EAAcC,CAAe,EAAIztB,EAAS,IAAI,EAC/C,CAACoZ,EAAcqB,CAAe,EAAIza,EAAS,IAAI,EAE/C0tB,EAAkBtU,IAAiB,KAEzC,OACE7U,EAAA,IAAA,CAAGJ,MAAM,yBAAwBZ,UAC/BH,EAAA,SAAA,CACEC,KAAK,SACL0D,SAAUmH,IAAY,WAAawf,EACnCpqB,QAASA,IAAM,CACb6K,EAAW,SAAS,EACpBsf,EAAgB,QAAQ,GACvB,SAAY,CACP,GAAA,CACIhhB,MAAAA,EAAM,MAAMvM,EAAMM,GAAGmtB,eACxBvnB,QAAQwM,CAAS,EACjBgb,YACC,GAAA,EAACnhB,GAAAA,MAAAA,EAAKgN,YACF,MAAA,IAAIoU,MAAM,6BAA6B,EAE/CpT,EAAgBhO,CAAG,EACVN,GAAA,MACC,CAAA,CACV3M,WAAe,CAAA,IAEjB2O,EAAoB,SACnB,QAAA,CACL,EAAA,IAAA/K,EAAA,SAAA,CAAEG,KACH,SAEO,SACRH,IAAA,WAAAsqB,EACErqB,MAAK,eACL0D,QAAAA,KACMoH,EAAA,SAAA,IACS,QAAA,GACbA,SAAoB,CACpBsf,GAAAA,CACa,MAAAhhB,EAAA,MAAAvM,EAAA,GAAA,eAAA,QAAA0S,CAAA,EAAA,SACP,GAAAnG,GAAA,MAAAA,EAAA,WACIA,MAAAA,IAAM,MAAMvM,6BACP0S,EAGH6H,GAAuC,EAC/CtO,GACAsO,MAAAA,CACStM,EAAA,SAAA,EAET3O,IACA2O,EACF,SAAA,QAAA,CAAA,EACF/K,EAAG,OAAA,CACL,MAAA,wBAAEG,SACHmqB,GAAAF,EAAAA,IAAA,SAAApqB,EAAAI,EAAA,CAGDJ,KAAA,eAAY,IAAA,kCAGD,CAAA,EAAMA,EAAAI,EAAA,CAAeG,KAAI,WAAWQ,IAAM,WAE/Cf,MAAAA,iBAAK,CAAA,EAAMA,EAAAqY,GAAA,CAAW9X,OAAIuK,IAAA,SAAA,CAAA,CAAiB,CAAiB,CAAA,CAGvD,CAAA,CAAqB,CC5DtC,MAAM4f,GAAqB,CACzB3e,QAAS,UACTM,OAAQ,eACRJ,OAAQ,SACRC,OAAQ,SACRC,eAAgB,aAChBH,UAAW,QACXI,KAAM,OACNzH,OAAQ,SACR,eAAgB,eAChB,eAAgB,iBAClB,EAiBMgmB,GAAc,CAClB5e,QAAS,+BACTM,OAAQ,oBACRJ,OAAQ,qBACR,iBAA8B2e,GAAA,WAAUA,CAAM,kBAC9CC,aAAc,sBACd3e,OAAQ,gBACRC,eAAgB,2BAChBH,UAAW,mBACX,oBAAiC4e,GAAA,SAAQA,CAAM,kBAC/CE,gBAAiB,oBACjB1e,KAAM,iDACN,YAAa,qCACb,aAAc,sCACdzH,OAAQ,8CACR,mBAAoB,6BACpB,2BACGimB,GAAA,mBAAkBA,CAAM,kBAC3B,yBAA0B,8BAC1B,gBAAiB,aACjB,eAAmCzpB,GAAAA,EAAAC,EAAA,CAAAjB,SAAA,CAAE,YAAU4qB,CAAa,CAAA,CAAG,CACjE,EAEMC,GAAgB,GAEtB,SAASre,GAAa,CACpBlO,aAAAA,EACA1B,SAAAA,EACAkuB,SAAAA,EACAC,mBAAAA,CACF,EAAG,aACK,KAAA,CAAEztB,GAAAA,EAAI4O,OAAAA,EAAQ7J,QAAAA,EAAS2oB,OAAAA,EAAQC,UAAAA,EAAWC,UAAAA,CAAc5sB,EAAAA,EAC1D,GAAA,CAAEwB,KAAAA,CAASxB,EAAAA,EAGT6sB,MAAAA,GAAejf,GAAAA,YAAAA,EAAQJ,SAAUI,EACjCkf,EAAiBD,GAAAA,YAAAA,EAAc7tB,GAE/BmE,EAAiBH,GAAMI,QAAQC,IAAI,gBAAgB,EACnD+P,EAASjQ,KAAmBY,GAAAA,YAAAA,EAAS/E,IACrC+tB,GAAUnf,EAAAA,GAAAA,YAAAA,EAAQD,OAARC,YAAAA,EAAcof,MACxBC,EACJ,CAAC,EAACrf,GAAAA,MAAAA,EAAQsf,sBACVtf,GAAAA,YAAAA,EAAQsf,sBAAuB/pB,KAC/ByK,EAAAA,GAAAA,YAAAA,EAAQ7J,UAAR6J,YAAAA,EAAiB5O,MAAOmE,EAE1B,IAAIgqB,EAAY,EACZC,EAAe,EACnB,GAAI5rB,IAAS,mBAAoB,CAC/B,UAAWuC,KAAW4oB,GAChB5oB,EAAAA,EAAQ8b,SAAR9b,MAAAA,EAAgB4a,SAAS,cAC3BwO,KAEEppB,EAAAA,EAAQ8b,SAAR9b,MAAAA,EAAgB4a,SAAS,WAC3ByO,IAGA,CAACA,GAAgBD,IAAkB3rB,EAAA,aACnC,CAAC2rB,GAAaC,IAAqB5rB,EAAA,SACzC,CAEIiZ,IAAAA,EAuBA,GAtBAjZ,IAAS,OACXiZ,EAAOyR,GAAY9Y,EAAS,YAAc2Z,EAAU,aAAe,MAAM,EAEzEvrB,IAAS,UACTA,IAAS,aACTA,IAAS,oBAELorB,GAAAA,YAAAA,EAAWztB,QAAS,EACf+sB,EAAAA,GAAa,GAAE1qB,CAAK,UAAS,EAC3ByrB,EACFf,EAAAA,GAAa,GAAE1qB,CAAK,QAAO,EAElCiZ,EAAOyR,GAAY1qB,CAAI,EAEhB0qB,GAAY1qB,CAAI,EACzBiZ,EAAOyR,GAAY1qB,CAAI,EAIvBiZ,EAAQ,+BAA8BjZ,CAAK,IAGzC,OAAOiZ,GAAS,WAAY,CACxB0R,MAAAA,GAAQS,GAAAA,YAAAA,EAAWztB,UAAUwtB,GAAAA,YAAAA,EAAWxtB,QAC9C,GAAIgtB,EACF1R,EAAOA,EAAK0R,CAAK,UACR3qB,IAAS,eAAgB,CAClC,MAAM8qB,EAAgBI,GAAAA,YAAAA,EAAQJ,cAC1BA,IACK7R,EAAAA,EAAKlZ,EAACiD,GAAQ,CAACT,QAASuoB,EAAee,WAAU,EAAE,CAAA,CAAC,EAE/D,CACF,CAEI7rB,GAAAA,IAAS,WAAa,CAACoM,EAElB,OAAA,KAGH0f,MAAAA,EACJttB,EAAaoS,WAAa,IAAIvR,KAAKb,EAAaoS,SAAS,EAAEmb,iBAEvDC,EACJ,CACE,mBAAoB,oBACpBjgB,UAAW,YACXC,OAAQ,cACRC,OAAQ,cAAA,EACRjM,CAAI,GAAK,WACPisB,EAA4BA,IAAM,CACtCjvB,EAAOygB,oBAAsB,CAC3BpI,QAAS2W,EACTzqB,SAAU4pB,EACVxN,cAAe3d,IAAS,mBACxBuV,yBAA0BvV,IAAS,SAAW,CAAC,YAAY,EAAI,CAAA,CAAA,CACjE,EAGMksB,OAAAA,EAAAA,MAA6B1tB,CAErC,mCACEwB,CAAA,GACEc,yBACA,SAAsBtD,IACtB6E,SAAS,CAAAtC,EAAA,MAAA,CAAGG,MAAAA,kCAEZF,CAAA,GACEc,MAAQgrB,EACRvoB,SAAOuoB,IAAAA,mBAAAA,EAAAA,EAAAA,CAEN9rB,SAAAA,CAAAA,EAAAA,EACCkB,CAAAhB,KAAAA,SACQE,KAAK,KAASC,IAAKL,EAAKM,MAAKN,aAAAA,CAAAA,EAAYD,EAAAI,EAAA,CAC/CJ,KAAAA,QAAMK,KAAK,KAAQC,IAAKL,EAAKM,MAAKN,gBAAAA,CAAAA,CAAMc,CAAM,CAAA,EAAmBf,EAAAI,EAAA,CAGnEJ,KAAAA,GAAKC,CAAA,GAAA,eACHI,KAAMqqB,KACNpqB,IAAKL,CAAA,CAAA,CACAA,CAAAA,EACNkB,EAAA,MAAA,CAGLA,MAAAA,uBAAKJ,SAAM,CAAAd,IAAA,WAAAkB,EAAAC,EAAA,UACC,CAAAD,EAAA,IAAA,CACRhB,SACEgB,CAAAA,CAAAA,eAAA,KAAAlB,CAAA,GAAAD,EAAAoB,EAAA,CAAAjB,UACIirB,GAAA,YAAAA,EAAA,QAAoBnrB,EAAIkB,IACxB,CACGiqB,SAAAA,CAAAA,EAAAA,IAAoB,CACnBjrB,SACEgB,IAAGmB,QAAS4pB,EAAIhsB,SAASgsB,CAAAA,EAAAA,OAAAA,CAA0B/rB,MAAAA,EACjD,OAAMqD,SAAiB5F,GAAAA,EAAAA,MAAAA,CAAAA,CAAOuC,EAAAA,IAAAA,QACbirB,CAAiB,CAAA,EAC1B,GAAA,CAEV,CAAA,IAAQhqB,EAAA,CAGVD,SAAA,CAAAnB,EAAAiD,GAAA,CAAA9C,QAAAA,EACYqC,WAAAA,EAAAA,CAAAA,EAA4B,GAAA,CAAA,CAAA,CAAO,CAAA,EAC7C0W,EAAAjZ,IAAA,WAAAkB,EAAA,OAAA,CAIP+X,MAAAA,gBAEOnY,SAAM,CAAA,IAAA,IAAA,IAAAf,EAAAosB,GAAA,UACT3tB,EACC,UAEAoM,cAAuBgG,CAAAA,CACvBwb,CAAO,CAAA,CAAO,CACd,CAAA,EAELpsB,IAAA,kBAAAD,EAAAmqB,GAAA,CACA,UACO3nB,EAAA,EACa,CAAA,CAACgN,CAAmB/R,CAAAA,GAC1C2tB,GAAA,YAAAA,EAAA,QAAA,GAAAjqB,EAAA,IAAA,CAGJiqB,MAAAA,gBACIrqB,SAAM,CAAAqqB,EAAA,MAAA,EAAAJ,EAAA,EAAA,IAAAjZ,GAAA5Q,EAAAmrB,EAAA,CAAensB,SACrBirB,CAAAA,EAAAA,IAAgB,CACNjrB,KAAAA,EACP,IAEE8D,0BACAoF,MAAI,uBACJtI,QAAMrB,GAAA,kBACU,EACdA,EAAiB,YAAAqS,CACjB9U,EACF,SAAA,CAAA+C,EAAA4C,GAAA,CAAEzC,IAAAA,EAEDyC,aACCC,KAAaC,EAAAA,QAAAA,GAAAA,MAAAA,EAAAA,OAAAA,GAAAA,KAAAA,EAAAA,OAAAA,GAAAA,IAAAA,EAAAA,OAAAA,GAAAA,IAAAA,IACbxC,OACY1C,EAAAA,WACN,KAAAmU,SAUNxR,SAAQiC,GAAAA,YAAAA,EAAoB,GAAiB,IACnCA,EAASoO,EAAAA,IAAAA,oBAAAA,EAAAA,MAAAA,OAFNnT,oBAKRsD,SAAMgR,EAAA,OAAA,IAAAwa,GAAAvsB,EAAAI,EAAA,UACYH,EAEjBI,KAAMqqB,IACNpqB,MAAK,GAAAisB,CAAA,OAAA,CACLxrB,CAAAA,CAAe,CAAA,CAAO,CAEzB,EACEgR,EACN,EAAA,EAAA,GAAA,CAAA,EApCIvP,EAAAA,EAAQ/E,CAqCZ,EAAA0D,EAAK,SAAA,MAvCa1D,SA2CvBwC,MAAK,cACLc,QAAMmrB,EACNhsB,SAASgsB,CAAAA,EAAAA,OAAAA,IAAAA,IAAAA,EAAAA,OAAAA,EAAAA,GAAAA,EAAAA,EAAAA,CAA0B/rB,KAAAA,cAI9B,CAAA,CAACE,CAAK,CAAA,CAAc,CAAG,CAAA,GACrBgrB,GAAA,YAAAA,EAAA,QAAA,GAAArrB,EAAA,KAAA,CAGZqrB,MAAAA,8BACKtqB,SAAMsqB,EAAA,IAAAmB,GAAAxsB,EAAA,KAAA,UACGsB,EAAAA,GAAK+K,CACdlM,MAAAA,2BACgBF,CAAA,GACZc,GAAAA,eAAuC,EAAA,GAAA,MAAAyrB,EAAA,EAAA,GACvCroB,SACcnE,EAAAysB,GAAY,CACzBtsB,OAEDH,EAAQqM,KAAQA,GAAAA,CAAAA,CAAa,CAAA,CAAK,EACrBmgB,EAAA,EAAA,CAAA,CAAA,CAAC,EAAAngB,IACd,EACLgf,GAAA,MAAAA,EAAA,UAAAA,GAAA,YAAAA,EAAA,SAAA,IAAArrB,EAAA0sB,GAAA,CAGJrgB,MAAAA,4BAA4CzO,GAEzCmD,GAAAA,cAAuC,GAAA,MAAAwqB,CAAA,GACvCpnB,cAEUpH,EAiBF,OAjB+B2C,GAAA,CAGvCitB,MAAAA,EACEjtB,EAACwrB,OAAAA,cACU,SAAA,EACL,GAAA7B,EAAa3pB,CACb,GAAUA,EAAA,QAER,OAAeA,EAAA,eAAA,EACfA,EAAiB,cAAA,IAAA,WAAA,cAAA,CACZktB,QAAAA,EAAAA,QAEDC,QAASntB,EAAEmtB,OAAAA,CAAAA,CACXC,CAAWA,CAGjB,EACF,SACAxnB,EAAAA,EAAAA,GAAAA,CACLnF,OAEA8qB,EACS5e,KAAQif,GAAAA,CAAAA,EAAmBtrB,EAAAysB,GAAA,CAEnCzsB,SAAOurB,EAACrL,KAAUqL,GAAAA,CAAAA,CAAqB,CAAA,CAAG,CAAE,CAAA,CAC7C,CAEJ,CAAA,CACG,CAGZ,SAAAmB,GAAAK,EAAA,CAEA,MAAAxqB,OACE,SAAYyqB,EAAa,CACzB,GAAAD,EAAY,iBAAKA,cAAO,IAAAxqB,CAAe,CAAcA,CAAAA,CACvD,MAAA/F,GAAAA,GAAAmQ,EAAA,ECrUAsgB,GAAezwB,GAAK,UAA+B,CACjD,GAAI,EAAE,kBAAmBuI,WAAmB,OAAA,KAEtCtE,MAAAA,EAAaC,GAAYzD,CAAM,EAC/B,CAAEiwB,kBAAAA,CAAsBzsB,EAAAA,EAEtB9B,CAEF,GAAAlB,EAAEA,YAAAA,CAAAA,EAAI0vB,GAAAA,CAAAA,KAAsCC,CAAA,EAAAxwB,EAAA,EAAA,EAClD4jB,GAAO6M,IAAAA,CAEP7M,GAAAA,CAAAA,GAAAA,CAAAA,EACM,OAAqB,KAAA,CACnB,SAAApQ,CAAA,EAAYA,EAAAA,EAAwB,CACpC,MAAAtT,EAAEA,SAAAA,CAAOC,EAAAA,EAAAA,cAAiB,CAC9BowB,EACDG,EAAAld,IAAArT,EACDX,EAAmB+wB,EAAAI,GAAAJ,CAAA,EAAA1mB,GAAA,GAAE0mB,SAAAA,CAAa/c,MAAAA,EAAAA,MAAAA,EAAAA,GAAAA,cAAAA,QAAAA,CAAAA,EAAAA,QAAiBrT,GAAAA,GAAAA,EAAAA,CAAU,MAAAgY,EAAAvS,EAAA,aAEvDA,KAAAA,EAGO,OAAA6J,EACL5N,QAAAA,CACN,IACErC,EAAgC,CAAA,CAAA,SAAA,cAAA,sBAAA,EAAEqB,EAAAA,IAAAA,UAAAA,CAAAA,EAAAA,GAAAA,MAAAA,EAAAA,IAAIgB,EAAAA,CAAAA,EAAAA,GAAAA,MAAAA,EAAAA,IAAc+D,EAAAA,CAAAA,EAAAA,GAAAA,MAAAA,EAAAA,IAASgrB,GAAAF,EAC7DrwB,eACM,QAAAwwB,EAAExtB,SAAAA,CAAAA,EAAuBwtB,GAAAA,CAAAA,GAAAA,GAAAA,EAAwBhvB,EAAAA,CACvD,GAAAhB,EACA,QAAA+E,EACMkrB,aAAAA,EACAC,aAAAA,CACN,CAAA,EAGaF,EACT1wB,SAAUgY,KAAAA,IAAAA,CAAAA,MAAAA,EAAAA,EAAAA,GACZyY,EACS3sB,SAAAA,KAAAA,IAAaysB,CAAAA,QAA2C,EAAA,GAM/D7vB,SAAAA,KAAAA,gBAEAgB,CACA6uB,IACD,EAAA,CAAA7vB,EACI0vB,CAAA,CAAA,EACL3M,GAAe,IAAA,CAEb7S,MAAAA,EAAiBigB,GAAmB,CAAe,MAGnDjgB,KAAAA,EAAgE,GAC3DkgB,EAELlgB,YAASmgB,CAAO,GAClBF,GAAA,YAAAA,EAAA,OAAA,GACF3tB,IAAA,iBACKhD,EAAA,kBAAA,CACG2O,GAAAA,EACV,YAAAmiB,CAAA,EAIJvN,EAEE,+BAAiC,iBAAA,UAAAwN,CAAA,EACvBrvB,IAAAA,CACF,UAAA,cAAA,oBAAA,UAAAqvB,CAAA,CAAA,CAAE/tB,EAAAA,CAAAA,CAAAA,EAAMxC,GAAI0vB,IAAAA,CAAY,2BAAWrmB,eACzC,wBAA6B,CACA,EAAA,CAAA,CAAA,EACzBrJ,GACA0vB,GAAAA,CACFzwB,IAAA,2BAAA,gBACF,UAAA,cAAA,CAEFN,CAAAA,EACU8I,MAAAA,EAAAA,IAAAA,CACVkoB,EAAa,EAAA,EACXhxB,EAAAA,kBAA6C,KACnC8I,wBAAkC,KAAA,SAAA,IAAA,IAC9C,SAAA,KAAA,iBAGFsb,EACE,GAAA6M,EAA8B,CAC5BtoB,KAAAA,CACF,GAAA8oB,YAEFpyB,aAAAA,EACMiB,aAAAA,CACFN,EAAAA,EACA2I,OAAAA,EAAUkpB,GAAc,CAC1B,MAAA,QACD,QAAAvuB,GAAA,YAEqBA,EAAA,eACpB0tB,GAIA,EACEzf,SAAgBxM,EAAA,MAAA,CAClB,MAAA,QACF,SAAA,KAE2B,SAAA,CAAAnB,EAAA,SAAA,CACnB,KAAA,SAAEvC,MAAAA,cAAI+E,QAAAA,EAAS/D,SAAAA,EAAAA,EAAAA,CAAc6uB,KAAAA,GAAAA,CAAiBD,CACpD,CAAA,IACQ,SAAA,CACE,SAAArtB,EAAA,IAAA,UACU,cACd,CAAIN,CACFiB,CAAQ,EAAAQ,EAAA,OAAA,CACV,SAAA,CAAA,CAAAmsB,GAAAttB,EAAA,IAAA,CACF,SAAA,+CAAA,CAAEG,EAAAA,QAEF,CAAW,MAAA,oBAAiB,QAAAT,GAAA,CAAIS,KAC9BH,CAAa,OAAAmJ,CAAe,EAAAzJ,GAAuBiB,EAAAA,OAAAA,UAAAA,UAAAA,EAAAA,OAAAA,UAAAA,MAAQR,GACzC,EAElBH,SAAAA,EAAA2M,GAAA,CAAAxM,WACE,YAAG,aAAA1B,EAAe,SAAA,EAAA,CAEpB0C,CAAA,CACG,EAAAnB,EAAA,MAACstB,CACAntB,MAAG,CAELH,UAAA,KACQ,EAINE,SAAgBiB,EAAA+C,EAAA,CACR,GAAA,iBAAEiF,MAAAA,eAAO,QAAIzJ,EAEnB,SAAawuB,CAAAA,EAAAA,OAAAA,CACH,SAAA,wBAAA,CACV,EAAA,IAAAluB,EAAAI,EAAA,CACF,KAAA,aAAA,CAAED,CAAAA,CAEW,CAAA,CACOguB,CAClB1vB,CAAAA,CAAAA,CAAAA,CAAAA,CACQ,CAAA,CACT,CAAC,CAEJ,CACS,OAAA,IACM,CACb,ECjKR2vB,GAAaC,GAAW,CAACtB,EAAOxqB,IAAQ,CACtC,KAAA,CAAExF,SAAAA,GAAasB,EAAI,EACnB,CAACiwB,EAAcC,CAAe,EAAIC,GAAgB,EAClD,CAACC,EAAgBC,CAAiB,EAAI9xB,EAAS,EAAK,EACpD,CAAC2oB,EAAOoJ,CAAQ,EAAI/xB,EAAS0xB,EAAaxsB,IAAI,GAAG,GAAK,EAAE,EACxD7B,EAAOquB,EAAaxsB,IAAI,MAAM,EAC9BwlB,EAAUzrB,EAAO,IAAI,EAErB+yB,EAAiB/yB,EAAO,IAAI,EAClCgzB,OAAAA,GAAoBtsB,EAAK,KAAO,CAC9BusB,SAAqBpxB,GAAA,CACnBixB,EAASjxB,CAAK,CAChB,EACA4P,MAAOA,IAAM,CACXshB,EAAe7yB,QAAQuR,OACzB,EACAyhB,OAAQA,IAAM,CACZH,EAAe7yB,QAAQgzB,QACzB,EACAC,KAAMA,IAAM,CACVJ,EAAe7yB,QAAQizB,MACzB,CACA,EAAA,EAGA7tB,EAAA,OAAA,CACEoB,IAAK+kB,EACLvmB,MAAM,2BACNyN,SAAiB9O,GAAA,OAIf,GAHAA,EAAE+O,eAAe,EAEI,WAAWvL,KAAKyK,SAASmgB,IAAI,EAEhD,GAAIvI,EAAO,CACT,MAAMzZ,EAAS,CACbiL,EAAGwO,CAAAA,EAEDtlB,IAAM6L,EAAO7L,KAAOA,GACxBsuB,EAAgBziB,CAAM,CAAA,MAEtByiB,EAAgB,CAAE,CAAA,OAGhBhJ,EACOuI,SAAAA,KAAQ,aAAYmB,mBAAmB1J,CAAK,CAAE,GACrDtlB,EAAQ,SAAQA,CAAK,GAAI,EAC1B,GAED0N,SAASmgB,KAAQ,WAIrBf,EAAAA,GAAAA,YAAAA,EAAOve,WAAPue,MAAAA,EAAAA,KAAAA,EAAkBrtB,EACpB,EAAES,UAEFH,EAAA,QAAA,CACEuC,IAAKqsB,EACLlxB,MAAO6nB,EACP9c,KAAK,IACLxI,KAAK,SAEL+kB,YAAY,SACZpN,IAAI,OACJsX,aAAa,MACbvH,YAAY,MACZwH,eAAe,MACfC,SAAiB1vB,GAAA,CACVA,EAAEyJ,OAAOzL,OACZ6wB,EAAgB,CAAE,CAAA,CAEtB,EACArmB,QAAgBxI,GAAA,CACLA,EAAAA,EAAEyJ,OAAOzL,KAAK,EACvBgxB,EAAkB,EAAI,CACxB,EACAW,QAASA,IAAM,CACbX,EAAkB,EAAI,CACxB,EACAY,OAAQA,IAAM,SACZ/wB,WAAW,IAAM,CACfmwB,EAAkB,EAAK,GACtB,GAAG,GACNpH,GAAAA,EAAAA,EAAQvrB,UAARurB,YAAAA,EACIvnB,cAAc,gCADlBunB,MAAAA,EAEI/e,UAAU1D,OAAO,QACvB,EACA0qB,UAAkB7vB,GAAA,OACV,KAAA,CAAE4M,IAAAA,CAAQ5M,EAAAA,EAChB,OAAQ4M,EAAG,CACT,IAAK,SACHoiB,EAAkB,EAAK,EACvB,MACF,IAAK,OACL,IAAK,YAEH,GADAhvB,EAAE+O,eAAe,EACbggB,EAAgB,CAClB,MAAMe,EAAYlI,EAAQvrB,QAAQgE,cAChC,4BACF,EACA,GAAIyvB,EAAW,CACb,IAAIC,EAAWD,EAAUE,mBAClBD,KAAAA,GAAYA,EAASxzB,QAC1BwzB,EAAWA,EAASC,mBAElBD,IACOlnB,EAAAA,UAAUqL,IAAI,OAAO,EACbqK,MAAMuI,KACrBiJ,EAASE,cAAcxvB,QACzB,EAAEqb,OAAe7P,GAAAA,IAAO8jB,CAAQ,EACvBxd,QAAgBtG,GAAA,CACpBpD,EAAAA,UAAU1D,OAAO,OAAO,CAAA,CAC5B,EACH,KACK,CACL,MAAM+qB,EAAYtI,EAAQvrB,QAAQgE,cAChC,sBACF,EACI6vB,GACQrnB,EAAAA,UAAUqL,IAAI,OAAO,CAEnC,CACF,CACA,MACF,IAAK,KACL,IAAK,UAEH,GADAlU,EAAE+O,eAAe,EACbggB,EAAgB,CACZe,MAAAA,EAAYtzB,SAAS6D,cACzB,4BACF,EACA,GAAIyvB,EAAW,CACb,IAAIK,EAAWL,EAAUM,uBAClBD,KAAAA,GAAYA,EAAS5zB,QAC1B4zB,EAAWA,EAASC,uBAElBD,IACOtnB,EAAAA,UAAUqL,IAAI,OAAO,EACbqK,MAAMuI,KACrBqJ,EAASF,cAAcxvB,QACzB,EAAEqb,OAAe7P,GAAAA,IAAOkkB,CAAQ,EACvB5d,QAAgBtG,GAAA,CACpBpD,EAAAA,UAAU1D,OAAO,OAAO,CAAA,CAC5B,EACH,KACK,CACCkrB,MAAAA,EAAW7zB,SAAS6D,cACxB,iCACF,EACIgwB,GACOxnB,EAAAA,UAAUqL,IAAI,OAAO,CAElC,CACF,CACA,MACF,IAAK,QACH,GAAI6a,EAAgB,CACZe,MAAAA,EAAYtzB,SAAS6D,cACzB,4BACF,EACIyvB,IACF9vB,EAAE+O,eAAe,EACjB+gB,EAAUQ,MAAM,GAElBtB,EAAkB,EAAK,GACvB3B,EAAAA,GAAAA,YAAAA,EAAOve,WAAPue,MAAAA,EAAAA,KAAAA,EAAkBrtB,EACpB,CACA,KACJ,CACF,CAAA,CACD,EACDM,EAAA,MAAA,CAAKe,MAAM,iBAAiB9E,OAAQ,CAACwyB,GAAkB,CAAClJ,EAAMplB,SAC3D,CAAC,CAAColB,GACD,CACE,CACE3Y,MACEzL,EAAAC,EAAA,CAAAjB,SAAA,CAAE,cACWH,EAAA,IAAA,CAAAG,SAAIolB,CAAAA,CAAS,CAAC,CAAA,CACzB,EAEJphB,GAAK,aAAY8qB,mBAAmB1J,CAAK,CAAE,iBAC3CtpB,OAAQ,WAAWiH,KAAKqiB,CAAK,CAAA,EAE/B,CACE3Y,MACEzL,EAAAC,EAAA,CAAAjB,SAAA,CAAE,qBACkBgB,EAAA,OAAA,CAAAhB,SAAA,CAAM,IAAEolB,EAAM3f,QAAQ,KAAM,EAAE,CAAC,CAAA,CAAO,CAAC,CAAA,CACzD,EAEJzB,GAAK,IAAGpH,CAAS,MAAKwoB,EAAM3f,QAAQ,KAAM,EAAE,CAAE,GAC9C3J,OACE,KAAKiH,KAAKqiB,CAAK,GAAK,WAAWriB,KAAKqiB,CAAK,GAAK,KAAKriB,KAAKqiB,CAAK,EAC/D0K,IAAK,KAAK/sB,KAAKqiB,CAAK,EACpBtlB,KAAM,MAAA,EAER,CACE2M,MACEzL,EAAAC,EAAA,CAAAjB,SAAA,CAAE,WACQH,EAAA,OAAA,CAAAG,SAAOolB,CAAAA,CAAY,CAAC,CAAA,CAC5B,EAEJphB,GAAK,IAAGohB,CAAM,GACdtpB,OAAQ,CAAC,WAAWiH,KAAKqiB,CAAK,EAC9B0K,IAAK,WAAW/sB,KAAKqiB,CAAK,EAC1BtlB,KAAM,MAAA,EAER,CACE2M,MACEzL,EAAAC,EAAA,CAAAjB,SAAA,CAAE,iBACcH,EAAA,IAAA,CAAAG,SAAIolB,CAAAA,CAAS,CAAC,CAAA,CAC5B,EAEJphB,GAAK,aAAY8qB,mBAAmB1J,CAAK,CAAE,gBAC5C,CAAA,EAEAzL,KAAK,CAACvF,EAAGL,IACJK,EAAE0b,KAAO,CAAC/b,EAAE+b,IAAY,GACxB,CAAC1b,EAAE0b,KAAO/b,EAAE+b,IAAY,EACrB,CACR,EACA3uB,IAAI,CAAC,CAAEsL,MAAAA,EAAOzI,GAAAA,EAAIlI,OAAAA,EAAQgE,KAAAA,CAAAA,IACzBkB,EAAC+C,EAAI,CACHC,GAAAA,EACApD,MAAM,sBACN9E,OAAAA,EACAiE,QAAgBR,GAAA,QACdqtB,EAAAA,GAAAA,YAAAA,EAAOve,WAAPue,MAAAA,EAAAA,KAAAA,EAAkBrtB,EACpB,EAAES,SAAA,CAEFH,EAACI,EAAI,CACHC,KAAMJ,IAAS,OAAS,cAAgB,SACxCc,MAAM,oBAAA,CACP,EACDf,EAAA,OAAA,CAAAG,SAAOyM,CAAY,CAAA,EAAE,GAAG,CAAA,CACpB,CACP,CAAA,CACF,CAAC,CAAA,CACF,CAEV,CAAC,EC/ODsjB,GAAe1zB,GAAK,SAAuB,CAAEmE,QAAAA,EAAUA,IAAM,CAAC,CAAE,EAAG,CACjE,KAAM,CAACwvB,EAAYC,CAAa,EAAIxzB,EAAS,EAAK,EAC5CyzB,EAAgBx0B,EAAO,IAAI,EAEjCuD,GACE,IACOM,GAAA,CACL0wB,EAAc,EAAI,EAClB7xB,WAAW,IAAM,cACf8xB,GAAAA,EAAAA,EAAct0B,UAAds0B,YAAAA,EAAuB/iB,QAAvB+iB,MAAAA,EAAAA,KAAAA,IACAA,GAAAA,EAAAA,EAAct0B,UAAds0B,YAAAA,EAAuBtB,SAAvBsB,MAAAA,EAAAA,KAAAA,IACC,CAAC,CAAA,EAEN,CACE5hB,eAAgB,GAChB3O,gBAAwBJ,GAAA,CACtB,MAAM4wB,EAAe,WAAWptB,KAAKyK,SAASmgB,IAAI,EAC5CjtB,EAAW,CAAC,CAAC3E,SAAS6D,cAAc,sBAAsB,EAChE,OAAOuwB,GAAgBzvB,CACzB,CAAA,CAEJ,EAEA,MAAM0vB,EAAcA,IAAM,CACxBH,EAAc,EAAK,EACXzvB,GAAA,EAGVvB,OAAAA,GACE,MACOM,GAAA,UACL2wB,GAAAA,EAAAA,EAAct0B,UAAds0B,YAAAA,EAAuBrB,OAAvBqB,MAAAA,EAAAA,KAAAA,GACYE,GAAA,EAEd,CACEC,QAASL,EACTM,iBAAkB,GAClBhiB,eAAgB,EAAA,CAEpB,EAGEzO,EAAA,MAAA,CACEvC,GAAG,2BACHxB,OAAQ,CAACk0B,EACTjwB,QAAgBR,GAAA,CACdtD,EAAAA,SAAasD,EAAA,eACTA,GAEJ,EACF,SAAAM,EAAAouB,GAAA,CAAEjuB,IAAAA,EAGAoC,SAAK8tB,IAAAA,IAES,CAAA,CACd,CAAA,CAAA,CACD,CAAA,EC9CP,SAASK,IAAY,CACb,KAAA,CAAE3zB,SAAAA,GAAasB,EAAI,EACnBoC,EAAaC,GAAYzD,CAAM,EAC/B,CAAEyoB,UAAAA,EAAWle,SAAAA,CAAa/G,EAAAA,EAKhC,GAHI,CAACilB,EAAU9nB,QAIb4J,EAAS4e,oBAAsB,gBAC9B,CAAC5e,EAAS4e,mBAAqB5e,EAASmpB,qBAElC,OAAA,KAGT,MAAMC,EAAU/0B,IAEVg1B,EAAqBvgB,GACzB,IACEoV,EACGpkB,IAAI,CAACwvB,EAAKruB,IAAM,CACT,KAAA,CAAExC,KAAAA,EAAM,GAAG6G,CAASgqB,EAAAA,EACtB,GAAA,CAACzL,GAAeplB,CAAI,EAAU,OAAA,KAC9B,GAAA,CAAExC,GAAAA,EAAIob,KAAAA,EAAMrV,MAAAA,EAAO8hB,SAAAA,EAAUjlB,KAAAA,CAAAA,EAASglB,GAAeplB,CAAI,EAEzD,OAAA,OAAOxC,GAAO,aACXA,EAAAA,EAAGqJ,EAAMrE,CAAC,GAEb,OAAOoW,GAAS,aAClBA,EAAOA,EACL,CACE,GAAG/R,EACH/J,SAAU+J,EAAK/J,UAAYA,GAE7B0F,CACF,GAEE,OAAOe,GAAU,aACXA,EAAAA,EAAMsD,EAAMrE,CAAC,GAEnB,OAAO6iB,GAAa,aACXA,EAAAA,EAASxe,EAAMrE,CAAC,GAEzB,OAAOpC,GAAS,aACXA,EAAAA,EAAKyG,EAAMrE,CAAC,GAGd,CACLhF,GAAAA,EACAob,KAAAA,EACArV,MAAAA,EACA8hB,SAAAA,EACAjlB,KAAAA,CAAAA,CAEH,CAAA,EACAmb,OAAO6K,OAAO,EACnB,CAACX,CAAS,CACZ,EAEMoD,EAAWC,KACjB3pB,OAAAA,GAAW,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAG,EAAG,CAACM,EAAGqxB,IAAY,SACxE,MAAM5Q,EAAQnX,SAAS+nB,EAAQ7vB,KAAK,CAAC,EAAG,EAAE,EAAI,EAC1Cif,GAAAA,EAAQ0Q,EAAmBjzB,OAAQ,CAC/B,KAAA,CAAEib,KAAAA,CAAAA,EAASgY,EAAmB1Q,CAAK,EACrCtH,IACFiQ,EAASjQ,CAAI,GACb+X,GAAAA,EAAAA,EAAQ70B,UAAR60B,YAAAA,EAAiBI,YAAjBJ,MAAAA,EAAAA,KAAAA,GAEJ,CAAA,CACD,EAGC5wB,EAAA,MAAA,CAAKvC,GAAG,YAAW0C,SAChBM,EAAW+G,SAAS4e,oBAAsB,eACzCpmB,EAAA,MAAA,CACEe,MAAM,UACN4rB,cAAsBjtB,GAAA,CACpBA,EAAE+O,eAAe,EACjBxR,EAAOitB,sBAAwB,EACjC,EAAE/pB,SAEFH,EAAA,KAAA,CAAAG,SACG0wB,EAAmBvvB,IAClB,CAAC,CAAE7D,GAAAA,EAAIob,KAAAA,EAAMrV,MAAAA,EAAO8hB,SAAAA,EAAUjlB,KAAAA,GAAQoC,IAElCzC,EAAA,KAAA,CAAAG,SACEgB,EAAC+C,EAAI,CACHnD,MAAOukB,EAAW,eAAiB,GACnCnhB,GAAI0U,EACJ3Y,QAAgBR,GAAA,CACd,GAAIA,EAAEyJ,OAAOZ,UAAU2Z,SAAS,WAAW,EAAG,CAC5CxiB,EAAE+O,eAAe,EACjB,MAAMhB,EAAOvR,SAAS+Q,eAAgB,GAAExP,CAAG,OAAM,EACzCkB,GAAAA,EAAAA,CACR8O,EAAU,UAAA,EACRA,MAAiBwjB,EAAAxjB,EAAA,cAAA,iBAAA,EACXwjB,GAENA,EAAmB,MAAA,CAEnB,CACF,CACF,EACF,SAAA,CAAAjxB,EAAAI,EAAA,CAAED,KAAAA,EAEIE,KAAAA,KAAYC,IAAKkD,CAAA,CAAA,EAAUA,EAAAA,OAAAA,CACjCrC,SAAA,CAAAnB,EAAAkkB,GAAA,CAAA/jB,SACEH,CAAU,CAAA,EAAEwD,GAAAA,EAAAA,EAAAA,CAAiB,SAE3BrC,CAAAA,EAAAA,KAAA,CAAA,CAAA,EAAAnB,EAAA,QAAA,CAAAG,SACOmlB,CACL,CAAA,CAAAnlB,CAAQmlB,CAAAA,CAAQ,CAAS,CAAA,CAAA,CAE5B,CAAA,CACI,EACH,GAAA7iB,CAAA,IAAAhF,CAAA,IAAA+F,CAAA,IAAA8hB,CAAA,IAAAzM,CAAA,EAAA,CAAC,CACL,CAAA,CAGV,CAAA,EACE7Y,EAAAqD,GAAA,CAGNrD,YAAM4wB,EACJM,SAAaN,OACbjO,WAAS,QACTwO,cAAW,4BACXtO,IAAc,EACd3Y,SAAK,SACL0Y,WAAS5iB,EAAA,SAAA,CACTuD,KAAAA,SAEItD,GAAK,mBACLxC,MAAG,QACHsD,cAAMrB,GAAA,kBACgB,EACpBA,EAAiB,sBAAA,EACjBzC,EACF,kBAAAyC,GAAA,aAGM,KAAA,CACI,OAAAyJ,CAAEA,EAAAA,EAAWzJ,iBAAAA,CAAAA,EAAAA,gBAAAA,UACnBgf,GAAA7f,EAAA+xB,EAAqBznB,UAArB,YAAAtK,EAAqBsK,YAArB,MAAAuV,EAAA,KAAA7f,GAEA,MAAA,EACW,EACf,SAAAmB,EAAAI,EAAA,CAAED,KAAAA,WAEIE,KAAK,KAAWC,IAAK,WAAA,CAAA,CAAS,CAAA,EAAc,SAC5CuwB,EAAA,IAAA,CAAA,CACT1wB,GAAAA,EAE0B1C,KAAAA,EAAIob,MAAAA,EAAMrV,SAAAA,EAAO8hB,KAAAA,CAAUjlB,EAAAA,IAAcc,EAAA2hB,GAAA,CAClE,GAAAjK,EAEI1U,MAAI0U,kBAEJ9X,SAAM,CAAAf,EAAAI,EAAA,CAAiBD,KAAAA,EAEjBE,KAAAA,GAAAA,CAAAA,EAAiB,IAAAc,EAAA,OAAA,CAAK,MAC5BA,YAAMJ,SAAM,CAAAf,EAAA,OAAA,CAAWG,SACrBH,EAAAkkB,GAAA,CAAA/jB,UACY,CAAA,CAAEqD,CAAAA,EAAiB8hB,GAAAnkB,EAAAC,EAAA,CACzB,SAEJD,CAAAA,IAAAA,EAAA,QAAA,CAAA,MAAA,qBAESJ,SAAMukB,CAAA,CAAA,CAAoBnlB,CAAEmlB,CAAAA,CAAQ,CAAS,CAAA,EAEvDtlB,EAAA,OAAA,CAEHA,MAAA,yCAAMe,SAAM0B,EAAA,CAAA,CAAA,CAAwCtC,CAC7C,EACD,GAACsC,CAAA,IAAAhF,CAAA,IAAA+F,CAAA,IAAA8hB,CAAA,IAAAzM,CAAA,EAAA,CAAA,CACC,CAAA,CAEb,CAAA,CACI,CAIf,MAAArc,GAAAA,GAAAk0B,EAAA,ECpMO,SAASU,GAAYvlB,EAAQ,OAClC,IAAIwlB,EAAY,CAAA,EACZC,EAAa,CAAA,EACbC,EAAe,EACnB,QAAS9uB,EAAI,EAAGA,EAAIoJ,EAAOjO,OAAQ6E,IAAK,CAChC+uB,MAAAA,EAAO3lB,EAAOpJ,CAAC,EACjB+uB,EAAKvlB,QAAU,GAACulB,EAAAA,EAAKhvB,UAALgvB,MAAAA,EAAcvgB,QAChCqgB,EAAW/sB,KAAKitB,CAAI,EACpBD,MAEAF,EAAU9sB,KAAKitB,CAAI,EACfD,EAAe,IACFA,EAAA,GAGrB,CAIE1lB,GAAAA,EAAOjO,OAAS,KACf0zB,EAAW1zB,OAASiO,EAAOjO,OAAS,GAAK2zB,GAAgB,GAC1D,CAEA,MAAME,EAAeH,EAAWhwB,IAAK+K,GAAWA,EAAO5O,EAAE,EACzD,GAAI6zB,EAAW1zB,OAAUiO,EAAOjO,OAAS,EAAK,EAEhCyzB,EAAA,CACV,GAAGA,EACH,CAAE5zB,GAAIg0B,EAAcC,MAAOJ,EAAYrxB,KAAM,QAAA,CAAU,MAEpD,CAEL,MAAM0xB,EAAO3Y,KAAK4Y,MAAMP,EAAUzzB,OAAS,CAAC,EAC5CyzB,EAAY,CACV,GAAGA,EAAUQ,MAAM,EAAGF,CAAI,EAC1B,CACEl0B,GAAIg0B,EACJC,MAAOJ,EACPrxB,KAAM,QAER,EAAA,GAAGoxB,EAAUQ,MAAMF,CAAI,CAAC,CAE5B,CACON,OAAAA,CAAAA,KAEAxlB,QAAAA,CAEX,CAEgBimB,SAAAA,GAAaJ,EAAO30B,EAAU,CAC5C,MAAMg1B,EAAmBtwB,GAAMe,QAAQV,IAAI,kBAAkB,GAAK,GAC5DkwB,EAAgBN,EAAMlW,OAAiBgW,GAAA,CAC3C,GAAI,CAACA,EAAKvlB,OAAe,MAAA,GACzB,MAAMgmB,EAAa,GAAEl1B,CAAS,IAAGy0B,EAAKvlB,OAAOxO,EAAG,GAC1Cy0B,EAAYH,EAAiBE,CAAS,EACxCC,OAAAA,GAAaA,IAAcV,EAAK/zB,GAC1BmO,IAMHmmB,EAAAI,CAAA,EAAAX,EAAA,GAEP,GACA,CAAO,EACRtwB,EAAA,OAAA,KAAA6wB,CAAA,EAEK7wB,OAAAA,EAAAA,OAAcA,IAChBA,EAAAA,UAAkB,OAAA,EAAA,EAAA,QAAAoL,GAAA,CACpBpL,UAA8B,CAC5B,CAAA,EAEJO,GAAA,QAAA,IAAA,mBAAAswB,CAAA,EACMvvB,CACN,CACF,SAAA4vB,GAAAV,EAAA,CAEO,MAAAW,KACL,IAAAC,EAAmB,EACnBZ,EAAmB,QAAAF,GAAA,CACnBE,UAAwB,EAAAjvB,EAAA4vB,EAAA,OAAA5vB,IAAA,CACtB,GAAA4vB,EAAa5vB,CAAGA,EAAI4vB,KAAAA,UAAsBb,EAAA,EAAA,EACpCa,OAA2C,GAAAA,EAAA5vB,CAAA,EAAA,KAAA8vB,GAAAA,EAAA,KAAAf,EAAA,WAAA,GAAAa,EAAA5vB,CAAA,EAAA,KAAA8vB,GAAAA,EAAA,cAAAf,EAAA,EAAA,EAAA,CAC/Ca,KACY,MAAcE,EAGf9vB,MACT,CACF,CACF,MAAA+vB,EAAAd,EAAA,KAAAjvB,GAAAA,EAAA,KAAA+uB,EAAA,WAAA,EACAgB,IACAH,EAAiBC,GAAA,EAAA,CAAAd,EAAAgB,CAAA,EAC8B,CAC/C,EACF,QAAC/vB,EAAA,EAAAA,EAAA4vB,EAAA,OAAA5vB,IAID,QAAa4b,EAAA5b,EAAO4vB,EAAAA,EAAAA,SAAsBhU,IAChBgU,EAAAA,CAAAA,EAASz0B,QAAay0B,EAAAhU,CAAA,EAAA,SAAAkU,CAAA,CAAA,IAE5CF,EAAgB5vB,CAAA,EAAA,CAAA,GAAA4vB,EAAA5vB,CAAA,EAAA,GAAA4vB,EAAAhU,CAAA,CAAA,EACL5b,EAAAA,CAAC,EAAI4vB,EAAIA,CAAAA,EAAAA,OAAa,CAAGA,EAAShU,EAAEoU,IAAAA,EAAA,UAAAF,GAAAA,EAAA,KAAAf,EAAA,EAAA,IAAArR,CAAA,EAE7CkS,EAAS5vB,OAAK4vB,EAAAA,CAAAA,EAILzuB,KAIfyuB,EAAA,QAAAK,GAAA,CAGAL,UAA8Bne,IACpB4F,CAAAA,EAAAA,aAAe,CAAA5F,EAAA,YACC,IAAA,KAAA,EAAA,SAAgB,EAAA,IAAA,KAAAA,EAAA,SAAA,EAEtC,EAAA,cAAAA,EAAA,KACmCA,EAAA,cAAA,EAAA,IACA,CAAA,EAAA,YAC5Bye,GAAoBze,EAAA,YACA,IAAA,KAAA,EAAA,SAAA,EAAA,IAAA,KAAAA,EAAA,SAAA,EAApBye,CACA,CAA4C,CAAA,EAEvDN,EAAC,QAAAK,GAAA,CAGDL,MAAAA,EAA8BK,EAAA,CAAA,EAAA,QAAA,GAC5BA,EAA2BA,QAAAA,GAAAA,CAC3BA,UAA0B,KAAAE,IACpBpB,EAAAA,iBAAwC,GAClB,CAC1B,CAAA,CAAA,EAEHa,EAAA,OAE4B1zB,MAAAA,KAEvBk0B,EAAa,CAAA,EACnB,OAAAnB,EAAMoB,YACNpB,GAAMzf,SAAkB,CACtB4gB,EAAiB,KAAArB,CAAA,EACfqB,MACA,CACF,QAAApwB,EAAA,EAAAA,EAAA4vB,EAAA,OAAA5vB,IACA,GAAA4vB,EAAa5vB,CAAGA,EAAI4vB,KAAAA,UAAsBb,EAAA,EAAA,EAAA,CACpCa,GAAAA,EAAwBE,SAASf,CAAK/zB,EACpCq1B,OAAmC,MAAAC,EAAAV,EAAA5vB,CAAA,EACjCswB,EAAAA,KAAAA,CAAAA,OACOjZ,MAAAA,EAAAA,IAAMvF,KAASA,EAAA,SAAA,EACpBye,EAAQ,IAAI1zB,KAAKiV,EAAE1D,SAAS,EAClC,OAAcmiB,EAAAC,CACd,CAAA,EACF,MAACL,EAAAG,EAAA,CAAA,EAAA,QAAA,GACDF,EAA2BE,KAAAA,CAC3BF,GAAAA,EAAc,IAAAK,GAAAA,EAAA,EAAA,EACZz1B,MAAiB6D,EACjBowB,KAAOqB,EAAAA,MAAAA,GAAAA,EAAAA,QAAAA,KAAAA,CAAAA,EAAAA,SAAAA,cAAAA,CACP9yB,EAGF6yB,EAAC,KAAArwB,CAAA,EACDqwB,MACA,CAEJD,EAAA,KAAArB,CAAA,CACAqB,CAAAA,EACDA,CAED,CACF,eAAAM,GAAAzB,EAAA30B,EAAA,CAEsBo2B,MAAAA,EAAAA,MAAAA,KACd3P,GAAAA,CAAAA,EAAAA,OACN,OAA0B,KAAA,CACpB,mBAAA4P,CAAEA,EAAAA,EAAuBn2B,EAAAA,CAAAA,EA0B7B,GAzBM0B,EAAAA,kBACR,GAAM00B,SACN3B,OACE,KAASzlB,CAAQ,GAAAxO,EACX,QAAAumB,EAAEvmB,KAAAA,EAAAA,CAAAA,CAAIumB,EAAAA,IAAgBiO,GAAAx0B,EAAAV,CAAA,EAAG,IAAIy0B,EAAAA,EAAAA,CAAAA,IAAAA,MAAAA,EAAAA,OAC7B8B,OACFF,MAAAA,EAAAA,GAA0Bx1B,CAAAA,EAAQ,GAAA,CAAA21B,EAAA,QAAA,CAAA9P,EAAA,OAChC8P,OACN,MAAKA,EAAwB/P,EAAM5lB,OAAAA,CAAAA,EAAAA,MAAQ21B,EAAA,KAAAhB,GAAAA,EAAA,YAAA,IAAA1K,EAAA,KAAA,aAAA,GAAApE,EAAA,KAAA8O,GAAAA,EAAA,KAAA,YAAA,IAAA1K,EAAA,KAAA,YAAA,CAAA,IAC3C1K,EAAyBqG,KAAAA,EAAAA,IAAAA,EAKjBjf,GACN,CAAA,CAAA,EACO4Y,EAAAA,QACTkW,EAAK,KAAA,CACDG,KAAAA,EAEFH,KAAAA,EACE7B,aAAAA,CAAAA,CACA8B,CACcE,CAAAA,EAElBH,EAAA,OAAA,CACD,MAAA7xB,EAAA6xB,EAAA,IAAAzT,GAAAA,EAAA,KAAA,OAAA,UAEkC5I,GAAAxV,CAAA,EACjC,GAAA,CAAAyV,EACMA,OACNoc,EAAKpc,QAAAA,GAAAA,CAAe,KAAA,CAEpBoc,KAAAA,EACQ,KAAAC,EAAE9B,aAAAA,CAAM8B,EAAAA,EAAM9P,EAAAA,EAAAA,QAAAA,EAAAA,EAAiB5D,YACrCwT,EAAUnc,CAAmBzU,EAAAA,EAE3B4wB,CAAAA,CACF,CAAA,CAEJ,SAAAK,IAAA,CACFx2B,EAAA,mBAAA,EAEO,CClOQ,SAASy2B,GAAU,CAChCC,cAAAA,EACAC,kBAAAA,EAAoB,EACpBC,gBAAAA,EAAkB,EAClBC,qBAAAA,EAAuB,GACvBC,mBAAAA,EAAqB,GACrBC,UAAAA,EAAY,WACZC,oBAAqBC,EACrBC,kBAAmBC,CACrB,EAAI,GAAI,CACN,KAAM,CAACC,EAAiBC,CAAkB,EAAI13B,EAAS,IAAI,EACrD,CAAC23B,EAAYC,CAAa,EAAI53B,EAAS,EAAK,EAC5C,CAAC63B,EAAUC,CAAW,EAAI93B,EAAS,EAAK,EACxC,CAAC+3B,EAAgBC,CAAiB,EAAIh4B,EAAS,EAAK,EACpD,CAACi4B,EAAcC,CAAe,EAAIl4B,EAAS,EAAK,EAChDm4B,EAAaf,IAAc,WAEjCxT,OAAAA,GAAgB,IAAM,CACpB,MAAMwU,EAAoBrB,EAAc53B,QACxC,GAAI,CAACi5B,EAAmB,MAAO,GAC/B,IAAIC,EAAsBF,EACtBC,EAAkBE,UAClBF,EAAkBrU,WAEtB,SAASwU,GAAW,CAClB,KAAM,CACJD,UAAAA,EACAvU,WAAAA,EACAyU,aAAAA,EACAC,YAAAA,EACAC,aAAAA,EACA1U,YAAAA,CACD,EAAGoU,EACEO,EAAcR,EAAaG,EAAYvU,EACvC6U,EAAkBT,EAAaK,EAAeC,EAC9CI,EAAkBV,EAAaO,EAAe1U,EAC9C8U,EAAiB1c,KAAK2c,IAAIJ,EAAcN,CAAmB,EAC3DhB,GACJC,GACAlb,KAAKpQ,IACH6sB,EAAkB7B,EAClB4B,EACAD,CACF,EACIpB,GACJC,GACApb,KAAKpQ,IACH6sB,EAAkB5B,EAClB2B,EACAA,EAAkBD,EAAcE,CAClC,EAGAC,IACCT,EAAsBM,EACnBxB,EACAD,KAEJQ,EAAmBW,EAAsBM,EAAc,MAAQ,OAAO,EACtEN,EAAsBM,GAGxBf,EAAce,GAAe,CAAC,EAC9Bb,EAAYa,EAAcE,GAAmBD,CAAe,EAC5DZ,EAAkBW,GAAetB,EAAmB,EACpDa,EACES,EAAcE,GAAmBD,EAAkBrB,EACrD,CACF,CAEAa,OAAAA,EAAkB5T,iBAAiB,SAAU+T,EAAU,CAAE5T,QAAS,EAAK,CAAC,EAEjE,IAAMyT,EAAkB3T,oBAAoB,SAAU8T,CAAQ,CACtE,EAAE,CACDvB,EACAC,EACAC,EACAC,CAAkB,CACnB,EAEM,CACLM,gBAAAA,EACAE,WAAAA,EACAE,SAAAA,EACAE,eAAAA,EACAE,aAAAA,EACAe,KAAMA,IAAM,CACNjC,EAAc53B,SAChB43B,EAAc53B,QAAQ6wB,cAAc,IAAIiJ,MAAM,QAAQ,CAAC,CAE3D,EAEJ,CCjFA,SAASC,GAAU,CACjB/0B,MAAOM,EACP6e,SAAAA,EACA7T,OAAAA,EACAtP,SAAAA,EACAg5B,OAAAA,EAEAC,aAAAA,CACF,EAAG,CACG1C,IAAAA,EAAOrB,GAAU/R,EAAUnjB,CAAQ,EACjC0D,MAAAA,EAAaC,GAAYzD,CAAM,EAKrC,GAJKoP,IACHA,EAAS5L,EAAWiP,SAAS4jB,CAAI,GAAK7yB,EAAWiP,SAASwQ,CAAQ,EAC3D+R,EAAAA,GAAU5lB,GAAAA,YAAAA,EAAQ5O,GAAIV,CAAQ,GAEnC,CAACsP,EACI,OAAA,KAGH,KAAA,CACJ7J,QAAS,CACPkO,KAAAA,EACAC,OAAAA,EACA7N,aAAAA,EACArF,GAAIw4B,EACJpzB,IAAKqzB,EACLplB,YAAAA,EACAQ,SAAAA,EACAP,OAAQolB,EACRvlB,IAAAA,EACAK,MAAAA,CACF,EACAxT,GAAAA,EACA24B,aAAAA,EACAC,UAAAA,EACAxK,aAAAA,EACAyK,WAAAA,EACAC,gBAAAA,EACAC,WAAAA,EACApqB,KAAAA,EACAqqB,MAAAA,EACAC,UAAAA,EACAta,YAAAA,EACAua,WAAAA,EACAC,SAAAA,EACAC,SAAAA,EACAC,SAAAA,GACAC,KAAAA,GACAlmB,UAAAA,EACA8hB,YAAAA,GACAhH,mBAAAA,GACA3H,QAAAA,EACAc,SAAAA,EACAzI,iBAAAA,EACApQ,OAAAA,GACA+qB,IAAAA,GACAn0B,IAAAA,GACAkO,OAAAA,GAEAkmB,SAAAA,GACAC,QAAAA,CAEE7qB,EAAAA,EAEA,GAAA,EAACgQ,GAAAA,MAAAA,EAAkBze,QACd,OAAA,KAGT,MAAMu5B,EAAoBz3B,GAAA,CACpBA,EAAEC,QACJvD,EACEwF,EAAGyK,GAAAA,IACJ5K,GAAA,QAAA,IAAA,gBAAA,EACH,CAAA,CAAA,EACFoQ,GAAAvB,GAAA,IAEM1O,OAA+Bq0B,EAC5Bx0B,CAAAA,EAAMI,CAA4B,CAAA,EACtCu1B,GAAAC,GAAAC,EAAA,EACCzlB,OAAuB0lB,GAAAT,GAAAM,EAAA,EAC3B,IAAAI,GAAA,YAAAA,YAAyB51B,OACxB,OAAYA,KAGf,MAAM41B,EAAapb,GAAWmb,EAE1BC,EAAAA,SACK,OAAAnb,EAAA,IAAA,CAAAK,EAAAja,KAAA,CACT,MAAAg1B,GAAA,GAAAnE,CAAA,IAAA5W,EAAA,EAAA,GAEQyP,GAAMqL,GAAA,YAAAA,EAAyBnrB,UAMvC,WAAkCqqB,CAElC,qBAAyBpD,EAEzB,aAAwBhyB,EACtB,oBAAyB8a,IAAYsa,EAAA,kBAAA,QACrC,qBAAmCgB,EAAAA,WAAAA,GAAAA,KAAAA,EAAAA,GAAAA,EAAAA,GAAAA,OACnC;;YAGkBP,EAAAA,WAAAA,EAAAA;AAAAA,YAEdQ,EAAA,cACkBjB,EAAAA;AAAAA,UAOlB31B,SAAQf,EAAAwiB,GAAA,CAAA,MAAAnhB,EAEJm2B,MAAAA,EACAG,KAAAA,EAAgC,GAAA,IAAA56B,CAAA,MAAAU,CAAA,eAAAgF,GAAA,CAAA,GAClCtC,UAEIT,IAAAs2B,EAAAt2B,GAAA+C,GAAAia,EAAArQ,CAAA,EAAA,MAAA,CAAA,CAEJqQ,EAAAA,EAAAA,CAAAA,CAAAA,CACMka,CACuC,MAC7C12B,GAAAA,OC5HV,SAAS03B,GAAQ7K,EAAO,eAChBtsB,MAAAA,EAAaC,GAAYzD,CAAM,EAC/B,CAAEH,MAAAA,EAAOC,SAAAA,EAAUkL,cAAAA,GAAkB5J,EAAI,EAEzC,CAACuD,EAAgBi2B,CAAiB,EAAIj7B,EAAS,EAC/C,CAACmF,EAAoB+1B,CAAqB,EAAIl7B,EAAS,EAAK,EAElEd,EAAU,IAAM,CACd,MAAM0F,EAAWC,GAAMC,MAAMC,QAAQ,UAAU,GAAK,GAC9Cwb,EAAM3b,EAAS4c,KACN5b,GAAAA,EAAQvD,KAAKxB,KAAOgE,GAAMI,QAAQC,IAAI,gBAAgB,CACrE,EACIqb,GAAK0a,EAAkB1a,CAAG,EACR3b,EAAAA,EAAS5D,OAAS,CAAC,CAC3C,EAAG,CAAE,CAAA,EAMCm6B,MAAAA,GACHt3B,EAAW+G,SAAS4e,oBAAsB,gBACxC,CAAC3lB,EAAW+G,SAAS4e,mBACpB3lB,EAAW+G,SAASmpB,uBACxB,CAAClwB,EAAWilB,UAAUtH,KAAc0S,GAAAA,EAAI7wB,OAAS,WAAW,EAExD+3B,EAAgBC,GACpB,IAAM,CACJh7B,EAAO4sB,aAAe,EAAA,EAExB,CACEqO,UAAW,IACXC,OAAQ,QACRC,iBAAkB,EAAA,CAEtB,EAEMC,EAAYx8B,IACZ,CAACy8B,EAAWC,CAAY,EAAI37B,EAAS0I,MAAS,EAE9CkzB,EAAqBC,GAAuB,CAChD,EACA,EACAh4B,EAAW+G,SAAS4e,oBAAsB,eAAiB,GAAK,EAChE,CAAC,CACF,EAEKsS,EAAgB78B,IACtB,eAAe88B,EAAWpmB,EAAW,CAC/BA,OAAAA,GAAa,CAACmmB,EAAc38B,WAC9B28B,EAAc38B,QAAUe,EAAMM,GAAGw7B,MAAMt7B,KAAK,CAC1CC,MAAO,EAAA,CACR,GAEa,MAAMm7B,EAAc38B,QAAQ4B,KAAK,CAEnD,CAEA,MAAMk7B,EAAiBh9B,IACvB,eAAei9B,EAAYvmB,EAAW,CAChCA,OAAAA,GAAa,CAACsmB,EAAe98B,WAC/B88B,EAAe98B,QAAUe,EAAMM,GAAG27B,OAAOz7B,KAAK,CAC5CC,MAAO,EAAA,CACR,GAEa,MAAMs7B,EAAe98B,QAAQ4B,KAAK,CAEpD,CAEA,OACEwD,EAAAC,EAAA,CAAAjB,UACEgB,EAAA,SAAA,CACEoB,IAAK81B,EACLp4B,KAAK,SACLc,MAAQ,gCACNgB,EAAqB,cAAgB,EACtC,IAAGi3B,KAAO,SAAW,EAAG,GACzBxf,MAAO,CAAEoJ,SAAU,UAAW,EAC9B1iB,QAASA,IAAM,CACbq4B,EAAyBU,GAACA,EAAiB3zB,OAAT,MAAmB,CACvD,EACAqnB,cAAsBjtB,GAAA,CACpBA,EAAE+O,eAAe,EACjBxR,EAAO4sB,aAAe,EACxB,EAAE,GACEmO,EAAc,EAAC73B,SAElB4B,CAAAA,GACC/B,EAAC4C,GAAM,CACLC,MACEjB,EAAAA,GAAAA,YAAAA,EAAgB3C,OAAhB2C,YAAAA,EAAsB+O,WAAU/O,EAAAA,GAAAA,YAAAA,EAAgB3C,OAAhB2C,YAAAA,EAAsBkB,cAExDxC,KAAK,IACL44B,UAAUt3B,EAAAA,GAAAA,YAAAA,EAAgB3C,OAAhB2C,YAAAA,EAAsBgP,GAAAA,CACjC,EAEH5Q,EAACI,EAAI,CAACC,KAAK,OAAOC,KAAMyB,EAAqB,IAAM,GAAA,CAAM,CAAC,CAAA,CACpD,EACRZ,EAACg4B,GAAc,CACbtW,cAAc,WACdoW,MAAOX,EACPc,UAAWf,EACX13B,QAASA,IAAM,CACb43B,EAAajzB,MAAS,CACxB,EACA+zB,eAAgB,CACd7f,MAAO,CACL8f,OAAQ,EACV,EACAp5B,QAASA,IAAM,CACbq4B,EAAajzB,MAAS,CACxB,CACF,EACAi0B,OAAQ,CACNpwB,OAAQjN,SAASs9B,IACnB,EAAE,GACEzM,EACJpK,SAAS,OACTwO,WAAW,QACXvO,SAAS,SACTtf,MAAM,SACNk1B,mBAAAA,EACAiB,eAAc,GAAAt5B,UAEb,CAAC,GAACM,EAAAA,EAAWi5B,aAAXj5B,MAAAA,EAAuBk5B,aACJl5B,EAAWi5B,WAAWC,aAA1CC,WACEz4B,EAAA,MAAA,CAAKJ,MAAM,WAAUZ,SAAA,CACnBgB,EAACsC,GAAQ,CACPvD,QAASA,IAAM,CACDoY,QAAQ,4BAA4B,IAE7C,SAAY,CACP,GAAA,CACF3K,SAAS1L,OAAO,OACN,CAAC,CAAA,IAGnB,EAAE9B,SAAA,CAEFH,EAACI,EAAI,CAACC,KAAK,WAAWU,MAAM,eAAeT,KAAK,GAAA,CAAK,EAAE,IACvDN,EAAA,OAAA,CAAAG,SAAM,uBAAA,CAA2B,CAAC,CAC1B,CAAA,EACVH,EAAC0D,KAAa,CAAC,CAAA,CACZ,EAETvC,EAAA,UAAA,CAAAhB,SAAA,CACEgB,EAAC2hB,GAAQ,CAAC3e,GAAG,IAAGhE,SAAA,CACdH,EAACI,EAAI,CAACC,KAAK,OAAOC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,MAAA,CAAU,CAAC,CAAA,CACvC,EACT8H,GACC9G,EAAAC,EAAA,CAAAjB,SACG43B,CAAAA,GACC52B,EAAC2hB,GAAQ,CAAC3e,GAAG,aAAYhE,SAAA,CACvBH,EAACI,EAAI,CAACC,KAAK,YAAYC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,WAAA,CAAe,CAAC,CAAA,CACjD,EAEZgB,EAAC2hB,GAAQ,CAAC3e,GAAG,YAAWhE,SAAA,CACtBH,EAACI,EAAI,CAACC,KAAK,KAAKC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,UAAA,CAAc,CAAC,CAAA,CACzC,EACVgB,EAAC2hB,GAAQ,CAAC3e,GAAG,iBAAgBhE,SAAA,CAC3BH,EAACI,EAAI,CAACC,KAAK,eAAeC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,eAAmB,CAAA,EAC9DM,EAAW5C,sBACVsD,EAAA,MAAA,CAAKqC,MAAM,MAAMgW,MAAO,CAAEwM,QAAS,EAAI,EAAE7lB,SAAA,CACtC,IAAI,GAEP,CAAA,CAAK,CACN,CAAA,CACO,EACVH,EAAC0D,IAAa,CAAA,EACdvC,EAAC2hB,GAAQ,CAAC3e,GAAG,KAAIhE,SAAA,CACfH,EAACI,EAAI,CAACC,KAAK,OAAOC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,OAAA,CAAW,CAAC,CAAA,CACxC,EACVgB,EAAC2hB,GAAQ,CAAC3e,GAAG,MAAKhE,SAAA,CAChBH,EAACI,EAAI,CAACC,KAAK,UAAUC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,mBAAA,CAAuB,CAAC,CAAA,CACvD,EACVgB,EAAC2hB,GAAQ,CAAC3e,GAAG,KAAIhE,SAAA,CACfH,EAACI,EAAI,CAACC,KAAK,WAAWC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,WAAA,CAAe,CAAC,CAAA,CAChD,EACVgB,EAAC2hB,GAAQ,CAAC3e,GAAG,KAAIhE,SAAA,CACfH,EAACI,EAAI,CAACC,KAAK,QAAQC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,OAAA,CAAW,CAAC,CAAA,CACzC,CAAC,CAAA,CACX,EAEJH,EAAC0D,IAAa,CAAA,EACdvC,EAAC2hB,GAAQ,CAAC3e,GAAK,UAAShE,SAAA,CACtBH,EAACI,EAAI,CAACC,KAAK,SAASC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,QAAA,CAAY,CAAC,CAAA,CAC3C,EACVgB,EAAC2hB,GAAQ,CAAC3e,GAAK,IAAGpH,CAAS,OAAMoD,SAAA,CAC/BH,EAACI,EAAI,CAACC,KAAK,QAAQC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,OAAA,CAAW,CAAC,CAAA,CACzC,EACVgB,EAAC2hB,GAAQ,CAAC3e,GAAK,IAAGpH,CAAS,KAAIoD,SAAA,CAC7BH,EAACI,EAAI,CAACC,KAAK,QAAQC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,WAAA,CAAe,CAAC,CAAA,CAC7C,EACVgB,EAAC2hB,GAAQ,CAAC3e,GAAK,IAAGpH,CAAS,YAAWoD,SAAA,CACpCH,EAACI,EAAI,CAACC,KAAK,QAAQC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,UAAA,CAAc,CAAC,CAAA,CAC5C,CAAC,CAAA,CACJ,EACTH,EAAA,UAAA,CAAAG,SACG8H,EACC9G,EAAAC,EAAA,CAAAjB,SACEH,CAAAA,EAAC0D,IAAa,CAAA,IACb9B,EAAAA,GAAAA,YAAAA,EAAgB3C,OAAhB2C,YAAAA,EAAsBnE,KACrB0D,EAAC2hB,GAAQ,CAAC3e,GAAK,IAAGpH,CAAS,MAAK6E,EAAe3C,KAAKxB,EAAG,GAAE0C,SAAA,CACvDH,EAACI,EAAI,CAACC,KAAK,OAAOC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,SAAA,CAAa,CAAC,CAAA,CAC1C,EAEZgB,EAACsC,GAAQ,CACPvD,QAASA,IAAM,CACbjD,EAAO4sB,aAAe,EACxB,EAAE1pB,SAAA,CAEFH,EAACI,EAAI,CAACC,KAAK,QAAQC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,WAAA,CAAsB,CAAC,CAAA,CACpD,EACVgB,EAACsC,GAAQ,CACPvD,QAASA,IAAM,CACbjD,EAAOygB,oBAAsB,CAC3BjgB,GAAI,OACJ6X,QAAS,cACTC,cAAeojB,EACfnjB,yBAA0B,CAAC,QAAQ,CAAA,CAEvC,EAAErV,SAAA,CAEFH,EAACI,EAAI,CAACC,KAAK,OAAOC,KAAK,GAAK,CAAA,EAC9B,eAAA,CAAA,CAAU,EACVa,EAACsC,GAAQ,CACPvD,QAASA,IAAM,CACbjD,EAAOygB,oBAAsB,CAC3BjgB,GAAI,QACJ6X,QAAS,gBACTC,cAAeujB,EACftjB,yBAA0B,CAAC,UAAU,CAAA,CAEzC,EAAErV,SAAA,CAEFH,EAACI,EAAI,CAACC,KAAK,QAAQC,KAAK,GAAK,CAAA,EAE/B,gBAAA,CAAA,CAAU,EACVN,EAAC0D,GAAW,CAACrC,UAAU,cAAA,CAAgB,EACvCF,EAACsC,GAAQ,CACPvD,QAASA,IAAM,CACbjD,EAAO2D,0BAA4B,EACrC,EAAET,SAAA,CAEFH,EAACI,EAAI,CAACC,KAAK,WAAWC,KAAK,GAAA,CAAK,EAAE,IAClCN,EAAA,OAAA,CAAAG,SAAM,oBAAA,CAAwB,CAAC,CAAA,CACvB,EACVgB,EAACsC,GAAQ,CACPvD,QAASA,IAAM,CACbjD,EAAOitB,sBAAwB,EACjC,EAAE/pB,SAAA,CAEFH,EAACI,EAAI,CAACC,KAAK,WAAWC,KAAK,GAAA,CAAK,EAAE,IAClCN,EAAA,OAAA,CAAAG,SAAM,sBAAA,CAAiC,CAAC,CAAA,CAChC,EACVgB,EAACsC,GAAQ,CACPvD,QAASA,IAAM,CACbjD,EAAO2sB,aAAe,EACxB,EAAEzpB,SAAA,CAEFH,EAACI,EAAI,CAACC,KAAK,OAAOC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,WAAA,CAAsB,CAAC,CAAA,CACnD,CAAC,CAAA,CACX,EAEFgB,EAAAC,EAAA,CAAAjB,SAAA,CACEH,EAAC0D,KAAa,EACdvC,EAAC2hB,GAAQ,CAAC3e,GAAG,SAAQhE,SAAA,CACnBH,EAACI,EAAI,CAACC,KAAK,OAAOC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,QAAA,CAAY,CAAC,CAAA,CACzC,EACVgB,EAACsC,GAAQ,CACPvD,QAASA,IAAM,CACbjD,EAAO2sB,aAAe,EACxB,EAAEzpB,SAAA,CAEFH,EAACI,EAAI,CAACC,KAAK,OAAOC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,WAAA,CAAsB,CAAC,CAAA,CACnD,CAAC,CAAA,CACX,CAAA,CAEG,CAAC,CAAA,CACI,CAAC,CAAA,CACjB,CAEN,CCrRA,MAAM05B,GAAwB,CAC5BC,MAAO,UACPC,OAAQ,SACR/Y,SAAU,QACZ,EAEA,SAASgZ,GAAS,CAChBx2B,MAAAA,EACAy2B,eAAAA,EACAx8B,GAAAA,EACAV,SAAAA,EACAm9B,UAAAA,EACAC,UAAAA,EACAC,UAAAA,EACA5wB,eAAAA,EACA6wB,WAAAA,EAAaA,IAAM,CAAC,EACpBv7B,gBAAAA,EAAkBA,IAAM,CAAC,EACzBw7B,wBAAAA,EAA0B,KAC1BC,YAAAA,EACAC,UAAAA,EACAC,cAAAA,EAEAC,QAAAA,EACAC,KAAAA,EACAvD,cAAAA,EACAwD,iBAAAA,CACF,EAAG,CACKn6B,MAAAA,EAAaC,GAAYzD,CAAM,EAC/B,CAACy0B,EAAOmJ,CAAQ,EAAIj+B,EAAS,CAAE,CAAA,EAC/B,CAACkO,EAASC,CAAU,EAAInO,EAAS,SAAS,EAC1C,CAAC4gB,EAAUC,CAAW,EAAI7gB,EAAS,EAAK,EACxC,CAACk+B,EAASC,CAAU,EAAIn+B,EAAS,EAAK,EACtC,CAACF,EAASC,CAAU,EAAIC,EAAS,EAAI,EACrC+2B,EAAgB93B,IAEdswB,EAAyB1uB,IAAAA,QAE3Bu9B,KAAyBzoB,GAAA,CACzB0oB,EAAAA,EAAYC,EAEdH,IAAgB,YACWhwB,EAAA,SAAA,GAC3BA,SAAoB,CACP,GAAA,CACP,GAAA,CACE,KAAAiT,EAAEA,MAAAA,CAAAA,EAAMtgB,MAAAA,EAAAA,CAAAA,EAAM,GAAI,MAAM28B,QAAAA,CAAoB,EAAA,CAC5Cpc,KAAAA,CAAAA,GAAcvgB,EAAQ,EAAAA,EAAA,OAAA,CAAAyf,EAAAqU,KAElBA,UAEFrU,KAAS+Z,KAAS1F,CAAA,EAEXrU,EAAA,CAAA,EAAA,KAAAqU,CAAA,EAEPrU,GACOA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA,EACTzf,EACKy9B,GAECA,IACW3xB,IACjB9L,EAAoB0zB,GAAA1zB,CAAA,GAEpBA,EAAA00B,GAAA10B,CAAA,GAEF09B,GAAA,SACA19B,KAAwB,OAAAA,CAAA,GAGxBtB,EADAmW,IAGgB8oB,GAAA,CAAA,GAAAA,EAAA,GAAA39B,CAAA,CAFC,EAIfm9B,EAAUnJ,SACZ1T,EAAA,IACAP,EAAW7f,CAAAA,CAAAA,CAAQogB,MACnBP,EAAY,EAAK,EAEjBA,EAAAA,SAAiB,CACnB,MAAA,CACA1S,EAAW,OAAS,CAAA,QACV,CACV3O,SAAe,CACf2O,CAAkB,KAElBkwB,EAAAA,KAAAA,CACF,QAAA,GACF,SAAG,EAAA,GAIMK,GAAA,qCACCC,GAAAn8B,GAAA,aAAA,CAAA4C,EAAA+uB,IAAA,CAEd,MAAAyK,EAAA,SAAA,cAAA,QAAAF,EAAA,EAEsBG,GAAAD,GAAA,YAAAA,EAAA,wBAETp8B,GAAAA,MAAyB,KAAAu0B,EAAgB,QAAA,iBAAA2H,EAAA,CAAA,EAEpD,GAAAE,GAAmBt/B,GAAuBw/B,IAAAA,EAAqB,QAAA,cAAAD,GAAA,OAAA,EAAA,CACzDA,MAAAA,KAA6BE,QAAsBH,CAAA,EACzD,IAAMI,EAAW3d,GAAMuI,EACCrZ,CAAAA,EAGtBquB,EAAAA,QAIMK,EAAAA,GAAAA,KAA2BC,CAAAA,EAAAA,IAAkB3b,EAAA0b,GAAA,CAAArK,EAAA,UAAA,SAAA,mBAAA,CAAA,GAE/CT,IAEFtB,EAAAA,MAAoBrR,EAKtBqR,EAAA,eAAAoK,EAAA,EAEEpK,KAAAA,CACAA,MAAAA,KAA6C,KAAA+B,GAAA,CAC/C,MAAAuK,EAAAvK,EAAA,wBACK,OAAAuK,EAAA,KAAA,IAAAA,EAAA,MAAA,CAEL,CAAMC,EACED,IACNC,EAAgB/L,MAAAA,EACjB+L,EAAA,eAAAnC,EAAA,EAECmC,CACAA,CAAAA,EACFC,EAAA78B,GAAA,aAAA,CAAA4C,EAAA+uB,IAAA,CACF,MAAAyK,EAAA,SAAA,cAAA,QAAAF,EAAA,EACDG,GAAAD,GAAA,YAAAA,EAAA,wBAEYp8B,GAAAA,MAAyB,KAAAu0B,EAAgB,QAAA,iBAAA2H,EAAA,CAAA,EAEpD,GAAAE,GAAmBt/B,GAAuBw/B,IAAAA,EAAqB,QAAA,cAAAD,GAAA,OAAA,EAAA,CACzDA,MAAAA,KAA6BE,QAAsBH,CAAA,EACzD,IAAMI,EAAW3d,GAAMuI,EACCrZ,CAAAA,EAGtBquB,EAAAA,QAIMK,EAAAA,GAAAA,SAA2BC,CAAAA,EAAAA,IAAkB3b,EAAA0b,GAAA,CAAArK,EAAA,UAAA,SAAA,mBAAA,CAAA,GAE/CT,IAEFlB,EAAAA,MAAoBqM,EAKtBrM,EAAA,eAAAgK,EAAA,EAEEhK,KAAAA,CACAA,MAAAA,KAA6C,KAAA2B,GAAA,CAC/C,MAAAuK,EAAAvK,EAAA,wBACK,OAAAuK,EAAA,KAAA,IAAAA,EAAA,MAAA,CAEL,CAAMC,EACED,IACNC,EAAgB/L,MAAAA,EACjB+L,EAAA,eAAAnC,EAAA,EAECmC,CACAA,CAAAA,EACFG,GAAA/8B,GAAA,CAAA,QAAA,GAAA,EAAA,IAAA,CACF,MAAAo8B,EAAA,SAAA,cAAA,QAAAF,EAAA,EACDE,GAEDA,EAAwB,MAAA,CAGtB,CAAA,EACEA,CACF,gBAAAnH,GACD,eAAAM,EAEK,aAAAE,EACJR,WAAAA,EACAM,SAAAA,EACAE,EAAAA,GAAAA,CACAN,cAAAA,EACAE,gBAAAA,uBACY,EAAA,CACZd,EAAAA,EACiB,IAAA,QACjBG,EAAAA,EAAsB,UAAtBA,MAAAA,EAAsB,SAAA,CACvB,IAAA,CAEDh4B,GACE63B,EAAAA,EAAc53B,CAAkB,EAAA,CAAO,CAAA,EAAAD,EAAG,IAAA,CAC1Cm/B,EAAU,EAAI,CAAA,EACb,EAAE,CAAA,EACLn/B,EAAU,IAAM,CACdm/B,GACEP,EAAQ,EAAA,CAGV,EAAA,CAAAnG,CAAgB,CAAA,EACd0G,EAAAA,IAAc,EAChBpG,GAAAJ,IAAAjX,IACE+W,GAGF,EAAIM,CAAAA,EAAAA,IACQ,MAAAuH,GAAAvgC,EAAA8+B,CAAA,EACZ7+B,EAAA,IAAA,CACgB0hB,GAAAA,UAASmd,IAErByB,GAAAA,UACNtgC,EAAgB,CAAA,CAAA,EAEZsgC,EAAAA,CAAAA,CAAAA,CAAAA,EACAvB,MAAAA,GAAWwB,GAAA,MAAA,CACb,iBAAAC,EAAA,EACF,EAAI3B,KAAK,CAEH4B,MAAAA,EAAAA,UACG,iBAAA5I,EAAA,OAAA,EAAA,gBAAA,OAAA,GAAqBlzB,EAAA,SAAA,aAAAkzB,EAAA,QAAA,UAAA,KAAA2I,GAAA,OAAA,WAAA,CAAAE,GAAA,GAAA,CAAAC,EAAUxB,EAAO,EAAA,aAMzC/F,KAEawH,EAAAA,CACbF,IAA2B19B,EAAA2B,EAAA,SAAA,WAAA,CAAA,EAC3Bg8B,GAAAA,IAAAA,GACDv9B,GAAA,CACD,GACEuB,EAAW+G,CAMXpL,MAAAA,EAAY,KAAA,IAAA,EAAkBqB,GAAe+J,SAC7CyzB,CAAAA,GAAc,SAAA0B,EAAA,IAAA,IACTJ,GAAA,CACLngC,iBAAY,EACZ,CAAMwgC,CAEJxgC,MACA2+B,GAAe,QAAA,KAAA,MAEnBp+B,EAAAuC,CAAA,CAAA,EAEF,CAACzB,KAA2C+J,EAAAA,oBAC9C,CAAA,EAEAq1B,MAA8BngC,GAAA,CAAAo+B,EAAAR,GAAA3F,EAAA,EAAA,GAAA,IAAA,EAC9Bl5B,MAAAA,GAAAA,KACe,OAAA,CAAAk5B,EACX,OAAa30B,EAAAs3B,GAAA,SAAA,CACX,MAAAF,EACA,SAAK0F,EAAAA,MAAe/gC,CAEC,GAAA,GAAA0B,CAAA,QAAA,MACC,iBAAA,IACnBs/B,GAAA,CACHpJ,EAAA,QAAAoJ,EACKxB,GAAA,QAAAwB,EACUhhC,EAAAA,QAAAA,EACjBogC,GAAA,QAAAY,CACApgC,EAEDmC,SAAAA,KAKDy9B,SAAAA,EAAAA,MAAAA,CAMIS,MAAAA,qBAGJh9B,qBAAuB,CAAQo3B,OAAAA,GAAcj3B,QAC3CT,GAAA,OACYA,EAAA,OAAA,QAAA,WAAA,IACJb,EAAA80B,EAAA,UAAA,MAAA90B,EAAA,SAAA,CACS,IAAA,EACb80B,SAAwBoJ,QACxBxB,EAEAY,EACF,WAAAz8B,GAAA,CACSA,EAAA,OAAA,QAAA,WAAA,GAAIS,EAEb,EAAA,CAA+BA,EAE3BlE,MAAQ+gC,IAAAA,UAAAA,UAAAA,GACR98B,SAAgB,CAAAiB,EAAA,MAAA,CACd,MAAOgI,cACLwqB,SAAAA,CAAAA,SAAgC,MACzB,cAAA,SACK,CAAA3zB,EAAA43B,GAAA,CAAA,CAAA,EAAA2C,GAAAv6B,EAAAkE,EAAA,CACX,GAAA,IACH,MAAA,2BACF,SAAAlE,EAAAI,EAAA,MACmB,OACZV,KAASg8B,GACZT,CAAAA,CAAc,CAChB,CAAA,CACF,CAAA,EAAAz3B,IAAAy2B,GAAAj6B,EAAA,KAAA,CACAe,SAAmByC,CAAwB,CAAGrD,GAAAA,EAE9CgB,MAAA,CAAW,MAAA,cAAahB,SACtBgB,CAAAA,CAAAA,GAAAq5B,CAAA,CAAA,CAAKz5B,CAAM,CAAA,EAAaZ,SACrBy3B,GAAAA,IACA2C,WAAAA,CAAgByC,IAAQzC,GAAAA,EACvBA,SAAAA,CAEK,MAAI,4BAAA,KAAU,SAA0Bp6B,QAAAA,WACtC86B,EAAM,EAAA,GAAAp8B,EAAA80B,EAAY,UAAZ,MAAA90B,EAAY,SAAA,CAAG,IAAE,EAE/B,SAAA,QAAA,EAE0C,EAAU,SACvD,CAAAmB,EAAAI,EAAA,CAAKW,KAAM,UAAaZ,CAAAA,EAAAA,YAENq6B,CAAAA,CAAAA,CAAS,CACrB,CAAA,EAEP9I,CAAAA,CAAAA,GAAe1xB,EACF,MAAA,CAGV,MACQ,kBAAA8K,IAAA,UAAA,UAAA,EAAA,GAAA,SACD2vB,CAAA,CAAA,WACUt5B,EAAAC,EAAA,CACb65B,SAAAA,CAAAA,EAAc,KAAA,CACdtH,MAAAA,cAAgC,YAAAgH,CAAA,GAAA,EAAA,GAAA,SACzB,CAAAjJ,EAAA,IAAArlB,GAAArM,EAAAi9B,GAAA,CAAA,OAAA5wB,EAEP,SAAAtP,EACF,UAAAq9B,EAAEj6B,cAAAA,EAEIE,KAAAA,oBACR,EACDgM,EAAA,IAAAA,GAAA,YAAAA,EAAA,SAAAsuB,CAAA,CAAA,EAAAnd,GAAA1S,IAAA,YAAA6vB,IAAA,QAAA,KAAAx5B,EAAAC,EAAA,CAEFq5B,SAAAA,CAAAA,EAAAA,KACD,CACU,MAAA,CAEPA,OAAAA,MAGI78B,EACPuC,SACEgB,EAAAsrB,GAAA,UAAuBkO,EAA+B,EAErC,CACXtuB,EAAAA,EAAAA,KAAAA,CACAtP,MAAAA,CACAq9B,OAAAA,MAEAhD,EAEAuD,SAAAA,EAAAA,GAAAA,CACAC,SAAAA,EAAAA,CAFKvuB,CAQL,CAAAlM,CAAAA,CACE,CAAA,EAAA,CACS,CAAA,EAAA2K,IACG,YAAA0S,EAAAxd,EAAA4e,GAAA,CACV,SAAAse,GAAA,CAAE/8B,GAEK86B,GAAY,EAErB,SACSj7B,EAAA,SAAA,CAAA,KACG,SACV,MAAA,cAAEG,QAAAA,MAEK,EAAA,MAAS,CAAA,eAAE,KAChB,EAEN,SAAA,YAAA,CAEL2K,CAEU,CAAA,QACiB,CACpB,MAAY,yBACA,SAAA,UACZ,CAAA,EAAA,CACF,CAAA,EAAAA,IAAA,UAAA9K,EAAA,KAAA,CAAEG,MAAAA,WAEF,SACO,MAAA,KAAA,CAAA,OACC,CAAA,CACND,EAAAA,IAAAA,CAAAA,EAAAA,QAAyB,QAAAF,EAAA,MAAA,CAAA,MAClB,CAAA,OAAkB,MAAM,CAAA,CAAA,EAChCA,EAAA,KAAA,CAED,SAAQA,EAAAysB,GAAA,CAGVzsB,SAAA,EAAA,CAAS,CAAA,EAAyByC,CAAA,CAAA,CAAA,CAAA,EAClCqI,IAAA,SAAA9K,EAAA,IAAA,CACJ,MACY,WACVe,SAAMm5B,CAAU/5B,CAAAA,EAAAA,aACNgB,EAAA,IAAA,CAAA,MAAU,WAAE,UAAWsB,EACjCk4B,EACE36B,KAAAA,CAAAA,CAAAA,EAAAA,EAAA,KAAA,CAAA,CAAA,EAAAA,EAAA,SAAA,CACEwZ,KAAO,SAAA,QACG,IAAAyhB,EAAA,CAAAvJ,EAAA,MAAA,EACV,SAAA,WAAA,CACD,CAED1xB,CAAA,CAAAG,CAAAA,CACS,CAAA,CAAS,CAAA,CAAE,CAAC,CAGzB,CAGqB,SAAA88B,GAAS,CAAA,OAAA5wB,EAAY6tB,SAAAA,EAG5C,UAAAE,EAIE,cAAAhD,EAAa,KAAAuD,EAA+C,iBAAAC,CAAG,EAAA,CAEtD,KAAA,CAEZ,GACE1a,EAAC,OAAAjU,EAEc,MAAAylB,EAE5B,KAAAzxB,EAEA,QAAAi3B,CACE7qB,EAAAA,EACAtP,IACAq9B,EAAAA,IAAAA,MAAAA,GAAAA,GAAAA,YAAAA,EAAAA,KAAAA,EAEAhD,EAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,GAAAA,MAAAA,CAAAA,GACAuD,IAAAA,EAAAA,GACAC,IAAAA,SACCp3B,EAAA,GAAAkuB,EAAA,MAAA,UACKzxB,IAAA,WAAExC,EAAIyiB,gBAAkBwR,MAAAA,EAAAA,IAAAA,UAAAA,IAAAA,SAAOzxB,GAAAA,EAAAA,CAAMi3B,GAAAA,EAAY7qB,OAAAA,EAAAA,KAAAA,CAAAA,EAAAA,IAAAA,CACnD6qB,MAAAA,EAAAA,GAAAA,EAAAA,SAAAA,CAAAA,EAAqBiG,EAAA5F,GAAA,EAAA,SAAAH,CAAA,EACnB7L,OAAAA,GAAiBtf,SAKAkxB,KAGb,CAAA,CACV,EACMC,EAAAA,KAAsB,CACjB,MAAA,yBACLA,SAAYp9B,EAAAq9B,GAAA,CAERvjB,MAAAA,EAOJ,MAAkByd,GAAAA,CAAAA,YAClB,SAAkBA,EAAAA,IAAAA,GAAaT,CAC3BwG,KAAAA,CACK,GAAAC,EACT,OAAAC,WAES,EAAAhM,EACTiM,GAAAD,GAAA,YAAAA,EAAA,KAAAD,EACOG,EAAA3gC,EAAA,IAAAA,CAAA,MAAA0gC,CAAA,GAAA,MAAAA,CAAA,GACR,OAAAE,MAEC,IAAuC39B,EAAA,KAAA,CAAwBG,SAC9CH,EAAAkE,EAAA,CAACV,MAAAA,yCAAczC,GAAUd,EAAgBE,SAC/CmB,EAActB,EAAAysB,GAAA,CACb,SAAA8Q,EAAMrd,SAAAA,EAAUjU,KAAAA,IAAQirB,kBAAAA,GAAY1F,kBAAAA,EAE1C,CAAM3uB,EAAAA,MAGFq0B,OAAAA,EAAqB,SAAAn6B,EACzB,KACE,IAAAoD,kBACO,GAAO,kBAAA,EAA6C0C,CAAI1C,CAElD,CAAA,CAELpD,EAAAA,CAAAA,CAAAA,CAAAA,CACK,CAAA,CACY,EAAA,YACAmjB,CAAA,EAAA,EACjB,MAAA0d,EAGF59B,EAAO,OAAA,EAAA,OAAA0xB,EAAA,IACGF,CAAAA,EAAAA,IAAAA,CACRz0B,KAAAA,CAAAA,GAAAA,EACK,iBAAA8gC,CACY,EAAArM,EACAkM,EAAA3gC,EAAA,IAAAA,CAAA,MAAAwgC,CAAA,GAAA,MAAAA,CAAA,GAAAO,EAElBr7B,EAAA,GAAAA,EAAAivB,EAAA,OAAA,EAAAqM,EAECvM,EAAA,WAAA,CAAA,CAAAA,EAAA,YAACwM,EACL,CAAAH,GAAAE,GAAAt7B,EAAA,GAAAm7B,GAAAE,IAAA79B,IAAA,UAAAA,IAAA,gBAAA,CAAA49B,GAAA,CAAAnM,EAAAjvB,EAAA,CAAA,EAAA,kBAAA,CAAAivB,EAAAjvB,EAAA,CAAA,EAAA,kBAEPw7B,EAAAx7B,IAAA,EACay7B,EAAAz7B,IAAAivB,EAAA,OAAA,EAAC,OAnCExR,EAAAA,KAAAA,CAsCzB,MAAA,wDAAAjgB,CAAA,4BAAAg+B,EAAA,QAAAC,EAAA,MAAA,QAAA,IAAAL,EAAA,4BAAA,EAAA,GACMD,SAAAA,IAA2B,CACjC,MAAat8B,4BACL,GAAAo8B,EAAMxd,SAAAA,EAAAA,EAAAA,GAAAA,CAAU2d,OAAAA,EAAqBrM,SAAAA,CAC3C,CAAM3uB,EAAAA,IAAqB9F,GAAAA,CACrB+gC,SAAWr7B,EACXs7B,SAAAA,EACAC,kBACFH,EAQEI,iBAAAA,CAEN,CAAA,IACExR,GAAA,CAEU,OAAA+E,EAEkDrxB,SAAAA,EAE9C,kBAAA+9B,EAAgCr7B,iBAAAA,CAElB,CAAA,CAAS2uB,CAAMz0B,CAAAA,EAAAA,YAErCiD,CAAAA,EAACysB,CAAM,CAAA,CAEL1vB,CAAAA,MAAAA,EACmBmhC,YAAAA,EAAAA,CAAAA,GACnBtD,OAAAA,IAAAA,QAAAA,EAAAA,EAAAA,GAAAA,CACA,MAGF56B,gBAAO,OACGwxB,KACRz0B,SAAAA,EAAAA,SAAAA,CAEA69B,EAAAA,CAAAA,EAAAA,EAAAA,GAAAA,CAAAA,MAED,gBAAA,OAEC,KAAC,OAAAvuB,EAGZ,SAAAtP,CAGGohC,EAAAA,CAAAA,EAGG/D,EAAAA,KAAAA,CACK,SACFp6B,EAAAkE,EAAA,CACN6xB,MAAO,4BAEP7V,GAAAA,EACAnjB,SAAAA,EAAAA,EAAAA,GAAAA,CAAAA,SAAAA,EAFKohC,SAAAA,EAOC,kBAAA,GACC,iBAAAvD,CAEPvuB,CACAtP,EAAAA,EAAAA,GAAAA,CAAAA,OAAAA,EAED,SAAAA,EAEL,kBAAA,GAEA,iBAAA69B,CAES,CAAO,CAAA,CAAA,CAAoCz6B,EAAAA,CAAAA,CAErC,CACL+f,SACAnjB,GAAAA,CAAAA,MAAAA,EAEA69B,MAAAA,EAAAA,SAAAA,CAAAA,EACA,CAIAvuB,MAAAA,EAAAA,IACAtP,CAAAA,WAAAA,EAEA69B,SAAAA,EAAAA,KAAAA,CAAAA,EACAlH,GACD,CACF,cACGtT,YACJ,YAER,CAAA,EAEAtkB,OAAAA,EAAwB,IAAA,CAAE0H,GAAAA,MAAAA,GAAcnC,EAAAA,CAAAA,CAAAA,EAAWlB,EAAAA,MAAAA,CAAY,MAAA,mBAAAkB,CAAA,GAC7D,qBAA2B,CACrB,SAAA,CAAArB,EAAA,KAAA,CAAEu0B,SAAAA,CAAAA,CAAYE,EAAAA,EAAAA,OAAAA,CAAUmB,SAAAA,CAAAA,EAAAA,SAAAA,CAAmB,KAAA,SAChCxV,MAAAA,eACJ,SAAAmU,EACZ,QAAA,IAAA,UACS7V,EAAA0B,EAAM,UAAN,MAAA1B,EAAM,SAAA,CACP,KAAA,CAAA,KAAA,IAAA,KAAA7f,EAAAuhB,EAAA,UAAA,YAAAvhB,EAAA,WAAA,EACJ,SAAA,QAEL,EACe,EAA8BsB,SACzCgB,EAAAf,EAAA,CAAAD,KACEH,cAAA,CAAKwD,CAAAA,CACLrC,EAAAA,IAAAnB,EAAA,SAAA,CAAAG,KAAAA,SAEIF,MAAK,eACLc,SAAM0zB,EACN9wB,QAAU4wB,IAAAA,cACK,kBAAA,SAAA,CACbnU,KAAAA,cAA8BvhB,EAAAuhB,EAAA,UAAA,YAAAvhB,EAAA,WAAA,EAC5BkiB,SAAO/H,QAA8C,EAC3C,EAEd,SAAAhZ,EAAAI,EAAA,CAAED,KAAAA,eAEG,CAAA,CAAM,CAAA,CAAc,CAAE,CAAA,CAAC,CAE9B,CAAA,EAAAH,EACO,KAAA,CAAA,IACCogB,EAAA,SAAAjgB,CACIs0B,CAAAA,CAAAA,CAERrU,CAAAA,CAA8B,CACwB,SAAAge,GAC1C,CAAA,OAAA/xB,EAEd,SAAAtP,CAAA,EAAEoD,CAEG,MAAAM,EAAMC,GAAAzD,CAAA,EAAA,CAAiB,GAAAQ,EACrB,WAAAk5B,CACJ,EAET32B,EAASogB,EAAAA,GAAAA,CAAAA,EAAYjgB,EAAAA,GAAAA,EAAAA,CAAAA,EAAAA,OAAgBgB,EAAA,UAAA,CAClC,MAAA,yBAAAw1B,IAAA,SAAA,oBAAA,EAAA,GAET,SAAA,KAEA,SAA+B,CAAAl2B,EAAA,mBAAA6yB,CAAA,EAAAnyB,EAAA,MAAA,CAAEkL,MAAAA,sBAAQtP,SAAAA,CAAAA,EAAAA,EAAAA,CAAY,KAAA,SAC7C0D,KAAAA,GACA,CAAA,EAAAA,EAAA,mBAAA6yB,CAAA,EAAA,IAAA7yB,EAAA,mBAAA6yB,CAAA,CAAA,KAAA,EAAA,CAAA,CAAE71B,EAAAA,EAAAA,MAAAA,CAAIk5B,MAAAA,sBAAetqB,SAAAA,EAAAA,EAAAA,CACrBgyB,KAAAA,SACA/K,KAAAA,GACN,CAAA,CACE,CACU,EAAAnyB,EAAA,MAAA,CAGC,MAAA,kBAAIhB,MAAAA,EAGNY,SAAM,CAAAs9B,EAAAhyB,EAAA,WAAAA,EAAA,aAAAlL,EAAAC,EAAA,CAAqBjB,SAC9BH,CAAAA,IAAKA,EAAA,OAAA,CAAM,MAAA,gBAAc,SAAAA,EAAAI,EAAA,CACbk+B,KAAAA,YAKdt+B,KAAA,GAAA,CAAW,CAAA,CAAqBG,CAAAA,CACzB,CAAA,CAACE,CAAK,CAAA,CAAA,CAAc,CAAA,CAAK,CAGlC,SAAWm8B,IAAA,CAAA,MAAyB6B,CAAAA,CAAAA,SAAAA,cAAAA,sCAAAA,CAAAA,CChsB1C,MAAMtvB,GAAQ,GACRwvB,GAAW,KACXC,GAAkB,GAAED,EAAS,MAE7BE,IAAsB,IAAM,CAC5B,GAAA,CACIlX,MAAAA,EAAQrrB,SAAS6X,cAAc,OAAO,EACtC2qB,OAAAA,EAAAA,aAAa,OAAQ,OAAO,EAC3BnX,EAAMtnB,OAAS,aACZ,CACH,MAAA,EACT,CACF,KAEA,eAAe0+B,GAAiB5hC,EAAU,OAClC,KAAA,CAAED,MAAAA,GAAUuB,EAAI,CAAEtB,SAAAA,CAAAA,CAAU,EAC5B0V,EAAU,MAAM3V,EAAM+d,GAAGC,OAAO9c,MAAM,CAC1C+Y,EAAG,UACH9W,KAAM,WACN1C,MAAO,CAAA,CACR,EACM,MAAA,CAAC,GAACkV,EAAAA,GAAAA,YAAAA,EAAS/C,WAAT+C,MAAAA,EAAmB7U,OAC9B,CACA,MAAMghC,GAAkBvvB,GAAKsvB,EAAgB,EAE7C,SAASE,IAAkB,CACnBp+B,MAAAA,EAAaC,GAAYzD,CAAM,EAC/B,CAAEQ,GAAAA,EAAI,GAAGqO,GAAWgzB,GAAU,EAC9B,CAACxQ,EAAcC,CAAe,EAAIC,GAAgB,EAClDuQ,EAAQzQ,EAAaxsB,IAAI,OAAO,EAChCk9B,EAAiB,CAAC1Q,EAAaxsB,IAAI,SAAS,EAC5Cm9B,EAAgB,CAAC,CAAC3Q,EAAaxsB,IAAI,QAAQ,EAC3Co9B,EAAS5Q,EAAaxsB,IAAI,QAAQ,EAClC4a,EAAQ,CAAC,CAAC4R,EAAaxsB,IAAI,OAAO,EAClC,CAAEhF,MAAAA,EAAOC,SAAAA,EAAUkL,cAAAA,GAAkB5J,EAAI,CAAEtB,SAAU+O,EAAO/O,QAAAA,CAAU,EACtE,CAAED,MAAOqT,EAAcpT,SAAUqT,GAAoB/R,EAAI,EACzD8gC,EAA0BtjC,IAE1BujC,EAAkB,CAACL,EAAOC,EAAgBC,EAAeC,EAAQxiB,CAAK,EACtE,CAACla,EAAS68B,CAAU,EAAIziC,EAAS,EACjC0iC,EAAkBzjC,EAAO,CAAC,EAChCC,EAAU,IAAM,CACdwjC,EAAgBvjC,QAAU,GACzBqjC,CAAe,EAEZ5uB,MAAAA,EAAsBF,GAC1B,IAAMvT,IAAaqT,EACnB,CAACrT,EAAUqT,CAAe,CAC5B,EACM,CAACmvB,EAAeC,CAAgB,EAAI5iC,EAAS,EAAK,EACxDd,EAAU,IAAM,CAGT0U,GACAhO,GAAAA,MAAAA,EAASkO,OACb,SAAY,CACL8f,MAAAA,EAAU,MAAMoO,GAAgB7hC,CAAQ,EAC9CX,EAAYo0B,CAAA,CAAA,IAAEA,EAAAA,CAAQzzB,EAACyT,EAAAhO,GAAA,YAAAA,EAAA,IAAA,CAAA,EACvBg9B,eAAAA,EAAwBjtB,EAAA,aAC1B,MAAGktB,EAAA,iBAAA,KAAAV,CAAA,EACDhiC,IAA+ByF,IAAAA,GAAAA,GAAAA,YAAAA,EAAAA,QAAAA,YAAAA,GAAAA,KAAAA,EAAAA,OAAAA,YAAAA,GAASkO,KAAK6tB,GAEjD,GAAAkB,MACQA,GAAAA,CAAAA,EACN,gBAEM,KAAU,EACZ,EACW,KACH,CAAAC,EAAAC,CAAA,EAAAZ,EAAA,MAAA,GAAA,EACRa,GAAA,SAAAD,EAAA,EAAA,EAAA,EACFE,GAAA,IAAA,KAAAH,EAAAE,GAAA,CAAA,EACME,EAAQH,GAAME,GAAId,YAAe,CAAA,KAAAc,GAAA,SAAA,EAAA,GAAA,SAAA,EAAA,SAAA,EAAA,GAAA,CAAA,IAAAA,GAAA,QAAA,EAAA,SAAA,EAAA,SAAA,EAAA,GAAA,CAAA,GACjCD,EAAa52B,IAAAA,KAAAA,EAAiB42B,GAAM,EAAA,CAAA,EAQpCC,EAAYvgC,GAAKogC,EAAAA,kBAAoBK,EAAA,SAAA,EAAA,GAAA,SAAA,EAAA,SAAA,EAAA,GAAA,CAAA,IAAAA,EAAA,QAAA,EAAA,SAAA,EAAA,SAAA,EAAA,GAAA,CAAA,GACrCD,IAAAA,EAINvtB,GACMytB,EAAAA,GAAa,EAGnB5jC,EAAY,QAAA,IAEVsjC,EAAAA,GAAAA,EAAAA,QAAAA,EACAC,EAAAA,SAAAA,IAEAE,MAAAA,GAAAA,MAAAA,EAAAA,GAAAA,OAAAA,MAAAA,CACAE,EAAAA,QAAAA,EAAAA,IAAAA,UAAAA,CAAAA,WAAAA,CAAAA,GACAD,KAAAA,WACAE,MAAAA,EACD,OAAAV,EAAA,OAED,CAAI/hC,EACJ,IAAIgV,EAAAA,IAAAA,YAAAA,GAAW,WAAXA,MAAAA,EAAW,OAAA,CACbhV,MAAAA,GAAgB0iC,GAAA,SAAA,MAAA,EAAAlxB,EAAA,EAChBuwB,GAAAA,QAAgBvjC,IAAU,CACrBmkC,GAAA1O,GAAAz0B,CAAA,CACLQ,CAAQwR,EACRuwB,MAAAA,GAAAA,GAA2BvwB,SAAAA,QAAAA,GAC7B,MAAA,CAEA,MAAsBoxB,QACT39B,EAAmD,CACxD,KAEN49B,QACD,MAAA,CAAA,EACGH,KAAAA,EACF,CAEEC,CAAyB,MAC1BztB,GAAA,CAAA,EACKuL,GAAAA,EAAAA,CACC,KAAA,CAAA,MAAEtgB,CAAAA,EAAOsgB,MAAAA,EAAAA,GAAAA,SAAAA,QAAAA,CAAAA,EAAAA,SAAAA,KAAAA,CAAK,OAAA,EAAA,CAChB,EAAA,KAAA,EACE,GAAAmiB,GAAA,MAAAA,EAAA,QAAA,CAAAjB,GAAA,CAAAxiB,EAAA,CAAA,QAAWyjB,EAAA,IAAA9zB,KAAE2R,GAAM3R,GAAAtP,CAAA,EAAK,CACjC,GAAAsP,GACF,QAAA,EAEA,EACe,EACP,GAAAg0B,EAAA,QAAA,EAAA,CAAE3iC,MAAAA,GAAAA,EAAAA,IAAAA,IAAAA,GAAAA,EAAAA,EAAU+U,GAAYrV,KAAAA,CAGlB,GAAAkjC,GAEJ,MAAAD,EACGziC,KAAAA,QACT,CAAMyiC,CACJH,MACOztB,GAAA,KAAA,GAAA4tB,CAAA,CACFh0B,CAEL,EACFkG,GAAC,CAAA4sB,EAAA,WACGkB,UAA4BvjC,EAAA,GAAA,SAAA,QAAAW,CAAA,EAAA,SAAA,KAAA,CAC9B,MAAAsR,GACA0D,gBAAausB,EAAA,gBACPsB,EAAAA,WACGD,EAAAA,OAAAA,CACD,CAAA,GAGA97B,KAAAA,CACV,MAAA7G,GACF,KAAAsgB,EACF,EAAA,MAAAmhB,EAAA,QAAA,OACI5sB,OAAAA,IAAAA,MAAAA,GAAAA,SACsBxW,GAAAA,KAAAA,GAAAA,EAAAA,EAEP2B,GACNqR,QAAAA,GAAAA,CACPwxB,GAAiBvB,EAAAA,CAAAA,CAAAA,CAAAA,GAGjBE,CACF,MAACzsB,GACL,KAAAuL,EACA,CAAQtgB,CAAOsgB,KAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,CAAAA,EAAAA,GAASxb,GAAA,MAAAA,EAA8BzG,KAAAA,GAAAA,GAAAA,MAAAA,EAAAA,YAAayG,EAAA,YAAA,IAAA,EAAA,IAAAA,EAAA,IAAA,GAAAw8B,EAAAC,EAAA,cAAAC,EAAA,MAAAA,CAAA,IAAAxiB,EAAA,WAAAqiB,EAAA,KAAA,IAAA,KAAAA,CAAA,EAAA,eAAA,UAAA,CACnE,aACUx6B,KAAAA,SAER7G,CAAAA,CAAAA,IAAAA,GAJiE,cAI3DuU,mBAAkB,mBAAA,EACtBiuB,MAAAA,EAAyBrkC,IAC1BoU,EAAAosB,GAAA,IAAA,CACH,MAAAmE,EAAAC,EAAA,SAAA3jC,EAAA,GAAA,SAAA,QAAAW,CAAA,EAAA,QACO,OAAAgjC,EAAA,QAAAD,EACE/tB,CAAAA,EACPuL,CAAAA,EAAAA,CAAAA,CAAAA,EACFliB,EAAA,IAAA,EACF,SAAA,CAEA,GAAqB4kC,CACrBC,MACWjwB,EAAAA,MAAAA,IAcU2uB,EAAAliB,CAAA,CAAA,MACD,CAAA,CACL,GACH,CAMNsjB,cAAgC3jC,EAAA,GAAA,SAAA,QAAAW,CAAA,EAAA,aAAA,OAChCwS,GAAiC,CACrC,MAAMuwB,CAAAA,CAENC,IACA,EAAOD,CAAAA,CAAAA,CAAAA,EACT,KAAQ1jC,CAERhB,YAAAA,EACE,KAAA4U,EACM,OAAAK,CACF,EAAMoM,GAAAA,CAAAA,EACN/gB,EAAekU,GAAA,IAAA,CACf+uB,MAAAA,EAAc5+B,EAAA,SAAA,GAAAhD,CAAA,IAAAV,CAAA,EAAA,EAAA,SACJ2d,GAAA,CACVte,SAAAA,EACF,QAAAwkC,GAAAnjC,EACI,aAAAwS,EACI4wB,cAAAA,EAGNzkC,WAAY,EAAA,CAAA,CAAEykC,EAAAA,CAAAA,EAAc9jC,EAAAkL,EAAAgI,CAAA,CAAA,EAC5BywB,GAAAA,OACUpwB,GAAA,IAEZnP,EAAAC,EAAA,CACC,SAAA,CAAA0/B,EAAA3/B,EAAA,MAAA,CACC,MAAC,aAED,IAAA4/B,GAAEjwB,MAAAA,CAAaJ,SAAAA,UAAMK,WAAuB,EAL9BrR,GAACu/B,GAAAC,GAAAxiB,GAAA,CAAA,CAAAqiB,EAK6B/+B,EAAAkE,EAAA,CAE5C48B,GAAAA,IAAAA,CAAkBxwB,OAAQ,GACxBswB,mCACN,MACc,gBACV7jC,SAAAA,EAAAA,EAAAA,MAC0BU,IAC1BwS,KAAAA,GAAAA,CACAhI,CAAAA,EACU,eAAA,EAAAjI,EAAAI,EAAA,CACX,KAAA,SAEGrD,MAAUkL,wBAGlB,CAAM+4B,EAAAA,EAAAA,EAAAA,CACElK,QACHkI,MAAAA,CAAAA,GAAAA,eAA6CtiB,EAAAA,GAEhD,QACE,IAAA,CAAAsiB,GAGUr0B,GAAA,2BAAA,CAEC,EACLiY,MAAUoc,EAAA,GAAA,YACZ,SAAA,WAAA,CAEClI,EAAAA,EAAAA,EACC92B,CACEmE,GAAK,IAAGpH,CAAS,MAAKU,CAAG,GAAAwhC,EAAA,GAAA,WAAA,GACzBl+B,QAAM,IAAA,CACAk+B,GAAe9+B,iCAGhB,CAAM,EAAY,MAAE8+B,EAAA,YAAA,GAFrB,SAAA,UAKD,CAAA,EAAMj/B,EAAAkE,EAAA,CAASnD,GAAM,IAAAhE,CAAA,MAAAU,CAAA,GAAAif,EAAA,GAAA,UAAA,GAAgBpc,QAAK,IAAA,CAEhD4D,GACMyG,GAAY,0BAAUq0B,CAEzB,EACEr0B,MAAAA,EAAqC,YAAA,GACvC,SAAA,OAAA,CACF,EAAAk2B,EAAA,IAAAhZ,GAAA7nB,EAAAkE,EAAA,CACAnD,GAAAA,YAAwB,GAAKm+B,IAAArX,EAAA,KAAA,GAAA,WAAA,mBAAAA,EAAA,IAAA,CAAA,EAAA,GAAY1nB,QAC1C,IAAA,CAGDH,IAAK6nB,EAAA,MACEld,GAAY,gCAA+B,IAAY,EAAA,CAE1D,EACEA,MAAAA,IAAwCkd,EAAA,KAAA,YAAA,GAC1C,SAAA1mB,EAAA,OAAA,CACF,SAAA,CAAAnB,EAAA,OAAA,CACAe,MAAQk+B,qBACT,SAAA,GAAA,CAGDj/B,EAAAA,EAAK,IAAA,CAAA,CACHmE,CAAmD,SACpCo7B,IAAAd,GAAAt9B,EAAA,QAAA,CACb,MAAKub,gBAAOqiB,EAAA,YAAA,EAAA,GACVp0B,SAAAA,CAAAA,EAAoCvK,EAAA,CACtC,KAAA,QACF,KAAA,GAAA,CACAW,EAAAA,UAA6B,CAC9B,KAAA,QAGA8/B,SAAAA,EAAAA,GAAAA,MAAAA,EAAkBhZ,MAGV,MAAYkX,GAAA,UAMXG,IAAqB,IAAA,KAAA,EAAA,YAAA,EAAA,MAAA,EAAA,CAAA,EACZ,QAAAx/B,GAAA,CACb,KAAA,CACF,MAAAhC,EACOwhC,SAAAA,EAAoC,EAAG/+B,EAE9CgB,cAAAhB,GACE,QAAgCA,EAACzC,EAAA,CAChCmqB,MAAQnqB,CACL,EAAA,CAAA,CAAA,KAQP+gC,oBAAAA,IAAAA,KAAAA,CAAAA,EACCt9B,eAAA,UAAA,CAAe,MAAA,OAA0ChB,KACvDH,SAAK,CAAM,CAAA,EAAA,EAAa,CAAA,CAAK,CAC7BA,CAAA,CAAA,EAEsB0Q,KACJ,CAChB9H,MAAK41B,gBAAAA,EAAAA,YAAAA,EAAAA,GACL31B,4BACAX,SAAgB,GACR,IAAAs2B,GAAE9gC,IAAAA,IAAAA,KAAAA,EAAAA,YAAAA,EAAAA,MAAAA,EAAAA,CAAAA,EAAOujC,QAAAA,GAAAA,CAAS,KAAMpa,CAC9B,MAAAnpB,EAAqB,SAAAujC,EACrB1S,EAAAA,EAGe7wB,GAAAA,OAIfiN,KAIMo0B,MAAOrhC,CAAA,EACD,CAAA,CAAA,CACR,CAEJ,CACF,EAAE,CACF,CAAA,CAAA,CACG,CAAA,EAAA,CAAAD,EAGPuC,EAAYiI,EAAA44B,EAAAtB,EAAA,GAAAH,CAAA,CAAA,EAAAtjC,EACViF,IAAQ,OACR4C,MAAAA,GAAAA,EAAAA,GAAoB+M,UAApB/M,YAAAA,EAAoB+M,cAAAA,cAAAA,GACJqwB,GACXvC,QAAAA,SAAAA,CACL31B,SAAK,SAAmC,OAC9BnJ,YAAMqhC,GAAA,QAAA,YAAAG,EAAA,aAAA,CACd,CAAM,CAASD,EAAAA,CAAAA,EAAAA,EAAAA,GAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EAAavhC,GAAAA,IAC5B8C,GAAA,MAAAA,EAAI,IACJ+rB,IAAAA,IAAAA,EAEM,GAAA,EAAA,SAHe,KAKf,CAAA/rB,CAAA,CAAA,EAGR2+B,GACD,CAAA,CAAA3+B,GAAA,EADCzF,IAAAgY,GAEF,OAAA/U,EAAAg6B,GAAA,CAAA,MACA,GAAAx3B,GAAA,MAAAA,EAAA,KAAA,IAAAA,EAAA,KAAA,OAAA,GAAA,eACNrB,EAAA,KAAA,CAGJ1D,MACAV,qCAOFjB,SAAgB,CAAAkE,EAAA,IAAA,CAEd,SAAe+gC,EAAAA,GAAsBhhC,CACzB,KAAA+Q,EACV1U,OAAAA,CACA2kC,CAAAA,CAA8B,CAAA,EAClB/gC,EAAA,MAAA,CACV+gB,SACSqgB,EAAAA,OAAAA,CAEV,SAAA,CAAA,IAAA1wB,CAAA,CAAA,CACH,CAAA,CACEmwB,CAAAA,CAEJ,CAAM9rB,EACJ,GAAI,mBAAsB,SAAAhY,EAC1B,UAAe,2BACRsV,UAAAA,uBACT,WAAYgvB,EACZ,aACA,KAAoB3kB,EAAA,QAAEla,OAEtB,eACW/B,EAAA,SAAA,eAEP+C,cAAUhB,GACVy3B,QAAAA,CAAAA,EACEgF,EAAAC,EAAAxiB,EAAAqiB,GAAAv8B,GAAA,YAAAA,EAAA,KAAA,EAAA,SAAA,EAAA,UACQrB,EAAAkC,GAAA,CAMNlD,OAAAA,GAEAA,SAAAA,OACY,WAAO2Q,QAAaC,SAAAA,SAAAA,WAAiB/Q,EAAA,SAAA,CAEjDA,KAAAA,SAAAG,MAAAA,QACEA,SAAAA,EAAMC,EAAM,CAAO,KAAA,OACf,KAAA,GAAA,CACJ,CAAA,CAEH,EACHrD,SAAAA,CAAAA,EAAAA,GAAAA,CACU,SAAA,CAAAokC,GACA,QAAA,IAAA,EACEE,SAAAA,CACH,GAAA,MACe/7B,CACxBkE,OACew3B,EAAAA,EAAAA,CAEbhC,SAAAA,CAKS,CAET79B,EACQgc,EAAA,MAAAmkB,EAAA,GAAA,SAAA,OAAA,CAEG,KAAA9+B,EAAA,IAAA,CACE,EACF,CACTe,IACe,EAAA4Z,EAAe,SAAA,KAAA,IAAApI,CAAA,MAAA8Y,CAAA,EAAO1tB,MAC5B,CAAM,MAAA,8BAAA,CAAY,CAAA,IACjB,EACTA,SAEDgB,CAAAA,EAASf,EAAA,gBACI+gC,OACFjhC,EAAM,QAAA,CACb,MAAa,oBACP,SAAA,CAAA,iCAAAF,EAAA,IAAA,CACI,SAAA+U,CAAA,CAAA,EAAA,GAAEjY,CAAAA,CAAAA,CAAAA,CAAc,CAAA,EAAA,CAAA0T,GACVuE,EAAAA,GAAAA,CAAAA,QACX,IAAA,EACD,SAAY,CAA+B,GACzCrE,CACF,MAACyM,EAAA,MAAAhN,EAAA,GAAA,SAAA,OAAA,CACK,KAAA3N,EAAA,KAAA,IAAAzF,CAAA,CAAA,EAASogB,CACfxP,GAAAA,KAEAvR,cAAe,IAAAgU,CAAA,MAAAyd,CAAA,EACfzkB,MAAoC,CACtC,MAAA,8BAAA,CACC,CAAA,IACHjJ,EAEG,SAAM,CAAAH,EAAAI,EAAA,CAAY,KACvBe,UAAA,CAAA,EAAa,IAAAA,EAAA,QAAA,CAAmBhB,MAAA,oBACA,SAAI4U,CAAAA,0BAAAA,EAAAA,IAAAA,UACpC3E,CAAQ,CAAA,EAAA,GAAA,CAAA,CACA,CACT,CACU,CAAA,CACPlQ,CACE,CAAA,CACM,EAAAzC,CAAA,CACF,CAAkD,SAChDiT,GAAAA,EAAcA,CAAa3T,KAAAA,CAEvB,MAAAsE,EAAA,SAAAsC,EAAElG,MAAAA,EACRkQ,IAAAA,EAA4C,IAAA9E,EAE5CzM,QAAAA,EAAAA,IAAAA,CACAgN,CACF,EAAA2jB,EAAA,CAAA2S,EACCC,CAAA,GAAAjiC,GAAA,YAAAA,EAAA,MAAA,OAAA,GACL6jC,EAAA1lC,IAAEsE,EAEFH,IAAKwhC,EAAM,CAAAzC,EAAA0C,IAAA,CAAA,KAAY,CAAAC,EACvBvgC,CAAA,GAAAyH,GAAA,YAAAA,EAAA,MAAA,OAAA,GAAO7H,CAAM4gC,EAAAC,CAAA,GAAA/4B,GAAA,YAAAA,EAAA,MAAA,OAAA,SAAA,EAAA44B,EAAmBC,GACYD,EAC5CE,GAEHF,IAAAC,GAAA3C,EAAA8C,GAGNJ,IAAAE,GAAA5C,EAAA6C,EAKH,EAAM,OACGvgC,EAAAA,MAAAA,CACPsC,MAAAA,EACAjG,SAAAA,CAAAA,EAAAA,EAAAA,CACAkL,KAAAA,QACAC,KAAAA,GAAAA,KACUX,SAAM,CAAC,IAAAq5B,EACfxU,SAAAA,EACE,SAAc,GACpB,YACM+U,MAEAN,MAAAA,CACJ,oBACwBM,UAAe,MACnCL,GAAOC,CAAAA,EAAAA,EAAAA,CAAAA,EAAgB,MAAA,CAChBC,MAAAA,GAAgB,SAAA,CACvBF,QAA6C,CACjD,EAAiDv5B,EAAA,CAC1C,MAAA62B,EAAA,GAAA0C,CAAA,IAAA1C,CAAA,GAAA,GACT,SAAA,OAGE,EAAY19B,CAAAA,CAAUlB,CACT,EAAQG,SAAK,CAAAN,EAAA,SAAA,CACxBmB,MAAA,GACOogC,SAAAA,OAAAA,CACL59B,EAAAA,EAAAA,SAAAA,UACiB,YACD,OACd,CAAM,EAAA,MAAA,KAAA,CAAA,OAASo7B,EAAAA,KAAYlY,IAAAA,EAAAA,SAAAA,CACrB4a,OAEGh/B,EAAA,GAAA,SAAA,EAAA,SAAA,EAAA,GAAA,EACE,SACG,IAAA,KAAA,EAAAA,CAAA,EAAA,eAAA,UAAA,CAAA,MACD,MAAA,CACT,CAAA,EACFA,CAAA,CAAA,CAAA,CACFyF,CAAQ,EAAA,IAAAlI,EAAA,QAAA,CAAA,MAC8B,KAC1B,SAAA,SAAA2D,EAEV,MAAA+7B,GAAA,IAAA,KAAA,EAAA,YAAA,EAAA,KACD92B,GAAA,YAAAA,EAAA,MAAA,EAAA,KAAA21B,GACH,KAAA11B,GAAA,YAAAA,EAAA,MAAA,EAAA,KAAA,IAAA,KAAA,EAAA,YAAA,EAAE1I,WAEF,CAAQzC,KAAM,CAAG,MAAA+jC,EACjBzhC,SAAAA,CAAA,EAAgBN,EAAA,cAACq/B,EAAAwC,EAAA,QAAA,MAChBtjB,GAAAA,CAAAA,EAAW,OAAA,CAAAujB,EAAAzC,EAAA0C,CAAA,EAAU,MAAA,CAAUh/B,MAC9BzC,GACEtC,SAAAA,CAAAA,MAAAA,GAEoC,EACnCyC,GAIC4+B,MAAO0C,EAAA,GAAAA,CAAA,IAAA1C,CAAA,GAAA,GACR,SAAA,CAEH,MAAA,EAEJ/+B,CAAA,CACO8hC,CACA,EACLn+B,MAAAA,CACO+7B,MAAAA,OACF92B,CAAoB21B,CACzB11B,CAAAA,CAAgD,CAAA,CAE9C,CCzmBV,MAAMkG,GAAQ,GAEd,SAASgzB,IAAY,CACnBpB,GAAS,YAAa,IAAI,EACpB,KAAA,CAAE7jC,MAAAA,EAAOC,SAAAA,GAAasB,EAAI,EAC1B2jC,EAAoBnmC,IAC1B,eAAeomC,EAAe1vB,EAAW,CACnCA,OAAAA,GAAa,CAACyvB,EAAkBjmC,WAClCimC,EAAkBjmC,QAAUe,EAAMM,GAAGsnB,UAAUpnB,KAAK,CAAEC,MAAOwR,EAAAA,CAAO,GAE/D,MAAMizB,EAAkBjmC,QAAQ4B,MACzC,CAEA,OACEqC,EAACg6B,GAAQ,CACPx2B,MAAM,YACN/F,GAAG,YACHy8B,UAAU,2CACVC,UAAU,2BACVp9B,SAAAA,EACAs9B,WAAY4H,CAAAA,CACb,CAEL,CCvBA,MAAMlzB,GAAQ,GAEd,SAASmzB,IAAa,CACpBvB,GAAS,QAAS,IAAI,EAChB,KAAA,CAAE7jC,MAAAA,EAAOC,SAAAA,GAAasB,EAAI,EAC1B8jC,EAAqBtmC,IAC3B,eAAeumC,EAAgB7vB,EAAW,CACpCA,OAAAA,GAAa,CAAC4vB,EAAmBpmC,WACnComC,EAAmBpmC,QAAUe,EAAMM,GAAGunB,WAAWrnB,KAAK,CAAEC,MAAOwR,EAAAA,CAAO,GAEjE,MAAMozB,EAAmBpmC,QAAQ4B,MAC1C,CAEA,OACEqC,EAACg6B,GAAQ,CACPx2B,MAAM,QACN/F,GAAG,aACHy8B,UAAU,mCACVC,UAAU,uBACVp9B,SAAAA,EACAs9B,WAAY+H,CAAAA,CACb,CAEL,CCnBA,SAASC,IAAmB,CACpB,KAAA,CAAEvlC,MAAAA,EAAOC,SAAAA,GAAasB,EAAI,EAChCsiC,GAAU,oBAAqB,KAAI,EACnC,KAAM,CAAC71B,EAASC,CAAU,EAAInO,EAAS,SAAS,EAE1C,CAACgrB,EAAkBT,CAAmB,EAAIvqB,EAAS,CAAE,CAAA,EAC3Dd,OAAAA,EAAU,IAAM,CACdiP,EAAW,SAAS,GACnB,SAAY,CACP,GAAA,CACI0Y,MAAAA,EAAO,MAAMH,KACnB6D,EAAoB1D,CAAI,EACxB1Y,EAAW,SAAS,OACV,CACV3O,SAAe,CACf2O,CAAkB,IACpB,EACC,CAAA,CAAA,EACA/K,EAAA,MAAA,CAEL,GAAA,yBACOvC,MAAG,iBAAyBsD,SAAM,KAAiBuB,SAASnB,EAAA,MAAA,CAAIhB,MAAAA,qBAC9DY,SAAM,CAAAf,EAAA,SAAA,CAAoBG,SAC7BH,EAAA,MAAA,CAAAG,MAAAA,cACOY,SAAM,CAAAI,EAAA,MAAA,CAAahB,MAAAA,cACjBY,SAAM,CAAAf,EAAA43B,GAAA,CAAA,CAAA,EAAA53B,EAAAkE,EAAA,CAAa/D,GAAAA,IAEhBgE,MAAG,eAAIpD,SAAMf,EAAAI,EAAA,CAAcD,KAAAA,OACzBE,KAAK,GAAA,CAAA,CAAY,CAAA,CAAG,CAAE,CAAA,EACvBL,EAAA,KAAA,CAETA,SAAA,mBAAA,CAAA,EAAIA,EAAA,MAAA,CACJA,MAAA,aAAA,CAAA,CAAKe,CAAM,CAAA,CAAgB,CAAA,EACxBf,EAAA,OAAA,CAEPA,SAAA4nB,EAAA,OAAA,EAAA5nB,EAAA,KAAA,CACG4nB,MAAAA,YACK7mB,SAAM6mB,EAAA,IAAAC,GAAA7nB,EAAA,KAAA,CACP4nB,SAAAA,EAAAA,EAAAA,CACCznB,GAAAA,EACO,IAAApD,CAAA,MAAA8qB,EAAA,IAAA,GAAA,MAAAA,EAAA,IAAA,GACH1jB,SACc,CAAAnE,EAAAI,EAAY,CACzBD,KAAAA,SAEI,CAAA,EAAM,IAAAH,EAAA,OAAA,CAAW,SAAEA,EAAA,IAAA,CAAA,CAAAG,CAAWsI,CAAAA,CAAY,CAAA,CAAA,CAC3C,CAAA,EAETqC,IAAA,UAAA9K,EAAA,IAAA,CACC,MACU,WACXe,SAAMf,EAAAqY,GAAA,CAAUlY,OACjBH,EAAO,CAAA,CAAO,CAAA,EAAE8K,IAAA,QAAA9K,EAAA,IAAA,CACf,MACW,WACXe,SAAM,mCAAA,CAAA,EAAWf,EAAA,IAAA,CAEpBA,MAAAA,WAAGe,SAAM,2BAAA,CAAA,CAAW,CAAA,CAAyB,CAAG,CAAA,CAE7C,CAAA,CACJ,CCvDX,MAAMgO,GAAQ,GAEd,SAASuzB,GAAU,CAAE9+B,MAAAA,EAAOqV,KAAAA,EAAMpb,GAAAA,EAAI,GAAGsvB,CAAM,EAAG,CACvCvpB,GAAAA,GAAS,YAAaqV,GAAQ,YAAY,EAC7C,KAAA,CAAE/b,MAAAA,EAAOsB,UAAAA,EAAWrB,SAAAA,GAAasB,EAAI,EACrCoC,EAAaC,GAAYzD,CAAM,EAC/BslC,EAAe1mC,IACf2mC,EAAa3mC,IAEXswB,eAA0B3oB,EAAAA,EAAAA,EAElC+O,MAAoC,WAC9BA,EAAAA,QAAcgwB,EAAaxmC,GAAS,UAAA,KAAA,KAAA,CACtCwmC,MAAAA,EAAoD,CAAA,GACtD,MAAA9vB,EAAA,MAAA8vB,EAAA,QAAA,KAAA,EACA,GAAA,CACI,MAAA7kC,CAAEA,EAAAA,EAAM,GAAI+U,GAAAA,MAAAA,EAAAA,OAAAA,CAChB,MAAmB,GACbgwB,IACW/kC,EAAA,CAAA,EAAA,KAAA8kC,EAAA,UACbC,MAEAD,EAAA,QAAA9kC,EAAA,CAAA,EAAA,IAEQiB,EAAAA,QAAkB6jC,GAAAA,CAC5BtC,GAAA1O,EAAAz0B,CAAA,CAGAW,CAAAA,EACEwiC,EAAAA,GAAyBxiC,EAAAX,CAAA,EAC1BwV,GAAAkwB,GACO3Q,KACRqB,GAAiBsP,EAAAA,CAAAA,EAA0C/kC,EAAA,KAAA,CAAA6W,EAAAL,IAAA,CAC3Dif,MAAAA,EAAAA,WAAkC,SAAA,EAIhC,OADmB,IAAA,KAAAjf,EAAA,SAAA,EACL8e,CACd,CAAA,CACA,CAAeA,MAChB,CACH,GAAAvgB,EACO,MAAA/U,CAAA,CAELA,CACF,eAAAoB,GAAA,CACF,GAAA,CAEA,MAAA2T,EAAiC,MAAA3V,EAAA,GAAA,UAAA,KAAA,KAAA,CAC3B,MAAA,EACF,WAAsBA,OACd,CAAA,EACG,KAAA,EAAA,WAIP,EAAA2V,EAAE/U,MAAAA,GAAAA,GAAAA,MAAAA,EAAAA,SAAU+U,EAAAA,QAAAA,EAAAA,CAAAA,EAAAA,GAChBrW,EAAY01B,GAAAp0B,EAAAX,CAA8BhB,EAC1C2B,KAAmBA,EAAA,MAAA,EACN3B,EAAAA,KAAAA,GAAgB,CAAAy1B,EAAG/zB,MAAAA,GAK9B,MAAA,CACF,MAAA,EACO,CAAA,CAEA3B,OAAAA,EAAA,IAAA,CACT,IAAAoC,EACF,OAAA,SAAA,CAEApC,GAAAA,EAAgB,CACVoC,EAAAA,EAAAA,KAAAA,YACS,gBAAAU,KAAAV,EAAA,CACPE,GAAW,CAAAF,EACPE,MACEO,GAAAA,EAAI,wBAAwB,CACpC,MAAA0N,YACE6zB,GAAKhiC,EAAAA,CAAAA,CAAK,SAAAU,EAAA,QAAA,SAAA,CACNA,MAAAA,IAAiC,QAC7ByN,KAAeq2B,EAAAA,CAAAA,EACrBtmC,IACA8jC,EAAAA,YACF,CACE,CACQvhC,CAER,KACIihB,IAAAA,QAAGA,EAAAA,GAAAA,YAAAA,EAAAA,cAAAA,MAAAA,EAAAA,KAAAA,GACT1hB,EAAA,IAAA,CAEF9B,EAAAA,CAAAA,CAAAA,CAAQuC,EACVqB,EAAAg6B,GAAA,CACF,MAAGx2B,GAAA,YACH,GAAA/F,GAAa,YACXS,UAAmB,uBACb,UAAA,wBACR,SAAAnB,EACF,WAAc4lC,EAEd,gBAAA7jC,EAEI0E,UAAgB,GAChB/F,eAAUgD,EAAA,SAAA,eACVy5B,GAAUnN,EAEVhwB,cAAAA,OACAs9B,iBAAYsI,EAAAA,CACZ7jC,CAAAA,CCtGN,MAAMiQ,GAAQ,GAKR6zB,GAAsB,EACtBC,GAAmBD,GAAsB,EAE/C,SAASE,GAAS,CAAEpmB,MAAOqmB,EAAWC,WAAAA,EAAY,GAAGjW,CAAM,EAAG,CAExD,GAAA,CAAEnI,QAAAA,EAAS,GAAG9Y,CAAAA,EAAWk3B,EAAa,GAAKlE,KAC3C/R,EAAMnI,UAASA,EAAUmI,EAAMnI,SACnC,IAAIqe,EAAWre,EAAQrK,KAAK,EAAEiL,MAAM,QAAQ,EAC5Cyd,EAASnpB,KAAK,EACd8K,EAAUqe,EAAS,CAAC,EACpB,KAAM,CAAC3U,EAAcC,CAAe,EAAIC,GAAgB,EAClD9R,EAAQqmB,GAAa,CAAC,CAACzU,EAAaxsB,IAAI,OAAO,EAC/CohC,EAAaxmB,EAAQ,WAAa,GAElC,CAAE5f,MAAAA,EAAOC,SAAAA,EAAUkL,cAAAA,GAAkB5J,EAAI,CAC7CtB,UAAUgwB,GAAAA,YAAAA,EAAOhwB,WAAY+O,EAAO/O,QAAAA,CACrC,EACK,CACJD,MAAOqT,EACPpT,SAAUqT,EACVnI,cAAe8N,GACb1X,EAAI,EACF8kC,EAAeF,EAAS3hC,IAAKixB,GAAO,IAAGA,CAAE,EAAC,EAAEtQ,KAAK,GAAG,EACpDmhB,EAAmB1mB,EAAS,gBAAiB,GAC7ClZ,EAAQzG,EACT,GAAEomC,CAAa,GAAEC,CAAiB,OAAMrmC,CAAS,GACjD,GAAEomC,CAAa,GAAEC,CAAiB,GACvCzC,GAASn9B,EAAQ,wBAAuB,EACxC,MAAMg/B,EAAa3mC,IAGbwnC,EAAQxnC,EAAOyJ,MAAS,EAC9B,eAAeg+B,EAAc/wB,EAAW,CAUhCE,MAAAA,EAAU,MAAM3V,EAAMM,GAAGmmC,UAAU1b,IACtC7kB,QAAQ4hB,CAAO,EACftnB,KAAK,CACJC,MAAOwR,GACPy0B,IAAKP,EAASpR,MAAM,CAAC,EACrB4R,MAAOlxB,EAAYjN,OAAY+9B,EAAMtnC,QACrC2nC,UAAWhnB,CAAAA,CACZ,EACA/e,KAAK,EACJ,GAAA,CAAED,MAAAA,CAAU+U,EAAAA,EAChB,OAAI/U,GAAAA,MAAAA,EAAOE,SACL2U,IACSxW,EAAAA,QAAU2B,EAAM,CAAC,EAAED,IAIhCC,EAAMuU,QAAkBuf,GAAA,CACtB0O,GAAW1O,EAAMz0B,EAAU,CACzB4mC,cAAejnB,CAAAA,CAChB,CAAA,CACF,EAED2mB,EAAMtnC,QAAU2B,EAAMA,EAAME,OAAS,CAAC,EAAEH,IAEnC,CACL,GAAGgV,EACH/U,MAAAA,CAAAA,CAEJ,CAEA,eAAeoB,GAAkB,CAC3B,GAAA,CACI2T,MAAAA,EAAU,MAAM3V,EAAMM,GAAGmmC,UAAU1b,IACtC7kB,QAAQ4hB,CAAO,EACftnB,KAAK,CACJC,MAAO,EACPimC,IAAKP,EAASpR,MAAM,CAAC,EACrB+R,SAAUpB,EAAWzmC,QACrB2nC,UAAWhnB,CAAAA,CACZ,EACA/e,KAAK,EACJ,GAAA,CAAED,MAAAA,CAAU+U,EAAAA,EAEhB,OADQuf,EAAAA,GAAct0B,EAAO,QAAQ,EACjCA,GAAAA,GAAAA,MAAAA,EAAOE,aAID,CACH,MAAA,EACT,CACF,CAEA,KAAM,CAACimC,EAAeC,CAAgB,EAAIlnC,EAAS,SAAS,EACtD,CAACqC,EAAMsR,CAAO,EAAI3T,EAAS,EAEjCd,EAAU,IAAM,EACb,SAAY,CACP,GAAA,CACImD,MAAAA,EAAO,MAAMnC,EAAMM,GAAGqmB,KAAKzgB,QAAQ4hB,CAAO,EAAE5mB,QAClD5B,EAAQuC,CAAQ,CAChB4R,MAAY,CAAA,CAAA,IAEZnU,EAAAA,CAAAA,CAAAA,CAAAA,EACF,MAAA2nC,EAAAd,EAAA,QAAAJ,GAAA,OACC7iC,EAAAg6B,GAAA,CACL,MAAAx2B,EAEMugC,eAAAA,CAAad,IAAmBJ,EAAAA,KAAAA,CAEtC,4BAGIr/B,SAAAA,CAAAA,EAAAA,IAAAA,CAEE,SAAA2/B,CACE,CAAU,EAAAnjC,EAAA,MAAA,CAAqBG,SAC7BH,CAAA,CAAA,CAAAG,CAAIgjC,CAAY,EAChB,GAAAhjC,UAAMpD,SAAAA,EAAe,UACnB,gDAGRU,UAAG,qCACHV,WAAAA,EACAm9B,gBAAAA,EACAC,UAAU,GACVE,KAAYiJ,EAAAA,QAAAA,OACZxkC,QAAAA,EACAs7B,cAAS,SACTO,YAAwBr1B,GAAAA,CACfoX,OAAAA,GAEK,gBAAA,GACd8d,gBAEIjB,WAAM,QACNyK,SAAe,SACfrhB,WAAS3iB,EAAA,SAAA,CACE,KAAA,SACF,MAAA,QACTuD,SACEvD,EAAAI,EAAA,CAAa,KAAA,OAAe,KAAA,GAAA,CAAOD,CAC5B,CAAA,EAAM,SAAY,CAAA,CAAA,CAAAlB,GAAAgkC,EAAA,SAAA,GAAA9hC,EAAAC,EAAA,CAAG,SAAE,CAAApB,EAAA6D,GAAA,CACtB,QAAA,GACT1D,QAEElB,YACDkB,aACG0D,aAAW+gB,CAAA,IACV9gB,SAAO+/B,IAAA,WAAA,CAAA57B,EACPqQ,QAASrZ,IAAKiX,CACdnS,WAAmC,EACnCJ,EAA4B,YACb,GAAA,KAAA,QAAAihB,CAAA,EAAA,SAAA,EAAA,KAAA,IAAA,CACbkf,EAAAA,IACS5tB,EAMD9Y,UACKwnB,EAGPrU,CAAQ,EAAA5F,GAAK1L,eAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,MAAiBS,GAAA,CAAM,MAACA,CAAA,CACrCiL,CAAW,EAAA,QAAA,IAAA,CAEZs5B,EAAa,SAAA,CACZ76B,CAAAA,EAEFtM,EACConC,GAAAA,KAAc,QAAAtf,CAAA,EAAA,OAAA,EAAA,KAAA,IAAA,CACbkf,EAAAA,CACD,GAAA7kC,EACE,UAAA,EACLnC,CAAMM,EAIMuN,GAAA,aAAAia,CAAA,EAAA,CAAA,CAAA,EAAA,MAAK3lB,GAAAA,CAAAA,MAAiBS,CAAA,CAAA,CAAA,EAAM,QAAA,IAAA,CACzBokC,EAAA,UAAqB,CACjC,CAGC1nC,EACF,SACC8nC,EAAQ,UAAM/iC,EAAAC,EAAA,CACb0iC,SAAAA,CAAAA,EAAAA,EAA0B,CAC5B,KAAC,cAAA,CACL,EAAA,IAAA9jC,EAAA,OAAA,CACF,SAAA,YAAA,CAECf,CAAAA,CACC,CAAAkB,EAAAA,EAAAA,EACO,CAAA,SAAM,CAAAH,EAAAI,EAAA,CAAgB,KAAEJ,MAAA,CAAA,EAAM,IAAAA,EAAA,OAAA,CAAiB,SAAA,QAAA,CAGtDmB,CAAAA,CAAA,CAAAhB,CACO,CAAA,EAAAH,EAAM0D,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA1D,EAAQmkC,GAAE,CAAA,UAAM,QAAA,SAAa,SAAA,CAAA,EAAAhjC,EACxCsC,GAAA,CACH,KAEHzD,WAGJA,QAAW,CAAA,CAAA0c,EAACrb,QAAU,IAAA,CAAQqb,EAC9Bvb,EAAS,OAAA,OAAA,EAEPmI,EAAWoT,IAAAA,QAAAA,GAAAA,EAET6R,EAAWD,CAAA,CACTA,EAA2B,SACtB,CAAAtuB,EAAAI,EAAA,CACQgD,KAAAA,cAAgB,CAC/B,EAAA,IAAApD,EAAA,OAAA,CACAuuB,MAAAA,YACF,SAAA,YAAA,CAAEpuB,CAAAA,CAEG,CAAA,EAACE,EAAKqD,GAAA,CAAA,CAAA,EAAA1D,EAAAokC,GAAA,CAAc,UACzBpkC,aAAA,SAAY+jC,EAAA,SAAY,CAAA,CAAiB,IAAAxhC,CAAA,IAE1CmB,EAAAA,QACwB,SAAAhE,GAAA,UAAuBqkC,EAAAA,eAAAA,QAC7C5jC,GAACue,IAAA7f,EAAAa,EAAA,OAAA,CAAA,EAAA,QAAA,YAAAb,EAAA,OAAA,YAAA6f,GAAA,KAAA7f,GAAE0D,GAAAA,CAAAA,EAAAA,KAAAA,IAAAA,GAAAA,YAAAA,IAAAA,EAAAA,YAAAA,CAAAA,IACFpB,EAAA,KAAAkjC,CAAA,IACmB,KAAA,EACb51B,SAAe,KAAA1R,EAAA,IAAAA,CAAA,MAAAkmC,EAAA,KAAA,GAAA,CAAA,GAAA,MAAAA,EAAA,KAAA,GAAA,CAAA,GAAAC,CAAA,GAIfmB,EAKApB,SAAAA,CAAAA,IAAwB,CACxBA,KAAAA,SAMAt1B,CAAAA,EAAAA,EAAAA,SAGF,IAAApL,EACF,KAAA,OAAEpC,YAEFH,EAAK,OAAA6iC,EAAA,QAAA,cAACxiC,SAAK,GACXL,YAAA,MACEuC,eAAAA,MACAtC,WAAK,GACL+kB,QACE+e,mBAEFtc,SAAQsc,CAAA,CAAA,CACRpc,CAAY,CAAA,CACG,CAAA,EAAA3nB,EACHskC,GAAA,CAAA,aAEJ,GAAA,SACEP,EAAAA,IAAAA,CAAAA,EAAAA,IAAAA,EAAAA,GAAAA,CAAW,SACrBd,EAAA,SAAA,EACE,QAAAvjC,GAAA,CAGVM,EAAU,OAAAyC,EAAA,CAAA,EAAawgC,EAAA,KAAA,WACX3hC,KAAAA,EAAQmB,KACP,MAAAwgC,EAAA,KAAA,GAAA,CAAA,GAAAC,CAAA,GAAA,MAAAD,EAAA,KAAA,GAAA,CAAA,GAAAC,CAAA,EAEPv/B,EACAzD,SAAgB,CAAAF,EAAAI,EAAA,CACLwD,KAAAA,IACTq/B,IAAAA,iBAMAt1B,MAAAA,aAE0C,CAC5C,EAAAxM,EAAA,OAAA,CAAEhB,SAEFH,CAAAA,EAAK,OAAA,CAAM,MAAA,qBAAQ,SAAA,GAAuB,CAAA,EAAAuyB,CAAA,CAAA,CAAe,CACzDpxB,CAAAhB,EAAAA,CAAAA,CAAAA,CACE,CAAA,EAAAH,EAAY0D,GAAA,CAAA,CAAA,EAAAvC,EAAAsC,GAAA,CAAA,SAAqB,CAAAsS,EAAC,QAChC,IAAA,CAAA,GACG9Y,EAAA,UAAA,QAAAqnB,GAAA,CACC,MACX,OAAAA,EAAA,6CAAA,EAEF5gB,eAGgB,CACTzG,KAAAA,UAEC,QAAAgmC,YAEH,SAAAlmC,EACF,MAAA2f,EAAA,KAAA,MACA,EACQzf,EAAA,UAAA,KAAA2iB,GAAAA,EAAA,OAAA0G,EAAA,MAAA1G,EAAA,QAAA,MAAA,QAAA,EAAA,KAAA,EAAA,KAAA,GAAA,IAAA0G,EAAA,QAAA,MAAA,QAAA,EAAA,KAAA,EAAA,KAAA,GAAA,IAAA1G,EAAA,SAAAA,EAAA,WAAA0G,EAAA,SAAA,MAAA1G,EAAA,MAAA,CAAA,CAAAA,EAAA,OAAA,CAAA,CAAA0G,EAAA,MAAA,GAAA,EAENvpB,MAAAA,8BAAAA,GAEFE,EAAA,UAAA,KAAAqpB,CAAA,EAEMie,GAAAA,wBAA0BC,EAe9Bp7B,EAAoC,SAC/B,CAAApJ,EAAAI,EAAA,CACEslB,KAAAA,UACP/a,CAAAA,EAAAA,IAAAA,EAAW,OAAuB,CACpC,SAAA,iBAAA,CACF,CAAA,CAAA,CAAExK,EAAAA,EAAAA,GAEG,CAAA,QAAM,IAAA,CAAY,IAAEH,EAAA,OAAA,6CAAA,EAAAG,GAAM,CAAA,KAAA,KAAAskC,CAAA,EAAA,CAAsBA,GAEvDtjC,MAAS,kBAAA,QAEDsjC,CAGAA,IACEA,EAAAA,EAAAA,YAAAA,EAAAA,KAAAA,EAAar7B,SAAwB,KAAA,IAAAq7B,CAAA,MAAAxB,EAAA,KAAA,GAAA,CAAA,GAAAC,CAAA,GAE3C,EACA,SAAiB,CAAAljC,EAAAI,EAAA,CACDqkC,KAAAA,KAEd92B,CAASmgB,EAAAA,IAAAA,EAAAA,QAGX,SAAA,yBAAA,CACF,CAAA,CAAE3tB,CAAAA,EAAAA,IAEGpD,GAAAoE,EAAAsC,GAAA,CAAA,QAAM,IAAA,CAAO,SAAEzD,KAAA,IAAAoQ,CAAA,MAAA6yB,EAAA,KAAA,GAAA,CAAA,GAAAC,CAAA,EAAA,EAA6B,SAAO,CAAAljC,EAAAI,EAAA,CAEzDgQ,KAAoBrT,KACV,OACEmD,EAAM,QAAA,CACJ4tB,MAAAA,oBAGX,SAAA,CAAA,sBAAA9tB,EAAA,IAAA,CAAEG,SAEFH,CAAW,CAAA,EAAA,GAAA,CAAA,CAAO,CAAA,CAClB,CAAA,CAAA,CAAa,CAAA,CACQ,EAAAjD,EAAIqT,CAAAA,CAAAA,CCnXvC,MAAMrB,GAAQ,GAEd,SAAS21B,GAAK3X,EAAO,OACbtsB,MAAAA,EAAaC,GAAYzD,CAAM,EAC/B,CAAEH,MAAAA,EAAOC,SAAAA,GAAasB,EAAI,EAC1BZ,GAAKsvB,GAAAA,YAAAA,EAAOtvB,OAAMqhC,EAAAA,GAAAA,IAAAA,YAAAA,EAAarhC,IAE/B+kC,EAAa3mC,IAGb8oC,EAAe9oC,IACrB,eAAe+oC,EAAUryB,EAAW,EAC9BA,GAAa,CAACoyB,EAAa5oC,WAChBA,EAAAA,QAAUe,EAAMM,GAAGmmC,UAAUjmC,KAAK0F,QAAQvF,CAAE,EAAEH,KAAK,CAC9DC,MAAOwR,EAAAA,CACR,GAEH,MAAM0D,EAAU,MAAMkyB,EAAa5oC,QAAQ4B,KAAK,EAC5C,GAAA,CAAED,MAAAA,CAAU+U,EAAAA,EAChB,OAAI/U,GAAAA,MAAAA,EAAOE,SACL2U,IACSxW,EAAAA,QAAU2B,EAAM,CAAC,EAAED,IAIhCC,EAAMuU,QAAkBuf,GAAA,CACtB0O,GAAW1O,EAAMz0B,CAAQ,CAAA,CAC1B,GAEI,CACL,GAAG0V,EACH/U,MAAAA,CAAAA,CAEJ,CAEA,eAAeoB,GAAkB,CAC3B,GAAA,CACI2T,MAAAA,EAAU,MAAM3V,EAAMM,GAAGmmC,UAAUjmC,KAAK0F,QAAQvF,CAAE,EAAEH,KAAK,CAC7DC,MAAO,EACPqmC,SAAUpB,EAAWzmC,OAAAA,CACtB,EACG,GAAA,CAAE2B,MAAAA,CAAU+U,EAAAA,EAEhB,OADQuf,EAAAA,GAAct0B,EAAO,MAAM,EAC/BA,GAAAA,GAAAA,MAAAA,EAAOE,aAID,CACH,MAAA,EACT,CACF,CAEA,KAAM,CAACN,EAAMunC,CAAO,EAAIjoC,EAAS,CAAE4G,MAAO,MAAA,CAAQ,EAEzClG,GAAAA,EAAKkG,MAAQ,QAAO,EAC7B1H,EAAU,IAAM,EACb,SAAY,CACP,GAAA,CACIwB,MAAAA,EAAO,MAAMR,EAAMM,GAAG+b,MAAMnW,QAAQvF,CAAE,EAAEO,QAC9C6mC,EAAQvnC,CAAI,CAAA,MAEF,CAAA,CACVlB,IAAe,EACjB,CAAAqB,CAAA,CAAA,EAAA,KACC,CAAAmc,EAAAC,CAAA,EAAAjd,EAAA,EAAA,EACC,CAACkoC,EAAAC,CAAA,EAAAnoC,EAAA,EAAA,EAEP,OAAOgd,EAAAA,EAAAA,CACP,SAAOkrB,CAAAA,EAAAA,GAAAA,CAEP,QACE,MAAA3kC,GAAAA,OAGIqD,UAAYA,eACZ/F,UAAG,wBACHy8B,SAAAA,EACAC,WAAUyK,EACV7nC,gBAAAA,EACAs9B,UAAYuK,GACZ9lC,eAAAA,EAAAA,SAAAA,eACAs7B,cAAS,OACT5wB,YAAAA,KAEc,GAAA,KAEd+wB,MAAAA,eACQp2B,SAAGnE,EAAAI,EAAA,CAAW,KAAA,OAAcD,KAAAA,GAC3B,CAAA,CAAM,CAAA,EAAY,UAAKgB,EAAAkC,GAAA,CACxB,OAAA,GAERm3B,gBACQ,GACJjB,SAAM,OACNyK,WAAe,QACfrhB,SAAS,SACTwO,WAAWnxB,EAAA,SAAA,CACF,KAAA,SACTuD,MAAAA,QACUtD,SAAKD,EAAAI,EAAA,CAAe,KAAA,OAAOD,KAAAA,GAC5B,CAAA,CAAM,CAAA,EAAY,SAAK,CAAAgB,EAAAsC,GAAA,CACtB,QAAA,IAAAoW,EAAA,CACT1Z,KAAAA,CAEQ,CACPD,EAEI5C,SAAAA,CAAAA,EAAAA,EAAAA,CACD,KAAA,SACF6C,KAAAA,GAEI,CAAA,EAAMH,EAAA,OAAA,CAASM,SAAK,MAAA,CAAK,CAC9BN,CAAA,CAAA,EAAAG,EAAMsD,GAAA,CAAI,QAAO,IAAAshC,EAAA,EAAA,EAEnB5jC,SAAS,CAAAnB,EAAAI,EAAA,CAACF,KAAAA,QAA+CC,KAAAA,GAClD,CAAA,EAAMH,EAAA,OAAA,CAAQM,SAAK,gBAAA,CAAK,CAC7BN,CAAA,CAAA,CAAA,CAAM,CAAA,CAAqB,EAAAvC,CACnB,EAACmc,GAAA5Z,EAAAc,GAAA,CAAA,MACN,QA7CJrD,QAgDNmc,GAAAA,CAESla,EAAA,SAAAA,EAAA,iBACU,EAAA,CAEZma,EACF,SAAA7Z,EAAA+N,GAAA,CACF,KAAA6L,GAAA,YAAAA,EAAA,KAAEzZ,WAEU,CACJyZ,EAAsBtc,QAAAA,WAAAA,EAAAA,OACP4c,EAAA,IAAA,EACR+e,EAAAA,QAAuB/e,YAChC2qB,cAAmB,MAInBl3B,EAAgB,EAAA,CAClB,CACAkM,CAAAA,CAA6B,CAC/B,EAAAirB,GAAA9kC,EAAAc,GAAA,CAAE,MACH,QACI,QAGPd,GAAAA,CACQN,EAAA,SAAAA,EAAA,iBACU,EAAA,CAEZqlC,EACF,SAAA/kC,EAAAglC,GAAA,CACF,OAAAvnC,EAAE0C,YAEgB4kC,EAAA,EAAA,CAAA,CAAA,CACRtnC,CACRkD,CAAAA,CAA8C,CAAA,CAC/C,CAEJ,MACDskC,GAAA,GAEN,SAAAD,GAAA,CAEA,OAAAE,EACA,QAAAvkC,CAA2B,EAAEukC,CAAQvkC,KAAAA,CAAW,MAAA7D,EAIxC,SAAAC,CAAED,EAAAA,EAAAA,EAAOC,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,CAAAA,EAAiB,CAAA+N,EAAAC,CAAA,EAAAnO,EAAA,SAAA,EAC1B,CAACuoC,EAASC,CAAcxoC,EAAAA,EAAW,EAAA,EACnCyoC,EAAoBxpC,IAC1B,eAAO2hB,EAAqBjL,GAE5BkL,MAEA1S,EAAA,YACE0S,SAAiB,CACjB1S,GAAAA,EACawH,GAAA,CAAA8yB,EAAA,WACPA,EAAA,QAAAvoC,EAAA,GAAA,MAAA,QAAAooC,CAAA,EAAA,SAAA,KAAA,CACE3yB,MAAAA,EACF8yB,CAAgBtpC,GAGLkpC,MACRxyB,EAAA,MAAA4yB,EAAA,QAAA,KAAA,EACL,GAAA,CACA,KAAArnB,EACI,MAAAtgB,CAAEsgB,EAAAA,EAAMtgB,GAAAA,MAAAA,EAAAA,QACRA,EADkB+U,EACH/U,EAEJA,EAAK,OAAAA,CAAA,CAFD,EAIJynC,EAAAA,CAAAA,CAAAA,GAEb1nB,EAAY,EAAK,EAEjBA,EAAAA,SAAiB,CACnB,MAAA,CACA1S,EAAW,OAAS,EAEpBA,IACF,CAAAjP,OAAAA,EACC,IAAA,CACLwpC,EAAA,EAAA,CAEAxpC,EAAAA,CAAAA,CAAAA,EACEwpC,EAAAA,MAAiB,CACnB,MAAK,QAEL,GAAA,gCACOvkC,SAAM,CAAA,CAAA,CAAAJ,GAAAX,EAAA,SAAA,CAAW,KAAA,6BAEVC,QAAKU,EAASI,SAAMf,EAAAI,EAAA,CAAuBO,KAAAA,GAAAA,CAAQR,CACpD,CAAA,EAACE,EAAK,SAAA,CAAG,SAAEL,EAAA,KAAA,CAGpBA,SAAA,gBAAA,CAAAG,CACE,CAAA,EAAAA,EAAI,OAAA,CAAc,SAAIgB,EAAA,KAAA,CAExBnB,SAAA,CAAAmlC,EAAA,IAAAI,GAAApkC,EAAA,KAAA,CAAAhB,YACEuT,GAAA,SACGyxB,EACChlC,SAAAA,CACe,CAAA,EAAUolC,EAAAA,GAAAA,CAAQxoC,QAAAA,EAC/BiD,OAAAA,CAAgB,CAAA,CAACwC,CAAS+iC,EAAQL,EAAAA,EAAAA,CAAAA,EAAAA,GAAAA,IAAAA,WAAAA,EAAAA,GAAAA,CAAe,GAAG,KAAA,SAEvDhI,GACYpyB,GAAAA,EACX9K,EAAQwlC,SAAGxlC,EAAA,SAAA,CAAK+I,KAAAA,SAA+C5I,MAAAA,cACrDF,QAAKqlC,EAASvkC,SAAM,YAAA,CAAA,CAAuBukC,CAAAA,CAAAA,CAAc,CAAA,CAEzD,CAAA,CAAA,CAEX,CAAA,CACC,CACC,SACJG,GAAA,CAET,QAAAjjC,EAEA,OAAA0iC,CAAyB,EAAE1iC,CAAS0iC,KAAAA,CAAU,MAAApoC,CACtC,EAAAuB,EAAA,EAAEvB,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,SAAAA,EAAc,CAAA4oC,EAAAC,CAAA,EAAA/oC,EAAA,EAAA,EACtB,OAAOkO,EAAAA,GAAmB,CAC1B,QAAO46B,CAAAA,EAEP,aACcvkC,EAAA,OAAA,UACAukC,CAAAA,WAAAA,EAAAA,SAAAA,aAAAA,CAAAA,CACV3hC,EAAc,YAA2C,kBAAM,SAC/DT,QAAM,IAAA,CACYoiC,KACH,SAAA,GACb,SAAa,CACX36B,GAAAA,CACa,MAAAjO,EAAA,GAAA,MAAA,QAAAooC,CAAA,EAAA,SAAA,OAAA,CACP,WAAA,CAAA1iC,EAAA,EAAA,CACF,CAAA,EACEyX,EAAAA,SAAazX,EACfmjC,EAAC,EAAA,CACD56B,MAAAA,CACA46B,EAAW,OAAK,EAEhB56B,OAEJA,EAAG,SAAA,GACE,SAAA,CAGLA,GAAAA,CAEa,MAAAjO,EAAA,GAAA,MAAA,QAAAooC,CAAA,EAAA,SAAA,OAAA,CACP,WAAA,CAAA1iC,EAAA,EAAA,CACF,CAAA,EACEyX,EAAAA,SAAazX,EACfmjC,EAAC,EAAA,CACD56B,MAAAA,CACA46B,EAAW,OAAI,EAEf56B,KACF,EAEJ,SAAA/K,EAAA,SAAA,CACF,KAAA,SAAEG,MAAAA,SAEFulC,EAAA,GAAA,QAAA,GACEzlC,SAAK6K,IAAA,UACL/J,SAAQ2kC,EAAkB,MAAA,SAAc,CAAA,CAClB,CAAUvlC,CAEb,CC/S3B,MAAM4O,GAAQ,GACR62B,GAAoB,IAAIC,gBAE9B,SAASC,GAAS,CAAE9C,WAAAA,EAAY,GAAGjW,CAAM,EAAG,CACpC,KAAA,CAAEjwB,MAAAA,EAAOC,SAAAA,GAAasB,EAAI,EAC1B,CAACiwB,CAAY,EAAI0U,EAAa,CAAC4C,EAAiB,EAAIpX,KACpD,CAACuX,EAAWC,CAAY,EAAIppC,EAAS,IAAI,EACzCqD,GAAO8sB,GAAAA,YAAAA,EAAO9sB,OAAQquB,EAAaxsB,IAAI,MAAM,GAAKikC,EACxDpF,GAAU,WAAU1gC,IAAS,UAAY,aAAe,EAAG,GAAG,WAAW,EAEzE,MAAMgmC,EAAmBpqC,IACnB2mC,EAAa3mC,IAEnB,eAAeqqC,EAAc3zB,EAAW,EAClCA,GAAa,CAAC0zB,EAAiBlqC,WACjCkqC,EAAiBlqC,QAAUe,EAAMM,GAAGC,cAAcC,KAAK,CACrDC,MAAOwR,GACPo3B,MAAO,CAAC,SAAS,CAAA,CAClB,GAEH,MAAM1zB,EAAU,MAAMwzB,EAAiBlqC,QAAQ4B,KAAK,EAChD,GAAA,CAAED,MAAAA,CAAU+U,EAAAA,EAChB,OAAI/U,GAAAA,MAAAA,EAAOE,SACL2U,IACSxW,EAAAA,QAAU2B,EAAM,CAAC,EAAED,IAEhCC,EAAA,QAAA,CAAA,CAEAA,QAAe,IAAU8zB,CAAW0O,GAAA1O,EAAAz0B,CAAA,CAClCmjC,CAAAA,GAEJ,CACO,GAAAztB,EACL,MAAGA,GAAAA,YAAAA,EAAAA,IAAAA,GAAAA,EAAAA,OAAAA,CAEL,CACF,MAAA2zB,EAAAvqC,IAEMuqC,EAA+BvqC,IACrC,iBAAsC0W,EAAA,EACtCA,MAA6C,WACvCA,EAAc6zB,QAAAA,EAAsBrqC,GAAS,cAAA,KAAA,CAC/CqqC,MAAAA,EAA4D,CAAA,GAG9D,MAAA3zB,EAAA,MAAA2zB,EAAA,QAAA,KAAA,EACA,GAAA,CACI,MAAA1oC,CAAEA,EAAAA,EAAM,OAAAA,EAAI+U,GAAAA,YAAAA,EAAAA,OAAAA,GAAAA,EAAAA,YAChB/U,GAAAA,MAAAA,EAAe8d,aAEb6qB,EAAe,QAAA3oC,EAAA,CAAA,EAAA,WAAA,IAELiB,EAAAA,QAAI,CAAc0nC,CAC5B,WAAA7U,CAEA9zB,IAAMuU,CAAWq0B,GAAY9U,EAAAA,CAAAA,CAAAA,CAAW,GAEvC,CACH,GAAA/e,EACQ9T,MAAAA,GAAAA,YAAAA,SAAsB6yB,EAAA,WAC9B,CAAO,CACF/e,SACI/U,KAAY8zB,EAAAA,CACrB,OAAAvxB,IAAA,UACFsmC,EAAA,GAAAC,CAAA,IAG0B,GAAAA,CAAA,CACfD,CACT,eAAAznC,GAAA,CACOonC,GAAAA,IAAAA,UACT,GAAA,CAEA,MAAAzzB,EAAiC,MAAA3V,EAAA,GAAA,cAAA,KAAA,OAClB,EACP,SAAAupC,EAAA,OACF,CAAA,EAAA,KAAgB,EACR,GACG,CACPzC,MAAAA,CACD,EACKnxB,EACJ,OAAA/U,GAAA,MAAAA,EAAA,QAAEA,EAAAA,QAAAA,EAAAA,CAAAA,EAAAA,WAAAA,GAAU+U,MAOd4zB,MAAAA,CACO,MAAA,EACT,KAEF,KACS,MAAA5zB,EAAA,MAAA3V,EAAA,GAAA,cAAA,KAAA,CACT,MAAA,EACK,MAAA,CAAA,SAAA,EACD,SAAA0lC,EAAA,OACF,CAAA,EAAA,KAAgB,EACR,GACG,CACP2D,MAAAA,CAAiB,IAEnB,OACMzoC,GAAA,MAAAA,EAAA,QACJ8kC,EAAA,QAAA9kC,EAAA,CAAA,EAAA,GAAEA,IACNtB,EACA,OACaL,MAAAA,EACJ,CAEF,CAAA,QACGuU,GAAA,IACHnP,EAAA,MAAA,CACT,MAAA,sBACF,SAAA,CAAAnB,EAAAkE,EAAA,CACF,GAAA,YAEM88B,MAAAA,EAA8B,GAA9BA,YACJ,QACEthC,GAAA,CAAWsjC,IAAqB7iC,EAAAA,eACzB,EACA6lC,EAAA,IAAA,IAGD,SAAgB,KACdtmC,CAAAA,EAAAA,EAAiBwE,EAAA,CACjB8hC,GAAAA,yBACF,MAAA/lC,IAAA,UAAA,YAAA,GACF,QAAAP,GAAA,CACDsjC,IAGDhjC,EAAAA,eAAK,EACAgmC,EAAA,SAAA,IAGD,SAAgB,SACdtmC,CAAAA,CAAAA,CACAsmC,CAAAA,EACF,CAAA/lC,CAAA,CAAA,EACF,OAAAD,EAAAg6B,GAAA,CAAA,MACD,WAAA,GAEM,WAAA,UACJ,0BAET,UAAS,2BAET,SAAAj9B,EAEIyG,WAAAA,EACA/F,gBAAAA,EACAy8B,UAAU,GACVC,cAAU6G,EACVjkC,QAAAA,CAAAA,CACAs9B,CAAAA,CCpKN,MAAMoM,GAAuB,CAC3B16B,QAAS,CAAC,UAAW,QAAQ,EAC7BM,OAAQ,CAAC,UAAW,QAAQ,EAC5BJ,OAAQ,CAAC,UAAW,QAAQ,EAC5BC,OAAQ,CAAC,SAAS,EAClBC,eAAgB,CAAC,SAAS,EAC1BH,UAAW,CAAC,UAAW,QAAQ,EAC/BI,KAAM,CAAC,QAAQ,EACfzH,OAAQ,CAAC,QAAQ,CACnB,EACA,SAAS+hC,GAAiBrpC,EAAe,CAChCA,OAAAA,EAAcme,OAAyB/c,GAAA,CACtC,KAAA,CAAEwB,KAAAA,EAAMxC,GAAAA,EAAIoT,UAAAA,CAAcpS,EAAAA,EAChC,GAAI,CAACwB,EACK2L,MAAAA,GAGN,MAAO1K,EAAYulC,GAAAxmC,CAAA,EACb2L,OAAAA,GAAAA,MAAAA,EAAAA,OAEV1K,EAAA,MAAAoL,GAAA,CAAA,CAAA7N,EAAA6N,CAAA,CAAA,IAGE,CAAA,CAA8C,CAEhD,SAAOq6B,GAAAtpC,EAAA,CACTA,EAACqpC,GAAArpC,CAAA,EACH,MAAAupC,EAAA,CAAA,EAEAC,EAA2C,CAAA,EAEzCxpC,QAAAA,EAAAA,EAAgBqpC,QAA8B,OAAAjkC,IAAA,CAK9C,UAA0BA,CAAA,GAE1B,GAAAhF,EACQgB,OAAAA,EACA,QAAA+D,EAAE/E,KAAAA,EAAI4O,UAAAA,CAAQ7J,EAAAA,EAASvC,EAAAA,EAAAA,IAAAA,KAAAA,CAAAA,EAAAA,mBAAAA,EAAAA,GAAM4Q,IAAAA,EAAAA,GAAcpS,IAAAA,aAAAA,IAAAA,YACjDqoC,EAAyB,oBAErB7mC,MAAAA,EAAAA,GAAwBA,GAAAA,YAAAA,EAAAA,EAAAA,IAAAA,CAAmB,IAAA8mC,CAAA,GAC/BC,EAAAJ,EAAAt6B,CAAA,EAChB,GAAAw6B,IAAA,iBACAD,EAAex6B,KAAcy6B,UACvBE,GAAAA,MAAAA,WACN,QAAsCA,EAAA,UAAA,KAAAzyB,GAAAA,EAAA,KAAA/R,EAAA,EAAA,EACpCqkC,GACFI,eAAwC,EAChCA,EAAAA,wBAGND,EAAmB,IAAA,IAAAvpC,CAAA,KAEH6gB,EAAAA,OAAAA,CAAAA,CAAY,EACP7gB,EAAAA,UAAUA,KAAG+E,CAAA,EAC3BwkC,EAAA,IAAA,IAAAvpC,CAAA,GAELupC,KAAmB5b,CACA3tB,EAAAA,OAAAA,CAAAA,CAAAA,EACrB,IAAAypC,EAAAN,EAAAt6B,CAAA,EAAA,CACK,GAAA7N,EACG6f,KAAAA,EACJ4oB,UAAsB56B,CAAAA,CAAAA,CAAO,EAC5B7N,EACGqoC,GAAAA,EAAAA,CACN1b,CACF,CACAyb,MAAAA,EAAsB,CAAA,EACxBM,EAAA,CAAA,EACF,QAAA1kC,EAAA,EAAA4b,EAAA,EAAA5b,EAAAokC,EAAA,OAAApkC,IAAA,CAOA,UAA2BA,CAAA,GAE3B,GAAAhF,EACQgB,QAAAA,EACA,UAAA2sB,EAAE3tB,KAAAA,EAAI+E,UAAAA,CAAS4oB,EAAAA,EAAWnrB,EAAAA,EAAAA,IAAAA,KAAAA,CAAAA,EAAAA,mBAAAA,EAAAA,GAAM4Q,GAAAA,IAAAA,oBAAAA,GAAAA,EAAAA,SAAAA,EAAAA,CAAcpS,MAAAA,EAAAA,GAAAA,GAAAA,YAAAA,EAAAA,EAAAA,IAAAA,CAAAA,IAAAA,CAAAA,KACvBa,KAC7B,GAAa0nC,EACXA,EAAexkC,UAAevC,OAAa,MAAA,EACrC+mC,EAAAA,IAAqBI,YACH,CACH/b,IAAAA,EAAAA,EAAAA,CAAU9mB,EAAK9F,CACfhB,GAAAA,EACd,KAAAwC,EACDinC,UAAuB56B,CAAAA,EAAAA,MAAO,CAAA,EAEhCrM,EAAAA,GAAAA,EAAAA,CACAorB,CAA+B,MAEjC8b,EAAAA,KAA2BD,CAC7B,CAEAC,OAAAA,CAA2B1oC,CCvEjC,MAAMsQ,GAAQ,GACR62B,GAAoB,IAAIC,gBAE9B,SAASwB,GAAc,CAAErE,WAAAA,CAAW,EAAG,CACrCrC,GAAS,gBAAiB,gBAAgB,EACpC,KAAA,CAAE7jC,MAAAA,EAAOC,SAAAA,GAAasB,EAAI,EAC1BoC,EAAaC,GAAYzD,CAAM,EAC/B,CAAC6N,EAASC,CAAU,EAAInO,EAAS,SAAS,EAC1C,CAAC0xB,CAAY,EAAI0U,EAAa,CAAC4C,EAAiB,EAAIpX,KACpD8Y,EAAiBhZ,EAAaxsB,IAAI,IAAI,EACtCylC,EAA0BjZ,EAAaxsB,IAAI,cAAc,EACzD,CAAC0b,EAAUC,CAAW,EAAI7gB,EAAS,EAAK,EACxC,CAAC4qC,EAAcC,CAAe,EAAI7qC,EAAS,EAAK,EAChD+2B,EAAgB93B,IAChB,CAAEg5B,aAAAA,EAAcR,gBAAAA,EAAiBE,WAAAA,EAAYI,eAAAA,GACjDjB,GAAU,CACRC,cAAAA,CAAAA,CACD,EACGqJ,EAAW3I,IAAoB,OAAS,CAACM,EACzC,CAACpK,EAAgBmd,CAAiB,EAAI9qC,EAAS,CAAE,CAAA,EACjD,CAAC+qC,EAAeC,CAAgB,EAAIhrC,EAAS,CAAE,CAAA,EAErDR,EAAoCP,IAEpC,iBAAqC0W,EAAA,EACrCA,MAA6C,WACvCA,EAAcpV,QAAAA,EAAsBpB,GAAS,cAAA,KAAA,CAE/CoB,MAAAA,GACEI,aAAOwR,CAAAA,gBAAAA,CAAAA,CACP84B,GAEJ,MAAAC,EAAA,MAAA3qC,EAAA,QAAA,KAAA,EACM2qC,GAAmBA,EAA4B/rC,MACrD,GAAAsB,IAAA,MAAAA,UAAuCK,CAEvCL,WAA2BoB,IAAA,CACzBpB,GAAAA,GAAwC,OAAAN,EAAA,CAC3B0B,cAAAA,EAA+B,CAAA,CACzB,CAAA,EAEnB,MAACspC,GAAApB,GAAAtpC,EAAA,EAEK0qC,GAEN9qC,EAAe,kBAAAI,GAAA,CAAA,EACNH,EAAAA,cAAAA,GACPD,EAAAA,GAAuB8qC,QAAAA,OAAAA,CAGjB3qC,cACHoH,CACgB,WAAAnH,GAAA,CAAA,EAAA,EACbS,CAA6BL,CAC/B,EAAA,MAAA,IAAA,CAAA,CACD,GAEER,EAAA,cAAA,KAAA,GAAA8qC,EAAA,CAEP,CACF,OAAA9qC,EAAA,qBAAA,GAEAA,EAAOY,2BAAuB,KAAA,MACvBmqC,CACAF,CACT,eAAAG,GAAA,CAEA,GAAA,CAEM,OAAA,MAAAnrC,EAAA,GAAA,eAAA,KAAA,CACF,MAAaA,EAA6B,CAAA,CACjC,MACR,OACM4C,EAEP,CACF,CACF,MAAAwoC,EAAA,IAAA,CAEAn9B,cACEA,SAAoB,CACP,GAAA,CACP,MAAAo9B,EAAA,MAAAF,IACIE,GAAqC,EAC3CT,EAAAA,SAA0B,CAC1B38B,MAAAA,GACU,OAAA,CACVA,CAAkB,IACpB,EAEJ,eAAAq9B,GAAA,CAEA,GAAA,CACM,OAAA,MAAAtrC,EAAA,GAAA,cAAA,KAAA,CACF,MAAaA,OACN4C,EAEP,CACF,CACF,MAAA2oC,EAAA91B,GAAA,CAEAwoB,MACEA,EAAW,SAAK,GAChBhwB,SAAoB,CACP,GAAA,CACP,MAAAu9B,EAAAC,EAAAh2B,CAAA,EACI+1B,IAENF,EAAe,EAAA,KAAAI,IAAA,CACMA,GAAA,KACVb,CAAAA,GAAAA,KAAkB,CACT7tB,MAAAA,GAAAA,IAAK,KAAUvF,GAAA,WAAAA,GAAA,SAAA,EAG3B,OADc,IAAIjV,KAAKiV,GAAEoH,WAAapH,GAAE1D,SAAS,EAC/BvR,EAClB,CAAA,EACFsoC,EAACY,EAAA,CACDZ,CAAAA,EAAAA,MAAAA,IAAAA,CAA8B,CAC/B,EACaK,EAAC,EAAA,KAAAE,IAAA,CAEGT,EAAAS,EACE,CAClBT,CAAAA,EAAAA,MAAAA,IAAAA,CAA0B,CAC3B,GAEL,KAAA,CAEM,KAAA1pB,EAAEA,EAAAA,MAAAA,EAAKP,EAAU6qB,CAAAA,EAAAA,EACvB7qB,EAAAA,SAAiB,CAEjB1S,MAAAA,GACU,OAAA,CACVA,CAAkB,IACpB,EAEJjP,EAAA,IAAA,CAEAA,EAAgB,EAAA,CACdusC,EAAAA,CAAAA,CAAAA,EACFvsC,EAAK,IAAA,CACLA,GACEusC,EAAgB,EAAA,CACQ,EACxB,CAAA9T,CAAA,CAAA,EACF,KAAIA,CAAAA,EAAWwG,CAAA,EAAAn+B,EAAA,EAAA,EAQT6rC,EAAoBpM,KAEpBoM,iBAAAA,IACH,EAAqB,KAAA,OAAiB39B,IAAA,WAGrCrK,EAAA,SAAA,eAAA5B,EAAA80B,EAAA,UAAA,YAAA90B,EAAA,WAAA,KAAAy9B,GAAA,OAAA,WAAA,CAAAE,GAAA,GACApgC,EAA8B,EAAA,CACKmN,EACjC2rB,CAAAA,EAAWvB,qBAAuBuB,EAAAA,SAAAA,YAAAA,CAAAA,CAAAA,KACPr5B,IAC3BygC,GAAAA,GAAAA,CACF,IAACoM,EACD,GACEjoC,EAAW+G,CAKX6gC,MAAAA,GAAAA,KAAsB,IAAA,EAAAvL,GAAA,QACxB,CAAAA,GAAA,SAAAH,GAAA,IAAA,EAEU9+B,EAAAA,kBAIgB,EAC9BpC,CAAAA,EAEMiB,GAAS,QAAA,KAAA,MAEXgsC,EAAK5L,GAA0BH,EAAAA,uBAAqBgM,IAAA,CAEtCA,IACVrM,IAEGvB,EAAA4N,EAAA,CACL7L,CAAe/gC,CACjB,CACQ6sC,MAAAA,IAAAA,CACNF,GAAA,MAAAA,GACED,CAAY,CACd,EACA1N,MAAAA,GAAY,IAAA,KACb8N,EAAA,IAAA,KAAAC,GAAA,GAAA,GAAA,GAAA,GAAA,EACH,IAAAC,GAAA,IAAA,KACA,MAAAC,GAAa,CAAAvoC,EAAA,cAAA,KAAAhC,GAAA,IAAA,KAAAA,EAAA,SAAA,EAAA,aAAA,IAAAqqC,GAAA,aAAA,CAAA,EACHG,EAAAptC,IACVC,OAAAA,EAAA,IAAA,CACDwrC,IAEKwB,EAAAA,mBACAD,KACFE,kBAAsB,CAC1B,EAQAjtC,EAAAA,CAAAA,EAAgByrC,CAAA,CAAA,EACMvnC,EAAA,MAAA,CAClB/C,GAAAA,qBAA2B,MACrBqqC,iBACJna,IAAAA,EACF,SAAA,KACF,SAAAhsB,EAAA,MAAA,CACEmmC,MAAgBC,sBAAAA,EAAwB,gBAAA,EAAA,GAoB5C,SACE,CAAApmC,EAAA,SAAA,CACK,OAAA67B,EACG,QAAAt9B,GAAA,OACDi0B,EAAAA,OAAAA,QAAAA,WAAAA,IACI90B,EAAA80B,EAAA,UAAA,MAAA90B,EAAA,SAAA,CAETsC,MAAa,SAAA,QAAyD,IAIhE,MAAKzB,IAASg8B,oBAAsB,GAClC/H,SAAAA,CAAAA,EAAAA,OAAgC,MAAO,cAAA,SAAa,CAAAxyB,EAAA,MAAA,CAAS,MAAC,cAChE,SAAA,CAAAnB,EAAA43B,GAAA,CAAA,CAAA,EAAA53B,EAAAkE,EAAA,CACF,GAAA,IACAnD,MAAmB,eAA2BZ,SAE9CgB,EAAAf,EAAA,CAAW,KAAA,OAAaD,KACtBgB,IAAW,IAAA,MAAA,CAAahB,CAEjB,CAAA,CAACgE,CAAG,CAAA,EAAIpD,EAAM,KAAA,CAAcZ,SAAAA,eAC1B,CAAA,EAAAH,EAAM,MAAA,CAAA,MAAY,aAAA,CAAA,CAAA,CAAQ,CAAA,EAAA86B,GAAQhwB,IAAA,WAAA3J,EAAA,SAAA,CAAA,MAClC,4BAAA,KAETnB,SAAA,QAAI,IAAA,OACJA,EAAA,EAAA,GAAKe,EAAAA,EAAM,UAANA,MAAAA,EAAM,SAAA,CAEL,IAAA,EAEP+5B,SAAuB,QACtB,EAEO,EACL56B,SAAe,CAAAF,EAAAI,EAAA,CACbioC,KAAAA,UACA1U,CAAAA,EAAAA,qBAAgC,CAAA,CAAA,CACzB,CAAA,EAAAgU,EACK,OAAA,GAAA3nC,EAAA,MAAA,CAAA,MACX,mBACH,SAAAA,EAAA,MAAA,CAAEG,MAAAA,yBAEG,SAAMgB,EAAA,UAAA,OACb,gBACD,SAAA,CAAAA,EAAA,UAAA,CAEFwmC,SAAc/pC,CAASuD,EAAA,QACX,SAAA,CAAAnB,EAAAI,EAAA,CACTJ,KAAA,WAAW,MAAA,oBAAwBG,QACjC,CAAe,EAAA,IAAAgB,EAAA,IAAA,CAAehB,SAC5BgB,CAAA,eAAAwmC,EAAA,OAAA,EAAA,IAAA,EAAA,CAAA,CAAAxnC,EAAAA,IACEgB,EAAAA,QAAA,CAAAhB,MAAAA,gBACQE,SAAKtD,CAAA,CAAA,CAAWgE,CAAM,CAAA,EAAoBT,EAAK,OAAA,GAAAN,EAAA,OAAA,CAAG,MACxDmB,4BAAA,WAAG,IAAA,CAAawmC,EAAc/pC,IAASoC,WAAY,CAAI,KACvDA,SAAOe,MAAM,eAAeZ,QAAEpD,IAAAA,SAAiB8B,GAAAoqC,EAAA,UAAA,MAAApqC,GAAA,SAAAshB,GAAA,eAAA,CAEhDwnB,SAAc/pC,SACD,MAAA,SAAA,EAGD,EACLmD,SAAMof,EAAA,CAAA,CAAA,CACNjgB,CACE+oC,CAAAA,CAAAA,CAEiB,CAAA,EAAAjpC,EAAA,KACL,CAAA,MAAA,sBACH2nC,EAAA,OAAA,EAAA,WAAA,QAAA,GAAA,IAAAsB,EAEX,SAAAtB,EAAA,IAAAuB,GAAAlpC,EAAA,KAAA,CAAA,WAESmpC,GAAA,CAEZ,aAAAD,CAAA,CAEJ,CAAA,CAEHlpC,CAAAA,CAAA,CAAA,CACEe,CAEC,CAAA,CACIkoC,CAAAA,CAGH9oC,CAAAA,EAAAA,EAAAA,OACoB,GAAAgB,EAAA,MAAA,CAAC+nC,MAAAA,kBAAAA,SAA6B,CAAAlpC,EAAA,KAAA,CAAA,MAEnD,kBAAA,SACE,iBAAA,CAAA,EACEuqB,EAAA,OAAA,EAAAppB,EAAA,UAAA,CACN,SAAA,CAAAA,EAAA,UAAA,CAGRopB,SAAAA,CAAAA,EAAwB,OACvB,kBAAA,CAAA,CAAW,EAAAvqB,EAAA,KAAA,CAAiBG,SAC1BH,EAAA,IAAAwC,GAAArB,EAAA,KAAA,CAAU,SAAA,CAAAnB,EAAA0T,GAAA,CAAkB,QAAAlR,CAAA,CAC3B+nB,EAAAA,EAAAA,IACCpqB,UACEqC,EAAA,GAAU+nB,SAAe3sB,IAAAA,CACzBoC,CAAA,CACGuqB,CAAAA,CACC,EAAApqB,EAAAA,EACEH,CAAAA,CAAa,CAACwC,CAAAA,CAAAA,CAAiB,EAAAxC,EAC/BA,KAAqB,CAAA,WACAvC,IAAAA,GAAAA,EAAAA,KAAAA,CAAAA,YACHiW,GAAA,CAEd,QAAAlR,CAAA,CAAA,EAEFxC,EAAAmqB,GAAA,CAAA,UACA3nB,EACL,GACE,SAAA,IAAA,CAGPxC,CAAA,CACGuqB,CAAAA,CACC,EAAApqB,EAAAA,EACEH,CAAAA,CAAa,CAACwC,CAAAA,CAAAA,CAAiB,EAAAxC,EAC/BA,MAAqB,CAAA,GAAA,kBACAvC,WACTsL,QAAM,CAEd,SAAA,CAAA/I,EAAA,QAAA,CACA,KACF,WAAA,QARavC,EAYtB,SAAAiC,GAAA,CAGLM,EAAAN,EAAA,OAAA,OAAA,CAAQ,CAAA,CAAiBS,EAAAA,mBACvB,CAAA,CAAAA,CACE,CAAA,EAAAH,EACO,KAAA,CAAA,MACIwnC,kBAAAA,gBAEPC,CAAgB/nC,EAAAA,IAAAA,CAAAA,CAAAA,EAAgB,cAAA,QAAAM,EAAA,IAAA,CAClC,MAAA,yBAAE,SACD8K,IAEL,UAAA,wBAAA9K,EAAAoB,EAAA,CAAO,SAAA,GAAA,CAETpB,CAAA,CAAA,EAAUS,EAAA,cAAA,OAAAT,EAAAoB,EAAA,CAAiBjB,SAACM,EAAA,cAAA,OAAAymC,GAAAA,EAAA,OAAA,gBAAA,EAAA,IAAAzoC,GAAA,CAC3BuqC,GAAkBxB,GAAE/mC,EAAWpD,OAAAA,UACrB,OAAA,KAC4C8C,MAAEipC,EAAA,IAAA,KAAA3qC,EAAA,SAAA,EAAU4qC,GAAAD,EAAA,aAAA,IAAAL,GAAA,aAAA,EAGlEtoC,KACCN,GACc9C,GAKC,MAAAiY,GAAA8zB,EAAA,iBAAAP,EAAA,eAAA,YAAAhzB,GAAAkzB,GAAA,CACT,SAAA,EACA,CAAA,EACA,OACEK,EAAAA,EAAAA,CACF,SAAkB,CAAAC,IAAArpC,EAAA,KAAA,CACHopC,MAAAA,kBACf,SAAA9zB,EAGA,CAAMA,EAAAA,EAAAA,IAKY,SAAAvY,EACX,aAAA0B,CACP,EAAAA,EACW,EAAA,CAAA,CAAA,EAAAA,EACUuB,EAAAA,CAAA,CAAA,CAAU,CAAA,EAAAmB,EAAmBmU,EAAAA,CAAO,SACrDtV,CAAAA,IAAa,WAAAA,EAAAoB,EAAA,CACXrE,SAAAA,EAAAA,KAAAA,CACA0B,MAAAA,gBAA2B,SACThB,MAAAA,KAClB,SACM,CAEb,EAAA,IAAA,CAAAuE,EAAAS,IAAAtB,EAAA,KAAA,CAGLA,MAAA,iCACe,CAAAnB,EAAA,MAAA,CACXG,0BACY,SAAAH,EAAAI,EAAA,CAAeD,oBACD,KAAA,IAAA,CAAKmB,CACzB,CAAU,EAAAtB,EAAA,MAAA,CAAuBG,MAAAA,uBAC1BY,SAAMf,EAAA,IAAA,CAAmBG,2BACvB,CAAA,CAAM,CAAA,CAAA,CAAoB,CAAA,CAAA,CAAM,CAAC,CAExC,CAAA,EAAA2K,IAAW,SAAA3J,EAAA,IAAA,CAAsBhB,MAAAA,WAC/B,SAAG,CAAA,+BAAAH,EAAA,KAAA,CAAA,CAAA,EAAAA,EAAA,KAAA,CAAA,CAAA,EAAAA,EAAA,SAAA,CAAA,KAAmB,SAAA,QAClB,IAAAqoC,EAAA,EAAA,EAAA,SAET,WAAA,CACC,CAAA,CAAA,CACJ,CAAA,CAGF,CAAA,EAAGtnC,GAAMf,EAAA4e,GAAA,CAAA,SAAUse,GAEjBl9B,CAEak9B,GAASh9B,GAAwC,EAErD,SAEZF,EAAA,SAAA,CAGJwd,KACCxd,6BAEI,SAAY8K,IAAA,UACQ,QAAA,IAAAu9B,EAAA,EACpB,MAAA,CACF,eAAA,KAAEloC,EAGAF,SAAK6K,IAAA,UAAA9K,EAAAqY,GAAA,CACC,OAAA,EAAA,KACIvN,EAAY,CACtB5K,qBAAiC,CAC1B,CAAA,CAAA,CAAkB,CAAM,CAAA,CAAA,CAAA,CAGtB,CAAA,CAAO,CAEd,SAAAs8B,IAAE,CAAA,MAAA,CAAiB,CAAE,SAAA,cAAA,sCAAA,CAAA,CAEjB,SAEX2M,GAAA,CAAA,aAAAD,CACE,EACF,CAET,KAAA,CAEA,SAAAnsC,CACE,EAAAsB,EAAO,EACT,CAEA,QAAAirC,CAA6BJ,EAAAA,GAAAA,EAAgBK,EAAAD,GAAA,YAAAA,EAAA,QACrC,CAAEvsC,GAAAA,YACF,SAAAysC,EAAEF,OAAAA,cACR,OAAAG,EACM,YAAAC,EACJjsC,UAAAA,EACAumB,KAAAA,EACAwlB,SAAAA,EACAG,SAAAA,EACAC,KAAAA,EACAH,OAAAA,EACAC,UAAAA,CACA/tB,EAAAA,EACAkuB,EAAAA,IAAAA,KAAAA,CAAAA,EACA/kB,EAAAA,GAAAA,CAAAA,EACApV,EAAAA,IAAAA,KAAAA,CAAAA,EACA+T,EAAAA,GAAAA,CAAAA,EACA1S,OAAAA,EAAAA,MAAAA,CACA+4B,MAAAA,qBACEZ,SAAAA,CAAAA,EAAAA,GAAAA,CAEEa,QAAAA,CACN,CAAMC,EAAAA,EAAAA,MAAAA,CACA/tB,MAAAA,uBACAguB,QAAAA,IAEN,SAAAnlB,EACa,SAAA/nB,CAAA,CAAoBoD,EACfqC,wBAAS+mC,CACvBvpC,OAAAiV,GAAA+O,EAAA,CACQ,OAAAjT,CAAA,EACwB+T,CAAAA,CAAU/nB,EAAAA,EAAAA,IAAAA,CAAS,MAAC,gBAClDmtC,SAAyB,CAAAlqC,EAAA,OAAA,CACvBmV,WAAgC,YAAA,EAC9BpE,SAAAA,GAAAA,CAAAA,CAAAA,CAAAA,EACD4K,GAAAsuB,IAAAD,GAAA7oC,EAAAC,EAAA,CACH,SAAA,CAAA,IAAA,IAAA,IAAAD,EAAA,OAAA,CAEFA,MAAA,KAAS,SAAA,CAAA,UAAA,IAAAnB,EAAA,OAAA,CAAeG,SACtB8b,EAAA,YAAA,EAAMpR,YAAsCoR,CAAA,CAAA,CAAE9b,CAAAA,CACf,CAE9Bwb,CAAAA,CACC,CAAA,CAAAxb,CAGE,CAAA,EAAAH,EAAY,MAAA,CAAA,MAAK,yBAET6K,OAAAA,GAAsC1K,SAAAA,SACf,CAAA,KACtB,CACF,KAAAsI,EAEV,MAAAmiB,EAEH5qB,GAAAA,EAAW,UAAAmqC,EAA+B,IAAAtnC,CAAA1C,EAAAA,EAEhC,OAAAgB,EAAA,SAAA,CAAEsH,KAAAA,SAAMmiB,MAAAA,gBAAAA,EAAAA,UAAAA,EAAAA,GAAOwf,SAAAA,CAAAA,GAAAA,EAAAA,EAAAA,MAAAA,CAAID,IAAAA,GAAAA,EAAWtnC,IAAAA,EAAQwnC,MAAAA,KAC5C,WACE,CAAa,EAAArqC,EAAA,OAAA,CAAiB,SAAAyI,CAAmC,CAC9D5F,EAAAA,IAAAA,EAAOsnC,OAAAA,CACD//B,MAAY+/B,QAAW5pC,SAAKkI,GAAAA,CAAAA,CAAAA,CAAAA,CAAM4B,CAAM,CAAA,CAAY,CAAI,CAE7D,CAAA,CAAA,CAAO5B,CAAAA,CAET,CAAY,MAAOtI,GAAAA,GAAAA,IC1jB3B4O,GAAQ,GAEd,SAASu7B,GAAO,CAAE5oC,MAAAA,EAAOshC,WAAAA,EAAY,GAAGjW,CAAM,EAAG,CACzCtsB,MAAAA,EAAaC,GAAYzD,CAAM,EAC/BstC,EAAU,CAAC,CAAC7oC,EACZoK,EAASk3B,EAAa,CAAC,EAAIlE,GAAU,EACrC,CAAEhiC,MAAAA,EAAOC,SAAAA,GAAasB,EAAI,CAC9BtB,UAAUgwB,GAAAA,YAAAA,EAAOhwB,WAAY+O,EAAO/O,QAAAA,CACrC,EACK,CAAED,MAAOqT,EAAcpT,SAAUqT,GAAoB/R,EAAI,EACzDmF,EAAS,GAAE+mC,EAAU,QAAU,WAAY,cAAaxtC,CAAS,IAC9DyG,GAAAA,EAAO+mC,EAAW,kBAAoB,eAAc,EAE7D,MAAM/H,EAAa3mC,IAEb2uC,EAAiB3uC,IACvB,eAAe4uC,EAAYl4B,EAAW,EAChCA,GAAa,CAACi4B,EAAezuC,WAC/ByuC,EAAezuC,QAAUe,EAAMM,GAAGmmC,UAAU9e,OAAOnnB,KAAK,CACtDC,MAAOwR,GACPrN,MAAO6oC,CAAAA,CACR,GAEH,MAAM93B,EAAU,MAAM+3B,EAAezuC,QAAQ4B,KAAK,EAC9C,GAAA,CAAED,MAAAA,CAAU+U,EAAAA,EAChB,OAAI/U,GAAAA,MAAAA,EAAOE,SACL2U,IACSxW,EAAAA,QAAU2B,EAAM,CAAC,EAAED,IAIhCC,EAAMuU,QAAkBuf,GAAA,CACtB0O,GAAW1O,EAAMz0B,CAAQ,CAAA,CAC1B,GAEI,CACL,GAAG0V,EACH/U,MAAAA,CAAAA,CAEJ,CAEA,eAAeoB,GAAkB,CAC3B,GAAA,CACF,MAAM2T,EAAU,MAAM3V,EAAMM,GAAGmmC,UAAU9e,OACtCnnB,KAAK,CACJC,MAAO,EACPmE,MAAO6oC,EACP3G,SAAUpB,EAAWzmC,OAAAA,CACtB,EACA4B,KAAK,EACJ,GAAA,CAAED,MAAAA,CAAU+U,EAAAA,EAEhB,OADQuf,EAAAA,GAAct0B,EAAO,QAAQ,EACjCA,GAAAA,GAAAA,MAAAA,EAAOE,aAID,CACH,MAAA,EACT,CACF,CAEA,OACEoC,EAACg6B,GAAQ,CAEPx2B,MAAAA,EACAy2B,eACE94B,EAAA,KAAA,CAAIJ,MAAM,sBAAqBZ,UAC7BH,EAAA,IAAA,CAAAG,SAAIoqC,EAAU,iBAAmB,oBAAA,CAAwB,EACzDvqC,EAAA,MAAA,CAAAG,SAAMpD,CAAAA,CAAc,CAAC,CAAA,CACnB,EAENU,GAAG,SACHV,SAAAA,EACAm9B,UAAU,kCACVC,UAAU,uBACVE,WAAYoQ,EACZ3rC,gBAAAA,EACAs7B,UAAS,GACTG,YAAav6B,EAAAoB,IAAI,EACjBoI,eAAgB/I,EAAW+G,SAASgC,eAEpC4tB,cAAc,SACdoD,UACEr5B,EAACkC,GAAK,CACJk2B,OAAM,GAEN5W,SAAS,OACTwO,WAAW,QACXvO,SAAS,SACTrf,WACEvD,EAAA,SAAA,CAAQC,KAAK,SAASc,MAAM,QAAOZ,SACjCH,EAACI,EAAI,CAACC,KAAK,OAAOC,KAAK,GAAA,CAAK,CAAA,CACtB,EACTH,SAAA,CAEDH,EAACyD,GAAQ,CAACQ,KAAMsmC,EAAW,MAAKxtC,CAAS,KAAO,MAAKA,CAAS,OAAMoD,SACjEoqC,EACCppC,EAAAC,EAAA,CAAAjB,SAAA,CACEH,EAACI,EAAI,CAACC,KAAK,UAAA,CAAY,EAAE,IAAAL,EAAA,OAAA,CAAAG,SAAM,qBAAA,CAAyB,CAAC,CAAA,CACzD,EAEFgB,EAAAC,EAAA,CAAAjB,SAAA,CACEH,EAACI,EAAI,CAACC,KAAK,UAAA,CAAY,EAAE,IAAAL,EAAA,OAAA,CAAAG,SAAM,iBAAA,CAAqB,CAAC,CAAA,CACrD,CAAA,CAEI,EACVH,EAAC0D,IAAa,CAAA,EACdvC,EAACsC,GAAQ,CACPvD,QAASA,IAAM,CACTukC,IAAAA,EAAciG,OAChB,6CACF,EACA,GAAI,CAAC,KAAKxnC,KAAKuhC,CAAW,EAAG,CACvBA,GAAar7B,MAAM,kBAAkB,EACzC,MACF,CACIq7B,IACYA,EAAAA,EAAYkG,YAAY,EAAEpwB,KAAK,EAE7C5M,SAASmgB,KAAOyc,EACX,IAAG9F,CAAY,OACf,IAAGA,CAAY,KAExB,EAAEtkC,SAAA,CAEFH,EAACI,EAAI,CAACC,KAAK,KAAA,CAAO,EAAE,IAAAL,EAAA,OAAA,CAAAG,SAAM,yBAAA,CAA6B,CAAC,CAChD,CAAA,EACTiQ,IAAoBrT,GACnBoE,EAACsC,GAAQ,CACPvD,QAASA,IAAM,CACbyN,SAASmgB,KAAOyc,EACX,IAAGn6B,CAAgB,OACnB,IAAGA,CAAgB,IAC1B,EAAEjQ,SAAA,CAEFH,EAACI,EAAI,CAACC,KAAK,KAAA,CAAO,EAAE,IACpBc,EAAA,QAAA,CAAOJ,MAAM,oBAAmBZ,SAAA,CAAC,sBACZH,EAAA,IAAA,CAAAG,SAAIiQ,CAAmB,CAAA,EAC5C,GAAA,CAAA,CAAO,CAAC,CAAA,CACA,CACX,CAAA,CACI,CAAA,EA9EJrT,EAAWwtC,CAgFjB,CAEL,CCzIA,MAAMx7B,GAAQ,GAER67B,GAAav7B,GACNvS,GACFA,EAAMM,GAAGytC,OAAOC,MAAMxtC,KAAAA,EAAOK,OAEtC,CAEE2R,OAAQ,GAAK,GAAK,GACpB,CACF,EAEA,SAASy7B,GAAS,CAAE/H,WAAAA,EAAY,GAAGjW,CAAM,EAAG,CACpCtsB,MAAAA,EAAaC,GAAYzD,CAAM,EAC/B6O,EAASk3B,EAAa,CAAC,EAAIlE,GAAU,EACrC,CAAEhiC,MAAAA,EAAOC,SAAAA,GAAasB,EAAI,CAC9BtB,UAAUgwB,GAAAA,YAAAA,EAAOhwB,WAAY+O,EAAO/O,QAAAA,CACrC,EACK,CAAED,MAAOqT,EAAcpT,SAAUqT,GAAoB/R,EAAI,EACzDmF,EAAS,aAAYzG,CAAS,IACpC4jC,GAASn9B,EAAQ,sBAAqB,EAEtC,MAAMg/B,EAAa3mC,IAEb,CAAConC,EAAU+H,CAAW,EAAIpuC,EAAS,CAAE,CAAA,EACrC,CAACkuC,EAAOG,CAAQ,EAAIruC,EAAS,CAAE,CAAA,EAC/BsuC,EAAgBrvC,IACtB,eAAesvC,EAAW54B,EAAW,OAC/BA,GAAAA,GAAa,CAAC24B,EAAcnvC,QAAS,CACvCmvC,EAAcnvC,QAAUe,EAAMM,GAAGytC,OAAOn7B,SAASpS,KAAK,CACpDC,MAAOwR,EAAAA,CACR,EAGG,GAAA,CACF,MAAMwU,EAAWzmB,EAAMM,GAAGytC,OAAOpnB,KAAKnmB,OAChC,CAAEI,MAAO+lB,CAAAA,EAAS,MAAMF,EAAS5lB,OAC/BgB,GAAAA,MAAAA,EAAAA,QACRqsC,EAAkBvnB,CAAA,CACA,MAClB,CAAA,CACF,IACErnB,KAAAA,CACF,MAAA+jC,CAGA,EAAI,MAAAyK,GAAA9tC,CAAA,EACIsuC,GAAAvsC,EAAAshC,GAAA,YAAAA,EAAA,SAAA,YAAAthC,EAAA,KAAAshC,EAAAkL,GAAAA,EAAA,OAAA,QAAE3tC,GAAAA,MAAAA,EAAAA,QAAMutC,EAAUL,CAAAA,CAIxBxuC,MAAQuC,CAAI,CACZ,CACEssC,MAAAA,EAAc,MAAAC,EAAA,QAAA,KAAA,EAChB,GAAA,CACF,MAAAxtC,CACEtB,EAAAA,EACF,OAAAsB,GAAA,MAAAA,EAAA,SACF6U,IACAiwB,EAAgB,QAAoBzmC,EAAAA,CAAAA,EAAAA,IAC9B2B,EAAAA,QAAAA,GAAAA,CAAU+U,GAAAA,EAAAA,CAAAA,CAChB,CAAA,GAEe1W,CACb,GAAA0W,EAGA/U,MAAAA,CACEwiC,CAAyB,CAE7B,eAAAphC,GAAA,CACO,GAAA,CACL,MAAG2T,EAAAA,MAAAA,EAAAA,GAAAA,OAAAA,SAAAA,KAAAA,CACH/U,MAAAA,CAIJ,CAAA,EAAA,KAAA,EACM,GAAA,CACF,MAAAA,CACQ,EACG+U,EAAA,OAAA/U,EAAAs0B,GAAAt0B,EAAA,QAAA,EAAAA,GAAA,MAAAA,EAAA,QAAAA,EAAA,CAAA,EAAA,KAAA8kC,EAAA,WAIH,QAAA9kC,EAAA,CAAA,EAAA,GACJ,IAAY+U,EACRuf,MAAAA,CACR,QACaj2B,CACJ,CACT,MAAAilC,EAAA1wB,GAAA,IACOnP,EAAAC,EAAA,UACG,CAAA,CAAA,CAAA6hC,EAAA,QAAA9hC,EAAA,MAAA,CACH,MAAA,wBACT,SAAA,CAAAnB,EAAAI,EAAA,CACF,KAAA,QAEM4gC,MAAAA,gBACJ,aAEgBpjC,IAAAA,CAAAA,EAAAA,IAAAA,CACC,KAAA,CAAuBuC,KAAAA,EACrB,QAAAmrC,CAAc,EAAAzjB,EAAqBlY,EAAA27B,EAAA,OAAA,CAAAnuB,EAAAouB,IAAApuB,GAAA,CAAAouB,EAAA,KAAA,CAAA,EAC7CtI,OAAAA,EAAa/+B,GACN,GAAA,IAAAnH,CAAA,MAAA0L,CAAA,GAAEA,SAAAA,CAAAA,EAAAA,OAAAA,CAAM6iC,SAAAA,CAAAA,EAAAA,OAAAA,CAAYzjB,MAAAA,qBACpBlY,SAAgBuN,GACtB,CAAA,IACO,CAAM,EAAAld,EAAY,OAAA,CAAYG,MAAAA,eACjCA,YACEwP,CAAA,CAAA,CAAA,CAAA,CAAY,EAAAlH,CAAqB,CAAA,CAAC,CAAA,CAC7B,CAAA,EAAA,CAAA,CAAAqiC,EAEP9qC,QAAAmB,EAAA,MAAA,CAAA,MAAY,YAAchB,SAAAA,CAAAA,EAAEsV,UAAmB,SAASzV,EAAA,KAAA,UACpD,eAAA,CAER,CAGL,CAAA,EAAE8qC,EAAMltC,IAAAA,IACI,KAAA,CAAWuC,WAAAA,EACpBA,UAAAA,EACEA,SAAAA,EAAqB,YAAAmiB,EAEtBwoB,OAAAA,EACO,MAAAnuB,EACJ6uB,iBAAAA,EACAC,SAAAA,EACAhqB,aAAAA,EACAa,YAAAA,EACAnO,YAAAA,EACAwI,MAAAA,EACA+uB,IAAAA,EACA9U,MAAAA,EACA+U,EAAAA,EACAC,GAAAA,IAAAA,IAAAA,CAAAA,EAAAA,SAAAA,QAAAA,SAAAA,EAAAA,EAAAA,QAAAA,MAAAA,EAAAA,EACAlC,IAAAA,EAAAA,GACAlmC,EAAAA,CACAX,MAAAA,GAAAA,GAAAA,CAAAA,EACAwH,GAAAA,GAAAA,EAAAA,EACEghC,EAAAA,GAAAA,CAAAA,GAAAA,GAAAA,CAAAA,EAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CACJ,CAGIhpB,OAAAA,EAAAA,IAAAA,CACJ,KAAcxf,EACN6e,OAAAA,SACAE,IAAAA,sBACQ9B,MAAAA,EAAAA,CAKhB,iBAAA,OAAAuC,EAAA,KAAA,GAAA,CAAA,IAEA,uBACE,QAAAA,EAAA,KAAA,GAAA,CAAA,QAAA,EAEQxf,CAAAA,EACNsG,SAAOhI,EAAA,UAAA,CACH,SAAA,CAAAnB,EAAA,SAAA,UAGEA,EAAA,MAAA,CACqB,IAAA2c,EACM,IAAA+uB,EAI1B,MAAArhC,GACNlK,OAAAA,EAEDA,QACEH,MAAA,CAAAG,CACE,CAAA,EACEiK,EAAKuS,MAAAA,CAAAA,MACA+uB,eACLrhC,SAAAA,CAAAA,EAAAA,SAAAA,CACA8J,SAAAA,CAAAA,EAAAA,MAAAA,CACQ,MAAA,eACT,SAAA,CAAAnU,EAAA,OAAA,CAEHmB,MAAA,SAAW,SAAAkR,EAAclS,CAAAA,EAAAA,IACvBgB,CAAAA,CAAAA,GAAAnB,EAAAoB,EAAA,CAAAjB,SACEgB,IAAW,CAAA,EAAA,CAAA,CAAAuoC,GAAA1pC,EAAAoB,EAAA,CAAcjB,SACvBH,EAAAosB,GAAA,CAAY,SAAAsd,EAAUr3B,OAAAA,OAAAA,CAAe,CACnB,CAAA,CAAAlS,CAAE,CAAA,EACnB,CAAA,CAAA0rC,GAAEnC,EAAAA,MACDvpC,MAAAA,QACe,KACDupC,EAAAA,IACH,OAAA,SACRmC,CAAA,CAAA,CAAC,CAEL,CAAA,EAEF,CAAA,CAAAvpB,KACC,IAAA,CAAA,MAAU,cAAA,KAAcsU,EAAAA,IAAc,OAAA,SACnCpzB,CAAAA,CAAAA,CAAK,CAET,CAAA,CAAA,CAGD,CAAA,CAAS,EAAAX,CAAA,CAAoB+zB,CAAAA,CAAAA,CAAc,CAAA,CAAA,CACxCtU,CAAAA,EAEJ,CAAA2gB,EACG6H,CAAA,CAAA,EAAA,OAAA9qC,EACCg6B,GAAA,CAAA,MAAAx2B,EACR,eAELrC,EAAA,KAAA,CAAA,MAEL,sBACD,SAAA,CAAAnB,EAAA,IAAA,CAEQ8qC,SAAAA,UAEd,CAAA,IACW,MAAA,CAEPtnC,SAAAA,CAAAA,CACAy2B,CAAAA,CACE,CAAA,EAA+B95B,GAAAA,WAC7B,SAAApD,EAAW,UACX,qBAAA,UAAMA,uBAAAA,WAAeouC,EAAA,gBAAArsC,EAGzBrB,wBAAG,EAAA,GAAA,IACHV,UAAAA,GACAm9B,YAAUl6B,EAAAoB,EAAA,EAAA,EACV+4B,eAAU15B,EAAA,SAAA,eACV45B,cAAY8Q,SACZrsC,cAAAA,EACAw7B,UAAAA,EAAAA,GAAAA,CACS,OAAA,GACIt6B,SAAAA,OACbwJ,WAAAA,QAEc,SAAA,SACCw3B,WAAAA,EAAAA,SAAAA,CACfxG,KAAAA,SAEU,MAAA,QAEG,SAAAx6B,EAAAI,EAAA,CACE,KAAA,OACF,KAAA,GAAA,CACTmD,CACE,CAAA,EAAa,SAAe,CAAApC,EAAAsC,GAAA,CAAOtD,QAAAA,IAChCC,CAAKC,IAAKokC,EAAA,OAAA,6CAAA,EAAOnkC,GAAK,CAAA,KAAA,KAAAmkC,CAAA,EAAA,CAAKA,GACtB,MAAA,kBAAA,EACTtkC,OAIOskC,IAGJA,EAAeA,EAAc,YAAA,EAAA,KAAA,EACvBA,SAAAA,KAAAA,IAAAA,CAAAA,YACJ,EACF,SAAA,CAAAzkC,EAAAI,EAAA,CACA,KAAiB,KACfqkC,CAAcA,EAAAA,IAAAA,EAAAA,OAAAA,CAEL3W,SAAAA,yBAAuB,CAClC,CAAA,CACF,CAAA,EAAA1d,IAAArT,GAAAoE,EAAAsC,GAAA,CAAEtD,QAAAA,IAEFH,CAAMK,SAAK,KAAA,IAAA+P,CAAA,WAAO,EAAE,SAAM,CAAApQ,EAAAI,EAAA,CAA8B,KAAA,KAAA,CAChD,EACWrD,IAAAA,EAAAA,QAAAA,OAERmD,oBACE4tB,SAAAA,CAAAA,sBAA2B9tB,EAAA,IAAA,CACtC,SAAAoQ,CAAEjQ,CAAAA,EAAAA,GAAAA,CAEG,CAAA,CAACE,CAAK,CAAA,CAAK,CAChB,CAAA,CAAa,EAAAtD,CAAmB,CACX,CC/RnC,SAAS+uC,IAAU,CACjBnL,GAAS,OAAQ,GAAG,EACdlgC,MAAAA,EAAaC,GAAYzD,CAAM,EAC/B,CAAEyoB,UAAAA,CAAcjlB,EAAAA,EAEd0rB,QAAiC7F,GAAA,CAEnCylB,GAAAA,CAAAA,EACJ,OAAKzlB,KAAiB,KAAA,CAChB,KAAArmB,EAAEA,GAAAA,CAAAA,EAAS6L,EAAWwa,EAAAA,CAC5B,UAAkBgc,GAChBpsB,cAAWosB,GACXjlC,KAAegqC,GACf/pC,OAAMonC,GACNjgB,UAAQ6lB,GACR5lB,WAAWqd,GACXpd,QAAYud,GACZtd,SAASonB,GACTlnB,SAAUghB,EAAAA,EACVjhB,CAAUkmB,EACZ,OAAMkB,EACiBjsC,EAAAisC,EAAA,CACvB,GAAAngC,EACY,WAAyCA,EAAAA,EAAkB7L,EAAA,KAAA,UAAA6L,CAAA,CAAA,EAFlEmgC,IAEkE,CAAA,EAEzE,OAAA7sC,GAAC,CAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,GAAA,EAAA,CAAAM,EAAAqxB,IAAA,CAED3xB,GAAAA,CACM,MAAA+gB,EAAA,SAAA4Q,EAAA,KAAA,CAAA,EAAA,EAAA,EAAA,EACF,0BAAuBA,cAAiB,EAAE5Q,CAAI,EAAA,MAAA,CAC9CjkB,MAA0B,CAAA,CAA6B,CAAA,EAEvDE,EAAQ8vC,MAAO,CACjB,GAAA,UACD,cAAAxsC,GAAA,UAGC,QAAA,gBAAA,GAAA,CAAAA,EAAA,OAAA,QAAA,GAAA,GAAA,CAAAA,EAAA,OAAA,QAAA,QAAA,IACKA,EAAA,eAAA,0BACmB,GAOlBA,EACAzC,SAAAA,CAA+B,CACjC,CAAA,CC3CR,SAASkvC,IAAO,OACR1rC,MAAAA,EAAaC,GAAYzD,CAAM,EACrCnB,OAAAA,EAAU,IAAM,EACb,SAAY,CACX,MAAMoF,EAAO,MAAMka,GAAGF,OAAOha,KAAK,EAClC,GAAIA,EAAKtD,OAAQ,CACf,MAAMyd,EAAKC,KACKpa,EAAKsa,UAAgBlP,EAAImP,WAAWJ,CAAE,CAAC,EAC3Czd,SACVX,EAAO+sB,WAAa,GAExB,CAAA,IAEJ,EAAG,CAAE,CAAA,EAGHhqB,EAAAoB,EAAA,CAAAjB,UACIM,EAAW+G,SAAS4e,oBAAsB,gBACzC,CAAC3lB,EAAW+G,SAAS4e,mBACpB3lB,EAAW+G,SAASmpB,yBACtBlwB,EAAAA,EAAWilB,YAAXjlB,MAAAA,EAAsB7C,QACtBoC,EAAC8rC,GAAO,CAAE,CAAA,EAEV9rC,EAACsiC,GAAS,CACR9+B,MAAM,OACNqV,KAAK,IACLpb,GAAG,OACH88B,YAAa,GACbC,UAAWx6B,EAACosC,GAAmB,EAAA,CAAA,CAChC,CAAA,CAEH,CAEN,CAEA,SAASA,IAAoB,CACrB3rC,MAAAA,EAAaC,GAAYzD,CAAM,EAC/BovC,EAAsBxwC,IACtB,CAACy8B,EAAWC,CAAY,EAAI37B,EAAS0I,MAAS,EACpD,OACEnE,EAAAC,EAAA,CAAAjB,SAAA,CACEH,EAACkE,EAAI,CACH3B,IAAK8pC,EACLloC,GAAG,iBACHpD,MAAQ,qCACNN,EAAW5C,qBAAuB,YAAc,EACjD,IAAGy6B,GAAa,EAAG,GACpBp4B,QAAgBR,GAAA,CACdA,EAAEgjB,gBAAgB,EACd1d,OAAOge,WAAW,yBAAyB,EAAEC,UAC/CvjB,EAAE+O,eAAe,EACjB8pB,EAAyBU,GAACA,EAAiB3zB,OAAT,MAAmB,EAEzD,EAAEnF,SAEFH,EAACI,EAAI,CAACC,KAAK,eAAeC,KAAK,IAAIC,IAAI,eAAA,CAAiB,CAAA,CACpD,EACNP,EAACssC,GAAiB,CAChBrT,MAAOX,EACPc,UAAWiT,EACX1rC,QAASA,IAAM43B,EAAajzB,MAAS,CAAA,CACtC,CAAC,CAAA,CACF,CAEN,CAEA,MAAMinC,GAAsB,GACtBC,GAA8B,EACpC,SAASF,GAAkB,CAAElT,UAAAA,EAAWH,MAAAA,EAAOt4B,QAAAA,CAAQ,EAAG,CAClD,KAAA,CAAE7D,MAAAA,EAAOC,SAAAA,GAAasB,EAAI,EAC1BoC,EAAaC,GAAYzD,CAAM,EAC/B,CAAC6N,EAASC,CAAU,EAAInO,EAAS,SAAS,EAE1CO,EAAwBL,EAAMM,GAAGC,cAAcC,KAAK,CACxDC,MAAOgvC,EAAAA,CACR,EAED,eAAehE,GAAqB,CAC5BT,MAAAA,EAAmB,MAAM3qC,EAAsBQ,OAC/CN,EAAgByqC,EAAiBpqC,MAEvC,GAAIL,GAAAA,MAAAA,EAAeO,OAAQ,CACzBP,EAAc4U,QAA0BxT,GAAA,CAC3BA,GAAAA,EAAa4N,OAAQtP,EAAU,CACxC4mC,cAAe,EAAA,CAChB,CAAA,CACF,EAEKoE,MAAAA,EAAuBpB,GAAmBtpC,CAAa,EAEtDH,EAAAA,kBAAoBG,EAAc,CAAC,EAC1CJ,EAAOI,cAAgB0qC,EAGjB3qC,EAAAA,GAAGW,QACNyG,OAAO,CACNnH,cAAe,CACbS,WAAYT,EAAc,CAAC,EAAEI,EAC/B,CAAA,CACD,EACAwmC,MAAM,IAAM,CAAA,CAAE,CACnB,CAEAhnC,OAAAA,EAAOY,qBAAuB,GACvBmqC,EAAAA,2BAA6B1oC,KAAKmtC,MAClC3E,CACT,CAEA,KAAM,CAAC4E,EAAmBC,CAAoB,EAAI/vC,EAAS,EAAK,EAChE,SAASqrC,GAAsB,CACtBnrC,OAAAA,EAAMM,GAAGmtB,eAAejtB,KAAK,CAClCC,MAAO,CAAA,CACR,CACH,CAEA,SAAS8qC,GAAoB,CAC3Bt9B,EAAW,SAAS,GACnB,SAAY,CACP,GAAA,CACF,MAAMw9B,EAAmB,EACnBhe,MAAAA,EAAiB,MAAM0d,IACR0E,EAAA,CAAC,EAACpiB,GAAAA,MAAAA,EAAgB3sB,OAAM,EAC7CmN,EAAW,SAAS,OACV,CACVA,EAAW,OAAO,CACpB,CAAA,IAEJ,CAEAjP,OAAAA,EAAU,IAAM,CACVm9B,IAAU,QAA0BoP,GAAA,EACvC,CAACpP,CAAK,CAAC,EAGR93B,EAACg4B,GAAc,CACbtW,cAAc,qBACdoW,MAAAA,EACAG,UAAAA,EACAz4B,QAAAA,EACA44B,OAAQ,CACNpwB,OAAQjN,SAASs9B,IACnB,EACA7W,SAAS,OACTwO,WAAW,QACXvO,SAAS,SACTtf,MAAM,SACNk1B,mBAAmB,UAASr4B,UAE5BH,EAAA,SAAA,CAAAG,SACEH,EAAA,KAAA,CAAAG,SAAI,eAAA,CAAiB,CAAA,CACf,EACRH,EAAA,OAAA,CAAAG,SACGM,EAAWpD,cAAcO,OACxBoC,EAAAoB,EAAA,CAAAjB,SACGM,EAAWpD,cACTw0B,MAAM,EAAG2a,EAA2B,EACpClrC,IACCtB,GAAAA,EAAC2M,GAAY,CAEX5P,SAAAA,EACA0B,aAAAA,EACAysB,mBAAkB,EAAA,EAHbzsB,EAAahB,EAInB,CACF,CACH,CAAA,EACAqN,IAAY,UACd9K,EAAA,MAAA,CAAKe,MAAM,WAAUZ,SACnBH,EAACqY,GAAM,CAAC8B,OAAM,EAAA,CAAE,CACb,CAAA,EAELrP,IAAY,SACV3J,EAAA,MAAA,CAAKJ,MAAM,WAAUZ,UACnBH,EAAA,IAAA,CAAAG,SAAG,gCAAA,CAAiC,EACpCH,EAAA,IAAA,CAAAG,SACEH,EAAA,SAAA,CAAQC,KAAK,SAASC,QAASmoC,EAAkBloC,SAAC,WAAA,CAE1C,CAAA,CACP,CAAC,CAAA,CACD,CAAA,CAGL,EACNgB,EAAA,SAAA,CAAAhB,SAAA,CACEgB,EAAC+C,EAAI,CAACC,GAAG,YAAYpD,MAAM,eAAcZ,SAAA,CACvCH,EAACI,EAAI,CAACC,KAAK,IAAA,CAAM,EAAE,IAAAL,EAAA,OAAA,CAAAG,SAAM,UAAA,CAAc,CAAC,CAAA,CACpC,EACNgB,EAAC+C,EAAI,CAACC,GAAG,iBAAiBpD,MAAM,gBAAeZ,SAC5CusC,CAAAA,EACCvrC,EAAAC,EAAA,CAAAjB,UACEH,EAAA,OAAA,CAAMe,MAAM,gBAAeZ,SAAC,KAAA,CAAS,EAAE,IACvCH,EAAA,OAAA,CAAAG,SAAM,iBAAA,CAAqB,CAAC,CAAA,CAC5B,EAEFH,EAAA,IAAA,CAAAG,SAAG,SAAA,CAAU,EACZ,IACHH,EAACI,EAAI,CAACC,KAAK,aAAA,CAAe,CAAC,CAAA,CACvB,CAAC,CAAA,CACD,CAAC,CAAA,CACK,CAEpB,CAEA,MAAe7D,GAAAA,GAAK2vC,EAAI,EC3NlBS,GAAoB,CACxB,6CACA,qBACA,uCACA,gCAAkC,EAG7B,SAASC,GAAwBhqC,EAAK,CAE3C,KAAM,CAAEiqC,SAAAA,EAAUh/B,SAAAA,CAAS,EAAI,IAAIkN,IAAInY,CAAG,EAE1C,UAAWkqC,KAASH,GAAmB,CACrC,KAAM,CAAA,CAAGnvC,CAAE,EAAIqQ,EAASk/B,MAAMD,CAAK,GAAK,GACxC3wC,GAAOqB,EACP,MAAQ,CACC,SAAAqvC,EACL/vC,GAAAA,CACAU,CAEJ,CACF,OAAA,IACA,CACF,SAAAwvC,GAAApqC,EAAA,CAESoqC,KAAAA,CACD,SAAAlwC,EAAEA,GAAAA,CAAUU,EAAAA,GAAAA,CAAAA,EAAG,OAAIovC,GAAAA,EACrB9vC,IAAYU,CAAI,MAAAA,CAAA,GAEpB,IACA,CCtBF,SAAwByvC,IAAY,CAElC,MAAMrqC,EADW+K,KACIE,SAASlI,QAAQ,MAAO,EAAE,EACzCunC,EAAeN,GAAwBhqC,CAAG,EAE1CuqC,EAAYD,GAAAA,MAAAA,EAAcpwC,SAC3B,IAAGowC,EAAapwC,QAAS,MAAKowC,EAAa1vC,EAAG,GAC/C,KACE,CAACqN,EAASC,CAAU,EAAInO,EAAS,SAAS,EAEhD4jB,OAAAA,GAAgB,IAAM,CACpBzV,EAAW,SAAS,GACnB,SAAY,CAEP,GAAA,CACI,KAAA,CAAEhO,SAAAA,EAAUU,GAAAA,CAAO0vC,EAAAA,EACnB,CAAErwC,MAAAA,GAAUuB,EAAI,CAAEtB,SAAAA,CAAAA,CAAU,EAElC,GADe,MAAMD,EAAMM,GAAGsS,SAAS1M,QAAQvF,CAAE,EAAEO,QACvC,CACH2P,OAAAA,SAASmgB,KAAOsf,EAAY,aACnC,MACF,OACU,CAAC,CAGb,CACQ,KAAA,CAAEtwC,MAAOqT,EAAcpT,SAAUqT,GAAoB/R,EAAI,EACzD6b,EAAS,MAAM/J,EAAa0K,GAAGC,OAAO9c,MAAM,CAChD+Y,EAAGlU,EACH5C,KAAM,WACN1C,MAAO,EACPwd,QAAS,EAAA,CACV,EACGb,GAAAA,EAAOxK,SAAS9R,OAAQ,CACpByO,MAAAA,EAAS6N,EAAOxK,SAAS,CAAC,EAChC1K,OAAO2I,SAASmgB,KAAQ,IAAG1d,CAAgB,MAAK/D,EAAO5O,EAAG,YAAA,MAGnDkQ,OAAAA,SAASmgB,KAAOsf,EAAY,YAEvC,CAAA,IACC,EACF,CAACA,CAAS,CAAC,EAGZjsC,EAAA,MAAA,CAAKJ,MAAM,WAAWuB,SAAS,KAAInC,UAChC2K,IAAY,UACX3J,EAAAC,EAAA,CAAAjB,SAAA,CACEH,EAACqY,GAAM,CAAC8B,OAAM,EAAA,CAAE,EAChBna,EAAA,KAAA,CAAAG,SAAI,YAAA,CAAc,EAClBH,EAAA,IAAA,CAAAG,SACEH,EAAA,IAAA,CAAGiE,KAAMpB,EAAKsG,OAAO,SAASE,IAAI,sBAAqBlJ,SACpD0C,CAAAA,CACA,CAAA,CACF,CAAC,CAAA,CACJ,EAEF1B,EAAAC,EAAA,CAAAjB,UACEH,EAAA,KAAA,CAAAG,SAAI,uBAAA,CAAyB,EAC7BH,EAAA,IAAA,CAAAG,SACEH,EAAA,IAAA,CAAGiE,KAAMpB,EAAKsG,OAAO,SAASE,IAAI,sBAAqBlJ,SACpD0C,CAAAA,CACA,CAAA,CACF,CAAC,CAAA,CACJ,EAEJ7C,EAAK,KAAA,CAAA,CAAA,EACLA,EAAA,IAAA,CAAAG,SACEH,EAACkE,EAAI,CAACC,GAAG,IAAGhE,SAAC,SAAA,CAAa,CAAA,CACzB,CAAC,CAAA,CACD,CAET,CCrEA,SAASktC,IAAQ,CACT,KAAA,CAAEvwC,MAAAA,GAAUuB,EAAI,EACtBsiC,GAAU,QAAS,IAAG,EACtB,KAAM,CAAC71B,EAASC,CAAU,EAAInO,EAAS,SAAS,EAE1C,CAAC+c,EAAa1X,CAAM,EAAIC,GAAkBqX,GAAAA,EAAI,EAAG,CAAC,EAClD,CAACJ,EAAOC,CAAQ,EAAIxc,EAAS,CAAE,CAAA,EACrCd,EAAU,IAAM,CACdiP,EAAW,SAAS,GACnB,SAAY,CACP,GAAA,CACF,MAAMoO,EAAQ,MAAMrc,EAAMM,GAAG+b,MAAM7b,KAAK,EACxC6b,EAAMW,KAAK,CAACvF,EAAGL,IAAMK,EAAE/Q,MAAMmgB,cAAczP,EAAE1Q,KAAK,CAAC,EACnDpH,GAAiB,EACjBgd,EAAc,SAAA,CACdrO,MAAAA,GACU,OAAA,CACV3O,CACA2O,IAAkB,EACpB,CAAA4O,CAAA,CAAA,EAAA,KACC,CAAAC,EAAAC,CAAA,EAAAjd,EAAA,EAAA,EACL,OAAI+c,EAAAA,MAAY,CAEhB,GAAM,aAEN,uBACOlc,SAAG,KAAasD,SAAM,CAAAI,EAAA,MAAA,CAA0B,MAAA,qBAAIhB,SACvDgB,CAAAA,EAAA,SAAA,CAAW,SAAAA,EAAA,MAAA,CAAoBhB,MAC7BH,cAAAG,YACE,MAAA,CAAW,MAAA,cAAaA,SACtBgB,CAAAA,EAAAy2B,GAAA,CAAA,CAAA,EAAA53B,EAAAkE,EAAA,CAAW,GAAA,IAAa/D,MAAAA,eAEhBgE,SAAGnE,EAAAI,EAAA,CAAU,KAAA,OAAcD,KAAAA,GAC1B,CAAA,CAAM,CAAA,CAAA,CAAY,CAAA,EAAGH,EAAE,KAAA,CAAC,SACxB,OAAA,CACJ,EACLA,EAAA,MAAA,CAAAG,MAAI,cACJH,SAAAA,EAAA,SAAA,CAAW,KAAA,SAAaG,MAAAA,QAEpBF,QAAK,IAAA4Z,EAAA,EAAA,EACL9Y,SAAMf,EAAAI,EAAA,CACNF,KAAAA,OAA6CC,KAAAA,IAEvCE,IAAK,UAAA,CAAA,CAAY,CAAA,CAAQ,CAAA,CAAA,CAAY,CAAA,CACrC,CAAA,EAACL,EACL,OAAA,CAAA,SACHmZ,EAAA,OAAA,EAAAnZ,EAAA,KAAA,CAEPA,MAAA,YACGmZ,SAAAA,EAAe,IAAA7b,KACd,KAAA,CAAU,SAAA0C,EAAAkE,EAAA,CACPiV,GAAAA,MAAAA,EAAW7b,EAAAA,GACV6C,WACO,OAAA,CAACgE,SAAU7G,CAAAA,EAAQ8C,EAAA,CAAED,KACxBgB,MAAA,CAAAhB,EAAAA,IAAAA,EACEH,OAAK,CAACK,SAAK/C,EAAA,KAAA,CAAQ,CAAA,CAAE,CAAA,CAAYkG,CAAAA,CAAa,CAAA,CAAA,CAC1C,CAAA,EAcFsH,IAAA,UAAA9K,EAAA,IAAA,CAAC,MAEV,WACC,SACUA,EAAAqY,GAAA,EAAA,CACd,CAAA,EAASvN,IAAA,QAAA9K,EAAA,IAAA,CAAUG,MACjBH,WACC,SACW,uBACd,CAAA,EAASA,EAAA,IAAA,CAAUG,MAAC,WAEpBH,SAAA,eAAA,CAAA,CAAS,CAAA,CAAA,CAAW,CAAA,EAAa4Z,GAAG5Z,EAAAc,GAAA,CACrC,MACI,QACJ,QAEHd,GAAAA,CACQN,EAAA,SAAAA,EAAA,iBACU,EAAA,CAEZma,EACF,SAAA7Z,EAAA+N,GAAA,CACF,KAAA6L,GAAA,YAAAA,EAAA,KAAEzZ,WAEU,CACJyZ,EAAsBtc,QAAAA,eAGjBuc,EAAA,EAAA,CACT,CACAA,CAAAA,CAA6B,CAC/B,CAAA,CAAA,CAAA,CACD,CCnHX,MAAeyzB,GAAA,GAAA,IAAA,IAAA,0BAAA,YAAA,GAAA,EAAA,KCAf,IAAAC,GAAA,CAAM,iBAAA,SAAA,eAAA,gBAAA,aAAA,wBAAA,aAAA,aAAA,SAAA,KAAA,KAAA,aAAA,IAAA,GAAA,KAAA,GAAA,IAAA,w9BCcN,SAASC,IAAQ,CACf7M,GAAS,QAAQ,EACjB,MAAM8M,EAAiB5xC,IACjB6xC,EAAoBjsC,GAAMC,MAAMI,IAAI,aAAa,EACjD,CAACgJ,EAASC,CAAU,EAAInO,EAAS,SAAS,EAC1C,CAAC0xB,CAAY,EAAIE,KACjBzxB,EAAWuxB,EAAaxsB,IAAI,UAAU,EACtC,CAAC6rC,EAAcC,CAAe,EAAIhxC,EACtCG,IAAY2wC,GAAAA,YAAAA,EAAmB/C,gBAAiB,EAClD,EAEM,CAACkD,EAAeC,CAAgB,EAAIlxC,EAAS,CAAE,CAAA,EACrDd,EAAU,IAAM,EACb,SAAY,CACP,GAAA,CAEIgL,MAAAA,EAAO,MADD,MAAM9I,MAAMsvC,EAAgB,GACjBS,OACvBD,EAAiBhnC,CAAI,CAAA,MACX,CAAA,CAEV1K,IACF,EAAA,CAAA,CAAA,EAAA,MACC4xC,EAAA7f,GAAA,CACAA,IASH1sB,GAAK0sB,MAAAA,IAAAA,cAAAA,CAAAA,GAAa,SAAA,CACZzsB,EAAU,SAAA,EAEH,GAAA,CACXqJ,KAAAA,CACI,UAAAkjC,EACI,cAAAC,EAAED,UAAAA,CAAWC,EAAAA,MAAAA,GAAAA,CAAeC,YAAAA,CAAAA,CAAU,EAExChgB,GAAAA,GACD1sB,GAAA,QAAA,IAAA,WAAAwsC,CAAA,EAEHxsC,eAAgC,eAAAysC,CAAA,EACxBrsC,GAAAA,QAAQuB,IAAI,WAAY6qC,CAAS,EACjCpsC,SAAAA,KAAY,MAAAusC,GAA6B,CACzCvsC,YAAAA,EAEGoC,UAAAA,CAAiC,CACxCkqB,GAEF,MAAC,gCAAA,EAED/kB,EAAsC,SAAA,CACxC,MAAA,CACA2B,EAAW,OAAS,EAEpB3O,KACA2O,EACFsjC,EAAAV,EAAAA,EAAA,QAAA,eAAA,EAAA,EAAA,QAAA,OAAA,EAAA,EAAA,QAAA,YAAA,EAAA,EAAA,KAAA,EAAA,KACCW,EAAA,qCAAA,KAAAD,CAAA,GAAA,CAAA,YAAA,KAAAA,CAAA,EACLE,EAAAF,EAAAR,EAAA,OAAAW,GAAAA,EAAA,SAAAb,CAAA,CAAA,EAAA,KAAA,CAAAp5B,EAAAL,IAAA,CAEA,sBACIy5B,EAAAA,WAAAA,EACW,YAAA,CAAA,EAKTW,EAAAA,EAAAA,YAAAA,2BACiCprC,CAAKmrC,EAG5C,OAAME,GAAuBF,CAAAA,KAQrB,CAAAI,GAAoBv6B,IAGoB,CACxC,CAAA,EAAA,MAAoBw6B,EAAAA,EAAAA,EAAAA,CAAAA,EAAoBC,EAAAL,EAAAD,EAAAE,GAAA,MAAAA,EAAA,OAAAA,EAAA,CAAA,EAAAZ,EAAAE,EAAA,KAAAW,GAAAA,EAAA,SAAAb,CAAA,CAAA,EAAA,KAe9CjuC,OAAiBM,EAAA,OAAA,CAajBguC,GAAAA,QACF,MAAA,CAEA,UACE,QAAS,EAAQx0B,SAAOrY,EAAA,OAAA,CAAEytC,SA/BblvC,GAAA,CAERmyB,EAAAA,eACH,EAEJmc,GACIK,CAOJ,EAkBgD,SAAA,CAAAltC,EAAA,KAAA,CAAEhB,YAC9C,MAAA,CAAMqO,IAAAA,GAAmBrO,IAAAA,GACvBA,MAAAA,KACOiK,OAAKhG,IAAAA,CAAAA,EAAUpE,EAAA,KAAA,CAAA,CAAA,EAAA,QAAA,CAAA,CAAA,EAAGqK,EAAM,QAAA,CAAA,SAAY,CAAArK,EAAA,IAAA,CACzCA,mBAEF,CACAmB,EAAAA,EAAA,QAAA,CAAAhB,MAAAA,EACEA,SAAG,GACHH,KAAAA,OACEtC,MAAOiwC,QACPlmB,GAAQ,cACRxnB,IAAKwtC,EACL1sC,SAAM+J,IAAA,UACNrN,YAAG,MACH8E,eAAKkrC,MACL9pC,aAAsB,MAEtBgkB,WAAY,GACZwH,YAAe,kBACfD,QAAaxvB,GAAA,CACDkuC,EAAAluC,EAAA,OAAA,KAAA,CACA,CAAA,CAAA,oBACI,QAAA,EAAAM,EAAA,KAAA,CACEN,GAAAA,wBAClB,SAAA6uC,EAAA,IAAA,CAAAC,EAAA/rC,IAAAzC,EAAA,KAAA,CAEDuuC,SAAAA,EAAAA,SAA+B,CACvB,KAAA,eACiBjtC,SACpBnB,YACE,CACO6tC,EAAAQ,CAAA,CACC,EACNtuC,SAAesuC,CACbR,CAAAA,CAAuB,CACzB,CAAA,CAAA,CAAA,EAAAhuC,EAECjD,MAAAA,CAAAA,GACK,eAAC,SAEZ,wBAAA,CACC,CAEJiD,CAAA,CAAA,EAAKvC,IAAG,SAAAuC,EAAA,IAAA,CAAA,MAAe,QAAkC,SAC1D,yDAAA,CAMI,EACN8K,EAAY,MAAA,CACR/J,SAAM,CAAAf,EAAA,SAAA,CAAQ,SAAA8K,IAAA,WAAA,CAAA6iC,GAAA,CAAAgB,EAInBxtC,SAAAwtC,EAAA,iBAAAA,CAAA,GAAA,UAAAxuC,CAAAA,EAAAA,GAAAA,CACE,CAAA,EACEwD,EACEmH,GAAAA,CAA2C6jC,OAG5CA,IAAAA,SAEG,CAAU,IACH,KAAA,CAAA,CAAA,EAAA3uC,EAAA,IAAA,CAEfA,SAAOA,EAAA,IAAA,MAAS8K,mCAChB9K,OAAK,SACLG,6CACE,CAAA,CAAQ,CAAA,EAAmCgJ,EAAO,IAAA,CAAA,SAASnJ,EAAAkE,EAAA,CAExD,GAAA,IAELlE,SAAA,SAAA,CAAAG,CACO,CAAA,CAAA,CAAI,CAAA,CAAI,CAAA,CAAa,CC5LpC,MAAM0uC,GAAc,EACd9/B,GAAQ,GAEd,SAAS+/B,GAAO/hB,EAAO,CACrB,MAAMjhB,EAASgzB,KACT,CAAEhiC,MAAAA,EAAOC,SAAAA,EAAUkL,cAAAA,GAAkB5J,EAAI,CAC7CtB,SAAU+O,EAAO/O,QAAAA,CAClB,EACK,CAAC+N,EAASC,CAAU,EAAInO,EAAS,SAAS,EAC1C,CAAC0xB,CAAY,EAAIE,KACjB6B,EAAgBx0B,IAChBkb,GAAIgW,GAAAA,YAAAA,EAAOxH,QAAS+I,EAAaxsB,IAAI,GAAG,EACxC7B,GAAO8sB,GAAAA,YAAAA,EAAO9sB,OAAQquB,EAAaxsB,IAAI,MAAM,EACnD6+B,GACE5pB,EACK,WAAUA,CAAE,GACX9W,EACK,KACC,CACEyP,SAAU,QACVlO,SAAU,WACVyhC,SAAU,UAAA,EACVhjC,CAAI,CACP,IACD,EACL,GACD,SACH,SACH,EAEA,KAAM,CAACud,EAAUC,CAAW,EAAI7gB,EAAS,EAAK,EACxCmyC,EAAYlzC,EAAO,CAAC,EAC1BC,EAAU,IAAM,CACdizC,EAAUhzC,QAAU,CAAA,EACnB,CAACgb,EAAG9W,CAAI,CAAC,EAEZ,MAAM0zB,EAAgB93B,IACtB2kB,GAAgB,IAAM,UACNzkB,GAAAA,EAAAA,EAAAA,UAAAA,YAAAA,EAAS+kB,WAAT/kB,MAAAA,EAAAA,KAAAA,EAAoB,EAAG,EAAC,EACrC,CAACgb,EAAG9W,CAAI,CAAC,EAEZ,KAAM,CAAC+uC,EAAeC,CAAgB,EAAIryC,EAAS,CAAE,CAAA,EAC/C,CAACsyC,EAAgBC,CAAiB,EAAIvyC,EAAS,CAAE,CAAA,EACjD,CAACwyC,EAAgBC,CAAiB,EAAIzyC,EAAS,CAAE,CAAA,EACvDd,EAAU,IAAM,CACdmzC,EAAiB,CAAE,CAAA,EACnBE,EAAkB,CAAE,CAAA,EACpBE,EAAkB,CAAE,CAAA,CAAA,EACnB,CAACt4B,CAAC,CAAC,EACN,MAAMu4B,EAAqB,CACzB5/B,SAAUu/B,EACVztC,SAAU2tC,EACVlM,SAAUoM,CAAAA,EAGN,CAACryB,EAAkBa,CAAmB,EAAIjhB,EAAS,CAAE,CAAA,EACrDkhB,EAAoB,MAAOtc,GAAa,CAC5C,GAAI,EAACA,GAAAA,MAAAA,EAAU5D,QAAQ,OACvB,MAAMqZ,EAAgB,MAAMD,GAAmBxV,EAAUwb,CAAgB,EACrE/F,GACkB4G,EAAA,CAClB,GAAGb,EACH,GAAG/F,CAAAA,CACJ,CACH,EAGF,SAASs4B,EAAYh9B,EAAW,CAC1B,CAACA,GAAa,CAACtK,IAKnB8C,EAAW,SAAS,EAChBwH,GAAa,CAACtS,IAChBgvC,EAAiBD,EAAcnd,MAAM,EAAGgd,EAAW,CAAC,EACpDM,EAAkBD,EAAerd,MAAM,EAAGgd,EAAW,CAAC,EACtDQ,EAAkBD,EAAevd,MAAM,EAAGgd,EAAW,CAAC,IAGvD,SAAY,SACX,MAAM/iC,EAAS,CACbiL,EAAAA,EACAgE,QAAS9S,EACT1K,MAAOsxC,EAAAA,EAEL5uC,IACF6L,EAAOvO,MAAQwR,GACfjD,EAAO7L,KAAOA,EACVgI,IAAe6D,EAAOs0B,OAAS2O,EAAUhzC,UAG3C,GAAA,CACF,MAAM0W,EAAU,MAAM3V,EAAM+d,GAAGC,OAAO9c,MAAM8N,CAAM,EAClD1P,GAAAA,EACA,GAAUmW,EAAA,CACR+8B,EAAervC,CAAA,EAAAwS,EAAAxS,CAAA,CAAA,EACbqvC,MAAAA,IAAAA,EAAAA,EAAuBrvC,CAAUA,IAAjCqvC,YAAAA,EAAiCrvC,OAC3BrC,EAAAA,QAAiBqC,GACvB8uC,EAAoBhgC,CAAAA,CAAAA,EAAAA,CACpB0O,KAAY,CACP6xB,EAAArvC,CAAA,EAAAse,IAAA,CAAA,GAAAA,GAAA,GAAA9L,EAAAxS,CAAA,CAAA,CAAA,EACcA,MAAAA,IAAAA,EAAAA,EAAIA,CAAGse,IAAPte,YAAAA,EAAOse,OACpB3gB,EAAAA,QAAiBqC,EAAOrC,QAAAA,GACpB7B,EAAAA,CAAAA,CAAAA,EAAUgzC,CACR,MAETE,EAAAx8B,EAAA,UAAA,CAAA,CAAA,EACYA,EAAAA,EAAoB,YAAE,EACrBA,EAAAA,EAAQjR,UAAY,CAAA,CAAE,EACtBiR,EAAAA,QAAAA,EAClBs8B,EAAoB,EAAA,EAEtBjxB,EAAArL,EAAA,QAAA,EACAqL,EAAAA,UAEA/S,MAAoB,GACR,OAAA,CACZ3O,CACA2O,KACF,CAAAjP,EACC,IAAA,aACLib,IAEAjb,GAAAA,EAAAA,EAAgB,UAAhBA,YAAAA,EAAgB,WAAhBA,MAAAA,EAAAA,KAAAA,EAAgBib,GACdw4B,EAAO,EAAA,IAELA,GAAAA,EAAAA,EAAgB,UAAhBA,YAAAA,EAAgB,QAAhBA,MAAAA,EAAAA,KAAAA,EAEAlf,EAAAA,CAAAA,EAAAA,EAAAA,IACFjxB,GAAA,IAAAM,GAAA,UACCgf,GAAA7f,EAAAwxB,YAAA,YAAAxxB,EAAmB,QAAnB,MAAA6f,EAAA,KAAA7f,EAEHO,EAAAA,CAGIixB,iBAA+B,CAEjC,EAAA,KACkB,CAAAmf,CAAA,EAAAntC,KAClB,OACFrC,EAAA,MAAA,CAEM,GAAA,cAEN,uBACOvC,IAAGk2B,EAAc5yB,SAAMI,EAAA,MAAA,CAAsBwyB,MAAAA,qBAAcxzB,YAC9D,SAAA,CAAW,MAAA2K,IAAA,UAAA,UAAA,GAAoB3K,SAC7BH,EAAA,MAAA,CAAQe,MAAmB,cAA2BZ,YACpD,MAAA,CAAW,MAAA,cAAaA,SACtBH,EAAA43B,GAAA,EAAA,CAAA,CAAA,EAAW53B,EAAAouB,GAAA,CAAajuB,IACtBH,CAAU,CACP,EACLA,EAACouB,MAAU,CAAC7rB,MAAK8tB,cACjBrwB,SAAA,GAAA,CAAA,CAAKe,CAAM,CAAA,CAAc,CAAA,EAAMI,EAAM,OAAA,CAAA,SAClC,CAAA,CAAA,CAAA4V,GAAA5V,EAAA,MAAA,CAEPA,IAAAA,0BAEI,UAAA,UAAA,EAAA,GACEoB,SAAKitC,CAAAA,CAAAA,CAAAA,GAAAA,EAAAA,EAAAA,CACG,GAAA,UAAAz4B,EAAA,MAAyB,mBAAYA,mBAE3C,OACM5S,CAAAA,EAAAA,CAAAA,CAAuDhE,MAAC,gBAK9D,WACEyM,GAAO,aAAA,mBAAAmK,CAAA,CAAA,gBAAA,EACD,CACN5S,MAAK,WAEP,KAAA,WACEyI,GAAO,aAAA,mBAAAmK,CAAA,CAAA,gBAAA,EACD,CACN5S,MAAK,QAEP,KAAA,WACEyI,GAAO,aAAA,mBAAAmK,CAAA,CAAA,gBAAA,CAAA,EACD,KAAA,CAAAxC,EAAAL,IACDK,EAAA,OAAAtU,KAIDsU,EAAEtU,OAASA,EAAa,EACbA,CAAa,EAAA,IAAAorC,GAAArrC,EAAAkE,EAAA,CACrB,GAAAmnC,EAAA,GACR,SACKA,EACJrrC,KAAK,IAAUmE,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,MACPyI,EAAAA,CAAK,SACP,EAAA,CACP3M,GAACA,IAAA,aAAAkB,EAAAC,EAAA,CAGP,cACC,YAAApB,EAAA,KAAA,OACI,kBAEGC,SAAS,UACR,CAAA,EAAUivC,EAAA,OAAA,EAAA/tC,EAAAC,EAAA,CAAiBjB,SAAC,CAAAH,EAAA,KAAA,CAE7BkvC,MAAAA,8BACC/uC,SACEH,EAAA,IAAAwC,GAAAxC,EAAA,KAAA,CAAU,SAAAA,EAAA0T,GAAA,CACPw7B,QAAAA,EACC/uC,SAAAA,EAEIqC,UAAAA,GACAzF,aAAAA,EAAAA,EAAAA,EAAAA,CAAAA,CAAAA,CACS,EACTiZ,EAAAA,EAAAA,CAAAA,CAAyC,CAAA,EAAE/V,IAC5C,YAAAD,EAAA,MAAA,CAAC,MANavC,WASjB,SACM0D,EAAA+C,EAAA,CACG,MAAA,eAAU/D,GAAAA,aACd4W,CAAA,iBACHhW,SAAM,CAAA,qBAAAf,EAAAI,EAAA,CACN+D,kBAAmB,CACpB,CAAA,CACwB,CAAA,CAAM,CAAA,CAAA,CAAgB,CAAA,EACzC,CAAAlE,IAAA6K,IAAA,UAAA9K,EAAA,IAAA,CAAC,MAEV,WAGH,WACaqY,GAAA,CACF,OAAA,EAAA,CAAUlY,CACV,CAAA,EAAOH,EAAA,IAAA,CAAA,MAAE,WAGlBA,SAAA,oBAAA,CAAA,EAAS,CAAA,CAAA,GAAW,CAAAC,GAAAA,IAAA,aAAAkB,EAAAC,EAAA,CAAkB,SAEzC,CAAAnB,IAAA,YAAAD,EAAA,KAAA,CAGH,wBAEGC,SAAS,UACR,CAAA,EAAUmvC,EAAA,OAAA,EAAAjuC,EAAAC,EAAA,CAAiBjB,SAAC,CAAAH,EAAA,KAAA,CAE7BovC,MAAAA,yBACCjvC,SACEH,EAAA,IAAA4kB,GAAA,OAAU,KAAA,CAAwBzkB,KAAAA,EAExB,QAAAmrC,CAAE7iC,EAAAA,EAAM6iC,GAAAA,EAAAA,GAAAA,YAAAA,EAAAA,SAAAA,YAAAA,EAAAA,KAAAA,EAAAA,CAAAA,GAAAA,KAAAA,IAAAA,CAAAA,GAAAA,KAAAA,GAAQ,OAAI1mB,EAAAA,KAAAA,CACpBjV,SAAAA,EAAiBuN,EAAAA,CAIvB,KACE,IAAAngB,CAAA,MAAA0L,CAAA,GAAA,MAAAA,CAAA,GAAAtI,YACOC,EAAA,CACH+D,cAGiB,CAChBhE,EAAAA,EAAAA,OAEI,CAACE,SAAKoI,CAAW,CAAA,EACtBzI,CAAAA,CAAAA,GAAAA,EAAA,OAAA,CAAAG,MAAOsI,QACN,SAAEkH,GACDA,CAAA,CAAA,CAAA,CAAM5O,CAAM,CAAOZ,CACG,EAAA,GAEvBsI,CAAA,IAAAkH,CAAA,EAAA,CAAA,CAAA,CACG,CAAA,EAAC1P,IAfQ,YAgBbD,EAAA,MAAA,CAER,MAAC,WACC,SACMmB,EAAA+C,EAAA,CACG,MAAA,eAAU/D,GAAAA,aACd4W,CAAA,iBACHhW,SAAM,CAAA,qBAAAf,EAAAI,EAAA,CACN+D,kBAAmB,CACpB,CAAA,CACwB,CAAA,CAAM,CAAA,CAAA,CAAgB,CAAA,EACzC,CAAAlE,IAAA6K,IAAA,UAAA9K,EAAA,IAAA,CAAC,MAEV,WAGH,WACaqY,GAAA,CACF,OAAA,EAAA,CAAUlY,CACV,CAAA,EAAOH,EAAA,IAAA,CAAA,MAAE,WAGlBA,SAAA,oBAAA,CAAA,EAAS,CAAA,CAAA,GAAW,CAAAC,GAAAA,IAAA,aAAAkB,EAAAC,EAAA,CAAkB,SAEzC,CAAAnB,IAAA,YAAAD,EAAA,KAAA,CAGH,wBAEGC,SAAS,OACR,CAAA,EAAU+uC,EAAA,OAAA,EAAA7tC,EAAAC,EAAA,CAAiBjB,SAAC,CAAAH,EAAA,KAAA,CAE7BgvC,MAAAA,WACC7uC,SACEH,EAAA,IAAAqM,GAAArM,EAAA,KAAA,CAAU,SAAAA,EAAAkE,EAAA,CACP8qC,MAAAA,cACC7uC,GAAAA,EACO,IAAApD,CAAA,MAAAsP,EAAA,EAAA,GAAA,MAAAA,EAAA,EAAA,GACHtL,SAAMf,EAAAysB,GAAA,CACNtoB,OAAAA,CAGsB,CACrBhE,CAEM,CAACkM,CAAAA,EAAAA,EAAiB,EAAA,CAAA,CAAA,CAAA,EAACpM,IACtB,YAAAD,EAAA,MAAA,CAAC,MAVOvC,WAahB,SACM0D,EAAA+C,EAAA,CACG,MAAA,eAAU/D,GAAAA,aACd4W,CAAA,iBACHhW,SAAM,CAAA,kBAAAf,EAAAI,EAAA,CACN+D,kBAAmB,CACpB,CAAA,CACqB,CAAA,CAAM,CAAA,CAAA,CAAgB,CAAA,EACtC,CAAAlE,IAAA6K,IAAA,UAAA9K,EAAA,IAAA,CAAC,MAEV,WAGH,WACaqY,GAAA,CACF,OAAA,EAAA,CAAUlY,CACV,CAAA,EAAOH,EAAA,IAAA,CAAA,MAAE,WAGlBA,SAAA,iBAAA,CAAA,EAAS,CAAA,CAAA,EAAUG,CAAC,CAAAF,IAAA6K,IAAA,UAAA0S,EAAAxd,EAAA4e,GAAA,CAAe,SAEtCse,GAAA,OASmB,EACd,SAAAl9B,EAAA,SAAA,CACF,KAAA,SAAEG,MAAAA,cAGAF,QAAK,IAAAsvC,EAAA,EACLxuC,MAAM,CACNb,eAA2B,KACpB,EAAA,SAAkB,YAAA,CAAM,CAAA,CAAA,EAChCF,EAAA,IAAA,CAED,MAAQ,yBAGVA,SAAA,UAAA,CAAA,EAAS8K,IAAA,WAAA9K,EAAA,IAAA,CAAwBG,MAAC,WAAW,SAGnCH,EAAAqY,GAAA,CACD,OAAA,EAAA,CAAUlY,CACV,CAAA,EAAA,CAAO,CAAA,EAAE2K,IAAA,UAAA9K,EAAA,IAAA,CAAC,MAGrB,WACJ,SACYA,EAAAqY,GAAA,CACL,OAAA,EAAA,CAAUlY,CACV,CAAA,EAAOH,EAAA,IAAA,CAAA,MAAE,WAGlBA,SAAA,6DAAA,CAAA,CAAGe,CAAM,CAAA,CAAA,CAAW,CAAA,CAGrB,CAAA,CACI,CCvWf,MAAMgO,GAAQ,GACR0gC,GAA6B,GAC7BC,GAAa,EAEnB,IAAIC,GAAsB,CAAA,EACtBC,GAAoB,CAAA,EACpBC,GAAkB,CAAA,EACtB,SAASC,GAAoBryC,EAAI,CAC/B,OAAOmyC,GAAkBnyC,CAAE,EAC3B,OAAOoyC,GAAgBpyC,CAAE,CAC3B,CAEA,MAAMo8B,GAAwB,CAC5BC,MAAO,UACPC,OAAQ,SACR/Y,SAAU,QACZ,EAKM+uB,GACJ,sLAEIC,GAAmB,SAEzB,SAASC,GAAWnkC,EAAQ,CACpB,KAAA,CAAErO,GAAAA,CAAOqO,EAAAA,EACT,CAAEhP,MAAAA,EAAOC,SAAAA,GAAasB,EAAI,CAAEtB,SAAU+O,EAAO/O,QAAAA,CAAU,EACvD0D,EAAaC,GAAYzD,CAAM,EAC/B,CAACqxB,EAAcC,CAAe,EAAIC,GAAgB,EAClD0hB,EAAa5hB,EAAaxsB,IAAI,OAAO,EACrCquC,EAAiB7hB,EAAaxsB,IAAI,YAAY,EAC9CsuC,EAAapnC,SAASknC,GAAcC,EAAgB,EAAE,EAC5D,IAAIE,EAAYD,EAAa,EACvBE,MAAAA,EAAgBhiB,EAAaxsB,IAAI,eAAe,EAChDyuC,EAAcC,GAAUF,EAAevzC,CAAQ,EACjDuzC,GAAiB,CAACC,IACRF,EAAA,IAERI,MAAAA,EAAgBJ,GAAa,CAAC,CAACF,EAE/B7c,EAAOrB,GAAUx0B,EAAIV,CAAQ,EAC7B,CAAC2zC,EAAYC,CAAa,EAAI/zC,EAASK,EAAOyS,SAAS4jB,CAAI,CAAC,EAClEx3B,EAAU,IAAM,CACVmB,EAAOyS,SAAS4jB,CAAI,GACRr2B,EAAAA,EAAOyS,SAAS4jB,CAAI,CAAC,CACrC,EACC,CAACA,CAAI,CAAC,EAEHsd,MAAAA,EAAYtgC,GAAQ,IAAM,CACxB,KAAA,CAAEqZ,aAAAA,CAAiB1sB,EAAAA,EACnB6Q,IACH6b,GAAAA,YAAAA,EAAc7b,WAAY,MAAO6b,GAAAA,YAAAA,EAAc7O,SAAU,IACtD+1B,EACJC,GAAU,mBAAoBhjC,CAAQ,GAAKgjC,GAAU,SAAUhjC,CAAQ,EACrE,MAAA,CAACA,GAAY+iC,EACR,IAEF/iC,CACT,EAAG,CAAE,CAAA,EAELhS,EAAU,IAAM,CACV,CAAC40C,GAAcL,IAChB,SAAY,CACP,GAAA,CACIhkC,MAAAA,EAAS,MAAMvP,EAAMM,GAAGsS,SAAS1M,QAAQvF,CAAE,EAAEO,QACnDkiC,GAAW7zB,EAAQtP,CAAQ,EAC3B4zC,EAActkC,CAAM,OACR,CACZjQ,MAAAA,sBAAiB,EACjBgN,SAA4B,KAAAwnC,CAC5BjjC,CAAgBijC,IAEjB,EACL,CAAAP,CAAA,CAAA,EACF,MAAIA,EAAUC,EAAAC,GAAA,YAAAA,EAAA,iBAAAG,GAAA,YAAAA,EAAA,iBAERr0B,EAAmBi0B,GAAAA,IACRj0B,CAGX00B,CAAAA,OAAAA,WAAmB1U,iCAAkB,EAAA,SAAA57B,EAAA,aACzC,QACUuiB,KAAAA,EAIHytB,EACL,SAAmB,KAAAG,GAEZtiB,EAAA,OAAA,OAAA,EACLA,EAAa0iB,OAAO,eAAO,EAC3B1iB,GAAmC,EAGvC,EAAA,CAAAmiB,EAAAG,EAAAnwC,EAAA,YAAA,CAAA,EACF3E,OAAAA,EAAI20C,IAAAA,CAEJ30C,IAAAA,EAAgB,WAAA,IAAA,CACViR,MAAAA,WAAyB,cAAA,WAAA,EAErBkkC,GACNA,EAAe,MAAA,CAEf,EAAA,GAAA,EACF,MAAM,IAAA,aAAAlkC,CAAA,CACN,EAAO,CAAA0jC,IACLA,EAAAA,MAAc,CAElB,sBACO1vC,SAAM,CAAAsvC,EAAAh0B,GAAA,MAAAA,EAAA,OAAArc,EAAAigB,GAAA,oBAIH5D,SAAAA,GAAAA,EACA6D,SAAAA,EACAnjB,KAAAA,GAAAA,YAAAA,EAAAA,SACA4M,MAAkBitB,EAAAA,EAClBzW,QAAoB4wB,CAAA,CAAA,EACXA,EAAAA,MAAAA,CAGX/wC,MAAAA,gCAAKe,SAAMf,EAAAqY,GAAA,CAA+BlY,OACxCH,EAAO,CAAA,CAAO,CAAA,EAAEA,EAAAkE,EAAA,CAIpBlE,GAAAA,CAAK,CAAA,EAAK4wC,CAAAA,GAAAA,EAAAA,GAAAA,CAAY,GAAAnzC,EAIpBA,SAAAA,EAAAA,SACAV,UAAAA,CAAiBA,CACjB6zC,CAAAA,CAAAA,CAAAA,CAEH,CAGP,SAAAM,GAAA,CAEA,GAAAzzC,EAAwBA,UAAAA,EAAAA,IAAImzC,SAAYn2B,CAAA,EAAeA,UAAgB,KAAA,CAAA6T,EAAAC,CAAA,EAAAC,GAAA,EAC/D0hB,EAAC5hB,EAA6B,IAAA,OAAoB,EAClD4hB,EAA0BpuC,EAAAA,IAAW,eAAA,EACrCwuC,EAAAA,SAA6BxuC,EAAI,EAAe,EAAA,EAChDuuC,EAAYrnC,EAAAA,CAAAA,EAAqB,eAAM,QAAA,SAAA,GAAA,eAAA,UAAA0V,GAAA7f,GAAA,mCAAA,UAAA,YAAAA,GAAA,+BAAA6f,EAAA,UAAA,EAAA,EACvCnM,CAAY1W,EAAAA,CACfoB,EAAAA,IACUW,IAAAA,MAAAA,GAAW2U,EACjB,QAAA,OAA0B4+B,IAAAA,EAE3BC,EAAsB,CAAA,CAAA,SAAA9iB,EAC1BA,IAAAA,WAAiB,CAAA,EAEb8iB,CACA,MAAAt0C,EAAEA,SAAAA,CAAOC,EAAAA,EAAAA,UAAiB0d,CAAA,CAAA,EAA0B,CACpD,MAAAtK,EACJrT,SAAOqT,EACPpT,cAAAA,CACAkL,EAAAA,EAAAA,EACMqlB,EAAAvwB,IAAAqT,EACFkd,KAA4Bld,CAAAA,EAC5B3P,CAAAA,EAAAA,GAA+B7D,EAAA,CAAA,CAAA,EAC/B,CAAC8S,EAAU2hC,CAAAA,EAAez0C,EAAAA,SAAW,EACrC00C,EAAoBz1C,IACpBy1C,KAAuB7zC,EAAAV,CAAA,EACvBu2B,EAAiB71B,EAAY,CAAA,EAC7B8zC,EAAAA,IAENz1C,cACAA,EAAAA,EAAgB,UAAhBA,MAAAA,EAAgB,OACd63B,EAAAA,CAAAA,CAAAA,EACF73B,EAAK,IAAA,OACLA,MAAAA,EAAgB01C,GAAA,IAAA,CACRrc,GAAAA,CAAAA,UAEJ,OAA4B,KAAA,CACtB,UAAAD,CAAA,EAAEA,EAAAA,QAAcvB,IAAc53B,YACpC8zC,GAA2BpyC,CAAA,EAAAy3B,EAE3B,EAAA,EAAA,EACF,OAAAr2B,EAAA80B,EAAK,UAAL,MAAA90B,EAAK,iBAAA,SAAAs2B,EAAA,CACSp5B,QAAAA,EAA8C,GAE5Do5B,IACS,IAAA,OACTA,EAAa,OAAA,GACXA,EAAAA,EAAgB,UAAhBA,MAAAA,EAAgB,oBAAA,SAAAA,EAChBxB,CACF,EAAA,CAAAl2B,EAAAqN,IAAA,SAAA,CAAA,EACF,MAAQA,MAEF2mC,IACN,WAAAC,CAAuBA,EAAAA,KAAAA,CAAW3mC,EAAW,SAAA,EACnCohB,IAAAA,EACRphB,MAAAA,EAAoB6kC,GAAAnyC,CAAA,EAChBk0C,GAAAA,EAAAA,CAEEC,MAAAA,KAAqC,OACvBhyB,IAAA3iB,EAAA,SAAAq2B,CAAA,CAE0B9X,EACf61B,EAAAQ,EAAA,CAAA,MAG7BR,EAAYQ,CAAoB,CAC3B,GAAAp0C,CAQL4zC,CAAAA,CAAAA,EAAe5zC,OAAAA,SAAK,UAEtB,MAAAq0C,GAAA,IAAAC,GAAA,IAAAj1C,EAAA,GAAA,SAAA,QAAAW,CAAA,EAAA,QAAA,CAEa,QAAA,CACX,CAAMq0C,EAEOE,GAAAD,GAAA,IAAAj1C,EAAA,GAAA,SAAA,QAAAW,CAAA,EAAA,QAAA,MAAA,EAAA,CACV,QAAA,CACH,CAAMu0C,EAGOrkB,GAAA,CAAA,CAAAltB,EAAA,SAAA6yB,CAAA,EACX,IACF2e,GAAAxxC,EAAA,SAAA6yB,CAAA,EAEA,GAAA,EAAA3F,IAAkB,CAAA+jB,GACdhB,GAAAA,CACA/iB,GAAc+jB,MAAYI,KAC5B11C,MAAqCW,CAAA,EAChC,MAAA,IAAA,QAAAge,IAAA,CACD,WAAAA,GAAA,GAAA,CACF21B,CAAAA,CACAxQ,MAAAA,CAEMn1B,SAAagQ,EACjBxc,MAAuB,CAGzBnC,GAAAA,CACA2O,IAAAA,GAAkB,SAAAmnC,EAAA,CAClB,OAAAA,GAAA,YAAAA,EAAA,IAAAC,KAAA,CACF,GAAAA,GAAA,GACF,QAAAA,GAAA,QAEI,aAAAA,GAAA,aAoEOC,QAAAA,GAAAA,QACAF,OAAAA,GAAuBC,EAAA,EAC5B10C,QAAOA,GAAAA,GAAAA,SAAAA,CAAAA,GACK+E,EACK4zB,SACLpS,MAAAA,GACZquB,CACAxiC,UAASuiC,GACX,YAAAE,EACF,EAAA5f,GA5EA6e,EAAsBS,SAAAA,IAAAA,YAAAA,GAAAA,SAAAA,EAChB,MAAAO,GAAA,IAAA,IAAAC,GAAEC,QAAAA,GAAAA,CAAWH,GAAAA,EAAAA,EAAAA,CAAgB5f,cAAAA,EAEnC6e,CAAiBx1C,EAEXw2C,EAAAA,sBAA0B3yB,IAAAA,GAAA,KAAAvT,EAAA,WAAA,GAChComC,GAA8B,IAAApmC,EAAA,WAAA,CACC,CAAA,EACZ,MAChBqmC,GAAAF,GAAA,MAAA5yB,GAAAA,EAAA,QAAA,KAAAqyB,GAAA,QAAA,EAAA,EAEC5lC,GACA,CAAA,EAEgBuH,GAAAA,QAAAA,GAAsB,CAQX,GAP7BssB,GAAA7zB,EAAAtP,EAAA,CACD,cAAA,EACD,CAAM21C,EAGAC,eAAsB,CAAAL,GAAA,KAAA1yB,IAAAA,GAAA,KAAAvT,EAAA,WAAA,GAAAA,EAAA,cAAA4lC,GAAA,IAC5BK,GAAqBjmC,IAAWA,EAAA,WAAA,EAEbA,EAAA,qBAAAA,EAAA,QAAA,GAChBsmC,GAAA,KAAAtmC,CAAA,UAGQsmB,EAAAA,cACN2f,GAAwB1yB,GAGThM,GAAAA,MAAsB,UACxC,CAAAvH,EAAA,oBAAAsmC,GAAA,KAAA/yB,IAAAA,GAAA,KAAAvT,EAAA,WAAA,GAAAA,EAAA,QAAA,KAAA4lC,GAAA,QAAA,GAEAU,GAAWhnB,KAAAA,CAAAA,MAETgnB,CACStmC,MAAAA,GAAAA,GAAuBqkC,KAAAA,IAAAA,GAAAA,KAAerkC,EAAA,WAAA,EAE/CsmC,QAECtmC,YAKDsmC,GAAAA,UAAuBtmC,IAGvB0pB,aAA2B3X,KAAAA,CAAAA,EAErB,CACF2X,CAAAA,EACFwc,GAAA,KACOK,MAAAA,GAAAA,CAAAA,MAAqB,IAAAhzB,IAAA,CAAA,GACvBA,EAAA,GAEGhU,SAAAA,GACV,SAAA8mC,GACF,UAAA9yB,EAAA,QAAA,GACD,QAAAA,EAAA,QAEDxjB,aAAYwjB,EAAA,aAAE6yB,OAAAA,GAAAA,CAAAA,CAAWH,EAAAA,EAAAA,CAAaK,GAAAA,EAAmB,UAAAV,GAAA,QAAA,GACzD,UAA0BA,EAAA,CACxB71C,EAAAA,GAAAA,GAAc,IAAAwjB,IAAoB,CACpC,GAAAA,EAAA,GAaA,QAAoBA,EAAA,QAEhBniB,UAAMA,EAAAA,QAAAA,GACNo1C,WAAU,GACVC,OAAUJ,EAAAA,QAAAA,KAAAA,GAAAA,QAAAA,GACVljC,OAAAA,GAAqB/R,CAAAA,EACrB+E,QAASod,GAAEpd,EAAAA,SAAAA,CAAAA,EACX4zB,GACAic,aACFZ,EACA,QAAA,CACEh0C,WAAAA,GAAAA,EAAAA,UAAAA,YAAAA,GAAAA,UACA+R,WAAWkhC,EAAAA,EAAmBjzC,UAAnBizC,YAAAA,EAAmBjzC,SAAAA,EAEhC,MACGk1C,GAAkBrxC,GAAY,UAAAse,GAAAA,EAAA,KAAAniB,CAAA,MACzBA,GACN+E,GAASod,GAAEpd,CAAAA,EACU/E,EACTs1C,EAAA,EAAAnD,GACMnyC,CAAAA,EAAAA,GAClB40C,MAA0Bt1C,CAAA,CAC1B8S,MAAAA,CACF9E,EAAG,OAAA,CAGLA,CACA0mC,KACEuB,IAAAA,CACA9d,aAAAA,EAAkCA,CAIpC,EACAp5B,EAAIm3C,EAAa11C,CAAOE,EAAAX,CAAA,CAAA,EACtBo2C,EAAAA,IAAAA,SACF,GAAA,CAAAxjC,EAAA,OAEAtT,OAAc22C,MAAAA,EAAAA,GAAAA,CAAAA,EAAAA,GAAaI,EAC3B9B,EAAY0B,QAAW,UAAAI,UACvBvD,EAAwBmD,QAAAA,CAKxBK,MAAAA,eACUv0C,EAAAyyC,EAAA,UAAA,YAAAzyC,EAAA,UACVzC,eAAe,wBAAA,SACf2O,EACFsoC,GAAAC,GAAA,UAAA7B,EAAA,QAAA,UAAA6B,GAAA,UACC3f,EAAA,QAAA,UAAA0f,EAEH,MAAa3jC,EAAA,SAAA,IACX3Q,EAAsB,QAAA,UAAA,GAE1B0yC,EAAA,QAAA,IAEA31C,EAAAA,CAAAA,CAAuB,CAAA,EACvBA,EAAU,IAAM,CACV2E,EAAU7C,kBAAAA,IACNuuB,SAAAA,CACFgnB,GAAAA,CACEhnB,KAAAA,CACFgnB,YAAAA,CACJ/2C,EAAAA,GAAwB,EACtBqB,EAAAA,WAAAA,CAAAA,oBAAAA,CAAAA,WAED,aADC01C,MAAAA,OAAAA,KAAAA,KAAAA,GACD,OAAAI,EAAA,CACD5f,aAAkCwf,CACpC,EAC2BK,EAAA,CACvBR,aAAkCA,CAClC9d,CAAkCA,MACpC,CAAA,CACA,IAIA94B,EAAAA,CAAAA,kBAAwB,CAAA,EAAAN,MAEtBw3C,IAAAA,CACAD,GAAAA,CAAAA,EACA3jC,EAAAA,iBAAsB,EACxBkgC,GAAC,CAAA,EACDjc,GAAsBuB,CAAAA,EACxBue,GAAoB71C,MAAAA,CAClBxB,EACEqB,CAAAA,CAAAA,EAAAA,MACDizC,EAAAjwC,EAAA,SAAA6yB,CAAA,GAAA7yB,EAAA,SAAAhD,CAAA,EACDk2B,KAAkC,IAAA,CACpC,GAAA,CAAA+c,EAGAe,MAAAA,GACF,KAAI/hC,CAEJ5T,QAAAA,CACE,EAAI2E,EAAkCizC,EAAA,SAAA,cAAA,KAAA,EAEtC,OAAAA,EAAa,UAAAlxC,EAAA,YACPkxC,EAAA,UAAA,MACF,EAAM,CAAAhD,CAAA,CAAA,EAAEviB,EAAAA,GAAAA,IAAAA,CAAAA,GAAY,GACpB,MAAA,GACQxvB,IAAAA,EAAAA,IAA6B,EACrC,OAAAua,EAAA,OAAiB,KACXy6B,EAAAA,EAAAA,YAA4B,KAAoBz6B,CAEtD,EAAA,CAAAw3B,CAAmB,CAAA,EAAA/P,GACLiT,GAAAC,EAAA,GAAAD,CAAA,MAAAC,CAAA,IAAA,SAAA,mBAAA,EAAA,MACdC,GAACxjC,GAAA,IAAA,CAAA,MAEDlU,OACF,KAAA,CACC,IAAAyG,CACF,EAAYumB,EAEfttB,GAAAA,EAGI+zC,OAAAA,IAAAA,IAAAA,CAAAA,EAAkB,QAClB5yC,EAAAA,CAAAA,CAA0B,CAAA,EAC1B2yC,GAAqBt/B,GAAA,IAAA,CACrBq/B,GAAAA,GAEF,OAAAmE,KAAA/2C,CAAA,EACC,IAAEA,CAAA,CAAA,EAEC2zC,KAAwBhhC,EAAAA,EAAAA,IACxBkkC,GAAAA,OAEClD,EAAAA,OAAAA,EAAmB,CAAAhhC,EAAA,OAAAnS,CAAA,CAAA,EAClBw2C,EAAArkC,EAAA,KAAAkQ,GAAAA,EAAA,UAAA,EAAEpd,EAAAA,EAAAA,OAAAA,GAAAA,EAAAA,QAAAA,EAAYkuC,CAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EACdgD,GAAe3/B,GAAAA,GAAmB,GAAA,EACpCigC,GAAoBljC,GAAAA,IAAAA,CACjB4iC,GAAAA,CAAAA,WAAmBO,EACxBvD,OAAAA,KACEmD,KAAAA,CACJ,IAAA5jB,CAAiB,EAAOqhB,EAAA,QAAA,wBACpBp4B,OAAAA,WAA4B,IAChC,EAAIA,CAAAA,IAGFA,GAAOA,MAAK2Y,IAAS,CACvB,SAAA,KAAA+e,CACA,EAAO13B,CASH46B,QAAAA,CAAAA,EACJ,gBAAKpD,GAAY,CAAA,CAAA,SAAA,cAAA,sBAAA,CACT7tC,CAAAA,EACRzD,GAAKyD,YAAAA,IAAAA,CAAK,SAAA,KAAA+tC,CACV,CAAO,EACTxxC,GAAIsxC,IAAW,IAAA,CACTwD,MAAAA,EAAAA,uBAAiC,QAAA,6BAAA,EAChCJ,EAAAA,GAAAA,YAAAA,EAAAA,wBAAcK,EAAA,MAAA,KAAAxgB,EAAA,QAAA,iBAAAoc,EAAA,CAAA,EACnB,GAAAqE,GAAwBr3C,EAAAA,IAAAA,EAAAA,QAAAA,cAAAA,EAAAA,OAAAA,EAAAA,CACtB+2C,MAAc/2C,GAASo3C,EAAA,QAAAC,CAAA,EAE3B,IAAO72C,GAAe42C,EAAkBE,GAAA,CAAA,EAClC72B,KAEJ82B,SAAyB/2C,EACdK,GAAAA,eAAci8B,EAAA,EAG3B,KAAkBnqB,CAElB,MAAOukC,GAAyBE,EAAa,KAAII,IAAA,CAC3CC,MAAAA,GAA8BC,GAAAA,wBAC9BC,OAAAA,GAAsB,KAAM,IAAAC,GAAA,MAAA,CAEhC,CAAI,EAA6CC,KAC3CA,GAAA,MAAA,EAAE3kB,GAAAA,eAAAA,EAAAA,EACDA,CAAmB,CAC5B,EAEA7wB,GACE,QACM,CACJuO,MAAAA,EAAgBijC,SAAAA,cAAAA,QAAAA,6BAAAA,EAElBiE,EAAAT,GAAA,YAAAA,EAAA,wBAAAD,EAAA,MAAA,KAAAxgB,EAAA,QAAA,iBAAAoc,EAAA,CAAA,EAAA,GAAAqE,GAAAS,EAAA,IAAAlhB,EAAA,QAAA,cAAAkhB,EAAA,OAAA,EAAA,UAGYxE,EAAAA,QAAAA,CAAAA,SACc8D,EAAAE,GAAA,CAAA,EACtBS,KACOj0C,GAAAA,MAAAA,EACTi0C,GAAA,eAAAjb,EAAA,EAIJz6B,KAAAA,CACEuO,MAAAA,GAAgBijC,EAAAA,KAAAA,IAAAA,CACjB,MAAA+D,GAAAJ,GAAA,wBAEDn1C,UAAsB,KAAA,IAAAu1C,GAAA,MAAA,CACpB,CAAA,EAGME,KACND,SAA6BpuB,EAG7BpqB,GAAY,eAAAy9B,EAAA,EAAkB,CAC9B,CACEua,EAIMC,GAAAA,IAAAA,IAAAA,CACFC,MAAAA,EAA4BD,SAAAA,cAAAA,QAAAA,6BAAqB,EACrD,GAAAD,EAAgB,CACdE,MAAAA,EAAiBF,EAAA,mBACjBE,aAA+C,YAAA,IAAA,YACjDS,EAAA,KAAA,CAAAA,EAAA,KAGMH,CACJ,CAAMD,EACN,KAAA,CAA0D,eAAAhgB,EAE5D,EAAAjB,GAAuB,CACrBkhB,cAAAA,EACAA,oBAAAA,EAAsD,CACxD,EACFI,GAAAn5C,EAAAw0C,EAAA,eAAA,QAAA,EACD4E,EAAA5Y,GAAA,CAAA38B,EAAA+C,EAAAia,EAAArQ,KAAA,CAEDjN,EAAAA,eAAsB,EACpBM,EAAA,gBAAqBxD,EAGf24C,EAAAA,CACN,UAIET,cAAAA,KAIA,CAAMC,CACN,EAAIS,CAAAA,CAAAA,CAAAA,EACJI,EAAgB7Y,GAAA,CAAA38B,EAAA2M,IAAA,CACdyoC,GAAiBzoC,EAAA,EAAA,CACjByoC,EAAAA,CAAAA,CAAAA,EACFh5C,EAAA,IAAA,CACF,IAAOiR,EAEC6nC,OAAAA,GAAAA,IACED,EAAAA,WAAAA,IAAiBJ,OACvB,MAAAloC,GAAsB4jB,EAAAA,EAAO,UAAPA,YAAAA,EAAa0kB,cAAuB,wBAAArE,CAAA,MAC3DjkC,GACGuoC,EAAmB,eAAA/a,EAAA,CAErB+a,EAAAA,GAAAA,GAEJ,IAAA,CACD,aAAA7nC,CAAA,CAID3N,CACE,EAAA,CAAAkxC,EAAqBp0C,CAAAA,CAAAA,EAGrB,MAAIk4C,EAAc/X,GAAAhwB,GAAA,CAChB,KAAA,CACA,GAAI0oC,EACM/b,SAAAA,EACV,SAAA8Z,GACF,WAAAqC,GACD,OAAAC,GAEK,QAAAvlC,GAAE8kB,aAAAA,GAAmBjB,OAAAA,CACzBC,EAAAA,EACqB0hB,GAAAn1B,IAAAziB,EACtB,OAAA0D,EAAA,KAAA,CAED,IAAyBtF,GAAAA,EAAmB,KAE5C,WAAyBwgC,WACtB38B,EAAG+C,IAAGia,GAAkB,aAAA,EAAA,IAAA04B,GAAA,SAAA,EAAA,IAAAC,GAAA,OAAA,EAAA,GACrB5mC,SAAe,CAAA4mC,GAAAl0C,EAAAC,EAAA,CACC,SAAA,CAAApB,EAAA4e,GAAA,CACF,UAAA,YACH41B,wBAEZ,SAAA,EAGL,SAAAx0C,EAAAysB,GAAA,CAE8B4P,SAAAA,EAC5ByT,SAAAA,EACG,cAAA,GAEK,KAAM,IACV/iC,gBAAAA,kBAC4BqkC,CAC9BrkC,CAAAA,CACE,CAAA,EAAAjC,IAA6B/O,WAAAA,CAAAA,EAC1BoF,EAAA,MAAA,CAEH,MAAY,qBACVkL,iBACF,SAAA,0EAAA,CACI,EAAArM,EAAAkE,EAAA,CACR,GAAA,SACa,MAAA,SACXnF,SAAkB,QAAA,CACpB,CAAA,CACiBsxC,CAAAA,EAAAA,CAAAA,GAASlvC,EAAC,MAAA,CAEvBm0C,MAAAA,qBAEI,SAAA,CAAAn0C,EAAA,IAAA,CACA+e,SAAAA,CAAAA,uCAAAA,EAAAA,IAAAA,CACJ2yB,SAAAA,CACAC,CAAAA,EAAAA,uDAAAA,CAAAA,CACAqC,EAAAA,EAAAA,SAAAA,CACAC,KAAAA,SACAvlC,SAAAA,IAAAA,UACAumB,QAAAA,IAAAA,CACAic,EAAAA,SAAAA,GACEhmC,SAAAA,IACwB5O,CAoB1B,MAAAgV,GAAA,MAAAtC,EAAA,GAAA,OAAA,MAAA,CAEgBmhC,EAAgBZ,EAAA,IACpBmC,KAAAA,WAKR1xC,QAAAA,GACEnB,MAAO,CAAA,CACM,EACDw0C,GAAAA,GAAAA,SAAAA,OAAAA,CACJ,MAAAhoB,GAAA/Z,GAAA,SAAA,CAAA,EACI,SAAA,KAAArC,EAAA,IAAAA,CAAA,MAAAoc,GAAA,EAAA,GAAA,MAAAA,GAAA,EAAA,EAAA,KAGRtM,OAAAA,IAAAA,MAAAA,YAAAA,CAEa,OAAAxgB,GAAA,CACRqL,EAAA,SAAA,EACU,MAAA,UAAArL,EAAA,CACC0xC,CAAAA,IAGnBtmC,EACY,SAAA,CAAA9K,EAAAI,EAAA,CAAoBD,eAC1B,CAAA,EAAA,+CAAA,CAAA,CAGA,CACHH,CAAK,CAAA,CAAA,CAAI,CAAA,EAAwBmB,EAE1B+C,EAAA,CACJ,MAEJopB,cACMvsB,GAAMhE,EAAA,IAAAA,CAAA,MAAAmjB,CAAA,GAAA,MAAAA,CAAA,GAAoB/f,QAAAA,IAC7BgB,CAAAhB,GACsCH,CAAAA,CAAA,EAAY,SAElD,CAAAA,EAAAysB,GAAA,CACAtrB,SAAAA,EACElB,SAAAA,EACA0D,cAAsB,GACtBzD,SAAe2yC,EAAA,IAAA,IACb9nC,gBAAoB,GACpB,aAAakqC,EACP,kBAAAC,CACF,CAAA,EAAArC,GAAgBC,IAAA1c,GAAmBvb,KAAgB,MAAA,CAAA,MAAA,eACnChY,SACR,CAAA7C,EAAAI,EAAA,CAAA,KACN2a,UAAS,CAAA,EAAA,IACF/a,EAAA,OAAA,CAAA,MACRo2B,GACG3jB,SAAAA,KAAyB,CAC3B,CAAMpG,CAAAA,CACGyhB,CAAAA,EAAAA,GAAAA,CAEW,CAAA,EAEdqnB,KAAAtlC,IAAA,YAAAA,WAAsB,GAAA7P,EAAAu1C,GAAA,CAC9B,SAAAx4C,EAAA,QAAA8S,GAEA9E,gBAAAA,GACA3B,MAAAA,EACAhN,UAAAA,EACF,QAAAm1C,EAAA,QAAA9B,EAAA,CAAA,EAAA3kC,IACC,WAAAuqC,IAAA,CAAA,EAAA3E,GAAA,MAAAA,EAAA,eAAA,CAAAqD,GAAA/zC,EAAA,MAAA,CACL,MAAA,iBAAEG,SAAAA,EAEFH,GAAK,EAAA,CAAA,CAAA,EAAA8K,IAAM,SAAAuqC,IAAA,CAAA,EAAA3E,GAAA,MAAAA,EAAA,eAAA,CAAAqD,GAAA5yC,EAAA,MAAA,CAAU,qBAEvB,SAAS,CAAA,0BAAAnB,EAAA,KAAA,EAAA,EAAAA,EAAA,SAAA,CAGd,KAAA,SACD,MAAA,QAAA,QAAA,IAAA,GAGG,kBACG,EACNmE,oBAA6D,CAAA,CAC7DjE,CACE4vC,CAAAA,CAAAA,CACF,EAAA5vB,CAAA,CAAE/f,EAAAA,CAAAA,EAAAA,EAAA2K,EAEK7C,EAAAqlB,EAAA8jB,EAAA6D,EAAAC,EAAAnB,CAAA,CAAA,EACL7zB,GAAAA,GAAAA,IAAAA,OACAnjB,GAAAA,eAAAA,SAAAA,6BAAAA,SAAAA,CAAAA,MACAy4C,EAAa,WAAA,QAAA,EAAA,WAAA,aAAA,MAAA,CAAA,EACbl1C,GAAAA,GAAAA,MAAAA,EAAgBuyC,IAAiB,OAClB7C,GAAA,KAAAyF,EAAA,GAAA,CACDR,CACKC,OACpBlF,aACuC,6BAAA,SACtC,EAAA,CAAA1c,CAAA,CAAA,EAAyBnzB,OAAAA,EAAAA,MAAA,CAClB,SAACE,KAAK,IAAAszB,EACX,MAAA,8BAAayC,EAAAA,OAAAA,EAAAA,gBAAAA,EAAAA,IAAAA,GAAAA,UAAAA,UAAAA,CAAAA,EAAAA,QAAAA,WAAAA,EAAAA,IAAAA,EAAAA,aAAAA,CAAAA,GAAAA,EAAAA,GAAaj2B,eAAAA,IACG60C,GACtB,UAAA,WAAAA,GAEL,QAAA,KAUF,EAIJj4C,SAAAA,CAAAA,EAAAA,SAAAA,CACA8S,MAAAA,GAAAA,EAAAA,SAAAA,EAAAA,IAAAA,IAAAA,UAAAA,UAAAA,EAAAA,GAAAA,WACiBulC,GAAAA,CACjBM,EAAO,kBAAA,EAEPC,SAAAA,SACD,MAEU,4BAIJ50C,SAAM,CAAAI,EAAA,KAAA,CACTnB,SAAAA,CAAAA,IAASA,EAAA,SAAA,CAGF,KAAA,SAIE,MAAA,kBAAcG,QAEvBH,IAAAA,CAEO,QAAA,KAAA,CACC,WACSA,EAAAI,EAAA,CACNgpB,KAAAA,eACT,KAAA,IAAA,CACD,CAAA,CAEQ,EAAA,CAAA6qB,GAAAvD,GAAA5lC,IAAA,UAAA3J,EAAAC,EAAA,CAEZ,SAAA,CAAAD,EAAA,OAAA,CACD,MAAA,eAMN2J,SAAAA,CAAAA,EAEAwiB,GAAAA,CAQEsoB,QAAAA,UAEA,SAAA74C,aAC2B84C,SACT,EAClB,CAAO7F,EAAAA,IAAAA,EAAAA,OAAsByF,CAC/B,MAAA,gBACF,SAAA,CAAA,IAAA,IAAAz1C,EAAAosB,GAAA,CACwBlpB,SAAAA,EAAYymB,UAC7B,OAAA,OAET,CACE,CAAA,CAAA,CACW,CAAA,CAAA,CACJgK,EAAAA,IAAAA,EAAAA,SAAAA,qBAQkB,kCAGjBqhB,QAAAA,IAEFA,EAAAA,eAA2B,EAC7Bt1C,EAAA,gBAAA,EACF4xC,EAAA,QAAA,eAAA,CAEAtxC,SAAA,SACyB,MAAA,OAEtB,EAGQopB,EACT,MAAA,kBAAEjpB,SAOFH,EAAAI,EAAA,CAAW,KAAAs0C,KAAA,OAAA,aAAA,UAAA,CAA2Bv0C,CACpC,CAAA,CAAA,CAEI,CAAA,EACOgB,EAAAC,EAAA,CACLL,SAAM,CAAA,OAAA,IAAAI,EAAA,SAAA,eAEJmqC,MAAAA,kCACF,QAAA5rC,GAAA,CAAES,EAAAA,eAEG,EAAMT,EAAA,gBAAA,EAAoBi0B,EAAA,QAAA,SAAA,CAAM,IAAA,EAGvCsgB,SAAAA,QACA,CAAA9zC,CACc,EAAcA,OAAAA,CAAAA,EACf,QAAAw0B,GAAA,WACanyB,MAAAA,2BACpBzF,SAAAA,CAAAA,EAAAA,EAAAA,CACA+uB,KAAU,UAAA,CAAA,EACL2mB,EAAA,OAAA,CAAAl+B,EAAA9R,EAAAqzC,IAAAA,EAAA,UAAA5hC,IAAAA,GAAA,YAAAK,EAAA,SAAA,IAAA9R,CAAA,EAAA,MAAA,EAAA,CAAA,EAAA,IAAAowC,GAAA7yC,EAAA4C,GAAA,CACN,IACDzB,EAAA,QAAA,OAAMJ,IAAM8xC,EAAA,QAAA,WAAA,YACH,EAAA,CACP7yC,IAAa,OAAA,GAAAmB,EAAAC,EAAA,CAAA,cACUyP,EAAAA,OAAAA,CACrBwb,MAAO,gBACP,SAAA5W,GAAAg9B,EAAA,MAAA,CAAA,CACG,CAAA,CAAA,CACH,CAAE,CACR,CAAA,CACExyC,CAAK,CAAA,CAAA,CACC,CAAA,EAAAkB,QACU,CACdzB,MAAAA,cACAA,SAAkB,CAAAM,EAAA,SAAA,CAClBsxC,KAAAA,SAAqC,MACzB,4BAAA,MACH,CAAA,QACRyE,IAAA,OAAA,GAAA,MACH,EAAA,QACM,IAAA,CAAiB51C,MAElB,EACHE,EAAsB,OAAA,OAAA,EAAmCiuB,EAC1D,OAAA,YAAA,EACMA,EAAA,OAAA,MAAA,EAGXntB,EAAAmtB,CAAA,CAAE,EAEA,MACO,2BAAA,SACCtuB,EAAAI,EAAA,CACNF,eAEER,KAAiB,GACjBA,CAAAA,CACAi0B,CAAAA,EAAAA,EAAAA,GAAAA,CAA+B,MACxB,MAAA,OACK,CAEd,OAAAA,EAAA,OACA13B,EACAuH,WAAUivC,EAAAA,SAAiB,CAA0BtyC,KAAAA,SAEhD,MAAM,gBAAU,SACpBsyC,EAEGryC,EAAA,CAOEyC,YACAtC,IAAKsyC,UAA6B,KAFpBrwC,IAOlB,CAAA,CAEE,CAAA,EAA2BrC,SAAAA,CAAAA,EACVsyC,GAAAA,CAAgB,SAC1B3nC,IAAA,UAAA,QAEV,IAAA,CACM7N,EAAA,kBAEZ,EAEHkE,SAAA,CAAAnB,EAAAI,EAAA,CAAW,KAAA,SAAA,CAAaD,EAAAA,EACtBH,OAAA,CACO,SAAA,SAAA,CACC,CAAA,CAAA,CACC,EAAAmB,EAAAsC,GAAA,CACLuG,UAAsB,mBACxB,QAAA,IAAA,GACe+rC,IAAA,OAAA,KAAA,MAAA,EACbC,EAAgB,OAAA,OAAA,EAChB1nB,SAA2B,YAAA,EAC3BA,WACAA,SAA0B,MAAA,EAE5BA,EAAA,IAAA,OAAA,MAAA,EACgCnuB,EAE3BmuB,CAAA,CAAM,EAAUhuB,SAAK,CAAAN,EAAAI,EAAA,CAAK,KAAA,CAEjCe,GAAM,UACE,KAAA,SAAA,EACE40C,GAAA,EAAA,CAAA,CAAA,EAAA50C,EAAA,OAAA,UAEgBpF,CAAAA,aAAAA,IAAAA,OAAAA,YAAAA,OAAAA,OAAAA,CAAAA,CACxB,CAAA,CAAA,CACAwH,EAAAA,EAAAA,GACE,CAAQtD,QAAK,IAAA,CAAe,MAAA,KAAA0zB,EAAA,QAAA,iBAAA,+BAAA,CAAA,EAC1B3zB,QAAKi2C,GAAA,CAAMA,EAAA,MAAA,CAAA,CAAW,CAAA,EAAmB,SAAE,CAAAj2C,EAAAI,EAAA,CACrC,KAAA,UAAA,CACTD,EAAAA,IAEDgB,EAAAA,OAAS,UACe,4BAAA,GAEpBlE,CAAOmsB,EAAAA,EAAAA,GAAAA,CAAAA,CAAAA,EAAAA,EAAAA,GAAAA,CACT,UAAA,QAAEjpB,SAAA,cAEG,CAAA,EAACE,EAAKoD,GAAA,CAAS,SACpB,CAAAqwC,IAAAI,GAAA,QAAM,IAAA,CAAc,MAAA9G,EAAAH,GAAAyD,EAAA,GAAA,EAEtBvvC,EACY,SAAA,KAAAisC,EAEI2I,MAAAA,kBAAsB,CAElCznB,EACA,cAAyB,CACvBA,KAAAA,UAA0B,CAAA,EACrBntB,EAAA,QAAA,CACQiC,MAAAA,oBACf,SAAA,CAAA,4BAAA0wC,GAAA3yC,EAAAC,EAAA,CACAmtB,SAAAA,CAAAA,IAA4B,IAAAvuB,EAAA,IAAA,CAC9B,SAAA8zC,EAAE3zC,CAAAA,EAAAA,GAEFH,CAEI,CAAA,EAAA,EAAA,CAAA,CAAA,CAAA,CACM,CAAA,CAAA,CACE,CACR,EAAAA,KACD,MAEHmB,0BAAA,GAAAhB,EAEA,SAAOH,EAAAI,EAAA,CAETe,KAAAA,IACEjB,SAEE,CAAA,CAKAg2C,CAAAA,CAAAA,CACED,CAAAA,CAAAA,CAAa,CAAA,CACd,CACH,EAAAvmC,EAAA,QAAAghC,EAAAvvC,EAAA,KAAA,CAAEhB,MAAAA,iCAEG2K,IAAA,UAAA,UAAA,EAAA,GAAA,SAACzK,CAAKqP,EAAA,MAAA,EAAAnS,CAAA,EAAA,IAAA+3C,CAAA,EAAA93B,GAAA,GAAAxd,EAAA,KAAA,CAAA,SAAcmB,EAAAnB,SAAA,CAAA,KAAAG,SAAM,MAAiC,wBAAA,SAEjEuD,IAAAA,UACU,QAAW,IAAAwvC,GAAAn5B,GAAAA,EAAAhL,EAAA,EAAA,MAAQ,CAAY,eACjC,KACPpL,EAA2BuwC,sBACZxkC,EAAA,MAAAnS,CAAA,EAAA,IAAAqiB,GAAAqS,GAAArS,EAAA,GAAA7iB,CAAA,CAAA,EAAA,KAAA,GAAA,EACPqwC,SAAAA,CAAAA,EAAAA,MAAAA,CACN,MAAA,mBACEz/B,SAAAA,EAAgBy/B,MAAAA,EAAAA,EAAAA,CAAAA,EAAAA,IAAAA,GAAAA,EAAAA,GAAAA,CAAAA,IACX/gC,EAAA,QAAA,YACmB,EAC1BA,EAAA,EAAA,CAAA,CAAA,CACF,EAAA,IAAAlL,EAAA,MAAA,CAAEhB,MAAAA,KAEG,SAAM,CAAA,aAAA,IAAAH,EAAA,OAAA,CAAU,MACrBmB,MAAA,SAAaqc,GAAAzO,GAAA,GAAAA,EAAA,IAAAyO,EAAA,CAAA,CAAA,CAGT,CAAA,CAAA,CAEG,CAAA,CAAIs2B,CAAY,CAAA,CACnB,CAAA,EAAA3yC,EAAAC,EAGD,CAAA,SACK,CAAA0J,IAAA,WAAA9K,EAAA,KAAA,CAAA,MACC,wCAAA,SAEbA,EAAK,KAAA,CAAA,SAAOA,EAAAysB,GAAA,CAA0BtoB,SAAIysC,GAAUzwC,KAAAA,GAC7C,CAAA,CAAM,CAAA,CAAS,CAAA,EAAA2K,IAAM,SAAA3J,EAAA,IAAA,CAAA,MACrB,WAAA,SACH,CAAA,sBAAAnB,EAAA,KAAA,CAAA,CAAA,EAAAA,EAAA,KAAA,CAAA,CAAA,EAAAA,EAAA,SAAA,CACH,KAAA,SAEJ0P,QAAS9R,IAAU8yC,CAEVzzC,EAAA,oBAMNkD,oBACE,CAAA,CACEF,CAAK,CAAA,CAAA,CACC,CAAA,CAAA,CACgB,CAAA,CACkB,CACjC,SAAAs1C,GAAkB,CAAM,QAAA1lC,EAAA,SAAA9S,EAIlBoD,gBAAAA,EAEb,MAAAu1C,EAA6Bv1C,UAAAA,EAKvB0C,QAAAA,CAAoBC,EAAAA,CACpB,KAAA,CAAAwrB,EAFY7wB,CAIf,EAAA+wB,GAAA,EAAA2nB,EAEHh1C,GAAAi1C,EAAW,OAAA,CAAAj5B,EAAAmM,IAAA,CAAA,KAAInpB,CAEb,aAAAi2B,EAAY,QACT5Y,CAAiCA,EAAAA,EAEhCoN,GAAAyrB,GAAA,YAAAA,EAAA,SAAAjgB,EAAA,OACAjZ,EAAAyN,EAAAurB,EAAAE,GAAA,CAAA,CAAA,CAAA,EACN,CACL,EAIAvrC,EAAY+E,EAAA,OAAAsmC,EACXtmC,CAAA,EAAI9O,EAAM8O,EAAA,SAAAymC,EAAuCn2C,IAC/C,IAAA2T,GAAAA,EAAA,OAAA,EAAA,OAAA,CAAAS,EAAA9R,EAAAqzC,IAAAA,EAAA,UAAA5hC,GAAAA,EAAA,KAAAK,EAAA,EAAA,IAAA9R,CAAA,EAAA,MAAA,EAAA,CAAA,EAAAtC,KACS,IAAA0P,GAAA,YAAAA,EAAS,OAAA,CAAAsN,EAAAmM,IAAMnM,GAAAmM,GAAA,YAAAA,EAAA,QAAAitB,GAAK,CAAAA,EACzB1mC,GAAA,YAAAA,EAAA,MAAA,CAAA,EAAA,IAACmpB,EAGI,IACX2c,GAKSa,GAAA9G,IAEItmB,CAAAA,GAAAA,IAAAA,GACTqtB,GAAA5mC,EAAA,CAAA,CAAA,EAAA,KACDmpB,EAEQ,IAEZ,MAEJ0d,EAAA/G,GAAA9/B,EAAA,CAAA,EAAA,EAAA,EACEolC,EAAA5Y,GAAA,CAAA38B,EAAA+C,EAAAia,EAAArQ,IAAA,CAET3M,EAAA,eAAA,EAEAA,EAAA,gBAAqB,EACnBmQ,EAAAA,CACA9S,MAAAA,EAAAA,EACA45C,cAAAA,EAAAA,EAAAA,CACAjB,CACAa,EAAAA,CAAAA,CAAAA,EACAZ,EAAAA,IACCn1B,OAAAA,GAAA,IAAA,OACD,SAAO8N,EAA6B5uB,EAAA,CAG9By2C,EAAAA,OAAAA,QAAwB,WAAAz2C,EAAA,OAAA,UAC5B,CACQ,OAAAb,EAAA+3C,EAAA,UAAA,MAAA/3C,EAAA,iBAAA,SAAAyiB,EAAA,CAAE8U,QAAAA,EAAAA,GAA0B9M,IAAAA,QAC5BsB,EAAAA,EAAAA,UAAAA,MAAAA,sBAA2BwL,SAAAA,EACjC,CAA2C,GAC1C,CAAA,EACLj1B,EAAA,UAAA,CACA,IAAsB0O,EAChBgnC,MAAAA,UAGAr1C,KAAAA,GACHF,EAIGk1C,SAAAA,GAAAA,CACJ,KAAgBt5B,CACd,MAAoBm1B,EACV3yC,EAAA,OACV62C,GAAoB34C,EAAO,CAAA,EAAA,EAAA,EAAAk5C,CAE/B,EACA,MAAa,CACJ,mBAAApB,CACT,EACS,sBAAAA,EACE,+BAAoBY,EAAAA,EAC7B,SAAmBG,CAAAA,EAAAA,UAAAA,CACfM,MAAAA,kBAAmB,OAAA/d,EACzB,SAAA,CAAAh5B,EAAA,OAAA,CACM02C,MAAa/G,UAEbsF,WAAmB5Y,IAAY9nB,GAAAvU,EAAIyC,IACtB,IAAA8R,EAAA,aACC,MAAA,GAAAA,EAAA,WAAA,KAAAA,EAAA,QAAA,GACF,SAAAA,GAAA,YAAAA,EAAA,GAAA,IACP9R,EAAI,CAAA,CAAA,SACI4J,CAChB,SAAA,CAAArM,EAAA,OAAA,CACE,MAAA6P,EAAA,mBAEqBA,EAAA,MAAA,CAC1B2Q,CAAAA,EAAAA,IAAAA,OAAsB3Q,EAAA,SAAA,EAAA,IAAA,KAAA,CACpB,CAAA,EAAA,CAAAgnC,KAAyB,GAAA11C,EAAAC,EAAA,CACrB+H,SAAO6tC,CAAAA,IAAqBt3C,IAAAA,IAAAA,EAASihB,OAAAA,CACzC,SAAA,CAAA3gB,EAAA,OAAA,CACWjE,MAAAA,EACA,SAAA0Z,GAAA6gC,CAAA,CAAA,CACV,EAAA,IAAA,UAAAA,IAAA,EAAA,GAAA,GAAA,CACD,CAAA,CAAA,CACEM,CAAW76C,CAAAA,CAAmD,CAChE,EAAAiE,EAAA,KAAA,UACG6P,EAAA,IAAAiE,GAAA3S,SAAAA,OAAAA,EAAA,KAAA,CAEL,SACE,CAAAA,EAAA+C,EAAA,CACO0yC,MAAAA,cACC,GAAA75C,EAAA,IAAAA,CAAA,MAAA+W,EAAA,EAAA,GAAA,MAAAA,EAAA,EAAA,GACA4iC,QAAc1d,IAAAA,IACHllB,EAAA,EAAA,CACT,EAAEklB,SAAAA,CAAAA,EAAAA,GAAAA,CAAW7vB,SAAAA,EAAAA,GAEnBwmC,SAAAA,EACF,cAAA,GACO,KAAA,IACe+F,gBAAAA,GACtB,aAAAT,CAAA,CACqBS,EAAAA,GAAAA,EAAAA,EAAAA,UAAAA,MAAAA,EAAAA,SAAAA,EAAAA,aAAAA,GAAAA,EAAAA,MAAAA,sBACmBv1C,SAExC,CAAAH,EAAAI,EAAA,CAAe,KAAA,UAAA,CAA0B44B,EAAAA,IAAAA,EAAAA,OAAAA,CAAK74B,MAC5CH,EAAA,aAAY,SAAAyV,GAAA3B,EAAA,YAAA,CAAA,CACTtS,CAAAA,CACQ,GAEEsB,CAAAA,gCACiB,SAAA9C,EAAIuU,GAAW,CACvC2kB,SAAAA,EAAiB,QAEpBplB,EAAA,QAEH3S,MAAAu0C,EAAA,EAAAv1C,UACEH,EAAAw2C,EAAA1iC,EAAA,OAAMtQ,QAAAA,CAAe5F,CAAOuC,CAAAA,CAA8B,EAAQ2T,IAAM,EAAA,CAErC,CAAA,CAAA,CAGnC,CAAA,CAGE,CACE,MAAAmjC,GAAaX,IAAcn2C,MAA6B+2C,MAEzBC,GAC1B,IAAA1D,GAEV,IAAA,IAAA,SAEHzzC,GAAAqM,EAAA,SAAA,MACGwD,EAAAA,GACC,IAAAxD,EAAA,EAAA,EAAAlM,GAAAA,EACO,OACGi3C,EACNjzC,KAAAA,CAAqD,YAAAiY,EAEnD0zB,QAAAA,EACF,iBAAAzzB,EAAElc,KAAAA,EAGK,KAAA42B,CAELh6B,EAAAA,EAAAA,EACas6C,GAAAj7B,EAAA4H,CAAA,EAAAszB,EACRj7B,GAAA,MAAAA,EAAA,OAAA46B,GAAA,EAAAM,KACU14C,EAAAuN,GAAA,YAAAA,EAAA,UAAA,YAAAvN,EAAA,SAAA,GAAA24C,GAAAC,EACDxC,IAAAA,GAAAA,MAAAA,EAAAA,SAAAA,EAAAA,GAAAA,YAAAA,EAAAA,UAAAA,MAAAA,EAAAA,QAAAA,EAAAA,GAGd5C,GADExiC,IAAqBumB,EACvBj1B,GAAWg2C,GAAch3C,OAAAA,GAAAA,IACvBH,EAAK,GAAAqyC,CAAA,EAAAA,CAAM,CACX,cAAejc,EC7zCjC,SAAwBshB,IAAc,CACpC,MAAM5rC,EAASgzB,KACT,CAAErhC,GAAAA,EAAIV,SAAAA,CAAa+O,EAAAA,EACzB,OAAO9L,EAACysB,GAAM,CAAChvB,GAAAA,EAAQV,SAAAA,CAAAA,CAAqB,CAC9C,CCRA,MAAe46C,GAAA,GAAA,IAAA,IAAA,+BAAA,YAAA,GAAA,EAAA,KCAAC,GAAA,GAAA,IAAA,IAAA,qCAAA,YAAA,GAAA,EAAA,KCAAzxB,GAAA,GAAA,IAAA,IAAA,4BAAA,YAAA,GAAA,EAAA,KCAA0xB,GAAA,GAAA,IAAA,IAAA,sCAAA,YAAA,GAAA,EAAA,KCAAC,GAAA,GAAA,IAAA,IAAA,sCAAA,YAAA,GAAA,EAAA,KCAAC,GAAA,g4ICcf,SAASC,IAAU,CACjBrX,OAAAA,GAAS,KAAM,CAAC,IAAK,UAAU,CAAC,EAE9Bx/B,EAAA,OAAA,CAAM1D,GAAG,UAAS0C,UAChBgB,EAAA,MAAA,CAAKJ,MAAM,iBAAgBZ,UACzBgB,EAAA,MAAA,CAAKJ,MAAM,eAAcZ,UACvBgB,EAAA,KAAA,CAAAhB,UACEH,EAAA,MAAA,CACEoK,IAAKhG,GACL7D,IAAI,GACJ8J,MAAM,MACN8J,OAAO,MACPqF,MAAO,CACLlP,YAAa,MACb2tC,eAAgB,GAClB,CAAA,CACD,EACDj4C,EAAA,MAAA,CAAKoK,IAAK2tC,GAAUx3C,IAAI,SAAS8J,MAAM,KAAA,CAAO,CAAC,CAAA,CAC7C,EACJrK,EAAA,IAAA,CAAGe,MAAM,OAAMZ,SAAC,iDAAA,CAAkD,EAClEH,EAAA,IAAA,CAAAG,SACEH,EAACkE,EAAI,CAACC,GAAG,SAASpD,MAAM,SAAQZ,SAAC,sBAAA,CAE3B,CAAA,CACL,EACHH,EAAA,IAAA,CAAGe,MAAM,gBAAeZ,SACtBgB,EAAA,QAAA,CAAAhB,UAAO,oDAELH,EAAA,KAAA,CAAA,CAAK,EAEP,iDAAA,CAAA,CAAO,CAAA,CACN,CAAC,CAAA,CACD,EACLmB,EAAA,IAAA,CAAAhB,UACEH,EAAA,IAAA,CAAGiE,KAAK,oCAAoCkF,OAAO,SAAQhJ,SAAC,OAEzD,CAAA,EAAE,IAAI,KACN,IACHH,EAAA,IAAA,CACEiE,KAAK,mCACLkF,OAAO,SACPjJ,QAAgBR,GAAA,CACdA,EAAE+O,eAAe,EACjBxR,EAAO6sB,YAAc,yBACvB,EAAE3pB,SACH,UAEE,CAAA,EAAC,IACF,IACFH,EAAA,IAAA,CACEiE,KAAK,yDACLkF,OAAO,SAAQhJ,SAChB,gBAEE,CAAA,EAEL,GAAA,CAAA,CAAG,CAAC,CAAA,CACD,EACLH,EAAA,MAAA,CAAKvC,GAAG,gBAAe0C,SACrBgB,EAAA,MAAA,CAAKJ,MAAM,WAAUZ,UACnBgB,EAAA,UAAA,CAAAhB,UACEH,EAAA,MAAA,CACEoK,IAAKutC,GACLp3C,IAAI,gCACJ+W,QAAQ,MAAA,CACT,EACDtX,EAAA,KAAA,CAAAG,SAAI,iBAAA,CAAmB,EACvBH,EAAA,IAAA,CAAAG,SAAG,uEAAA,CAGA,CAAC,CAAA,CACG,EACTgB,EAAA,UAAA,CAAAhB,UACEH,EAAA,MAAA,CACEoK,IAAK0tC,GACLv3C,IAAI,uCACJ+W,QAAQ,MAAA,CACT,EACDtX,EAAA,KAAA,CAAAG,SAAI,wBAAA,CAA0B,EAC9BH,EAAA,IAAA,CAAAG,SAAG,8DAAA,CAA+D,CAAC,CAAA,CAC5D,EACTgB,EAAA,UAAA,CAAAhB,UACEH,EAAA,MAAA,CACEoK,IAAKwtC,GACLr3C,IAAI,sCACJ+W,QAAQ,MAAA,CACT,EACDtX,EAAA,KAAA,CAAAG,SAAI,uBAAA,CAAyB,EAC7BH,EAAA,IAAA,CAAAG,SAAG,oEAAA,CAEA,CAAC,CAAA,CACG,EACTgB,EAAA,UAAA,CAAAhB,UACEH,EAAA,MAAA,CACEoK,IAAK+b,GACL5lB,IAAI,gCACJ+W,QAAQ,MAAA,CACT,EACDtX,EAAA,KAAA,CAAAG,SAAI,wBAAA,CAA0B,EAC9BH,EAAA,IAAA,CAAAG,SAAG,4FAAA,CAGA,CAAC,CAAA,CACG,EACTgB,EAAA,UAAA,CAAAhB,UACEH,EAAA,MAAA,CACEoK,IAAKytC,GACLt3C,IAAI,wEACJ+W,QAAQ,MAAA,CACT,EACDtX,EAAA,KAAA,CAAAG,SAAI,wBAAA,CAA0B,EAC9BH,EAAA,IAAA,CAAAG,SAAG,mDAAA,CAAoD,CAAC,CAAA,CACjD,CAAC,CAAA,CACP,CAAA,CACF,CAAC,CAAA,CACF,CAEV,CChIA,MAAM+3C,GAAclzC,OAAOoE,MACtBpE,OAAOmzC,gBAAenzC,OAAOmzC,cAAgBD,IAElDlzC,OAAOoE,MAAQ,SAAU/C,EAAS,CAIhCA,aAAA,QAAAA,GAAA,MAAAA,EAAA,WACAA,EAAuBokB,EAAAA,SAGvB,OAAApkB,GAAA,WACAA,EAAWA,KAAAA,UAAYA,CAAU,GAEjC,MAAAojB,EAAA2uB,GAAA,CAEM3uB,KAAAA,EACJvQ,UAAa,QACb7X,QAAS,MACTg3C,SAAc,SACdz1B,SAAU,IACVzK,OAAQ,CACRioB,EAAAA,EACEkY,EACF,QAAC,IAAA,CACM7uB,EAAA,UAAQ,EAEf,CAAA,EACFA,EAAE,UAAA,GCyBJzkB,OAAOuzC,WAAat7C,EACpB+H,OAAOwzC,iBAAmB,IAAM,CAC9B,MAAMt3C,EAAO,CACX,WACA,WACA,WACA,gBACA,cAAc,EAEVu3C,EAAS,CAAA,EACfv3C,EAAK+Q,QAAiB3F,GAAA,CACpBmsC,EAAOnsC,CAAG,EAAIZ,OAAOxK,KAAKjE,EAAOqP,CAAG,CAAC,EAAE1O,MAAAA,CACxC,EACOgO,KAAAA,CAEF,SAAA8D,CAAEA,EAAAA,EAAazS,EAAAA,CAAAA,EACrB,0BAC4B,cAAA,yBAAAqP,CAAA,8BAAAA,CAAA,IAAA,GAI1BosC,EAAY,KAAApsC,CAAA,CAEZ,EAEFlQ,YAAa,IAAA,CACf,GAAA,CAAA,OAAA,SAKAu8C,OACE,KAAYjc,CAAU,SAAAhtB,EAChB,cAAAkpC,EAAElpC,cAAAA,CAAUkpC,EAAAA,EAAev7C,IAAAA,EAAAA,EAAc,KAAIJ,CACnD,SAAAF,CACM,EAAAsB,EAAA,EAAEtB,UAAAA,KAAAA,EAAAA,IAAiB,CAAA,OAAA,SACzB,MACE,GAAI,CAAkB,MAAA87C,EAAA,SAAA,cAAA,yBAAAvsC,CAAA,8BAAAA,CAAA,IAAA,EAClBwsC,EAAAz7C,EAAA,KAAA6pC,GAAA,OAAA,OAAA56B,IAAA2lB,IAAApzB,EAAAqoC,EAAA,SAAA,YAAAroC,EAAA,GAAA9B,CAAA,EAAA,EACF,GAAA,CAAA87C,GAAc38C,CAAS6D,EAAAA,CAGjB+4C,OAAAA,EAAAA,SAAAA,CAAsBz7C,EAGxB,OAAUJ,EAAsB,aAAAqP,CAAA,EAC3BrP,UAAAA,OAAmB,CACnBA,MAAAA,IAAuBouC,CAAA,EAEtB0N,MAD0BA,EAAA,GAAAA,EAAA,QAAA,IAC1BA,GACN,OAAa9mB,EAAAA,cAAmBx0B,CAAAA,EAChC,KACSR,CACP,CACF+7C,GACF,CACAA,MAAAA,CACF,CAAA,CACW,EACf,GAAA,GAAA,GAAA,EACA,WAAe,IAAA,aACL/5C,UAAAA,KAAoB+5C,GAC9B,MAAA,QAAAC,GAAA54C,CAAA,CAAA,GACCqe,GAAA7f,EAAAo6C,IAAc,GAAA,KAAd,MAAAv6B,EAAA,KAAA7f,IAMDq6C,GAAAC,EAAAF,IAAA54C,KAAA,MAAA64C,EAAA,KAAAC,EAEqB,EAAA,GACZ,GACLF,IAAAA,CACF,OAAA,SAAA,GACF,MAAAG,EAAA,CAAA,YAAA,YAAA,SAAA,UAAA,aAAA,cAAA,cAAA,OAAA,EACKC,EAAA,IAAA,CAEA,OAAA,SAAA,EACLr0C,EAWMq0C,EAAgB7H,GAAA6H,EAVhBD,GAUgB,EACpBp0C,EAAkB,IAAA,CACpB,OAAA,SAAA,GACAs0C,GACA,EACAF,UAAwBxrB,GAAA,CACtB5oB,OAAO03B,iBAAW9O,EAAA2rB,EAAA,CACD,QAAA,GACnB,QAAA,EACAH,CAAAA,CACEp0C,CAAOoc,EAAmC,OAC/B,iBAAA,OAAAi4B,EAAA,CAAA,QACA,EAAA,CAAA,EAEb,SAAC,gBAAA,iBAAA,aAAA35C,GAAA,CACM0hB,CAAAA,EAAAA,6BACIi4B,GAGXn9C,EAASmM,CAGL,QAAwB,EACtBgxC,CAAQ,CAAA,KACV,MAEFG,GAAA,mBAAA,KAAA,UAAA,SAAA,EACEj4B,IACF,SACF,iBAAA,mBAAA,IAAA,CAYC,GAAA,SAAA,kBAAA,UAAA,CAIGi4B,MAAQC,EAAA,OAAmBv2C,WAAK6B,8BAAmB,EAAA,QAAA,OAAA,QAC9C20C,EAAA,SAAA,cAAA,oCAAAD,CAAA,IAAA,EACAr4B,EAAAA,GAAAA,YAAAA,EAAAA,wBACHllB,IAEFw9C,aAKA,WAAcx9C,IAAAA,CAGRuY,EAAAA,QAAeklC,CACrB,EAAW,EAAA,EAETp7C,CACEm7C,CAAAA,EACGh7C,GACPzB,EAAA0rB,GAAA,OACF,SAAA,CAAA1nB,EAAA4X,EAAAnb,EAAAkrB,CAAA,IAAAD,EAAA,CACD,GAAA9P,EAAA,KAAA,GAAA,IAAA,6BAAA,CACH,MAAA+gC,EAAA,SAAA,eAAA,KAAA,EAEU38C,IACR28C,EAAW,QAAS/gC,mBAAa+P,EAAAA,cAAAA,MAAAA,EAAuB,OAAAlrB,EAAA,GAG9Ck8C,CACN/gC,EAAU,KAAA,GAAA,IAAA,sBACKuN,SAAAA,KACf,UAAA,OAAA,QAAA1oB,CAAA,CAIF,CACE,CAAA,EACAm8C,SAAMtxC,IAAAA,CACR,KAAA,CAAA9L,EAAAq9C,CAAA,EAAAl9C,EAAA,EAAA,EACF,CAAAkO,EAAAC,CAAA,EAAAnO,EAAA,SAAA,EACD4jB,GAAA,IAAA,CAED,MAAepY,EAAA3G,GAAA,MAAA,IAAA,OAAA,EACP2G,IACN,SAAO0C,gBAAmB,UAAa,IAAS,MAAA1C,CAAA,EAAA,EAEhDoY,SAAAA,cAAsB,2BAAA,EAAA,aAAA,UAAApY,IAAA,OAAA,aAAAA,CAAA,GAEpB,MAAW2xC,EAAAt4C,GAAA,MAAA,IAAA,UAAA,EACTvF,GAEG6D,SAAAA,gDACA2+B,GAAAA,MAEL,EAAA,CAAA,CAAA,EACA5iC,EAAc,IAAA,CACZI,MAAAA,WAA+B+M,IAAAA,aAE5B,EAELW,EAAA,oBAAA,OAAA,SAAA,OAAA,MAAA,cAAA,GAAA,CAAA,CAAA,EAAA,GAAA,CAAA,CAAA,EACF,GAAKA,EAAA,CAEL9N,OAAgB,QAAA,aAAA,CAAA,EAAA,SAAA,MAAA,OAAA,SAAA,UAAA,GAAA,EACd,MAAoB2F,EAAAA,GAAAA,QAAYK,IAAiB,UAAA,EACpCk4C,EAAAA,GAAAA,QACHrsC,IAAAA,cAAgBq/B,EAGhBzmC,EAAA9E,GAAA,QAAA,IAAA,UAAA,GACRrF,SAAY,CAAEwN,EAAAA,SAAAA,EAAM,KAAA,CAEb0hC,cAMP,EAAM2O,MAAWx4C,GAAcK,CAC/B,YAAAqsB,EACA,UAAiB1sB,EAEJ,cAAAy4C,EACXnvC,KAAAA,CACA,CAAM,EAAgBoiB,EAAAA,GAAAA,CAAY,SAAyBgB,EACzDA,YAAAA,CAAAA,CAAAA,EACW8rB,MACIC,QAAAA,WAAAA,CAAAA,GAAAA,EAAAA,CAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,CAAAA,CAAAA,CAAAA,EACftwC,KACFuwC,GAACC,CAAA,EAEDN,IAA0B,EAAA/uC,EAAYojB,SAAAA,CAAAA,IAAahB,KAAa,CAChE,OAAA,6BACEktB,GAGS,MAAA73C,EAAAiE,KACX0zC,GAAAA,EAAAA,CAEAL,GAAAA,QAAc,IAAI,iBAAAt3C,EAAA,KAAA,EAAA,EAClBuI,KAAAA,CACC,OAAAqvC,CACE,EAAA/7C,EAAA,CACL2G,QAAAA,CACA,CAAA,EACa,CACXvD,SAAAA,CACM,EAAA24C,EAAEA,KAAOD,GAAQC,CAAA,EAAE53C,EAAAA,SAAAA,GAAS,SAAA,CAC5B,GAAA,CAAEzF,MAAAA,GAAAA,EAAAA,CAAAA,CAAaq9C,MAAAA,CAErBE,QAAW,CACXH,EAAsB,EAAA,EACtBpvC,EAAoB,SAAA,CACP,CACX,IACE,MAAmCA,EAC5BrL,SAAG,CAEVo6C,CACA/uC,EAAAA,CAAAA,CAAAA,EACF,IAAA4C,EAAAC,KAGF7C,OAHE9N,EACC,gBAAA0Q,EAAA,SAAA7R,EACEgR,GAAA,CAAAa,EAAAlR,CAAA,CAAA,EACLsO,YAAAA,KAAoB4C,EAAA,QAAA,EACtB3N,EAAAktC,GAAA,CAAA,CAAA,EAEC/rC,EAAAC,EAAA,CAEL,YAA2Bm5C,GAAA,CAC3Bt9C,WAAAA,EAKAnB,QAAqBgP,IAAWrO,SAEhC,CAAA,EAAgByG,EAAAA,GAAc4K,CACrB9N,WAAAA,CACT,CAAA,EAAA8K,IAAA,WAAA9K,EAAAw6C,GAAA,CAEA,SACEx6C,EAAAy6C,GAAA,CAAAt6C,KAAA,oBACiB1D,QAAAA,EAAAA,GAAAA,EAAAA,CAAAA,EAA6C,CAAY,EACxEuD,GAAgBA,EAAAR,GAAA,CAAA,CAAA,EAAA/C,GAAAuD,EAAA0wB,GAAA,CAAA,CAAA,EAAA1wB,EAAA6oB,GAAA,EAAA,EAAApsB,GAAAuD,EAAAitB,GAAA,CAAA,CAAA,EAAAjtB,EAAAzD,GAAA,CAACE,WAAAA,CAAyB,CAAA,EACzCqO,IAAY,WACX9K,EAACw6C,GAAM,CAAAr6C,QAAAA,EACC,CAAA,EAAC0Y,EAAKrY,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAA2C,CAAI,SAG9D/D,GAAe+C,CAIG/C,WAAAA,EAAAA,QAAAA,CACqB,EAAA,CAAUqQ,MAClD9M,OACA06C,EAAApqC,GAAA,IAAA,CAEN,KAAA,CAEA,SAAAxC,CAAyBrR,EAAAA,EAAY6a,MAAAA,CAAAA,qBAAAA,KAAAA,CAAAA,CAAQ,EAAG,CAAA3J,CAAA,CAAA,EAC9C,YAA6B,CACvB+sC,SAAAA,KACE,SAAA,CAAA16C,EAAAy6C,GAAA,CAAE3sC,KAAAA,IAAaH,QAAAA,EAAAA,EAAAA,GAAAA,CAAAA,CAAAA,EAAAA,EAAAA,EAAAA,GAAAA,CACd,GAAC,aAAkC,CACxCA,EAAAA,EAASqqC,GAAA,EAAA,CAEb,CAAA,EAAAh4C,KACS,eAAuCG,QAC5CH,EAACy6C,GAAK,EAAA,CAAA,CAAA,EACCz6C,EAAAy6C,GAAA,CACLE,KAAAA,WAIW,QAAI36C,EAAAg4C,GAAA,EAAA,CAAA,CAAA,CAAa,CAEd,CAEb,CAEG,CAAM,SAAkBh4C,IAAQ,CAAE,OACxCA,EAAM,cAAA,IAAA,CAAM,SAAoBA,GAAU,CAAA,WAAAvD,CAAK,EACzC,CAEZ,MAAAkR,EAAAC,KAEAgtC,EAA2B/+C,EAAAg/C,GAAA,CAAA,EAGAp+C,OAFK6T,GAAA,IAChCwgC,GAAA,mBAAAnjC,EAAA,QAAA,GAAAmjC,GAAA,SAAAnjC,EAAA,QAAA,EACA,CAAAA,EAAyB,SAAAmjC,EAAA,CAAA,EAAgB8J,EAAA,UAEvCA,EAA6B,QAAAC,MAIvBC,UAA4B,KAKrBhtC,EAAAA,GAAAA,CACb,SAAiB8sC,EAAA,SAAAjtC,EACf,SAAwB5R,CAAAA,GAAAA,EAAAA,EAAAA,CACtB6+C,SAAAA,CAAAA,EAAAA,IACG,KAAA,iBACLA,QAAAA,EAAAA,GAA6B,EAAA,CAAA,CAC/B,EAAA56C,EAAAy6C,GAAA,CACAr+C,KAAc,yBAC2BL,EAAAA,CAAAA,CACvC4R,EAAAA,EAAAA,GAAAA,CACD,KAAA,aAED,QACS3N,EAAAsiC,GAAA,EAAA,CAAA,CAAC30B,EAAAA,MACLlR,KAAAA,KACC0D,QACEH,EAACy6C,GAAK,EAAA,CAAA,CAAA,EAAMz6C,EAAAy6C,GAAA,CAAiBE,KAAS36C,KACtCA,QAAMA,EAAAkiC,GAAA,EAAA,CAAA,CAAA,EAAM/gC,EAAAs5C,GAAA,CAAYE,KAAS36C,KACjCA,SAAM,CAAAA,EAAAy6C,GAAA,CAAM,MAAA,GAAsBz6C,QAAAA,EAAYqtC,GAAA,EAAA,CAAA,CAC9CrtC,EAAAA,EAAMy6C,GAAA,CAAM,KAAA,MAAcz6C,QAAAA,EAAY0kC,GAAA,EAAA,CAAA,CACtC1kC,CAAAA,CAAM,CAAA,EAAMA,EAAAy6C,GAAA,CAAKE,KAAS36C,MAC1BmB,QAAMnB,EAAAqiC,GAAA,EAAA,CAAA,CAAA,CAACxpB,CAAK,CAAI1Y,EAAAA,EAAAA,GACdH,CAAM,KAAM,yBAAA,QAAUA,EAAAA,GAAQ,EAAA,CAAA,CAAE,EAAAA,EAChCA,GAAM,CAAA,KAAM,oBAAA,QAAeA,EAAAA,GAAO,EAAA,CAAA,CAAA,EAAEmB,EAAGs5C,GAAA,CAAA,KAEzCz6C,gBAAM,SAAM,CAAAA,EAAAy6C,GAAA,CAAME,MAAS36C,GAAwB,QAAAA,EAAAsqC,GAAA,EAAA,CAAA,CAGvDtqC,EAAAA,EAAMy6C,GAAA,CAAM,KAAA,IAAkCz6C,QAAAA,EAAUsqC,GAAA,CACxDtqC,MAAM,EAAA,CAAM,CAAA,CAA6BA,CAAAA,CAAkB,CAAI,EAC/DmB,EAAAA,GAAM,CAAC0X,KAAK,uBAAe1Y,QAAAA,EACzBH,GAAM,EAAA,CAAA,CAAA,EAACmgB,EAAKs6B,GAAA,CAAA,KAAUz6C,qBAAW,QAChCy6C,EAAK3L,GAAA,EAAA,CAAA,CAAA,CAAA,CAAM,CAAI6L,CAAgB,CCxZpC,gBAAiB31C,SACP+1C,YAAAA,QACVC,YAAYD,UACG5iC,GAAA,CACP8iC,MAAAA,EAAa,IAAIC,gBACvB38C,kBAAW,IAAM08C,EAAWE,MAAM,EAAGhjC,CAAQ,EACtC8iC,EAAWG,MAAAA,IAIxBC,GACEr7C,EAACs7C,GAAU,CAAAn7C,SACTH,EAACu7C,GAAK,EAAA,CAAC,CACG,EACZr/C,SAAS+Q,eAAe,KAAK,CAC/B,EAGA1O,WAAW,IAAM,CACX,GAAA,CAEFmN,OAAOxK,KAAKs6C,YAAY,EAAEvpC,QAAiB3F,GAAA,CACrCA,EAAImP,WAAW,SAAS,GAC1B+/B,aAAaC,WAAWnvC,CAAG,CAC7B,CACD,EACDZ,OAAOxK,KAAKw6C,cAAc,EAAEzpC,QAAiB3F,GAAA,CACvCA,EAAImP,WAAW,SAAS,GAC1BigC,eAAeD,WAAWnvC,CAAG,CAC/B,CACD,EAGDkvC,aAAaC,WAAW,yBAAyB,OACvC,CAAC,CACf,EAAG,GAAI,EAEPz2C,OAAO22C,UAAY,IAAM,CACdniB,SAAAA,KAAKjxB,UAAUC,OAAO,OAAO,CACxC"}