{"version":3,"file":"main-1ed9f608.js","sources":["../../src/utils/usePageVisibility.js","../../src/components/background-service.jsx","../../src/components/compose-button.jsx","../../src/components/keyboard-shortcuts-help.jsx","../../src/pages/accounts.jsx","../../src/assets/logo.svg","../../src/utils/push-notifications.js","../../src/pages/settings.jsx","../../src/utils/focus-deck.jsx","../../src/components/list-add-edit.jsx","../../src/components/account-info.jsx","../../src/components/account-sheet.jsx","../../src/components/drafts.jsx","../../src/components/generic-accounts.jsx","../../src/components/media-alt-modal.jsx","../../src/components/media-modal.jsx","../../src/assets/floating-button.svg","../../src/assets/multi-column.svg","../../src/assets/tab-menu-bar.svg","../../src/components/AsyncText.jsx","../../src/components/shortcuts-settings.jsx","../../src/components/modals.jsx","../../src/components/follow-request-buttons.jsx","../../src/components/notification.jsx","../../src/components/notification-service.jsx","../../src/components/search-form.jsx","../../src/components/search-command.jsx","../../src/components/shortcuts.jsx","../../src/components/menu2.jsx","../../src/utils/timeline-utils.jsx","../../src/utils/useScroll.js","../../src/components/nav-menu.jsx","../../src/components/timeline.jsx","../../src/pages/account-statuses.jsx","../../src/pages/bookmarks.jsx","../../src/pages/favourites.jsx","../../src/pages/followed-hashtags.jsx","../../src/utils/filters.jsx","../../src/pages/following.jsx","../../src/pages/hashtag.jsx","../../src/pages/list.jsx","../../src/pages/mentions.jsx","../../src/utils/group-notifications.jsx","../../src/pages/notifications.jsx","../../src/pages/public.jsx","../../src/pages/trending.jsx","../../src/components/columns.jsx","../../src/pages/home.jsx","../../src/utils/get-instance-status-url.js","../../src/pages/http-route.jsx","../../src/pages/lists.jsx","../../src/data/instances.json?url","../../src/utils/auth.js","../../src/pages/login.jsx","../../src/pages/search.jsx","../../src/pages/status.jsx","../../src/pages/status-route.jsx","../../src/assets/features/boosts-carousel.jpg","../../src/assets/features/grouped-notifications.jpg","../../src/assets/features/multi-column.jpg","../../src/assets/features/multi-hashtag-timeline.jpg","../../src/assets/features/nested-comments-thread.jpg","../../src/assets/logo-text.svg","../../src/pages/welcome.jsx","../../src/utils/toast-alert.js","../../src/app.jsx","../../src/main.jsx"],"sourcesContent":["import { useEffect, useRef } from 'preact/hooks';\n\nexport default function usePageVisibility(fn = () => {}, deps = []) {\n  const savedCallback = useRef(fn);\n  useEffect(() => {\n    savedCallback.current = fn;\n  }, [deps]);\n\n  useEffect(() => {\n    const handleVisibilityChange = () => {\n      const hidden = document.hidden || document.visibilityState === 'hidden';\n      console.log('👀 Page visibility changed', hidden ? 'hidden' : 'visible');\n      savedCallback.current(!hidden);\n    };\n\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    return () =>\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n  }, []);\n}\n","import { memo } from 'preact/compat';\nimport { useEffect, useRef, useState } from 'preact/hooks';\n\nimport { api } from '../utils/api';\nimport states, { saveStatus } from '../utils/states';\nimport useInterval from '../utils/useInterval';\nimport usePageVisibility from '../utils/usePageVisibility';\n\nexport default memo(function BackgroundService({ isLoggedIn }) {\n  // Notifications service\n  // - WebSocket to receive notifications when page is visible\n  const [visible, setVisible] = useState(true);\n  usePageVisibility(setVisible);\n  useEffect(() => {\n    let sub;\n    if (isLoggedIn && visible) {\n      const { masto, streaming, instance } = api();\n      (async () => {\n        // 1. Get the latest notification\n        if (states.notificationsLast) {\n          const notificationsIterator = masto.v1.notifications.list({\n            limit: 1,\n            since_id: states.notificationsLast.id,\n          });\n          const { value: notifications } = await notificationsIterator.next();\n          if (notifications?.length) {\n            let lastReadId;\n            try {\n              const markers = await masto.v1.markers.fetch({\n                timeline: 'notifications',\n              });\n              lastReadId = markers?.notifications?.lastReadId;\n            } catch (e) {}\n            if (lastReadId) {\n              if (notifications[0].id !== lastReadId) {\n                states.notificationsShowNew = true;\n              }\n            } else {\n              states.notificationsShowNew = true;\n            }\n          }\n        }\n\n        // 2. Start streaming\n        if (streaming) {\n          sub = streaming.user.notification.subscribe();\n          console.log('🎏 Streaming notification', sub);\n          for await (const entry of sub) {\n            if (!sub) break;\n            console.log('🔔🔔 Notification entry', entry);\n            if (entry.event === 'notification') {\n              console.log('🔔🔔 Notification', entry);\n              saveStatus(entry.payload, instance, {\n                skipThreading: true,\n              });\n            }\n            states.notificationsShowNew = true;\n          }\n        }\n      })();\n    }\n    return () => {\n      sub?.unsubscribe?.();\n      sub = null;\n    };\n  }, [visible, isLoggedIn]);\n\n  // Check for updates service\n  const lastCheckDate = useRef();\n  const checkForUpdates = () => {\n    lastCheckDate.current = Date.now();\n    console.log('✨ Check app update');\n    fetch('./version.json')\n      .then((r) => r.json())\n      .then((info) => {\n        if (info) states.appVersion = info;\n      })\n      .catch((e) => {\n        console.error(e);\n      });\n  };\n  useInterval(checkForUpdates, visible && 1000 * 60 * 30); // 30 minutes\n  usePageVisibility((visible) => {\n    if (visible) {\n      if (!lastCheckDate.current) {\n        checkForUpdates();\n      } else {\n        const diff = Date.now() - lastCheckDate.current;\n        if (diff > 1000 * 60 * 60) {\n          // 1 hour\n          checkForUpdates();\n        }\n      }\n    }\n  });\n\n  return null;\n});\n","import { useHotkeys } from 'react-hotkeys-hook';\n\nimport openCompose from '../utils/open-compose';\nimport states from '../utils/states';\n\nimport Icon from './icon';\n\nexport default function ComposeButton() {\n  function handleButton(e) {\n    if (e.shiftKey) {\n      const newWin = openCompose();\n\n      if (!newWin) {\n        alert('Looks like your browser is blocking popups.');\n        states.showCompose = true;\n      }\n    } else {\n      states.showCompose = true;\n    }\n  }\n\n  useHotkeys('c, shift+c', handleButton, {\n    ignoreEventWhen: (e) => {\n      const hasModal = !!document.querySelector('#modal-container > *');\n      return hasModal;\n    },\n  });\n\n  return (\n    <button type=\"button\" id=\"compose-button\" onClick={handleButton}>\n      <Icon icon=\"quill\" size=\"xl\" alt=\"Compose\" />\n    </button>\n  );\n}\n","import './keyboard-shortcuts-help.css';\n\nimport { memo } from 'preact/compat';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { useSnapshot } from 'valtio';\n\nimport states from '../utils/states';\n\nimport Icon from './icon';\nimport Modal from './modal';\n\nexport default memo(function KeyboardShortcutsHelp() {\n  const snapStates = useSnapshot(states);\n\n  function onClose() {\n    states.showKeyboardShortcutsHelp = false;\n  }\n\n  useHotkeys(\n    '?, shift+?',\n    (e) => {\n      console.log('help');\n      states.showKeyboardShortcutsHelp = true;\n    },\n    {\n      ignoreEventWhen: (e) => {\n        const hasModal = !!document.querySelector('#modal-container > *');\n        return hasModal;\n      },\n    },\n  );\n\n  const escRef = useHotkeys('esc', onClose, []);\n\n  return (\n    !!snapStates.showKeyboardShortcutsHelp && (\n      <Modal\n        class=\"light\"\n        onClick={(e) => {\n          if (e.target === e.currentTarget) {\n            onClose();\n          }\n        }}\n      >\n        <div\n          id=\"keyboard-shortcuts-help-container\"\n          class=\"sheet\"\n          tabindex=\"-1\"\n          ref={escRef}\n        >\n          <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n            <Icon icon=\"x\" />\n          </button>\n          <header>\n            <h2>Keyboard shortcuts</h2>\n          </header>\n          <main>\n            <table>\n              {[\n                {\n                  action: 'Keyboard shortcuts help',\n                  keys: <kbd>?</kbd>,\n                },\n                {\n                  action: 'Next post',\n                  keys: <kbd>j</kbd>,\n                },\n                {\n                  action: 'Previous post',\n                  keys: <kbd>k</kbd>,\n                },\n                {\n                  action: 'Skip carousel to next post',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>j</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Skip carousel to previous post',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>k</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Open post details',\n                  keys: (\n                    <>\n                      <kbd>Enter</kbd> or <kbd>o</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Toggle expanded/collapsed thread',\n                  keys: <kbd>x</kbd>,\n                },\n                {\n                  action: 'Close post or dialogs',\n                  keys: (\n                    <>\n                      <kbd>Esc</kbd> or <kbd>Backspace</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Focus column in multi-column mode',\n                  keys: (\n                    <>\n                      <kbd>1</kbd> to <kbd>9</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Compose new post',\n                  keys: <kbd>c</kbd>,\n                },\n                {\n                  action: 'Send post',\n                  keys: (\n                    <>\n                      <kbd>Ctrl</kbd> + <kbd>Enter</kbd> or <kbd>⌘</kbd> +{' '}\n                      <kbd>Enter</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Search',\n                  keys: <kbd>/</kbd>,\n                },\n                {\n                  action: 'Reply',\n                  keys: <kbd>r</kbd>,\n                },\n                {\n                  action: 'Favourite',\n                  keys: <kbd>f</kbd>,\n                },\n                {\n                  action: 'Boost',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>b</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Bookmark',\n                  keys: <kbd>d</kbd>,\n                },\n              ].map(({ action, keys }) => (\n                <tr key={action}>\n                  <th>{action}</th>\n                  <td>{keys}</td>\n                </tr>\n              ))}\n            </table>\n          </main>\n        </div>\n      </Modal>\n    )\n  );\n});\n","import './accounts.css';\n\nimport { Menu, MenuDivider, MenuItem } from '@szhsin/react-menu';\nimport { useReducer, useState } from 'preact/hooks';\n\nimport Avatar from '../components/avatar';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport MenuConfirm from '../components/menu-confirm';\nimport NameText from '../components/name-text';\nimport { api } from '../utils/api';\nimport states from '../utils/states';\nimport store from '../utils/store';\n\nfunction Accounts({ onClose }) {\n  const { masto } = api();\n  // Accounts\n  const accounts = store.local.getJSON('accounts');\n  const currentAccount = store.session.get('currentAccount');\n  const moreThanOneAccount = accounts.length > 1;\n  const [currentDefault, setCurrentDefault] = useState(0);\n\n  const [_, reload] = useReducer((x) => x + 1, 0);\n\n  return (\n    <div id=\"accounts-container\" class=\"sheet\" tabIndex=\"-1\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header class=\"header-grid\">\n        <h2>Accounts</h2>\n      </header>\n      <main>\n        <section>\n          <ul class=\"accounts-list\">\n            {accounts.map((account, i) => {\n              const isCurrent = account.info.id === currentAccount;\n              const isDefault = i === (currentDefault || 0);\n              return (\n                <li key={i + account.id}>\n                  <div>\n                    {moreThanOneAccount && (\n                      <span class={`current ${isCurrent ? 'is-current' : ''}`}>\n                        <Icon icon=\"check-circle\" alt=\"Current\" />\n                      </span>\n                    )}\n                    <Avatar\n                      url={account.info.avatarStatic}\n                      size=\"xxl\"\n                      onDblClick={async () => {\n                        if (isCurrent) {\n                          try {\n                            const info = await masto.v1.accounts\n                              .$select(account.info.id)\n                              .fetch();\n                            console.log('fetched account info', info);\n                            account.info = info;\n                            store.local.setJSON('accounts', accounts);\n                            reload();\n                          } catch (e) {}\n                        }\n                      }}\n                    />\n                    <NameText\n                      account={\n                        moreThanOneAccount\n                          ? {\n                              ...account.info,\n                              acct: /@/.test(account.info.acct)\n                                ? account.info.acct\n                                : `${account.info.acct}@${account.instanceURL}`,\n                            }\n                          : account.info\n                      }\n                      showAcct\n                      onClick={() => {\n                        if (isCurrent) {\n                          states.showAccount = `${account.info.username}@${account.instanceURL}`;\n                        } else {\n                          store.session.set('currentAccount', account.info.id);\n                          location.reload();\n                        }\n                      }}\n                    />\n                  </div>\n                  <div class=\"actions\">\n                    {isDefault && moreThanOneAccount && (\n                      <>\n                        <span class=\"tag\">Default</span>{' '}\n                      </>\n                    )}\n                    <Menu\n                      align=\"end\"\n                      menuButton={\n                        <button\n                          type=\"button\"\n                          title=\"More\"\n                          class=\"plain more-button\"\n                        >\n                          <Icon icon=\"more\" size=\"l\" alt=\"More\" />\n                        </button>\n                      }\n                    >\n                      <MenuItem\n                        onClick={() => {\n                          states.showAccount = `${account.info.username}@${account.instanceURL}`;\n                        }}\n                      >\n                        <Icon icon=\"user\" />\n                        <span>View profile…</span>\n                      </MenuItem>\n                      <MenuDivider />\n                      {moreThanOneAccount && (\n                        <MenuItem\n                          disabled={isDefault}\n                          onClick={() => {\n                            // Move account to the top of the list\n                            accounts.splice(i, 1);\n                            accounts.unshift(account);\n                            store.local.setJSON('accounts', accounts);\n                            setCurrentDefault(i);\n                          }}\n                        >\n                          <Icon icon=\"check-circle\" />\n                          <span>Set as default</span>\n                        </MenuItem>\n                      )}\n                      <MenuConfirm\n                        subMenu\n                        confirmLabel={\n                          <>\n                            <Icon icon=\"exit\" />\n                            <span>Log out @{account.info.acct}?</span>\n                          </>\n                        }\n                        disabled={!isCurrent}\n                        menuItemClassName=\"danger\"\n                        onClick={() => {\n                          // const yes = confirm('Log out?');\n                          // if (!yes) return;\n                          accounts.splice(i, 1);\n                          store.local.setJSON('accounts', accounts);\n                          // location.reload();\n                          location.href = location.pathname || '/';\n                        }}\n                      >\n                        <Icon icon=\"exit\" />\n                        <span>Log out…</span>\n                      </MenuConfirm>\n                    </Menu>\n                  </div>\n                </li>\n              );\n            })}\n          </ul>\n          <p>\n            <Link to=\"/login\" class=\"button plain2\" onClick={onClose}>\n              <Icon icon=\"plus\" /> <span>Add an existing account</span>\n            </Link>\n          </p>\n          {moreThanOneAccount && (\n            <p>\n              <small>\n                Note: <i>Default</i> account will always be used for first load.\n                Switched accounts will persist during the session.\n              </small>\n            </p>\n          )}\n        </section>\n      </main>\n    </div>\n  );\n}\n\nexport default Accounts;\n","export default \"__VITE_ASSET__c2b3a5f0__\"","// Utils for push notifications\nimport { api } from './api';\nimport { getCurrentAccount } from './store-utils';\n\n// Subscription is an object with the following structure:\n// {\n//   data: {\n//     alerts: {\n//       admin: {\n//         report: boolean,\n//         signUp: boolean,\n//       },\n//       favourite: boolean,\n//       follow: boolean,\n//       mention: boolean,\n//       poll: boolean,\n//       reblog: boolean,\n//       status: boolean,\n//       update: boolean,\n//     }\n//   },\n//   policy: \"all\" | \"followed\" | \"follower\" | \"none\",\n//   subscription: {\n//     endpoint: string,\n//     keys: {\n//       auth: string,\n//       p256dh: string,\n//     },\n//   },\n// }\n\n// Back-end CRUD\n// =============\n\nfunction createBackendPushSubscription(subscription) {\n  const { masto } = api();\n  return masto.v1.push.subscription.create(subscription);\n}\n\nfunction fetchBackendPushSubscription() {\n  const { masto } = api();\n  return masto.v1.push.subscription.fetch();\n}\n\nfunction updateBackendPushSubscription(subscription) {\n  const { masto } = api();\n  return masto.v1.push.subscription.update(subscription);\n}\n\nfunction removeBackendPushSubscription() {\n  const { masto } = api();\n  return masto.v1.push.subscription.remove();\n}\n\n// Front-end\n// =========\n\nexport function isPushSupported() {\n  return 'serviceWorker' in navigator && 'PushManager' in window;\n}\n\nexport function getRegistration() {\n  // return navigator.serviceWorker.ready;\n  return navigator.serviceWorker.getRegistration();\n}\n\nasync function getSubscription() {\n  const registration = await getRegistration();\n  const subscription = registration\n    ? await registration.pushManager.getSubscription()\n    : undefined;\n  return { registration, subscription };\n}\n\nfunction urlBase64ToUint8Array(base64String) {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = `${base64String}${padding}`\n    .replace(/-/g, '+')\n    .replace(/_/g, '/');\n\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n\n  return outputArray;\n}\n\n// Front-end <-> back-end\n// ======================\n\nexport async function initSubscription() {\n  if (!isPushSupported()) return;\n  const { subscription } = await getSubscription();\n  let backendSubscription = null;\n  try {\n    backendSubscription = await fetchBackendPushSubscription();\n  } catch (err) {\n    if (/(not found|unknown)/i.test(err.message)) {\n      // No subscription found\n    } else {\n      // Other error\n      throw err;\n    }\n  }\n  console.log('INIT subscription', {\n    subscription,\n    backendSubscription,\n  });\n\n  // Check if the subscription changed\n  if (backendSubscription && subscription) {\n    const sameEndpoint = backendSubscription.endpoint === subscription.endpoint;\n    const { vapidKey } = getCurrentAccount();\n    const sameKey = backendSubscription.serverKey === vapidKey;\n    if (!sameEndpoint) {\n      throw new Error('Backend subscription endpoint changed');\n    }\n    if (sameKey) {\n      // Subscription didn't change\n    } else {\n      // Subscription changed\n      console.error('🔔 Subscription changed', {\n        sameEndpoint,\n        serverKey: backendSubscription.serverKey,\n        vapIdKey: vapidKey,\n        endpoint1: backendSubscription.endpoint,\n        endpoint2: subscription.endpoint,\n        sameKey,\n        key1: backendSubscription.serverKey,\n        key2: vapidKey,\n      });\n      throw new Error('Backend subscription key and vapid key changed');\n      // Only unsubscribe from backend, not from browser\n      // await removeBackendPushSubscription();\n      // // Now let's resubscribe\n      // // NOTE: I have no idea if this works\n      // return await updateSubscription({\n      //   data: backendSubscription.data,\n      //   policy: backendSubscription.policy,\n      // });\n    }\n  }\n\n  if (subscription && !backendSubscription) {\n    // check if account's vapidKey is same as subscription's applicationServerKey\n    const { vapidKey } = getCurrentAccount();\n    const { applicationServerKey } = subscription.options;\n    const vapidKeyStr = urlBase64ToUint8Array(vapidKey).toString();\n    const applicationServerKeyStr = new Uint8Array(\n      applicationServerKey,\n    ).toString();\n    const sameKey = vapidKeyStr === applicationServerKeyStr;\n    if (sameKey) {\n      // Subscription didn't change\n    } else {\n      // Subscription changed\n      console.error('🔔 Subscription changed', {\n        vapidKeyStr,\n        applicationServerKeyStr,\n        sameKey,\n      });\n      // Unsubscribe since backend doesn't have a subscription\n      await subscription.unsubscribe();\n      throw new Error('Subscription key and vapid key changed');\n    }\n  }\n\n  // Check if backend subscription returns 404\n  // if (subscription && !backendSubscription) {\n  //   // Re-subscribe to backend\n  //   backendSubscription = await createBackendPushSubscription({\n  //     subscription,\n  //     data: {},\n  //     policy: 'all',\n  //   });\n  // }\n\n  return { subscription, backendSubscription };\n}\n\nexport async function updateSubscription({ data, policy }) {\n  console.log('🔔 Updating subscription', { data, policy });\n  if (!isPushSupported()) return;\n  let { registration, subscription } = await getSubscription();\n  let backendSubscription = null;\n\n  if (subscription) {\n    try {\n      backendSubscription = await updateBackendPushSubscription({\n        data,\n        policy,\n      });\n      // TODO: save subscription in user settings\n    } catch (error) {\n      // Backend doesn't have a subscription for this user\n      // Create a new one\n      backendSubscription = await createBackendPushSubscription({\n        subscription,\n        data,\n        policy,\n      });\n      // TODO: save subscription in user settings\n    }\n  } else {\n    // User is not subscribed\n    const { vapidKey } = getCurrentAccount();\n    if (!vapidKey) throw new Error('No server key found');\n    subscription = await registration.pushManager.subscribe({\n      userVisibleOnly: true,\n      applicationServerKey: urlBase64ToUint8Array(vapidKey),\n    });\n    backendSubscription = await createBackendPushSubscription({\n      subscription,\n      data,\n      policy,\n    });\n    // TODO: save subscription in user settings\n  }\n\n  return { subscription, backendSubscription };\n}\n\nexport async function removeSubscription() {\n  if (!isPushSupported()) return;\n  const { subscription } = await getSubscription();\n  if (subscription) {\n    await removeBackendPushSubscription();\n    await subscription.unsubscribe();\n  }\n}\n","import './settings.css';\n\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport logo from '../assets/logo.svg';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport RelativeTime from '../components/relative-time';\nimport targetLanguages from '../data/lingva-target-languages';\nimport { api } from '../utils/api';\nimport getTranslateTargetLanguage from '../utils/get-translate-target-language';\nimport localeCode2Text from '../utils/localeCode2Text';\nimport {\n  initSubscription,\n  isPushSupported,\n  removeSubscription,\n  updateSubscription,\n} from '../utils/push-notifications';\nimport states from '../utils/states';\nimport store from '../utils/store';\n\nconst DEFAULT_TEXT_SIZE = 16;\nconst TEXT_SIZES = [16, 17, 18, 19, 20];\n\nfunction Settings({ onClose }) {\n  const snapStates = useSnapshot(states);\n  const currentTheme = store.local.get('theme') || 'auto';\n  const themeFormRef = useRef();\n  const targetLanguage =\n    snapStates.settings.contentTranslationTargetLanguage || null;\n  const systemTargetLanguage = getTranslateTargetLanguage();\n  const systemTargetLanguageText = localeCode2Text(systemTargetLanguage);\n  const currentTextSize = store.local.get('textSize') || DEFAULT_TEXT_SIZE;\n\n  const [prefs, setPrefs] = useState(store.account.get('preferences') || {});\n  const { masto, authenticated, instance } = api();\n  // Get preferences every time Settings is opened\n  // NOTE: Disabled for now because I don't expect this to change often. Also for some reason, the /api/v1/preferences endpoint is cached for a while and return old prefs if refresh immediately after changing them.\n  // useEffect(() => {\n  //   const { masto } = api();\n  //   (async () => {\n  //     try {\n  //       const preferences = await masto.v1.preferences.fetch();\n  //       setPrefs(preferences);\n  //       store.account.set('preferences', preferences);\n  //     } catch (e) {\n  //       // Silently fail\n  //       console.error(e);\n  //     }\n  //   })();\n  // }, []);\n\n  return (\n    <div id=\"settings-container\" class=\"sheet\" tabIndex=\"-1\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Settings</h2>\n      </header>\n      <main>\n        <section>\n          <ul>\n            <li>\n              <div>\n                <label>Appearance</label>\n              </div>\n              <div>\n                <form\n                  ref={themeFormRef}\n                  onInput={(e) => {\n                    console.log(e);\n                    e.preventDefault();\n                    const formData = new FormData(themeFormRef.current);\n                    const theme = formData.get('theme');\n                    const html = document.documentElement;\n\n                    if (theme === 'auto') {\n                      html.classList.remove('is-light', 'is-dark');\n                    } else {\n                      html.classList.toggle('is-light', theme === 'light');\n                      html.classList.toggle('is-dark', theme === 'dark');\n                    }\n                    document\n                      .querySelector('meta[name=\"color-scheme\"]')\n                      .setAttribute(\n                        'content',\n                        theme === 'auto' ? 'dark light' : theme,\n                      );\n\n                    if (theme === 'auto') {\n                      store.local.del('theme');\n                    } else {\n                      store.local.set('theme', theme);\n                    }\n                  }}\n                >\n                  <div class=\"radio-group\">\n                    <label>\n                      <input\n                        type=\"radio\"\n                        name=\"theme\"\n                        value=\"light\"\n                        defaultChecked={currentTheme === 'light'}\n                      />\n                      <span>Light</span>\n                    </label>\n                    <label>\n                      <input\n                        type=\"radio\"\n                        name=\"theme\"\n                        value=\"dark\"\n                        defaultChecked={currentTheme === 'dark'}\n                      />\n                      <span>Dark</span>\n                    </label>\n                    <label>\n                      <input\n                        type=\"radio\"\n                        name=\"theme\"\n                        value=\"auto\"\n                        defaultChecked={\n                          currentTheme !== 'light' && currentTheme !== 'dark'\n                        }\n                      />\n                      <span>Auto</span>\n                    </label>\n                  </div>\n                </form>\n              </div>\n            </li>\n            <li>\n              <div>\n                <label>Text size</label>\n              </div>\n              <div class=\"range-group\">\n                <span style={{ fontSize: TEXT_SIZES[0] }}>A</span>{' '}\n                <input\n                  type=\"range\"\n                  min={TEXT_SIZES[0]}\n                  max={TEXT_SIZES[TEXT_SIZES.length - 1]}\n                  step=\"1\"\n                  value={currentTextSize}\n                  list=\"sizes\"\n                  onChange={(e) => {\n                    const value = parseInt(e.target.value, 10);\n                    const html = document.documentElement;\n                    // set CSS variable\n                    html.style.setProperty('--text-size', `${value}px`);\n                    // save to local storage\n                    if (value === DEFAULT_TEXT_SIZE) {\n                      store.local.del('textSize');\n                    } else {\n                      store.local.set('textSize', e.target.value);\n                    }\n                  }}\n                />{' '}\n                <span style={{ fontSize: TEXT_SIZES[TEXT_SIZES.length - 1] }}>\n                  A\n                </span>\n                <datalist id=\"sizes\">\n                  {TEXT_SIZES.map((size) => (\n                    <option value={size} />\n                  ))}\n                </datalist>\n              </div>\n            </li>\n          </ul>\n        </section>\n        {authenticated && (\n          <>\n            <h3>Posting</h3>\n            <section>\n              <ul>\n                <li>\n                  <div>\n                    <label for=\"posting-privacy-field\">\n                      Default visibility{' '}\n                      <Icon icon=\"cloud\" alt=\"Synced\" class=\"synced-icon\" />\n                    </label>\n                  </div>\n                  <div>\n                    <select\n                      id=\"posting-privacy-field\"\n                      value={prefs['posting:default:visibility'] || 'public'}\n                      onChange={(e) => {\n                        const { value } = e.target;\n                        (async () => {\n                          try {\n                            await masto.v1.accounts.updateCredentials({\n                              source: {\n                                privacy: value,\n                              },\n                            });\n                            setPrefs({\n                              ...prefs,\n                              'posting:default:visibility': value,\n                            });\n                            store.account.set('preferences', {\n                              ...prefs,\n                              'posting:default:visibility': value,\n                            });\n                          } catch (e) {\n                            alert('Failed to update posting privacy');\n                            console.error(e);\n                          }\n                        })();\n                      }}\n                    >\n                      <option value=\"public\">Public</option>\n                      <option value=\"unlisted\">Unlisted</option>\n                      <option value=\"private\">Followers only</option>\n                    </select>\n                  </div>\n                </li>\n              </ul>\n            </section>\n            <p class=\"section-postnote\">\n              <Icon icon=\"cloud\" alt=\"Synced\" class=\"synced-icon\" />{' '}\n              <small>\n                Synced to your instance server's settings.{' '}\n                <a\n                  href={`https://${instance}/`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  Go to your instance ({instance}) for more settings.\n                </a>\n              </small>\n            </p>\n          </>\n        )}\n        <h3>Experiments</h3>\n        <section>\n          <ul>\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.autoRefresh}\n                  onChange={(e) => {\n                    states.settings.autoRefresh = e.target.checked;\n                  }}\n                />{' '}\n                Auto refresh timeline posts\n              </label>\n            </li>\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.boostsCarousel}\n                  onChange={(e) => {\n                    states.settings.boostsCarousel = e.target.checked;\n                  }}\n                />{' '}\n                Boosts carousel\n              </label>\n            </li>\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.contentTranslation}\n                  onChange={(e) => {\n                    const { checked } = e.target;\n                    states.settings.contentTranslation = checked;\n                    if (!checked) {\n                      states.settings.contentTranslationTargetLanguage = null;\n                    }\n                  }}\n                />{' '}\n                Post translation\n              </label>\n              <div\n                class={`sub-section ${\n                  !snapStates.settings.contentTranslation\n                    ? 'more-insignificant'\n                    : ''\n                }`}\n              >\n                <div>\n                  <label>\n                    Translate to{' '}\n                    <select\n                      value={targetLanguage || ''}\n                      disabled={!snapStates.settings.contentTranslation}\n                      onChange={(e) => {\n                        states.settings.contentTranslationTargetLanguage =\n                          e.target.value || null;\n                      }}\n                    >\n                      <option value=\"\">\n                        System language ({systemTargetLanguageText})\n                      </option>\n                      <option disabled>──────────</option>\n                      {targetLanguages.map((lang) => (\n                        <option value={lang.code}>{lang.name}</option>\n                      ))}\n                    </select>\n                  </label>\n                </div>\n                <hr />\n                <p class=\"checkbox-fieldset\">\n                  Hide \"Translate\" button for\n                  {snapStates.settings.contentTranslationHideLanguages.length >\n                    0 && (\n                    <>\n                      {' '}\n                      (\n                      {\n                        snapStates.settings.contentTranslationHideLanguages\n                          .length\n                      }\n                      )\n                    </>\n                  )}\n                  :\n                  <div class=\"checkbox-fields\">\n                    {targetLanguages.map((lang) => (\n                      <label>\n                        <input\n                          type=\"checkbox\"\n                          checked={snapStates.settings.contentTranslationHideLanguages.includes(\n                            lang.code,\n                          )}\n                          onChange={(e) => {\n                            const { checked } = e.target;\n                            if (checked) {\n                              states.settings.contentTranslationHideLanguages.push(\n                                lang.code,\n                              );\n                            } else {\n                              states.settings.contentTranslationHideLanguages =\n                                snapStates.settings.contentTranslationHideLanguages.filter(\n                                  (code) => code !== lang.code,\n                                );\n                            }\n                          }}\n                        />{' '}\n                        {lang.name}\n                      </label>\n                    ))}\n                  </div>\n                </p>\n                <p class=\"insignificant\">\n                  <small>\n                    Note: This feature uses an external API to translate,\n                    powered by{' '}\n                    <a\n                      href=\"https://github.com/thedaviddelta/lingva-translate\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      Lingva Translate\n                    </a>\n                    .\n                  </small>\n                </p>\n                <hr />\n                <div>\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      checked={snapStates.settings.contentTranslationAutoInline}\n                      disabled={!snapStates.settings.contentTranslation}\n                      onChange={(e) => {\n                        states.settings.contentTranslationAutoInline =\n                          e.target.checked;\n                      }}\n                    />{' '}\n                    Auto inline translation\n                  </label>\n                  <p class=\"insignificant\">\n                    <small>\n                      Automatically show translation for posts in timeline. Only\n                      works for <b>short</b> posts without content warning,\n                      media and poll.\n                    </small>\n                  </p>\n                </div>\n              </div>\n            </li>\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.cloakMode}\n                  onChange={(e) => {\n                    states.settings.cloakMode = e.target.checked;\n                  }}\n                />{' '}\n                Cloak mode{' '}\n                <span class=\"insignificant\">\n                  (<samp>Text</samp> → <samp>████</samp>)\n                </span>\n              </label>\n              <div class=\"sub-section insignificant\">\n                <small>\n                  Replace text as blocks, useful when taking screenshots, for\n                  privacy reasons.\n                </small>\n              </div>\n            </li>\n            {authenticated && (\n              <li>\n                <button\n                  type=\"button\"\n                  class=\"light\"\n                  onClick={() => {\n                    states.showDrafts = true;\n                    states.showSettings = false;\n                  }}\n                >\n                  Unsent drafts\n                </button>\n              </li>\n            )}\n          </ul>\n        </section>\n        {authenticated && <PushNotificationsSection onClose={onClose} />}\n        <h3>About</h3>\n        <section>\n          <div\n            style={{\n              display: 'flex',\n              gap: 8,\n              lineHeight: 1.25,\n              alignItems: 'center',\n              marginTop: 8,\n            }}\n          >\n            <img\n              src={logo}\n              alt=\"\"\n              width=\"64\"\n              height=\"64\"\n              style={{\n                aspectRatio: '1/1',\n                verticalAlign: 'middle',\n                background: '#b7cdf9',\n                borderRadius: 12,\n              }}\n            />\n            <div>\n              <b>Phanpy</b>{' '}\n              <a\n                href=\"https://hachyderm.io/@phanpy\"\n                // target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  states.showAccount = 'phanpy@hachyderm.io';\n                }}\n              >\n                @phanpy\n              </a>\n              <br />\n              <a\n                href=\"https://github.com/cheeaun/phanpy\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                Built\n              </a>{' '}\n              by{' '}\n              <a\n                href=\"https://mastodon.social/@cheeaun\"\n                // target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  states.showAccount = 'cheeaun@mastodon.social';\n                }}\n              >\n                @cheeaun\n              </a>\n            </div>\n          </div>\n          <p>\n            <a\n              href=\"https://github.com/sponsors/cheeaun\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Sponsor\n            </a>{' '}\n            &middot;{' '}\n            <a\n              href=\"https://www.buymeacoffee.com/cheeaun\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Donate\n            </a>{' '}\n            &middot;{' '}\n            <a\n              href=\"https://github.com/cheeaun/phanpy/blob/main/PRIVACY.MD\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Privacy Policy\n            </a>\n          </p>\n          {__BUILD_TIME__ && (\n            <p>\n              <span class=\"insignificant\">Last build:</span>{' '}\n              <RelativeTime datetime={new Date(__BUILD_TIME__)} />{' '}\n              {__COMMIT_HASH__ && (\n                <>\n                  (\n                  <a\n                    href={`https://github.com/cheeaun/phanpy/commit/${__COMMIT_HASH__}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    <code>{__COMMIT_HASH__}</code>\n                  </a>\n                  )\n                </>\n              )}\n            </p>\n          )}\n        </section>\n      </main>\n    </div>\n  );\n}\n\nfunction PushNotificationsSection({ onClose }) {\n  if (!isPushSupported()) return null;\n\n  const { instance } = api();\n  const [uiState, setUIState] = useState('default');\n  const pushFormRef = useRef();\n  const [allowNofitications, setAllowNotifications] = useState(false);\n  const [needRelogin, setNeedRelogin] = useState(false);\n  const previousPolicyRef = useRef();\n  useEffect(() => {\n    (async () => {\n      setUIState('loading');\n      try {\n        const { subscription, backendSubscription } = await initSubscription();\n        if (\n          backendSubscription?.policy &&\n          backendSubscription.policy !== 'none'\n        ) {\n          setAllowNotifications(true);\n          const { alerts, policy } = backendSubscription;\n          previousPolicyRef.current = policy;\n          const { elements } = pushFormRef.current;\n          const policyEl = elements.namedItem(policy);\n          if (policyEl) policyEl.value = policy;\n          // alerts is {}, iterate it\n          Object.keys(alerts).forEach((alert) => {\n            const el = elements.namedItem(alert);\n            if (el?.type === 'checkbox') {\n              el.checked = true;\n            }\n          });\n        }\n        setUIState('default');\n      } catch (err) {\n        console.warn(err);\n        if (/outside.*authorized/i.test(err.message)) {\n          setNeedRelogin(true);\n        } else {\n          alert(err?.message || err);\n        }\n        setUIState('error');\n      }\n    })();\n  }, []);\n\n  const isLoading = uiState === 'loading';\n\n  return (\n    <form\n      ref={pushFormRef}\n      onChange={() => {\n        const values = Object.fromEntries(new FormData(pushFormRef.current));\n        const allowNofitications = !!values['policy-allow'];\n        const params = {\n          policy: values.policy,\n          data: {\n            alerts: {\n              mention: !!values.mention,\n              favourite: !!values.favourite,\n              reblog: !!values.reblog,\n              follow: !!values.follow,\n              follow_request: !!values.followRequest,\n              poll: !!values.poll,\n              update: !!values.update,\n              status: !!values.status,\n            },\n          },\n        };\n\n        let alertsCount = 0;\n        // Remove false values from data.alerts\n        // API defaults to false anyway\n        Object.keys(params.data.alerts).forEach((key) => {\n          if (!params.data.alerts[key]) {\n            delete params.data.alerts[key];\n          } else {\n            alertsCount++;\n          }\n        });\n        const policyChanged = previousPolicyRef.current !== params.policy;\n\n        console.log('PN Form', { values, allowNofitications, params });\n\n        if (allowNofitications && alertsCount > 0) {\n          if (policyChanged) {\n            console.debug('Policy changed.');\n            removeSubscription()\n              .then(() => {\n                updateSubscription(params);\n              })\n              .catch((err) => {\n                console.warn(err);\n                alert('Failed to update subscription. Please try again.');\n              });\n          } else {\n            updateSubscription(params).catch((err) => {\n              console.warn(err);\n              alert('Failed to update subscription. Please try again.');\n            });\n          }\n        } else {\n          removeSubscription().catch((err) => {\n            console.warn(err);\n            alert('Failed to remove subscription. Please try again.');\n          });\n        }\n      }}\n    >\n      <h3>Push Notifications (beta)</h3>\n      <section>\n        <ul>\n          <li>\n            <label>\n              <input\n                type=\"checkbox\"\n                disabled={isLoading || needRelogin}\n                name=\"policy-allow\"\n                checked={allowNofitications}\n                onChange={async (e) => {\n                  const { checked } = e.target;\n                  if (checked) {\n                    // Request permission\n                    const permission = await Notification.requestPermission();\n                    if (permission === 'granted') {\n                      setAllowNotifications(true);\n                    } else {\n                      setAllowNotifications(false);\n                      if (permission === 'denied') {\n                        alert(\n                          'Push notifications are blocked. Please enable them in your browser settings.',\n                        );\n                      }\n                    }\n                  } else {\n                    setAllowNotifications(false);\n                  }\n                }}\n              />{' '}\n              Allow from{' '}\n              <select\n                name=\"policy\"\n                disabled={isLoading || needRelogin || !allowNofitications}\n              >\n                {[\n                  {\n                    value: 'all',\n                    label: 'anyone',\n                  },\n                  {\n                    value: 'followed',\n                    label: 'people I follow',\n                  },\n                  {\n                    value: 'follower',\n                    label: 'followers',\n                  },\n                ].map((type) => (\n                  <option value={type.value}>{type.label}</option>\n                ))}\n              </select>\n            </label>\n            <div\n              class=\"shazam-container no-animation\"\n              style={{\n                width: '100%',\n              }}\n              hidden={!allowNofitications}\n            >\n              <div class=\"shazam-container-inner\">\n                <div class=\"sub-section\">\n                  <ul>\n                    {[\n                      {\n                        value: 'mention',\n                        label: 'Mentions',\n                      },\n                      {\n                        value: 'favourite',\n                        label: 'Favourites',\n                      },\n                      {\n                        value: 'reblog',\n                        label: 'Boosts',\n                      },\n                      {\n                        value: 'follow',\n                        label: 'Follows',\n                      },\n                      {\n                        value: 'followRequest',\n                        label: 'Follow requests',\n                      },\n                      {\n                        value: 'poll',\n                        label: 'Polls',\n                      },\n                      {\n                        value: 'update',\n                        label: 'Post edits',\n                      },\n                      {\n                        value: 'status',\n                        label: 'New posts',\n                      },\n                    ].map((alert) => (\n                      <li>\n                        <label>\n                          <input type=\"checkbox\" name={alert.value} />{' '}\n                          {alert.label}\n                        </label>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              </div>\n            </div>\n            {needRelogin && (\n              <div class=\"sub-section\">\n                <p>\n                  Push permission was not granted since your last login. You'll\n                  need to{' '}\n                  <Link to={`/login?instance=${instance}`} onClick={onClose}>\n                    <b>log in</b> again to grant push permission\n                  </Link>\n                  .\n                </p>\n              </div>\n            )}\n          </li>\n        </ul>\n      </section>\n      <p class=\"section-postnote\">\n        <small>\n          NOTE: Push notifications only work for <b>one account</b>.\n        </small>\n      </p>\n    </form>\n  );\n}\n\nexport default Settings;\n","const focusDeck = () => {\n  let timer = setTimeout(() => {\n    const columns = document.getElementById('columns');\n    if (columns) {\n      // Focus first column\n      // columns.querySelector('.deck-container')?.focus?.();\n    } else {\n      const modals = document.querySelectorAll('#modal-container > *');\n      if (modals?.length) {\n        // Focus last modal\n        const modal = modals[modals.length - 1]; // last one\n        const modalFocusElement =\n          modal.querySelector('[tabindex=\"-1\"]') || modal;\n        if (modalFocusElement) {\n          modalFocusElement.focus();\n          return;\n        }\n      }\n      const backDrop = document.querySelector('.deck-backdrop');\n      if (backDrop) return;\n      // Focus last deck\n      const pages = document.querySelectorAll('.deck-container');\n      const page = pages[pages.length - 1]; // last one\n      if (page && page.tabIndex === -1) {\n        console.log('FOCUS', page);\n        page.focus();\n      }\n    }\n  }, 100);\n  return () => clearTimeout(timer);\n};\n\nexport default focusDeck;\n","import { useEffect, useRef, useState } from 'preact/hooks';\n\nimport { api } from '../utils/api';\nimport supports from '../utils/supports';\n\nimport Icon from './icon';\nimport MenuConfirm from './menu-confirm';\n\nfunction ListAddEdit({ list, onClose }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const editMode = !!list;\n  const nameFieldRef = useRef();\n  const repliesPolicyFieldRef = useRef();\n  const exclusiveFieldRef = useRef();\n  useEffect(() => {\n    if (editMode) {\n      nameFieldRef.current.value = list.title;\n      repliesPolicyFieldRef.current.value = list.repliesPolicy;\n      if (exclusiveFieldRef.current) {\n        exclusiveFieldRef.current.checked = list.exclusive;\n      }\n    }\n  }, [editMode]);\n  const supportsExclusive = supports('@mastodon/list-exclusive');\n\n  return (\n    <div class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}{' '}\n      <header>\n        <h2>{editMode ? 'Edit list' : 'New list'}</h2>\n      </header>\n      <main>\n        <form\n          class=\"list-form\"\n          onSubmit={(e) => {\n            e.preventDefault(); // Get form values\n\n            const formData = new FormData(e.target);\n            const title = formData.get('title');\n            const repliesPolicy = formData.get('replies_policy');\n            const exclusive = formData.get('exclusive') === 'on';\n            console.log({\n              title,\n              repliesPolicy,\n              exclusive,\n            });\n            setUIState('loading');\n\n            (async () => {\n              try {\n                let listResult;\n\n                if (editMode) {\n                  listResult = await masto.v1.lists.$select(list.id).update({\n                    title,\n                    replies_policy: repliesPolicy,\n                    exclusive,\n                  });\n                } else {\n                  listResult = await masto.v1.lists.create({\n                    title,\n                    replies_policy: repliesPolicy,\n                    exclusive,\n                  });\n                }\n\n                console.log(listResult);\n                setUIState('default');\n                onClose?.({\n                  state: 'success',\n                  list: listResult,\n                });\n              } catch (e) {\n                console.error(e);\n                setUIState('error');\n                alert(\n                  editMode ? 'Unable to edit list.' : 'Unable to create list.',\n                );\n              }\n            })();\n          }}\n        >\n          <div class=\"list-form-row\">\n            <label for=\"list-title\">\n              Name{' '}\n              <input\n                ref={nameFieldRef}\n                type=\"text\"\n                id=\"list-title\"\n                name=\"title\"\n                required\n                disabled={uiState === 'loading'}\n                dir=\"auto\"\n              />\n            </label>\n          </div>\n          <div class=\"list-form-row\">\n            <select\n              ref={repliesPolicyFieldRef}\n              name=\"replies_policy\"\n              required\n              disabled={uiState === 'loading'}\n            >\n              <option value=\"list\">Show replies to list members</option>\n              <option value=\"followed\">Show replies to people I follow</option>\n              <option value=\"none\">Don't show replies</option>\n            </select>\n          </div>\n          {supportsExclusive && (\n            <div class=\"list-form-row\">\n              <label class=\"label-block\">\n                <input\n                  ref={exclusiveFieldRef}\n                  type=\"checkbox\"\n                  name=\"exclusive\"\n                  disabled={uiState === 'loading'}\n                />{' '}\n                Hide posts on this list from Home/Following\n              </label>\n            </div>\n          )}\n          <div class=\"list-form-footer\">\n            <button type=\"submit\" disabled={uiState === 'loading'}>\n              {editMode ? 'Save' : 'Create'}\n            </button>\n            {editMode && (\n              <MenuConfirm\n                disabled={uiState === 'loading'}\n                align=\"end\"\n                menuItemClassName=\"danger\"\n                confirmLabel=\"Delete this list?\"\n                onClick={() => {\n                  // const yes = confirm('Delete this list?');\n                  // if (!yes) return;\n                  setUIState('loading');\n\n                  (async () => {\n                    try {\n                      await masto.v1.lists.$select(list.id).remove();\n                      setUIState('default');\n                      onClose?.({\n                        state: 'deleted',\n                      });\n                    } catch (e) {\n                      console.error(e);\n                      setUIState('error');\n                      alert('Unable to delete list.');\n                    }\n                  })();\n                }}\n              >\n                <button\n                  type=\"button\"\n                  class=\"light danger\"\n                  disabled={uiState === 'loading'}\n                >\n                  Delete…\n                </button>\n              </MenuConfirm>\n            )}\n          </div>\n        </form>\n      </main>\n    </div>\n  );\n}\n\nexport default ListAddEdit;\n","import './account-info.css';\n\nimport { Menu, MenuDivider, MenuItem, SubMenu } from '@szhsin/react-menu';\nimport mem from 'mem';\nimport {\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n} from 'preact/hooks';\n\nimport { api } from '../utils/api';\nimport enhanceContent from '../utils/enhance-content';\nimport getHTMLText from '../utils/getHTMLText';\nimport handleContentLinks from '../utils/handle-content-links';\nimport niceDateTime from '../utils/nice-date-time';\nimport shortenNumber from '../utils/shorten-number';\nimport showToast from '../utils/show-toast';\nimport states, { hideAllModals } from '../utils/states';\nimport store from '../utils/store';\nimport { updateAccount } from '../utils/store-utils';\n\nimport AccountBlock from './account-block';\nimport Avatar from './avatar';\nimport EmojiText from './emoji-text';\nimport Icon from './icon';\nimport Link from './link';\nimport ListAddEdit from './list-add-edit';\nimport Loader from './loader';\nimport MenuConfirm from './menu-confirm';\nimport Modal from './modal';\nimport TranslationBlock from './translation-block';\n\nconst MUTE_DURATIONS = [\n  1000 * 60 * 5, // 5 minutes\n  1000 * 60 * 30, // 30 minutes\n  1000 * 60 * 60, // 1 hour\n  1000 * 60 * 60 * 6, // 6 hours\n  1000 * 60 * 60 * 24, // 1 day\n  1000 * 60 * 60 * 24 * 3, // 3 days\n  1000 * 60 * 60 * 24 * 7, // 1 week\n  0, // forever\n];\nconst MUTE_DURATIONS_LABELS = {\n  0: 'Forever',\n  300_000: '5 minutes',\n  1_800_000: '30 minutes',\n  3_600_000: '1 hour',\n  21_600_000: '6 hours',\n  86_400_000: '1 day',\n  259_200_000: '3 days',\n  604_800_000: '1 week',\n};\n\nconst LIMIT = 80;\n\nconst ACCOUNT_INFO_MAX_AGE = 1000 * 60 * 10; // 10 mins\n\nfunction fetchFamiliarFollowers(currentID, masto) {\n  return masto.v1.accounts.familiarFollowers.fetch({\n    id: [currentID],\n  });\n}\nconst memFetchFamiliarFollowers = mem(fetchFamiliarFollowers, {\n  maxAge: ACCOUNT_INFO_MAX_AGE,\n});\n\nasync function fetchPostingStats(accountID, masto) {\n  const fetchStatuses = masto.v1.accounts\n    .$select(accountID)\n    .statuses.list({\n      limit: 20,\n    })\n    .next();\n\n  const { value: statuses } = await fetchStatuses;\n  console.log('fetched statuses', statuses);\n  const stats = {\n    total: statuses.length,\n    originals: 0,\n    replies: 0,\n    boosts: 0,\n  };\n  // Categories statuses by type\n  // - Original posts (not replies to others)\n  // - Threads (self-replies + 1st original post)\n  // - Boosts (reblogs)\n  // - Replies (not-self replies)\n  statuses.forEach((status) => {\n    if (status.reblog) {\n      stats.boosts++;\n    } else if (\n      !!status.inReplyToId &&\n      status.inReplyToAccountId !== status.account.id // Not self-reply\n    ) {\n      stats.replies++;\n    } else {\n      stats.originals++;\n    }\n  });\n\n  // Count days since last post\n  if (statuses.length) {\n    stats.daysSinceLastPost = Math.ceil(\n      (Date.now() - new Date(statuses[statuses.length - 1].createdAt)) /\n        86400000,\n    );\n  }\n\n  console.log('posting stats', stats);\n  return stats;\n}\nconst memFetchPostingStats = mem(fetchPostingStats, {\n  maxAge: ACCOUNT_INFO_MAX_AGE,\n});\n\nfunction AccountInfo({\n  account,\n  fetchAccount = () => {},\n  standalone,\n  instance,\n  authenticated,\n}) {\n  const { masto } = api({\n    instance,\n  });\n  const { masto: currentMasto } = api();\n  const [uiState, setUIState] = useState('default');\n  const isString = typeof account === 'string';\n  const [info, setInfo] = useState(isString ? null : account);\n\n  const isSelf = useMemo(\n    () => account.id === store.session.get('currentAccount'),\n    [account?.id],\n  );\n\n  const sameCurrentInstance = useMemo(\n    () => instance === api().instance,\n    [instance],\n  );\n\n  useEffect(() => {\n    if (!isString) {\n      setInfo(account);\n      return;\n    }\n    setUIState('loading');\n    (async () => {\n      try {\n        const info = await fetchAccount();\n        states.accounts[`${info.id}@${instance}`] = info;\n        setInfo(info);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setInfo(null);\n        setUIState('error');\n      }\n    })();\n  }, [isString, account, fetchAccount]);\n\n  const {\n    acct,\n    avatar,\n    avatarStatic,\n    bot,\n    createdAt,\n    displayName,\n    emojis,\n    fields,\n    followersCount,\n    followingCount,\n    group,\n    // header,\n    // headerStatic,\n    id,\n    lastStatusAt,\n    locked,\n    note,\n    statusesCount,\n    url,\n    username,\n    memorial,\n    moved,\n    roles,\n  } = info || {};\n  let headerIsAvatar = false;\n  let { header, headerStatic } = info || {};\n  if (!header || /missing\\.png$/.test(header)) {\n    if (avatar && !/missing\\.png$/.test(avatar)) {\n      header = avatar;\n      headerIsAvatar = true;\n      if (avatarStatic && !/missing\\.png$/.test(avatarStatic)) {\n        headerStatic = avatarStatic;\n      }\n    }\n  }\n\n  const accountInstance = useMemo(() => {\n    if (!url) return null;\n    const domain = new URL(url).hostname;\n    return domain;\n  }, [url]);\n\n  const [headerCornerColors, setHeaderCornerColors] = useState([]);\n\n  const followersIterator = useRef();\n  const familiarFollowersCache = useRef([]);\n  async function fetchFollowers(firstLoad) {\n    if (firstLoad || !followersIterator.current) {\n      followersIterator.current = masto.v1.accounts.$select(id).followers.list({\n        limit: LIMIT,\n      });\n    }\n    const results = await followersIterator.current.next();\n    if (isSelf) return results;\n    if (!sameCurrentInstance) return results;\n\n    const { value } = results;\n    let newValue = [];\n    // On first load, fetch familiar followers, merge to top of results' `value`\n    // Remove dups on every fetch\n    if (firstLoad) {\n      const familiarFollowers = await masto.v1.accounts\n        .familiarFollowers(id)\n        .fetch();\n      familiarFollowersCache.current = familiarFollowers[0].accounts;\n      newValue = [\n        ...familiarFollowersCache.current,\n        ...value.filter(\n          (account) =>\n            !familiarFollowersCache.current.some(\n              (familiar) => familiar.id === account.id,\n            ),\n        ),\n      ];\n    } else if (value?.length) {\n      newValue = value.filter(\n        (account) =>\n          !familiarFollowersCache.current.some(\n            (familiar) => familiar.id === account.id,\n          ),\n      );\n    }\n\n    return {\n      ...results,\n      value: newValue,\n    };\n  }\n\n  const followingIterator = useRef();\n  async function fetchFollowing(firstLoad) {\n    if (firstLoad || !followingIterator.current) {\n      followingIterator.current = masto.v1.accounts.$select(id).following.list({\n        limit: LIMIT,\n      });\n    }\n    const results = await followingIterator.current.next();\n    return results;\n  }\n\n  const LinkOrDiv = standalone ? 'div' : Link;\n  const accountLink = instance ? `/${instance}/a/${id}` : `/a/${id}`;\n\n  const [familiarFollowers, setFamiliarFollowers] = useState([]);\n  const [postingStats, setPostingStats] = useState();\n  const [postingStatsUIState, setPostingStatsUIState] = useState('default');\n  const hasPostingStats = !!postingStats?.total;\n\n  const renderFamiliarFollowers = async (currentID) => {\n    try {\n      const followers = await memFetchFamiliarFollowers(\n        currentID,\n        currentMasto,\n      );\n      console.log('fetched familiar followers', followers);\n      setFamiliarFollowers(\n        followers[0].accounts.slice(0, FAMILIAR_FOLLOWERS_LIMIT),\n      );\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const renderPostingStats = async () => {\n    if (!id) return;\n    setPostingStatsUIState('loading');\n    try {\n      const stats = await memFetchPostingStats(id, masto);\n      setPostingStats(stats);\n      setPostingStatsUIState('default');\n    } catch (e) {\n      console.error(e);\n      setPostingStatsUIState('error');\n    }\n  };\n\n  const onRelationshipChange = useCallback(\n    ({ relationship, currentID }) => {\n      if (!relationship.following) {\n        renderFamiliarFollowers(currentID);\n        if (!standalone) {\n          renderPostingStats();\n        }\n      }\n    },\n    [standalone],\n  );\n\n  return (\n    <div\n      class={`account-container  ${uiState === 'loading' ? 'skeleton' : ''}`}\n      style={{\n        '--header-color-1': headerCornerColors[0],\n        '--header-color-2': headerCornerColors[1],\n        '--header-color-3': headerCornerColors[2],\n        '--header-color-4': headerCornerColors[3],\n      }}\n    >\n      {uiState === 'error' && (\n        <div class=\"ui-state\">\n          <p>Unable to load account.</p>\n          <p>\n            <a\n              href={isString ? account : url}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Go to account page <Icon icon=\"external\" />\n            </a>\n          </p>\n        </div>\n      )}\n      {uiState === 'loading' ? (\n        <>\n          <header>\n            <AccountBlock avatarSize=\"xxxl\" skeleton />\n          </header>\n          <main>\n            <div class=\"note\">\n              <p>████████ ███████</p>\n              <p>███████████████ ███████████████</p>\n            </div>\n            <p class=\"stats\">\n              <div>\n                <span>██</span> Followers\n              </div>\n              <div>\n                <span>██</span> Following\n              </div>\n              <div>\n                <span>██</span> Posts\n              </div>\n              <div>Joined ██</div>\n            </p>\n          </main>\n        </>\n      ) : (\n        info && (\n          <>\n            {!!moved && (\n              <div class=\"account-moved\">\n                <p>\n                  <b>{displayName}</b> has indicated that their new account is\n                  now:\n                </p>\n                <AccountBlock\n                  account={moved}\n                  instance={instance}\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    states.showAccount = moved;\n                  }}\n                />\n              </div>\n            )}\n            {header && !/missing\\.png$/.test(header) && (\n              <img\n                src={header}\n                alt=\"\"\n                class={`header-banner ${\n                  headerIsAvatar ? 'header-is-avatar' : ''\n                }`}\n                onError={(e) => {\n                  if (e.target.crossOrigin) {\n                    if (e.target.src !== headerStatic) {\n                      e.target.src = headerStatic;\n                    } else {\n                      e.target.removeAttribute('crossorigin');\n                      e.target.src = header;\n                    }\n                  } else if (e.target.src !== headerStatic) {\n                    e.target.src = headerStatic;\n                  } else {\n                    e.target.remove();\n                  }\n                }}\n                crossOrigin=\"anonymous\"\n                onLoad={(e) => {\n                  e.target.classList.add('loaded');\n                  try {\n                    // Get color from four corners of image\n                    const canvas = document.createElement('canvas');\n                    const ctx = canvas.getContext('2d', {\n                      willReadFrequently: true,\n                    });\n                    canvas.width = e.target.width;\n                    canvas.height = e.target.height;\n                    ctx.drawImage(e.target, 0, 0);\n                    // const colors = [\n                    //   ctx.getImageData(0, 0, 1, 1).data,\n                    //   ctx.getImageData(e.target.width - 1, 0, 1, 1).data,\n                    //   ctx.getImageData(0, e.target.height - 1, 1, 1).data,\n                    //   ctx.getImageData(\n                    //     e.target.width - 1,\n                    //     e.target.height - 1,\n                    //     1,\n                    //     1,\n                    //   ).data,\n                    // ];\n                    // Get 10x10 pixels from corners, get average color from each\n                    const pixelDimension = 10;\n                    const colors = [\n                      ctx.getImageData(0, 0, pixelDimension, pixelDimension)\n                        .data,\n                      ctx.getImageData(\n                        e.target.width - pixelDimension,\n                        0,\n                        pixelDimension,\n                        pixelDimension,\n                      ).data,\n                      ctx.getImageData(\n                        0,\n                        e.target.height - pixelDimension,\n                        pixelDimension,\n                        pixelDimension,\n                      ).data,\n                      ctx.getImageData(\n                        e.target.width - pixelDimension,\n                        e.target.height - pixelDimension,\n                        pixelDimension,\n                        pixelDimension,\n                      ).data,\n                    ].map((data) => {\n                      let r = 0;\n                      let g = 0;\n                      let b = 0;\n                      let a = 0;\n                      for (let i = 0; i < data.length; i += 4) {\n                        r += data[i];\n                        g += data[i + 1];\n                        b += data[i + 2];\n                        a += data[i + 3];\n                      }\n                      const dataLength = data.length / 4;\n                      return [\n                        r / dataLength,\n                        g / dataLength,\n                        b / dataLength,\n                        a / dataLength,\n                      ];\n                    });\n                    const rgbColors = colors.map((color) => {\n                      const [r, g, b, a] = lightenRGB(color);\n                      return `rgba(${r}, ${g}, ${b}, ${a})`;\n                    });\n                    setHeaderCornerColors(rgbColors);\n                    console.log({ colors, rgbColors });\n                  } catch (e) {\n                    // Silently fail\n                  }\n                }}\n              />\n            )}\n            <header>\n              <AccountBlock\n                account={info}\n                instance={instance}\n                avatarSize=\"xxxl\"\n                external={standalone}\n                internal={!standalone}\n              />\n            </header>\n            <main tabIndex=\"-1\">\n              {!!memorial && <span class=\"tag\">In Memoriam</span>}\n              {!!bot && (\n                <span class=\"tag\">\n                  <Icon icon=\"bot\" /> Automated\n                </span>\n              )}\n              {!!group && (\n                <span class=\"tag\">\n                  <Icon icon=\"group\" /> Group\n                </span>\n              )}\n              {roles?.map((role) => (\n                <span class=\"tag\">\n                  {role.name}\n                  {!!accountInstance && (\n                    <>\n                      {' '}\n                      <span class=\"more-insignificant\">{accountInstance}</span>\n                    </>\n                  )}\n                </span>\n              ))}\n              <div\n                class=\"note\"\n                dir=\"auto\"\n                onClick={handleContentLinks({\n                  instance,\n                })}\n                dangerouslySetInnerHTML={{\n                  __html: enhanceContent(note, { emojis }),\n                }}\n              />\n              <div class=\"account-metadata-box\">\n                {fields?.length > 0 && (\n                  <div class=\"profile-metadata\">\n                    {fields.map(({ name, value, verifiedAt }, i) => (\n                      <div\n                        class={`profile-field ${\n                          verifiedAt ? 'profile-verified' : ''\n                        }`}\n                        key={name + i}\n                        dir=\"auto\"\n                      >\n                        <b>\n                          <EmojiText text={name} emojis={emojis} />{' '}\n                          {!!verifiedAt && (\n                            <Icon icon=\"check-circle\" size=\"s\" />\n                          )}\n                        </b>\n                        <p\n                          dangerouslySetInnerHTML={{\n                            __html: enhanceContent(value, { emojis }),\n                          }}\n                        />\n                      </div>\n                    ))}\n                  </div>\n                )}\n                <div class=\"stats\">\n                  <LinkOrDiv\n                    tabIndex={0}\n                    to={accountLink}\n                    onClick={() => {\n                      states.showAccount = false;\n                      states.showGenericAccounts = {\n                        heading: 'Followers',\n                        fetchAccounts: fetchFollowers,\n                      };\n                    }}\n                  >\n                    {!!familiarFollowers.length && (\n                      <span class=\"shazam-container-horizontal\">\n                        <span class=\"shazam-container-inner stats-avatars-bunch\">\n                          {familiarFollowers.map((follower) => (\n                            <Avatar\n                              url={follower.avatarStatic}\n                              size=\"s\"\n                              alt={`${follower.displayName} @${follower.acct}`}\n                              squircle={follower?.bot}\n                            />\n                          ))}\n                        </span>\n                      </span>\n                    )}\n                    <span title={followersCount}>\n                      {shortenNumber(followersCount)}\n                    </span>{' '}\n                    Followers\n                  </LinkOrDiv>\n                  <LinkOrDiv\n                    class=\"insignificant\"\n                    tabIndex={0}\n                    to={accountLink}\n                    onClick={() => {\n                      states.showAccount = false;\n                      states.showGenericAccounts = {\n                        heading: 'Following',\n                        fetchAccounts: fetchFollowing,\n                      };\n                    }}\n                  >\n                    <span title={followingCount}>\n                      {shortenNumber(followingCount)}\n                    </span>{' '}\n                    Following\n                    <br />\n                  </LinkOrDiv>\n                  <LinkOrDiv\n                    class=\"insignificant\"\n                    to={accountLink}\n                    onClick={\n                      standalone\n                        ? undefined\n                        : () => {\n                            hideAllModals();\n                          }\n                    }\n                  >\n                    <span title={statusesCount}>\n                      {shortenNumber(statusesCount)}\n                    </span>{' '}\n                    Posts\n                  </LinkOrDiv>\n                  {!!createdAt && (\n                    <div class=\"insignificant\">\n                      Joined{' '}\n                      <time datetime={createdAt}>\n                        {niceDateTime(createdAt, {\n                          hideTime: true,\n                        })}\n                      </time>\n                    </div>\n                  )}\n                </div>\n              </div>\n              {!!postingStats && (\n                <LinkOrDiv\n                  to={accountLink}\n                  class=\"account-metadata-box\"\n                  onClick={() => {\n                    states.showAccount = false;\n                  }}\n                >\n                  <div class=\"shazam-container\">\n                    <div class=\"shazam-container-inner\">\n                      {hasPostingStats ? (\n                        <div\n                          class=\"posting-stats\"\n                          title={`${Math.round(\n                            (postingStats.originals / postingStats.total) * 100,\n                          )}% original posts, ${Math.round(\n                            (postingStats.replies / postingStats.total) * 100,\n                          )}% replies, ${Math.round(\n                            (postingStats.boosts / postingStats.total) * 100,\n                          )}% boosts`}\n                        >\n                          <div>\n                            {postingStats.daysSinceLastPost < 365\n                              ? `Last ${postingStats.total} posts in the past \n                      ${postingStats.daysSinceLastPost} day${\n                                  postingStats.daysSinceLastPost > 1 ? 's' : ''\n                                }`\n                              : `\n                      Last ${postingStats.total} posts in the past year(s)\n                      `}\n                          </div>\n                          <div\n                            class=\"posting-stats-bar\"\n                            style={{\n                              // [originals | replies | boosts]\n                              '--originals-percentage': `${\n                                (postingStats.originals / postingStats.total) *\n                                100\n                              }%`,\n                              '--replies-percentage': `${\n                                ((postingStats.originals +\n                                  postingStats.replies) /\n                                  postingStats.total) *\n                                100\n                              }%`,\n                            }}\n                          />\n                          <div class=\"posting-stats-legends\">\n                            <span class=\"ib\">\n                              <span class=\"posting-stats-legend-item posting-stats-legend-item-originals\" />{' '}\n                              Original\n                            </span>{' '}\n                            <span class=\"ib\">\n                              <span class=\"posting-stats-legend-item posting-stats-legend-item-replies\" />{' '}\n                              Replies\n                            </span>{' '}\n                            <span class=\"ib\">\n                              <span class=\"posting-stats-legend-item posting-stats-legend-item-boosts\" />{' '}\n                              Boosts\n                            </span>\n                          </div>\n                        </div>\n                      ) : (\n                        <div class=\"posting-stats\">Post stats unavailable.</div>\n                      )}\n                    </div>\n                  </div>\n                </LinkOrDiv>\n              )}\n              <div class=\"account-metadata-box\">\n                <div\n                  class=\"shazam-container no-animation\"\n                  hidden={!!postingStats}\n                >\n                  <div class=\"shazam-container-inner\">\n                    <button\n                      type=\"button\"\n                      class=\"posting-stats-button\"\n                      disabled={postingStatsUIState === 'loading'}\n                      onClick={() => {\n                        renderPostingStats();\n                      }}\n                    >\n                      <div\n                        class={`posting-stats-bar posting-stats-icon ${\n                          postingStatsUIState === 'loading' ? 'loading' : ''\n                        }`}\n                        style={{\n                          '--originals-percentage': '33%',\n                          '--replies-percentage': '66%',\n                        }}\n                      />\n                      View post stats{' '}\n                      {/* <Loader\n                        abrupt\n                        hidden={postingStatsUIState !== 'loading'}\n                      /> */}\n                    </button>\n                  </div>\n                </div>\n              </div>\n              <RelatedActions\n                info={info}\n                instance={instance}\n                authenticated={authenticated}\n                onRelationshipChange={onRelationshipChange}\n              />\n            </main>\n          </>\n        )\n      )}\n    </div>\n  );\n}\n\nconst FAMILIAR_FOLLOWERS_LIMIT = 3;\n\nfunction RelatedActions({\n  info,\n  instance,\n  authenticated,\n  onRelationshipChange = () => {},\n}) {\n  if (!info) return null;\n  const {\n    masto: currentMasto,\n    instance: currentInstance,\n    authenticated: currentAuthenticated,\n  } = api();\n  const sameInstance = instance === currentInstance;\n\n  const [relationshipUIState, setRelationshipUIState] = useState('default');\n  const [relationship, setRelationship] = useState(null);\n\n  const { id, acct, url, username, locked, lastStatusAt, note, fields, moved } =\n    info;\n  const accountID = useRef(id);\n\n  const {\n    following,\n    showingReblogs,\n    notifying,\n    followedBy,\n    blocking,\n    blockedBy,\n    muting,\n    mutingNotifications,\n    requested,\n    domainBlocking,\n    endorsed,\n  } = relationship || {};\n\n  const [currentInfo, setCurrentInfo] = useState(null);\n  const [isSelf, setIsSelf] = useState(false);\n\n  useEffect(() => {\n    if (info) {\n      const currentAccount = store.session.get('currentAccount');\n      let currentID;\n      (async () => {\n        if (sameInstance && authenticated) {\n          currentID = id;\n        } else if (!sameInstance && currentAuthenticated) {\n          // Grab this account from my logged-in instance\n          const acctHasInstance = info.acct.includes('@');\n          try {\n            const results = await currentMasto.v2.search.fetch({\n              q: acctHasInstance ? info.acct : `${info.username}@${instance}`,\n              type: 'accounts',\n              limit: 1,\n              resolve: true,\n            });\n            console.log('🥏 Fetched account from logged-in instance', results);\n            if (results.accounts.length) {\n              currentID = results.accounts[0].id;\n              setCurrentInfo(results.accounts[0]);\n            }\n          } catch (e) {\n            console.error(e);\n          }\n        }\n\n        if (!currentID) return;\n\n        if (currentAccount === currentID) {\n          // It's myself!\n          setIsSelf(true);\n          return;\n        }\n\n        accountID.current = currentID;\n\n        if (moved) return;\n\n        setRelationshipUIState('loading');\n\n        const fetchRelationships = currentMasto.v1.accounts.relationships.fetch(\n          {\n            id: [currentID],\n          },\n        );\n\n        try {\n          const relationships = await fetchRelationships;\n          console.log('fetched relationship', relationships);\n          setRelationshipUIState('default');\n\n          if (relationships.length) {\n            const relationship = relationships[0];\n            setRelationship(relationship);\n            onRelationshipChange({ relationship, currentID });\n          }\n        } catch (e) {\n          console.error(e);\n          setRelationshipUIState('error');\n        }\n      })();\n    }\n  }, [info, authenticated]);\n\n  useEffect(() => {\n    if (info && isSelf) {\n      updateAccount(info);\n    }\n  }, [info, isSelf]);\n\n  const loading = relationshipUIState === 'loading';\n  const menuInstanceRef = useRef(null);\n\n  const [showTranslatedBio, setShowTranslatedBio] = useState(false);\n  const [showAddRemoveLists, setShowAddRemoveLists] = useState(false);\n\n  return (\n    <>\n      <div class=\"actions\">\n        <span>\n          {followedBy ? (\n            <span class=\"tag\">Following you</span>\n          ) : !!lastStatusAt ? (\n            <small class=\"insignificant\">\n              Last post:{' '}\n              {niceDateTime(lastStatusAt, {\n                hideTime: true,\n              })}\n            </small>\n          ) : (\n            <span />\n          )}\n          {muting && <span class=\"tag danger\">Muted</span>}\n          {blocking && <span class=\"tag danger\">Blocked</span>}\n        </span>{' '}\n        <span class=\"buttons\">\n          <Menu\n            instanceRef={menuInstanceRef}\n            portal={{\n              target: document.body,\n            }}\n            containerProps={{\n              style: {\n                // Higher than the backdrop\n                zIndex: 1001,\n              },\n              onClick: (e) => {\n                if (e.target === e.currentTarget) {\n                  menuInstanceRef.current?.closeMenu?.();\n                }\n              },\n            }}\n            align=\"center\"\n            position=\"anchor\"\n            overflow=\"auto\"\n            boundingBoxPadding=\"8 8 8 8\"\n            menuButton={\n              <button\n                type=\"button\"\n                title=\"More\"\n                class=\"plain\"\n                disabled={loading}\n              >\n                <Icon icon=\"more\" size=\"l\" alt=\"More\" />\n              </button>\n            }\n          >\n            {currentAuthenticated && !isSelf && (\n              <>\n                <MenuItem\n                  onClick={() => {\n                    states.showCompose = {\n                      draftStatus: {\n                        status: `@${currentInfo?.acct || acct} `,\n                      },\n                    };\n                  }}\n                >\n                  <Icon icon=\"at\" />\n                  <span>Mention @{username}</span>\n                </MenuItem>\n                <MenuItem\n                  onClick={() => {\n                    setShowTranslatedBio(true);\n                  }}\n                >\n                  <Icon icon=\"translate\" />\n                  <span>Translate bio</span>\n                </MenuItem>\n                {/* Add/remove from lists is only possible if following the account */}\n                {following && (\n                  <MenuItem\n                    onClick={() => {\n                      setShowAddRemoveLists(true);\n                    }}\n                  >\n                    <Icon icon=\"list\" />\n                    <span>Add/remove from Lists</span>\n                  </MenuItem>\n                )}\n                <MenuDivider />\n              </>\n            )}\n            <MenuItem href={url} target=\"_blank\">\n              <Icon icon=\"external\" />\n              <small class=\"menu-double-lines\">{niceAccountURL(url)}</small>\n            </MenuItem>\n            <div class=\"menu-horizontal\">\n              <MenuItem\n                onClick={() => {\n                  // Copy url to clipboard\n                  try {\n                    navigator.clipboard.writeText(url);\n                    showToast('Link copied');\n                  } catch (e) {\n                    console.error(e);\n                    showToast('Unable to copy link');\n                  }\n                }}\n              >\n                <Icon icon=\"link\" />\n                <span>Copy</span>\n              </MenuItem>\n              {navigator?.share &&\n                navigator?.canShare?.({\n                  url,\n                }) && (\n                  <MenuItem\n                    onClick={() => {\n                      try {\n                        navigator.share({\n                          url,\n                        });\n                      } catch (e) {\n                        console.error(e);\n                        alert(\"Sharing doesn't seem to work.\");\n                      }\n                    }}\n                  >\n                    <Icon icon=\"share\" />\n                    <span>Share…</span>\n                  </MenuItem>\n                )}\n            </div>\n            {!!relationship && (\n              <>\n                <MenuDivider />\n                {muting ? (\n                  <MenuItem\n                    onClick={() => {\n                      setRelationshipUIState('loading');\n                      (async () => {\n                        try {\n                          const newRelationship = await currentMasto.v1.accounts\n                            .$select(currentInfo?.id || id)\n                            .unmute();\n                          console.log('unmuting', newRelationship);\n                          setRelationship(newRelationship);\n                          setRelationshipUIState('default');\n                          showToast(`Unmuted @${username}`);\n                          states.reloadGenericAccounts.id = 'mute';\n                          states.reloadGenericAccounts.counter++;\n                        } catch (e) {\n                          console.error(e);\n                          setRelationshipUIState('error');\n                        }\n                      })();\n                    }}\n                  >\n                    <Icon icon=\"unmute\" />\n                    <span>Unmute @{username}</span>\n                  </MenuItem>\n                ) : (\n                  <SubMenu\n                    openTrigger=\"clickOnly\"\n                    direction=\"bottom\"\n                    overflow=\"auto\"\n                    shift={16}\n                    label={\n                      <>\n                        <Icon icon=\"mute\" />\n                        <span class=\"menu-grow\">Mute @{username}…</span>\n                        <span\n                          style={{\n                            textOverflow: 'clip',\n                          }}\n                        >\n                          <Icon icon=\"time\" />\n                          <Icon icon=\"chevron-right\" />\n                        </span>\n                      </>\n                    }\n                  >\n                    <div class=\"menu-wrap\">\n                      {MUTE_DURATIONS.map((duration) => (\n                        <MenuItem\n                          onClick={() => {\n                            setRelationshipUIState('loading');\n                            (async () => {\n                              try {\n                                const newRelationship =\n                                  await currentMasto.v1.accounts\n                                    .$select(currentInfo?.id || id)\n                                    .mute({\n                                      duration,\n                                    });\n                                console.log('muting', newRelationship);\n                                setRelationship(newRelationship);\n                                setRelationshipUIState('default');\n                                showToast(\n                                  `Muted @${username} for ${MUTE_DURATIONS_LABELS[duration]}`,\n                                );\n                                states.reloadGenericAccounts.id = 'mute';\n                                states.reloadGenericAccounts.counter++;\n                              } catch (e) {\n                                console.error(e);\n                                setRelationshipUIState('error');\n                                showToast(`Unable to mute @${username}`);\n                              }\n                            })();\n                          }}\n                        >\n                          {MUTE_DURATIONS_LABELS[duration]}\n                        </MenuItem>\n                      ))}\n                    </div>\n                  </SubMenu>\n                )}\n                <MenuConfirm\n                  subMenu\n                  confirm={!blocking}\n                  confirmLabel={\n                    <>\n                      <Icon icon=\"block\" />\n                      <span>Block @{username}?</span>\n                    </>\n                  }\n                  menuItemClassName=\"danger\"\n                  onClick={() => {\n                    // if (!blocking && !confirm(`Block @${username}?`)) {\n                    //   return;\n                    // }\n                    setRelationshipUIState('loading');\n                    (async () => {\n                      try {\n                        if (blocking) {\n                          const newRelationship = await currentMasto.v1.accounts\n                            .$select(currentInfo?.id || id)\n                            .unblock();\n                          console.log('unblocking', newRelationship);\n                          setRelationship(newRelationship);\n                          setRelationshipUIState('default');\n                          showToast(`Unblocked @${username}`);\n                        } else {\n                          const newRelationship = await currentMasto.v1.accounts\n                            .$select(currentInfo?.id || id)\n                            .block();\n                          console.log('blocking', newRelationship);\n                          setRelationship(newRelationship);\n                          setRelationshipUIState('default');\n                          showToast(`Blocked @${username}`);\n                        }\n                        states.reloadGenericAccounts.id = 'block';\n                        states.reloadGenericAccounts.counter++;\n                      } catch (e) {\n                        console.error(e);\n                        setRelationshipUIState('error');\n                        if (blocking) {\n                          showToast(`Unable to unblock @${username}`);\n                        } else {\n                          showToast(`Unable to block @${username}`);\n                        }\n                      }\n                    })();\n                  }}\n                >\n                  {blocking ? (\n                    <>\n                      <Icon icon=\"unblock\" />\n                      <span>Unblock @{username}</span>\n                    </>\n                  ) : (\n                    <>\n                      <Icon icon=\"block\" />\n                      <span>Block @{username}…</span>\n                    </>\n                  )}\n                </MenuConfirm>\n                {/* <MenuItem>\n                <Icon icon=\"flag\" />\n                <span>Report @{username}…</span>\n              </MenuItem> */}\n              </>\n            )}\n          </Menu>\n          {!relationship && relationshipUIState === 'loading' && (\n            <Loader abrupt />\n          )}\n          {!!relationship && (\n            <MenuConfirm\n              confirm={following || requested}\n              confirmLabel={\n                <span>\n                  {requested\n                    ? 'Withdraw follow request?'\n                    : `Unfollow @${info.acct || info.username}?`}\n                </span>\n              }\n              menuItemClassName=\"danger\"\n              align=\"end\"\n              disabled={loading}\n              onClick={() => {\n                setRelationshipUIState('loading');\n                (async () => {\n                  try {\n                    let newRelationship;\n\n                    if (following || requested) {\n                      // const yes = confirm(\n                      //   requested\n                      //     ? 'Withdraw follow request?'\n                      //     : `Unfollow @${info.acct || info.username}?`,\n                      // );\n\n                      // if (yes) {\n                      newRelationship = await currentMasto.v1.accounts\n                        .$select(accountID.current)\n                        .unfollow();\n                      // }\n                    } else {\n                      newRelationship = await currentMasto.v1.accounts\n                        .$select(accountID.current)\n                        .follow();\n                    }\n\n                    if (newRelationship) setRelationship(newRelationship);\n                    setRelationshipUIState('default');\n                  } catch (e) {\n                    alert(e);\n                    setRelationshipUIState('error');\n                  }\n                })();\n              }}\n            >\n              <button\n                type=\"button\"\n                class={`${following || requested ? 'light swap' : ''}`}\n                data-swap-state={following || requested ? 'danger' : ''}\n                disabled={loading}\n              >\n                {following ? (\n                  <>\n                    <span>Following</span>\n                    <span>Unfollow…</span>\n                  </>\n                ) : requested ? (\n                  <>\n                    <span>Requested</span>\n                    <span>Withdraw…</span>\n                  </>\n                ) : locked ? (\n                  <>\n                    <Icon icon=\"lock\" /> <span>Follow</span>\n                  </>\n                ) : (\n                  'Follow'\n                )}\n              </button>\n            </MenuConfirm>\n          )}\n        </span>\n      </div>\n      {!!showTranslatedBio && (\n        <Modal\n          class=\"light\"\n          onClose={() => {\n            setShowTranslatedBio(false);\n          }}\n        >\n          <TranslatedBioSheet\n            note={note}\n            fields={fields}\n            onClose={() => setShowTranslatedBio(false)}\n          />\n        </Modal>\n      )}\n      {!!showAddRemoveLists && (\n        <Modal\n          class=\"light\"\n          onClose={() => {\n            setShowAddRemoveLists(false);\n          }}\n        >\n          <AddRemoveListsSheet\n            accountID={accountID.current}\n            onClose={() => setShowAddRemoveLists(false)}\n          />\n        </Modal>\n      )}\n    </>\n  );\n}\n\n// Apply more alpha if high luminence\nfunction lightenRGB([r, g, b]) {\n  const luminence = 0.2126 * r + 0.7152 * g + 0.0722 * b;\n  console.log('luminence', luminence);\n  let alpha;\n  if (luminence >= 220) {\n    alpha = 1;\n  } else if (luminence <= 50) {\n    alpha = 0.1;\n  } else {\n    alpha = luminence / 255;\n  }\n  alpha = Math.min(1, alpha);\n  return [r, g, b, alpha];\n}\n\nfunction niceAccountURL(url) {\n  if (!url) return;\n  const urlObj = new URL(url);\n  const { host, pathname } = urlObj;\n  const path = pathname.replace(/\\/$/, '').replace(/^\\//, '');\n  return (\n    <>\n      <span class=\"more-insignificant\">{host}/</span>\n      <wbr />\n      <span>{path}</span>\n    </>\n  );\n}\n\nfunction TranslatedBioSheet({ note, fields, onClose }) {\n  const fieldsText =\n    fields\n      ?.map(({ name, value }) => `${name}\\n${getHTMLText(value)}`)\n      .join('\\n\\n') || '';\n\n  const text = getHTMLText(note) + (fieldsText ? `\\n\\n${fieldsText}` : '');\n\n  return (\n    <div class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Translated Bio</h2>\n      </header>\n      <main>\n        <p\n          style={{\n            whiteSpace: 'pre-wrap',\n          }}\n        >\n          {text}\n        </p>\n        <TranslationBlock forceTranslate text={text} />\n      </main>\n    </div>\n  );\n}\n\nfunction AddRemoveListsSheet({ accountID, onClose }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [lists, setLists] = useState([]);\n  const [listsContainingAccount, setListsContainingAccount] = useState([]);\n  const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const lists = await masto.v1.lists.list();\n        const listsContainingAccount = await masto.v1.accounts\n          .$select(accountID)\n          .lists.list();\n        console.log({ lists, listsContainingAccount });\n        setLists(lists);\n        setListsContainingAccount(listsContainingAccount);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, [reloadCount]);\n\n  const [showListAddEditModal, setShowListAddEditModal] = useState(false);\n\n  return (\n    <div class=\"sheet\" id=\"list-add-remove-container\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Add/Remove from Lists</h2>\n      </header>\n      <main>\n        {lists.length > 0 ? (\n          <ul class=\"list-add-remove\">\n            {lists.map((list) => {\n              const inList = listsContainingAccount.some(\n                (l) => l.id === list.id,\n              );\n              return (\n                <li>\n                  <button\n                    type=\"button\"\n                    class={`light ${inList ? 'checked' : ''}`}\n                    disabled={uiState === 'loading'}\n                    onClick={() => {\n                      setUIState('loading');\n                      (async () => {\n                        try {\n                          if (inList) {\n                            await masto.v1.lists\n                              .$select(list.id)\n                              .accounts.remove({\n                                accountIds: [accountID],\n                              });\n                          } else {\n                            await masto.v1.lists\n                              .$select(list.id)\n                              .accounts.create({\n                                accountIds: [accountID],\n                              });\n                          }\n                          // setUIState('default');\n                          reload();\n                        } catch (e) {\n                          console.error(e);\n                          setUIState('error');\n                          alert(\n                            inList\n                              ? 'Unable to remove from list.'\n                              : 'Unable to add to list.',\n                          );\n                        }\n                      })();\n                    }}\n                  >\n                    <Icon icon=\"check-circle\" />\n                    <span>{list.title}</span>\n                  </button>\n                </li>\n              );\n            })}\n          </ul>\n        ) : uiState === 'loading' ? (\n          <p class=\"ui-state\">\n            <Loader abrupt />\n          </p>\n        ) : uiState === 'error' ? (\n          <p class=\"ui-state\">Unable to load lists.</p>\n        ) : (\n          <p class=\"ui-state\">No lists.</p>\n        )}\n        <button\n          type=\"button\"\n          class=\"plain2\"\n          onClick={() => setShowListAddEditModal(true)}\n          disabled={uiState !== 'default'}\n        >\n          <Icon icon=\"plus\" size=\"l\" /> <span>New list</span>\n        </button>\n      </main>\n      {showListAddEditModal && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowListAddEditModal(false);\n            }\n          }}\n        >\n          <ListAddEdit\n            list={showListAddEditModal?.list}\n            onClose={(result) => {\n              if (result.state === 'success') {\n                reload();\n              }\n              setShowListAddEditModal(false);\n            }}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nexport default AccountInfo;\n","import { useEffect } from 'preact/hooks';\n\nimport { api } from '../utils/api';\nimport states from '../utils/states';\n\nimport AccountInfo from './account-info';\nimport Icon from './icon';\n\nfunction AccountSheet({ account, instance: propInstance, onClose }) {\n  const { masto, instance, authenticated } = api({ instance: propInstance });\n  const isString = typeof account === 'string';\n\n  useEffect(() => {\n    if (!isString) {\n      states.accounts[`${account.id}@${instance}`] = account;\n    }\n  }, [account]);\n\n  return (\n    <div\n      class=\"sheet\"\n      onClick={(e) => {\n        const accountBlock = e.target.closest('.account-block');\n        if (accountBlock) {\n          onClose({\n            destination: 'account-statuses',\n          });\n        }\n      }}\n    >\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close outer\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <AccountInfo\n        instance={instance}\n        authenticated={authenticated}\n        account={account}\n        fetchAccount={async () => {\n          if (isString) {\n            try {\n              const info = await masto.v1.accounts.lookup({\n                acct: account,\n                skip_webfinger: false,\n              });\n              return info;\n            } catch (e) {\n              const result = await masto.v2.search.fetch({\n                q: account,\n                type: 'accounts',\n                limit: 1,\n                resolve: authenticated,\n              });\n              if (result.accounts.length) {\n                return result.accounts[0];\n              } else if (/https?:\\/\\/[^/]+\\/@/.test(account)) {\n                const accountURL = new URL(account);\n                const acct = accountURL.pathname.replace(/^\\//, '');\n                const result = await masto.v2.search.fetch({\n                  q: acct,\n                  type: 'accounts',\n                  limit: 1,\n                  resolve: authenticated,\n                });\n                if (result.accounts.length) {\n                  return result.accounts[0];\n                }\n              }\n            }\n          } else {\n            return account;\n          }\n        }}\n      />\n    </div>\n  );\n}\n\nexport default AccountSheet;\n","import './drafts.css';\n\nimport { useEffect, useMemo, useReducer, useState } from 'react';\n\nimport { api } from '../utils/api';\nimport db from '../utils/db';\nimport niceDateTime from '../utils/nice-date-time';\nimport states from '../utils/states';\nimport { getCurrentAccountNS } from '../utils/store-utils';\n\nimport Icon from './icon';\nimport Loader from './loader';\nimport MenuConfirm from './menu-confirm';\n\nfunction Drafts({ onClose }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [drafts, setDrafts] = useState([]);\n  const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const keys = await db.drafts.keys();\n        if (keys.length) {\n          const ns = getCurrentAccountNS();\n          const ownKeys = keys.filter((key) => key.startsWith(ns));\n          if (ownKeys.length) {\n            const drafts = await db.drafts.getMany(ownKeys);\n            drafts.sort(\n              (a, b) =>\n                new Date(b.updatedAt).getTime() -\n                new Date(a.updatedAt).getTime(),\n            );\n            setDrafts(drafts);\n          } else {\n            setDrafts([]);\n          }\n        } else {\n          setDrafts([]);\n        }\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, [reloadCount]);\n\n  const hasDrafts = drafts?.length > 0;\n\n  return (\n    <div class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>\n          Unsent drafts <Loader abrupt hidden={uiState !== 'loading'} />\n        </h2>\n        {hasDrafts && (\n          <div class=\"insignificant\">\n            Looks like you have unsent drafts. Let's continue where you left\n            off.\n          </div>\n        )}\n      </header>\n      <main>\n        {hasDrafts ? (\n          <>\n            <ul class=\"drafts-list\">\n              {drafts.map((draft) => {\n                const { updatedAt, key, draftStatus, replyTo } = draft;\n                const updatedAtDate = new Date(updatedAt);\n                return (\n                  <li key={updatedAt}>\n                    <div class=\"mini-draft-meta\">\n                      <b>\n                        <Icon icon={replyTo ? 'reply' : 'quill'} size=\"s\" />{' '}\n                        <time>\n                          {!!replyTo && (\n                            <>\n                              @{replyTo.account.acct}\n                              <br />\n                            </>\n                          )}\n                          {niceDateTime(updatedAtDate)}\n                        </time>\n                      </b>\n                      <MenuConfirm\n                        confirmLabel={<span>Delete this draft?</span>}\n                        menuItemClassName=\"danger\"\n                        align=\"end\"\n                        disabled={uiState === 'loading'}\n                        onClick={() => {\n                          (async () => {\n                            try {\n                              // const yes = confirm('Delete this draft?');\n                              // if (yes) {\n                              await db.drafts.del(key);\n                              reload();\n                              // }\n                            } catch (e) {\n                              alert('Error deleting draft! Please try again.');\n                            }\n                          })();\n                        }}\n                      >\n                        <button\n                          type=\"button\"\n                          class=\"small light\"\n                          disabled={uiState === 'loading'}\n                        >\n                          Delete&hellip;\n                        </button>\n                      </MenuConfirm>\n                    </div>\n                    <button\n                      type=\"button\"\n                      disabled={uiState === 'loading'}\n                      class=\"draft-item\"\n                      onClick={async () => {\n                        // console.log({ draftStatus });\n                        let replyToStatus;\n                        if (replyTo) {\n                          setUIState('loading');\n                          try {\n                            replyToStatus = await masto.v1.statuses\n                              .$select(replyTo.id)\n                              .fetch();\n                          } catch (e) {\n                            console.error(e);\n                            alert('Error fetching reply-to status!');\n                            setUIState('default');\n                            return;\n                          }\n                          setUIState('default');\n                        }\n                        window.__COMPOSE__ = {\n                          draftStatus,\n                          replyToStatus,\n                        };\n                        states.showCompose = true;\n                        states.showDrafts = false;\n                      }}\n                    >\n                      <MiniDraft draft={draft} />\n                    </button>\n                  </li>\n                );\n              })}\n            </ul>\n            {drafts.length > 1 && (\n              <p>\n                <MenuConfirm\n                  confirmLabel={<span>Delete all drafts?</span>}\n                  menuItemClassName=\"danger\"\n                  disabled={uiState === 'loading'}\n                  onClick={() => {\n                    (async () => {\n                      // const yes = confirm('Delete all drafts?');\n                      // if (yes) {\n                      setUIState('loading');\n                      try {\n                        await db.drafts.delMany(\n                          drafts.map((draft) => draft.key),\n                        );\n                        setUIState('default');\n                        reload();\n                      } catch (e) {\n                        console.error(e);\n                        alert('Error deleting drafts! Please try again.');\n                        setUIState('error');\n                      }\n                      // }\n                    })();\n                  }}\n                >\n                  <button\n                    type=\"button\"\n                    class=\"light danger\"\n                    disabled={uiState === 'loading'}\n                  >\n                    Delete all&hellip;\n                  </button>\n                </MenuConfirm>\n              </p>\n            )}\n          </>\n        ) : (\n          <p>No drafts found.</p>\n        )}\n      </main>\n    </div>\n  );\n}\n\nfunction MiniDraft({ draft }) {\n  const { draftStatus, replyTo } = draft;\n  const { status, spoilerText, poll, mediaAttachments } = draftStatus;\n  const hasPoll = poll?.options?.length > 0;\n  const hasMedia = mediaAttachments?.length > 0;\n  const hasPollOrMedia = hasPoll || hasMedia;\n  const firstImageMedia = useMemo(() => {\n    if (!hasMedia) return;\n    const image = mediaAttachments.find((media) => /image/.test(media.type));\n    if (!image) return;\n    const { file } = image;\n    const objectURL = URL.createObjectURL(file);\n    return objectURL;\n  }, [hasMedia, mediaAttachments]);\n  return (\n    <>\n      <div class=\"mini-draft\">\n        {hasPollOrMedia && (\n          <div\n            class={`mini-draft-aside ${firstImageMedia ? 'has-image' : ''}`}\n            style={\n              firstImageMedia\n                ? {\n                    '--bg-image': `url(${firstImageMedia})`,\n                  }\n                : {}\n            }\n          >\n            {hasPoll && <Icon icon=\"poll\" />}\n            {hasMedia && (\n              <span>\n                <Icon icon=\"attachment\" />{' '}\n                <small>{mediaAttachments?.length}</small>\n              </span>\n            )}\n          </div>\n        )}\n        <div class=\"mini-draft-main\">\n          {!!spoilerText && <div class=\"mini-draft-spoiler\">{spoilerText}</div>}\n          {!!status && <div class=\"mini-draft-status\">{status}</div>}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Drafts;\n","import './generic-accounts.css';\n\nimport { useEffect, useState } from 'preact/hooks';\nimport { InView } from 'react-intersection-observer';\nimport { useSnapshot } from 'valtio';\n\nimport states from '../utils/states';\n\nimport AccountBlock from './account-block';\nimport Icon from './icon';\nimport Loader from './loader';\n\nexport default function GenericAccounts({ onClose = () => {} }) {\n  const snapStates = useSnapshot(states);\n  const [uiState, setUIState] = useState('default');\n  const [accounts, setAccounts] = useState([]);\n  const [showMore, setShowMore] = useState(false);\n\n  if (!snapStates.showGenericAccounts) {\n    return null;\n  }\n\n  const {\n    id,\n    heading,\n    fetchAccounts,\n    accounts: staticAccounts,\n    showReactions,\n  } = snapStates.showGenericAccounts;\n\n  const loadAccounts = (firstLoad) => {\n    if (!fetchAccounts) return;\n    if (firstLoad) setAccounts([]);\n    setUIState('loading');\n    (async () => {\n      try {\n        const { done, value } = await fetchAccounts(firstLoad);\n        if (Array.isArray(value)) {\n          if (firstLoad) {\n            setAccounts(value);\n          } else {\n            setAccounts((prev) => [...prev, ...value]);\n          }\n          setShowMore(!done);\n        } else {\n          setShowMore(false);\n        }\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  };\n\n  useEffect(() => {\n    if (staticAccounts?.length > 0) {\n      setAccounts(staticAccounts);\n    } else {\n      loadAccounts(true);\n    }\n  }, [staticAccounts, fetchAccounts]);\n\n  useEffect(() => {\n    // reloadGenericAccounts contains value like {id: 'mute', counter: 1}\n    // We only need to reload if the id matches\n    if (snapStates.reloadGenericAccounts?.id === id) {\n      loadAccounts(true);\n    }\n  }, [snapStates.reloadGenericAccounts.counter]);\n\n  return (\n    <div id=\"generic-accounts-container\" class=\"sheet\" tabindex=\"-1\">\n      <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n        <Icon icon=\"x\" />\n      </button>\n      <header>\n        <h2>{heading || 'Accounts'}</h2>\n      </header>\n      <main>\n        {accounts.length > 0 ? (\n          <>\n            <ul class=\"accounts-list\">\n              {accounts.map((account) => (\n                <li key={account.id + (account._types || '')}>\n                  {showReactions && account._types?.length > 0 && (\n                    <div class=\"reactions-block\">\n                      {account._types.map((type) => (\n                        <Icon\n                          icon={\n                            {\n                              reblog: 'rocket',\n                              favourite: 'heart',\n                            }[type]\n                          }\n                          class={`${type}-icon`}\n                        />\n                      ))}\n                    </div>\n                  )}\n                  <AccountBlock account={account} />\n                </li>\n              ))}\n            </ul>\n            {uiState === 'default' ? (\n              showMore ? (\n                <InView\n                  onChange={(inView) => {\n                    if (inView) {\n                      loadAccounts();\n                    }\n                  }}\n                >\n                  <button\n                    type=\"button\"\n                    class=\"plain block\"\n                    onClick={() => loadAccounts()}\n                  >\n                    Show more&hellip;\n                  </button>\n                </InView>\n              ) : (\n                <p class=\"ui-state insignificant\">The end.</p>\n              )\n            ) : (\n              uiState === 'loading' && (\n                <p class=\"ui-state\">\n                  <Loader abrupt />\n                </p>\n              )\n            )}\n          </>\n        ) : uiState === 'loading' ? (\n          <p class=\"ui-state\">\n            <Loader abrupt />\n          </p>\n        ) : uiState === 'error' ? (\n          <p class=\"ui-state\">Error loading accounts</p>\n        ) : (\n          <p class=\"ui-state insignificant\">Nothing to show</p>\n        )}\n      </main>\n    </div>\n  );\n}\n","import { Menu, MenuItem } from '@szhsin/react-menu';\nimport { useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport getTranslateTargetLanguage from '../utils/get-translate-target-language';\nimport localeMatch from '../utils/locale-match';\nimport states from '../utils/states';\n\nimport Icon from './icon';\nimport TranslationBlock from './translation-block';\n\nexport default function MediaAltModal({ alt, lang, onClose }) {\n  const snapStates = useSnapshot(states);\n  const [forceTranslate, setForceTranslate] = useState(false);\n  const targetLanguage = getTranslateTargetLanguage(true);\n  const contentTranslationHideLanguages =\n    snapStates.settings.contentTranslationHideLanguages || [];\n  const differentLanguage =\n    !!lang &&\n    lang !== targetLanguage &&\n    !localeMatch([lang], [targetLanguage]) &&\n    !contentTranslationHideLanguages.find(\n      (l) => lang === l || localeMatch([lang], [l]),\n    );\n\n  return (\n    <div class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close outer\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header class=\"header-grid\">\n        <h2>Media description</h2>\n        <div class=\"header-side\">\n          <Menu\n            align=\"end\"\n            menuButton={\n              <button type=\"button\" class=\"plain4\">\n                <Icon icon=\"more\" alt=\"More\" size=\"xl\" />\n              </button>\n            }\n          >\n            <MenuItem\n              disabled={forceTranslate}\n              onClick={() => {\n                setForceTranslate(true);\n              }}\n            >\n              <Icon icon=\"translate\" />\n              <span>Translate</span>\n            </MenuItem>\n          </Menu>\n        </div>\n      </header>\n      <main lang={lang} dir=\"auto\">\n        <p\n          style={{\n            whiteSpace: 'pre-wrap',\n          }}\n        >\n          {alt}\n        </p>\n        {(differentLanguage || forceTranslate) && (\n          <TranslationBlock\n            forceTranslate={forceTranslate}\n            sourceLanguage={lang}\n            text={alt}\n          />\n        )}\n      </main>\n    </div>\n  );\n}\n","import { Menu } from '@szhsin/react-menu';\nimport { getBlurHashAverageColor } from 'fast-blurhash';\nimport { useEffect, useLayoutEffect, useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\n\nimport Icon from './icon';\nimport Link from './link';\nimport Media from './media';\nimport MediaAltModal from './media-alt-modal';\nimport MenuLink from './menu-link';\nimport Modal from './modal';\n\nfunction MediaModal({\n  mediaAttachments,\n  statusID,\n  instance,\n  lang,\n  index = 0,\n  onClose = () => {},\n}) {\n  const carouselRef = useRef(null);\n\n  const [currentIndex, setCurrentIndex] = useState(index);\n  const carouselFocusItem = useRef(null);\n  useLayoutEffect(() => {\n    carouselFocusItem.current?.scrollIntoView();\n\n    // history.pushState({ mediaModal: true }, '');\n    // const handlePopState = (e) => {\n    //   if (e.state?.mediaModal) {\n    //     onClose();\n    //   }\n    // };\n    // window.addEventListener('popstate', handlePopState);\n    // return () => {\n    //   window.removeEventListener('popstate', handlePopState);\n    // };\n  }, []);\n  const prevStatusID = useRef(statusID);\n  useEffect(() => {\n    const scrollLeft = index * carouselRef.current.clientWidth;\n    const differentStatusID = prevStatusID.current !== statusID;\n    if (differentStatusID) prevStatusID.current = statusID;\n    carouselRef.current.scrollTo({\n      left: scrollLeft,\n      behavior: differentStatusID ? 'auto' : 'smooth',\n    });\n    carouselRef.current.focus();\n  }, [index, statusID]);\n\n  const [showControls, setShowControls] = useState(true);\n\n  useEffect(() => {\n    let handleSwipe = () => {\n      onClose();\n    };\n    if (carouselRef.current) {\n      carouselRef.current.addEventListener('swiped-down', handleSwipe);\n    }\n    return () => {\n      if (carouselRef.current) {\n        carouselRef.current.removeEventListener('swiped-down', handleSwipe);\n      }\n    };\n  }, []);\n\n  useHotkeys('esc', onClose, [onClose]);\n\n  const [showMediaAlt, setShowMediaAlt] = useState(false);\n\n  useEffect(() => {\n    let handleScroll = () => {\n      const { clientWidth, scrollLeft } = carouselRef.current;\n      const index = Math.round(scrollLeft / clientWidth);\n      setCurrentIndex(index);\n    };\n    if (carouselRef.current) {\n      carouselRef.current.addEventListener('scroll', handleScroll, {\n        passive: true,\n      });\n    }\n    return () => {\n      if (carouselRef.current) {\n        carouselRef.current.removeEventListener('scroll', handleScroll);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    let timer = setTimeout(() => {\n      carouselRef.current?.focus?.();\n    }, 100);\n    return () => clearTimeout(timer);\n  }, []);\n\n  return (\n    <div class=\"media-modal-container\">\n      <div\n        ref={carouselRef}\n        tabIndex=\"0\"\n        data-swipe-threshold=\"44\"\n        class=\"carousel\"\n        onClick={(e) => {\n          if (\n            e.target.classList.contains('carousel-item') ||\n            e.target.classList.contains('media') ||\n            e.target.classList.contains('media-zoom')\n          ) {\n            onClose();\n          }\n        }}\n      >\n        {mediaAttachments?.map((media, i) => {\n          const { blurhash } = media;\n          const rgbAverageColor = blurhash\n            ? getBlurHashAverageColor(blurhash)\n            : null;\n          return (\n            <div\n              class=\"carousel-item\"\n              style={{\n                '--average-color': `rgb(${rgbAverageColor?.join(',')})`,\n                '--average-color-alpha': `rgba(${rgbAverageColor?.join(\n                  ',',\n                )}, .5)`,\n              }}\n              tabindex=\"0\"\n              key={media.id}\n              ref={i === currentIndex ? carouselFocusItem : null}\n              onClick={(e) => {\n                if (e.target !== e.currentTarget) {\n                  setShowControls(!showControls);\n                }\n              }}\n            >\n              {!!media.description && (\n                <button\n                  type=\"button\"\n                  class=\"media-alt\"\n                  hidden={!showControls}\n                  onClick={() => {\n                    setShowMediaAlt({\n                      alt: media.description,\n                      lang,\n                    });\n                  }}\n                >\n                  <span class=\"alt-badge\">ALT</span>\n                  <span class=\"media-alt-desc\" lang={lang} dir=\"auto\">\n                    {media.description}\n                  </span>\n                </button>\n              )}\n              <Media media={media} showOriginal lang={lang} />\n            </div>\n          );\n        })}\n      </div>\n      <div class=\"carousel-top-controls\" hidden={!showControls}>\n        <span>\n          <button\n            type=\"button\"\n            class=\"carousel-button\"\n            onClick={() => onClose()}\n          >\n            <Icon icon=\"x\" />\n          </button>\n        </span>\n        {mediaAttachments?.length > 1 ? (\n          <span class=\"carousel-dots\">\n            {mediaAttachments?.map((media, i) => (\n              <button\n                key={media.id}\n                type=\"button\"\n                disabled={i === currentIndex}\n                class={`carousel-dot ${i === currentIndex ? 'active' : ''}`}\n                onClick={(e) => {\n                  e.preventDefault();\n                  e.stopPropagation();\n                  carouselRef.current.scrollTo({\n                    left: carouselRef.current.clientWidth * i,\n                    behavior: 'smooth',\n                  });\n                  carouselRef.current.focus();\n                }}\n              >\n                <Icon icon=\"round\" size=\"s\" />\n              </button>\n            ))}\n          </span>\n        ) : (\n          <span />\n        )}\n        <span>\n          <Menu\n            overflow=\"auto\"\n            align=\"end\"\n            position=\"anchor\"\n            boundingBoxPadding=\"8 8 8 8\"\n            gap={4}\n            menuClassName=\"glass-menu\"\n            menuButton={\n              <button type=\"button\" class=\"carousel-button\">\n                <Icon icon=\"more\" alt=\"More\" />\n              </button>\n            }\n          >\n            <MenuLink\n              href={\n                mediaAttachments[currentIndex]?.remoteUrl ||\n                mediaAttachments[currentIndex]?.url\n              }\n              class=\"carousel-button\"\n              target=\"_blank\"\n              title=\"Open original media in new window\"\n            >\n              <Icon icon=\"popout\" />\n              <span>Open original media</span>\n            </MenuLink>\n          </Menu>{' '}\n          <Link\n            to={`${instance ? `/${instance}` : ''}/s/${statusID}${\n              window.matchMedia('(min-width: calc(40em + 350px))').matches\n                ? `?media=${currentIndex + 1}`\n                : ''\n            }`}\n            class=\"button carousel-button media-post-link\"\n            // onClick={() => {\n            //   // if small screen (not media query min-width 40em + 350px), run onClose\n            //   if (\n            //     !window.matchMedia('(min-width: calc(40em + 350px))').matches\n            //   ) {\n            //     onClose();\n            //   }\n            // }}\n          >\n            <span class=\"button-label\">See post </span>&raquo;\n          </Link>\n        </span>\n      </div>\n      {mediaAttachments?.length > 1 && (\n        <div class=\"carousel-controls\" hidden={!showControls}>\n          <button\n            type=\"button\"\n            class=\"carousel-button\"\n            hidden={currentIndex === 0}\n            onClick={(e) => {\n              e.preventDefault();\n              e.stopPropagation();\n              carouselRef.current.focus();\n              carouselRef.current.scrollTo({\n                left: carouselRef.current.clientWidth * (currentIndex - 1),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"arrow-left\" />\n          </button>\n          <button\n            type=\"button\"\n            class=\"carousel-button\"\n            hidden={currentIndex === mediaAttachments.length - 1}\n            onClick={(e) => {\n              e.preventDefault();\n              e.stopPropagation();\n              carouselRef.current.focus();\n              carouselRef.current.scrollTo({\n                left: carouselRef.current.clientWidth * (currentIndex + 1),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"arrow-right\" />\n          </button>\n        </div>\n      )}\n      {!!showMediaAlt && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowMediaAlt(false);\n              carouselRef.current.focus();\n            }\n          }}\n        >\n          <MediaAltModal\n            alt={showMediaAlt.alt || showMediaAlt}\n            lang={showMediaAlt?.lang}\n            onClose={() => setShowMediaAlt(false)}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nexport default MediaModal;\n","export default \"__VITE_ASSET__bb9f04b2__\"","export default \"__VITE_ASSET__4fe390d9__\"","export default \"__VITE_ASSET__976e7e89__\"","import { useEffect, useState } from 'preact/hooks';\n\nfunction AsyncText({ children }) {\n  if (typeof children === 'string') return children;\n  const [text, setText] = useState('');\n  useEffect(() => {\n    Promise.resolve(children).then(setText);\n  }, [children]);\n  return text;\n}\n\nexport default AsyncText;\n","import './shortcuts-settings.css';\n\nimport {\n  compressToEncodedURIComponent,\n  decompressFromEncodedURIComponent,\n} from 'lz-string';\nimport mem from 'mem';\nimport { useEffect, useMemo, useRef, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport floatingButtonUrl from '../assets/floating-button.svg';\nimport multiColumnUrl from '../assets/multi-column.svg';\nimport tabMenuBarUrl from '../assets/tab-menu-bar.svg';\n\nimport { api } from '../utils/api';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\n\nimport AsyncText from './AsyncText';\nimport Icon from './icon';\nimport MenuConfirm from './menu-confirm';\nimport Modal from './modal';\n\nconst SHORTCUTS_LIMIT = 9;\n\nconst TYPES = [\n  'following',\n  'mentions',\n  'notifications',\n  'list',\n  'public',\n  'trending',\n  // NOTE: Hide for now\n  // 'search', // Search on Mastodon ain't great\n  // 'account-statuses', // Need @acct search first\n  'hashtag',\n  'bookmarks',\n  'favourites',\n];\nconst TYPE_TEXT = {\n  following: 'Home / Following',\n  notifications: 'Notifications',\n  list: 'List',\n  public: 'Public (Local / Federated)',\n  search: 'Search',\n  'account-statuses': 'Account',\n  bookmarks: 'Bookmarks',\n  favourites: 'Favourites',\n  hashtag: 'Hashtag',\n  trending: 'Trending',\n  mentions: 'Mentions',\n};\nconst TYPE_PARAMS = {\n  list: [\n    {\n      text: 'List ID',\n      name: 'id',\n    },\n  ],\n  public: [\n    {\n      text: 'Local only',\n      name: 'local',\n      type: 'checkbox',\n    },\n    {\n      text: 'Instance',\n      name: 'instance',\n      type: 'text',\n      placeholder: 'Optional, e.g. mastodon.social',\n      notRequired: true,\n    },\n  ],\n  trending: [\n    {\n      text: 'Instance',\n      name: 'instance',\n      type: 'text',\n      placeholder: 'Optional, e.g. mastodon.social',\n      notRequired: true,\n    },\n  ],\n  search: [\n    {\n      text: 'Search term',\n      name: 'query',\n      type: 'text',\n    },\n  ],\n  'account-statuses': [\n    {\n      text: '@',\n      name: 'id',\n      type: 'text',\n      placeholder: 'cheeaun@mastodon.social',\n    },\n  ],\n  hashtag: [\n    {\n      text: '#',\n      name: 'hashtag',\n      type: 'text',\n      placeholder: 'e.g. PixelArt (Max 5, space-separated)',\n      pattern: '[^#]+',\n    },\n    {\n      text: 'Instance',\n      name: 'instance',\n      type: 'text',\n      placeholder: 'Optional, e.g. mastodon.social',\n      notRequired: true,\n    },\n  ],\n};\nexport const SHORTCUTS_META = {\n  following: {\n    id: 'home',\n    title: (_, index) => (index === 0 ? 'Home' : 'Following'),\n    path: '/',\n    icon: 'home',\n  },\n  mentions: {\n    id: 'mentions',\n    title: 'Mentions',\n    path: '/mentions',\n    icon: 'at',\n  },\n  notifications: {\n    id: 'notifications',\n    title: 'Notifications',\n    path: '/notifications',\n    icon: 'notification',\n  },\n  list: {\n    id: 'list',\n    title: mem(\n      async ({ id }) => {\n        const list = await api().masto.v1.lists.$select(id).fetch();\n        return list.title;\n      },\n      {\n        cacheKey: ([{ id }]) => id,\n      },\n    ),\n    path: ({ id }) => `/l/${id}`,\n    icon: 'list',\n  },\n  public: {\n    id: 'public',\n    title: ({ local }) => (local ? 'Local' : 'Federated'),\n    subtitle: ({ instance }) => instance || api().instance,\n    path: ({ local, instance }) => `/${instance}/p${local ? '/l' : ''}`,\n    icon: ({ local }) => (local ? 'group' : 'earth'),\n  },\n  trending: {\n    id: 'trending',\n    title: 'Trending',\n    subtitle: ({ instance }) => instance || api().instance,\n    path: ({ instance }) => `/${instance}/trending`,\n    icon: 'chart',\n  },\n  search: {\n    id: 'search',\n    title: ({ query }) => query,\n    path: ({ query }) => `/search?q=${query}`,\n    icon: 'search',\n  },\n  'account-statuses': {\n    id: 'account-statuses',\n    title: mem(\n      async ({ id }) => {\n        const account = await api().masto.v1.accounts.$select(id).fetch();\n        return account.username || account.acct || account.displayName;\n      },\n      {\n        cacheKey: ([{ id }]) => id,\n      },\n    ),\n    path: ({ id }) => `/a/${id}`,\n    icon: 'user',\n  },\n  bookmarks: {\n    id: 'bookmarks',\n    title: 'Bookmarks',\n    path: '/b',\n    icon: 'bookmark',\n  },\n  favourites: {\n    id: 'favourites',\n    title: 'Favourites',\n    path: '/f',\n    icon: 'heart',\n  },\n  hashtag: {\n    id: 'hashtag',\n    title: ({ hashtag }) => hashtag,\n    subtitle: ({ instance }) => instance || api().instance,\n    path: ({ hashtag, instance }) =>\n      `${instance ? `/${instance}` : ''}/t/${hashtag.split(/\\s+/).join('+')}`,\n    icon: 'hashtag',\n  },\n};\n\nfunction ShortcutsSettings({ onClose }) {\n  const snapStates = useSnapshot(states);\n  const { masto } = api();\n  const { shortcuts } = snapStates;\n\n  const [lists, setLists] = useState([]);\n  const [followedHashtags, setFollowedHashtags] = useState([]);\n  const [showForm, setShowForm] = useState(false);\n  const [showImportExport, setShowImportExport] = useState(false);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const lists = await masto.v1.lists.list();\n        setLists(lists);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n\n    (async () => {\n      try {\n        const iterator = masto.v1.followedTags.list();\n        const tags = [];\n        do {\n          const { value, done } = await iterator.next();\n          if (done || value?.length === 0) break;\n          tags.push(...value);\n        } while (true);\n        setFollowedHashtags(tags);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, []);\n\n  return (\n    <div id=\"shortcuts-settings-container\" class=\"sheet\" tabindex=\"-1\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>\n          <Icon icon=\"shortcut\" /> Shortcuts{' '}\n          <sup\n            style={{\n              fontSize: 12,\n              opacity: 0.5,\n              textTransform: 'uppercase',\n            }}\n          >\n            beta\n          </sup>\n        </h2>\n      </header>\n      <main>\n        <p>\n          Specify a list of shortcuts that'll appear&nbsp;as:\n          <div class=\"shortcuts-view-mode\">\n            {[\n              {\n                value: 'float-button',\n                label: 'Floating button',\n                imgURL: floatingButtonUrl,\n              },\n              {\n                value: 'tab-menu-bar',\n                label: 'Tab/Menu bar',\n                imgURL: tabMenuBarUrl,\n              },\n              {\n                value: 'multi-column',\n                label: 'Multi-column',\n                imgURL: multiColumnUrl,\n              },\n            ].map(({ value, label, imgURL }) => (\n              <label>\n                <input\n                  type=\"radio\"\n                  name=\"shortcuts-view-mode\"\n                  value={value}\n                  checked={\n                    snapStates.settings.shortcutsViewMode === value ||\n                    (value === 'float-button' &&\n                      !snapStates.settings.shortcutsViewMode)\n                  }\n                  onChange={(e) => {\n                    states.settings.shortcutsViewMode = e.target.value;\n                  }}\n                />{' '}\n                <img src={imgURL} alt=\"\" width=\"80\" height=\"58\" />{' '}\n                <span>{label}</span>\n              </label>\n            ))}\n          </div>\n          {/* <select\n              value={snapStates.settings.shortcutsViewMode || 'float-button'}\n              onChange={(e) => {\n                states.settings.shortcutsViewMode = e.target.value;\n              }}\n            >\n              <option value=\"float-button\">Floating button</option>\n              <option value=\"multi-column\">Multi-column</option>\n              <option value=\"tab-menu-bar\">Tab/Menu bar </option>\n            </select> */}\n        </p>\n        {/* <p>\n          <details>\n            <summary class=\"insignificant\">\n              Experimental Multi-column mode\n            </summary>\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={snapStates.settings.shortcutsColumnsMode}\n                onChange={(e) => {\n                  states.settings.shortcutsColumnsMode = e.target.checked;\n                }}\n              />{' '}\n              Show shortcuts in multiple columns instead of the floating button.\n            </label>\n          </details>\n        </p> */}\n        {shortcuts.length > 0 ? (\n          <ol class=\"shortcuts-list\">\n            {shortcuts.filter(Boolean).map((shortcut, i) => {\n              const key = i + Object.values(shortcut);\n              const { type } = shortcut;\n              if (!SHORTCUTS_META[type]) return null;\n              let { icon, title, subtitle } = SHORTCUTS_META[type];\n              if (typeof title === 'function') {\n                title = title(shortcut, i);\n              }\n              if (typeof subtitle === 'function') {\n                subtitle = subtitle(shortcut, i);\n              }\n              if (typeof icon === 'function') {\n                icon = icon(shortcut, i);\n              }\n              return (\n                <li key={key}>\n                  <Icon icon={icon} />\n                  <span class=\"shortcut-text\">\n                    <AsyncText>{title}</AsyncText>\n                    {subtitle && (\n                      <>\n                        {' '}\n                        <small class=\"ib insignificant\">{subtitle}</small>\n                      </>\n                    )}\n                  </span>\n                  <span class=\"shortcut-actions\">\n                    <button\n                      type=\"button\"\n                      class=\"plain small\"\n                      disabled={i === 0}\n                      onClick={() => {\n                        const shortcutsArr = Array.from(states.shortcuts);\n                        if (i > 0) {\n                          const temp = states.shortcuts[i - 1];\n                          shortcutsArr[i - 1] = shortcut;\n                          shortcutsArr[i] = temp;\n                          states.shortcuts = shortcutsArr;\n                        }\n                      }}\n                    >\n                      <Icon icon=\"arrow-up\" alt=\"Move up\" />\n                    </button>\n                    <button\n                      type=\"button\"\n                      class=\"plain small\"\n                      disabled={i === shortcuts.length - 1}\n                      onClick={() => {\n                        const shortcutsArr = Array.from(states.shortcuts);\n                        if (i < states.shortcuts.length - 1) {\n                          const temp = states.shortcuts[i + 1];\n                          shortcutsArr[i + 1] = shortcut;\n                          shortcutsArr[i] = temp;\n                          states.shortcuts = shortcutsArr;\n                        }\n                      }}\n                    >\n                      <Icon icon=\"arrow-down\" alt=\"Move down\" />\n                    </button>\n                    <button\n                      type=\"button\"\n                      class=\"plain small\"\n                      onClick={() => {\n                        setShowForm({\n                          shortcut,\n                          shortcutIndex: i,\n                        });\n                      }}\n                    >\n                      <Icon icon=\"pencil\" alt=\"Edit\" />\n                    </button>\n                    {/* <button\n                      type=\"button\"\n                      class=\"plain small\"\n                      onClick={() => {\n                        states.shortcuts.splice(i, 1);\n                      }}\n                    >\n                      <Icon icon=\"x\" alt=\"Remove\" />\n                    </button> */}\n                  </span>\n                </li>\n              );\n            })}\n          </ol>\n        ) : (\n          <div class=\"ui-state insignificant\">\n            <p>No shortcuts yet. Tap on the Add shortcut button.</p>\n            <p>\n              Not sure what to add?\n              <br />\n              Try adding{' '}\n              <a\n                href=\"#\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  states.shortcuts = [\n                    {\n                      type: 'following',\n                    },\n                    {\n                      type: 'notifications',\n                    },\n                  ];\n                }}\n              >\n                Home / Following and Notifications\n              </a>{' '}\n              first.\n            </p>\n          </div>\n        )}\n        <p class=\"insignificant\">\n          {shortcuts.length >= SHORTCUTS_LIMIT &&\n            `Max ${SHORTCUTS_LIMIT} shortcuts`}\n        </p>\n        <p\n          style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n          }}\n        >\n          <button\n            type=\"button\"\n            class=\"light\"\n            onClick={() => setShowImportExport(true)}\n          >\n            Import/export\n          </button>\n          <button\n            type=\"button\"\n            disabled={shortcuts.length >= SHORTCUTS_LIMIT}\n            onClick={() => setShowForm(true)}\n          >\n            <Icon icon=\"plus\" /> <span>Add shortcut</span>\n          </button>\n        </p>\n      </main>\n      {showForm && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowForm(false);\n            }\n          }}\n        >\n          <ShortcutForm\n            shortcut={showForm.shortcut}\n            shortcutIndex={showForm.shortcutIndex}\n            lists={lists}\n            followedHashtags={followedHashtags}\n            onSubmit={({ result, mode }) => {\n              console.log('onSubmit', result);\n              if (mode === 'edit') {\n                states.shortcuts[showForm.shortcutIndex] = result;\n              } else {\n                states.shortcuts.push(result);\n              }\n            }}\n            onClose={() => setShowForm(false)}\n          />\n        </Modal>\n      )}\n      {showImportExport && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowImportExport(false);\n            }\n          }}\n        >\n          <ImportExport\n            shortcuts={shortcuts}\n            onClose={() => setShowImportExport(false)}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nfunction ShortcutForm({\n  lists,\n  followedHashtags,\n  onSubmit,\n  disabled,\n  shortcut,\n  shortcutIndex,\n  onClose,\n}) {\n  console.log('shortcut', shortcut);\n  const editMode = !!shortcut;\n  const [currentType, setCurrentType] = useState(shortcut?.type || null);\n\n  const formRef = useRef();\n  useEffect(() => {\n    if (editMode && currentType && TYPE_PARAMS[currentType]) {\n      // Populate form\n      const form = formRef.current;\n      TYPE_PARAMS[currentType].forEach(({ name, type }) => {\n        const input = form.querySelector(`[name=\"${name}\"]`);\n        if (input && shortcut[name]) {\n          if (type === 'checkbox') {\n            input.checked = shortcut[name] === 'on' ? true : false;\n          } else {\n            input.value = shortcut[name];\n          }\n        }\n      });\n    }\n  }, [editMode, currentType]);\n\n  return (\n    <div id=\"shortcut-settings-form\" class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>{editMode ? 'Edit' : 'Add'} shortcut</h2>\n      </header>\n      <main tabindex=\"-1\">\n        <form\n          ref={formRef}\n          onSubmit={(e) => {\n            // Construct a nice object from form\n            e.preventDefault();\n            const data = new FormData(e.target);\n            const result = {};\n            data.forEach((value, key) => {\n              result[key] = value?.trim();\n              if (key === 'instance') {\n                // Remove protocol and trailing slash\n                result[key] = result[key]\n                  .replace(/^https?:\\/\\//, '')\n                  .replace(/\\/+$/, '');\n                // Remove @acct@ or acct@ from instance URL\n                result[key] = result[key].replace(/^@?[^@]+@/, '');\n              }\n            });\n            console.log('result', result);\n            if (!result.type) return;\n            onSubmit({\n              result,\n              mode: editMode ? 'edit' : 'add',\n            });\n            // Reset\n            e.target.reset();\n            setCurrentType(null);\n            onClose?.();\n          }}\n        >\n          <p>\n            <label>\n              <span>Timeline</span>\n              <select\n                required\n                disabled={disabled}\n                onChange={(e) => {\n                  setCurrentType(e.target.value);\n                }}\n                defaultValue={editMode ? shortcut.type : undefined}\n                name=\"type\"\n              >\n                <option></option>\n                {TYPES.map((type) => (\n                  <option value={type}>{TYPE_TEXT[type]}</option>\n                ))}\n              </select>\n            </label>\n          </p>\n          {TYPE_PARAMS[currentType]?.map?.(\n            ({ text, name, type, placeholder, pattern, notRequired }) => {\n              if (currentType === 'list') {\n                return (\n                  <p>\n                    <label>\n                      <span>List</span>\n                      <select\n                        name=\"id\"\n                        required={!notRequired}\n                        disabled={disabled}\n                      >\n                        {lists.map((list) => (\n                          <option value={list.id}>{list.title}</option>\n                        ))}\n                      </select>\n                    </label>\n                  </p>\n                );\n              }\n\n              return (\n                <p>\n                  <label>\n                    <span>{text}</span>{' '}\n                    <input\n                      type={type}\n                      name={name}\n                      placeholder={placeholder}\n                      required={type === 'text' && !notRequired}\n                      disabled={disabled}\n                      list={\n                        currentType === 'hashtag'\n                          ? 'followed-hashtags-datalist'\n                          : null\n                      }\n                      autocorrect=\"off\"\n                      autocapitalize=\"off\"\n                      spellcheck={false}\n                      pattern={pattern}\n                    />\n                    {currentType === 'hashtag' &&\n                      followedHashtags.length > 0 && (\n                        <datalist id=\"followed-hashtags-datalist\">\n                          {followedHashtags.map((tag) => (\n                            <option value={tag.name} />\n                          ))}\n                        </datalist>\n                      )}\n                  </label>\n                </p>\n              );\n            },\n          )}\n          <footer>\n            <button type=\"submit\" class=\"block\" disabled={disabled}>\n              {editMode ? 'Save' : 'Add'}\n            </button>\n            {editMode && (\n              <button\n                type=\"button\"\n                class=\"light danger\"\n                onClick={() => {\n                  states.shortcuts.splice(shortcutIndex, 1);\n                  onClose?.();\n                }}\n              >\n                Remove\n              </button>\n            )}\n          </footer>\n        </form>\n      </main>\n    </div>\n  );\n}\n\nfunction ImportExport({ shortcuts, onClose }) {\n  const shortcutsStr = useMemo(() => {\n    if (!shortcuts) return '';\n    if (!shortcuts.filter(Boolean).length) return '';\n    return compressToEncodedURIComponent(\n      JSON.stringify(shortcuts.filter(Boolean)),\n    );\n  }, [shortcuts]);\n  const [importShortcutStr, setImportShortcutStr] = useState('');\n  const [importUIState, setImportUIState] = useState('default');\n  const parsedImportShortcutStr = useMemo(() => {\n    if (!importShortcutStr) {\n      setImportUIState('default');\n      return null;\n    }\n    try {\n      const parsed = JSON.parse(\n        decompressFromEncodedURIComponent(importShortcutStr),\n      );\n      // Very basic validation, I know\n      if (!Array.isArray(parsed)) throw new Error('Not an array');\n      setImportUIState('default');\n      return parsed;\n    } catch (err) {\n      // Fallback to JSON string parsing\n      // There's a chance that someone might want to import a JSON string instead of the compressed version\n      try {\n        const parsed = JSON.parse(importShortcutStr);\n        if (!Array.isArray(parsed)) throw new Error('Not an array');\n        setImportUIState('default');\n        return parsed;\n      } catch (err) {\n        setImportUIState('error');\n        return null;\n      }\n    }\n  }, [importShortcutStr]);\n  const hasCurrentSettings = states.shortcuts.length > 0;\n\n  return (\n    <div id=\"import-export-container\" class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>\n          Import/Export <small class=\"ib insignificant\">Shortcuts</small>\n        </h2>\n      </header>\n      <main tabindex=\"-1\">\n        <section>\n          <h3>\n            <Icon icon=\"arrow-down-circle\" size=\"l\" class=\"insignificant\" />{' '}\n            <span>Import</span>\n          </h3>\n          <p>\n            <input\n              type=\"text\"\n              name=\"import\"\n              placeholder=\"Paste shortcuts here\"\n              class=\"block\"\n              onInput={(e) => {\n                setImportShortcutStr(e.target.value);\n              }}\n            />\n          </p>\n          {!!parsedImportShortcutStr &&\n            Array.isArray(parsedImportShortcutStr) && (\n              <>\n                <p>\n                  <b>{parsedImportShortcutStr.length}</b> shortcut\n                  {parsedImportShortcutStr.length > 1 ? 's' : ''}{' '}\n                  <small class=\"insignificant\">\n                    ({importShortcutStr.length} characters)\n                  </small>\n                </p>\n                <ol class=\"import-settings-list\">\n                  {parsedImportShortcutStr.map((shortcut) => (\n                    <li>\n                      <span\n                        style={{\n                          opacity: shortcuts.some((s) =>\n                            // Compare all properties\n                            Object.keys(s).every(\n                              (key) => s[key] === shortcut[key],\n                            ),\n                          )\n                            ? 1\n                            : 0,\n                        }}\n                      >\n                        *\n                      </span>\n                      <span>\n                        {TYPE_TEXT[shortcut.type]}\n                        {shortcut.type === 'list' && ' ⚠️'}{' '}\n                        {TYPE_PARAMS[shortcut.type]?.map?.(\n                          ({ text, name, type }) =>\n                            shortcut[name] ? (\n                              <>\n                                <span class=\"tag collapsed insignificant\">\n                                  {text}:{' '}\n                                  {type === 'checkbox'\n                                    ? shortcut[name] === 'on'\n                                      ? '✅'\n                                      : '❌'\n                                    : shortcut[name]}\n                                </span>{' '}\n                              </>\n                            ) : null,\n                        )}\n                      </span>\n                    </li>\n                  ))}\n                </ol>\n                <p>\n                  <small>* Exists in current shortcuts</small>\n                  <br />\n                  <small>\n                    ⚠️ List may not work if it's from a different account.\n                  </small>\n                </p>\n              </>\n            )}\n          {importUIState === 'error' && (\n            <p class=\"error\">\n              <small>⚠️ Invalid settings format</small>\n            </p>\n          )}\n          <p>\n            {hasCurrentSettings && (\n              <>\n                <MenuConfirm\n                  confirmLabel=\"Append to current shortcuts?\"\n                  menuFooter={\n                    <div class=\"footer\">\n                      Only shortcuts that don’t exist in current shortcuts will\n                      be appended.\n                    </div>\n                  }\n                  onClick={() => {\n                    // states.shortcuts = [\n                    //   ...states.shortcuts,\n                    //   ...parsedImportShortcutStr,\n                    // ];\n                    // Append non-unique shortcuts only\n                    const nonUniqueShortcuts = parsedImportShortcutStr.filter(\n                      (shortcut) =>\n                        !states.shortcuts.some((s) =>\n                          // Compare all properties\n                          Object.keys(s).every(\n                            (key) => s[key] === shortcut[key],\n                          ),\n                        ),\n                    );\n                    if (!nonUniqueShortcuts.length) {\n                      showToast('No new shortcuts to import');\n                      return;\n                    }\n                    let newShortcuts = [\n                      ...states.shortcuts,\n                      ...nonUniqueShortcuts,\n                    ];\n                    const exceededLimit = newShortcuts.length > SHORTCUTS_LIMIT;\n                    if (exceededLimit) {\n                      // If exceeded, trim it\n                      newShortcuts = newShortcuts.slice(0, SHORTCUTS_LIMIT);\n                    }\n                    states.shortcuts = newShortcuts;\n                    showToast(\n                      exceededLimit\n                        ? `Shortcuts imported. Exceeded max ${SHORTCUTS_LIMIT}, so the rest are not imported.`\n                        : 'Shortcuts imported',\n                    );\n                    onClose?.();\n                  }}\n                >\n                  <button\n                    type=\"button\"\n                    class=\"plain2\"\n                    disabled={!parsedImportShortcutStr}\n                  >\n                    Import & append…\n                  </button>\n                </MenuConfirm>{' '}\n              </>\n            )}\n            <MenuConfirm\n              confirmLabel={\n                hasCurrentSettings\n                  ? 'Override current shortcuts?'\n                  : 'Import shortcuts?'\n              }\n              menuItemClassName={hasCurrentSettings ? 'danger' : undefined}\n              onClick={() => {\n                states.shortcuts = parsedImportShortcutStr;\n                showToast('Shortcuts imported');\n                onClose?.();\n              }}\n            >\n              <button\n                type=\"button\"\n                class=\"plain2\"\n                disabled={!parsedImportShortcutStr}\n              >\n                {hasCurrentSettings ? 'or override…' : 'Import…'}\n              </button>\n            </MenuConfirm>\n          </p>\n        </section>\n        <section>\n          <h3>\n            <Icon icon=\"arrow-up-circle\" size=\"l\" class=\"insignificant\" />{' '}\n            <span>Export</span>\n          </h3>\n          <p>\n            <input\n              style={{ width: '100%' }}\n              type=\"text\"\n              value={shortcutsStr}\n              readOnly\n              onClick={(e) => {\n                if (!e.target.value) return;\n                e.target.select();\n                // Copy url to clipboard\n                try {\n                  navigator.clipboard.writeText(e.target.value);\n                  showToast('Shortcuts copied');\n                } catch (e) {\n                  console.error(e);\n                  showToast('Unable to copy shortcuts');\n                }\n              }}\n            />\n          </p>\n          <p>\n            <button\n              type=\"button\"\n              class=\"plain2\"\n              disabled={!shortcutsStr}\n              onClick={() => {\n                try {\n                  navigator.clipboard.writeText(shortcutsStr);\n                  showToast('Shortcut settings copied');\n                } catch (e) {\n                  console.error(e);\n                  showToast('Unable to copy shortcut settings');\n                }\n              }}\n            >\n              <Icon icon=\"clipboard\" /> <span>Copy</span>\n            </button>{' '}\n            {navigator?.share &&\n              navigator?.canShare?.({\n                text: shortcutsStr,\n              }) && (\n                <button\n                  type=\"button\"\n                  class=\"plain2\"\n                  disabled={!shortcutsStr}\n                  onClick={() => {\n                    try {\n                      navigator.share({\n                        text: shortcutsStr,\n                      });\n                    } catch (e) {\n                      console.error(e);\n                      alert(\"Sharing doesn't seem to work.\");\n                    }\n                  }}\n                >\n                  <Icon icon=\"share\" /> <span>Share</span>\n                </button>\n              )}{' '}\n            {shortcutsStr.length > 0 && (\n              <small class=\"insignificant\">\n                {shortcutsStr.length} characters\n              </small>\n            )}\n          </p>\n          {!!shortcutsStr && (\n            <details>\n              <summary class=\"insignificant\">\n                <small>Raw Shortcuts JSON</small>\n              </summary>\n              <textarea style={{ width: '100%' }} rows={10} readOnly>\n                {JSON.stringify(shortcuts.filter(Boolean), null, 2)}\n              </textarea>\n            </details>\n          )}\n        </section>\n      </main>\n    </div>\n  );\n}\n\nexport default ShortcutsSettings;\n","import { useLocation, useNavigate } from 'react-router-dom';\nimport { subscribe, useSnapshot } from 'valtio';\n\nimport Accounts from '../pages/accounts';\nimport Settings from '../pages/settings';\nimport focusDeck from '../utils/focus-deck';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\n\nimport AccountSheet from './account-sheet';\nimport Compose from './compose';\nimport Drafts from './drafts';\nimport GenericAccounts from './generic-accounts';\nimport MediaAltModal from './media-alt-modal';\nimport MediaModal from './media-modal';\nimport Modal from './modal';\nimport ShortcutsSettings from './shortcuts-settings';\n\nsubscribe(states, (changes) => {\n  for (const [action, path, value, prevValue] of changes) {\n    // When closing modal, focus on deck\n    if (/^show/i.test(path) && !value) {\n      focusDeck();\n    }\n  }\n});\n\nexport default function Modals() {\n  const snapStates = useSnapshot(states);\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  return (\n    <>\n      {!!snapStates.showCompose && (\n        <Modal>\n          <Compose\n            replyToStatus={\n              typeof snapStates.showCompose !== 'boolean'\n                ? snapStates.showCompose.replyToStatus\n                : window.__COMPOSE__?.replyToStatus || null\n            }\n            editStatus={\n              states.showCompose?.editStatus ||\n              window.__COMPOSE__?.editStatus ||\n              null\n            }\n            draftStatus={\n              states.showCompose?.draftStatus ||\n              window.__COMPOSE__?.draftStatus ||\n              null\n            }\n            onClose={(results) => {\n              const { newStatus, instance, type } = results || {};\n              states.showCompose = false;\n              window.__COMPOSE__ = null;\n              if (newStatus) {\n                states.reloadStatusPage++;\n                showToast({\n                  text: {\n                    post: 'Post published. Check it out.',\n                    reply: 'Reply posted. Check it out.',\n                    edit: 'Post updated. Check it out.',\n                  }[type || 'post'],\n                  delay: 1000,\n                  duration: 10_000, // 10 seconds\n                  onClick: (toast) => {\n                    toast.hideToast();\n                    states.prevLocation = location;\n                    navigate(\n                      instance\n                        ? `/${instance}/s/${newStatus.id}`\n                        : `/s/${newStatus.id}`,\n                    );\n                  },\n                });\n              }\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showSettings && (\n        <Modal\n          onClose={() => {\n            states.showSettings = false;\n          }}\n        >\n          <Settings\n            onClose={() => {\n              states.showSettings = false;\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showAccounts && (\n        <Modal\n          onClose={() => {\n            states.showAccounts = false;\n          }}\n        >\n          <Accounts\n            onClose={() => {\n              states.showAccounts = false;\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showAccount && (\n        <Modal\n          class=\"light\"\n          onClose={() => {\n            states.showAccount = false;\n          }}\n        >\n          <AccountSheet\n            account={snapStates.showAccount?.account || snapStates.showAccount}\n            instance={snapStates.showAccount?.instance}\n            onClose={({ destination } = {}) => {\n              states.showAccount = false;\n              if (destination) {\n                states.showAccounts = false;\n              }\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showDrafts && (\n        <Modal\n          onClose={() => {\n            states.showDrafts = false;\n          }}\n        >\n          <Drafts onClose={() => (states.showDrafts = false)} />\n        </Modal>\n      )}\n      {!!snapStates.showMediaModal && (\n        <Modal\n          onClick={(e) => {\n            if (\n              e.target === e.currentTarget ||\n              e.target.classList.contains('media')\n            ) {\n              states.showMediaModal = false;\n            }\n          }}\n        >\n          <MediaModal\n            mediaAttachments={snapStates.showMediaModal.mediaAttachments}\n            instance={snapStates.showMediaModal.instance}\n            index={snapStates.showMediaModal.index}\n            statusID={snapStates.showMediaModal.statusID}\n            onClose={() => {\n              states.showMediaModal = false;\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showShortcutsSettings && (\n        <Modal\n          class=\"light\"\n          onClose={() => {\n            states.showShortcutsSettings = false;\n          }}\n        >\n          <ShortcutsSettings\n            onClose={() => (states.showShortcutsSettings = false)}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showGenericAccounts && (\n        <Modal\n          class=\"light\"\n          onClose={() => {\n            states.showGenericAccounts = false;\n          }}\n        >\n          <GenericAccounts\n            onClose={() => (states.showGenericAccounts = false)}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showMediaAlt && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              states.showMediaAlt = false;\n            }\n          }}\n        >\n          <MediaAltModal\n            alt={snapStates.showMediaAlt.alt || snapStates.showMediaAlt}\n            lang={snapStates.showMediaAlt?.lang}\n            onClose={() => {\n              states.showMediaAlt = false;\n            }}\n          />\n        </Modal>\n      )}\n    </>\n  );\n}\n","import { useState } from 'preact/hooks';\n\nimport { api } from '../utils/api';\n\nimport Icon from './icon';\nimport Loader from './loader';\n\nfunction FollowRequestButtons({ accountID, onChange }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [requestState, setRequestState] = useState(null); // accept, reject\n  const [relationship, setRelationship] = useState(null);\n\n  const hasRelationship = relationship !== null;\n\n  return (\n    <p class=\"follow-request-buttons\">\n      <button\n        type=\"button\"\n        disabled={uiState === 'loading' || hasRelationship}\n        onClick={() => {\n          setUIState('loading');\n          setRequestState('accept');\n          (async () => {\n            try {\n              const rel = await masto.v1.followRequests\n                .$select(accountID)\n                .authorize();\n              if (!rel?.followedBy) {\n                throw new Error('Follow request not accepted');\n              }\n              setRelationship(rel);\n              onChange();\n            } catch (e) {\n              console.error(e);\n            }\n            setUIState('default');\n          })();\n        }}\n      >\n        Accept\n      </button>{' '}\n      <button\n        type=\"button\"\n        disabled={uiState === 'loading' || hasRelationship}\n        class=\"light danger\"\n        onClick={() => {\n          setUIState('loading');\n          setRequestState('reject');\n          (async () => {\n            try {\n              const rel = await masto.v1.followRequests\n                .$select(accountID)\n                .reject();\n              if (rel?.followedBy) {\n                throw new Error('Follow request not rejected');\n              }\n              setRelationship(rel);\n              onChange();\n            } catch (e) {\n              console.error(e);\n              setUIState('default');\n            }\n          })();\n        }}\n      >\n        Reject\n      </button>\n      <span class=\"follow-request-states\">\n        {hasRelationship && requestState ? (\n          requestState === 'accept' ? (\n            <Icon icon=\"check-circle\" alt=\"Accepted\" class=\"follow-accepted\" />\n          ) : (\n            <Icon icon=\"x-circle\" alt=\"Rejected\" class=\"follow-rejected\" />\n          )\n        ) : (\n          <Loader hidden={uiState !== 'loading'} />\n        )}\n      </span>\n    </p>\n  );\n}\n\nexport default FollowRequestButtons;\n","import shortenNumber from '../utils/shorten-number';\nimport states from '../utils/states';\nimport store from '../utils/store';\nimport useTruncated from '../utils/useTruncated';\n\nimport Avatar from './avatar';\nimport FollowRequestButtons from './follow-request-buttons';\nimport Icon from './icon';\nimport Link from './link';\nimport NameText from './name-text';\nimport RelativeTime from './relative-time';\nimport Status from './status';\n\nconst NOTIFICATION_ICONS = {\n  mention: 'comment',\n  status: 'notification',\n  reblog: 'rocket',\n  follow: 'follow',\n  follow_request: 'follow-add',\n  favourite: 'heart',\n  poll: 'poll',\n  update: 'pencil',\n  'admin.signup': 'account-edit',\n  'admin.report': 'account-warning',\n};\n\n/*\nNotification types\n==================\nmention = Someone mentioned you in their status\nstatus = Someone you enabled notifications for has posted a status\nreblog = Someone boosted one of your statuses\nfollow = Someone followed you\nfollow_request = Someone requested to follow you\nfavourite = Someone favourited one of your statuses\npoll = A poll you have voted in or created has ended\nupdate = A status you interacted with has been edited\nadmin.sign_up = Someone signed up (optionally sent to admins)\nadmin.report = A new report has been filed\n*/\n\nconst contentText = {\n  mention: 'mentioned you in their post.',\n  status: 'published a post.',\n  reblog: 'boosted your post.',\n  'reblog+account': (count) => `boosted ${count} of your posts.`,\n  reblog_reply: 'boosted your reply.',\n  follow: 'followed you.',\n  follow_request: 'requested to follow you.',\n  favourite: 'favourited your post.',\n  'favourite+account': (count) => `favourited ${count} of your posts.`,\n  favourite_reply: 'favourited your reply.',\n  poll: 'A poll you have voted in or created has ended.',\n  'poll-self': 'A poll you have created has ended.',\n  'poll-voted': 'A poll you have voted in has ended.',\n  update: 'A post you interacted with has been edited.',\n  'favourite+reblog': 'boosted & favourited your post.',\n  'favourite+reblog+account': (count) =>\n    `boosted & favourited ${count} of your posts.`,\n  'favourite+reblog_reply': 'boosted & favourited your reply.',\n  'admin.signup': 'signed up.',\n  'admin.report': 'reported a post.',\n};\n\nconst AVATARS_LIMIT = 50;\n\nfunction Notification({ notification, instance, reload, isStatic }) {\n  const { id, status, account, _accounts, _statuses } = notification;\n  let { type } = notification;\n\n  // status = Attached when type of the notification is favourite, reblog, status, mention, poll, or update\n  const actualStatus = status?.reblog || status;\n  const actualStatusID = actualStatus?.id;\n\n  const currentAccount = store.session.get('currentAccount');\n  const isSelf = currentAccount === account?.id;\n  const isVoted = status?.poll?.voted;\n  const isReplyToOthers =\n    !!status?.inReplyToAccountId &&\n    status?.inReplyToAccountId !== currentAccount &&\n    status?.account?.id === currentAccount;\n\n  let favsCount = 0;\n  let reblogsCount = 0;\n  if (type === 'favourite+reblog') {\n    for (const account of _accounts) {\n      if (account._types?.includes('favourite')) {\n        favsCount++;\n      }\n      if (account._types?.includes('reblog')) {\n        reblogsCount++;\n      }\n    }\n    if (!reblogsCount && favsCount) type = 'favourite';\n    if (!favsCount && reblogsCount) type = 'reblog';\n  }\n\n  let text;\n  if (type === 'poll') {\n    text = contentText[isSelf ? 'poll-self' : isVoted ? 'poll-voted' : 'poll'];\n  } else if (\n    type === 'reblog' ||\n    type === 'favourite' ||\n    type === 'favourite+reblog'\n  ) {\n    if (_statuses?.length > 1) {\n      text = contentText[`${type}+account`];\n    } else if (isReplyToOthers) {\n      text = contentText[`${type}_reply`];\n    } else {\n      text = contentText[type];\n    }\n  } else if (contentText[type]) {\n    text = contentText[type];\n  } else {\n    // Anticipate unhandled notification types, possibly from Mastodon forks or non-Mastodon instances\n    // This surfaces the error to the user, hoping that users will report it\n    text = `[Unknown notification type: ${type}]`;\n  }\n\n  if (typeof text === 'function') {\n    text = text(_statuses?.length || _accounts?.length);\n  }\n\n  if (type === 'mention' && !status) {\n    // Could be deleted\n    return null;\n  }\n\n  const formattedCreatedAt =\n    notification.createdAt && new Date(notification.createdAt).toLocaleString();\n\n  const genericAccountsHeading =\n    {\n      'favourite+reblog': 'Boosted/Favourited by…',\n      favourite: 'Favourited by…',\n      reblog: 'Boosted by…',\n      follow: 'Followed by…',\n    }[type] || 'Accounts';\n  const handleOpenGenericAccounts = () => {\n    states.showGenericAccounts = {\n      heading: genericAccountsHeading,\n      accounts: _accounts,\n      showReactions: type === 'favourite+reblog',\n    };\n  };\n\n  return (\n    <div class={`notification notification-${type}`} tabIndex=\"0\">\n      <div\n        class={`notification-type notification-${type}`}\n        title={formattedCreatedAt}\n      >\n        {type === 'favourite+reblog' ? (\n          <>\n            <Icon icon=\"rocket\" size=\"xl\" alt={type} class=\"reblog-icon\" />\n            <Icon icon=\"heart\" size=\"xl\" alt={type} class=\"favourite-icon\" />\n          </>\n        ) : (\n          <Icon\n            icon={NOTIFICATION_ICONS[type] || 'notification'}\n            size=\"xl\"\n            alt={type}\n          />\n        )}\n      </div>\n      <div class=\"notification-content\">\n        {type !== 'mention' && (\n          <>\n            <p>\n              {!/poll|update/i.test(type) && (\n                <>\n                  {_accounts?.length > 1 ? (\n                    <>\n                      <b tabIndex=\"0\" onClick={handleOpenGenericAccounts}>\n                        <span title={_accounts.length}>\n                          {shortenNumber(_accounts.length)}\n                        </span>{' '}\n                        people\n                      </b>{' '}\n                    </>\n                  ) : (\n                    <>\n                      <NameText account={account} showAvatar />{' '}\n                    </>\n                  )}\n                </>\n              )}\n              {text}\n              {type === 'mention' && (\n                <span class=\"insignificant\">\n                  {' '}\n                  •{' '}\n                  <RelativeTime\n                    datetime={notification.createdAt}\n                    format=\"micro\"\n                  />\n                </span>\n              )}\n            </p>\n            {type === 'follow_request' && (\n              <FollowRequestButtons\n                accountID={account.id}\n                onChange={() => {\n                  // reload();\n                }}\n              />\n            )}\n          </>\n        )}\n        {_accounts?.length > 1 && (\n          <p class=\"avatars-stack\">\n            {_accounts.slice(0, AVATARS_LIMIT).map((account, i) => (\n              <>\n                <a\n                  href={account.url}\n                  rel=\"noopener noreferrer\"\n                  class=\"account-avatar-stack\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    states.showAccount = account;\n                  }}\n                >\n                  <Avatar\n                    url={account.avatarStatic}\n                    size={\n                      _accounts.length <= 10\n                        ? 'xxl'\n                        : _accounts.length < 20\n                        ? 'xl'\n                        : _accounts.length < 30\n                        ? 'l'\n                        : _accounts.length < 40\n                        ? 'm'\n                        : 's' // My god, this person is popular!\n                    }\n                    key={account.id}\n                    alt={`${account.displayName} @${account.acct}`}\n                    squircle={account?.bot}\n                  />\n                  {type === 'favourite+reblog' && (\n                    <div class=\"account-sub-icons\">\n                      {account._types.map((type) => (\n                        <Icon\n                          icon={NOTIFICATION_ICONS[type]}\n                          size=\"s\"\n                          class={`${type}-icon`}\n                        />\n                      ))}\n                    </div>\n                  )}\n                </a>{' '}\n              </>\n            ))}\n            <button\n              type=\"button\"\n              class=\"small plain\"\n              onClick={handleOpenGenericAccounts}\n            >\n              {_accounts.length > AVATARS_LIMIT &&\n                `+${_accounts.length - AVATARS_LIMIT}`}\n              <Icon icon=\"chevron-down\" />\n            </button>\n          </p>\n        )}\n        {_statuses?.length > 1 && (\n          <ul class=\"notification-group-statuses\">\n            {_statuses.map((status) => (\n              <li key={status.id}>\n                <TruncatedLink\n                  class={`status-link status-type-${type}`}\n                  to={\n                    instance ? `/${instance}/s/${status.id}` : `/s/${status.id}`\n                  }\n                >\n                  <Status status={status} size=\"s\" />\n                </TruncatedLink>\n              </li>\n            ))}\n          </ul>\n        )}\n        {status && (!_statuses?.length || _statuses?.length <= 1) && (\n          <TruncatedLink\n            class={`status-link status-type-${type}`}\n            to={\n              instance\n                ? `/${instance}/s/${actualStatusID}`\n                : `/s/${actualStatusID}`\n            }\n            onContextMenu={(e) => {\n              const post = e.target.querySelector('.status');\n              if (post) {\n                // Fire a custom event to open the context menu\n                if (e.metaKey) return;\n                e.preventDefault();\n                post.dispatchEvent(\n                  new MouseEvent('contextmenu', {\n                    clientX: e.clientX,\n                    clientY: e.clientY,\n                  }),\n                );\n              }\n            }}\n          >\n            {isStatic ? (\n              <Status status={actualStatus} size=\"s\" />\n            ) : (\n              <Status statusID={actualStatusID} size=\"s\" />\n            )}\n          </TruncatedLink>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction TruncatedLink(props) {\n  const ref = useTruncated();\n  return <Link {...props} data-read-more=\"Read more →\" ref={ref} />;\n}\n\nexport default Notification;\n","import { memo } from 'preact/compat';\nimport { useLayoutEffect, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport { api } from '../utils/api';\nimport states from '../utils/states';\nimport {\n  getAccountByAccessToken,\n  getCurrentAccount,\n} from '../utils/store-utils';\nimport usePageVisibility from '../utils/usePageVisibility';\n\nimport Icon from './icon';\nimport Link from './link';\nimport Modal from './modal';\nimport Notification from './notification';\n\nexport default memo(function NotificationService() {\n  if (!('serviceWorker' in navigator)) return null;\n\n  const snapStates = useSnapshot(states);\n  const { routeNotification } = snapStates;\n\n  console.log('🛎️ Notification service', routeNotification);\n\n  const { id, accessToken } = routeNotification || {};\n  const [showNotificationSheet, setShowNotificationSheet] = useState(false);\n\n  useLayoutEffect(() => {\n    if (!id || !accessToken) return;\n    const { instance: currentInstance } = api();\n    const { masto, instance } = api({\n      accessToken,\n    });\n    console.log('API', { accessToken, currentInstance, instance });\n    const sameInstance = currentInstance === instance;\n    const account = accessToken\n      ? getAccountByAccessToken(accessToken)\n      : getCurrentAccount();\n    (async () => {\n      const notification = await masto.v1.notifications.$select(id).fetch();\n      if (notification && account) {\n        console.log('🛎️ Notification', { id, notification, account });\n        const accountInstance = account.instanceURL;\n        const { type, status, account: notificationAccount } = notification;\n        const hasModal = !!document.querySelector('#modal-container > *');\n        const isFollow = type === 'follow' && !!notificationAccount?.id;\n        const hasAccount = !!notificationAccount?.id;\n        const hasStatus = !!status?.id;\n        if (isFollow && sameInstance) {\n          // Show account sheet, can handle different instances\n          states.showAccount = {\n            account: notificationAccount,\n            instance: accountInstance,\n          };\n        } else if (hasModal || !sameInstance || (hasAccount && hasStatus)) {\n          // Show sheet of notification, if\n          // - there is a modal open\n          // - the notification is from another instance\n          // - the notification has both account and status, gives choice for users to go to account or status\n          setShowNotificationSheet({\n            id,\n            account,\n            notification,\n            sameInstance,\n          });\n        } else {\n          if (hasStatus) {\n            // Go to status page\n            location.hash = `/${currentInstance}/s/${status.id}`;\n          } else if (isFollow) {\n            // Go to profile page\n            location.hash = `/${currentInstance}/a/${notificationAccount.id}`;\n          } else {\n            // Go to notifications page\n            location.hash = '/notifications';\n          }\n        }\n      } else {\n        console.warn(\n          '🛎️ Notification not found',\n          notificationID,\n          notificationAccessToken,\n        );\n      }\n    })();\n  }, [id, accessToken]);\n\n  useLayoutEffect(() => {\n    // Listen to message from service worker\n    const handleMessage = (event) => {\n      console.log('💥💥💥 Message event', event);\n      const { type, id, accessToken } = event?.data || {};\n      if (type === 'notification') {\n        states.routeNotification = {\n          id,\n          accessToken,\n        };\n      }\n    };\n    console.log('👂👂👂 Listen to message');\n    navigator.serviceWorker.addEventListener('message', handleMessage);\n    return () => {\n      console.log('👂👂👂 Remove listen to message');\n      navigator.serviceWorker.removeEventListener('message', handleMessage);\n    };\n  }, []);\n\n  useLayoutEffect(() => {\n    if (navigator?.clearAppBadge) {\n      navigator.clearAppBadge();\n    }\n  }, []);\n  usePageVisibility((visible) => {\n    if (visible && navigator?.clearAppBadge) {\n      console.log('🔰 Clear app badge');\n      navigator.clearAppBadge();\n    }\n  });\n\n  const onClose = () => {\n    setShowNotificationSheet(false);\n    states.routeNotification = null;\n\n    // If url is #/notifications?id=123, go to #/notifications\n    if (/\\/notifications\\?id=/i.test(location.hash)) {\n      location.hash = '/notifications';\n    }\n  };\n\n  if (showNotificationSheet) {\n    const { id, account, notification, sameInstance } = showNotificationSheet;\n    return (\n      <Modal\n        class=\"light\"\n        onClick={(e) => {\n          if (e.target === e.currentTarget) {\n            onClose();\n          }\n        }}\n      >\n        <div class=\"sheet\" tabIndex=\"-1\">\n          <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n            <Icon icon=\"x\" />\n          </button>\n          <header>\n            <b>Notification</b>\n          </header>\n          <main>\n            {!sameInstance && (\n              <p>This notification is from your other account.</p>\n            )}\n            <div\n              class=\"notification-peek\"\n              // style={{\n              //   pointerEvents: sameInstance ? '' : 'none',\n              // }}\n              onClick={(e) => {\n                const { target } = e;\n                // If button or links\n                if (e.target.tagName === 'BUTTON' || e.target.tagName === 'A') {\n                  onClose();\n                }\n              }}\n            >\n              <Notification\n                instance={account.instanceURL}\n                notification={notification}\n                isStatic\n              />\n            </div>\n            <div\n              style={{\n                textAlign: 'end',\n              }}\n            >\n              <Link to=\"/notifications\" class=\"button light\" onClick={onClose}>\n                <span>View all notifications</span> <Icon icon=\"arrow-right\" />\n              </Link>\n            </div>\n          </main>\n        </div>\n      </Modal>\n    );\n  }\n\n  return null;\n});\n","import { forwardRef } from 'preact/compat';\nimport { useImperativeHandle, useRef, useState } from 'preact/hooks';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { api } from '../utils/api';\n\nimport Icon from './icon';\nimport Link from './link';\n\nconst SearchForm = forwardRef((props, ref) => {\n  const { instance } = api();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [searchMenuOpen, setSearchMenuOpen] = useState(false);\n  const [query, setQuery] = useState(searchParams.get('q') || '');\n  const type = searchParams.get('type');\n  const formRef = useRef(null);\n\n  const searchFieldRef = useRef(null);\n  useImperativeHandle(ref, () => ({\n    setValue: (value) => {\n      setQuery(value);\n    },\n    focus: () => {\n      searchFieldRef.current.focus();\n    },\n    select: () => {\n      searchFieldRef.current.select();\n    },\n    blur: () => {\n      searchFieldRef.current.blur();\n    },\n  }));\n\n  return (\n    <form\n      ref={formRef}\n      class=\"search-popover-container\"\n      onSubmit={(e) => {\n        e.preventDefault();\n\n        const isSearchPage = /\\/search/.test(location.hash);\n        if (isSearchPage) {\n          if (query) {\n            const params = {\n              q: query,\n            };\n            if (type) params.type = type; // Preserve type\n            setSearchParams(params);\n          } else {\n            setSearchParams({});\n          }\n        } else {\n          if (query) {\n            location.hash = `/search?q=${encodeURIComponent(query)}${\n              type ? `&type=${type}` : ''\n            }`;\n          } else {\n            location.hash = `/search`;\n          }\n        }\n\n        props?.onSubmit?.(e);\n      }}\n    >\n      <input\n        ref={searchFieldRef}\n        value={query}\n        name=\"q\"\n        type=\"search\"\n        // autofocus\n        placeholder=\"Search\"\n        dir=\"auto\"\n        autocomplete=\"off\"\n        autocorrect=\"off\"\n        autocapitalize=\"off\"\n        onSearch={(e) => {\n          if (!e.target.value) {\n            setSearchParams({});\n          }\n        }}\n        onInput={(e) => {\n          setQuery(e.target.value);\n          setSearchMenuOpen(true);\n        }}\n        onFocus={() => {\n          setSearchMenuOpen(true);\n        }}\n        onBlur={() => {\n          setTimeout(() => {\n            setSearchMenuOpen(false);\n          }, 100);\n          formRef.current\n            ?.querySelector('.search-popover-item.focus')\n            ?.classList.remove('focus');\n        }}\n        onKeyDown={(e) => {\n          const { key } = e;\n          switch (key) {\n            case 'Escape':\n              setSearchMenuOpen(false);\n              break;\n            case 'Down':\n            case 'ArrowDown':\n              e.preventDefault();\n              if (searchMenuOpen) {\n                const focusItem = formRef.current.querySelector(\n                  '.search-popover-item.focus',\n                );\n                if (focusItem) {\n                  let nextItem = focusItem.nextElementSibling;\n                  while (nextItem && nextItem.hidden) {\n                    nextItem = nextItem.nextElementSibling;\n                  }\n                  if (nextItem) {\n                    nextItem.classList.add('focus');\n                    const siblings = Array.from(\n                      nextItem.parentElement.children,\n                    ).filter((el) => el !== nextItem);\n                    siblings.forEach((el) => {\n                      el.classList.remove('focus');\n                    });\n                  }\n                } else {\n                  const firstItem = formRef.current.querySelector(\n                    '.search-popover-item',\n                  );\n                  if (firstItem) {\n                    firstItem.classList.add('focus');\n                  }\n                }\n              }\n              break;\n            case 'Up':\n            case 'ArrowUp':\n              e.preventDefault();\n              if (searchMenuOpen) {\n                const focusItem = document.querySelector(\n                  '.search-popover-item.focus',\n                );\n                if (focusItem) {\n                  let prevItem = focusItem.previousElementSibling;\n                  while (prevItem && prevItem.hidden) {\n                    prevItem = prevItem.previousElementSibling;\n                  }\n                  if (prevItem) {\n                    prevItem.classList.add('focus');\n                    const siblings = Array.from(\n                      prevItem.parentElement.children,\n                    ).filter((el) => el !== prevItem);\n                    siblings.forEach((el) => {\n                      el.classList.remove('focus');\n                    });\n                  }\n                } else {\n                  const lastItem = document.querySelector(\n                    '.search-popover-item:last-child',\n                  );\n                  if (lastItem) {\n                    lastItem.classList.add('focus');\n                  }\n                }\n              }\n              break;\n            case 'Enter':\n              if (searchMenuOpen) {\n                const focusItem = document.querySelector(\n                  '.search-popover-item.focus',\n                );\n                if (focusItem) {\n                  e.preventDefault();\n                  focusItem.click();\n                }\n                setSearchMenuOpen(false);\n                props?.onSubmit?.(e);\n              }\n              break;\n          }\n        }}\n      />\n      <div class=\"search-popover\" hidden={!searchMenuOpen || !query}>\n        {!!query &&\n          [\n            {\n              label: (\n                <>\n                  Posts with <q>{query}</q>\n                </>\n              ),\n              to: `/search?q=${encodeURIComponent(query)}&type=statuses`,\n              hidden: /^https?:/.test(query),\n            },\n            {\n              label: (\n                <>\n                  Posts tagged with <mark>#{query.replace(/^#/, '')}</mark>\n                </>\n              ),\n              to: `/${instance}/t/${query.replace(/^#/, '')}`,\n              hidden:\n                /^@/.test(query) || /^https?:/.test(query) || /\\s/.test(query),\n              top: /^#/.test(query),\n              type: 'link',\n            },\n            {\n              label: (\n                <>\n                  Look up <mark>{query}</mark>\n                </>\n              ),\n              to: `/${query}`,\n              hidden: !/^https?:/.test(query),\n              top: /^https?:/.test(query),\n              type: 'link',\n            },\n            {\n              label: (\n                <>\n                  Accounts with <q>{query}</q>\n                </>\n              ),\n              to: `/search?q=${encodeURIComponent(query)}&type=accounts`,\n            },\n          ]\n            .sort((a, b) => {\n              if (a.top && !b.top) return -1;\n              if (!a.top && b.top) return 1;\n              return 0;\n            })\n            .map(({ label, to, hidden, type }) => (\n              <Link\n                to={to}\n                class=\"search-popover-item\"\n                hidden={hidden}\n                onClick={(e) => {\n                  props?.onSubmit?.(e);\n                }}\n              >\n                <Icon\n                  icon={type === 'link' ? 'arrow-right' : 'search'}\n                  class=\"more-insignificant\"\n                />\n                <span>{label}</span>{' '}\n              </Link>\n            ))}\n      </div>\n    </form>\n  );\n});\n\nexport default SearchForm;\n","import './search-command.css';\n\nimport { memo } from 'preact/compat';\nimport { useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\n\nimport SearchForm from './search-form';\n\nexport default memo(function SearchCommand({ onClose = () => {} }) {\n  const [showSearch, setShowSearch] = useState(false);\n  const searchFormRef = useRef(null);\n\n  useHotkeys(\n    '/',\n    (e) => {\n      setShowSearch(true);\n      setTimeout(() => {\n        searchFormRef.current?.focus?.();\n        searchFormRef.current?.select?.();\n      }, 0);\n    },\n    {\n      preventDefault: true,\n      ignoreEventWhen: (e) => {\n        const isSearchPage = /\\/search/.test(location.hash);\n        const hasModal = !!document.querySelector('#modal-container > *');\n        return isSearchPage || hasModal;\n      },\n    },\n  );\n\n  const closeSearch = () => {\n    setShowSearch(false);\n    onClose();\n  };\n\n  useHotkeys(\n    'esc',\n    (e) => {\n      searchFormRef.current?.blur?.();\n      closeSearch();\n    },\n    {\n      enabled: showSearch,\n      enableOnFormTags: true,\n      preventDefault: true,\n    },\n  );\n\n  return (\n    <div\n      id=\"search-command-container\"\n      hidden={!showSearch}\n      onClick={(e) => {\n        console.log(e);\n        if (e.target === e.currentTarget) {\n          closeSearch();\n        }\n      }}\n    >\n      <SearchForm\n        ref={searchFormRef}\n        onSubmit={() => {\n          closeSearch();\n        }}\n      />\n    </div>\n  );\n});\n","import './shortcuts.css';\n\nimport { Menu, MenuItem } from '@szhsin/react-menu';\nimport { useMemo, useRef } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { useNavigate } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport { SHORTCUTS_META } from '../components/shortcuts-settings';\nimport { api } from '../utils/api';\nimport states from '../utils/states';\n\nimport AsyncText from './AsyncText';\nimport Icon from './icon';\nimport Link from './link';\nimport MenuLink from './menu-link';\n\nfunction Shortcuts() {\n  const { instance } = api();\n  const snapStates = useSnapshot(states);\n  const { shortcuts } = snapStates;\n\n  if (!shortcuts.length) {\n    return null;\n  }\n\n  const menuRef = useRef();\n\n  const formattedShortcuts = useMemo(\n    () =>\n      shortcuts\n        .map((pin, i) => {\n          const { type, ...data } = pin;\n          if (!SHORTCUTS_META[type]) return null;\n          let { id, path, title, subtitle, icon } = SHORTCUTS_META[type];\n\n          if (typeof id === 'function') {\n            id = id(data, i);\n          }\n          if (typeof path === 'function') {\n            path = path(\n              {\n                ...data,\n                instance: data.instance || instance,\n              },\n              i,\n            );\n          }\n          if (typeof title === 'function') {\n            title = title(data, i);\n          }\n          if (typeof subtitle === 'function') {\n            subtitle = subtitle(data, i);\n          }\n          if (typeof icon === 'function') {\n            icon = icon(data, i);\n          }\n\n          return {\n            id,\n            path,\n            title,\n            subtitle,\n            icon,\n          };\n        })\n        .filter(Boolean),\n    [shortcuts],\n  );\n\n  const navigate = useNavigate();\n  useHotkeys(['1', '2', '3', '4', '5', '6', '7', '8', '9'], (e, handler) => {\n    const index = parseInt(handler.keys[0], 10) - 1;\n    if (index < formattedShortcuts.length) {\n      const { path } = formattedShortcuts[index];\n      if (path) {\n        navigate(path);\n        menuRef.current?.closeMenu?.();\n      }\n    }\n  });\n\n  return (\n    <div id=\"shortcuts\">\n      {snapStates.settings.shortcutsViewMode === 'tab-menu-bar' ? (\n        <nav class=\"tab-bar\">\n          <ul>\n            {formattedShortcuts.map(\n              ({ id, path, title, subtitle, icon }, i) => {\n                return (\n                  <li key={i + title}>\n                    <Link\n                      class={subtitle ? 'has-subtitle' : ''}\n                      to={path}\n                      onClick={(e) => {\n                        if (e.target.classList.contains('is-active')) {\n                          e.preventDefault();\n                          const page = document.getElementById(`${id}-page`);\n                          console.log(id, page);\n                          if (page) {\n                            page.scrollTop = 0;\n                            const updatesButton =\n                              page.querySelector('.updates-button');\n                            if (updatesButton) {\n                              updatesButton.click();\n                            }\n                          }\n                        }\n                      }}\n                    >\n                      <Icon icon={icon} size=\"xl\" alt={title} />\n                      <span>\n                        <AsyncText>{title}</AsyncText>\n                        {subtitle && (\n                          <>\n                            <br />\n                            <small>{subtitle}</small>\n                          </>\n                        )}\n                      </span>\n                    </Link>\n                  </li>\n                );\n              },\n            )}\n          </ul>\n        </nav>\n      ) : (\n        <Menu\n          instanceRef={menuRef}\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          boundingBoxPadding=\"8 8 8 8\"\n          menuClassName=\"glass-menu shortcuts-menu\"\n          gap={8}\n          position=\"anchor\"\n          menuButton={\n            <button\n              type=\"button\"\n              id=\"shortcuts-button\"\n              class=\"plain\"\n              onTransitionStart={(e) => {\n                // Close menu if the button disappears\n                try {\n                  const { target } = e;\n                  if (getComputedStyle(target).pointerEvents === 'none') {\n                    menuRef.current?.closeMenu?.();\n                  }\n                } catch (e) {}\n              }}\n            >\n              <Icon icon=\"shortcut\" size=\"xl\" alt=\"Shortcuts\" />\n            </button>\n          }\n        >\n          {formattedShortcuts.map(({ path, title, subtitle, icon }, i) => {\n            return (\n              <MenuLink to={path} key={i + title} class=\"glass-menu-item\">\n                <Icon icon={icon} size=\"l\" />{' '}\n                <span class=\"menu-grow\">\n                  <span>\n                    <AsyncText>{title}</AsyncText>\n                  </span>\n                  {subtitle && (\n                    <>\n                      {' '}\n                      <small class=\"more-insignificant\">{subtitle}</small>\n                    </>\n                  )}\n                </span>\n                <span class=\"menu-shortcut hide-until-focus-visible\">\n                  {i + 1}\n                </span>\n              </MenuLink>\n            );\n          })}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default Shortcuts;\n","import { Menu } from '@szhsin/react-menu';\nimport { useWindowSize } from '@uidotdev/usehooks';\nimport { useRef } from 'preact/hooks';\n\nimport safeBoundingBoxPadding from '../utils/safe-bounding-box-padding';\n\n// It's like Menu but with sensible defaults, bug fixes and improvements.\nfunction Menu2(props) {\n  const { containerProps } = props;\n  const size = useWindowSize();\n  const instanceRef = useRef();\n  return (\n    <Menu\n      boundingBoxPadding={safeBoundingBoxPadding()}\n      repositionFlag={`${size.width}x${size.height}`}\n      {...props}\n      instanceRef={instanceRef}\n      containerProps={{\n        onClick: (e) => {\n          if (e.target === e.currentTarget) {\n            instanceRef.current?.closeMenu?.();\n          }\n          containerProps?.onClick?.(e);\n        },\n        ...containerProps,\n      }}\n    />\n  );\n}\n\nexport default Menu2;\n","import store from './store';\n\nexport function groupBoosts(values) {\n  let newValues = [];\n  let boostStash = [];\n  let serialBoosts = 0;\n  for (let i = 0; i < values.length; i++) {\n    const item = values[i];\n    if (item.reblog && !item.account?.group) {\n      boostStash.push(item);\n      serialBoosts++;\n    } else {\n      newValues.push(item);\n      if (serialBoosts < 3) {\n        serialBoosts = 0;\n      }\n    }\n  }\n  // if boostStash is more than quarter of values\n  // or if there are 3 or more boosts in a row\n  if (\n    values.length > 10 &&\n    (boostStash.length > values.length / 4 || serialBoosts >= 3)\n  ) {\n    // if boostStash is more than 3 quarter of values\n    const boostStashID = boostStash.map((status) => status.id);\n    if (boostStash.length > (values.length * 3) / 4) {\n      // insert boost array at the end of specialHome list\n      newValues = [\n        ...newValues,\n        { id: boostStashID, items: boostStash, type: 'boosts' },\n      ];\n    } else {\n      // insert boosts array in the middle of specialHome list\n      const half = Math.floor(newValues.length / 2);\n      newValues = [\n        ...newValues.slice(0, half),\n        {\n          id: boostStashID,\n          items: boostStash,\n          type: 'boosts',\n        },\n        ...newValues.slice(half),\n      ];\n    }\n    return newValues;\n  } else {\n    return values;\n  }\n}\n\nexport function dedupeBoosts(items, instance) {\n  const boostedStatusIDs = store.account.get('boostedStatusIDs') || {};\n  const filteredItems = items.filter((item) => {\n    if (!item.reblog) return true;\n    const statusKey = `${instance}-${item.reblog.id}`;\n    const boosterID = boostedStatusIDs[statusKey];\n    if (boosterID && boosterID !== item.id) {\n      console.warn(\n        `🚫 Duplicate boost by ${item.account.displayName}`,\n        item,\n        item.reblog,\n      );\n      return false;\n    } else {\n      boostedStatusIDs[statusKey] = item.id;\n    }\n    return true;\n  });\n  // Limit to 50\n  const keys = Object.keys(boostedStatusIDs);\n  if (keys.length > 50) {\n    keys.slice(0, keys.length - 50).forEach((key) => {\n      delete boostedStatusIDs[key];\n    });\n  }\n  store.account.set('boostedStatusIDs', boostedStatusIDs);\n  return filteredItems;\n}\n\nexport function groupContext(items) {\n  const contexts = [];\n  let contextIndex = 0;\n  items.forEach((item) => {\n    for (let i = 0; i < contexts.length; i++) {\n      if (contexts[i].find((t) => t.id === item.id)) return;\n      if (\n        contexts[i].find((t) => t.id === item.inReplyToId) ||\n        contexts[i].find((t) => t.inReplyToId === item.id)\n      ) {\n        contexts[i].push(item);\n        return;\n      }\n    }\n    const repliedItem = items.find((i) => i.id === item.inReplyToId);\n    if (repliedItem) {\n      contexts[contextIndex++] = [item, repliedItem];\n    }\n  });\n\n  // Check for cross-item contexts\n  // Merge contexts into one if they have a common item (same id)\n  for (let i = 0; i < contexts.length; i++) {\n    for (let j = i + 1; j < contexts.length; j++) {\n      const commonItem = contexts[i].find((t) => contexts[j].includes(t));\n      if (commonItem) {\n        contexts[i] = [...contexts[i], ...contexts[j]];\n        // Remove duplicate items\n        contexts[i] = contexts[i].filter(\n          (item, index, self) =>\n            self.findIndex((t) => t.id === item.id) === index,\n        );\n        contexts.splice(j, 1);\n        j--;\n      }\n    }\n  }\n\n  // Sort items by checking inReplyToId\n  contexts.forEach((context) => {\n    context.sort((a, b) => {\n      if (!a.inReplyToId && !b.inReplyToId) {\n        return new Date(a.createdAt) - new Date(b.createdAt);\n      }\n      if (a.inReplyToId === b.id) return 1;\n      if (b.inReplyToId === a.id) return -1;\n      if (!a.inReplyToId) return -1;\n      if (!b.inReplyToId) return 1;\n      return new Date(a.createdAt) - new Date(b.createdAt);\n    });\n  });\n\n  // Tag items that has different author than first post's author\n  contexts.forEach((context) => {\n    const firstItemAccountID = context[0].account.id;\n    context.forEach((item) => {\n      if (item.account.id !== firstItemAccountID) {\n        item._differentAuthor = true;\n      }\n    });\n  });\n\n  if (contexts.length) console.log('🧵 Contexts', contexts);\n\n  const newItems = [];\n  const appliedContextIndices = [];\n  items.forEach((item) => {\n    if (item.reblog) {\n      newItems.push(item);\n      return;\n    }\n    for (let i = 0; i < contexts.length; i++) {\n      if (contexts[i].find((t) => t.id === item.id)) {\n        if (appliedContextIndices.includes(i)) return;\n        const contextItems = contexts[i];\n        contextItems.sort((a, b) => {\n          const aDate = new Date(a.createdAt);\n          const bDate = new Date(b.createdAt);\n          return aDate - bDate;\n        });\n        const firstItemAccountID = contextItems[0].account.id;\n        newItems.push({\n          id: contextItems.map((i) => i.id),\n          items: contextItems,\n          type: contextItems.every((it) => it.account.id === firstItemAccountID)\n            ? 'thread'\n            : 'conversation',\n        });\n        appliedContextIndices.push(i);\n        return;\n      }\n    }\n    newItems.push(item);\n  });\n\n  return newItems;\n}\n","import { useLayoutEffect, useState } from 'preact/hooks';\n\nexport default function useScroll({\n  scrollableRef,\n  distanceFromStart = 1, // ratio of clientHeight/clientWidth\n  distanceFromEnd = 1, // ratio of clientHeight/clientWidth\n  scrollThresholdStart = 10,\n  scrollThresholdEnd = 10,\n  direction = 'vertical',\n  distanceFromStartPx: _distanceFromStartPx,\n  distanceFromEndPx: _distanceFromEndPx,\n} = {}) {\n  const [scrollDirection, setScrollDirection] = useState(null);\n  const [reachStart, setReachStart] = useState(false);\n  const [reachEnd, setReachEnd] = useState(false);\n  const [nearReachStart, setNearReachStart] = useState(false);\n  const [nearReachEnd, setNearReachEnd] = useState(false);\n  const isVertical = direction === 'vertical';\n\n  useLayoutEffect(() => {\n    const scrollableElement = scrollableRef.current;\n    if (!scrollableElement) return {};\n    let previousScrollStart = isVertical\n      ? scrollableElement.scrollTop\n      : scrollableElement.scrollLeft;\n\n    function onScroll() {\n      const {\n        scrollTop,\n        scrollLeft,\n        scrollHeight,\n        scrollWidth,\n        clientHeight,\n        clientWidth,\n      } = scrollableElement;\n      const scrollStart = isVertical ? scrollTop : scrollLeft;\n      const scrollDimension = isVertical ? scrollHeight : scrollWidth;\n      const clientDimension = isVertical ? clientHeight : clientWidth;\n      const scrollDistance = Math.abs(scrollStart - previousScrollStart);\n      const distanceFromStartPx =\n        _distanceFromStartPx ||\n        Math.min(\n          clientDimension * distanceFromStart,\n          scrollDimension,\n          scrollStart,\n        );\n      const distanceFromEndPx =\n        _distanceFromEndPx ||\n        Math.min(\n          clientDimension * distanceFromEnd,\n          scrollDimension,\n          scrollDimension - scrollStart - clientDimension,\n        );\n\n      if (\n        scrollDistance >=\n        (previousScrollStart < scrollStart\n          ? scrollThresholdEnd\n          : scrollThresholdStart)\n      ) {\n        setScrollDirection(previousScrollStart < scrollStart ? 'end' : 'start');\n        previousScrollStart = scrollStart;\n      }\n\n      setReachStart(scrollStart <= 0);\n      setReachEnd(scrollStart + clientDimension >= scrollDimension);\n      setNearReachStart(scrollStart <= distanceFromStartPx);\n      setNearReachEnd(\n        scrollStart + clientDimension >= scrollDimension - distanceFromEndPx,\n      );\n    }\n\n    scrollableElement.addEventListener('scroll', onScroll, { passive: true });\n\n    return () => scrollableElement.removeEventListener('scroll', onScroll);\n  }, [\n    distanceFromStart,\n    distanceFromEnd,\n    scrollThresholdStart,\n    scrollThresholdEnd,\n  ]);\n\n  return {\n    scrollDirection,\n    reachStart,\n    reachEnd,\n    nearReachStart,\n    nearReachEnd,\n    init: () => {\n      if (scrollableRef.current) {\n        scrollableRef.current.dispatchEvent(new Event('scroll'));\n      }\n    },\n  };\n}\n","import './nav-menu.css';\n\nimport { ControlledMenu, MenuDivider, MenuItem } from '@szhsin/react-menu';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useLongPress } from 'use-long-press';\nimport { useSnapshot } from 'valtio';\n\nimport { api } from '../utils/api';\nimport safeBoundingBoxPadding from '../utils/safe-bounding-box-padding';\nimport states from '../utils/states';\nimport store from '../utils/store';\n\nimport Avatar from './avatar';\nimport Icon from './icon';\nimport MenuLink from './menu-link';\n\nfunction NavMenu(props) {\n  const snapStates = useSnapshot(states);\n  const { masto, instance, authenticated } = api();\n\n  const [currentAccount, setCurrentAccount] = useState();\n  const [moreThanOneAccount, setMoreThanOneAccount] = useState(false);\n\n  useEffect(() => {\n    const accounts = store.local.getJSON('accounts') || [];\n    const acc = accounts.find(\n      (account) => account.info.id === store.session.get('currentAccount'),\n    );\n    if (acc) setCurrentAccount(acc);\n    setMoreThanOneAccount(accounts.length > 1);\n  }, []);\n\n  // Home = Following\n  // But when in multi-column mode, Home becomes columns of anything\n  // User may choose pin or not to pin Following\n  // If user doesn't pin Following, we show it in the menu\n  const showFollowing =\n    (snapStates.settings.shortcutsColumnsMode ||\n      snapStates.settings.shortcutsViewMode === 'multi-column') &&\n    !snapStates.shortcuts.find((pin) => pin.type === 'following');\n\n  const bindLongPress = useLongPress(\n    () => {\n      states.showAccounts = true;\n    },\n    {\n      threshold: 600,\n      detect: 'touch',\n      cancelOnMovement: true,\n    },\n  );\n\n  const buttonRef = useRef();\n  const [menuState, setMenuState] = useState(undefined);\n\n  const boundingBoxPadding = safeBoundingBoxPadding([\n    0,\n    0,\n    snapStates.settings.shortcutsViewMode === 'tab-menu-bar' ? 50 : 0,\n    0,\n  ]);\n\n  const mutesIterator = useRef();\n  async function fetchMutes(firstLoad) {\n    if (firstLoad || !mutesIterator.current) {\n      mutesIterator.current = masto.v1.mutes.list({\n        limit: 80,\n      });\n    }\n    const results = await mutesIterator.current.next();\n    return results;\n  }\n\n  const blocksIterator = useRef();\n  async function fetchBlocks(firstLoad) {\n    if (firstLoad || !blocksIterator.current) {\n      blocksIterator.current = masto.v1.blocks.list({\n        limit: 80,\n      });\n    }\n    const results = await blocksIterator.current.next();\n    return results;\n  }\n\n  return (\n    <>\n      <button\n        ref={buttonRef}\n        type=\"button\"\n        class={`button plain nav-menu-button ${\n          moreThanOneAccount ? 'with-avatar' : ''\n        } ${open ? 'active' : ''}`}\n        style={{ position: 'relative' }}\n        onClick={() => {\n          setMenuState((state) => (!state ? 'open' : undefined));\n        }}\n        onContextMenu={(e) => {\n          e.preventDefault();\n          states.showAccounts = true;\n        }}\n        {...bindLongPress()}\n      >\n        {moreThanOneAccount && (\n          <Avatar\n            url={\n              currentAccount?.info?.avatar || currentAccount?.info?.avatarStatic\n            }\n            size=\"l\"\n            squircle={currentAccount?.info?.bot}\n          />\n        )}\n        <Icon icon=\"menu\" size={moreThanOneAccount ? 's' : 'l'} />\n      </button>\n      <ControlledMenu\n        menuClassName=\"nav-menu\"\n        state={menuState}\n        anchorRef={buttonRef}\n        onClose={() => {\n          setMenuState(undefined);\n        }}\n        containerProps={{\n          style: {\n            zIndex: 10,\n          },\n          onClick: () => {\n            setMenuState(undefined);\n          },\n        }}\n        portal={{\n          target: document.body,\n        }}\n        {...props}\n        overflow=\"auto\"\n        viewScroll=\"close\"\n        position=\"anchor\"\n        align=\"center\"\n        boundingBoxPadding={boundingBoxPadding}\n        unmountOnClose\n      >\n        {!!snapStates.appVersion?.commitHash &&\n          __COMMIT_HASH__ !== snapStates.appVersion.commitHash && (\n            <div class=\"top-menu\">\n              <MenuItem\n                onClick={() => {\n                  const yes = confirm('Reload page now to update?');\n                  if (yes) {\n                    (async () => {\n                      try {\n                        location.reload();\n                      } catch (e) {}\n                    })();\n                  }\n                }}\n              >\n                <Icon icon=\"sparkles\" class=\"sparkle-icon\" size=\"l\" />{' '}\n                <span>New update available…</span>\n              </MenuItem>\n              <MenuDivider />\n            </div>\n          )}\n        <section>\n          <MenuLink to=\"/\">\n            <Icon icon=\"home\" size=\"l\" /> <span>Home</span>\n          </MenuLink>\n          {authenticated && (\n            <>\n              {showFollowing && (\n                <MenuLink to=\"/following\">\n                  <Icon icon=\"following\" size=\"l\" /> <span>Following</span>\n                </MenuLink>\n              )}\n              <MenuLink to=\"/mentions\">\n                <Icon icon=\"at\" size=\"l\" /> <span>Mentions</span>\n              </MenuLink>\n              <MenuLink to=\"/notifications\">\n                <Icon icon=\"notification\" size=\"l\" /> <span>Notifications</span>\n                {snapStates.notificationsShowNew && (\n                  <sup title=\"New\" style={{ opacity: 0.5 }}>\n                    {' '}\n                    &bull;\n                  </sup>\n                )}\n              </MenuLink>\n              <MenuDivider />\n              <MenuLink to=\"/l\">\n                <Icon icon=\"list\" size=\"l\" /> <span>Lists</span>\n              </MenuLink>\n              <MenuLink to=\"/ft\">\n                <Icon icon=\"hashtag\" size=\"l\" /> <span>Followed Hashtags</span>\n              </MenuLink>\n              <MenuLink to=\"/b\">\n                <Icon icon=\"bookmark\" size=\"l\" /> <span>Bookmarks</span>\n              </MenuLink>\n              <MenuLink to=\"/f\">\n                <Icon icon=\"heart\" size=\"l\" /> <span>Favourites</span>\n              </MenuLink>\n            </>\n          )}\n          <MenuDivider />\n          <MenuLink to={`/search`}>\n            <Icon icon=\"search\" size=\"l\" /> <span>Search</span>\n          </MenuLink>\n          <MenuLink to={`/${instance}/p/l`}>\n            <Icon icon=\"group\" size=\"l\" /> <span>Local</span>\n          </MenuLink>\n          <MenuLink to={`/${instance}/p`}>\n            <Icon icon=\"earth\" size=\"l\" /> <span>Federated</span>\n          </MenuLink>\n          <MenuLink to={`/${instance}/trending`}>\n            <Icon icon=\"chart\" size=\"l\" /> <span>Trending</span>\n          </MenuLink>\n        </section>\n        <section>\n          {authenticated ? (\n            <>\n              <MenuDivider />\n              {currentAccount?.info?.id && (\n                <MenuLink to={`/${instance}/a/${currentAccount.info.id}`}>\n                  <Icon icon=\"user\" size=\"l\" /> <span>Profile</span>\n                </MenuLink>\n              )}\n              <MenuItem\n                onClick={() => {\n                  states.showAccounts = true;\n                }}\n              >\n                <Icon icon=\"group\" size=\"l\" /> <span>Accounts&hellip;</span>\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  states.showGenericAccounts = {\n                    id: 'mute',\n                    heading: 'Muted users',\n                    fetchAccounts: fetchMutes,\n                  };\n                }}\n              >\n                <Icon icon=\"mute\" size=\"l\" /> Muted users&hellip;\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  states.showGenericAccounts = {\n                    id: 'block',\n                    heading: 'Blocked users',\n                    fetchAccounts: fetchBlocks,\n                  };\n                }}\n              >\n                <Icon icon=\"block\" size=\"l\" />\n                Blocked users&hellip;\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  states.showKeyboardShortcutsHelp = true;\n                }}\n              >\n                <Icon icon=\"keyboard\" size=\"l\" />{' '}\n                <span>Keyboard shortcuts</span>\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  states.showShortcutsSettings = true;\n                }}\n              >\n                <Icon icon=\"shortcut\" size=\"l\" />{' '}\n                <span>Shortcuts Settings&hellip;</span>\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  states.showSettings = true;\n                }}\n              >\n                <Icon icon=\"gear\" size=\"l\" /> <span>Settings&hellip;</span>\n              </MenuItem>\n            </>\n          ) : (\n            <>\n              <MenuDivider />\n              <MenuLink to=\"/login\">\n                <Icon icon=\"user\" size=\"l\" /> <span>Log in</span>\n              </MenuLink>\n              <MenuItem\n                onClick={() => {\n                  states.showSettings = true;\n                }}\n              >\n                <Icon icon=\"gear\" size=\"l\" /> <span>Settings&hellip;</span>\n              </MenuItem>\n            </>\n          )}\n        </section>\n      </ControlledMenu>\n    </>\n  );\n}\n\nexport default NavMenu;\n","import { useIdle } from '@uidotdev/usehooks';\nimport { useCallback, useEffect, useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { InView } from 'react-intersection-observer';\nimport { useDebouncedCallback } from 'use-debounce';\nimport { useSnapshot } from 'valtio';\n\nimport states, { statusKey } from '../utils/states';\nimport statusPeek from '../utils/status-peek';\nimport { groupBoosts, groupContext } from '../utils/timeline-utils';\nimport useInterval from '../utils/useInterval';\nimport usePageVisibility from '../utils/usePageVisibility';\nimport useScroll from '../utils/useScroll';\n\nimport Icon from './icon';\nimport Link from './link';\nimport NavMenu from './nav-menu';\nimport Status from './status';\n\nconst scrollIntoViewOptions = {\n  block: 'nearest',\n  inline: 'center',\n  behavior: 'smooth',\n};\n\nfunction Timeline({\n  title,\n  titleComponent,\n  id,\n  instance,\n  emptyText,\n  errorText,\n  useItemID, // use statusID instead of status object, assuming it's already in states\n  boostsCarousel,\n  fetchItems = () => {},\n  checkForUpdates = () => {},\n  checkForUpdatesInterval = 60_000, // 1 minute\n  headerStart,\n  headerEnd,\n  timelineStart,\n  allowFilters,\n  refresh,\n}) {\n  const snapStates = useSnapshot(states);\n  const [items, setItems] = useState([]);\n  const [uiState, setUIState] = useState('default');\n  const [showMore, setShowMore] = useState(false);\n  const [showNew, setShowNew] = useState(false);\n  const [visible, setVisible] = useState(true);\n  const scrollableRef = useRef();\n\n  console.debug('RENDER Timeline', id, refresh);\n\n  const loadItems = useDebouncedCallback(\n    (firstLoad) => {\n      setShowNew(false);\n      if (uiState === 'loading') return;\n      setUIState('loading');\n      (async () => {\n        try {\n          let { done, value } = await fetchItems(firstLoad);\n          if (Array.isArray(value)) {\n            if (boostsCarousel) {\n              value = groupBoosts(value);\n            }\n            value = groupContext(value);\n            console.log(value);\n            if (firstLoad) {\n              setItems(value);\n            } else {\n              setItems((items) => [...items, ...value]);\n            }\n            if (!value.length) done = true;\n            setShowMore(!done);\n          } else {\n            setShowMore(false);\n          }\n          setUIState('default');\n        } catch (e) {\n          console.error(e);\n          setUIState('error');\n        } finally {\n          loadItems.cancel();\n        }\n      })();\n    },\n    1500,\n    {\n      leading: true,\n      trailing: false,\n    },\n  );\n\n  const itemsSelector = '.timeline-item, .timeline-item-alt';\n\n  const jRef = useHotkeys('j, shift+j', (_, handler) => {\n    // focus on next status after active item\n    const activeItem = document.activeElement.closest(itemsSelector);\n    const activeItemRect = activeItem?.getBoundingClientRect();\n    const allItems = Array.from(\n      scrollableRef.current.querySelectorAll(itemsSelector),\n    );\n    if (\n      activeItem &&\n      activeItemRect.top < scrollableRef.current.clientHeight &&\n      activeItemRect.bottom > 0\n    ) {\n      const activeItemIndex = allItems.indexOf(activeItem);\n      let nextItem = allItems[activeItemIndex + 1];\n      if (handler.shift) {\n        // get next status that's not .timeline-item-alt\n        nextItem = allItems.find(\n          (item, index) =>\n            index > activeItemIndex &&\n            !item.classList.contains('timeline-item-alt'),\n        );\n      }\n      if (nextItem) {\n        nextItem.focus();\n        nextItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostItem = allItems.find((item) => {\n        const itemRect = item.getBoundingClientRect();\n        return itemRect.top >= 44 && itemRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostItem) {\n        topmostItem.focus();\n        topmostItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    }\n  });\n\n  const kRef = useHotkeys('k, shift+k', (_, handler) => {\n    // focus on previous status after active item\n    const activeItem = document.activeElement.closest(itemsSelector);\n    const activeItemRect = activeItem?.getBoundingClientRect();\n    const allItems = Array.from(\n      scrollableRef.current.querySelectorAll(itemsSelector),\n    );\n    if (\n      activeItem &&\n      activeItemRect.top < scrollableRef.current.clientHeight &&\n      activeItemRect.bottom > 0\n    ) {\n      const activeItemIndex = allItems.indexOf(activeItem);\n      let prevItem = allItems[activeItemIndex - 1];\n      if (handler.shift) {\n        // get prev status that's not .timeline-item-alt\n        prevItem = allItems.findLast(\n          (item, index) =>\n            index < activeItemIndex &&\n            !item.classList.contains('timeline-item-alt'),\n        );\n      }\n      if (prevItem) {\n        prevItem.focus();\n        prevItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostItem = allItems.find((item) => {\n        const itemRect = item.getBoundingClientRect();\n        return itemRect.top >= 44 && itemRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostItem) {\n        topmostItem.focus();\n        topmostItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    }\n  });\n\n  const oRef = useHotkeys(['enter', 'o'], () => {\n    // open active status\n    const activeItem = document.activeElement.closest(itemsSelector);\n    if (activeItem) {\n      activeItem.click();\n    }\n  });\n\n  const {\n    scrollDirection,\n    nearReachStart,\n    nearReachEnd,\n    reachStart,\n    reachEnd,\n  } = useScroll({\n    scrollableRef,\n    distanceFromEnd: 2,\n    scrollThresholdStart: 44,\n  });\n\n  useEffect(() => {\n    scrollableRef.current?.scrollTo({ top: 0 });\n    loadItems(true);\n  }, []);\n  useEffect(() => {\n    loadItems(true);\n  }, [refresh]);\n\n  useEffect(() => {\n    if (reachStart) {\n      loadItems(true);\n    }\n  }, [reachStart]);\n\n  useEffect(() => {\n    if (nearReachEnd || (reachEnd && showMore)) {\n      loadItems();\n    }\n  }, [nearReachEnd, showMore]);\n\n  const idle = useIdle(5000);\n  console.debug('🧘‍♀️ IDLE', idle);\n  const loadOrCheckUpdates = useCallback(\n    async ({ disableHoverCheck = false } = {}) => {\n      console.log('✨ Load or check updates', {\n        autoRefresh: snapStates.settings.autoRefresh,\n        scrollTop: scrollableRef.current.scrollTop,\n        disableHoverCheck,\n        idle,\n        inBackground: inBackground(),\n      });\n      if (\n        snapStates.settings.autoRefresh &&\n        scrollableRef.current.scrollTop === 0 &&\n        (disableHoverCheck || idle) &&\n        !inBackground()\n      ) {\n        console.log('✨ Load updates', snapStates.settings.autoRefresh);\n        loadItems(true);\n      } else {\n        console.log('✨ Check updates', snapStates.settings.autoRefresh);\n        const hasUpdate = await checkForUpdates();\n        if (hasUpdate) {\n          console.log('✨ Has new updates', id);\n          setShowNew(true);\n        }\n      }\n    },\n    [id, idle, loadItems, checkForUpdates, snapStates.settings.autoRefresh],\n  );\n\n  const lastHiddenTime = useRef();\n  usePageVisibility(\n    (visible) => {\n      if (visible) {\n        const timeDiff = Date.now() - lastHiddenTime.current;\n        if (!lastHiddenTime.current || timeDiff > 1000 * 60) {\n          loadOrCheckUpdates({\n            disableHoverCheck: true,\n          });\n        }\n      } else {\n        lastHiddenTime.current = Date.now();\n      }\n      setVisible(visible);\n    },\n    [checkForUpdates, loadOrCheckUpdates, snapStates.settings.autoRefresh],\n  );\n\n  // checkForUpdates interval\n  useInterval(\n    loadOrCheckUpdates,\n    visible && !showNew ? checkForUpdatesInterval : null,\n  );\n\n  const hiddenUI = scrollDirection === 'end' && !nearReachStart;\n\n  return (\n    <div\n      id={`${id}-page`}\n      class=\"deck-container\"\n      ref={(node) => {\n        scrollableRef.current = node;\n        jRef.current = node;\n        kRef.current = node;\n        oRef.current = node;\n      }}\n      tabIndex=\"-1\"\n    >\n      <div class=\"timeline-deck deck\">\n        <header\n          hidden={hiddenUI}\n          onClick={(e) => {\n            if (!e.target.closest('a, button')) {\n              scrollableRef.current?.scrollTo({\n                top: 0,\n                behavior: 'smooth',\n              });\n            }\n          }}\n          onDblClick={(e) => {\n            if (!e.target.closest('a, button')) {\n              loadItems(true);\n            }\n          }}\n          class={uiState === 'loading' ? 'loading' : ''}\n        >\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n              {headerStart !== null && headerStart !== undefined ? (\n                headerStart\n              ) : (\n                <Link to=\"/\" class=\"button plain home-button\">\n                  <Icon icon=\"home\" size=\"l\" />\n                </Link>\n              )}\n            </div>\n            {title && (titleComponent ? titleComponent : <h1>{title}</h1>)}\n            <div class=\"header-side\">\n              {/* <Loader hidden={uiState !== 'loading'} /> */}\n              {!!headerEnd && headerEnd}\n            </div>\n          </div>\n          {items.length > 0 &&\n            uiState !== 'loading' &&\n            !hiddenUI &&\n            showNew && (\n              <button\n                class=\"updates-button shiny-pill\"\n                type=\"button\"\n                onClick={() => {\n                  loadItems(true);\n                  scrollableRef.current?.scrollTo({\n                    top: 0,\n                    behavior: 'smooth',\n                  });\n                }}\n              >\n                <Icon icon=\"arrow-up\" /> New posts\n              </button>\n            )}\n        </header>\n        {!!timelineStart && <div class=\"timeline-start\">{timelineStart}</div>}\n        {!!items.length ? (\n          <>\n            <ul class=\"timeline\">\n              {items.map((status) => {\n                const { id: statusID, reblog, items, type, _pinned } = status;\n                const actualStatusID = reblog?.id || statusID;\n                const url = instance\n                  ? `/${instance}/s/${actualStatusID}`\n                  : `/s/${actualStatusID}`;\n                let title = '';\n                if (type === 'boosts') {\n                  title = `${items.length} Boosts`;\n                } else if (type === 'pinned') {\n                  title = 'Pinned posts';\n                }\n                const isCarousel = type === 'boosts' || type === 'pinned';\n                if (items) {\n                  if (isCarousel) {\n                    // Here, we don't hide filtered posts, but we sort them last\n                    items.sort((a, b) => {\n                      if (a._filtered && !b._filtered) {\n                        return 1;\n                      }\n                      if (!a._filtered && b._filtered) {\n                        return -1;\n                      }\n                      return 0;\n                    });\n                    return (\n                      <li\n                        key={`timeline-${statusID}`}\n                        class=\"timeline-item-carousel\"\n                      >\n                        <StatusCarousel\n                          title={title}\n                          class={`${type}-carousel`}\n                        >\n                          {items.map((item) => {\n                            const { id: statusID, reblog } = item;\n                            const actualStatusID = reblog?.id || statusID;\n                            const url = instance\n                              ? `/${instance}/s/${actualStatusID}`\n                              : `/s/${actualStatusID}`;\n                            return (\n                              <li key={statusID}>\n                                <Link\n                                  class=\"status-carousel-link timeline-item-alt\"\n                                  to={url}\n                                >\n                                  {useItemID ? (\n                                    <Status\n                                      statusID={statusID}\n                                      instance={instance}\n                                      size=\"s\"\n                                      contentTextWeight\n                                      allowFilters={allowFilters}\n                                    />\n                                  ) : (\n                                    <Status\n                                      status={item}\n                                      instance={instance}\n                                      size=\"s\"\n                                      contentTextWeight\n                                      allowFilters={allowFilters}\n                                    />\n                                  )}\n                                </Link>\n                              </li>\n                            );\n                          })}\n                        </StatusCarousel>\n                      </li>\n                    );\n                  }\n                  const manyItems = items.length > 3;\n                  return items.map((item, i) => {\n                    const { id: statusID, _differentAuthor } = item;\n                    const url = instance\n                      ? `/${instance}/s/${statusID}`\n                      : `/s/${statusID}`;\n                    const isMiddle = i > 0 && i < items.length - 1;\n                    const isSpoiler = item.sensitive && !!item.spoilerText;\n                    const showCompact =\n                      (!_differentAuthor && isSpoiler && i > 0) ||\n                      (manyItems &&\n                        isMiddle &&\n                        (type === 'thread' ||\n                          (type === 'conversation' &&\n                            !_differentAuthor &&\n                            !items[i - 1]._differentAuthor &&\n                            !items[i + 1]._differentAuthor)));\n                    return (\n                      <li\n                        key={`timeline-${statusID}`}\n                        class={`timeline-item-container timeline-item-container-type-${type} timeline-item-container-${\n                          i === 0\n                            ? 'start'\n                            : i === items.length - 1\n                            ? 'end'\n                            : 'middle'\n                        } ${\n                          _differentAuthor ? 'timeline-item-diff-author' : ''\n                        }`}\n                      >\n                        <Link class=\"status-link timeline-item\" to={url}>\n                          {showCompact ? (\n                            <TimelineStatusCompact\n                              status={item}\n                              instance={instance}\n                            />\n                          ) : useItemID ? (\n                            <Status\n                              statusID={statusID}\n                              instance={instance}\n                              allowFilters={allowFilters}\n                            />\n                          ) : (\n                            <Status\n                              status={item}\n                              instance={instance}\n                              allowFilters={allowFilters}\n                            />\n                          )}\n                        </Link>\n                      </li>\n                    );\n                  });\n                }\n                return (\n                  <li key={`timeline-${statusID + _pinned}`}>\n                    <Link class=\"status-link timeline-item\" to={url}>\n                      {useItemID ? (\n                        <Status\n                          statusID={statusID}\n                          instance={instance}\n                          allowFilters={allowFilters}\n                        />\n                      ) : (\n                        <Status\n                          status={status}\n                          instance={instance}\n                          allowFilters={allowFilters}\n                        />\n                      )}\n                    </Link>\n                  </li>\n                );\n              })}\n              {showMore && uiState === 'loading' && (\n                <>\n                  <li\n                    style={{\n                      height: '20vh',\n                    }}\n                  >\n                    <Status skeleton />\n                  </li>\n                  <li\n                    style={{\n                      height: '25vh',\n                    }}\n                  >\n                    <Status skeleton />\n                  </li>\n                </>\n              )}\n            </ul>\n            {uiState === 'default' &&\n              (showMore ? (\n                <InView\n                  onChange={(inView) => {\n                    if (inView) {\n                      loadItems();\n                    }\n                  }}\n                >\n                  <button\n                    type=\"button\"\n                    class=\"plain block\"\n                    onClick={() => loadItems()}\n                    style={{ marginBlockEnd: '6em' }}\n                  >\n                    Show more&hellip;\n                  </button>\n                </InView>\n              ) : (\n                <p class=\"ui-state insignificant\">The end.</p>\n              ))}\n          </>\n        ) : uiState === 'loading' ? (\n          <ul class=\"timeline\">\n            {Array.from({ length: 5 }).map((_, i) => (\n              <li key={i}>\n                <Status skeleton />\n              </li>\n            ))}\n          </ul>\n        ) : (\n          uiState !== 'error' && <p class=\"ui-state\">{emptyText}</p>\n        )}\n        {uiState === 'error' && (\n          <p class=\"ui-state\">\n            {errorText}\n            <br />\n            <br />\n            <button\n              class=\"button plain\"\n              onClick={() => loadItems(!items.length)}\n            >\n              Try again\n            </button>\n          </p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction StatusCarousel({ title, class: className, children }) {\n  const carouselRef = useRef();\n  const { reachStart, reachEnd, init } = useScroll({\n    scrollableRef: carouselRef,\n    direction: 'horizontal',\n  });\n  useEffect(() => {\n    init?.();\n  }, []);\n\n  return (\n    <div class={`status-carousel ${className}`}>\n      <header>\n        <h3>{title}</h3>\n        <span>\n          <button\n            type=\"button\"\n            class=\"small plain2\"\n            disabled={reachStart}\n            onClick={() => {\n              carouselRef.current?.scrollBy({\n                left: -Math.min(320, carouselRef.current?.offsetWidth),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"chevron-left\" />\n          </button>{' '}\n          <button\n            type=\"button\"\n            class=\"small plain2\"\n            disabled={reachEnd}\n            onClick={() => {\n              carouselRef.current?.scrollBy({\n                left: Math.min(320, carouselRef.current?.offsetWidth),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"chevron-right\" />\n          </button>\n        </span>\n      </header>\n      <ul ref={carouselRef}>{children}</ul>\n    </div>\n  );\n}\n\nfunction TimelineStatusCompact({ status, instance }) {\n  const snapStates = useSnapshot(states);\n  const { id } = status;\n  const statusPeekText = statusPeek(status);\n  const sKey = statusKey(id, instance);\n  return (\n    <article class=\"status compact-thread\" tabindex=\"-1\">\n      {!!snapStates.statusThreadNumber[sKey] ? (\n        <div class=\"status-thread-badge\">\n          <Icon icon=\"thread\" size=\"s\" />\n          {snapStates.statusThreadNumber[sKey]\n            ? ` ${snapStates.statusThreadNumber[sKey]}/X`\n            : ''}\n        </div>\n      ) : (\n        <div class=\"status-thread-badge\">\n          <Icon icon=\"thread\" size=\"s\" />\n        </div>\n      )}\n      <div class=\"content-compact\" title={statusPeekText}>\n        {statusPeekText}\n        {status.sensitive && status.spoilerText && (\n          <>\n            {' '}\n            <span class=\"spoiler-badge\">\n              <Icon icon=\"eye-close\" size=\"s\" />\n            </span>\n          </>\n        )}\n      </div>\n    </article>\n  );\n}\n\nfunction inBackground() {\n  return !!document.querySelector('.deck-backdrop, #modal-container > *');\n}\n\nexport default Timeline;\n","import { MenuItem } from '@szhsin/react-menu';\nimport { useEffect, useMemo, useRef, useState } from 'preact/hooks';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport AccountInfo from '../components/account-info';\nimport EmojiText from '../components/emoji-text';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Menu2 from '../components/menu2';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction AccountStatuses() {\n  const snapStates = useSnapshot(states);\n  const { id, ...params } = useParams();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const excludeReplies = !searchParams.get('replies');\n  const excludeBoosts = !!searchParams.get('boosts');\n  const tagged = searchParams.get('tagged');\n  const media = !!searchParams.get('media');\n  const { masto, instance, authenticated } = api({ instance: params.instance });\n  const accountStatusesIterator = useRef();\n  async function fetchAccountStatuses(firstLoad) {\n    const results = [];\n    if (firstLoad) {\n      const { value: pinnedStatuses } = await masto.v1.accounts\n        .$select(id)\n        .statuses.list({\n          pinned: true,\n        })\n        .next();\n      if (pinnedStatuses?.length && !tagged && !media) {\n        pinnedStatuses.forEach((status) => {\n          status._pinned = true;\n          saveStatus(status, instance);\n        });\n        if (pinnedStatuses.length >= 3) {\n          const pinnedStatusesIds = pinnedStatuses.map((status) => status.id);\n          results.push({\n            id: pinnedStatusesIds,\n            items: pinnedStatuses,\n            type: 'pinned',\n          });\n        } else {\n          results.push(...pinnedStatuses);\n        }\n      }\n    }\n    if (firstLoad || !accountStatusesIterator.current) {\n      accountStatusesIterator.current = masto.v1.accounts\n        .$select(id)\n        .statuses.list({\n          limit: LIMIT,\n          exclude_replies: excludeReplies,\n          exclude_reblogs: excludeBoosts,\n          only_media: media,\n          tagged,\n        });\n    }\n    const { value, done } = await accountStatusesIterator.current.next();\n    if (value?.length) {\n      results.push(...value);\n\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      value: results,\n      done,\n    };\n  }\n\n  const [account, setAccount] = useState();\n  const [featuredTags, setFeaturedTags] = useState([]);\n  useTitle(\n    `${account?.displayName ? account.displayName + ' ' : ''}@${\n      account?.acct ? account.acct : 'Account posts'\n    }`,\n    '/:instance?/a/:id',\n  );\n  useEffect(() => {\n    (async () => {\n      try {\n        const acc = await masto.v1.accounts.$select(id).fetch();\n        console.log(acc);\n        setAccount(acc);\n      } catch (e) {\n        console.error(e);\n      }\n      try {\n        const featuredTags = await masto.v1.accounts\n          .$select(id)\n          .featuredTags.list(id);\n        console.log({ featuredTags });\n        setFeaturedTags(featuredTags);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [id]);\n\n  const { displayName, acct, emojis } = account || {};\n\n  const filterBarRef = useRef();\n  const TimelineStart = useMemo(() => {\n    const cachedAccount = snapStates.accounts[`${id}@${instance}`];\n    const filtered = !excludeReplies || excludeBoosts || tagged || media;\n    return (\n      <>\n        <AccountInfo\n          instance={instance}\n          account={cachedAccount || id}\n          fetchAccount={() => masto.v1.accounts.$select(id).fetch()}\n          authenticated={authenticated}\n          standalone\n        />\n        <div class=\"filter-bar\" ref={filterBarRef}>\n          {filtered ? (\n            <Link\n              to={`/${instance}/a/${id}`}\n              class=\"insignificant filter-clear\"\n              title=\"Clear filters\"\n            >\n              <Icon icon=\"x\" size=\"l\" />\n            </Link>\n          ) : (\n            <Icon icon=\"filter\" class=\"insignificant\" size=\"l\" />\n          )}\n          <Link\n            to={`/${instance}/a/${id}${excludeReplies ? '?replies=1' : ''}`}\n            onClick={() => {\n              if (excludeReplies) {\n                showToast('Showing post with replies');\n              }\n            }}\n            class={excludeReplies ? '' : 'is-active'}\n          >\n            + Replies\n          </Link>\n          <Link\n            to={`/${instance}/a/${id}${excludeBoosts ? '' : '?boosts=0'}`}\n            onClick={() => {\n              if (!excludeBoosts) {\n                showToast('Showing posts without boosts');\n              }\n            }}\n            class={!excludeBoosts ? '' : 'is-active'}\n          >\n            - Boosts\n          </Link>\n          <Link\n            to={`/${instance}/a/${id}${media ? '' : '?media=1'}`}\n            onClick={() => {\n              if (!media) {\n                showToast('Showing posts with media');\n              }\n            }}\n            class={media ? 'is-active' : ''}\n          >\n            Media\n          </Link>\n          {featuredTags.map((tag) => (\n            <Link\n              to={`/${instance}/a/${id}${\n                tagged === tag.name\n                  ? ''\n                  : `?tagged=${encodeURIComponent(tag.name)}`\n              }`}\n              onClick={() => {\n                if (tagged !== tag.name) {\n                  showToast(`Showing posts tagged with #${tag.name}`);\n                }\n              }}\n              class={tagged === tag.name ? 'is-active' : ''}\n            >\n              <span>\n                <span class=\"more-insignificant\">#</span>\n                {tag.name}\n              </span>\n              {\n                // The count differs based on instance 😅\n              }\n              {/* <span class=\"filter-count\">{tag.statusesCount}</span> */}\n            </Link>\n          ))}\n        </div>\n      </>\n    );\n  }, [\n    id,\n    instance,\n    authenticated,\n    excludeReplies,\n    excludeBoosts,\n    featuredTags,\n    tagged,\n    media,\n  ]);\n\n  useEffect(() => {\n    // Focus on .is-active\n    const active = filterBarRef.current?.querySelector('.is-active');\n    if (active) {\n      console.log('active', active, active.offsetLeft);\n      filterBarRef.current.scrollTo({\n        behavior: 'smooth',\n        left:\n          active.offsetLeft -\n          (filterBarRef.current.offsetWidth - active.offsetWidth) / 2,\n      });\n    }\n  }, [featuredTags, tagged, media, excludeReplies, excludeBoosts]);\n\n  const accountInstance = useMemo(() => {\n    if (!account?.url) return null;\n    const domain = new URL(account.url).hostname;\n    return domain;\n  }, [account]);\n  const sameInstance = instance === accountInstance;\n  const allowSwitch = !!account && !sameInstance;\n\n  return (\n    <Timeline\n      key={id}\n      title={`${account?.acct ? '@' + account.acct : 'Posts'}`}\n      titleComponent={\n        <h1\n          class=\"header-account\"\n          // onClick={() => {\n          //   states.showAccount = {\n          //     account,\n          //     instance,\n          //   };\n          // }}\n        >\n          <b>\n            <EmojiText text={displayName} emojis={emojis} />\n          </b>\n          <div>\n            <span>@{acct}</span>\n          </div>\n        </h1>\n      }\n      id=\"account-statuses\"\n      instance={instance}\n      emptyText=\"Nothing to see here yet.\"\n      errorText=\"Unable to load posts\"\n      fetchItems={fetchAccountStatuses}\n      useItemID\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      timelineStart={TimelineStart}\n      refresh={excludeReplies + excludeBoosts + tagged + media}\n      headerEnd={\n        <Menu2\n          portal\n          // setDownOverflow\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          <MenuItem\n            disabled={!allowSwitch}\n            onClick={() => {\n              (async () => {\n                try {\n                  const { masto } = api({\n                    instance: accountInstance,\n                  });\n                  const acc = await masto.v1.accounts.lookup({\n                    acct: account.acct,\n                  });\n                  const { id } = acc;\n                  location.hash = `/${accountInstance}/a/${id}`;\n                } catch (e) {\n                  console.error(e);\n                  alert('Unable to fetch account info');\n                }\n              })();\n            }}\n          >\n            <Icon icon=\"transfer\" />{' '}\n            <small class=\"menu-double-lines\">\n              Switch to account's instance (<b>{accountInstance}</b>)\n            </small>\n          </MenuItem>\n        </Menu2>\n      }\n    />\n  );\n}\n\nexport default AccountStatuses;\n","import { useRef } from 'preact/hooks';\n\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Bookmarks() {\n  useTitle('Bookmarks', '/b');\n  const { masto, instance } = api();\n  const bookmarksIterator = useRef();\n  async function fetchBookmarks(firstLoad) {\n    if (firstLoad || !bookmarksIterator.current) {\n      bookmarksIterator.current = masto.v1.bookmarks.list({ limit: LIMIT });\n    }\n    return await bookmarksIterator.current.next();\n  }\n\n  return (\n    <Timeline\n      title=\"Bookmarks\"\n      id=\"bookmarks\"\n      emptyText=\"No bookmarks yet. Go bookmark something!\"\n      errorText=\"Unable to load bookmarks\"\n      instance={instance}\n      fetchItems={fetchBookmarks}\n    />\n  );\n}\n\nexport default Bookmarks;\n","import { useRef } from 'preact/hooks';\n\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Favourites() {\n  useTitle('Favourites', '/f');\n  const { masto, instance } = api();\n  const favouritesIterator = useRef();\n  async function fetchFavourites(firstLoad) {\n    if (firstLoad || !favouritesIterator.current) {\n      favouritesIterator.current = masto.v1.favourites.list({ limit: LIMIT });\n    }\n    return await favouritesIterator.current.next();\n  }\n\n  return (\n    <Timeline\n      title=\"Favourites\"\n      id=\"favourites\"\n      emptyText=\"No favourites yet. Go favourite something!\"\n      errorText=\"Unable to load favourites\"\n      instance={instance}\n      fetchItems={fetchFavourites}\n    />\n  );\n}\n\nexport default Favourites;\n","import { useEffect, useState } from 'preact/hooks';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport NavMenu from '../components/nav-menu';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 200;\n\nfunction FollowedHashtags() {\n  const { masto, instance } = api();\n  useTitle(`Followed Hashtags`, `/ft`);\n  const [uiState, setUIState] = useState('default');\n\n  const [followedHashtags, setFollowedHashtags] = useState([]);\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const iterator = masto.v1.followedTags.list({\n          limit: LIMIT,\n        });\n        const tags = [];\n        do {\n          const { value, done } = await iterator.next();\n          if (done || value?.length === 0) break;\n          tags.push(...value);\n        } while (true);\n        tags.sort((a, b) => a.name.localeCompare(b.name));\n        console.log(tags);\n        setFollowedHashtags(tags);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, []);\n\n  return (\n    <div id=\"followed-hashtags-page\" class=\"deck-container\" tabIndex=\"-1\">\n      <div class=\"timeline-deck deck\">\n        <header>\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n              <Link to=\"/\" class=\"button plain\">\n                <Icon icon=\"home\" size=\"l\" />\n              </Link>\n            </div>\n            <h1>Followed Hashtags</h1>\n            <div class=\"header-side\" />\n          </div>\n        </header>\n        <main>\n          {followedHashtags.length > 0 ? (\n            <ul class=\"link-list\">\n              {followedHashtags.map((tag) => (\n                <li>\n                  <Link\n                    to={\n                      instance ? `/${instance}/t/${tag.name}` : `/t/${tag.name}`\n                    }\n                  >\n                    <Icon icon=\"hashtag\" /> <span>{tag.name}</span>\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          ) : uiState === 'loading' ? (\n            <p class=\"ui-state\">\n              <Loader abrupt />\n            </p>\n          ) : uiState === 'error' ? (\n            <p class=\"ui-state\">Unable to load followed hashtags.</p>\n          ) : (\n            <p class=\"ui-state\">No hashtags followed yet.</p>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default FollowedHashtags;\n","import store from './store';\n\nexport function filteredItem(item, filterContext, currentAccountID) {\n  const { filtered } = item;\n  if (!filtered?.length) return true;\n  const isSelf = currentAccountID && item.account?.id === currentAccountID;\n  if (isSelf) return true;\n  const appliedFilters = filtered.filter((f) => {\n    const { filter } = f;\n    const hasContext = filter.context.includes(filterContext);\n    if (!hasContext) return false;\n    if (!filter.expiresAt) return hasContext;\n    return new Date(filter.expiresAt) > new Date();\n  });\n  if (!appliedFilters.length) return true;\n  const isHidden = appliedFilters.some((f) => f.filter.filterAction === 'hide');\n  console.log({ isHidden, filtered, appliedFilters, item });\n  if (isHidden) return false;\n  const isWarn = appliedFilters.some((f) => f.filter.filterAction === 'warn');\n  if (isWarn) {\n    const filterTitles = appliedFilters.map((f) => f.filter.title);\n    item._filtered = {\n      titles: filterTitles,\n      titlesStr: filterTitles.join(' • '),\n    };\n  }\n  return isWarn;\n}\nexport function filteredItems(items, filterContext) {\n  if (!items?.length) return [];\n  if (!filterContext) return items;\n  const currentAccountID = store.session.get('currentAccount');\n  return items.filter((item) =>\n    filteredItem(item, filterContext, currentAccountID),\n  );\n}\n","import { useEffect, useRef } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { filteredItems } from '../utils/filters';\nimport states from '../utils/states';\nimport { getStatus, saveStatus } from '../utils/states';\nimport { dedupeBoosts } from '../utils/timeline-utils';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Following({ title, path, id, ...props }) {\n  useTitle(title || 'Following', path || '/following');\n  const { masto, streaming, instance } = api();\n  const snapStates = useSnapshot(states);\n  const homeIterator = useRef();\n  const latestItem = useRef();\n\n  console.debug('RENDER Following', title, id);\n\n  async function fetchHome(firstLoad) {\n    if (firstLoad || !homeIterator.current) {\n      homeIterator.current = masto.v1.timelines.home.list({ limit: LIMIT });\n    }\n    const results = await homeIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n        console.log('First load', latestItem.current);\n      }\n\n      value = filteredItems(value, 'home');\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n      value = dedupeBoosts(value, instance);\n\n      // ENFORCE sort by datetime (Latest first)\n      value.sort((a, b) => {\n        const aDate = new Date(a.createdAt);\n        const bDate = new Date(b.createdAt);\n        return bDate - aDate;\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines.home\n        .list({\n          limit: 5,\n          since_id: latestItem.current,\n        })\n        .next();\n      let { value } = results;\n      console.log('checkForUpdates', latestItem.current, value);\n      if (value?.length) {\n        latestItem.current = value[0].id;\n        value = dedupeBoosts(value, instance);\n        value = filteredItems(value, 'home');\n        if (value.some((item) => !item.reblog)) {\n          return true;\n        }\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  useEffect(() => {\n    let sub;\n    (async () => {\n      if (streaming) {\n        sub = streaming.user.subscribe();\n        console.log('🎏 Streaming user', sub);\n        for await (const entry of sub) {\n          if (!sub) break;\n          if (entry.event === 'status.update') {\n            const status = entry.payload;\n            console.log(`🔄 Status ${status.id} updated`);\n            saveStatus(status, instance);\n          } else if (entry.event === 'delete') {\n            const statusID = entry.payload;\n            console.log(`❌ Status ${statusID} deleted`);\n            // delete states.statuses[statusID];\n            const s = getStatus(statusID, instance);\n            if (s) s._deleted = true;\n          }\n        }\n      }\n    })();\n    return () => {\n      sub?.unsubscribe?.();\n      sub = null;\n    };\n  }, [streaming]);\n\n  return (\n    <Timeline\n      title={title || 'Following'}\n      id={id || 'following'}\n      emptyText=\"Nothing to see here.\"\n      errorText=\"Unable to load posts.\"\n      instance={instance}\n      fetchItems={fetchHome}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      {...props}\n      allowFilters\n    />\n  );\n}\n\nexport default Following;\n","import {\n  FocusableItem,\n  MenuDivider,\n  MenuGroup,\n  MenuItem,\n} from '@szhsin/react-menu';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useNavigate, useParams } from 'react-router-dom';\n\nimport Icon from '../components/icon';\nimport Menu2 from '../components/menu2';\nimport MenuConfirm from '../components/menu-confirm';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\n// Limit is 4 per \"mode\"\n// https://github.com/mastodon/mastodon/issues/15194\n// Hard-coded https://github.com/mastodon/mastodon/blob/19614ba2477f3d12468f5ec251ce1cc5f8c6210c/app/models/tag_feed.rb#L4\nconst TAGS_LIMIT_PER_MODE = 4;\nconst TOTAL_TAGS_LIMIT = TAGS_LIMIT_PER_MODE + 1;\n\nfunction Hashtags({ columnMode, ...props }) {\n  // const navigate = useNavigate();\n  let { hashtag, ...params } = columnMode ? {} : useParams();\n  if (props.hashtag) hashtag = props.hashtag;\n  let hashtags = hashtag.trim().split(/[\\s+]+/);\n  hashtags.sort();\n  hashtag = hashtags[0];\n\n  const { masto, instance, authenticated } = api({\n    instance: props?.instance || params.instance,\n  });\n  const { authenticated: currentAuthenticated } = api();\n  const hashtagTitle = hashtags.map((t) => `#${t}`).join(' ');\n  const title = instance ? `${hashtagTitle} on ${instance}` : hashtagTitle;\n  useTitle(title, `/:instance?/t/:hashtag`);\n  const latestItem = useRef();\n\n  // const hashtagsIterator = useRef();\n  const maxID = useRef(undefined);\n  async function fetchHashtags(firstLoad) {\n    // if (firstLoad || !hashtagsIterator.current) {\n    //   hashtagsIterator.current = masto.v1.timelines.tag.$select(hashtag).list({\n    //     limit: LIMIT,\n    //     any: hashtags.slice(1),\n    //   });\n    // }\n    // const results = await hashtagsIterator.current.next();\n\n    // NOTE: Temporary fix for listHashtag not persisting `any` in subsequent calls.\n    const results = await masto.v1.timelines.tag\n      .$select(hashtag)\n      .list({\n        limit: LIMIT,\n        any: hashtags.slice(1),\n        maxId: firstLoad ? undefined : maxID.current,\n      })\n      .next();\n    const { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n\n      maxID.current = value[value.length - 1].id;\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines.tag\n        .$select(hashtag)\n        .list({\n          limit: 1,\n          any: hashtags.slice(1),\n          since_id: latestItem.current,\n        })\n        .next();\n      const { value } = results;\n      if (value?.length) {\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  const [followUIState, setFollowUIState] = useState('default');\n  const [info, setInfo] = useState();\n  // Get hashtag info\n  useEffect(() => {\n    (async () => {\n      try {\n        const info = await masto.v1.tags.$select(hashtag).fetch();\n        console.log(info);\n        setInfo(info);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [hashtag]);\n\n  const reachLimit = hashtags.length >= TOTAL_TAGS_LIMIT;\n\n  return (\n    <Timeline\n      key={instance + hashtagTitle}\n      title={title}\n      titleComponent={\n        !!instance && (\n          <h1 class=\"header-account\">\n            <b>{hashtagTitle}</b>\n            <div>{instance}</div>\n          </h1>\n        )\n      }\n      id=\"hashtag\"\n      instance={instance}\n      emptyText=\"No one has posted anything with this tag yet.\"\n      errorText=\"Unable to load posts with this tag\"\n      fetchItems={fetchHashtags}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      headerEnd={\n        <Menu2\n          portal\n          setDownOverflow\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          {!!info && hashtags.length === 1 && (\n            <>\n              <MenuConfirm\n                subMenu\n                confirm={info.following}\n                confirmLabel={`Unfollow #${hashtag}?`}\n                disabled={followUIState === 'loading' || !authenticated}\n                onClick={() => {\n                  setFollowUIState('loading');\n                  if (info.following) {\n                    // const yes = confirm(`Unfollow #${hashtag}?`);\n                    // if (!yes) {\n                    //   setFollowUIState('default');\n                    //   return;\n                    // }\n                    masto.v1.tags\n                      .$select(hashtag)\n                      .unfollow()\n                      .then(() => {\n                        setInfo({ ...info, following: false });\n                        showToast(`Unfollowed #${hashtag}`);\n                      })\n                      .catch((e) => {\n                        alert(e);\n                        console.error(e);\n                      })\n                      .finally(() => {\n                        setFollowUIState('default');\n                      });\n                  } else {\n                    masto.v1.tags\n                      .$select(hashtag)\n                      .follow()\n                      .then(() => {\n                        setInfo({ ...info, following: true });\n                        showToast(`Followed #${hashtag}`);\n                      })\n                      .catch((e) => {\n                        alert(e);\n                        console.error(e);\n                      })\n                      .finally(() => {\n                        setFollowUIState('default');\n                      });\n                  }\n                }}\n              >\n                {info.following ? (\n                  <>\n                    <Icon icon=\"check-circle\" /> <span>Following…</span>\n                  </>\n                ) : (\n                  <>\n                    <Icon icon=\"plus\" /> <span>Follow</span>\n                  </>\n                )}\n              </MenuConfirm>\n              <MenuDivider />\n            </>\n          )}\n          <FocusableItem className=\"menu-field\" disabled={reachLimit}>\n            {({ ref }) => (\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  const newHashtag = e.target[0].value?.trim?.();\n                  // Use includes but need to be case insensitive\n                  if (\n                    newHashtag &&\n                    !hashtags.some(\n                      (t) => t.toLowerCase() === newHashtag.toLowerCase(),\n                    )\n                  ) {\n                    hashtags.push(newHashtag);\n                    hashtags.sort();\n                    // navigate(\n                    //   instance\n                    //     ? `/${instance}/t/${hashtags.join('+')}`\n                    //     : `/t/${hashtags.join('+')}`,\n                    // );\n                    location.hash = instance\n                      ? `/${instance}/t/${hashtags.join('+')}`\n                      : `/t/${hashtags.join('+')}`;\n                  }\n                }}\n              >\n                <Icon icon=\"hashtag\" />\n                <input\n                  ref={ref}\n                  type=\"text\"\n                  placeholder={\n                    reachLimit ? `Max ${TOTAL_TAGS_LIMIT} tags` : 'Add hashtag'\n                  }\n                  required\n                  autocorrect=\"off\"\n                  autocapitalize=\"off\"\n                  spellcheck={false}\n                  // no spaces, no hashtags\n                  pattern=\"[^#][^\\s#]+[^#]\"\n                  disabled={reachLimit}\n                />\n              </form>\n            )}\n          </FocusableItem>\n          <MenuGroup takeOverflow>\n            {hashtags.map((t, i) => (\n              <MenuItem\n                key={t}\n                disabled={hashtags.length === 1}\n                onClick={(e) => {\n                  hashtags.splice(i, 1);\n                  hashtags.sort();\n                  // navigate(\n                  //   instance\n                  //     ? `/${instance}/t/${hashtags.join('+')}`\n                  //     : `/t/${hashtags.join('+')}`,\n                  // );\n                  location.hash = instance\n                    ? `/${instance}/t/${hashtags.join('+')}`\n                    : `/t/${hashtags.join('+')}`;\n                }}\n              >\n                <Icon icon=\"x\" alt=\"Remove hashtag\" class=\"danger-icon\" />\n                <span>\n                  <span class=\"more-insignificant\">#</span>\n                  {t}\n                </span>\n              </MenuItem>\n            ))}\n          </MenuGroup>\n          <MenuDivider />\n          <MenuItem\n            disabled={!currentAuthenticated}\n            onClick={() => {\n              const shortcut = {\n                type: 'hashtag',\n                hashtag: hashtags.join(' '),\n                instance,\n              };\n              // Check if already exists\n              const exists = states.shortcuts.some(\n                (s) =>\n                  s.type === shortcut.type &&\n                  s.hashtag\n                    .split(/[\\s+]+/)\n                    .sort()\n                    .join(' ') ===\n                    shortcut.hashtag\n                      .split(/[\\s+]+/)\n                      .sort()\n                      .join(' ') &&\n                  (s.instance ? s.instance === shortcut.instance : true),\n              );\n              if (exists) {\n                alert('This shortcut already exists');\n              } else {\n                states.shortcuts.push(shortcut);\n                showToast(`Hashtag shortcut added`);\n              }\n            }}\n          >\n            <Icon icon=\"shortcut\" /> <span>Add to Shorcuts</span>\n          </MenuItem>\n          <MenuItem\n            onClick={() => {\n              let newInstance = prompt(\n                'Enter a new instance e.g. \"mastodon.social\"',\n              );\n              if (!/\\./.test(newInstance)) {\n                if (newInstance) alert('Invalid instance');\n                return;\n              }\n              if (newInstance) {\n                newInstance = newInstance.toLowerCase().trim();\n                // navigate(`/${newInstance}/t/${hashtags.join('+')}`);\n                location.hash = `/${newInstance}/t/${hashtags.join('+')}`;\n              }\n            }}\n          >\n            <Icon icon=\"bus\" /> <span>Go to another instance…</span>\n          </MenuItem>\n        </Menu2>\n      }\n    />\n  );\n}\n\nexport default Hashtags;\n","import './lists.css';\n\nimport { Menu, MenuItem } from '@szhsin/react-menu';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { InView } from 'react-intersection-observer';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport AccountBlock from '../components/account-block';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport ListAddEdit from '../components/list-add-edit';\nimport Menu2 from '../components/menu2';\nimport MenuConfirm from '../components/menu-confirm';\nimport Modal from '../components/modal';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { filteredItems } from '../utils/filters';\nimport states, { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction List(props) {\n  const snapStates = useSnapshot(states);\n  const { masto, instance } = api();\n  const id = props?.id || useParams()?.id;\n  // const navigate = useNavigate();\n  const latestItem = useRef();\n  // const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n\n  const listIterator = useRef();\n  async function fetchList(firstLoad) {\n    if (firstLoad || !listIterator.current) {\n      listIterator.current = masto.v1.timelines.list.$select(id).list({\n        limit: LIMIT,\n      });\n    }\n    const results = await listIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      value = filteredItems(value, 'home');\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines.list.$select(id).list({\n        limit: 1,\n        since_id: latestItem.current,\n      });\n      let { value } = results;\n      value = filteredItems(value, 'home');\n      if (value?.length) {\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  const [list, setList] = useState({ title: 'List' });\n  // const [title, setTitle] = useState(`List`);\n  useTitle(list.title, `/l/:id`);\n  useEffect(() => {\n    (async () => {\n      try {\n        const list = await masto.v1.lists.$select(id).fetch();\n        setList(list);\n        // setTitle(list.title);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [id]);\n\n  const [showListAddEditModal, setShowListAddEditModal] = useState(false);\n  const [showManageMembersModal, setShowManageMembersModal] = useState(false);\n\n  return (\n    <>\n      <Timeline\n        key={id}\n        title={list.title}\n        id=\"list\"\n        emptyText=\"Nothing yet.\"\n        errorText=\"Unable to load posts.\"\n        instance={instance}\n        fetchItems={fetchList}\n        checkForUpdates={checkForUpdates}\n        useItemID\n        boostsCarousel={snapStates.settings.boostsCarousel}\n        allowFilters\n        // refresh={reloadCount}\n        headerStart={\n          <Link to=\"/l\" class=\"button plain\">\n            <Icon icon=\"list\" size=\"l\" />\n          </Link>\n        }\n        headerEnd={\n          <Menu2\n            portal\n            setDownOverflow\n            overflow=\"auto\"\n            viewScroll=\"close\"\n            position=\"anchor\"\n            menuButton={\n              <button type=\"button\" class=\"plain\">\n                <Icon icon=\"more\" size=\"l\" />\n              </button>\n            }\n          >\n            <MenuItem\n              onClick={() =>\n                setShowListAddEditModal({\n                  list,\n                })\n              }\n            >\n              <Icon icon=\"pencil\" size=\"l\" />\n              <span>Edit</span>\n            </MenuItem>\n            <MenuItem onClick={() => setShowManageMembersModal(true)}>\n              <Icon icon=\"group\" size=\"l\" />\n              <span>Manage members</span>\n            </MenuItem>\n          </Menu2>\n        }\n      />\n      {showListAddEditModal && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowListAddEditModal(false);\n            }\n          }}\n        >\n          <ListAddEdit\n            list={showListAddEditModal?.list}\n            onClose={(result) => {\n              if (result.state === 'success' && result.list) {\n                setList(result.list);\n                // reload();\n              } else if (result.state === 'deleted') {\n                // navigate('/l');\n                location.hash = '/l';\n              }\n              setShowListAddEditModal(false);\n            }}\n          />\n        </Modal>\n      )}\n      {showManageMembersModal && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowManageMembersModal(false);\n            }\n          }}\n        >\n          <ListManageMembers\n            listID={id}\n            onClose={() => setShowManageMembersModal(false)}\n          />\n        </Modal>\n      )}\n    </>\n  );\n}\n\nconst MEMBERS_LIMIT = 40;\nfunction ListManageMembers({ listID, onClose }) {\n  // Show list of members with [Remove] button\n  // API only returns 40 members at a time, so this need to be paginated with infinite scroll\n  // Show [Add] button after removing a member\n  const { masto, instance } = api();\n  const [members, setMembers] = useState([]);\n  const [uiState, setUIState] = useState('default');\n  const [showMore, setShowMore] = useState(false);\n\n  const membersIterator = useRef();\n\n  async function fetchMembers(firstLoad) {\n    setShowMore(false);\n    setUIState('loading');\n    (async () => {\n      try {\n        if (firstLoad || !membersIterator.current) {\n          membersIterator.current = masto.v1.lists\n            .$select(listID)\n            .accounts.list({\n              limit: MEMBERS_LIMIT,\n            });\n        }\n        const results = await membersIterator.current.next();\n        let { done, value } = results;\n        if (value?.length) {\n          if (firstLoad) {\n            setMembers(value);\n          } else {\n            setMembers(members.concat(value));\n          }\n          setShowMore(!done);\n        } else {\n          setShowMore(false);\n        }\n        setUIState('default');\n      } catch (e) {\n        setUIState('error');\n      }\n    })();\n  }\n\n  useEffect(() => {\n    fetchMembers(true);\n  }, []);\n\n  return (\n    <div class=\"sheet\" id=\"list-manage-members-container\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Manage members</h2>\n      </header>\n      <main>\n        <ul>\n          {members.map((member) => (\n            <li key={member.id}>\n              <AccountBlock account={member} instance={instance} />\n              <RemoveAddButton account={member} listID={listID} />\n            </li>\n          ))}\n          {showMore && uiState === 'default' && (\n            <InView as=\"li\" onChange={(inView) => inView && fetchMembers()}>\n              <button type=\"button\" class=\"light block\" onClick={fetchMembers}>\n                Show more&hellip;\n              </button>\n            </InView>\n          )}\n        </ul>\n      </main>\n    </div>\n  );\n}\n\nfunction RemoveAddButton({ account, listID }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [removed, setRemoved] = useState(false);\n\n  return (\n    <MenuConfirm\n      confirm={!removed}\n      confirmLabel={<span>Remove @{account.username} from list?</span>}\n      align=\"end\"\n      menuItemClassName=\"danger\"\n      onClick={() => {\n        if (removed) {\n          setUIState('loading');\n          (async () => {\n            try {\n              await masto.v1.lists.$select(listID).accounts.create({\n                accountIds: [account.id],\n              });\n              setUIState('default');\n              setRemoved(false);\n            } catch (e) {\n              setUIState('error');\n            }\n          })();\n        } else {\n          // const yes = confirm(`Remove ${account.username} from this list?`);\n          // if (!yes) return;\n          setUIState('loading');\n\n          (async () => {\n            try {\n              await masto.v1.lists.$select(listID).accounts.remove({\n                accountIds: [account.id],\n              });\n              setUIState('default');\n              setRemoved(true);\n            } catch (e) {\n              setUIState('error');\n            }\n          })();\n        }\n      }}\n    >\n      <button\n        type=\"button\"\n        class={`light ${removed ? '' : 'danger'}`}\n        disabled={uiState === 'loading'}\n      >\n        {removed ? 'Add' : 'Remove…'}\n      </button>\n    </MenuConfirm>\n  );\n}\n\nexport default List;\n","import { useMemo, useRef, useState } from 'preact/hooks';\nimport { useSearchParams } from 'react-router-dom';\n\nimport Link from '../components/link';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\nconst emptySearchParams = new URLSearchParams();\n\nfunction Mentions({ columnMode, ...props }) {\n  useTitle('Mentions', '/mentions');\n  const { masto, instance } = api();\n  const [searchParams] = columnMode ? [emptySearchParams] : useSearchParams();\n  const [stateType, setStateType] = useState(null);\n  const type = props?.type || searchParams.get('type') || stateType;\n\n  const mentionsIterator = useRef();\n  const latestItem = useRef();\n\n  async function fetchMentions(firstLoad) {\n    if (firstLoad || !mentionsIterator.current) {\n      mentionsIterator.current = masto.v1.notifications.list({\n        limit: LIMIT,\n        types: ['mention'],\n      });\n    }\n    const results = await mentionsIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n        console.log('First load', latestItem.current);\n      }\n\n      value.forEach(({ status: item }) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value: value?.map((item) => item.status),\n    };\n  }\n\n  const conversationsIterator = useRef();\n  const latestConversationItem = useRef();\n  async function fetchConversations(firstLoad) {\n    if (firstLoad || !conversationsIterator.current) {\n      conversationsIterator.current = masto.v1.conversations.list({\n        limit: LIMIT,\n      });\n    }\n    const results = await conversationsIterator.current.next();\n    let { value } = results;\n    value = value?.filter((item) => item.lastStatus);\n    if (value?.length) {\n      if (firstLoad) {\n        latestConversationItem.current = value[0].lastStatus.id;\n        console.log('First load', latestConversationItem.current);\n      }\n\n      value.forEach(({ lastStatus: item }) => {\n        saveStatus(item, instance);\n      });\n    }\n    console.log('results', results);\n    return {\n      ...results,\n      value: value?.map((item) => item.lastStatus),\n    };\n  }\n\n  function fetchItems(...args) {\n    if (type === 'private') {\n      return fetchConversations(...args);\n    }\n    return fetchMentions(...args);\n  }\n\n  async function checkForUpdates() {\n    if (type === 'private') {\n      try {\n        const results = await masto.v1.conversations\n          .list({\n            limit: 1,\n            since_id: latestConversationItem.current,\n          })\n          .next();\n        let { value } = results;\n        console.log(\n          'checkForUpdates PRIVATE',\n          latestConversationItem.current,\n          value,\n        );\n        if (value?.length) {\n          latestConversationItem.current = value[0].lastStatus.id;\n          return true;\n        }\n        return false;\n      } catch (e) {\n        return false;\n      }\n    } else {\n      try {\n        const results = await masto.v1.notifications\n          .list({\n            limit: 1,\n            types: ['mention'],\n            since_id: latestItem.current,\n          })\n          .next();\n        let { value } = results;\n        console.log('checkForUpdates ALL', latestItem.current, value);\n        if (value?.length) {\n          latestItem.current = value[0].id;\n          return true;\n        }\n        return false;\n      } catch (e) {\n        return false;\n      }\n    }\n  }\n\n  const TimelineStart = useMemo(() => {\n    return (\n      <div class=\"filter-bar centered\">\n        <Link\n          to=\"/mentions\"\n          class={!type ? 'is-active' : ''}\n          onClick={(e) => {\n            if (columnMode) {\n              e.preventDefault();\n              setStateType(null);\n            }\n          }}\n        >\n          All\n        </Link>\n        <Link\n          to=\"/mentions?type=private\"\n          class={type === 'private' ? 'is-active' : ''}\n          onClick={(e) => {\n            if (columnMode) {\n              e.preventDefault();\n              setStateType('private');\n            }\n          }}\n        >\n          Private\n        </Link>\n      </div>\n    );\n  }, [type]);\n\n  return (\n    <Timeline\n      title=\"Mentions\"\n      id=\"mentions\"\n      emptyText=\"No one mentioned you :(\"\n      errorText=\"Unable to load mentions.\"\n      instance={instance}\n      fetchItems={fetchItems}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      timelineStart={TimelineStart}\n      refresh={type}\n    />\n  );\n}\n\nexport default Mentions;\n","function groupNotifications(notifications) {\n  // Create new flat list of notifications\n  // Combine sibling notifications based on type and status id\n  // Concat all notification.account into an array of _accounts\n  const notificationsMap = {};\n  const cleanNotifications = [];\n  for (let i = 0, j = 0; i < notifications.length; i++) {\n    const notification = notifications[i];\n    const { status, account, type, createdAt } = notification;\n    const date = new Date(createdAt).toLocaleDateString();\n    let virtualType = type;\n    if (type === 'favourite' || type === 'reblog') {\n      virtualType = 'favourite+reblog';\n    }\n    const key = `${status?.id}-${virtualType}-${date}`;\n    const mappedNotification = notificationsMap[key];\n    if (virtualType === 'follow_request') {\n      cleanNotifications[j++] = notification;\n    } else if (mappedNotification?.account) {\n      const mappedAccount = mappedNotification._accounts.find(\n        (a) => a.id === account.id,\n      );\n      if (mappedAccount) {\n        mappedAccount._types.push(type);\n        mappedAccount._types.sort().reverse();\n      } else {\n        account._types = [type];\n        mappedNotification._accounts.push(account);\n      }\n    } else {\n      account._types = [type];\n      let n = (notificationsMap[key] = {\n        ...notification,\n        type: virtualType,\n        _accounts: [account],\n      });\n      cleanNotifications[j++] = n;\n    }\n  }\n\n  // 2nd pass to group \"favourite+reblog\"-type notifications by account if _accounts.length <= 1\n  // This means one acount has favourited and reblogged the multiple statuses\n  // The grouped notification\n  // - type: \"favourite+reblog+account\"\n  // - _statuses: [status, status, ...]\n  const notificationsMap2 = {};\n  const cleanNotifications2 = [];\n  for (let i = 0, j = 0; i < cleanNotifications.length; i++) {\n    const notification = cleanNotifications[i];\n    const { account, _accounts, type, createdAt } = notification;\n    const date = new Date(createdAt).toLocaleDateString();\n    if (type === 'favourite+reblog' && account && _accounts.length === 1) {\n      const key = `${account?.id}-${type}-${date}`;\n      const mappedNotification = notificationsMap2[key];\n      if (mappedNotification) {\n        mappedNotification._statuses.push(notification.status);\n      } else {\n        let n = (notificationsMap2[key] = {\n          ...notification,\n          type,\n          _statuses: [notification.status],\n        });\n        cleanNotifications2[j++] = n;\n      }\n    } else {\n      cleanNotifications2[j++] = notification;\n    }\n  }\n\n  console.log({ notifications, cleanNotifications, cleanNotifications2 });\n\n  // return cleanNotifications;\n  return cleanNotifications2;\n}\n\nexport default groupNotifications;\n","import './notifications.css';\n\nimport { useIdle } from '@uidotdev/usehooks';\nimport { memo } from 'preact/compat';\nimport { useCallback, useEffect, useRef, useState } from 'preact/hooks';\nimport { useSearchParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport AccountBlock from '../components/account-block';\nimport FollowRequestButtons from '../components/follow-request-buttons';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport NavMenu from '../components/nav-menu';\nimport Notification from '../components/notification';\nimport { api } from '../utils/api';\nimport enhanceContent from '../utils/enhance-content';\nimport groupNotifications from '../utils/group-notifications';\nimport handleContentLinks from '../utils/handle-content-links';\nimport niceDateTime from '../utils/nice-date-time';\nimport { getRegistration } from '../utils/push-notifications';\nimport shortenNumber from '../utils/shorten-number';\nimport states, { saveStatus } from '../utils/states';\nimport { getCurrentInstance } from '../utils/store-utils';\nimport useScroll from '../utils/useScroll';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 30; // 30 is the maximum limit :(\nconst emptySearchParams = new URLSearchParams();\n\nfunction Notifications({ columnMode }) {\n  useTitle('Notifications', '/notifications');\n  const { masto, instance } = api();\n  const snapStates = useSnapshot(states);\n  const [uiState, setUIState] = useState('default');\n  const [searchParams] = columnMode ? [emptySearchParams] : useSearchParams();\n  const notificationID = searchParams.get('id');\n  const notificationAccessToken = searchParams.get('access_token');\n  const [showMore, setShowMore] = useState(false);\n  const [onlyMentions, setOnlyMentions] = useState(false);\n  const scrollableRef = useRef();\n  const { nearReachEnd, scrollDirection, reachStart, nearReachStart } =\n    useScroll({\n      scrollableRef,\n    });\n  const hiddenUI = scrollDirection === 'end' && !nearReachStart;\n  const [followRequests, setFollowRequests] = useState([]);\n  const [announcements, setAnnouncements] = useState([]);\n\n  console.debug('RENDER Notifications');\n\n  const notificationsIterator = useRef();\n  async function fetchNotifications(firstLoad) {\n    if (firstLoad || !notificationsIterator.current) {\n      // Reset iterator\n      notificationsIterator.current = masto.v1.notifications.list({\n        limit: LIMIT,\n        excludeTypes: ['follow_request'],\n      });\n    }\n    const allNotifications = await notificationsIterator.current.next();\n    const notifications = allNotifications.value;\n\n    if (notifications?.length) {\n      notifications.forEach((notification) => {\n        saveStatus(notification.status, instance, {\n          skipThreading: true,\n        });\n      });\n\n      const groupedNotifications = groupNotifications(notifications);\n\n      if (firstLoad) {\n        states.notificationsLast = notifications[0];\n        states.notifications = groupedNotifications;\n\n        // Update last read marker\n        masto.v1.markers\n          .create({\n            notifications: {\n              lastReadId: notifications[0].id,\n            },\n          })\n          .catch(() => {});\n      } else {\n        states.notifications.push(...groupedNotifications);\n      }\n    }\n\n    states.notificationsShowNew = false;\n    states.notificationsLastFetchTime = Date.now();\n    return allNotifications;\n  }\n\n  async function fetchFollowRequests() {\n    // Note: no pagination here yet because this better be on a separate page. Should be rare use-case???\n    try {\n      return await masto.v1.followRequests.list({\n        limit: 80,\n      });\n    } catch (e) {\n      // Silently fail\n      return [];\n    }\n  }\n\n  const loadFollowRequests = () => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const requests = await fetchFollowRequests();\n        setFollowRequests(requests);\n        setUIState('default');\n      } catch (e) {\n        setUIState('error');\n      }\n    })();\n  };\n\n  async function fetchAnnouncements() {\n    try {\n      return await masto.v1.announcements.list();\n    } catch (e) {\n      // Silently fail\n      return [];\n    }\n  }\n\n  const loadNotifications = (firstLoad) => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const fetchNotificationsPromise = fetchNotifications(firstLoad);\n        const fetchFollowRequestsPromise = fetchFollowRequests();\n        const fetchAnnouncementsPromise = fetchAnnouncements();\n\n        if (firstLoad) {\n          const announcements = await fetchAnnouncementsPromise;\n          announcements.sort((a, b) => {\n            // Sort by updatedAt first, then createdAt\n            const aDate = new Date(a.updatedAt || a.createdAt);\n            const bDate = new Date(b.updatedAt || b.createdAt);\n            return bDate - aDate;\n          });\n          setAnnouncements(announcements);\n          const requests = await fetchFollowRequestsPromise;\n          setFollowRequests(requests);\n        }\n\n        const { done } = await fetchNotificationsPromise;\n        setShowMore(!done);\n\n        setUIState('default');\n      } catch (e) {\n        setUIState('error');\n      }\n    })();\n  };\n\n  useEffect(() => {\n    loadNotifications(true);\n  }, []);\n  useEffect(() => {\n    if (reachStart) {\n      loadNotifications(true);\n    }\n  }, [reachStart]);\n\n  useEffect(() => {\n    if (nearReachEnd && showMore) {\n      loadNotifications();\n    }\n  }, [nearReachEnd, showMore]);\n\n  const idle = useIdle(5000);\n  console.debug('🧘‍♀️ IDLE', idle);\n  const loadUpdates = useCallback(() => {\n    console.log('✨ Load updates', {\n      autoRefresh: snapStates.settings.autoRefresh,\n      scrollTop: scrollableRef.current?.scrollTop === 0,\n      inBackground: inBackground(),\n      notificationsShowNew: snapStates.notificationsShowNew,\n      uiState,\n    });\n    if (\n      snapStates.settings.autoRefresh &&\n      scrollableRef.current?.scrollTop === 0 &&\n      idle &&\n      !inBackground() &&\n      snapStates.notificationsShowNew &&\n      uiState !== 'loading'\n    ) {\n      loadNotifications(true);\n    }\n  }, [\n    idle,\n    snapStates.notificationsShowNew,\n    snapStates.settings.autoRefresh,\n    uiState,\n  ]);\n  useEffect(loadUpdates, [snapStates.notificationsShowNew]);\n\n  const todayDate = new Date();\n  const yesterdayDate = new Date(todayDate - 24 * 60 * 60 * 1000);\n  let currentDay = new Date();\n  const showTodayEmpty = !snapStates.notifications.some(\n    (notification) =>\n      new Date(notification.createdAt).toDateString() ===\n      todayDate.toDateString(),\n  );\n\n  const announcementsListRef = useRef();\n\n  useEffect(() => {\n    if (notificationID) {\n      states.routeNotification = {\n        id: notificationID,\n        accessToken: atob(notificationAccessToken),\n      };\n    }\n  }, [notificationID, notificationAccessToken]);\n\n  useEffect(() => {\n    if (uiState === 'default') {\n      (async () => {\n        try {\n          const registration = await getRegistration();\n          if (registration?.getNotifications) {\n            const notifications = await registration.getNotifications();\n            console.log('🔔 Push notifications', notifications);\n            // Close all notifications?\n            // notifications.forEach((notification) => {\n            //   notification.close();\n            // });\n          }\n        } catch (e) {}\n      })();\n    }\n  }, [uiState]);\n\n  return (\n    <div\n      id=\"notifications-page\"\n      class=\"deck-container\"\n      ref={scrollableRef}\n      tabIndex=\"-1\"\n    >\n      <div class={`timeline-deck deck ${onlyMentions ? 'only-mentions' : ''}`}>\n        <header\n          hidden={hiddenUI}\n          onClick={(e) => {\n            if (!e.target.closest('a, button')) {\n              scrollableRef.current?.scrollTo({ top: 0, behavior: 'smooth' });\n            }\n          }}\n          class={uiState === 'loading' ? 'loading' : ''}\n        >\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n              <Link to=\"/\" class=\"button plain\">\n                <Icon icon=\"home\" size=\"l\" alt=\"Home\" />\n              </Link>\n            </div>\n            <h1>Notifications</h1>\n            <div class=\"header-side\">\n              {/* <Loader hidden={uiState !== 'loading'} /> */}\n            </div>\n          </div>\n          {snapStates.notificationsShowNew && uiState !== 'loading' && (\n            <button\n              class=\"updates-button shiny-pill\"\n              type=\"button\"\n              onClick={() => {\n                loadNotifications(true);\n                scrollableRef.current?.scrollTo({\n                  top: 0,\n                  behavior: 'smooth',\n                });\n              }}\n            >\n              <Icon icon=\"arrow-up\" /> New notifications\n            </button>\n          )}\n        </header>\n        {announcements.length > 0 && (\n          <div class=\"shazam-container\">\n            <div class=\"shazam-container-inner\">\n              <details class=\"announcements\">\n                <summary>\n                  <span>\n                    <Icon icon=\"announce\" class=\"announcement-icon\" size=\"l\" />{' '}\n                    <b>Announcement{announcements.length > 1 ? 's' : ''}</b>{' '}\n                    <small class=\"insignificant\">{instance}</small>\n                  </span>\n                  {announcements.length > 1 && (\n                    <span class=\"announcements-nav-buttons\">\n                      {announcements.map((announcement, index) => (\n                        <button\n                          type=\"button\"\n                          class=\"plain2 small\"\n                          onClick={() => {\n                            announcementsListRef.current?.children[\n                              index\n                            ].scrollIntoView({\n                              behavior: 'smooth',\n                              block: 'nearest',\n                            });\n                          }}\n                        >\n                          {index + 1}\n                        </button>\n                      ))}\n                    </span>\n                  )}\n                </summary>\n                <ul\n                  class={`announcements-list-${\n                    announcements.length > 1 ? 'multiple' : 'single'\n                  }`}\n                  ref={announcementsListRef}\n                >\n                  {announcements.map((announcement) => (\n                    <li>\n                      <AnnouncementBlock announcement={announcement} />\n                    </li>\n                  ))}\n                </ul>\n              </details>\n            </div>\n          </div>\n        )}\n        {followRequests.length > 0 && (\n          <div class=\"follow-requests\">\n            <h2 class=\"timeline-header\">Follow requests</h2>\n            {followRequests.length > 5 ? (\n              <details>\n                <summary>{followRequests.length} follow requests</summary>\n                <ul>\n                  {followRequests.map((account) => (\n                    <li key={account.id}>\n                      <AccountBlock account={account} />\n                      <FollowRequestButtons\n                        accountID={account.id}\n                        onChange={() => {\n                          // loadFollowRequests();\n                          // loadNotifications(true);\n                        }}\n                      />\n                    </li>\n                  ))}\n                </ul>\n              </details>\n            ) : (\n              <ul>\n                {followRequests.map((account) => (\n                  <li key={account.id}>\n                    <AccountBlock account={account} />\n                    <FollowRequestButtons\n                      accountID={account.id}\n                      onChange={() => {\n                        // loadFollowRequests();\n                        // loadNotifications(true);\n                      }}\n                    />\n                  </li>\n                ))}\n              </ul>\n            )}\n          </div>\n        )}\n        <div id=\"mentions-option\">\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={onlyMentions}\n              onChange={(e) => {\n                setOnlyMentions(e.target.checked);\n              }}\n            />{' '}\n            Only mentions\n          </label>\n        </div>\n        <h2 class=\"timeline-header\">Today</h2>\n        {showTodayEmpty && !!snapStates.notifications.length && (\n          <p class=\"ui-state insignificant\">\n            {uiState === 'default' ? \"You're all caught up.\" : <>&hellip;</>}\n          </p>\n        )}\n        {snapStates.notifications.length ? (\n          <>\n            {snapStates.notifications\n              // This is leaked from Notifications popover\n              .filter((n) => n.type !== 'follow_request')\n              .map((notification) => {\n                if (onlyMentions && notification.type !== 'mention') {\n                  return null;\n                }\n                const notificationDay = new Date(notification.createdAt);\n                const differentDay =\n                  notificationDay.toDateString() !== currentDay.toDateString();\n                if (differentDay) {\n                  currentDay = notificationDay;\n                }\n                // if notificationDay is yesterday, show \"Yesterday\"\n                // if notificationDay is before yesterday, show date\n                const heading =\n                  notificationDay.toDateString() ===\n                  yesterdayDate.toDateString()\n                    ? 'Yesterday'\n                    : niceDateTime(currentDay, {\n                        hideTime: true,\n                      });\n                return (\n                  <>\n                    {differentDay && <h2 class=\"timeline-header\">{heading}</h2>}\n                    <Notification\n                      instance={instance}\n                      notification={notification}\n                      key={notification.id}\n                      reload={() => {\n                        loadNotifications(true);\n                        loadFollowRequests();\n                      }}\n                    />\n                  </>\n                );\n              })}\n          </>\n        ) : (\n          <>\n            {uiState === 'loading' && (\n              <>\n                <ul class=\"timeline flat\">\n                  {Array.from({ length: 5 }).map((_, i) => (\n                    <li class=\"notification skeleton\">\n                      <div class=\"notification-type\">\n                        <Icon icon=\"notification\" size=\"xl\" />\n                      </div>\n                      <div class=\"notification-content\">\n                        <p>███████████ ████</p>\n                      </div>\n                    </li>\n                  ))}\n                </ul>\n              </>\n            )}\n            {uiState === 'error' && (\n              <p class=\"ui-state\">\n                Unable to load notifications\n                <br />\n                <br />\n                <button type=\"button\" onClick={() => loadNotifications(true)}>\n                  Try again\n                </button>\n              </p>\n            )}\n          </>\n        )}\n        {showMore && (\n          <button\n            type=\"button\"\n            class=\"plain block\"\n            disabled={uiState === 'loading'}\n            onClick={() => loadNotifications()}\n            style={{ marginBlockEnd: '6em' }}\n          >\n            {uiState === 'loading' ? <Loader abrupt /> : <>Show more&hellip;</>}\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction inBackground() {\n  return !!document.querySelector('.deck-backdrop, #modal-container > *');\n}\n\nfunction AnnouncementBlock({ announcement }) {\n  const { instance } = api();\n  const { contact } = getCurrentInstance();\n  const contactAccount = contact?.account;\n  const {\n    id,\n    content,\n    startsAt,\n    endsAt,\n    published,\n    allDay,\n    publishedAt,\n    updatedAt,\n    read,\n    mentions,\n    statuses,\n    tags,\n    emojis,\n    reactions,\n  } = announcement;\n\n  const publishedAtDate = new Date(publishedAt);\n  const publishedDateText = niceDateTime(publishedAtDate);\n  const updatedAtDate = new Date(updatedAt);\n  const updatedAtText = niceDateTime(updatedAtDate);\n\n  return (\n    <div class=\"announcement-block\">\n      <AccountBlock account={contactAccount} />\n      <div\n        class=\"announcement-content\"\n        onClick={handleContentLinks({ mentions, instance })}\n        dangerouslySetInnerHTML={{\n          __html: enhanceContent(content, {\n            emojis,\n          }),\n        }}\n      />\n      <p class=\"insignificant\">\n        <time datetime={publishedAtDate.toISOString()}>\n          {niceDateTime(publishedAtDate)}\n        </time>\n        {updatedAt && updatedAtText !== publishedDateText && (\n          <>\n            {' '}\n            &bull;{' '}\n            <span class=\"ib\">\n              Updated{' '}\n              <time datetime={updatedAtDate.toISOString()}>\n                {niceDateTime(updatedAtDate)}\n              </time>\n            </span>\n          </>\n        )}\n      </p>\n      <div class=\"announcement-reactions\" hidden>\n        {reactions.map((reaction) => {\n          const { name, count, me, staticUrl, url } = reaction;\n          return (\n            <button type=\"button\" class={`plain4 small ${me ? 'reacted' : ''}`}>\n              {url || staticUrl ? (\n                <img src={url || staticUrl} alt={name} width=\"16\" height=\"16\" />\n              ) : (\n                <span>{name}</span>\n              )}{' '}\n              <span class=\"count\">{shortenNumber(count)}</span>\n            </button>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(Notifications);\n","import { Menu, MenuDivider, MenuItem } from '@szhsin/react-menu';\nimport { useRef } from 'preact/hooks';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport Icon from '../components/icon';\nimport Menu2 from '../components/menu2';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { filteredItems } from '../utils/filters';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Public({ local, columnMode, ...props }) {\n  const snapStates = useSnapshot(states);\n  const isLocal = !!local;\n  const params = columnMode ? {} : useParams();\n  const { masto, instance } = api({\n    instance: props?.instance || params.instance,\n  });\n  const title = `${isLocal ? 'Local' : 'Federated'} timeline (${instance})`;\n  useTitle(title, isLocal ? `/:instance?/p/l` : `/:instance?/p`);\n  // const navigate = useNavigate();\n  const latestItem = useRef();\n\n  const publicIterator = useRef();\n  async function fetchPublic(firstLoad) {\n    if (firstLoad || !publicIterator.current) {\n      publicIterator.current = masto.v1.timelines.public.list({\n        limit: LIMIT,\n        local: isLocal,\n      });\n    }\n    const results = await publicIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      value = filteredItems(value, 'public');\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines.public\n        .list({\n          limit: 1,\n          local: isLocal,\n          since_id: latestItem.current,\n        })\n        .next();\n      let { value } = results;\n      value = filteredItems(value, 'public');\n      if (value?.length) {\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  return (\n    <Timeline\n      key={instance + isLocal}\n      title={title}\n      titleComponent={\n        <h1 class=\"header-account\">\n          <b>{isLocal ? 'Local timeline' : 'Federated timeline'}</b>\n          <div>{instance}</div>\n        </h1>\n      }\n      id=\"public\"\n      instance={instance}\n      emptyText=\"No one has posted anything yet.\"\n      errorText=\"Unable to load posts\"\n      fetchItems={fetchPublic}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      headerStart={<></>}\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      allowFilters\n      headerEnd={\n        <Menu2\n          portal\n          // setDownOverflow\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          <MenuItem href={isLocal ? `/#/${instance}/p` : `/#/${instance}/p/l`}>\n            {isLocal ? (\n              <>\n                <Icon icon=\"transfer\" /> <span>Switch to Federated</span>\n              </>\n            ) : (\n              <>\n                <Icon icon=\"transfer\" /> <span>Switch to Local</span>\n              </>\n            )}\n          </MenuItem>\n          <MenuDivider />\n          <MenuItem\n            onClick={() => {\n              let newInstance = prompt(\n                'Enter a new instance e.g. \"mastodon.social\"',\n              );\n              if (!/\\./.test(newInstance)) {\n                if (newInstance) alert('Invalid instance');\n                return;\n              }\n              if (newInstance) {\n                newInstance = newInstance.toLowerCase().trim();\n                // navigate(isLocal ? `/${newInstance}/p/l` : `/${newInstance}/p`);\n                location.hash = isLocal\n                  ? `/${newInstance}/p/l`\n                  : `/${newInstance}/p`;\n              }\n            }}\n          >\n            <Icon icon=\"bus\" /> <span>Go to another instance…</span>\n          </MenuItem>\n        </Menu2>\n      }\n    />\n  );\n}\n\nexport default Public;\n","import { MenuItem } from '@szhsin/react-menu';\nimport { useMemo, useRef, useState } from 'preact/hooks';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Menu2 from '../components/menu2';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { filteredItems } from '../utils/filters';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Trending({ columnMode, ...props }) {\n  const snapStates = useSnapshot(states);\n  const params = columnMode ? {} : useParams();\n  const { masto, instance } = api({\n    instance: props?.instance || params.instance,\n  });\n  const title = `Trending (${instance})`;\n  useTitle(title, `/:instance?/trending`);\n  // const navigate = useNavigate();\n  const latestItem = useRef();\n\n  const [hashtags, setHashtags] = useState([]);\n  const trendIterator = useRef();\n  async function fetchTrend(firstLoad) {\n    if (firstLoad || !trendIterator.current) {\n      trendIterator.current = masto.v1.trends.statuses.list({\n        limit: LIMIT,\n      });\n\n      // Get hashtags\n      try {\n        const iterator = masto.v1.trends.tags.list();\n        const { value: tags } = await iterator.next();\n        console.log(tags);\n        setHashtags(tags);\n      } catch (e) {\n        console.error(e);\n      }\n    }\n    const results = await trendIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      value = filteredItems(value, 'public'); // Might not work here\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.trends.statuses\n        .list({\n          limit: 1,\n          // NOT SUPPORTED\n          // since_id: latestItem.current,\n        })\n        .next();\n      let { value } = results;\n      value = filteredItems(value, 'public');\n      if (value?.length && value[0].id !== latestItem.current) {\n        latestItem.current = value[0].id;\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  const TimelineStart = useMemo(() => {\n    if (!hashtags.length) return null;\n    return (\n      <div class=\"filter-bar\">\n        <Icon icon=\"chart\" class=\"insignificant\" size=\"l\" />\n        {hashtags.map((tag, i) => {\n          const { name, history } = tag;\n          const total = history.reduce((acc, cur) => acc + +cur.uses, 0);\n          return (\n            <Link to={`/${instance}/t/${name}`}>\n              <span>\n                <span class=\"more-insignificant\">#</span>\n                {name}\n              </span>\n              <span class=\"filter-count\">{total.toLocaleString()}</span>\n            </Link>\n          );\n        })}\n      </div>\n    );\n  }, [hashtags]);\n\n  return (\n    <Timeline\n      key={instance}\n      title={title}\n      titleComponent={\n        <h1 class=\"header-account\">\n          <b>Trending</b>\n          <div>{instance}</div>\n        </h1>\n      }\n      id=\"trending\"\n      instance={instance}\n      emptyText=\"No trending posts.\"\n      errorText=\"Unable to load posts\"\n      fetchItems={fetchTrend}\n      checkForUpdates={checkForUpdates}\n      checkForUpdatesInterval={5 * 60 * 1000} // 5 minutes\n      useItemID\n      headerStart={<></>}\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      allowFilters\n      timelineStart={TimelineStart}\n      headerEnd={\n        <Menu2\n          portal\n          // setDownOverflow\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          <MenuItem\n            onClick={() => {\n              let newInstance = prompt(\n                'Enter a new instance e.g. \"mastodon.social\"',\n              );\n              if (!/\\./.test(newInstance)) {\n                if (newInstance) alert('Invalid instance');\n                return;\n              }\n              if (newInstance) {\n                newInstance = newInstance.toLowerCase().trim();\n                // navigate(`/${newInstance}/trending`);\n                location.hash = `/${newInstance}/trending`;\n              }\n            }}\n          >\n            <Icon icon=\"bus\" /> <span>Go to another instance…</span>\n          </MenuItem>\n        </Menu2>\n      }\n    />\n  );\n}\n\nexport default Trending;\n","import { useHotkeys } from 'react-hotkeys-hook';\nimport { useSnapshot } from 'valtio';\n\nimport Bookmarks from '../pages/bookmarks';\nimport Favourites from '../pages/favourites';\nimport Following from '../pages/following';\nimport Hashtag from '../pages/hashtag';\nimport List from '../pages/list';\nimport Mentions from '../pages/mentions';\nimport Notifications from '../pages/notifications';\nimport Public from '../pages/public';\nimport Trending from '../pages/trending';\nimport states from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nfunction Columns() {\n  useTitle('Home', '/');\n  const snapStates = useSnapshot(states);\n  const { shortcuts } = snapStates;\n\n  console.debug('RENDER Columns', shortcuts);\n\n  const components = shortcuts.map((shortcut) => {\n    if (!shortcut) return null;\n    const { type, ...params } = shortcut;\n    const Component = {\n      following: Following,\n      notifications: Notifications,\n      list: List,\n      public: Public,\n      bookmarks: Bookmarks,\n      favourites: Favourites,\n      hashtag: Hashtag,\n      mentions: Mentions,\n      trending: Trending,\n    }[type];\n    if (!Component) return null;\n    return (\n      <Component key={type + JSON.stringify(params)} {...params} columnMode />\n    );\n  });\n\n  useHotkeys(['1', '2', '3', '4', '5', '6', '7', '8', '9'], (e, handler) => {\n    try {\n      const index = parseInt(handler.keys[0], 10) - 1;\n      document.querySelectorAll('#columns > *')[index].focus();\n    } catch (e) {\n      console.error(e);\n    }\n  });\n\n  return <div id=\"columns\">{components}</div>;\n}\n\nexport default Columns;\n","import './notifications-menu.css';\n\nimport { ControlledMenu } from '@szhsin/react-menu';\nimport { memo } from 'preact/compat';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport Columns from '../components/columns';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport Notification from '../components/notification';\nimport { api } from '../utils/api';\nimport db from '../utils/db';\nimport groupNotifications from '../utils/group-notifications';\nimport states, { saveStatus } from '../utils/states';\nimport { getCurrentAccountNS } from '../utils/store-utils';\n\nimport Following from './following';\n\nfunction Home() {\n  const snapStates = useSnapshot(states);\n  useEffect(() => {\n    (async () => {\n      const keys = await db.drafts.keys();\n      if (keys.length) {\n        const ns = getCurrentAccountNS();\n        const ownKeys = keys.filter((key) => key.startsWith(ns));\n        if (ownKeys.length) {\n          states.showDrafts = true;\n        }\n      }\n    })();\n  }, []);\n\n  return (\n    <>\n      {(snapStates.settings.shortcutsColumnsMode ||\n        snapStates.settings.shortcutsViewMode === 'multi-column') &&\n      !!snapStates.shortcuts?.length ? (\n        <Columns />\n      ) : (\n        <Following\n          title=\"Home\"\n          path=\"/\"\n          id=\"home\"\n          headerStart={false}\n          headerEnd={<NotificationsLink />}\n        />\n      )}\n    </>\n  );\n}\n\nfunction NotificationsLink() {\n  const snapStates = useSnapshot(states);\n  const notificationLinkRef = useRef();\n  const [menuState, setMenuState] = useState(undefined);\n  return (\n    <>\n      <Link\n        ref={notificationLinkRef}\n        to=\"/notifications\"\n        class={`button plain notifications-button ${\n          snapStates.notificationsShowNew ? 'has-badge' : ''\n        } ${menuState}`}\n        onClick={(e) => {\n          e.stopPropagation();\n          if (window.matchMedia('(min-width: calc(40em))').matches) {\n            e.preventDefault();\n            setMenuState((state) => (!state ? 'open' : undefined));\n          }\n        }}\n      >\n        <Icon icon=\"notification\" size=\"l\" alt=\"Notifications\" />\n      </Link>\n      <NotificationsMenu\n        state={menuState}\n        anchorRef={notificationLinkRef}\n        onClose={() => setMenuState(undefined)}\n      />\n    </>\n  );\n}\n\nconst NOTIFICATIONS_LIMIT = 30;\nconst NOTIFICATIONS_DISPLAY_LIMIT = 5;\nfunction NotificationsMenu({ anchorRef, state, onClose }) {\n  const { masto, instance } = api();\n  const snapStates = useSnapshot(states);\n  const [uiState, setUIState] = useState('default');\n\n  const notificationsIterator = masto.v1.notifications.list({\n    limit: NOTIFICATIONS_LIMIT,\n  });\n\n  async function fetchNotifications() {\n    const allNotifications = await notificationsIterator.next();\n    const notifications = allNotifications.value;\n\n    if (notifications?.length) {\n      notifications.forEach((notification) => {\n        saveStatus(notification.status, instance, {\n          skipThreading: true,\n        });\n      });\n\n      const groupedNotifications = groupNotifications(notifications);\n\n      states.notificationsLast = notifications[0];\n      states.notifications = groupedNotifications;\n\n      // Update last read marker\n      masto.v1.markers\n        .create({\n          notifications: {\n            lastReadId: notifications[0].id,\n          },\n        })\n        .catch(() => {});\n    }\n\n    states.notificationsShowNew = false;\n    states.notificationsLastFetchTime = Date.now();\n    return allNotifications;\n  }\n\n  const [hasFollowRequests, setHasFollowRequests] = useState(false);\n  function fetchFollowRequests() {\n    return masto.v1.followRequests.list({\n      limit: 1,\n    });\n  }\n\n  function loadNotifications() {\n    setUIState('loading');\n    (async () => {\n      try {\n        await fetchNotifications();\n        const followRequests = await fetchFollowRequests();\n        setHasFollowRequests(!!followRequests?.length);\n        setUIState('default');\n      } catch (e) {\n        setUIState('error');\n      }\n    })();\n  }\n\n  useEffect(() => {\n    if (state === 'open') loadNotifications();\n  }, [state]);\n\n  return (\n    <ControlledMenu\n      menuClassName=\"notifications-menu\"\n      state={state}\n      anchorRef={anchorRef}\n      onClose={onClose}\n      portal={{\n        target: document.body,\n      }}\n      overflow=\"auto\"\n      viewScroll=\"close\"\n      position=\"anchor\"\n      align=\"center\"\n      boundingBoxPadding=\"8 8 8 8\"\n    >\n      <header>\n        <h2>Notifications</h2>\n      </header>\n      <main>\n        {snapStates.notifications.length ? (\n          <>\n            {snapStates.notifications\n              .slice(0, NOTIFICATIONS_DISPLAY_LIMIT)\n              .map((notification) => (\n                <Notification\n                  key={notification.id}\n                  instance={instance}\n                  notification={notification}\n                />\n              ))}\n          </>\n        ) : uiState === 'loading' ? (\n          <div class=\"ui-state\">\n            <Loader abrupt />\n          </div>\n        ) : (\n          uiState === 'error' && (\n            <div class=\"ui-state\">\n              <p>Unable to fetch notifications.</p>\n              <p>\n                <button type=\"button\" onClick={loadNotifications}>\n                  Try again\n                </button>\n              </p>\n            </div>\n          )\n        )}\n      </main>\n      <footer>\n        <Link to=\"/mentions\" class=\"button plain\">\n          <Icon icon=\"at\" /> <span>Mentions</span>\n        </Link>\n        <Link to=\"/notifications\" class=\"button plain2\">\n          {hasFollowRequests ? (\n            <>\n              <span class=\"tag collapsed\">New</span>{' '}\n              <span>Follow Requests</span>\n            </>\n          ) : (\n            <b>See all</b>\n          )}{' '}\n          <Icon icon=\"arrow-right\" />\n        </Link>\n      </footer>\n    </ControlledMenu>\n  );\n}\n\nexport default memo(Home);\n","export const statusRegex = /\\/@([^@\\/]+)@?([^\\/]+)?\\/([^\\/]+)\\/?$/i;\nexport const statusNoteRegex = /\\/notes\\/([^\\/]+)\\/?$/i;\nfunction getInstanceStatusURL(url) {\n  // Regex /:username/:id, where username = @username or @username@domain, id = anything\n  const { hostname, pathname } = new URL(url);\n  const [, username, domain, id] = pathname.match(statusRegex) || [];\n\n  if (id) {\n    return `/${hostname}/s/${id}`;\n  }\n\n  const [, noteId] = pathname.match(statusNoteRegex) || [];\n\n  if (noteId) {\n    return `/${hostname}/s/${noteId}`;\n  }\n}\n\nexport default getInstanceStatusURL;\n","import { useLayoutEffect } from 'preact/hooks';\nimport { useLocation } from 'react-router-dom';\n\nimport Link from '../components/link';\nimport getInstanceStatusURL from '../utils/get-instance-status-url';\n\nexport default function HttpRoute() {\n  const location = useLocation();\n  const url = location.pathname.replace(/^\\//, '');\n  const statusURL = getInstanceStatusURL(url);\n\n  useLayoutEffect(() => {\n    if (statusURL) {\n      setTimeout(() => {\n        window.location.hash = statusURL + '?view=full';\n      }, 300);\n    }\n  }, [statusURL]);\n\n  return (\n    <div class=\"ui-state\" tabIndex=\"-1\">\n      {statusURL ? (\n        <>\n          <h2>Redirecting…</h2>\n          <p>\n            <a href={`#${statusURL}?view=full`}>{statusURL}</a>\n          </p>\n        </>\n      ) : (\n        <>\n          <h2>Unable to process URL</h2>\n          <p>\n            <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n              {url}\n            </a>\n          </p>\n        </>\n      )}\n      <hr />\n      <p>\n        <Link to=\"/\">Go home</Link>\n      </p>\n    </div>\n  );\n}\n","import './lists.css';\n\nimport { useEffect, useReducer, useRef, useState } from 'preact/hooks';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport ListAddEdit from '../components/list-add-edit';\nimport Loader from '../components/loader';\nimport Modal from '../components/modal';\nimport NavMenu from '../components/nav-menu';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nfunction Lists() {\n  const { masto } = api();\n  useTitle(`Lists`, `/l`);\n  const [uiState, setUIState] = useState('default');\n\n  const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n  const [lists, setLists] = useState([]);\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const lists = await masto.v1.lists.list();\n        console.log(lists);\n        setLists(lists);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, [reloadCount]);\n\n  const [showListAddEditModal, setShowListAddEditModal] = useState(false);\n\n  return (\n    <div id=\"lists-page\" class=\"deck-container\" tabIndex=\"-1\">\n      <div class=\"timeline-deck deck\">\n        <header>\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n              <Link to=\"/\" class=\"button plain\">\n                <Icon icon=\"home\" size=\"l\" />\n              </Link>\n            </div>\n            <h1>Lists</h1>\n            <div class=\"header-side\">\n              <button\n                type=\"button\"\n                class=\"plain\"\n                onClick={() => setShowListAddEditModal(true)}\n              >\n                <Icon icon=\"plus\" size=\"l\" alt=\"New list\" />\n              </button>\n            </div>\n          </div>\n        </header>\n        <main>\n          {lists.length > 0 ? (\n            <ul class=\"link-list\">\n              {lists.map((list) => (\n                <li>\n                  <Link to={`/l/${list.id}`}>\n                    <span>\n                      <Icon icon=\"list\" /> <span>{list.title}</span>\n                    </span>\n                    {/* <button\n                      type=\"button\"\n                      class=\"plain\"\n                      onClick={(e) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        setShowListAddEditModal({\n                          list,\n                        });\n                      }}\n                    >\n                      <Icon icon=\"pencil\" />\n                    </button> */}\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          ) : uiState === 'loading' ? (\n            <p class=\"ui-state\">\n              <Loader />\n            </p>\n          ) : uiState === 'error' ? (\n            <p class=\"ui-state\">Unable to load lists.</p>\n          ) : (\n            <p class=\"ui-state\">No lists yet.</p>\n          )}\n        </main>\n      </div>\n      {showListAddEditModal && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowListAddEditModal(false);\n            }\n          }}\n        >\n          <ListAddEdit\n            list={showListAddEditModal?.list}\n            onClose={(result) => {\n              if (result.state === 'success') {\n                reload();\n              }\n              setShowListAddEditModal(false);\n            }}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nexport default Lists;\n","export default \"__VITE_ASSET__cc8865ad__\"","const { VITE_CLIENT_NAME: CLIENT_NAME, VITE_WEBSITE: WEBSITE } = import.meta\n  .env;\n\nconst SCOPES = 'read write follow push';\n\nexport async function registerApplication({ instanceURL }) {\n  const registrationParams = new URLSearchParams({\n    client_name: CLIENT_NAME,\n    redirect_uris: location.origin + location.pathname,\n    scopes: SCOPES,\n    website: WEBSITE,\n  });\n  const registrationResponse = await fetch(\n    `https://${instanceURL}/api/v1/apps`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: registrationParams.toString(),\n    },\n  );\n  const registrationJSON = await registrationResponse.json();\n  console.log({ registrationJSON });\n  return registrationJSON;\n}\n\nexport async function getAuthorizationURL({ instanceURL, client_id }) {\n  const authorizationParams = new URLSearchParams({\n    client_id,\n    scope: SCOPES,\n    redirect_uri: location.origin + location.pathname,\n    // redirect_uri: 'urn:ietf:wg:oauth:2.0:oob',\n    response_type: 'code',\n  });\n  const authorizationURL = `https://${instanceURL}/oauth/authorize?${authorizationParams.toString()}`;\n  return authorizationURL;\n}\n\nexport async function getAccessToken({\n  instanceURL,\n  client_id,\n  client_secret,\n  code,\n}) {\n  const params = new URLSearchParams({\n    client_id,\n    client_secret,\n    redirect_uri: location.origin + location.pathname,\n    grant_type: 'authorization_code',\n    code,\n    scope: SCOPES,\n  });\n  const tokenResponse = await fetch(`https://${instanceURL}/oauth/token`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: params.toString(),\n  });\n  const tokenJSON = await tokenResponse.json();\n  console.log({ tokenJSON });\n  return tokenJSON;\n}\n","import './login.css';\n\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useSearchParams } from 'react-router-dom';\n\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport instancesListURL from '../data/instances.json?url';\nimport { getAuthorizationURL, registerApplication } from '../utils/auth';\nimport store from '../utils/store';\nimport useTitle from '../utils/useTitle';\n\nfunction Login() {\n  useTitle('Log in');\n  const instanceURLRef = useRef();\n  const cachedInstanceURL = store.local.get('instanceURL');\n  const [uiState, setUIState] = useState('default');\n  const [searchParams] = useSearchParams();\n  const instance = searchParams.get('instance');\n  const [instanceText, setInstanceText] = useState(\n    instance || cachedInstanceURL?.toLowerCase() || '',\n  );\n\n  const [instancesList, setInstancesList] = useState([]);\n  useEffect(() => {\n    (async () => {\n      try {\n        const res = await fetch(instancesListURL);\n        const data = await res.json();\n        setInstancesList(data);\n      } catch (e) {\n        // Silently fail\n        console.error(e);\n      }\n    })();\n  }, []);\n\n  // useEffect(() => {\n  //   if (cachedInstanceURL) {\n  //     instanceURLRef.current.value = cachedInstanceURL.toLowerCase();\n  //   }\n  // }, []);\n\n  const submitInstance = (instanceURL) => {\n    store.local.set('instanceURL', instanceURL);\n\n    (async () => {\n      setUIState('loading');\n      try {\n        const { client_id, client_secret, vapid_key } =\n          await registerApplication({\n            instanceURL,\n          });\n\n        if (client_id && client_secret) {\n          store.session.set('clientID', client_id);\n          store.session.set('clientSecret', client_secret);\n          store.session.set('vapidKey', vapid_key);\n\n          location.href = await getAuthorizationURL({\n            instanceURL,\n            client_id,\n          });\n        } else {\n          alert('Failed to register application');\n        }\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  };\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    const { elements } = e.target;\n    let instanceURL = elements.instanceURL.value.toLowerCase();\n    // Remove protocol from instance URL\n    instanceURL = instanceURL.replace(/^https?:\\/\\//, '').replace(/\\/+$/, '');\n    // Remove @acct@ or acct@ from instance URL\n    instanceURL = instanceURL.replace(/^@?[^@]+@/, '');\n    if (!/\\./.test(instanceURL)) {\n      instanceURL = instancesList.find((instance) =>\n        instance.includes(instanceURL),\n      );\n    }\n    submitInstance(instanceURL);\n  };\n\n  const instancesSuggestions = instanceText\n    ? instancesList\n        .filter((instance) => instance.includes(instanceText))\n        .sort((a, b) => {\n          // Move text that starts with instanceText to the start\n          const aStartsWith = a\n            .toLowerCase()\n            .startsWith(instanceText.toLowerCase());\n          const bStartsWith = b\n            .toLowerCase()\n            .startsWith(instanceText.toLowerCase());\n          if (aStartsWith && !bStartsWith) return -1;\n          if (!aStartsWith && bStartsWith) return 1;\n          return 0;\n        })\n        .slice(0, 10)\n    : [];\n\n  return (\n    <main id=\"login\" style={{ textAlign: 'center' }}>\n      <form onSubmit={onSubmit}>\n        <h1>Log in</h1>\n        <label>\n          <p>Instance</p>\n          <input\n            value={instanceText}\n            required\n            type=\"text\"\n            class=\"large\"\n            id=\"instanceURL\"\n            ref={instanceURLRef}\n            disabled={uiState === 'loading'}\n            // list=\"instances-list\"\n            autocorrect=\"off\"\n            autocapitalize=\"off\"\n            autocomplete=\"off\"\n            spellcheck={false}\n            placeholder=\"instance domain\"\n            onInput={(e) => {\n              setInstanceText(e.target.value);\n            }}\n          />\n          {instancesSuggestions?.length > 0 ? (\n            <ul id=\"instances-suggestions\">\n              {instancesSuggestions.map((instance) => (\n                <li>\n                  <button\n                    type=\"button\"\n                    class=\"plain4\"\n                    onClick={() => {\n                      submitInstance(instance);\n                    }}\n                  >\n                    {instance}\n                  </button>\n                </li>\n              ))}\n            </ul>\n          ) : (\n            <div id=\"instances-eg\">e.g. &ldquo;mastodon.social&rsquo;</div>\n          )}\n          {/* <datalist id=\"instances-list\">\n            {instancesList.map((instance) => (\n              <option value={instance} />\n            ))}\n          </datalist> */}\n        </label>\n        {uiState === 'error' && (\n          <p class=\"error\">\n            Failed to log in. Please try again or another instance.\n          </p>\n        )}\n        <div>\n          <button class=\"large\" disabled={uiState === 'loading'}>\n            Log in\n          </button>{' '}\n        </div>\n        <Loader hidden={uiState !== 'loading'} />\n        <hr />\n        <p>\n          <a href=\"https://joinmastodon.org/servers\" target=\"_blank\">\n            Don't have an account? Create one!\n          </a>\n        </p>\n        <p>\n          <Link to=\"/\">Go home</Link>\n        </p>\n      </form>\n    </main>\n  );\n}\n\nexport default Login;\n","import './search.css';\n\nimport { useEffect, useLayoutEffect, useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { InView } from 'react-intersection-observer';\nimport { useParams, useSearchParams } from 'react-router-dom';\n\nimport AccountBlock from '../components/account-block';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport NavMenu from '../components/nav-menu';\nimport SearchForm from '../components/search-form';\nimport Status from '../components/status';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nconst SHORT_LIMIT = 5;\nconst LIMIT = 40;\n\nfunction Search(props) {\n  const params = useParams();\n  const { masto, instance, authenticated } = api({\n    instance: params.instance,\n  });\n  const [uiState, setUIState] = useState('default');\n  const [searchParams] = useSearchParams();\n  const searchFormRef = useRef();\n  const q = props?.query || searchParams.get('q');\n  const type = props?.type || searchParams.get('type');\n  useTitle(\n    q\n      ? `Search: ${q}${\n          type\n            ? ` (${\n                {\n                  statuses: 'Posts',\n                  accounts: 'Accounts',\n                  hashtags: 'Hashtags',\n                }[type]\n              })`\n            : ''\n        }`\n      : 'Search',\n    `/search`,\n  );\n\n  const [showMore, setShowMore] = useState(false);\n  const offsetRef = useRef(0);\n  useEffect(() => {\n    offsetRef.current = 0;\n  }, [q, type]);\n\n  const scrollableRef = useRef();\n  useLayoutEffect(() => {\n    scrollableRef.current?.scrollTo?.(0, 0);\n  }, [q, type]);\n\n  const [statusResults, setStatusResults] = useState([]);\n  const [accountResults, setAccountResults] = useState([]);\n  const [hashtagResults, setHashtagResults] = useState([]);\n  useEffect(() => {\n    setStatusResults([]);\n    setAccountResults([]);\n    setHashtagResults([]);\n  }, [q]);\n  const setTypeResultsFunc = {\n    statuses: setStatusResults,\n    accounts: setAccountResults,\n    hashtags: setHashtagResults,\n  };\n\n  function loadResults(firstLoad) {\n    setUIState('loading');\n    if (firstLoad && !type) {\n      setStatusResults(statusResults.slice(0, SHORT_LIMIT));\n      setAccountResults(accountResults.slice(0, SHORT_LIMIT));\n      setHashtagResults(hashtagResults.slice(0, SHORT_LIMIT));\n    }\n\n    (async () => {\n      const params = {\n        q,\n        resolve: authenticated,\n        limit: SHORT_LIMIT,\n      };\n      if (type) {\n        params.limit = LIMIT;\n        params.type = type;\n        if (authenticated) params.offset = offsetRef.current;\n      }\n      try {\n        const results = await masto.v2.search.fetch(params);\n        console.log(results);\n        if (type) {\n          if (firstLoad) {\n            setTypeResultsFunc[type](results[type]);\n            const length = results[type]?.length;\n            offsetRef.current = LIMIT;\n            setShowMore(!!length);\n          } else {\n            setTypeResultsFunc[type]((prev) => [...prev, ...results[type]]);\n            const length = results[type]?.length;\n            offsetRef.current = offsetRef.current + LIMIT;\n            setShowMore(!!length);\n          }\n        } else {\n          setStatusResults(results.statuses);\n          setAccountResults(results.accounts);\n          setHashtagResults(results.hashtags);\n          offsetRef.current = 0;\n          setShowMore(false);\n        }\n        setUIState('default');\n      } catch (err) {\n        console.error(err);\n        setUIState('error');\n      }\n    })();\n  }\n\n  useEffect(() => {\n    if (q) {\n      searchFormRef.current?.setValue?.(q);\n      loadResults(true);\n    } else {\n      searchFormRef.current?.focus?.();\n    }\n  }, [q, type, instance]);\n\n  useHotkeys(\n    '/',\n    (e) => {\n      searchFormRef.current?.focus?.();\n    },\n    {\n      preventDefault: true,\n    },\n  );\n\n  return (\n    <div id=\"search-page\" class=\"deck-container\" ref={scrollableRef}>\n      <div class=\"timeline-deck deck\">\n        <header>\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n            </div>\n            <SearchForm ref={searchFormRef} />\n            <div class=\"header-side\">&nbsp;</div>\n          </div>\n        </header>\n        <main>\n          {!!q && (\n            <div class=\"filter-bar\">\n              {!!type && (\n                <Link to={`/search${q ? `?q=${encodeURIComponent(q)}` : ''}`}>\n                  ‹ All\n                </Link>\n              )}\n              {[\n                {\n                  label: 'Accounts',\n                  type: 'accounts',\n                  to: `/search?q=${encodeURIComponent(q)}&type=accounts`,\n                },\n                {\n                  label: 'Hashtags',\n                  type: 'hashtags',\n                  to: `/search?q=${encodeURIComponent(q)}&type=hashtags`,\n                },\n                {\n                  label: 'Posts',\n                  type: 'statuses',\n                  to: `/search?q=${encodeURIComponent(q)}&type=statuses`,\n                },\n              ]\n                .sort((a, b) => {\n                  if (a.type === type) return -1;\n                  if (b.type === type) return 1;\n                  return 0;\n                })\n                .map((link) => (\n                  <Link to={link.to}>{link.label}</Link>\n                ))}\n            </div>\n          )}\n          {!!q ? (\n            <>\n              {(!type || type === 'accounts') && (\n                <>\n                  {type !== 'accounts' && (\n                    <h2 class=\"timeline-header\">Accounts</h2>\n                  )}\n                  {accountResults.length > 0 ? (\n                    <>\n                      <ul class=\"timeline flat accounts-list\">\n                        {accountResults.map((account) => (\n                          <li key={account.id}>\n                            <AccountBlock\n                              account={account}\n                              instance={instance}\n                              showStats\n                            />\n                          </li>\n                        ))}\n                      </ul>\n                      {type !== 'accounts' && (\n                        <div class=\"ui-state\">\n                          <Link\n                            class=\"plain button\"\n                            to={`/search?q=${q}&type=accounts`}\n                          >\n                            See more accounts <Icon icon=\"arrow-right\" />\n                          </Link>\n                        </div>\n                      )}\n                    </>\n                  ) : (\n                    !type &&\n                    (uiState === 'loading' ? (\n                      <p class=\"ui-state\">\n                        <Loader abrupt />\n                      </p>\n                    ) : (\n                      <p class=\"ui-state\">No accounts found.</p>\n                    ))\n                  )}\n                </>\n              )}\n              {(!type || type === 'hashtags') && (\n                <>\n                  {type !== 'hashtags' && (\n                    <h2 class=\"timeline-header\">Hashtags</h2>\n                  )}\n                  {hashtagResults.length > 0 ? (\n                    <>\n                      <ul class=\"link-list hashtag-list\">\n                        {hashtagResults.map((hashtag) => (\n                          <li key={hashtag.name}>\n                            <Link\n                              to={\n                                instance\n                                  ? `/${instance}/t/${hashtag.name}`\n                                  : `/t/${hashtag.name}`\n                              }\n                            >\n                              <Icon icon=\"hashtag\" />\n                              <span>{hashtag.name}</span>\n                            </Link>\n                          </li>\n                        ))}\n                      </ul>\n                      {type !== 'hashtags' && (\n                        <div class=\"ui-state\">\n                          <Link\n                            class=\"plain button\"\n                            to={`/search?q=${q}&type=hashtags`}\n                          >\n                            See more hashtags <Icon icon=\"arrow-right\" />\n                          </Link>\n                        </div>\n                      )}\n                    </>\n                  ) : (\n                    !type &&\n                    (uiState === 'loading' ? (\n                      <p class=\"ui-state\">\n                        <Loader abrupt />\n                      </p>\n                    ) : (\n                      <p class=\"ui-state\">No hashtags found.</p>\n                    ))\n                  )}\n                </>\n              )}\n              {(!type || type === 'statuses') && (\n                <>\n                  {type !== 'statuses' && (\n                    <h2 class=\"timeline-header\">Posts</h2>\n                  )}\n                  {statusResults.length > 0 ? (\n                    <>\n                      <ul class=\"timeline\">\n                        {statusResults.map((status) => (\n                          <li key={status.id}>\n                            <Link\n                              class=\"status-link\"\n                              to={\n                                instance\n                                  ? `/${instance}/s/${status.id}`\n                                  : `/s/${status.id}`\n                              }\n                            >\n                              <Status status={status} />\n                            </Link>\n                          </li>\n                        ))}\n                      </ul>\n                      {type !== 'statuses' && (\n                        <div class=\"ui-state\">\n                          <Link\n                            class=\"plain button\"\n                            to={`/search?q=${q}&type=statuses`}\n                          >\n                            See more posts <Icon icon=\"arrow-right\" />\n                          </Link>\n                        </div>\n                      )}\n                    </>\n                  ) : (\n                    !type &&\n                    (uiState === 'loading' ? (\n                      <p class=\"ui-state\">\n                        <Loader abrupt />\n                      </p>\n                    ) : (\n                      <p class=\"ui-state\">No posts found.</p>\n                    ))\n                  )}\n                </>\n              )}\n              {!!type &&\n                (uiState === 'default' ? (\n                  showMore ? (\n                    <InView\n                      onChange={(inView) => {\n                        if (inView) {\n                          loadResults();\n                        }\n                      }}\n                    >\n                      <button\n                        type=\"button\"\n                        class=\"plain block\"\n                        onClick={() => loadResults()}\n                        style={{ marginBlockEnd: '6em' }}\n                      >\n                        Show more&hellip;\n                      </button>\n                    </InView>\n                  ) : (\n                    <p class=\"ui-state insignificant\">The end.</p>\n                  )\n                ) : (\n                  uiState === 'loading' && (\n                    <p class=\"ui-state\">\n                      <Loader abrupt />\n                    </p>\n                  )\n                ))}\n            </>\n          ) : uiState === 'loading' ? (\n            <p class=\"ui-state\">\n              <Loader abrupt />\n            </p>\n          ) : (\n            <p class=\"ui-state\">\n              Enter your search term or paste a URL above to get started.\n            </p>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default Search;\n","import './status.css';\n\nimport { Menu, MenuDivider, MenuHeader, MenuItem } from '@szhsin/react-menu';\nimport debounce from 'just-debounce-it';\nimport pRetry from 'p-retry';\nimport { memo } from 'preact/compat';\nimport {\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { InView } from 'react-intersection-observer';\nimport { matchPath, useSearchParams } from 'react-router-dom';\nimport { useDebouncedCallback } from 'use-debounce';\nimport { useSnapshot } from 'valtio';\n\nimport Avatar from '../components/avatar';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport MediaModal from '../components/media-modal';\nimport NameText from '../components/name-text';\nimport RelativeTime from '../components/relative-time';\nimport Status from '../components/status';\nimport { api } from '../utils/api';\nimport htmlContentLength from '../utils/html-content-length';\nimport shortenNumber from '../utils/shorten-number';\nimport states, {\n  getStatus,\n  saveStatus,\n  statusKey,\n  threadifyStatus,\n} from '../utils/states';\nimport statusPeek from '../utils/status-peek';\nimport { getCurrentAccount } from '../utils/store-utils';\nimport useScroll from '../utils/useScroll';\nimport useTitle from '../utils/useTitle';\n\nimport getInstanceStatusURL from './../utils/get-instance-status-url';\n\nconst LIMIT = 40;\nconst SUBCOMMENTS_OPEN_ALL_LIMIT = 10;\nconst MAX_WEIGHT = 5;\n\nlet cachedRepliesToggle = {};\nlet cachedStatusesMap = {};\nlet scrollPositions = {};\nfunction resetScrollPosition(id) {\n  delete cachedStatusesMap[id];\n  delete scrollPositions[id];\n}\n\nconst scrollIntoViewOptions = {\n  block: 'nearest',\n  inline: 'center',\n  behavior: 'smooth',\n};\n\nfunction StatusPage(params) {\n  const { id } = params;\n  const { masto, instance } = api({ instance: params.instance });\n  const snapStates = useSnapshot(states);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const mediaParam = searchParams.get('media');\n  const mediaOnlyParam = searchParams.get('media-only');\n  const mediaIndex = parseInt(mediaParam || mediaOnlyParam, 10);\n  let showMedia = mediaIndex > 0;\n  const mediaStatusID = searchParams.get('mediaStatusID');\n  const mediaStatus = getStatus(mediaStatusID, instance);\n  if (mediaStatusID && !mediaStatus) {\n    showMedia = false;\n  }\n  const showMediaOnly = showMedia && !!mediaOnlyParam;\n\n  const sKey = statusKey(id, instance);\n  const [heroStatus, setHeroStatus] = useState(states.statuses[sKey]);\n  useEffect(() => {\n    if (states.statuses[sKey]) {\n      setHeroStatus(states.statuses[sKey]);\n    }\n  }, [sKey]);\n\n  const closeLink = useMemo(() => {\n    const { prevLocation } = states;\n    const pathname =\n      (prevLocation?.pathname || '') + (prevLocation?.search || '');\n    const matchStatusPath =\n      matchPath('/:instance/s/:id', pathname) || matchPath('/s/:id', pathname);\n    if (!pathname || matchStatusPath) {\n      return '/';\n    }\n    return pathname;\n  }, []);\n\n  useEffect(() => {\n    if (!heroStatus && showMedia) {\n      (async () => {\n        try {\n          const status = await masto.v1.statuses.$select(id).fetch();\n          saveStatus(status, instance);\n          setHeroStatus(status);\n        } catch (err) {\n          console.error(err);\n          alert('Unable to load post.');\n          location.hash = closeLink;\n        }\n      })();\n    }\n  }, [showMedia]);\n\n  const mediaAttachments = mediaStatusID\n    ? mediaStatus?.mediaAttachments\n    : heroStatus?.mediaAttachments;\n\n  const handleMediaClose = useCallback(() => {\n    if (\n      !window.matchMedia('(min-width: calc(40em + 350px))').matches &&\n      snapStates.prevLocation\n    ) {\n      history.back();\n    } else {\n      if (showMediaOnly) {\n        location.hash = closeLink;\n      } else {\n        searchParams.delete('media');\n        searchParams.delete('mediaStatusID');\n        setSearchParams(searchParams);\n      }\n    }\n  }, [showMediaOnly, closeLink, snapStates.prevLocation]);\n\n  return (\n    <div class=\"deck-backdrop\">\n      {showMedia ? (\n        mediaAttachments?.length ? (\n          <MediaModal\n            mediaAttachments={mediaAttachments}\n            statusID={mediaStatusID || id}\n            instance={instance}\n            lang={heroStatus?.language}\n            index={mediaIndex - 1}\n            onClose={handleMediaClose}\n          />\n        ) : (\n          <div class=\"media-modal-container loading\">\n            <Loader abrupt />\n          </div>\n        )\n      ) : (\n        <Link to={closeLink} />\n      )}\n      {!showMediaOnly && (\n        <StatusThread\n          id={id}\n          instance={params.instance}\n          closeLink={closeLink}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction StatusThread({ id, closeLink = '/', instance: propInstance }) {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const mediaParam = searchParams.get('media');\n  const showMedia = parseInt(mediaParam, 10) > 0;\n  const [viewMode, setViewMode] = useState(searchParams.get('view'));\n  const translate = !!parseInt(searchParams.get('translate'));\n  const { masto, instance } = api({ instance: propInstance });\n  const {\n    masto: currentMasto,\n    instance: currentInstance,\n    authenticated,\n  } = api();\n  const sameInstance = instance === currentInstance;\n  const snapStates = useSnapshot(states);\n  const [statuses, setStatuses] = useState([]);\n  const [uiState, setUIState] = useState('default');\n  const heroStatusRef = useRef();\n  const sKey = statusKey(id, instance);\n  const totalDescendants = useRef(0);\n\n  const scrollableRef = useRef();\n  useEffect(() => {\n    scrollableRef.current?.focus();\n  }, []);\n  useEffect(() => {\n    const onScroll = debounce(() => {\n      // console.log('onScroll');\n      if (!scrollableRef.current) return;\n      const { scrollTop } = scrollableRef.current;\n      if (uiState !== 'loading') {\n        scrollPositions[id] = scrollTop;\n      }\n    }, 50);\n    scrollableRef.current?.addEventListener('scroll', onScroll, {\n      passive: true,\n    });\n    onScroll();\n    return () => {\n      onScroll.cancel();\n      scrollableRef.current?.removeEventListener('scroll', onScroll);\n    };\n  }, [id, uiState !== 'loading']);\n\n  const scrollOffsets = useRef();\n  const initContext = ({ reloadHero } = {}) => {\n    console.debug('initContext', id);\n    setUIState('loading');\n    let heroTimer;\n\n    const cachedStatuses = cachedStatusesMap[id];\n    if (cachedStatuses) {\n      // Case 1: It's cached, let's restore them to make it snappy\n      const reallyCachedStatuses = cachedStatuses.filter(\n        (s) => states.statuses[sKey],\n        // Some are not cached in the global state, so we need to filter them out\n      );\n      setStatuses(reallyCachedStatuses);\n    } else {\n      // const heroIndex = statuses.findIndex((s) => s.id === id);\n      // if (heroIndex !== -1) {\n      //   // Case 2: It's in current statuses. Slice off all descendant statuses after the hero status to be safe\n      //   const slicedStatuses = statuses.slice(0, heroIndex + 1);\n      //   setStatuses(slicedStatuses);\n      // } else {\n      // Case 3: Not cached and not in statuses, let's start from scratch\n      setStatuses([{ id }]);\n      // }\n    }\n\n    (async () => {\n      const heroFetch = () =>\n        pRetry(() => masto.v1.statuses.$select(id).fetch(), {\n          retries: 4,\n        });\n      const contextFetch = pRetry(\n        () => masto.v1.statuses.$select(id).context.fetch(),\n        {\n          retries: 8,\n        },\n      );\n\n      const hasStatus = !!snapStates.statuses[sKey];\n      let heroStatus = snapStates.statuses[sKey];\n      if (hasStatus && !reloadHero) {\n        console.debug('Hero status is cached');\n      } else {\n        try {\n          heroStatus = await heroFetch();\n          saveStatus(heroStatus, instance);\n          // Give time for context to appear\n          await new Promise((resolve) => {\n            setTimeout(resolve, 100);\n          });\n        } catch (e) {\n          console.error(e);\n          setUIState('error');\n          return;\n        }\n      }\n\n      try {\n        const context = await contextFetch;\n        const { ancestors, descendants } = context;\n\n        totalDescendants.current = descendants?.length || 0;\n\n        const missingStatuses = new Set();\n        ancestors.forEach((status) => {\n          saveStatus(status, instance, {\n            skipThreading: true,\n          });\n          if (\n            status.inReplyToId &&\n            !ancestors.find((s) => s.id === status.inReplyToId)\n          ) {\n            missingStatuses.add(status.inReplyToId);\n          }\n        });\n        const ancestorsIsThread = ancestors.every(\n          (s) => s.account.id === heroStatus.account.id,\n        );\n        const nestedDescendants = [];\n        descendants.forEach((status) => {\n          saveStatus(status, instance, {\n            skipThreading: true,\n          });\n\n          if (\n            status.inReplyToId &&\n            !descendants.find((s) => s.id === status.inReplyToId) &&\n            status.inReplyToId !== heroStatus.id\n          ) {\n            missingStatuses.add(status.inReplyToId);\n          }\n\n          if (status.inReplyToAccountId === status.account.id) {\n            // If replying to self, it's part of the thread, level 1\n            nestedDescendants.push(status);\n          } else if (status.inReplyToId === heroStatus.id) {\n            // If replying to the hero status, it's a reply, level 1\n            nestedDescendants.push(status);\n          } else if (\n            !status.inReplyToAccountId &&\n            nestedDescendants.find((s) => s.id === status.inReplyToId) &&\n            status.account.id === heroStatus.account.id\n          ) {\n            // If replying to hero's own statuses, it's part of the thread, level 1\n            nestedDescendants.push(status);\n          } else {\n            // If replying to someone else, it's a reply to a reply, level 2\n            const parent = descendants.find((s) => s.id === status.inReplyToId);\n            if (parent) {\n              if (!parent.__replies) {\n                parent.__replies = [];\n              }\n              parent.__replies.push(status);\n            } else {\n              // If no parent, something is wrong\n              console.warn('No parent found for', status);\n            }\n          }\n        });\n\n        console.log({ ancestors, descendants, nestedDescendants });\n        if (missingStatuses.size) {\n          console.error('Missing statuses', [...missingStatuses]);\n        }\n\n        function expandReplies(_replies) {\n          return _replies?.map((_r) => ({\n            id: _r.id,\n            account: _r.account,\n            repliesCount: _r.repliesCount,\n            content: _r.content,\n            weight: calcStatusWeight(_r),\n            replies: expandReplies(_r.__replies),\n          }));\n        }\n\n        const allStatuses = [\n          ...ancestors.map((s) => ({\n            id: s.id,\n            ancestor: true,\n            isThread: ancestorsIsThread,\n            accountID: s.account.id,\n            account: s.account,\n            repliesCount: s.repliesCount,\n            weight: calcStatusWeight(s),\n          })),\n          {\n            id,\n            accountID: heroStatus.account.id,\n            weight: calcStatusWeight(heroStatus),\n          },\n          ...nestedDescendants.map((s) => ({\n            id: s.id,\n            account: s.account,\n            accountID: s.account.id,\n            descendant: true,\n            thread: s.account.id === heroStatus.account.id,\n            weight: calcStatusWeight(s),\n            replies: expandReplies(s.__replies),\n          })),\n        ];\n\n        setUIState('default');\n        scrollOffsets.current = {\n          offsetTop: heroStatusRef.current?.offsetTop,\n          scrollTop: scrollableRef.current?.scrollTop,\n        };\n\n        // Set limit to hero's index\n        const heroLimit = allStatuses.findIndex((s) => s.id === id);\n        if (heroLimit >= limit) {\n          setLimit(heroLimit + 1);\n        }\n\n        console.log({ allStatuses });\n        setStatuses(allStatuses);\n        cachedStatusesMap[id] = allStatuses;\n\n        // Let's threadify this one\n        // Note that all non-hero statuses will trigger saveStatus which will threadify them too\n        // By right, at this point, all descendant statuses should be cached\n        threadifyStatus(heroStatus, instance);\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n\n    return () => {\n      clearTimeout(heroTimer);\n    };\n  };\n\n  useEffect(initContext, [id, masto]);\n  useEffect(() => {\n    if (!statuses.length) return;\n    console.debug('STATUSES', statuses);\n    const scrollPosition = scrollPositions[id];\n    console.debug('scrollPosition', scrollPosition);\n    if (!!scrollPosition) {\n      console.debug('Case 1', {\n        id,\n        scrollPosition,\n      });\n      scrollableRef.current.scrollTop = scrollPosition;\n    } else if (scrollOffsets.current) {\n      const newScrollOffsets = {\n        offsetTop: heroStatusRef.current?.offsetTop,\n        scrollTop: scrollableRef.current?.scrollTop,\n      };\n      const newScrollTop =\n        newScrollOffsets.offsetTop -\n        scrollOffsets.current.offsetTop +\n        newScrollOffsets.scrollTop;\n      console.debug('Case 2', {\n        scrollOffsets: scrollOffsets.current,\n        newScrollOffsets,\n        newScrollTop,\n        statuses: [...statuses],\n      });\n      scrollableRef.current.scrollTop = newScrollTop;\n    } else if (statuses.length === 1) {\n      console.debug('Case 3', {\n        id,\n      });\n      scrollableRef.current.scrollTop = 0;\n    }\n\n    // RESET\n    scrollOffsets.current = null;\n  }, [statuses]);\n\n  useEffect(() => {\n    if (snapStates.reloadStatusPage <= 0) return;\n    // Delete the cache for the context\n    (async () => {\n      try {\n        const { instanceURL } = getCurrentAccount();\n        const contextURL = `https://${instanceURL}/api/v1/statuses/${id}/context`;\n        console.log('Clear cache', contextURL);\n        const apiCache = await caches.open('api');\n        await apiCache.delete(contextURL, { ignoreVary: true });\n\n        return initContext({\n          reloadHero: true,\n        });\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [snapStates.reloadStatusPage]);\n\n  useEffect(() => {\n    return () => {\n      // RESET\n      scrollPositions = {};\n      states.reloadStatusPage = 0;\n      cachedStatusesMap = {};\n      cachedRepliesToggle = {};\n      statusWeightCache.clear();\n    };\n  }, []);\n\n  const heroStatus = snapStates.statuses[sKey] || snapStates.statuses[id];\n  const heroDisplayName = useMemo(() => {\n    // Remove shortcodes from display name\n    if (!heroStatus) return '';\n    const { account } = heroStatus;\n    const div = document.createElement('div');\n    div.innerHTML = account.displayName;\n    return div.innerText.trim();\n  }, [heroStatus]);\n  const heroContentText = useMemo(() => {\n    if (!heroStatus) return '';\n    let text = statusPeek(heroStatus);\n    if (text.length > 64) {\n      // \"The title should ideally be less than 64 characters in length\"\n      // https://www.w3.org/Provider/Style/TITLE.html\n      text = text.slice(0, 64) + '…';\n    }\n    return text;\n  }, [heroStatus]);\n  useTitle(\n    heroDisplayName && heroContentText\n      ? `${heroDisplayName}: \"${heroContentText}\"`\n      : 'Status',\n    '/:instance?/s/:id',\n  );\n\n  const postInstance = useMemo(() => {\n    if (!heroStatus) return;\n    const { url } = heroStatus;\n    if (!url) return;\n    return new URL(url).hostname;\n  }, [heroStatus]);\n  const postSameInstance = useMemo(() => {\n    if (!postInstance) return;\n    return postInstance === instance;\n  }, [postInstance, instance]);\n\n  const [limit, setLimit] = useState(LIMIT);\n  const showMore = useMemo(() => {\n    // return number of statuses to show\n    return statuses.length - limit;\n  }, [statuses.length, limit]);\n\n  const hasDescendants = statuses.some((s) => s.descendant);\n  const ancestors = statuses.filter((s) => s.ancestor);\n\n  const [heroInView, setHeroInView] = useState(true);\n  const onView = useDebouncedCallback(setHeroInView, 100);\n  const heroPointer = useMemo(() => {\n    // get top offset of heroStatus\n    if (!heroStatusRef.current || heroInView) return null;\n    const { top } = heroStatusRef.current.getBoundingClientRect();\n    return top > 0 ? 'down' : 'up';\n  }, [heroInView]);\n\n  useHotkeys(\n    'esc',\n    () => {\n      location.hash = closeLink;\n    },\n    {\n      // If media is open, esc to close media first\n      // Else close the status page\n      enabled: !showMedia,\n    },\n  );\n  // For backspace, will always close both media and status page\n  useHotkeys('backspace', () => {\n    location.hash = closeLink;\n  });\n\n  useHotkeys('j', () => {\n    const activeStatus = document.activeElement.closest(\n      '.status-link, .status-focus',\n    );\n    const activeStatusRect = activeStatus?.getBoundingClientRect();\n    const allStatusLinks = Array.from(\n      // Select all statuses except those inside collapsed details/summary\n      // Hat-tip to @AmeliaBR@front-end.social\n      // https://front-end.social/@AmeliaBR/109784776146144471\n      scrollableRef.current.querySelectorAll(\n        '.status-link:not(details:not([open]) > summary ~ *, details:not([open]) > summary ~ * *), .status-focus:not(details:not([open]) > summary ~ *, details:not([open]) > summary ~ * *)',\n      ),\n    );\n    console.log({ allStatusLinks });\n    if (\n      activeStatus &&\n      activeStatusRect.top < scrollableRef.current.clientHeight &&\n      activeStatusRect.bottom > 0\n    ) {\n      const activeStatusIndex = allStatusLinks.indexOf(activeStatus);\n      let nextStatus = allStatusLinks[activeStatusIndex + 1];\n      if (nextStatus) {\n        nextStatus.focus();\n        nextStatus.scrollIntoView(scrollIntoViewOptions);\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostStatusLink = allStatusLinks.find((statusLink) => {\n        const statusLinkRect = statusLink.getBoundingClientRect();\n        return statusLinkRect.top >= 44 && statusLinkRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostStatusLink) {\n        topmostStatusLink.focus();\n        topmostStatusLink.scrollIntoView(scrollIntoViewOptions);\n      }\n    }\n  });\n\n  useHotkeys('k', () => {\n    const activeStatus = document.activeElement.closest(\n      '.status-link, .status-focus',\n    );\n    const activeStatusRect = activeStatus?.getBoundingClientRect();\n    const allStatusLinks = Array.from(\n      scrollableRef.current.querySelectorAll(\n        '.status-link:not(details:not([open]) > summary ~ *, details:not([open]) > summary ~ * *), .status-focus:not(details:not([open]) > summary ~ *, details:not([open]) > summary ~ * *)',\n      ),\n    );\n    if (\n      activeStatus &&\n      activeStatusRect.top < scrollableRef.current.clientHeight &&\n      activeStatusRect.bottom > 0\n    ) {\n      const activeStatusIndex = allStatusLinks.indexOf(activeStatus);\n      let prevStatus = allStatusLinks[activeStatusIndex - 1];\n      if (prevStatus) {\n        prevStatus.focus();\n        prevStatus.scrollIntoView(scrollIntoViewOptions);\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostStatusLink = allStatusLinks.find((statusLink) => {\n        const statusLinkRect = statusLink.getBoundingClientRect();\n        return statusLinkRect.top >= 44 && statusLinkRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostStatusLink) {\n        topmostStatusLink.focus();\n        topmostStatusLink.scrollIntoView(scrollIntoViewOptions);\n      }\n    }\n  });\n\n  // NOTE: I'm not sure if 'x' is the best shortcut for this, might change it later\n  // IDEA: x is for expand\n  useHotkeys('x', () => {\n    const activeStatus = document.activeElement.closest(\n      '.status-link, .status-focus',\n    );\n    if (activeStatus) {\n      const details = activeStatus.nextElementSibling;\n      if (details && details.tagName.toLowerCase() === 'details') {\n        details.open = !details.open;\n      }\n    }\n  });\n\n  const { nearReachStart } = useScroll({\n    scrollableRef,\n    distanceFromStartPx: 16,\n  });\n\n  const initialPageState = useRef(showMedia ? 'media+status' : 'status');\n\n  const handleMediaClick = useCallback(\n    (e, i, media, status) => {\n      e.preventDefault();\n      e.stopPropagation();\n      setSearchParams({\n        media: i + 1,\n        mediaStatusID: status.id,\n      });\n    },\n    [id],\n  );\n\n  const handleStatusLinkClick = useCallback((e, status) => {\n    resetScrollPosition(status.id);\n  }, []);\n\n  return (\n    <div\n      tabIndex=\"-1\"\n      ref={scrollableRef}\n      class={`status-deck deck contained ${\n        statuses.length > 1 ? 'padded-bottom' : ''\n      } ${initialPageState.current === 'status' ? 'slide-in' : ''} ${\n        viewMode ? `deck-view-${viewMode}` : ''\n      }`}\n      onAnimationEnd={(e) => {\n        // Fix the bounce effect when switching viewMode\n        // `slide-in` animation kicks in when switching viewMode\n        if (initialPageState.current === 'status') {\n          // e.target.classList.remove('slide-in');\n          initialPageState.current = null;\n        }\n      }}\n    >\n      <header\n        class={`${heroInView ? 'inview' : ''} ${\n          uiState === 'loading' ? 'loading' : ''\n        }`}\n        onDblClick={(e) => {\n          // reload statuses\n          states.reloadStatusPage++;\n        }}\n      >\n        {/* <div>\n            <Link class=\"button plain deck-close\" href={closeLink}>\n              <Icon icon=\"chevron-left\" size=\"xl\" />\n            </Link>\n          </div> */}\n        <div class=\"header-grid header-grid-2\">\n          <h1>\n            {!!/\\/s\\//i.test(snapStates.prevLocation?.pathname) && (\n              <button\n                type=\"button\"\n                class=\"plain deck-back\"\n                onClick={() => {\n                  history.back();\n                }}\n              >\n                <Icon icon=\"chevron-left\" size=\"xl\" />\n              </button>\n            )}\n            {!heroInView && heroStatus && uiState !== 'loading' ? (\n              <>\n                <span class=\"hero-heading\">\n                  <NameText\n                    account={heroStatus.account}\n                    instance={instance}\n                    showAvatar\n                    short\n                  />{' '}\n                  <span class=\"insignificant\">\n                    &bull;{' '}\n                    <RelativeTime\n                      datetime={heroStatus.createdAt}\n                      format=\"micro\"\n                    />\n                  </span>\n                </span>{' '}\n                <button\n                  type=\"button\"\n                  class=\"ancestors-indicator light small\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    heroStatusRef.current.scrollIntoView({\n                      behavior: 'smooth',\n                      block: 'start',\n                    });\n                  }}\n                  title=\"Go to main post\"\n                >\n                  <Icon\n                    icon={heroPointer === 'down' ? 'arrow-down' : 'arrow-up'}\n                  />\n                </button>\n              </>\n            ) : (\n              <>\n                Post{' '}\n                <button\n                  type=\"button\"\n                  class=\"ancestors-indicator light small\"\n                  onClick={(e) => {\n                    // Scroll to top\n                    e.preventDefault();\n                    e.stopPropagation();\n                    scrollableRef.current.scrollTo({\n                      top: 0,\n                      behavior: 'smooth',\n                    });\n                  }}\n                  hidden={!ancestors.length || nearReachStart}\n                  title={`${ancestors.length} posts above ‒ Go to top`}\n                >\n                  <Icon icon=\"arrow-up\" />\n                  {ancestors\n                    .filter(\n                      (a, i, arr) =>\n                        arr.findIndex((b) => b.accountID === a.accountID) === i,\n                    )\n                    .slice(0, 3)\n                    .map((ancestor) => (\n                      <Avatar\n                        key={ancestor.account.id}\n                        url={ancestor.account.avatar}\n                        alt={ancestor.account.displayName}\n                      />\n                    ))}\n                  {/* <Icon icon=\"comment\" />{' '} */}\n                  {ancestors.length > 3 && (\n                    <>\n                      {' '}\n                      <span class=\"insignificant\">\n                        {shortenNumber(ancestors.length)}\n                      </span>\n                    </>\n                  )}\n                </button>\n              </>\n            )}\n          </h1>\n          <div class=\"header-side\">\n            <Menu\n              align=\"end\"\n              portal={{\n                // Need this, else the menu click will cause scroll jump\n                target: scrollableRef.current,\n              }}\n              menuButton={\n                <button type=\"button\" class=\"button plain4\">\n                  <Icon icon=\"more\" alt=\"Actions\" size=\"xl\" />\n                </button>\n              }\n            >\n              <MenuItem\n                disabled={uiState === 'loading'}\n                onClick={() => {\n                  states.reloadStatusPage++;\n                }}\n              >\n                <Icon icon=\"refresh\" />\n                <span>Refresh</span>\n              </MenuItem>\n              <MenuItem\n                className=\"menu-switch-view\"\n                onClick={() => {\n                  setViewMode(viewMode === 'full' ? null : 'full');\n                  searchParams.delete('media');\n                  searchParams.delete('media-only');\n                  if (viewMode === 'full') {\n                    searchParams.delete('view');\n                  } else {\n                    searchParams.set('view', 'full');\n                  }\n                  setSearchParams(searchParams);\n                }}\n              >\n                <Icon\n                  icon={\n                    {\n                      '': 'layout5',\n                      full: 'layout4',\n                    }[viewMode || '']\n                  }\n                />\n                <span>\n                  Switch to {viewMode === 'full' ? 'Side Peek' : 'Full'} view\n                </span>\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  // Click all buttons with class .spoiler but not .spoiling\n                  const buttons = Array.from(\n                    scrollableRef.current.querySelectorAll(\n                      'button.spoiler:not(.spoiling)',\n                    ),\n                  );\n                  buttons.forEach((button) => {\n                    button.click();\n                  });\n                }}\n              >\n                <Icon icon=\"eye-open\" /> <span>Show all sensitive content</span>\n              </MenuItem>\n              <MenuDivider />\n              <MenuHeader className=\"plain\">Experimental</MenuHeader>\n              <MenuItem\n                disabled={postSameInstance}\n                onClick={() => {\n                  const statusURL = getInstanceStatusURL(heroStatus.url);\n                  if (statusURL) {\n                    location.hash = statusURL;\n                  } else {\n                    alert('Unable to switch');\n                  }\n                }}\n              >\n                <Icon icon=\"transfer\" />\n                <small class=\"menu-double-lines\">\n                  Switch to post's instance (<b>{postInstance}</b>)\n                </small>\n              </MenuItem>\n            </Menu>\n            <Link class=\"button plain deck-close\" to={closeLink}>\n              <Icon icon=\"x\" size=\"xl\" />\n            </Link>\n          </div>\n        </div>\n      </header>\n      {!!statuses.length && heroStatus ? (\n        <ul\n          class={`timeline flat contextual grow ${\n            uiState === 'loading' ? 'loading' : ''\n          }`}\n        >\n          {statuses.slice(0, limit).map((status) => {\n            const {\n              id: statusID,\n              ancestor,\n              isThread,\n              descendant,\n              thread,\n              replies,\n              repliesCount,\n              weight,\n            } = status;\n            const isHero = statusID === id;\n            // const StatusParent = useCallback(\n            //   (props) =>\n            //     isThread || thread || ancestor ? (\n            //       <Link\n            //         class=\"status-link\"\n            //         to={\n            //           instance ? `/${instance}/s/${statusID}` : `/s/${statusID}`\n            //         }\n            //         onClick={() => {\n            //           resetScrollPosition(statusID);\n            //         }}\n            //         {...props}\n            //       />\n            //     ) : (\n            //       <div class=\"status-focus\" tabIndex={0} {...props} />\n            //     ),\n            //   [isThread, thread],\n            // );\n            return (\n              <li\n                key={statusID}\n                ref={isHero ? heroStatusRef : null}\n                class={`${ancestor ? 'ancestor' : ''} ${\n                  descendant ? 'descendant' : ''\n                } ${thread ? 'thread' : ''} ${isHero ? 'hero' : ''}`}\n              >\n                {isHero ? (\n                  <>\n                    <InView\n                      threshold={0.1}\n                      onChange={onView}\n                      class=\"status-focus\"\n                      tabIndex={0}\n                    >\n                      <Status\n                        statusID={statusID}\n                        instance={instance}\n                        withinContext\n                        size=\"l\"\n                        enableTranslate\n                        forceTranslate={translate}\n                      />\n                    </InView>\n                    {uiState !== 'loading' && !authenticated ? (\n                      <div class=\"post-status-banner\">\n                        <p>\n                          You're not logged in. Interactions (reply, boost, etc)\n                          are not possible.\n                        </p>\n                        <Link to=\"/login\" class=\"button\">\n                          Log in\n                        </Link>\n                      </div>\n                    ) : (\n                      !sameInstance && (\n                        <div class=\"post-status-banner\">\n                          <p>\n                            This post is from another instance (\n                            <b>{instance}</b>). Interactions (reply, boost, etc)\n                            are not possible.\n                          </p>\n                          <button\n                            type=\"button\"\n                            disabled={uiState === 'loading'}\n                            onClick={() => {\n                              setUIState('loading');\n                              (async () => {\n                                try {\n                                  const results =\n                                    await currentMasto.v2.search.fetch({\n                                      q: heroStatus.url,\n                                      type: 'statuses',\n                                      resolve: true,\n                                      limit: 1,\n                                    });\n                                  if (results.statuses.length) {\n                                    const status = results.statuses[0];\n                                    location.hash = currentInstance\n                                      ? `/${currentInstance}/s/${status.id}`\n                                      : `/s/${status.id}`;\n                                  } else {\n                                    throw new Error('No results');\n                                  }\n                                } catch (e) {\n                                  setUIState('default');\n                                  alert('Error: ' + e);\n                                  console.error(e);\n                                }\n                              })();\n                            }}\n                          >\n                            <Icon icon=\"transfer\" /> Switch to my instance to\n                            enable interactions\n                          </button>\n                        </div>\n                      )\n                    )}\n                  </>\n                ) : (\n                  // <StatusParent>\n                  <Link\n                    class=\"status-link\"\n                    to={\n                      instance ? `/${instance}/s/${statusID}` : `/s/${statusID}`\n                    }\n                    onClick={() => {\n                      resetScrollPosition(statusID);\n                    }}\n                  >\n                    <Status\n                      statusID={statusID}\n                      instance={instance}\n                      withinContext\n                      size={thread || ancestor ? 'm' : 's'}\n                      enableTranslate\n                      onMediaClick={handleMediaClick}\n                      onStatusLinkClick={handleStatusLinkClick}\n                    />\n                    {ancestor && isThread && repliesCount > 1 && (\n                      <div class=\"replies-link\">\n                        <Icon icon=\"comment\" />{' '}\n                        <span title={repliesCount}>\n                          {shortenNumber(repliesCount)}\n                        </span>\n                      </div>\n                    )}{' '}\n                    {/* {replies?.length > LIMIT && (\n                        <div class=\"replies-link\">\n                          <Icon icon=\"comment\" />{' '}\n                          <span title={replies.length}>\n                            {shortenNumber(replies.length)}\n                          </span>\n                        </div>\n                      )} */}\n                    {/* </StatusParent> */}\n                  </Link>\n                )}\n                {descendant && replies?.length > 0 && (\n                  <SubComments\n                    instance={instance}\n                    replies={replies}\n                    hasParentThread={thread}\n                    level={1}\n                    accWeight={weight}\n                    openAll={\n                      totalDescendants.current < SUBCOMMENTS_OPEN_ALL_LIMIT\n                    }\n                  />\n                )}\n                {uiState === 'loading' &&\n                  isHero &&\n                  !!heroStatus?.repliesCount &&\n                  !hasDescendants && (\n                    <div class=\"status-loading\">\n                      <Loader />\n                    </div>\n                  )}\n                {uiState === 'error' &&\n                  isHero &&\n                  !!heroStatus?.repliesCount &&\n                  !hasDescendants && (\n                    <div class=\"status-error\">\n                      Unable to load replies.\n                      <br />\n                      <button\n                        type=\"button\"\n                        class=\"plain\"\n                        onClick={() => {\n                          states.reloadStatusPage++;\n                        }}\n                      >\n                        Try again\n                      </button>\n                    </div>\n                  )}\n              </li>\n            );\n          })}\n          {showMore > 0 && (\n            <li>\n              <button\n                type=\"button\"\n                class=\"plain block show-more\"\n                disabled={uiState === 'loading'}\n                onClick={() => setLimit((l) => l + LIMIT)}\n                style={{ marginBlockEnd: '6em' }}\n              >\n                <div class=\"ib\">\n                  {/* show avatars for first 5 statuses */}\n                  {statuses.slice(limit, limit + 5).map((status) => (\n                    <Avatar\n                      key={status.id}\n                      url={status.account.avatarStatic}\n                      // title={`${status.avatar.displayName} (@${status.avatar.acct})`}\n                    />\n                  ))}\n                </div>{' '}\n                <div class=\"ib\">\n                  Show more&hellip;{' '}\n                  <span class=\"tag\">\n                    {showMore > LIMIT ? `${LIMIT}+` : showMore}\n                  </span>\n                </div>\n              </button>\n            </li>\n          )}\n        </ul>\n      ) : (\n        <>\n          {uiState === 'loading' && (\n            <ul class=\"timeline flat contextual grow loading\">\n              <li>\n                <Status skeleton size=\"l\" />\n              </li>\n            </ul>\n          )}\n          {uiState === 'error' && (\n            <p class=\"ui-state\">\n              Unable to load post\n              <br />\n              <br />\n              <button\n                type=\"button\"\n                onClick={() => {\n                  states.reloadStatusPage++;\n                }}\n              >\n                Try again\n              </button>\n            </p>\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n\nfunction SubComments({\n  replies,\n  instance,\n  hasParentThread,\n  level,\n  accWeight,\n  openAll,\n}) {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  // Total comments count, including sub-replies\n  const diveDeep = (replies) => {\n    return replies.reduce((acc, reply) => {\n      const { repliesCount, replies } = reply;\n      const count = replies?.length || repliesCount;\n      return acc + count + diveDeep(replies || []);\n    }, 0);\n  };\n  const totalComments = replies.length + diveDeep(replies);\n  const sameCount = replies.length === totalComments;\n\n  // Get the first 3 accounts, unique by id\n  const accounts = replies\n    .map((r) => r.account)\n    .filter((a, i, arr) => arr.findIndex((b) => b.id === a.id) === i)\n    .slice(0, 3);\n\n  const totalWeight = useMemo(() => {\n    return replies?.reduce((acc, reply) => {\n      return acc + reply?.weight;\n    }, accWeight);\n  }, [accWeight, replies?.length]);\n\n  let open = false;\n  if (openAll) {\n    open = true;\n  } else if (totalWeight <= MAX_WEIGHT) {\n    open = true;\n  } else if (!hasParentThread && totalComments === 1) {\n    const shortReply = calcStatusWeight(replies[0]) < 2;\n    if (shortReply) open = true;\n  }\n  const openBefore = cachedRepliesToggle[replies[0].id];\n\n  const handleMediaClick = useCallback((e, i, media, status) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setSearchParams({\n      media: i + 1,\n      mediaStatusID: status.id,\n    });\n  }, []);\n\n  const detailsRef = useRef();\n  useLayoutEffect(() => {\n    function handleScroll(e) {\n      e.target.dataset.scrollLeft = e.target.scrollLeft;\n    }\n    detailsRef.current?.addEventListener('scroll', handleScroll, {\n      passive: true,\n    });\n    return () => {\n      detailsRef.current?.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n\n  return (\n    <details\n      ref={detailsRef}\n      class=\"replies\"\n      open={openBefore || open}\n      onToggle={(e) => {\n        const { open } = e.target;\n        // use first reply as ID\n        cachedRepliesToggle[replies[0].id] = open;\n      }}\n      style={{\n        '--comments-level': level,\n      }}\n      data-comments-level={level}\n      data-comments-level-overflow={level > 4}\n    >\n      <summary class=\"replies-summary\" hidden={open}>\n        <span class=\"avatars\">\n          {accounts.map((a) => (\n            <Avatar\n              key={a.id}\n              url={a.avatarStatic}\n              title={`${a.displayName} @${a.username}`}\n              squircle={a?.bot}\n            />\n          ))}\n        </span>\n        <span>\n          <span title={replies.length}>{shortenNumber(replies.length)}</span>{' '}\n          repl\n          {replies.length === 1 ? 'y' : 'ies'}\n        </span>\n        {!sameCount && totalComments > 1 && (\n          <>\n            {' '}\n            &middot;{' '}\n            <span>\n              <span title={totalComments}>{shortenNumber(totalComments)}</span>{' '}\n              comment\n              {totalComments === 1 ? '' : 's'}\n            </span>\n          </>\n        )}\n      </summary>\n      <ul>\n        {replies.map((r) => (\n          <li key={r.id}>\n            <Link\n              class=\"status-link\"\n              to={instance ? `/${instance}/s/${r.id}` : `/s/${r.id}`}\n              onClick={() => {\n                resetScrollPosition(r.id);\n              }}\n            >\n              {/* <div class=\"status-focus\" tabIndex={0}> */}\n              <Status\n                statusID={r.id}\n                instance={instance}\n                withinContext\n                size=\"s\"\n                enableTranslate\n                onMediaClick={handleMediaClick}\n              />\n              {!r.replies?.length && r.repliesCount > 0 && (\n                <div class=\"replies-link\">\n                  <Icon icon=\"comment\" />{' '}\n                  <span title={r.repliesCount}>\n                    {shortenNumber(r.repliesCount)}\n                  </span>\n                </div>\n              )}\n              {/* </div> */}\n            </Link>\n            {r.replies?.length && (\n              <SubComments\n                instance={instance}\n                replies={r.replies}\n                level={level + 1}\n                accWeight={!open ? r.weight : totalWeight}\n                openAll={openAll}\n              />\n            )}\n          </li>\n        ))}\n      </ul>\n    </details>\n  );\n}\n\nconst MEDIA_VIRTUAL_LENGTH = 140;\nconst POLL_VIRTUAL_LENGTH = 35;\nconst CARD_VIRTUAL_LENGTH = 70;\nconst WEIGHT_SEGMENT = 140;\nconst statusWeightCache = new Map();\nfunction calcStatusWeight(status) {\n  const cachedWeight = statusWeightCache.get(status.id);\n  if (cachedWeight) return cachedWeight;\n  const { spoilerText, content, mediaAttachments, poll, card } = status;\n  const length = htmlContentLength(spoilerText + content);\n  const mediaLength = mediaAttachments?.length ? MEDIA_VIRTUAL_LENGTH : 0;\n  const pollLength = (poll?.options?.length || 0) * POLL_VIRTUAL_LENGTH;\n  const cardLength =\n    card && (mediaAttachments?.length || poll?.options?.length)\n      ? 0\n      : CARD_VIRTUAL_LENGTH;\n  const totalLength = length + mediaLength + pollLength + cardLength;\n  const weight = totalLength / WEIGHT_SEGMENT;\n  statusWeightCache.set(status.id, weight);\n  return weight;\n}\n\nexport default memo(StatusPage);\n","import { useParams } from 'react-router-dom';\n\nimport Status from './status';\n\nexport default function StatusRoute() {\n  const params = useParams();\n  const { id, instance } = params;\n  return <Status id={id} instance={instance} />;\n}\n","export default \"__VITE_ASSET__9f719d7a__\"","export default \"__VITE_ASSET__dbb57588__\"","export default \"__VITE_ASSET__61903085__\"","export default \"__VITE_ASSET__f411f03b__\"","export default \"__VITE_ASSET__57516dc0__\"","export default \"__VITE_ASSET__0bd95074__\"","import './welcome.css';\n\nimport boostsCarouselUrl from '../assets/features/boosts-carousel.jpg';\nimport groupedNotificationsUrl from '../assets/features/grouped-notifications.jpg';\nimport multiColumnUrl from '../assets/features/multi-column.jpg';\nimport multiHashtagTimelineUrl from '../assets/features/multi-hashtag-timeline.jpg';\nimport nestedCommentsThreadUrl from '../assets/features/nested-comments-thread.jpg';\nimport logoText from '../assets/logo-text.svg';\nimport logo from '../assets/logo.svg';\n\nimport Link from '../components/link';\nimport states from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nfunction Welcome() {\n  useTitle(null, ['/', '/welcome']);\n  return (\n    <main id=\"welcome\">\n      <div class=\"hero-container\">\n        <h1>\n          <img\n            src={logo}\n            alt=\"\"\n            width=\"200\"\n            height=\"200\"\n            style={{\n              aspectRatio: '1/1',\n              marginBlockEnd: -16,\n            }}\n          />\n          <img src={logoText} alt=\"Phanpy\" width=\"250\" />\n        </h1>\n        <p>\n          <big>\n            <b>\n              <Link to=\"/login\" class=\"button\">\n                Log in\n              </Link>\n            </b>\n          </big>\n        </p>\n        <p class=\"desc\">A minimalistic opinionated Mastodon web client.</p>\n      </div>\n      <div id=\"why-container\">\n        <div class=\"sections\">\n          <section>\n            <img\n              src={boostsCarouselUrl}\n              alt=\"Screenshot of Boosts Carousel\"\n              loading=\"lazy\"\n            />\n            <h4>Boosts Carousel</h4>\n            <p>\n              Visually separate original posts and re-shared posts (boosted\n              posts).\n            </p>\n          </section>\n          <section>\n            <img\n              src={nestedCommentsThreadUrl}\n              alt=\"Screenshot of nested comments thread\"\n              loading=\"lazy\"\n            />\n            <h4>Nested comments thread</h4>\n            <p>Effortlessly follow conversations. Semi-collapsible replies.</p>\n          </section>\n          <section>\n            <img\n              src={groupedNotificationsUrl}\n              alt=\"Screenshot of grouped notifications\"\n              loading=\"lazy\"\n            />\n            <h4>Grouped notifications</h4>\n            <p>\n              Similar notifications are grouped and collapsed to reduce clutter.\n            </p>\n          </section>\n          <section>\n            <img\n              src={multiColumnUrl}\n              alt=\"Screenshot of multi-column UI\"\n              loading=\"lazy\"\n            />\n            <h4>Single or multi-column</h4>\n            <p>\n              By default, single column for zen-mode seekers. Configurable\n              multi-column for power users.\n            </p>\n          </section>\n          <section>\n            <img\n              src={multiHashtagTimelineUrl}\n              alt=\"Screenshot of multi-hashtag timeline with a form to add more hashtags\"\n              loading=\"lazy\"\n            />\n            <h4>Multi-hashtag timeline</h4>\n            <p>Up to 5 hashtags combined into a single timeline.</p>\n          </section>\n        </div>\n      </div>\n      <hr />\n      <p>\n        <a href=\"https://github.com/cheeaun/phanpy\" target=\"_blank\">\n          Built\n        </a>{' '}\n        by{' '}\n        <a\n          href=\"https://mastodon.social/@cheeaun\"\n          target=\"_blank\"\n          onClick={(e) => {\n            e.preventDefault();\n            states.showAccount = 'cheeaun@mastodon.social';\n          }}\n        >\n          @cheeaun\n        </a>\n        .{' '}\n        <a\n          href=\"https://github.com/cheeaun/phanpy/blob/main/PRIVACY.MD\"\n          target=\"_blank\"\n        >\n          Privacy Policy\n        </a>\n        .\n      </p>\n    </main>\n  );\n}\n\nexport default Welcome;\n","// Replace alert() with toastify-js\nimport Toastify from 'toastify-js';\n\nconst nativeAlert = window.alert;\nif (!window.__nativeAlert) window.__nativeAlert = nativeAlert;\n\nwindow.alert = function (message) {\n  console.debug(\n    'ALERT: This is a custom alert() function. Native alert() is still available as window.__nativeAlert()',\n  );\n  // If Error object, show the message\n  if (message instanceof Error && message?.message) {\n    message = message.message;\n  }\n  // If not string, stringify it\n  if (typeof message !== 'string') {\n    message = JSON.stringify(message);\n  }\n\n  const toast = Toastify({\n    text: message,\n    className: 'alert',\n    gravity: 'top',\n    position: 'center',\n    duration: 10_000,\n    offset: {\n      y: 48,\n    },\n    onClick: () => {\n      toast.hideToast();\n    },\n  });\n  toast.showToast();\n};\n","import './app.css';\n\nimport {\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'preact/hooks';\nimport { matchPath, Route, Routes, useLocation } from 'react-router-dom';\nimport 'swiped-events';\nimport { useSnapshot } from 'valtio';\n\nimport BackgroundService from './components/background-service';\nimport ComposeButton from './components/compose-button';\nimport { ICONS } from './components/icon';\nimport KeyboardShortcutsHelp from './components/keyboard-shortcuts-help';\nimport Loader from './components/loader';\nimport Modals from './components/modals';\nimport NotificationService from './components/notification-service';\nimport SearchCommand from './components/search-command';\nimport Shortcuts from './components/shortcuts';\nimport NotFound from './pages/404';\nimport AccountStatuses from './pages/account-statuses';\nimport Bookmarks from './pages/bookmarks';\nimport Favourites from './pages/favourites';\nimport FollowedHashtags from './pages/followed-hashtags';\nimport Following from './pages/following';\nimport Hashtag from './pages/hashtag';\nimport Home from './pages/home';\nimport HttpRoute from './pages/http-route';\nimport List from './pages/list';\nimport Lists from './pages/lists';\nimport Login from './pages/login';\nimport Mentions from './pages/mentions';\nimport Notifications from './pages/notifications';\nimport Public from './pages/public';\nimport Search from './pages/search';\nimport StatusRoute from './pages/status-route';\nimport Trending from './pages/trending';\nimport Welcome from './pages/welcome';\nimport {\n  api,\n  initAccount,\n  initClient,\n  initInstance,\n  initPreferences,\n} from './utils/api';\nimport { getAccessToken } from './utils/auth';\nimport focusDeck from './utils/focus-deck';\nimport states, { initStates } from './utils/states';\nimport store from './utils/store';\nimport { getCurrentAccount } from './utils/store-utils';\nimport './utils/toast-alert';\n\nwindow.__STATES__ = states;\n\n// Preload icons\n// There's probably a better way to do this\n// Related: https://github.com/vitejs/vite/issues/10600\nsetTimeout(() => {\n  for (const icon in ICONS) {\n    if (Array.isArray(ICONS[icon])) {\n      ICONS[icon][0]?.();\n    } else {\n      ICONS[icon]?.();\n    }\n  }\n}, 5000);\n\nfunction App() {\n  const snapStates = useSnapshot(states);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [uiState, setUIState] = useState('loading');\n\n  useLayoutEffect(() => {\n    const theme = store.local.get('theme');\n    if (theme) {\n      document.documentElement.classList.add(`is-${theme}`);\n      document\n        .querySelector('meta[name=\"color-scheme\"]')\n        .setAttribute('content', theme === 'auto' ? 'dark light' : theme);\n    }\n    const textSize = store.local.get('textSize');\n    if (textSize) {\n      document.documentElement.style.setProperty(\n        '--text-size',\n        `${textSize}px`,\n      );\n    }\n  }, []);\n\n  useEffect(() => {\n    const instanceURL = store.local.get('instanceURL');\n    const code = decodeURIComponent(\n      (window.location.search.match(/code=([^&]+)/) || [, ''])[1],\n    );\n\n    if (code) {\n      console.log({ code });\n      // Clear the code from the URL\n      window.history.replaceState({}, document.title, location.pathname || '/');\n\n      const clientID = store.session.get('clientID');\n      const clientSecret = store.session.get('clientSecret');\n      const vapidKey = store.session.get('vapidKey');\n\n      (async () => {\n        setUIState('loading');\n        const { access_token: accessToken } = await getAccessToken({\n          instanceURL,\n          client_id: clientID,\n          client_secret: clientSecret,\n          code,\n        });\n\n        const client = initClient({ instance: instanceURL, accessToken });\n        await Promise.allSettled([\n          initInstance(client, instanceURL),\n          initAccount(client, instanceURL, accessToken, vapidKey),\n        ]);\n        initStates();\n        initPreferences(client);\n\n        setIsLoggedIn(true);\n        setUIState('default');\n      })();\n    } else {\n      window.__IGNORE_GET_ACCOUNT_ERROR__ = true;\n      const account = getCurrentAccount();\n      if (account) {\n        store.session.set('currentAccount', account.info.id);\n        const { client } = api({ account });\n        const { instance } = client;\n        // console.log('masto', masto);\n        initStates();\n        initPreferences(client);\n        setUIState('loading');\n        (async () => {\n          try {\n            await initInstance(client, instance);\n          } catch (e) {\n          } finally {\n            setIsLoggedIn(true);\n            setUIState('default');\n          }\n        })();\n      } else {\n        setUIState('default');\n      }\n    }\n  }, []);\n\n  let location = useLocation();\n  states.currentLocation = location.pathname;\n\n  useEffect(focusDeck, [location, isLoggedIn]);\n\n  const prevLocation = snapStates.prevLocation;\n  const backgroundLocation = useRef(prevLocation || null);\n  const isModalPage = useMemo(() => {\n    return (\n      matchPath('/:instance/s/:id', location.pathname) ||\n      matchPath('/s/:id', location.pathname)\n    );\n  }, [location.pathname, matchPath]);\n  if (isModalPage) {\n    if (!backgroundLocation.current) backgroundLocation.current = prevLocation;\n  } else {\n    backgroundLocation.current = null;\n  }\n  console.debug({\n    backgroundLocation: backgroundLocation.current,\n    location,\n  });\n\n  if (/\\/https?:/.test(location.pathname)) {\n    return <HttpRoute />;\n  }\n\n  const nonRootLocation = useMemo(() => {\n    const { pathname } = location;\n    return !/^\\/(login|welcome)/.test(pathname);\n  }, [location]);\n\n  // Change #app dataset based on snapStates.settings.shortcutsViewMode\n  useEffect(() => {\n    const $app = document.getElementById('app');\n    if ($app) {\n      $app.dataset.shortcutsViewMode = snapStates.shortcuts?.length\n        ? snapStates.settings.shortcutsViewMode\n        : '';\n    }\n  }, [snapStates.shortcuts, snapStates.settings.shortcutsViewMode]);\n\n  // Add/Remove cloak class to body\n  useEffect(() => {\n    const $body = document.body;\n    $body.classList.toggle('cloak', snapStates.settings.cloakMode);\n  }, [snapStates.settings.cloakMode]);\n\n  return (\n    <>\n      <Routes location={nonRootLocation || location}>\n        <Route\n          path=\"/\"\n          element={\n            isLoggedIn ? (\n              <Home />\n            ) : uiState === 'loading' ? (\n              <Loader id=\"loader-root\" />\n            ) : (\n              <Welcome />\n            )\n          }\n        />\n        <Route path=\"/login\" element={<Login />} />\n        <Route path=\"/welcome\" element={<Welcome />} />\n      </Routes>\n      <Routes location={backgroundLocation.current || location}>\n        {isLoggedIn && (\n          <Route path=\"/notifications\" element={<Notifications />} />\n        )}\n        {isLoggedIn && <Route path=\"/mentions\" element={<Mentions />} />}\n        {isLoggedIn && <Route path=\"/following\" element={<Following />} />}\n        {isLoggedIn && <Route path=\"/b\" element={<Bookmarks />} />}\n        {isLoggedIn && <Route path=\"/f\" element={<Favourites />} />}\n        {isLoggedIn && (\n          <Route path=\"/l\">\n            <Route index element={<Lists />} />\n            <Route path=\":id\" element={<List />} />\n          </Route>\n        )}\n        {isLoggedIn && <Route path=\"/ft\" element={<FollowedHashtags />} />}\n        <Route path=\"/:instance?/t/:hashtag\" element={<Hashtag />} />\n        <Route path=\"/:instance?/a/:id\" element={<AccountStatuses />} />\n        <Route path=\"/:instance?/p\">\n          <Route index element={<Public />} />\n          <Route path=\"l\" element={<Public local />} />\n        </Route>\n        <Route path=\"/:instance?/trending\" element={<Trending />} />\n        <Route path=\"/:instance?/search\" element={<Search />} />\n        {/* <Route path=\"/:anything\" element={<NotFound />} /> */}\n      </Routes>\n      {uiState === 'default' && (\n        <Routes>\n          <Route path=\"/:instance?/s/:id\" element={<StatusRoute />} />\n        </Routes>\n      )}\n      {isLoggedIn && <ComposeButton />}\n      {isLoggedIn &&\n        !snapStates.settings.shortcutsColumnsMode &&\n        snapStates.settings.shortcutsViewMode !== 'multi-column' && (\n          <Shortcuts />\n        )}\n      <Modals />\n      {isLoggedIn && <NotificationService />}\n      <BackgroundService isLoggedIn={isLoggedIn} />\n      {uiState !== 'loading' && <SearchCommand onClose={focusDeck} />}\n      <KeyboardShortcutsHelp />\n    </>\n  );\n}\n\nexport { App };\n","import './index.css';\n\nimport './cloak-mode.css';\n\nimport { render } from 'preact';\nimport { HashRouter } from 'react-router-dom';\n\nimport { App } from './app';\n\nif (import.meta.env.DEV) {\n  import('preact/debug');\n}\n\nrender(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('app'),\n);\n\n// Storage cleanup\nsetTimeout(() => {\n  try {\n    // Clean up iconify localStorage\n    Object.keys(localStorage).forEach((key) => {\n      if (key.startsWith('iconify')) {\n        localStorage.removeItem(key);\n      }\n    });\n    Object.keys(sessionStorage).forEach((key) => {\n      if (key.startsWith('iconify')) {\n        sessionStorage.removeItem(key);\n      }\n    });\n\n    // Clean up old settings key\n    localStorage.removeItem('settings:boostsCarousel');\n  } catch (e) {}\n}, 5000);\n\nwindow.__CLOAK__ = () => {\n  document.body.classList.toggle('cloak');\n};\n"],"names":["usePageVisibility","fn","deps","savedCallback","useRef","useEffect","current","handleVisibilityChange","hidden","document","visibilityState","console","BackgroundService","memo","isLoggedIn","visible","setVisible","useState","sub","masto","streaming","instance","api","states","notificationsLast","notificationsIterator","v1","notifications","list","limit","since_id","id","value","next","length","lastReadId","markers","fetch","timeline","notificationsShowNew","user","notification","subscribe","log","entry","_a","lastCheckDate","checkForUpdates","info","Date","catch","diff","ComposeButton","handleButton","e","shiftKey","openCompose","alert","showCompose","useHotkeys","ignoreEventWhen","querySelector","_jsx","type","onClick","children","Icon","icon","size","alt","KeyboardShortcutsHelp","snapStates","useSnapshot","onClose","showKeyboardShortcutsHelp","hasModal","escRef","Modal","class","_jsxs","tabindex","ref","action","keys","_Fragment","map","Accounts","accounts","store","local","getJSON","currentAccount","session","get","moreThanOneAccount","currentDefault","setCurrentDefault","_","reload","useReducer","x","tabIndex","account","i","isCurrent","isDefault","Avatar","url","avatarStatic","onDblClick","$select","NameText","test","showAcct","set","Menu","align","menuButton","title","MenuItem","MenuDivider","disabled","splice","MenuConfirm","subMenu","confirmLabel","menuItemClassName","href","Link","to","logo","createBackendPushSubscription","subscription","push","create","fetchBackendPushSubscription","updateBackendPushSubscription","update","removeBackendPushSubscription","remove","isPushSupported","navigator","window","getRegistration","serviceWorker","getSubscription","registration","pushManager","undefined","urlBase64ToUint8Array","base64String","padding","repeat","base64","replace","rawData","atob","outputArray","Uint8Array","charCodeAt","initSubscription","backendSubscription","err","message","sameEndpoint","vapidKey","sameKey","getCurrentAccount","applicationServerKey","vapidKeyStr","applicationServerKeyStr","updateSubscription","data","policy","removeSubscription","userVisibleOnly","DEFAULT_TEXT_SIZE","TEXT_SIZES","Settings","currentTheme","themeFormRef","targetLanguage","settings","contentTranslationTargetLanguage","systemTargetLanguage","getTranslateTargetLanguage","systemTargetLanguageText","localeCode2Text","currentTextSize","prefs","setPrefs","authenticated","onInput","formData","FormData","theme","html","classList","toggle","name","defaultChecked","fontSize","min","max","step","parseInt","documentElement","setProperty","for","target","source","rel","checked","autoRefresh","boostsCarousel","contentTranslation","onChange","targetLanguages","lang","code","contentTranslationHideLanguages","contentTranslationAutoInline","cloakMode","PushNotificationsSection","style","display","gap","lineHeight","src","width","aspectRatio","verticalAlign","borderRadius","showAccount","__BUILD_TIME__","RelativeTime","datetime","__COMMIT_HASH__","pushFormRef","uiState","setAllowNotifications","previousPolicyRef","allowNofitications","needRelogin","setUIState","alerts","elements","policyEl","Object","forEach","el","isLoading","values","mention","favourite","reblog","follow","follow_request","poll","alertsCount","params","key","allowNofitications2","policyChanged","warn","permission","label","alert2","focusDeck","timer","setTimeout","columns","getElementById","modals","querySelectorAll","modal","modalFocusElement","focus","backDrop","pages","page","ListAddEdit","editMode","nameFieldRef","repliesPolicyFieldRef","exclusiveFieldRef","repliesPolicy","exclusive","supportsExclusive","supports","onSubmit","preventDefault","listResult","replies_policy","MUTE_DURATIONS","MUTE_DURATIONS_LABELS","LIMIT","ACCOUNT_INFO_MAX_AGE","fetchFamiliarFollowers","currentID","familiarFollowers","memFetchFamiliarFollowers","mem","maxAge","fetchPostingStats","accountID","fetchStatuses","statuses","total","originals","replies","status","stats","boosts","memFetchPostingStats","fetchAccount","standalone","currentMasto","isString","sameCurrentInstance","useMemo","setInfo","info2","acct","avatar","bot","createdAt","displayName","emojis","fields","group","lastStatusAt","locked","note","statusesCount","username","memorial","moved","roles","header","headerStatic","headerIsAvatar","accountInstance","headerCornerColors","hostname","domain","setHeaderCornerColors","followersIterator","familiarFollowersCache","firstLoad","isSelf","results","newValue","familiarFollowers2","account2","familiar","fetchFollowing","followingIterator","LinkOrDiv","setFamiliarFollowers","accountLink","hasPostingStats","renderFamiliarFollowers","FAMILIAR_FOLLOWERS_LIMIT","setPostingStats","setPostingStatsUIState","useCallback","onRelationshipChange","relationship","following","crossOrigin","ctx","canvas","add","createElement","getContext","pixelDimension","willReadFrequently","r","g","height","colors","getImageData","b","a","dataLength","color","lightenRGB","rgbColors","avatarSize","role","enhanceContent","dir","handleContentLinks","__html","verifiedAt","EmojiText","fetchFollowers","follower","followersCount","followingCount","shortenNumber","hideAllModals","postingStats","round","daysSinceLastPost","postingStatsUIState","renderPostingStats","RelatedActions","currentInstance","setRelationshipUIState","setRelationship","endorsed","showingReblogs","notifying","followedBy","blocking","blockedBy","muting","mutingNotifications","requested","domainBlocking","currentInfo","acctHasInstance","setCurrentInfo","sameInstance","q","setIsSelf","relationships","relationship2","loading","setShowTranslatedBio","showAddRemoveLists","setShowAddRemoveLists","updateAccount","niceDateTime","relationshipUIState","menuInstanceRef","showTranslatedBio","_b","instanceRef","portal","body","currentAuthenticated","draftStatus","niceAccountURL","clipboard","showToast","newRelationship","SubMenu","counter","error","direction","duration","Loader","TranslatedBioSheet","luminence","alpha","pathname","path","host","Math","getHTMLText","text","fieldsText","urlObj","lists","setLists","setListsContainingAccount","c","lists2","listsContainingAccount2","reloadCount","showListAddEditModal","setShowListAddEditModal","AddRemoveListsSheet","listsContainingAccount","inList","accountIds","result","AccountSheet","propInstance","closest","destination","AccountInfo","lookup","skip_webfinger","v2","search","resolve","URL","Drafts","drafts","setDrafts","db","ns","getCurrentAccountNS","ownKeys","filter","startsWith","getMany","sort","updatedAt","getTime","hasDrafts","abrupt","draft","replyTo","updatedAtDate","replyToStatus","MiniDraft","spoilerText","mediaAttachments","hasPoll","options","hasMedia","firstImageMedia","media","image","file","objectURL","createObjectURL","hasPollOrMedia","GenericAccounts","setAccounts","showMore","setShowMore","showGenericAccounts","heading","fetchAccounts","staticAccounts","showReactions","loadAccounts","done","Array","isArray","prev","reloadGenericAccounts","AccountBlock","_types","InView","MediaAltModal","forceTranslate","setForceTranslate","differentLanguage","localeMatch","find","l","whiteSpace","TranslationBlock","sourceLanguage","MediaModal","statusID","index","carouselRef","currentIndex","setCurrentIndex","carouselFocusItem","useLayoutEffect","scrollIntoView","prevStatusID","scrollLeft","clientWidth","differentStatusID","scrollTo","left","behavior","showControls","setShowControls","handleSwipe","addEventListener","removeEventListener","showMediaAlt","setShowMediaAlt","handleScroll","passive","clearTimeout","contains","blurhash","rgbAverageColor","getBlurHashAverageColor","join","currentTarget","description","Media","showOriginal","stopPropagation","overflow","position","boundingBoxPadding","menuClassName","MenuLink","remoteUrl","matchMedia","matches","floatingButtonUrl","multiColumnUrl$1","tabMenuBarUrl","AsyncText","setText","Promise","then","SHORTCUTS_LIMIT","TYPES","TYPE_TEXT","public","bookmarks","favourites","hashtag","trending","mentions","TYPE_PARAMS","placeholder","notRequired","pattern","SHORTCUTS_META","cacheKey","subtitle","query","split","ShortcutsSettings","shortcuts","followedHashtags","setFollowedHashtags","showForm","setShowForm","showImportExport","setShowImportExport","iterator","tags","imgURL","multiColumnUrl","shortcut","shortcutsArr","temp","justifyContent","alignItems","shortcutIndex","ImportExport","currentType","formRef","form","input","setCurrentType","mode","required","defaultValue","tag","spellcheck","shortcutsStr","parsedImportShortcutStr","setImportUIState","importUIState","decompressFromEncodedURIComponent","importShortcutStr","parsed","JSON","hasCurrentSettings","setImportShortcutStr","s","opacity","some","nonUniqueShortcuts","menuFooter","every","exceededLimit","newShortcuts","share","changes","prevValue","Modals","navigate","useNavigate","location","useLocation","Compose","__COMPOSE__","editStatus","newStatus","reloadStatusPage","post","reply","edit","delay","toast","hideToast","prevLocation","showSettings","showAccounts","showDrafts","showMediaModal","showShortcutsSettings","FollowRequestButtons","requestState","setRequestState","hasRelationship","followRequests","authorize","Error","NOTIFICATION_ICONS","contentText","count","reblog_reply","favourite_reply","AVATARS_LIMIT","Notification","isStatic","_accounts","_statuses","actualStatus","actualStatusID","isVoted","voted","isReplyToOthers","inReplyToAccountId","favsCount","reblogsCount","includes","formattedCreatedAt","toLocaleString","genericAccountsHeading","handleOpenGenericAccounts","showAvatar","format","slice","squircle","TruncatedLink","Status","onContextMenu","metaKey","dispatchEvent","MouseEvent","clientX","clientY","props","useTruncated","NotificationService","routeNotification","accessToken","setShowNotificationSheet","showNotificationSheet","getAccountByAccessToken","isFollow","notificationAccount","hasAccount","hasStatus","event","id2","hash","accessToken2","handleMessage","clearAppBadge","tagName","instanceURL","SearchForm","forwardRef","searchParams","setSearchParams","useSearchParams","searchMenuOpen","setSearchMenuOpen","setQuery","searchFieldRef","useImperativeHandle","setValue","select","blur","encodeURIComponent","autocomplete","autocorrect","autocapitalize","onSearch","onFocus","onBlur","onKeyDown","focusItem","nextItem","nextElementSibling","from","parentElement","firstItem","prevItem","previousElementSibling","lastItem","click","top","SearchCommand","showSearch","setShowSearch","searchFormRef","isSearchPage","closeSearch","enabled","enableOnFormTags","Shortcuts","menuRef","formattedShortcuts","pin","Boolean","handler","closeMenu","shortcutsViewMode","updatesButton","viewScroll","Menu2","containerProps","useWindowSize","safeBoundingBoxPadding","repositionFlag","groupBoosts","newValues","boostStash","serialBoosts","item","boostStashID","items","half","floor","dedupeBoosts","boostedStatusIDs","filteredItems","statusKey","boosterID","groupContext","contexts","contextIndex","t","repliedItem","j","self","context","inReplyToId","firstItemAccountID","newItems","appliedContextIndices","contextItems","aDate","bDate","i2","useScroll","scrollableRef","distanceFromStart","distanceFromEnd","scrollThresholdStart","scrollThresholdEnd","distanceFromStartPx","_distanceFromStartPx","distanceFromEndPx","_distanceFromEndPx","scrollDirection","setScrollDirection","reachStart","setReachStart","reachEnd","setReachEnd","nearReachStart","setNearReachStart","nearReachEnd","setNearReachEnd","isVertical","scrollableElement","previousScrollStart","scrollTop","onScroll","scrollHeight","scrollWidth","clientHeight","scrollStart","scrollDimension","clientDimension","scrollDistance","abs","init","Event","NavMenu","setCurrentAccount","setMoreThanOneAccount","acc","showFollowing","shortcutsColumnsMode","bindLongPress","useLongPress","threshold","detect","cancelOnMovement","buttonRef","menuState","setMenuState","mutesIterator","fetchMutes","mutes","blocksIterator","fetchBlocks","blocks","open","state","ControlledMenu","anchorRef","zIndex","unmountOnClose","appVersion","commitHash","confirm","scrollIntoViewOptions","block","inline","Timeline","titleComponent","emptyText","errorText","useItemID","fetchItems","checkForUpdatesInterval","headerStart","headerEnd","timelineStart","allowFilters","refresh","setItems","showNew","setShowNew","debug","loadItems","useDebouncedCallback","items2","itemsSelector","jRef","activeItem","activeItemRect","getBoundingClientRect","allItems","activeItemIndex","indexOf","itemRect","topmostItem","kRef","findLast","oRef","idle","useIdle","loadOrCheckUpdates","disableHoverCheck","inBackground","visible2","timeDiff","hasUpdate","useInterval","lastHiddenTime","node","hiddenUI","_pinned","isCarousel","StatusCarousel","title2","_filtered","statusID2","reblog2","actualStatusID2","url2","isSpoiler","showCompact","_differentAuthor","manyItems","isMiddle","TimelineStatusCompact","inView","className","statusPeek","sKey","statusPeekText","statusThreadNumber","AccountStatuses","useParams","excludeReplies","excludeBoosts","tagged","accountStatusesIterator","fetchAccountStatuses","pinnedStatuses","pinned","saveStatus","pinnedStatusesIds","exclude_replies","exclude_reblogs","only_media","setAccount","featuredTags","setFeaturedTags","useTitle","featuredTags2","filterBarRef","TimelineStart","cachedAccount","filtered","active","allowSwitch","masto2","Bookmarks","bookmarksIterator","fetchBookmarks","Favourites","favouritesIterator","fetchFavourites","FollowedHashtags","followedTags","localeCompare","filteredItem","filterContext","currentAccountID","appliedFilters","f","hasContext","expiresAt","filterAction","isHidden","filterTitles","isWarn","titlesStr","Following","homeIterator","latestItem","payload","fetchHome","TAGS_LIMIT_PER_MODE","TOTAL_TAGS_LIMIT","Hashtags","columnMode","hashtags","trim","hashtagTitle","maxID","fetchHashtags","timelines","any","maxId","followUIState","setFollowUIState","reachLimit","setDownOverflow","finally","FocusableItem","newHashtag","MenuGroup","newInstance","List","listIterator","fetchList","setList","showManageMembersModal","setShowManageMembersModal","ListManageMembers","MEMBERS_LIMIT","listID","members","setMembers","membersIterator","fetchMembers","member","as","RemoveAddButton","removed","setRemoved","emptySearchParams","URLSearchParams","Mentions","stateType","setStateType","mentionsIterator","fetchMentions","types","conversationsIterator","latestConversationItem","lastStatus","fetchConversations","args","groupNotifications","notificationsMap","cleanNotifications","date","toLocaleDateString","virtualType","mappedNotification","mappedAccount","reverse","n","notificationsMap2","cleanNotifications2","Notifications","notificationID","notificationAccessToken","onlyMentions","setOnlyMentions","setFollowRequests","announcements","setAnnouncements","excludeTypes","allNotifications","groupedNotifications","notificationsLastFetchTime","fetchFollowRequests","loadFollowRequests","requests","fetchAnnouncements","loadNotifications","fetchNotificationsPromise","fetchNotifications","fetchFollowRequestsPromise","announcements2","fetchAnnouncementsPromise","loadUpdates","showTodayEmpty","todayDate","announcement","announcementsListRef","AnnouncementBlock","notificationDay","differentDay","currentDay","yesterdayDate","contact","getCurrentInstance","contactAccount","content","startsAt","allDay","read","endsAt","published","publishedAt","reactions","publishedAtDate","publishedDateText","updatedAtText","reaction","me","staticUrl","Public","isLocal","publicIterator","fetchPublic","prompt","toLowerCase","Trending","setHashtags","trendIterator","fetchTrend","trends","history","reduce","Columns","components","Hashtag","Component","Home","NotificationsLink","notificationLinkRef","NotificationsMenu","NOTIFICATIONS_LIMIT","NOTIFICATIONS_DISPLAY_LIMIT","skipThreading","now","hasFollowRequests","setHasFollowRequests","statusRegex","statusNoteRegex","getInstanceStatusURL","match","noteId","HttpRoute","statusURL","Lists","instancesListURL","VITE_CLIENT_NAME","CLIENT_NAME","VITE_WEBSITE","WEBSITE","import","SCOPES","registerApplication","registrationParams","client_name","redirect_uris","origin","scopes","website","method","headers","toString","json","registrationJSON","getAuthorizationURL","client_id","scope","redirect_uri","response_type","authorizationParams","authorizationURL","client_secret","grant_type","tokenResponse","Login","instanceURLRef","cachedInstanceURL","instanceText","setInstanceText","instancesList","setInstancesList","submitInstance","vapid_key","instance2","instancesSuggestions","bStartsWith","aStartsWith","textAlign","SHORT_LIMIT","Search","offsetRef","statusResults","setStatusResults","accountResults","setAccountResults","hashtagResults","setHashtagResults","setTypeResultsFunc","loadResults","offset","link","SUBCOMMENTS_OPEN_ALL_LIMIT","MAX_WEIGHT","cachedRepliesToggle","cachedStatusesMap","scrollPositions","resetScrollPosition","StatusPage","mediaParam","mediaOnlyParam","mediaIndex","showMedia","mediaStatusID","mediaStatus","getStatus","showMediaOnly","heroStatus","setHeroStatus","closeLink","matchStatusPath","matchPath","handleMediaClose","delete","language","StatusThread","translate","setStatuses","heroStatusRef","totalDescendants","debounce","scrollOffsets","reloadHero","heroTimer","cachedStatuses","reallyCachedStatuses","heroFetch","pRetry","contextFetch","heroStatus2","_replies","_r","expandReplies","repliesCount","weight","descendants","missingStatuses","ancestors2","ancestors","ancestorsIsThread","nestedDescendants","parent","__replies","ancestor","isThread","allStatuses","offsetTop","heroLimit","setLimit","scrollPosition","threadifyStatus","newScrollTop","newScrollOffsets","contextURL","initContext","statusWeightCache","div","apiCache","heroDisplayName","heroContentText","postInstance","hasDescendants","innerHTML","heroInView","activeStatusRect","activeStatus","allStatusLinks","activeStatusIndex","nextStatus","onView","setHeroInView","statusLink","heroPointer","topmostStatusLink","prevStatus","details","statusLinkRect","initialPageState","handleMediaClick","handleStatusLinkClick","viewMode","short","arr","button","MenuHeader","postSameInstance","buttons","descendant","thread","isHero","status2","SubComments","hasParentThread","openAll","level","diveDeep","replies2","replies3","totalComments","accWeight","totalWeight","calcStatusWeight","openBefore","detailsRef","sameCount","open2","shortReply","dataset","MEDIA_VIRTUAL_LENGTH","CARD_VIRTUAL_LENGTH","WEIGHT_SEGMENT","cachedWeight","card","htmlContentLength","mediaLength","pollLength","POLL_VIRTUAL_LENGTH","cardLength","StatusRoute","boostsCarouselUrl","groupedNotificationsUrl","multiHashtagTimelineUrl","nestedCommentsThreadUrl","logoText","Welcome","marginBlockEnd","nativeAlert","__nativeAlert","Toastify","gravity","y","__STATES__","ICONS","App","setIsLoggedIn","setAttribute","textSize","decodeURIComponent","clientSecret","access_token","initPreferences","client","allSettled","initStates","initInstance","backgroundLocation","nonRootLocation","$app","Routes","Route","$body","element","render","HashRouter","localStorage","removeItem","sessionStorage","__CLOAK__"],"mappings":"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"}